
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005950  08005950  00015950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a38  08005a38  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005a38  08005a38  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a38  08005a38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a38  08005a38  00015a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a3c  08005a3c  00015a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000213c  20000070  08005ab0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021ac  08005ab0  000221ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a5e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002373  00000000  00000000  00031afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00033e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  00034db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023afb  00000000  00000000  00035be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001035e  00000000  00000000  000596db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd105  00000000  00000000  00069a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146b3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c0  00000000  00000000  00146b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005938 	.word	0x08005938

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005938 	.word	0x08005938

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <printBuff>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void printBuff()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	if(counter == THRSHLD) return;
 8000276:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <printBuff+0x58>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	2b23      	cmp	r3, #35	; 0x23
 800027c:	d01f      	beq.n	80002be <printBuff+0x4e>
	for(int i = 0; i < ADC_BUFF_LEN; i++)
 800027e:	2300      	movs	r3, #0
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	e012      	b.n	80002aa <printBuff+0x3a>
	{
		printf("0x%04X ", adc_buff[i]);
 8000284:	4a11      	ldr	r2, [pc, #68]	; (80002cc <printBuff+0x5c>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800028c:	4619      	mov	r1, r3
 800028e:	4810      	ldr	r0, [pc, #64]	; (80002d0 <printBuff+0x60>)
 8000290:	f004 fb86 	bl	80049a0 <iprintf>
		if ((i % 16) == 0)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f003 030f 	and.w	r3, r3, #15
 800029a:	2b00      	cmp	r3, #0
 800029c:	d102      	bne.n	80002a4 <printBuff+0x34>
		{
			printf(" ...\n");
 800029e:	480d      	ldr	r0, [pc, #52]	; (80002d4 <printBuff+0x64>)
 80002a0:	f004 fc04 	bl	8004aac <puts>
	for(int i = 0; i < ADC_BUFF_LEN; i++)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	3301      	adds	r3, #1
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002b0:	dbe8      	blt.n	8000284 <printBuff+0x14>
		}
	}

	counter++;
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <printBuff+0x58>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	3301      	adds	r3, #1
 80002b8:	4a03      	ldr	r2, [pc, #12]	; (80002c8 <printBuff+0x58>)
 80002ba:	6013      	str	r3, [r2, #0]
 80002bc:	e000      	b.n	80002c0 <printBuff+0x50>
	if(counter == THRSHLD) return;
 80002be:	bf00      	nop
}
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	2000008c 	.word	0x2000008c
 80002cc:	20000198 	.word	0x20000198
 80002d0:	08005950 	.word	0x08005950
 80002d4:	08005958 	.word	0x08005958

080002d8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(hadc1);
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f001 f861 	bl	80013a8 <HAL_ADC_Stop_DMA>


	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80002e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ee:	f002 fbc1 	bl	8002a74 <HAL_GPIO_TogglePin>

	printBuff();
 80002f2:	f7ff ffbd 	bl	8000270 <printBuff>


	HAL_ADC_Start_DMA(hadc1, (uint32_t *)adc_buff, ADC_BUFF_LEN);
 80002f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002fa:	4904      	ldr	r1, [pc, #16]	; (800030c <HAL_ADC_ConvCpltCallback+0x34>)
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f000 ffcf 	bl	80012a0 <HAL_ADC_Start_DMA>

}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000198 	.word	0x20000198

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f000 fbf1 	bl	8000afa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f81c 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031c:	f000 f964 	bl	80005e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000320:	f000 f944 	bl	80005ac <MX_DMA_Init>
  MX_ADC1_Init();
 8000324:	f000 f866 	bl	80003f4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000328:	f000 f8ca 	bl	80004c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800032c:	4806      	ldr	r0, [pc, #24]	; (8000348 <main+0x38>)
 800032e:	f003 fd7f 	bl	8003e30 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000332:	2100      	movs	r1, #0
 8000334:	4804      	ldr	r0, [pc, #16]	; (8000348 <main+0x38>)
 8000336:	f003 fdc7 	bl	8003ec8 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, ADC_BUFF_LEN);
 800033a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800033e:	4903      	ldr	r1, [pc, #12]	; (800034c <main+0x3c>)
 8000340:	4803      	ldr	r0, [pc, #12]	; (8000350 <main+0x40>)
 8000342:	f000 ffad 	bl	80012a0 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000346:	e7fe      	b.n	8000346 <main+0x36>
 8000348:	2000014c 	.word	0x2000014c
 800034c:	20000198 	.word	0x20000198
 8000350:	200000a0 	.word	0x200000a0

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b096      	sub	sp, #88	; 0x58
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	2244      	movs	r2, #68	; 0x44
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f004 fb14 	bl	8004990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	463b      	mov	r3, r7
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000376:	f44f 7000 	mov.w	r0, #512	; 0x200
 800037a:	f002 fba3 	bl	8002ac4 <HAL_PWREx_ControlVoltageScaling>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000384:	f000 f97c 	bl	8000680 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000388:	2301      	movs	r3, #1
 800038a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800038c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000392:	2302      	movs	r3, #2
 8000394:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000396:	2303      	movs	r3, #3
 8000398:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 6;
 800039a:	2306      	movs	r3, #6
 800039c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 80;
 800039e:	2350      	movs	r3, #80	; 0x50
 80003a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003a2:	2307      	movs	r3, #7
 80003a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003a6:	2302      	movs	r3, #2
 80003a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80003aa:	2304      	movs	r3, #4
 80003ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 fbdc 	bl	8002b70 <HAL_RCC_OscConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003be:	f000 f95f 	bl	8000680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	230f      	movs	r3, #15
 80003c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c6:	2303      	movs	r3, #3
 80003c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003d6:	463b      	mov	r3, r7
 80003d8:	2104      	movs	r1, #4
 80003da:	4618      	mov	r0, r3
 80003dc:	f002 ffda 	bl	8003394 <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003e6:	f000 f94b 	bl	8000680 <Error_Handler>
  }
}
 80003ea:	bf00      	nop
 80003ec:	3758      	adds	r7, #88	; 0x58
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fa:	463b      	mov	r3, r7
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
 8000408:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800040a:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <MX_ADC1_Init+0xc0>)
 800040c:	4a2a      	ldr	r2, [pc, #168]	; (80004b8 <MX_ADC1_Init+0xc4>)
 800040e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000410:	4b28      	ldr	r3, [pc, #160]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000412:	2200      	movs	r2, #0
 8000414:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000416:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041c:	4b25      	ldr	r3, [pc, #148]	; (80004b4 <MX_ADC1_Init+0xc0>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000422:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000428:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <MX_ADC1_Init+0xc0>)
 800042a:	2204      	movs	r2, #4
 800042c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800042e:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000430:	2200      	movs	r2, #0
 8000432:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000434:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000436:	2200      	movs	r2, #0
 8000438:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800043a:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <MX_ADC1_Init+0xc0>)
 800043c:	2201      	movs	r2, #1
 800043e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000440:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000442:	2200      	movs	r2, #0
 8000444:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000448:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_ADC1_Init+0xc0>)
 800044a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000456:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <MX_ADC1_Init+0xc0>)
 800045a:	2201      	movs	r2, #1
 800045c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000462:	2200      	movs	r2, #0
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000468:	2200      	movs	r2, #0
 800046a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800046e:	4811      	ldr	r0, [pc, #68]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000470:	f000 fdce 	bl	8001010 <HAL_ADC_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800047a:	f000 f901 	bl	8000680 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <MX_ADC1_Init+0xc8>)
 8000480:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000482:	2306      	movs	r3, #6
 8000484:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800048a:	237f      	movs	r3, #127	; 0x7f
 800048c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800048e:	2304      	movs	r3, #4
 8000490:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000496:	463b      	mov	r3, r7
 8000498:	4619      	mov	r1, r3
 800049a:	4806      	ldr	r0, [pc, #24]	; (80004b4 <MX_ADC1_Init+0xc0>)
 800049c:	f000 fffa 	bl	8001494 <HAL_ADC_ConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80004a6:	f000 f8eb 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	3718      	adds	r7, #24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	200000a0 	.word	0x200000a0
 80004b8:	50040000 	.word	0x50040000
 80004bc:	14f00020 	.word	0x14f00020

080004c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	; 0x30
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c6:	f107 0320 	add.w	r3, r7, #32
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004ec:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <MX_TIM1_Init+0xe4>)
 80004ee:	4a2e      	ldr	r2, [pc, #184]	; (80005a8 <MX_TIM1_Init+0xe8>)
 80004f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004f2:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <MX_TIM1_Init+0xe4>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f8:	4b2a      	ldr	r3, [pc, #168]	; (80005a4 <MX_TIM1_Init+0xe4>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000 - 1;
 80004fe:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <MX_TIM1_Init+0xe4>)
 8000500:	f242 720f 	movw	r2, #9999	; 0x270f
 8000504:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000506:	4b27      	ldr	r3, [pc, #156]	; (80005a4 <MX_TIM1_Init+0xe4>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800050c:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <MX_TIM1_Init+0xe4>)
 800050e:	2200      	movs	r2, #0
 8000510:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000512:	4b24      	ldr	r3, [pc, #144]	; (80005a4 <MX_TIM1_Init+0xe4>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000518:	4822      	ldr	r0, [pc, #136]	; (80005a4 <MX_TIM1_Init+0xe4>)
 800051a:	f003 fc31 	bl	8003d80 <HAL_TIM_Base_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000524:	f000 f8ac 	bl	8000680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800052c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	4619      	mov	r1, r3
 8000534:	481b      	ldr	r0, [pc, #108]	; (80005a4 <MX_TIM1_Init+0xe4>)
 8000536:	f003 fea2 	bl	800427e <HAL_TIM_ConfigClockSource>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000540:	f000 f89e 	bl	8000680 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000544:	4817      	ldr	r0, [pc, #92]	; (80005a4 <MX_TIM1_Init+0xe4>)
 8000546:	f003 fd9d 	bl	8004084 <HAL_TIM_IC_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000550:	f000 f896 	bl	8000680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000554:	2320      	movs	r3, #32
 8000556:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	4619      	mov	r1, r3
 8000566:	480f      	ldr	r0, [pc, #60]	; (80005a4 <MX_TIM1_Init+0xe4>)
 8000568:	f004 f982 	bl	8004870 <HAL_TIMEx_MasterConfigSynchronization>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000572:	f000 f885 	bl	8000680 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800057a:	2301      	movs	r3, #1
 800057c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	4619      	mov	r1, r3
 800058c:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_TIM1_Init+0xe4>)
 800058e:	f003 fdda 	bl	8004146 <HAL_TIM_IC_ConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000598:	f000 f872 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800059c:	bf00      	nop
 800059e:	3730      	adds	r7, #48	; 0x30
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000014c 	.word	0x2000014c
 80005a8:	40012c00 	.word	0x40012c00

080005ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_DMA_Init+0x38>)
 80005b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <MX_DMA_Init+0x38>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6493      	str	r3, [r2, #72]	; 0x48
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_DMA_Init+0x38>)
 80005c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	200b      	movs	r0, #11
 80005d0:	f001 fe51 	bl	8002276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005d4:	200b      	movs	r0, #11
 80005d6:	f001 fe6a 	bl	80022ae <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_GPIO_Init+0x94>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <MX_GPIO_Init+0x94>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_GPIO_Init+0x94>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_GPIO_Init+0x94>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a18      	ldr	r2, [pc, #96]	; (800067c <MX_GPIO_Init+0x94>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_GPIO_Init+0x94>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <MX_GPIO_Init+0x94>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	4a12      	ldr	r2, [pc, #72]	; (800067c <MX_GPIO_Init+0x94>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_GPIO_Init+0x94>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f002 f9f8 	bl	8002a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	4619      	mov	r1, r3
 800066c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000670:	f002 f86e 	bl	8002750 <HAL_GPIO_Init>

}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000688:	e7fe      	b.n	8000688 <Error_Handler+0x8>
	...

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <HAL_MspInit+0x44>)
 8000694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000696:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <HAL_MspInit+0x44>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6613      	str	r3, [r2, #96]	; 0x60
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <HAL_MspInit+0x44>)
 80006a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <HAL_MspInit+0x44>)
 80006ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <HAL_MspInit+0x44>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6593      	str	r3, [r2, #88]	; 0x58
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_MspInit+0x44>)
 80006b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000

080006d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b0a0      	sub	sp, #128	; 0x80
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	225c      	movs	r2, #92	; 0x5c
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 f94b 	bl	8004990 <memset>
  if(hadc->Instance==ADC1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a3b      	ldr	r2, [pc, #236]	; (80007ec <HAL_ADC_MspInit+0x118>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d16e      	bne.n	80007e2 <HAL_ADC_MspInit+0x10e>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000704:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000708:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800070a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800070e:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000710:	2303      	movs	r3, #3
 8000712:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 6;
 8000714:	2306      	movs	r3, #6
 8000716:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 43;
 8000718:	232b      	movs	r3, #43	; 0x2b
 800071a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800071c:	2307      	movs	r3, #7
 800071e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000724:	2304      	movs	r3, #4
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	4618      	mov	r0, r3
 8000734:	f003 f81a 	bl	800376c <HAL_RCCEx_PeriphCLKConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800073e:	f7ff ff9f 	bl	8000680 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000742:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <HAL_ADC_MspInit+0x11c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <HAL_ADC_MspInit+0x11c>)
 8000748:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <HAL_ADC_MspInit+0x11c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <HAL_ADC_MspInit+0x11c>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a24      	ldr	r2, [pc, #144]	; (80007f0 <HAL_ADC_MspInit+0x11c>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <HAL_ADC_MspInit+0x11c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000772:	2301      	movs	r3, #1
 8000774:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000776:	230b      	movs	r3, #11
 8000778:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000782:	4619      	mov	r1, r3
 8000784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000788:	f001 ffe2 	bl	8002750 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <HAL_ADC_MspInit+0x120>)
 800078e:	4a1a      	ldr	r2, [pc, #104]	; (80007f8 <HAL_ADC_MspInit+0x124>)
 8000790:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <HAL_ADC_MspInit+0x120>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <HAL_ADC_MspInit+0x120>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <HAL_ADC_MspInit+0x120>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <HAL_ADC_MspInit+0x120>)
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_ADC_MspInit+0x120>)
 80007ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <HAL_ADC_MspInit+0x120>)
 80007b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_ADC_MspInit+0x120>)
 80007bc:	2220      	movs	r2, #32
 80007be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <HAL_ADC_MspInit+0x120>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007c6:	480b      	ldr	r0, [pc, #44]	; (80007f4 <HAL_ADC_MspInit+0x120>)
 80007c8:	f001 fd8c 	bl	80022e4 <HAL_DMA_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80007d2:	f7ff ff55 	bl	8000680 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <HAL_ADC_MspInit+0x120>)
 80007da:	64da      	str	r2, [r3, #76]	; 0x4c
 80007dc:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <HAL_ADC_MspInit+0x120>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007e2:	bf00      	nop
 80007e4:	3780      	adds	r7, #128	; 0x80
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	50040000 	.word	0x50040000
 80007f0:	40021000 	.word	0x40021000
 80007f4:	20000104 	.word	0x20000104
 80007f8:	40020008 	.word	0x40020008

080007fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a18      	ldr	r2, [pc, #96]	; (800087c <HAL_TIM_Base_MspInit+0x80>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d129      	bne.n	8000872 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <HAL_TIM_Base_MspInit+0x84>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000822:	4a17      	ldr	r2, [pc, #92]	; (8000880 <HAL_TIM_Base_MspInit+0x84>)
 8000824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000828:	6613      	str	r3, [r2, #96]	; 0x60
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_TIM_Base_MspInit+0x84>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_TIM_Base_MspInit+0x84>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a11      	ldr	r2, [pc, #68]	; (8000880 <HAL_TIM_Base_MspInit+0x84>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_TIM_Base_MspInit+0x84>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800084e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000860:	2301      	movs	r3, #1
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086e:	f001 ff6f 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40012c00 	.word	0x40012c00
 8000880:	40021000 	.word	0x40021000

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 f968 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <DMA1_Channel1_IRQHandler+0x10>)
 80008de:	f001 fe57 	bl	8002590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000104 	.word	0x20000104

080008ec <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <ITM_SendChar+0x48>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <ITM_SendChar+0x48>)
 80008fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000900:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <ITM_SendChar+0x4c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <ITM_SendChar+0x4c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800090e:	bf00      	nop
 8000910:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0f8      	beq.n	8000910 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800091e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	6013      	str	r3, [r2, #0]
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000edfc 	.word	0xe000edfc
 8000938:	e0000e00 	.word	0xe0000e00

0800093c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	e00a      	b.n	8000964 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800094e:	f3af 8000 	nop.w
 8000952:	4601      	mov	r1, r0
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	60ba      	str	r2, [r7, #8]
 800095a:	b2ca      	uxtb	r2, r1
 800095c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	3301      	adds	r3, #1
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	429a      	cmp	r2, r3
 800096a:	dbf0      	blt.n	800094e <_read+0x12>
	}

return len;
 800096c:	687b      	ldr	r3, [r7, #4]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b086      	sub	sp, #24
 800097a:	af00      	add	r7, sp, #0
 800097c:	60f8      	str	r0, [r7, #12]
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	e009      	b.n	800099c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);   // This sends to the trace
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	60ba      	str	r2, [r7, #8]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ffab 	bl	80008ec <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3301      	adds	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	dbf1      	blt.n	8000988 <_write+0x12>
	}
	return len;
 80009a4:	687b      	ldr	r3, [r7, #4]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_close>:

int _close(int file)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
	return -1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009d6:	605a      	str	r2, [r3, #4]
	return 0;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <_isatty>:

int _isatty(int file)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
	return 1;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
	return 0;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a20:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <_sbrk+0x5c>)
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <_sbrk+0x60>)
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d102      	bne.n	8000a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <_sbrk+0x64>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <_sbrk+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d207      	bcs.n	8000a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a48:	f003 ff78 	bl	800493c <__errno>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	220c      	movs	r2, #12
 8000a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a56:	e009      	b.n	8000a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <_sbrk+0x64>)
 8000a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20010000 	.word	0x20010000
 8000a78:	00000400 	.word	0x00000400
 8000a7c:	20000090 	.word	0x20000090
 8000a80:	200021b0 	.word	0x200021b0

08000a84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <SystemInit+0x20>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <SystemInit+0x20>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aac:	f7ff ffea 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	; (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	; (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f003 ff37 	bl	8004948 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ada:	f7ff fc19 	bl	8000310 <main>

08000ade <LoopForever>:

LoopForever:
    b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000aec:	08005a40 	.word	0x08005a40
  ldr r2, =_sbss
 8000af0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000af4:	200021ac 	.word	0x200021ac

08000af8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_IRQHandler>

08000afa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f001 fbab 	bl	8002260 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f000 f80e 	bl	8000b2c <HAL_InitTick>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d002      	beq.n	8000b1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	71fb      	strb	r3, [r7, #7]
 8000b1a:	e001      	b.n	8000b20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b1c:	f7ff fdb6 	bl	800068c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b20:	79fb      	ldrb	r3, [r7, #7]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_InitTick+0x6c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d023      	beq.n	8000b88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <HAL_InitTick+0x70>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_InitTick+0x6c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fbb7 	bl	80022ca <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d10f      	bne.n	8000b82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d809      	bhi.n	8000b7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b70:	f001 fb81 	bl	8002276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <HAL_InitTick+0x74>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	e007      	b.n	8000b8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	73fb      	strb	r3, [r7, #15]
 8000b80:	e004      	b.n	8000b8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	73fb      	strb	r3, [r7, #15]
 8000b86:	e001      	b.n	8000b8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x20>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20002198 	.word	0x20002198

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <HAL_GetTick+0x14>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20002198 	.word	0x20002198

08000be4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	609a      	str	r2, [r3, #8]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	3360      	adds	r3, #96	; 0x60
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <LL_ADC_SetOffset+0x44>)
 8000c6e:	4013      	ands	r3, r2
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000c84:	bf00      	nop
 8000c86:	371c      	adds	r7, #28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	03fff000 	.word	0x03fff000

08000c94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3360      	adds	r3, #96	; 0x60
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	3360      	adds	r3, #96	; 0x60
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000cea:	bf00      	nop
 8000cec:	371c      	adds	r7, #28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e000      	b.n	8000d10 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3330      	adds	r3, #48	; 0x30
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	f003 030c 	and.w	r3, r3, #12
 8000d38:	4413      	add	r3, r2
 8000d3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	f003 031f 	and.w	r3, r3, #31
 8000d46:	211f      	movs	r1, #31
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	401a      	ands	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	0e9b      	lsrs	r3, r3, #26
 8000d54:	f003 011f 	and.w	r1, r3, #31
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	f003 031f 	and.w	r3, r3, #31
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	431a      	orrs	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d68:	bf00      	nop
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	3314      	adds	r3, #20
 8000d84:	461a      	mov	r2, r3
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	0e5b      	lsrs	r3, r3, #25
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	4413      	add	r3, r2
 8000d92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	0d1b      	lsrs	r3, r3, #20
 8000d9c:	f003 031f 	and.w	r3, r3, #31
 8000da0:	2107      	movs	r1, #7
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	401a      	ands	r2, r3
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	0d1b      	lsrs	r3, r3, #20
 8000dae:	f003 031f 	and.w	r3, r3, #31
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	fa01 f303 	lsl.w	r3, r1, r3
 8000db8:	431a      	orrs	r2, r3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000dbe:	bf00      	nop
 8000dc0:	371c      	adds	r7, #28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000de4:	43db      	mvns	r3, r3
 8000de6:	401a      	ands	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0318 	and.w	r3, r3, #24
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000df0:	40d9      	lsrs	r1, r3
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	400b      	ands	r3, r1
 8000df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	0007ffff 	.word	0x0007ffff

08000e14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000e24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6093      	str	r3, [r2, #8]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e4c:	d101      	bne.n	8000e52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e000      	b.n	8000e54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000e70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e9c:	d101      	bne.n	8000ea2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ec0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ec4:	f043 0201 	orr.w	r2, r3, #1
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ee8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000eec:	f043 0202 	orr.w	r2, r3, #2
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d101      	bne.n	8000f18 <LL_ADC_IsEnabled+0x18>
 8000f14:	2301      	movs	r3, #1
 8000f16:	e000      	b.n	8000f1a <LL_ADC_IsEnabled+0x1a>
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d101      	bne.n	8000f3e <LL_ADC_IsDisableOngoing+0x18>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <LL_ADC_IsDisableOngoing+0x1a>
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f60:	f043 0204 	orr.w	r2, r3, #4
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f88:	f043 0210 	orr.w	r2, r3, #16
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d101      	bne.n	8000fb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd6:	f043 0220 	orr.w	r2, r3, #32
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d101      	bne.n	8001002 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e12c      	b.n	8001284 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001034:	2b00      	cmp	r3, #0
 8001036:	d109      	bne.n	800104c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff fb4b 	bl	80006d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fef1 	bl	8000e38 <LL_ADC_IsDeepPowerDownEnabled>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d004      	beq.n	8001066 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fed7 	bl	8000e14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff0c 	bl	8000e88 <LL_ADC_IsInternalRegulatorEnabled>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d115      	bne.n	80010a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fef0 	bl	8000e60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001080:	4b82      	ldr	r3, [pc, #520]	; (800128c <HAL_ADC_Init+0x27c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	099b      	lsrs	r3, r3, #6
 8001086:	4a82      	ldr	r2, [pc, #520]	; (8001290 <HAL_ADC_Init+0x280>)
 8001088:	fba2 2303 	umull	r2, r3, r2, r3
 800108c:	099b      	lsrs	r3, r3, #6
 800108e:	3301      	adds	r3, #1
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001094:	e002      	b.n	800109c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	3b01      	subs	r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f9      	bne.n	8001096 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff feee 	bl	8000e88 <LL_ADC_IsInternalRegulatorEnabled>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10d      	bne.n	80010ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b6:	f043 0210 	orr.w	r2, r3, #16
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	f043 0201 	orr.w	r2, r3, #1
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff62 	bl	8000f9c <LL_ADC_REG_IsConversionOngoing>
 80010d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f040 80c5 	bne.w	8001272 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f040 80c1 	bne.w	8001272 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010f8:	f043 0202 	orr.w	r2, r3, #2
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fefb 	bl	8000f00 <LL_ADC_IsEnabled>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10b      	bne.n	8001128 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001110:	4860      	ldr	r0, [pc, #384]	; (8001294 <HAL_ADC_Init+0x284>)
 8001112:	f7ff fef5 	bl	8000f00 <LL_ADC_IsEnabled>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d105      	bne.n	8001128 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4619      	mov	r1, r3
 8001122:	485d      	ldr	r0, [pc, #372]	; (8001298 <HAL_ADC_Init+0x288>)
 8001124:	f7ff fd5e 	bl	8000be4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7e5b      	ldrb	r3, [r3, #25]
 800112c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001132:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001138:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800113e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001146:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d106      	bne.n	8001164 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	3b01      	subs	r3, #1
 800115c:	045b      	lsls	r3, r3, #17
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	2b00      	cmp	r3, #0
 800116a:	d009      	beq.n	8001180 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001178:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	4b45      	ldr	r3, [pc, #276]	; (800129c <HAL_ADC_Init+0x28c>)
 8001188:	4013      	ands	r3, r2
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6812      	ldr	r2, [r2, #0]
 800118e:	69b9      	ldr	r1, [r7, #24]
 8001190:	430b      	orrs	r3, r1
 8001192:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff feff 	bl	8000f9c <LL_ADC_REG_IsConversionOngoing>
 800119e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff20 	bl	8000fea <LL_ADC_INJ_IsConversionOngoing>
 80011aa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d13d      	bne.n	800122e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d13a      	bne.n	800122e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011bc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011c4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011d4:	f023 0302 	bic.w	r3, r3, #2
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	69b9      	ldr	r1, [r7, #24]
 80011de:	430b      	orrs	r3, r1
 80011e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d118      	bne.n	800121e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011f6:	f023 0304 	bic.w	r3, r3, #4
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001202:	4311      	orrs	r1, r2
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001208:	4311      	orrs	r1, r2
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800120e:	430a      	orrs	r2, r1
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 0201 	orr.w	r2, r2, #1
 800121a:	611a      	str	r2, [r3, #16]
 800121c:	e007      	b.n	800122e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0201 	bic.w	r2, r2, #1
 800122c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d10c      	bne.n	8001250 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	f023 010f 	bic.w	r1, r3, #15
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	631a      	str	r2, [r3, #48]	; 0x30
 800124e:	e007      	b.n	8001260 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 020f 	bic.w	r2, r2, #15
 800125e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001264:	f023 0303 	bic.w	r3, r3, #3
 8001268:	f043 0201 	orr.w	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	655a      	str	r2, [r3, #84]	; 0x54
 8001270:	e007      	b.n	8001282 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001276:	f043 0210 	orr.w	r2, r3, #16
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001282:	7ffb      	ldrb	r3, [r7, #31]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000000 	.word	0x20000000
 8001290:	053e2d63 	.word	0x053e2d63
 8001294:	50040000 	.word	0x50040000
 8001298:	50040300 	.word	0x50040300
 800129c:	fff0c007 	.word	0xfff0c007

080012a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fe73 	bl	8000f9c <LL_ADC_REG_IsConversionOngoing>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d167      	bne.n	800138c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_Start_DMA+0x2a>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e063      	b.n	8001392 <HAL_ADC_Start_DMA+0xf2>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 fd7a 	bl	8001dcc <ADC_Enable>
 80012d8:	4603      	mov	r3, r0
 80012da:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d14f      	bne.n	8001382 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001306:	f023 0206 	bic.w	r2, r3, #6
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	659a      	str	r2, [r3, #88]	; 0x58
 800130e:	e002      	b.n	8001316 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4a20      	ldr	r2, [pc, #128]	; (800139c <HAL_ADC_Start_DMA+0xfc>)
 800131c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <HAL_ADC_Start_DMA+0x100>)
 8001324:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <HAL_ADC_Start_DMA+0x104>)
 800132c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	221c      	movs	r2, #28
 8001334:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0210 	orr.w	r2, r2, #16
 800134c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f042 0201 	orr.w	r2, r2, #1
 800135c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3340      	adds	r3, #64	; 0x40
 8001368:	4619      	mov	r1, r3
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f001 f871 	bl	8002454 <HAL_DMA_Start_IT>
 8001372:	4603      	mov	r3, r0
 8001374:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fde6 	bl	8000f4c <LL_ADC_REG_StartConversion>
 8001380:	e006      	b.n	8001390 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800138a:	e001      	b.n	8001390 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800138c:	2302      	movs	r3, #2
 800138e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001390:	7dfb      	ldrb	r3, [r7, #23]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	08001f97 	.word	0x08001f97
 80013a0:	0800206f 	.word	0x0800206f
 80013a4:	0800208b 	.word	0x0800208b

080013a8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d101      	bne.n	80013be <HAL_ADC_Stop_DMA+0x16>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e051      	b.n	8001462 <HAL_ADC_Stop_DMA+0xba>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80013c6:	2103      	movs	r1, #3
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 fc43 	bl	8001c54 <ADC_ConversionStop>
 80013ce:	4603      	mov	r3, r0
 80013d0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d13f      	bne.n	8001458 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d10f      	bne.n	8001416 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 f88a 	bl	8002514 <HAL_DMA_Abort>
 8001400:	4603      	mov	r3, r0
 8001402:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0210 	bic.w	r2, r2, #16
 8001424:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d105      	bne.n	8001438 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 fd53 	bl	8001ed8 <ADC_Disable>
 8001432:	4603      	mov	r3, r0
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e002      	b.n	800143e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fd4d 	bl	8001ed8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d109      	bne.n	8001458 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001448:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	f043 0201 	orr.w	r2, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0b6      	sub	sp, #216	; 0xd8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x22>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e3b9      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x796>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fd6a 	bl	8000f9c <LL_ADC_REG_IsConversionOngoing>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f040 839e 	bne.w	8001c0c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	d824      	bhi.n	8001522 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	3b02      	subs	r3, #2
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d81b      	bhi.n	800151a <HAL_ADC_ConfigChannel+0x86>
 80014e2:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <HAL_ADC_ConfigChannel+0x54>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	080014f9 	.word	0x080014f9
 80014ec:	08001501 	.word	0x08001501
 80014f0:	08001509 	.word	0x08001509
 80014f4:	08001511 	.word	0x08001511
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	220c      	movs	r2, #12
 80014fc:	605a      	str	r2, [r3, #4]
          break;
 80014fe:	e011      	b.n	8001524 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2212      	movs	r2, #18
 8001504:	605a      	str	r2, [r3, #4]
          break;
 8001506:	e00d      	b.n	8001524 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	2218      	movs	r2, #24
 800150c:	605a      	str	r2, [r3, #4]
          break;
 800150e:	e009      	b.n	8001524 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001516:	605a      	str	r2, [r3, #4]
          break;
 8001518:	e004      	b.n	8001524 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	2206      	movs	r2, #6
 800151e:	605a      	str	r2, [r3, #4]
          break;
 8001520:	e000      	b.n	8001524 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001522:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	f7ff fbf3 	bl	8000d1c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fd2e 	bl	8000f9c <LL_ADC_REG_IsConversionOngoing>
 8001540:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fd4e 	bl	8000fea <LL_ADC_INJ_IsConversionOngoing>
 800154e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001552:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001556:	2b00      	cmp	r3, #0
 8001558:	f040 81a6 	bne.w	80018a8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800155c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001560:	2b00      	cmp	r3, #0
 8001562:	f040 81a1 	bne.w	80018a8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	6819      	ldr	r1, [r3, #0]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	461a      	mov	r2, r3
 8001574:	f7ff fbfe 	bl	8000d74 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	695a      	ldr	r2, [r3, #20]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	08db      	lsrs	r3, r3, #3
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	2b04      	cmp	r3, #4
 8001598:	d00a      	beq.n	80015b0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6919      	ldr	r1, [r3, #16]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015aa:	f7ff fb4f 	bl	8000c4c <LL_ADC_SetOffset>
 80015ae:	e17b      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fb6c 	bl	8000c94 <LL_ADC_GetOffsetChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10a      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x148>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fb61 	bl	8000c94 <LL_ADC_GetOffsetChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	0e9b      	lsrs	r3, r3, #26
 80015d6:	f003 021f 	and.w	r2, r3, #31
 80015da:	e01e      	b.n	800161a <HAL_ADC_ConfigChannel+0x186>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fb56 	bl	8000c94 <LL_ADC_GetOffsetChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80015f2:	fa93 f3a3 	rbit	r3, r3
 80015f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80015fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001602:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800160a:	2320      	movs	r3, #32
 800160c:	e004      	b.n	8001618 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800160e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001612:	fab3 f383 	clz	r3, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001622:	2b00      	cmp	r3, #0
 8001624:	d105      	bne.n	8001632 <HAL_ADC_ConfigChannel+0x19e>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	0e9b      	lsrs	r3, r3, #26
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	e018      	b.n	8001664 <HAL_ADC_ConfigChannel+0x1d0>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800164a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800164e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001656:	2320      	movs	r3, #32
 8001658:	e004      	b.n	8001664 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800165a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001664:	429a      	cmp	r2, r3
 8001666:	d106      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fb25 	bl	8000cc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2101      	movs	r1, #1
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fb09 	bl	8000c94 <LL_ADC_GetOffsetChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10a      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x20e>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2101      	movs	r1, #1
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fafe 	bl	8000c94 <LL_ADC_GetOffsetChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	0e9b      	lsrs	r3, r3, #26
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	e01e      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x24c>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2101      	movs	r1, #1
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff faf3 	bl	8000c94 <LL_ADC_GetOffsetChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80016c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80016c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80016d0:	2320      	movs	r3, #32
 80016d2:	e004      	b.n	80016de <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80016d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016d8:	fab3 f383 	clz	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d105      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x264>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0e9b      	lsrs	r3, r3, #26
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	e018      	b.n	800172a <HAL_ADC_ConfigChannel+0x296>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001704:	fa93 f3a3 	rbit	r3, r3
 8001708:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800170c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001710:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001714:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800171c:	2320      	movs	r3, #32
 800171e:	e004      	b.n	800172a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800172a:	429a      	cmp	r2, r3
 800172c:	d106      	bne.n	800173c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2200      	movs	r2, #0
 8001734:	2101      	movs	r1, #1
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fac2 	bl	8000cc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2102      	movs	r1, #2
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff faa6 	bl	8000c94 <LL_ADC_GetOffsetChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10a      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x2d4>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2102      	movs	r1, #2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fa9b 	bl	8000c94 <LL_ADC_GetOffsetChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	0e9b      	lsrs	r3, r3, #26
 8001762:	f003 021f 	and.w	r2, r3, #31
 8001766:	e01e      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x312>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2102      	movs	r1, #2
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fa90 	bl	8000c94 <LL_ADC_GetOffsetChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800177e:	fa93 f3a3 	rbit	r3, r3
 8001782:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800178a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800178e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001796:	2320      	movs	r3, #32
 8001798:	e004      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800179a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800179e:	fab3 f383 	clz	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d105      	bne.n	80017be <HAL_ADC_ConfigChannel+0x32a>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	0e9b      	lsrs	r3, r3, #26
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	e016      	b.n	80017ec <HAL_ADC_ConfigChannel+0x358>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017ca:	fa93 f3a3 	rbit	r3, r3
 80017ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80017d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80017d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80017de:	2320      	movs	r3, #32
 80017e0:	e004      	b.n	80017ec <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80017e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d106      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2200      	movs	r2, #0
 80017f6:	2102      	movs	r1, #2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fa61 	bl	8000cc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2103      	movs	r1, #3
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fa45 	bl	8000c94 <LL_ADC_GetOffsetChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10a      	bne.n	800182a <HAL_ADC_ConfigChannel+0x396>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2103      	movs	r1, #3
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fa3a 	bl	8000c94 <LL_ADC_GetOffsetChannel>
 8001820:	4603      	mov	r3, r0
 8001822:	0e9b      	lsrs	r3, r3, #26
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	e017      	b.n	800185a <HAL_ADC_ConfigChannel+0x3c6>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2103      	movs	r1, #3
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fa2f 	bl	8000c94 <LL_ADC_GetOffsetChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800183c:	fa93 f3a3 	rbit	r3, r3
 8001840:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001844:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800184c:	2320      	movs	r3, #32
 800184e:	e003      	b.n	8001858 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001852:	fab3 f383 	clz	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001862:	2b00      	cmp	r3, #0
 8001864:	d105      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x3de>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	0e9b      	lsrs	r3, r3, #26
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	e011      	b.n	8001896 <HAL_ADC_ConfigChannel+0x402>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001882:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800188a:	2320      	movs	r3, #32
 800188c:	e003      	b.n	8001896 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800188e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001896:	429a      	cmp	r2, r3
 8001898:	d106      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2200      	movs	r2, #0
 80018a0:	2103      	movs	r1, #3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fa0c 	bl	8000cc0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fb27 	bl	8000f00 <LL_ADC_IsEnabled>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f040 813f 	bne.w	8001b38 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	6819      	ldr	r1, [r3, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	461a      	mov	r2, r3
 80018c8:	f7ff fa80 	bl	8000dcc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4a8e      	ldr	r2, [pc, #568]	; (8001b0c <HAL_ADC_ConfigChannel+0x678>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	f040 8130 	bne.w	8001b38 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10b      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x46c>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0e9b      	lsrs	r3, r3, #26
 80018ee:	3301      	adds	r3, #1
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	2b09      	cmp	r3, #9
 80018f6:	bf94      	ite	ls
 80018f8:	2301      	movls	r3, #1
 80018fa:	2300      	movhi	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	e019      	b.n	8001934 <HAL_ADC_ConfigChannel+0x4a0>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001908:	fa93 f3a3 	rbit	r3, r3
 800190c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800190e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001910:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001918:	2320      	movs	r3, #32
 800191a:	e003      	b.n	8001924 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800191c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800191e:	fab3 f383 	clz	r3, r3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	3301      	adds	r3, #1
 8001926:	f003 031f 	and.w	r3, r3, #31
 800192a:	2b09      	cmp	r3, #9
 800192c:	bf94      	ite	ls
 800192e:	2301      	movls	r3, #1
 8001930:	2300      	movhi	r3, #0
 8001932:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001934:	2b00      	cmp	r3, #0
 8001936:	d079      	beq.n	8001a2c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001940:	2b00      	cmp	r3, #0
 8001942:	d107      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x4c0>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0e9b      	lsrs	r3, r3, #26
 800194a:	3301      	adds	r3, #1
 800194c:	069b      	lsls	r3, r3, #26
 800194e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001952:	e015      	b.n	8001980 <HAL_ADC_ConfigChannel+0x4ec>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001964:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800196c:	2320      	movs	r3, #32
 800196e:	e003      	b.n	8001978 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001972:	fab3 f383 	clz	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	3301      	adds	r3, #1
 800197a:	069b      	lsls	r3, r3, #26
 800197c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001988:	2b00      	cmp	r3, #0
 800198a:	d109      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x50c>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0e9b      	lsrs	r3, r3, #26
 8001992:	3301      	adds	r3, #1
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	e017      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x53c>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80019ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80019b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80019b8:	2320      	movs	r3, #32
 80019ba:	e003      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80019bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	2101      	movs	r1, #1
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	ea42 0103 	orr.w	r1, r2, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10a      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x562>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	0e9b      	lsrs	r3, r3, #26
 80019e6:	3301      	adds	r3, #1
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	051b      	lsls	r3, r3, #20
 80019f4:	e018      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x594>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001a0e:	2320      	movs	r3, #32
 8001a10:	e003      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a14:	fab3 f383 	clz	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4613      	mov	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4413      	add	r3, r2
 8001a26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	e080      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d107      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x5b4>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0e9b      	lsrs	r3, r3, #26
 8001a3e:	3301      	adds	r3, #1
 8001a40:	069b      	lsls	r3, r3, #26
 8001a42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a46:	e015      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x5e0>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001a60:	2320      	movs	r3, #32
 8001a62:	e003      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	069b      	lsls	r3, r3, #26
 8001a70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d109      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x600>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0e9b      	lsrs	r3, r3, #26
 8001a86:	3301      	adds	r3, #1
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	e017      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x630>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	61fb      	str	r3, [r7, #28]
  return result;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001aac:	2320      	movs	r3, #32
 8001aae:	e003      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	2101      	movs	r1, #1
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	ea42 0103 	orr.w	r1, r2, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10d      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x65c>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0e9b      	lsrs	r3, r3, #26
 8001ada:	3301      	adds	r3, #1
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3b1e      	subs	r3, #30
 8001ae8:	051b      	lsls	r3, r3, #20
 8001aea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aee:	e01d      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x698>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	613b      	str	r3, [r7, #16]
  return result;
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d103      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	e005      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x684>
 8001b0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f003 021f 	and.w	r2, r3, #31
 8001b1e:	4613      	mov	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	3b1e      	subs	r3, #30
 8001b26:	051b      	lsls	r3, r3, #20
 8001b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	6892      	ldr	r2, [r2, #8]
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7ff f91e 	bl	8000d74 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <HAL_ADC_ConfigChannel+0x7a0>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d06c      	beq.n	8001c1e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b44:	483c      	ldr	r0, [pc, #240]	; (8001c38 <HAL_ADC_ConfigChannel+0x7a4>)
 8001b46:	f7ff f873 	bl	8000c30 <LL_ADC_GetCommonPathInternalCh>
 8001b4a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a3a      	ldr	r2, [pc, #232]	; (8001c3c <HAL_ADC_ConfigChannel+0x7a8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d127      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d121      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a35      	ldr	r2, [pc, #212]	; (8001c40 <HAL_ADC_ConfigChannel+0x7ac>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d157      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b76:	4619      	mov	r1, r3
 8001b78:	482f      	ldr	r0, [pc, #188]	; (8001c38 <HAL_ADC_ConfigChannel+0x7a4>)
 8001b7a:	f7ff f846 	bl	8000c0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b7e:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <HAL_ADC_ConfigChannel+0x7b0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	099b      	lsrs	r3, r3, #6
 8001b84:	4a30      	ldr	r2, [pc, #192]	; (8001c48 <HAL_ADC_ConfigChannel+0x7b4>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	099b      	lsrs	r3, r3, #6
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b98:	e002      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f9      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ba6:	e03a      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a27      	ldr	r2, [pc, #156]	; (8001c4c <HAL_ADC_ConfigChannel+0x7b8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d113      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x746>
 8001bb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10d      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	; (8001c40 <HAL_ADC_ConfigChannel+0x7ac>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d12a      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4819      	ldr	r0, [pc, #100]	; (8001c38 <HAL_ADC_ConfigChannel+0x7a4>)
 8001bd4:	f7ff f819 	bl	8000c0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bd8:	e021      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <HAL_ADC_ConfigChannel+0x7bc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d11c      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001be4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d116      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <HAL_ADC_ConfigChannel+0x7ac>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d111      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c02:	4619      	mov	r1, r3
 8001c04:	480c      	ldr	r0, [pc, #48]	; (8001c38 <HAL_ADC_ConfigChannel+0x7a4>)
 8001c06:	f7ff f800 	bl	8000c0a <LL_ADC_SetCommonPathInternalCh>
 8001c0a:	e008      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c10:	f043 0220 	orr.w	r2, r3, #32
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c26:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	37d8      	adds	r7, #216	; 0xd8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	80080000 	.word	0x80080000
 8001c38:	50040300 	.word	0x50040300
 8001c3c:	c7520000 	.word	0xc7520000
 8001c40:	50040000 	.word	0x50040000
 8001c44:	20000000 	.word	0x20000000
 8001c48:	053e2d63 	.word	0x053e2d63
 8001c4c:	cb840000 	.word	0xcb840000
 8001c50:	80000001 	.word	0x80000001

08001c54 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f996 	bl	8000f9c <LL_ADC_REG_IsConversionOngoing>
 8001c70:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff f9b7 	bl	8000fea <LL_ADC_INJ_IsConversionOngoing>
 8001c7c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d103      	bne.n	8001c8c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8098 	beq.w	8001dbc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d02a      	beq.n	8001cf0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7e5b      	ldrb	r3, [r3, #25]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d126      	bne.n	8001cf0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7e1b      	ldrb	r3, [r3, #24]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d122      	bne.n	8001cf0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001cae:	e014      	b.n	8001cda <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	4a45      	ldr	r2, [pc, #276]	; (8001dc8 <ADC_ConversionStop+0x174>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d90d      	bls.n	8001cd4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	f043 0210 	orr.w	r2, r3, #16
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	f043 0201 	orr.w	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e074      	b.n	8001dbe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce4:	2b40      	cmp	r3, #64	; 0x40
 8001ce6:	d1e3      	bne.n	8001cb0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2240      	movs	r2, #64	; 0x40
 8001cee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d014      	beq.n	8001d20 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f94e 	bl	8000f9c <LL_ADC_REG_IsConversionOngoing>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00c      	beq.n	8001d20 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f90b 	bl	8000f26 <LL_ADC_IsDisableOngoing>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d104      	bne.n	8001d20 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff f92a 	bl	8000f74 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d014      	beq.n	8001d50 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f95d 	bl	8000fea <LL_ADC_INJ_IsConversionOngoing>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00c      	beq.n	8001d50 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f8f3 	bl	8000f26 <LL_ADC_IsDisableOngoing>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d104      	bne.n	8001d50 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f939 	bl	8000fc2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d005      	beq.n	8001d62 <ADC_ConversionStop+0x10e>
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d105      	bne.n	8001d68 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	617b      	str	r3, [r7, #20]
        break;
 8001d60:	e005      	b.n	8001d6e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001d62:	2308      	movs	r3, #8
 8001d64:	617b      	str	r3, [r7, #20]
        break;
 8001d66:	e002      	b.n	8001d6e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	617b      	str	r3, [r7, #20]
        break;
 8001d6c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001d6e:	f7fe ff2d 	bl	8000bcc <HAL_GetTick>
 8001d72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001d74:	e01b      	b.n	8001dae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d76:	f7fe ff29 	bl	8000bcc <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d914      	bls.n	8001dae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00d      	beq.n	8001dae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	f043 0210 	orr.w	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	f043 0201 	orr.w	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e007      	b.n	8001dbe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1dc      	bne.n	8001d76 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3720      	adds	r7, #32
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	a33fffff 	.word	0xa33fffff

08001dcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff f88f 	bl	8000f00 <LL_ADC_IsEnabled>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d169      	bne.n	8001ebc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <ADC_Enable+0xfc>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00d      	beq.n	8001e12 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f043 0210 	orr.w	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e055      	b.n	8001ebe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f84a 	bl	8000eb0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001e1c:	482b      	ldr	r0, [pc, #172]	; (8001ecc <ADC_Enable+0x100>)
 8001e1e:	f7fe ff07 	bl	8000c30 <LL_ADC_GetCommonPathInternalCh>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d013      	beq.n	8001e54 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e2c:	4b28      	ldr	r3, [pc, #160]	; (8001ed0 <ADC_Enable+0x104>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	4a28      	ldr	r2, [pc, #160]	; (8001ed4 <ADC_Enable+0x108>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	099b      	lsrs	r3, r3, #6
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001e46:	e002      	b.n	8001e4e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f9      	bne.n	8001e48 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e54:	f7fe feba 	bl	8000bcc <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e5a:	e028      	b.n	8001eae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff f84d 	bl	8000f00 <LL_ADC_IsEnabled>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d104      	bne.n	8001e76 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f81d 	bl	8000eb0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e76:	f7fe fea9 	bl	8000bcc <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d914      	bls.n	8001eae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d00d      	beq.n	8001eae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	f043 0210 	orr.w	r2, r3, #16
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	f043 0201 	orr.w	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e007      	b.n	8001ebe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d1cf      	bne.n	8001e5c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	8000003f 	.word	0x8000003f
 8001ecc:	50040300 	.word	0x50040300
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	053e2d63 	.word	0x053e2d63

08001ed8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff f81e 	bl	8000f26 <LL_ADC_IsDisableOngoing>
 8001eea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff f805 	bl	8000f00 <LL_ADC_IsEnabled>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d047      	beq.n	8001f8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d144      	bne.n	8001f8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 030d 	and.w	r3, r3, #13
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d10c      	bne.n	8001f2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe ffdf 	bl	8000ed8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2203      	movs	r2, #3
 8001f20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f22:	f7fe fe53 	bl	8000bcc <HAL_GetTick>
 8001f26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f28:	e029      	b.n	8001f7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f043 0210 	orr.w	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f043 0201 	orr.w	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e023      	b.n	8001f8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f46:	f7fe fe41 	bl	8000bcc <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d914      	bls.n	8001f7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00d      	beq.n	8001f7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f66:	f043 0210 	orr.w	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	f043 0201 	orr.w	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e007      	b.n	8001f8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1dc      	bne.n	8001f46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d14b      	bne.n	8002048 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d021      	beq.n	800200e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fe91 	bl	8000cf6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d032      	beq.n	8002040 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d12b      	bne.n	8002040 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d11f      	bne.n	8002040 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002004:	f043 0201 	orr.w	r2, r3, #1
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	655a      	str	r2, [r3, #84]	; 0x54
 800200c:	e018      	b.n	8002040 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d111      	bne.n	8002040 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d105      	bne.n	8002040 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002038:	f043 0201 	orr.w	r2, r3, #1
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f7fe f949 	bl	80002d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002046:	e00e      	b.n	8002066 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f7ff fa12 	bl	800147e <HAL_ADC_ErrorCallback>
}
 800205a:	e004      	b.n	8002066 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	4798      	blx	r3
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7ff f9f4 	bl	800146a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	f043 0204 	orr.w	r2, r3, #4
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f7ff f9e4 	bl	800147e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	; (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db0b      	blt.n	800214e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4907      	ldr	r1, [pc, #28]	; (800215c <__NVIC_EnableIRQ+0x38>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2001      	movs	r0, #1
 8002146:	fa00 f202 	lsl.w	r2, r0, r2
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000e100 	.word	0xe000e100

08002160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	; (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	; (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f1c3 0307 	rsb	r3, r3, #7
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	bf28      	it	cs
 80021d2:	2304      	movcs	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3304      	adds	r3, #4
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d902      	bls.n	80021e4 <NVIC_EncodePriority+0x30>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3b03      	subs	r3, #3
 80021e2:	e000      	b.n	80021e6 <NVIC_EncodePriority+0x32>
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	401a      	ands	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43d9      	mvns	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	4313      	orrs	r3, r2
         );
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	; 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800222c:	d301      	bcc.n	8002232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <SysTick_Config+0x40>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223a:	210f      	movs	r1, #15
 800223c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002240:	f7ff ff8e 	bl	8002160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <SysTick_Config+0x40>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <SysTick_Config+0x40>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff29 	bl	80020c0 <__NVIC_SetPriorityGrouping>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002288:	f7ff ff3e 	bl	8002108 <__NVIC_GetPriorityGrouping>
 800228c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	6978      	ldr	r0, [r7, #20]
 8002294:	f7ff ff8e 	bl	80021b4 <NVIC_EncodePriority>
 8002298:	4602      	mov	r2, r0
 800229a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff5d 	bl	8002160 <__NVIC_SetPriority>
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff31 	bl	8002124 <__NVIC_EnableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffa2 	bl	800221c <SysTick_Config>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e098      	b.n	8002428 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	4b4d      	ldr	r3, [pc, #308]	; (8002434 <HAL_DMA_Init+0x150>)
 80022fe:	429a      	cmp	r2, r3
 8002300:	d80f      	bhi.n	8002322 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	4b4b      	ldr	r3, [pc, #300]	; (8002438 <HAL_DMA_Init+0x154>)
 800230a:	4413      	add	r3, r2
 800230c:	4a4b      	ldr	r2, [pc, #300]	; (800243c <HAL_DMA_Init+0x158>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	009a      	lsls	r2, r3, #2
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a48      	ldr	r2, [pc, #288]	; (8002440 <HAL_DMA_Init+0x15c>)
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
 8002320:	e00e      	b.n	8002340 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	4b46      	ldr	r3, [pc, #280]	; (8002444 <HAL_DMA_Init+0x160>)
 800232a:	4413      	add	r3, r2
 800232c:	4a43      	ldr	r2, [pc, #268]	; (800243c <HAL_DMA_Init+0x158>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	009a      	lsls	r2, r3, #2
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a42      	ldr	r2, [pc, #264]	; (8002448 <HAL_DMA_Init+0x164>)
 800233e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800239a:	d039      	beq.n	8002410 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	4a27      	ldr	r2, [pc, #156]	; (8002440 <HAL_DMA_Init+0x15c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d11a      	bne.n	80023dc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80023a6:	4b29      	ldr	r3, [pc, #164]	; (800244c <HAL_DMA_Init+0x168>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f003 031c 	and.w	r3, r3, #28
 80023b2:	210f      	movs	r1, #15
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4924      	ldr	r1, [pc, #144]	; (800244c <HAL_DMA_Init+0x168>)
 80023bc:	4013      	ands	r3, r2
 80023be:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_DMA_Init+0x168>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	f003 031c 	and.w	r3, r3, #28
 80023d0:	fa01 f303 	lsl.w	r3, r1, r3
 80023d4:	491d      	ldr	r1, [pc, #116]	; (800244c <HAL_DMA_Init+0x168>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
 80023da:	e019      	b.n	8002410 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <HAL_DMA_Init+0x16c>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	f003 031c 	and.w	r3, r3, #28
 80023e8:	210f      	movs	r1, #15
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	4917      	ldr	r1, [pc, #92]	; (8002450 <HAL_DMA_Init+0x16c>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80023f6:	4b16      	ldr	r3, [pc, #88]	; (8002450 <HAL_DMA_Init+0x16c>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6859      	ldr	r1, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f003 031c 	and.w	r3, r3, #28
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	4911      	ldr	r1, [pc, #68]	; (8002450 <HAL_DMA_Init+0x16c>)
 800240c:	4313      	orrs	r3, r2
 800240e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	40020407 	.word	0x40020407
 8002438:	bffdfff8 	.word	0xbffdfff8
 800243c:	cccccccd 	.word	0xcccccccd
 8002440:	40020000 	.word	0x40020000
 8002444:	bffdfbf8 	.word	0xbffdfbf8
 8002448:	40020400 	.word	0x40020400
 800244c:	400200a8 	.word	0x400200a8
 8002450:	400204a8 	.word	0x400204a8

08002454 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_DMA_Start_IT+0x20>
 8002470:	2302      	movs	r3, #2
 8002472:	e04b      	b.n	800250c <HAL_DMA_Start_IT+0xb8>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b01      	cmp	r3, #1
 8002486:	d13a      	bne.n	80024fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0201 	bic.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f91e 	bl	80026ee <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 020e 	orr.w	r2, r2, #14
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e00f      	b.n	80024ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0204 	bic.w	r2, r2, #4
 80024da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 020a 	orr.w	r2, r2, #10
 80024ea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	e005      	b.n	800250a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002506:	2302      	movs	r3, #2
 8002508:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800250a:	7dfb      	ldrb	r3, [r7, #23]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d008      	beq.n	800253e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2204      	movs	r2, #4
 8002530:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e022      	b.n	8002584 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 020e 	bic.w	r2, r2, #14
 800254c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f003 021c 	and.w	r2, r3, #28
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2101      	movs	r1, #1
 800256c:	fa01 f202 	lsl.w	r2, r1, r2
 8002570:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	f003 031c 	and.w	r3, r3, #28
 80025b0:	2204      	movs	r2, #4
 80025b2:	409a      	lsls	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d026      	beq.n	800260a <HAL_DMA_IRQHandler+0x7a>
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d021      	beq.n	800260a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d107      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0204 	bic.w	r2, r2, #4
 80025e2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e8:	f003 021c 	and.w	r2, r3, #28
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	2104      	movs	r1, #4
 80025f2:	fa01 f202 	lsl.w	r2, r1, r2
 80025f6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d071      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002608:	e06c      	b.n	80026e4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f003 031c 	and.w	r3, r3, #28
 8002612:	2202      	movs	r2, #2
 8002614:	409a      	lsls	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d02e      	beq.n	800267c <HAL_DMA_IRQHandler+0xec>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d029      	beq.n	800267c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10b      	bne.n	800264e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 020a 	bic.w	r2, r2, #10
 8002644:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f003 021c 	and.w	r2, r3, #28
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2102      	movs	r1, #2
 800265c:	fa01 f202 	lsl.w	r2, r1, r2
 8002660:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d038      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800267a:	e033      	b.n	80026e4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	f003 031c 	and.w	r3, r3, #28
 8002684:	2208      	movs	r2, #8
 8002686:	409a      	lsls	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d02a      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x156>
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d025      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 020e 	bic.w	r2, r2, #14
 80026a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f003 021c 	and.w	r2, r3, #28
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	2101      	movs	r1, #1
 80026b8:	fa01 f202 	lsl.w	r2, r1, r2
 80026bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d004      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
}
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b085      	sub	sp, #20
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	f003 021c 	and.w	r2, r3, #28
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	2101      	movs	r1, #1
 800270a:	fa01 f202 	lsl.w	r2, r1, r2
 800270e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b10      	cmp	r3, #16
 800271e:	d108      	bne.n	8002732 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002730:	e007      	b.n	8002742 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	60da      	str	r2, [r3, #12]
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275e:	e154      	b.n	8002a0a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	2101      	movs	r1, #1
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	fa01 f303 	lsl.w	r3, r1, r3
 800276c:	4013      	ands	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 8146 	beq.w	8002a04 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d005      	beq.n	8002790 <HAL_GPIO_Init+0x40>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d130      	bne.n	80027f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027c6:	2201      	movs	r2, #1
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f003 0201 	and.w	r2, r3, #1
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d017      	beq.n	800282e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d123      	bne.n	8002882 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	08da      	lsrs	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3208      	adds	r2, #8
 8002842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	220f      	movs	r2, #15
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	08da      	lsrs	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3208      	adds	r2, #8
 800287c:	6939      	ldr	r1, [r7, #16]
 800287e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	2203      	movs	r2, #3
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0203 	and.w	r2, r3, #3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80a0 	beq.w	8002a04 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c4:	4b58      	ldr	r3, [pc, #352]	; (8002a28 <HAL_GPIO_Init+0x2d8>)
 80028c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c8:	4a57      	ldr	r2, [pc, #348]	; (8002a28 <HAL_GPIO_Init+0x2d8>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6613      	str	r3, [r2, #96]	; 0x60
 80028d0:	4b55      	ldr	r3, [pc, #340]	; (8002a28 <HAL_GPIO_Init+0x2d8>)
 80028d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028dc:	4a53      	ldr	r2, [pc, #332]	; (8002a2c <HAL_GPIO_Init+0x2dc>)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	220f      	movs	r2, #15
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002906:	d019      	beq.n	800293c <HAL_GPIO_Init+0x1ec>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a49      	ldr	r2, [pc, #292]	; (8002a30 <HAL_GPIO_Init+0x2e0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d013      	beq.n	8002938 <HAL_GPIO_Init+0x1e8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a48      	ldr	r2, [pc, #288]	; (8002a34 <HAL_GPIO_Init+0x2e4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00d      	beq.n	8002934 <HAL_GPIO_Init+0x1e4>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a47      	ldr	r2, [pc, #284]	; (8002a38 <HAL_GPIO_Init+0x2e8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <HAL_GPIO_Init+0x1e0>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a46      	ldr	r2, [pc, #280]	; (8002a3c <HAL_GPIO_Init+0x2ec>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <HAL_GPIO_Init+0x1dc>
 8002928:	2304      	movs	r3, #4
 800292a:	e008      	b.n	800293e <HAL_GPIO_Init+0x1ee>
 800292c:	2307      	movs	r3, #7
 800292e:	e006      	b.n	800293e <HAL_GPIO_Init+0x1ee>
 8002930:	2303      	movs	r3, #3
 8002932:	e004      	b.n	800293e <HAL_GPIO_Init+0x1ee>
 8002934:	2302      	movs	r3, #2
 8002936:	e002      	b.n	800293e <HAL_GPIO_Init+0x1ee>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <HAL_GPIO_Init+0x1ee>
 800293c:	2300      	movs	r3, #0
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	f002 0203 	and.w	r2, r2, #3
 8002944:	0092      	lsls	r2, r2, #2
 8002946:	4093      	lsls	r3, r2
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800294e:	4937      	ldr	r1, [pc, #220]	; (8002a2c <HAL_GPIO_Init+0x2dc>)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	3302      	adds	r3, #2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800295c:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <HAL_GPIO_Init+0x2f0>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	43db      	mvns	r3, r3
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002980:	4a2f      	ldr	r2, [pc, #188]	; (8002a40 <HAL_GPIO_Init+0x2f0>)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002986:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <HAL_GPIO_Init+0x2f0>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	43db      	mvns	r3, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029aa:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <HAL_GPIO_Init+0x2f0>)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029b0:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_GPIO_Init+0x2f0>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029d4:	4a1a      	ldr	r2, [pc, #104]	; (8002a40 <HAL_GPIO_Init+0x2f0>)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80029da:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <HAL_GPIO_Init+0x2f0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029fe:	4a10      	ldr	r2, [pc, #64]	; (8002a40 <HAL_GPIO_Init+0x2f0>)
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	3301      	adds	r3, #1
 8002a08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f47f aea3 	bne.w	8002760 <HAL_GPIO_Init+0x10>
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	48000400 	.word	0x48000400
 8002a34:	48000800 	.word	0x48000800
 8002a38:	48000c00 	.word	0x48000c00
 8002a3c:	48001000 	.word	0x48001000
 8002a40:	40010400 	.word	0x40010400

08002a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	807b      	strh	r3, [r7, #2]
 8002a50:	4613      	mov	r3, r2
 8002a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a54:	787b      	ldrb	r3, [r7, #1]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a60:	e002      	b.n	8002a68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	041a      	lsls	r2, r3, #16
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	43d9      	mvns	r1, r3
 8002a92:	887b      	ldrh	r3, [r7, #2]
 8002a94:	400b      	ands	r3, r1
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002aac:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40007000 	.word	0x40007000

08002ac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad2:	d130      	bne.n	8002b36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae0:	d038      	beq.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ae2:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aea:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002af2:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2232      	movs	r2, #50	; 0x32
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	4a1b      	ldr	r2, [pc, #108]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0c9b      	lsrs	r3, r3, #18
 8002b04:	3301      	adds	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b08:	e002      	b.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1c:	d102      	bne.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f2      	bne.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b30:	d110      	bne.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e00f      	b.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b42:	d007      	beq.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b4c:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40007000 	.word	0x40007000
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	431bde83 	.word	0x431bde83

08002b70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e3fe      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b82:	4ba1      	ldr	r3, [pc, #644]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b8c:	4b9e      	ldr	r3, [pc, #632]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 80e4 	beq.w	8002d6c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_RCC_OscConfig+0x4a>
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2b0c      	cmp	r3, #12
 8002bae:	f040 808b 	bne.w	8002cc8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f040 8087 	bne.w	8002cc8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bba:	4b93      	ldr	r3, [pc, #588]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x62>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e3d6      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1a      	ldr	r2, [r3, #32]
 8002bd6:	4b8c      	ldr	r3, [pc, #560]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d004      	beq.n	8002bec <HAL_RCC_OscConfig+0x7c>
 8002be2:	4b89      	ldr	r3, [pc, #548]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bea:	e005      	b.n	8002bf8 <HAL_RCC_OscConfig+0x88>
 8002bec:	4b86      	ldr	r3, [pc, #536]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d223      	bcs.n	8002c44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fd53 	bl	80036ac <RCC_SetFlashLatencyFromMSIRange>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e3b7      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c10:	4b7d      	ldr	r3, [pc, #500]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a7c      	ldr	r2, [pc, #496]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c16:	f043 0308 	orr.w	r3, r3, #8
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	4b7a      	ldr	r3, [pc, #488]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	4977      	ldr	r1, [pc, #476]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c2e:	4b76      	ldr	r3, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	4972      	ldr	r1, [pc, #456]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	604b      	str	r3, [r1, #4]
 8002c42:	e025      	b.n	8002c90 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c44:	4b70      	ldr	r3, [pc, #448]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a6f      	ldr	r2, [pc, #444]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c4a:	f043 0308 	orr.w	r3, r3, #8
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4b6d      	ldr	r3, [pc, #436]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	496a      	ldr	r1, [pc, #424]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c62:	4b69      	ldr	r3, [pc, #420]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	4965      	ldr	r1, [pc, #404]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fd13 	bl	80036ac <RCC_SetFlashLatencyFromMSIRange>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e377      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c90:	f000 fc80 	bl	8003594 <HAL_RCC_GetSysClockFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b5c      	ldr	r3, [pc, #368]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	495a      	ldr	r1, [pc, #360]	; (8002e0c <HAL_RCC_OscConfig+0x29c>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cac:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <HAL_RCC_OscConfig+0x2a0>)
 8002cae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cb0:	4b58      	ldr	r3, [pc, #352]	; (8002e14 <HAL_RCC_OscConfig+0x2a4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd ff39 	bl	8000b2c <HAL_InitTick>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d052      	beq.n	8002d6a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	e35b      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d032      	beq.n	8002d36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cd0:	4b4d      	ldr	r3, [pc, #308]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a4c      	ldr	r2, [pc, #304]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cdc:	f7fd ff76 	bl	8000bcc <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ce4:	f7fd ff72 	bl	8000bcc <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e344      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cf6:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d02:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a40      	ldr	r2, [pc, #256]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d08:	f043 0308 	orr.w	r3, r3, #8
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b3e      	ldr	r3, [pc, #248]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	493b      	ldr	r1, [pc, #236]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d20:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	4936      	ldr	r1, [pc, #216]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
 8002d34:	e01a      	b.n	8002d6c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d36:	4b34      	ldr	r3, [pc, #208]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a33      	ldr	r2, [pc, #204]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d42:	f7fd ff43 	bl	8000bcc <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d4a:	f7fd ff3f 	bl	8000bcc <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e311      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d5c:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f0      	bne.n	8002d4a <HAL_RCC_OscConfig+0x1da>
 8002d68:	e000      	b.n	8002d6c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d074      	beq.n	8002e62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d005      	beq.n	8002d8a <HAL_RCC_OscConfig+0x21a>
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	2b0c      	cmp	r3, #12
 8002d82:	d10e      	bne.n	8002da2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d10b      	bne.n	8002da2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8a:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d064      	beq.n	8002e60 <HAL_RCC_OscConfig+0x2f0>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d160      	bne.n	8002e60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e2ee      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x24a>
 8002dac:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a15      	ldr	r2, [pc, #84]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	e01d      	b.n	8002df6 <HAL_RCC_OscConfig+0x286>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc2:	d10c      	bne.n	8002dde <HAL_RCC_OscConfig+0x26e>
 8002dc4:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0f      	ldr	r2, [pc, #60]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002dca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a0c      	ldr	r2, [pc, #48]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	e00b      	b.n	8002df6 <HAL_RCC_OscConfig+0x286>
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a06      	ldr	r2, [pc, #24]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d01c      	beq.n	8002e38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfe:	f7fd fee5 	bl	8000bcc <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e04:	e011      	b.n	8002e2a <HAL_RCC_OscConfig+0x2ba>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08005960 	.word	0x08005960
 8002e10:	20000000 	.word	0x20000000
 8002e14:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e18:	f7fd fed8 	bl	8000bcc <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e2aa      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e2a:	4baf      	ldr	r3, [pc, #700]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x2a8>
 8002e36:	e014      	b.n	8002e62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fd fec8 	bl	8000bcc <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e40:	f7fd fec4 	bl	8000bcc <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	; 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e296      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e52:	4ba5      	ldr	r3, [pc, #660]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x2d0>
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d060      	beq.n	8002f30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d005      	beq.n	8002e80 <HAL_RCC_OscConfig+0x310>
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b0c      	cmp	r3, #12
 8002e78:	d119      	bne.n	8002eae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d116      	bne.n	8002eae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e80:	4b99      	ldr	r3, [pc, #612]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_OscConfig+0x328>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e273      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e98:	4b93      	ldr	r3, [pc, #588]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	061b      	lsls	r3, r3, #24
 8002ea6:	4990      	ldr	r1, [pc, #576]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eac:	e040      	b.n	8002f30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d023      	beq.n	8002efe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb6:	4b8c      	ldr	r3, [pc, #560]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a8b      	ldr	r2, [pc, #556]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec2:	f7fd fe83 	bl	8000bcc <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eca:	f7fd fe7f 	bl	8000bcc <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e251      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002edc:	4b82      	ldr	r3, [pc, #520]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee8:	4b7f      	ldr	r3, [pc, #508]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	061b      	lsls	r3, r3, #24
 8002ef6:	497c      	ldr	r1, [pc, #496]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
 8002efc:	e018      	b.n	8002f30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002efe:	4b7a      	ldr	r3, [pc, #488]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a79      	ldr	r2, [pc, #484]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fd fe5f 	bl	8000bcc <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f12:	f7fd fe5b 	bl	8000bcc <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e22d      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f24:	4b70      	ldr	r3, [pc, #448]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d03c      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01c      	beq.n	8002f7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f44:	4b68      	ldr	r3, [pc, #416]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4a:	4a67      	ldr	r2, [pc, #412]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fd fe3a 	bl	8000bcc <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fd fe36 	bl	8000bcc <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e208      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f6e:	4b5e      	ldr	r3, [pc, #376]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0ef      	beq.n	8002f5c <HAL_RCC_OscConfig+0x3ec>
 8002f7c:	e01b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7e:	4b5a      	ldr	r3, [pc, #360]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f84:	4a58      	ldr	r2, [pc, #352]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8e:	f7fd fe1d 	bl	8000bcc <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f96:	f7fd fe19 	bl	8000bcc <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e1eb      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fa8:	4b4f      	ldr	r3, [pc, #316]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1ef      	bne.n	8002f96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80a6 	beq.w	8003110 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fc8:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10d      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd4:	4b44      	ldr	r3, [pc, #272]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	4a43      	ldr	r2, [pc, #268]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fde:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe0:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fec:	2301      	movs	r3, #1
 8002fee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff0:	4b3e      	ldr	r3, [pc, #248]	; (80030ec <HAL_RCC_OscConfig+0x57c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d118      	bne.n	800302e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ffc:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <HAL_RCC_OscConfig+0x57c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a3a      	ldr	r2, [pc, #232]	; (80030ec <HAL_RCC_OscConfig+0x57c>)
 8003002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003008:	f7fd fde0 	bl	8000bcc <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003010:	f7fd fddc 	bl	8000bcc <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1ae      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003022:	4b32      	ldr	r3, [pc, #200]	; (80030ec <HAL_RCC_OscConfig+0x57c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d108      	bne.n	8003048 <HAL_RCC_OscConfig+0x4d8>
 8003036:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303c:	4a2a      	ldr	r2, [pc, #168]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003046:	e024      	b.n	8003092 <HAL_RCC_OscConfig+0x522>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b05      	cmp	r3, #5
 800304e:	d110      	bne.n	8003072 <HAL_RCC_OscConfig+0x502>
 8003050:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	4a24      	ldr	r2, [pc, #144]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003060:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	4a20      	ldr	r2, [pc, #128]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003070:	e00f      	b.n	8003092 <HAL_RCC_OscConfig+0x522>
 8003072:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003082:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	4a17      	ldr	r2, [pc, #92]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 800308a:	f023 0304 	bic.w	r3, r3, #4
 800308e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d016      	beq.n	80030c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309a:	f7fd fd97 	bl	8000bcc <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a2:	f7fd fd93 	bl	8000bcc <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e163      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0ed      	beq.n	80030a2 <HAL_RCC_OscConfig+0x532>
 80030c6:	e01a      	b.n	80030fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fd fd80 	bl	8000bcc <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030ce:	e00f      	b.n	80030f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fd fd7c 	bl	8000bcc <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	; 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d906      	bls.n	80030f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e14c      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030f0:	4ba5      	ldr	r3, [pc, #660]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e8      	bne.n	80030d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030fe:	7ffb      	ldrb	r3, [r7, #31]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d105      	bne.n	8003110 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003104:	4ba0      	ldr	r3, [pc, #640]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	4a9f      	ldr	r2, [pc, #636]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 800310a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d03c      	beq.n	8003196 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	2b00      	cmp	r3, #0
 8003122:	d01c      	beq.n	800315e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003124:	4b98      	ldr	r3, [pc, #608]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800312a:	4a97      	ldr	r2, [pc, #604]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003134:	f7fd fd4a 	bl	8000bcc <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800313c:	f7fd fd46 	bl	8000bcc <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e118      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800314e:	4b8e      	ldr	r3, [pc, #568]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0ef      	beq.n	800313c <HAL_RCC_OscConfig+0x5cc>
 800315c:	e01b      	b.n	8003196 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800315e:	4b8a      	ldr	r3, [pc, #552]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003164:	4a88      	ldr	r2, [pc, #544]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003166:	f023 0301 	bic.w	r3, r3, #1
 800316a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316e:	f7fd fd2d 	bl	8000bcc <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003176:	f7fd fd29 	bl	8000bcc <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e0fb      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003188:	4b7f      	ldr	r3, [pc, #508]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 800318a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1ef      	bne.n	8003176 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80ef 	beq.w	800337e <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	f040 80c5 	bne.w	8003334 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031aa:	4b77      	ldr	r3, [pc, #476]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f003 0203 	and.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d12c      	bne.n	8003218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	3b01      	subs	r3, #1
 80031ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d123      	bne.n	8003218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d11b      	bne.n	8003218 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d113      	bne.n	8003218 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	3b01      	subs	r3, #1
 80031fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d109      	bne.n	8003218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	3b01      	subs	r3, #1
 8003212:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d067      	beq.n	80032e8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d062      	beq.n	80032e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800321e:	4b5a      	ldr	r3, [pc, #360]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0a8      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800322e:	4b56      	ldr	r3, [pc, #344]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a55      	ldr	r2, [pc, #340]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003234:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003238:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800323a:	f7fd fcc7 	bl	8000bcc <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003242:	f7fd fcc3 	bl	8000bcc <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e095      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003254:	4b4c      	ldr	r3, [pc, #304]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f0      	bne.n	8003242 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003260:	4b49      	ldr	r3, [pc, #292]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	4b49      	ldr	r3, [pc, #292]	; (800338c <HAL_RCC_OscConfig+0x81c>)
 8003266:	4013      	ands	r3, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003270:	3a01      	subs	r2, #1
 8003272:	0112      	lsls	r2, r2, #4
 8003274:	4311      	orrs	r1, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800327a:	0212      	lsls	r2, r2, #8
 800327c:	4311      	orrs	r1, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003282:	0852      	lsrs	r2, r2, #1
 8003284:	3a01      	subs	r2, #1
 8003286:	0552      	lsls	r2, r2, #21
 8003288:	4311      	orrs	r1, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800328e:	0852      	lsrs	r2, r2, #1
 8003290:	3a01      	subs	r2, #1
 8003292:	0652      	lsls	r2, r2, #25
 8003294:	4311      	orrs	r1, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800329a:	06d2      	lsls	r2, r2, #27
 800329c:	430a      	orrs	r2, r1
 800329e:	493a      	ldr	r1, [pc, #232]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032a4:	4b38      	ldr	r3, [pc, #224]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a37      	ldr	r2, [pc, #220]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 80032aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032b0:	4b35      	ldr	r3, [pc, #212]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4a34      	ldr	r2, [pc, #208]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 80032b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032bc:	f7fd fc86 	bl	8000bcc <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fd fc82 	bl	8000bcc <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e054      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d6:	4b2c      	ldr	r3, [pc, #176]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032e2:	e04c      	b.n	800337e <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e04b      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e8:	4b27      	ldr	r3, [pc, #156]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d144      	bne.n	800337e <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032f4:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a23      	ldr	r2, [pc, #140]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 80032fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003300:	4b21      	ldr	r3, [pc, #132]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4a20      	ldr	r2, [pc, #128]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800330a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800330c:	f7fd fc5e 	bl	8000bcc <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fd fc5a 	bl	8000bcc <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e02c      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003326:	4b18      	ldr	r3, [pc, #96]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x7a4>
 8003332:	e024      	b.n	800337e <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d01f      	beq.n	800337a <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333a:	4b13      	ldr	r3, [pc, #76]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a12      	ldr	r2, [pc, #72]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003340:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003346:	f7fd fc41 	bl	8000bcc <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334e:	f7fd fc3d 	bl	8000bcc <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e00f      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003360:	4b09      	ldr	r3, [pc, #36]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f0      	bne.n	800334e <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	4905      	ldr	r1, [pc, #20]	; (8003388 <HAL_RCC_OscConfig+0x818>)
 8003372:	4b07      	ldr	r3, [pc, #28]	; (8003390 <HAL_RCC_OscConfig+0x820>)
 8003374:	4013      	ands	r3, r2
 8003376:	60cb      	str	r3, [r1, #12]
 8003378:	e001      	b.n	800337e <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3720      	adds	r7, #32
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000
 800338c:	019d808c 	.word	0x019d808c
 8003390:	feeefffc 	.word	0xfeeefffc

08003394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0e7      	b.n	8003578 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a8:	4b75      	ldr	r3, [pc, #468]	; (8003580 <HAL_RCC_ClockConfig+0x1ec>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d910      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b72      	ldr	r3, [pc, #456]	; (8003580 <HAL_RCC_ClockConfig+0x1ec>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 0207 	bic.w	r2, r3, #7
 80033be:	4970      	ldr	r1, [pc, #448]	; (8003580 <HAL_RCC_ClockConfig+0x1ec>)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b6e      	ldr	r3, [pc, #440]	; (8003580 <HAL_RCC_ClockConfig+0x1ec>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0cf      	b.n	8003578 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d010      	beq.n	8003406 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	4b66      	ldr	r3, [pc, #408]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d908      	bls.n	8003406 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f4:	4b63      	ldr	r3, [pc, #396]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4960      	ldr	r1, [pc, #384]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d04c      	beq.n	80034ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b03      	cmp	r3, #3
 8003418:	d107      	bne.n	800342a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341a:	4b5a      	ldr	r3, [pc, #360]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d121      	bne.n	800346a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e0a6      	b.n	8003578 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003432:	4b54      	ldr	r3, [pc, #336]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d115      	bne.n	800346a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e09a      	b.n	8003578 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d107      	bne.n	800345a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800344a:	4b4e      	ldr	r3, [pc, #312]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e08e      	b.n	8003578 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800345a:	4b4a      	ldr	r3, [pc, #296]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e086      	b.n	8003578 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800346a:	4b46      	ldr	r3, [pc, #280]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f023 0203 	bic.w	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4943      	ldr	r1, [pc, #268]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 8003478:	4313      	orrs	r3, r2
 800347a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800347c:	f7fd fba6 	bl	8000bcc <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	e00a      	b.n	800349a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003484:	f7fd fba2 	bl	8000bcc <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e06e      	b.n	8003578 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 020c 	and.w	r2, r3, #12
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d1eb      	bne.n	8003484 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d010      	beq.n	80034da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	4b31      	ldr	r3, [pc, #196]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d208      	bcs.n	80034da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c8:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	492b      	ldr	r1, [pc, #172]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034da:	4b29      	ldr	r3, [pc, #164]	; (8003580 <HAL_RCC_ClockConfig+0x1ec>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d210      	bcs.n	800350a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e8:	4b25      	ldr	r3, [pc, #148]	; (8003580 <HAL_RCC_ClockConfig+0x1ec>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f023 0207 	bic.w	r2, r3, #7
 80034f0:	4923      	ldr	r1, [pc, #140]	; (8003580 <HAL_RCC_ClockConfig+0x1ec>)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f8:	4b21      	ldr	r3, [pc, #132]	; (8003580 <HAL_RCC_ClockConfig+0x1ec>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d001      	beq.n	800350a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e036      	b.n	8003578 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	4918      	ldr	r1, [pc, #96]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 8003524:	4313      	orrs	r3, r2
 8003526:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d009      	beq.n	8003548 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003534:	4b13      	ldr	r3, [pc, #76]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4910      	ldr	r1, [pc, #64]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 8003544:	4313      	orrs	r3, r2
 8003546:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003548:	f000 f824 	bl	8003594 <HAL_RCC_GetSysClockFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <HAL_RCC_ClockConfig+0x1f0>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	490b      	ldr	r1, [pc, #44]	; (8003588 <HAL_RCC_ClockConfig+0x1f4>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
 8003564:	4a09      	ldr	r2, [pc, #36]	; (800358c <HAL_RCC_ClockConfig+0x1f8>)
 8003566:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_RCC_ClockConfig+0x1fc>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7fd fadd 	bl	8000b2c <HAL_InitTick>
 8003572:	4603      	mov	r3, r0
 8003574:	72fb      	strb	r3, [r7, #11]

  return status;
 8003576:	7afb      	ldrb	r3, [r7, #11]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40022000 	.word	0x40022000
 8003584:	40021000 	.word	0x40021000
 8003588:	08005960 	.word	0x08005960
 800358c:	20000000 	.word	0x20000000
 8003590:	20000004 	.word	0x20000004

08003594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003594:	b480      	push	{r7}
 8003596:	b089      	sub	sp, #36	; 0x24
 8003598:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a2:	4b3e      	ldr	r3, [pc, #248]	; (800369c <HAL_RCC_GetSysClockFreq+0x108>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035ac:	4b3b      	ldr	r3, [pc, #236]	; (800369c <HAL_RCC_GetSysClockFreq+0x108>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x34>
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	2b0c      	cmp	r3, #12
 80035c0:	d121      	bne.n	8003606 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d11e      	bne.n	8003606 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035c8:	4b34      	ldr	r3, [pc, #208]	; (800369c <HAL_RCC_GetSysClockFreq+0x108>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d107      	bne.n	80035e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035d4:	4b31      	ldr	r3, [pc, #196]	; (800369c <HAL_RCC_GetSysClockFreq+0x108>)
 80035d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035da:	0a1b      	lsrs	r3, r3, #8
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	e005      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035e4:	4b2d      	ldr	r3, [pc, #180]	; (800369c <HAL_RCC_GetSysClockFreq+0x108>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035f0:	4a2b      	ldr	r2, [pc, #172]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10d      	bne.n	800361c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003604:	e00a      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d102      	bne.n	8003612 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800360c:	4b25      	ldr	r3, [pc, #148]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	e004      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d101      	bne.n	800361c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003618:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800361a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d134      	bne.n	800368c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003622:	4b1e      	ldr	r3, [pc, #120]	; (800369c <HAL_RCC_GetSysClockFreq+0x108>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d003      	beq.n	800363a <HAL_RCC_GetSysClockFreq+0xa6>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d003      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0xac>
 8003638:	e005      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800363a:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800363c:	617b      	str	r3, [r7, #20]
      break;
 800363e:	e005      	b.n	800364c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003642:	617b      	str	r3, [r7, #20]
      break;
 8003644:	e002      	b.n	800364c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	617b      	str	r3, [r7, #20]
      break;
 800364a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800364c:	4b13      	ldr	r3, [pc, #76]	; (800369c <HAL_RCC_GetSysClockFreq+0x108>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	3301      	adds	r3, #1
 8003658:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800365a:	4b10      	ldr	r3, [pc, #64]	; (800369c <HAL_RCC_GetSysClockFreq+0x108>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	fb02 f203 	mul.w	r2, r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003672:	4b0a      	ldr	r3, [pc, #40]	; (800369c <HAL_RCC_GetSysClockFreq+0x108>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	0e5b      	lsrs	r3, r3, #25
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	3301      	adds	r3, #1
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800368c:	69bb      	ldr	r3, [r7, #24]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3724      	adds	r7, #36	; 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000
 80036a0:	08005970 	.word	0x08005970
 80036a4:	00f42400 	.word	0x00f42400
 80036a8:	016e3600 	.word	0x016e3600

080036ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036b4:	2300      	movs	r3, #0
 80036b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036b8:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036c4:	f7ff f9f0 	bl	8002aa8 <HAL_PWREx_GetVoltageRange>
 80036c8:	6178      	str	r0, [r7, #20]
 80036ca:	e014      	b.n	80036f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036cc:	4b25      	ldr	r3, [pc, #148]	; (8003764 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d0:	4a24      	ldr	r2, [pc, #144]	; (8003764 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d6:	6593      	str	r3, [r2, #88]	; 0x58
 80036d8:	4b22      	ldr	r3, [pc, #136]	; (8003764 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036e4:	f7ff f9e0 	bl	8002aa8 <HAL_PWREx_GetVoltageRange>
 80036e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036ea:	4b1e      	ldr	r3, [pc, #120]	; (8003764 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	4a1d      	ldr	r2, [pc, #116]	; (8003764 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fc:	d10b      	bne.n	8003716 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b80      	cmp	r3, #128	; 0x80
 8003702:	d919      	bls.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2ba0      	cmp	r3, #160	; 0xa0
 8003708:	d902      	bls.n	8003710 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800370a:	2302      	movs	r3, #2
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	e013      	b.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003710:	2301      	movs	r3, #1
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	e010      	b.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b80      	cmp	r3, #128	; 0x80
 800371a:	d902      	bls.n	8003722 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800371c:	2303      	movs	r3, #3
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	e00a      	b.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b80      	cmp	r3, #128	; 0x80
 8003726:	d102      	bne.n	800372e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003728:	2302      	movs	r3, #2
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	e004      	b.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b70      	cmp	r3, #112	; 0x70
 8003732:	d101      	bne.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003734:	2301      	movs	r3, #1
 8003736:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f023 0207 	bic.w	r2, r3, #7
 8003740:	4909      	ldr	r1, [pc, #36]	; (8003768 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003748:	4b07      	ldr	r3, [pc, #28]	; (8003768 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	429a      	cmp	r2, r3
 8003754:	d001      	beq.n	800375a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000
 8003768:	40022000 	.word	0x40022000

0800376c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003774:	2300      	movs	r3, #0
 8003776:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003778:	2300      	movs	r3, #0
 800377a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003784:	2b00      	cmp	r3, #0
 8003786:	d031      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003790:	d01a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003792:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003796:	d814      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d009      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800379c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037a0:	d10f      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80037a2:	4b5d      	ldr	r3, [pc, #372]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	4a5c      	ldr	r2, [pc, #368]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037ae:	e00c      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f9f0 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037c0:	e003      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	74fb      	strb	r3, [r7, #19]
      break;
 80037c6:	e000      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80037c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037d0:	4b51      	ldr	r3, [pc, #324]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	494e      	ldr	r1, [pc, #312]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037e6:	e001      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 809e 	beq.w	8003936 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037fa:	2300      	movs	r3, #0
 80037fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037fe:	4b46      	ldr	r3, [pc, #280]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800380e:	2300      	movs	r3, #0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00d      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003814:	4b40      	ldr	r3, [pc, #256]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003818:	4a3f      	ldr	r2, [pc, #252]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800381a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381e:	6593      	str	r3, [r2, #88]	; 0x58
 8003820:	4b3d      	ldr	r3, [pc, #244]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382c:	2301      	movs	r3, #1
 800382e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003830:	4b3a      	ldr	r3, [pc, #232]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a39      	ldr	r2, [pc, #228]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800383a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800383c:	f7fd f9c6 	bl	8000bcc <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003842:	e009      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003844:	f7fd f9c2 	bl	8000bcc <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d902      	bls.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	74fb      	strb	r3, [r7, #19]
        break;
 8003856:	e005      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003858:	4b30      	ldr	r3, [pc, #192]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ef      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d15a      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800386a:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003874:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01e      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	429a      	cmp	r2, r3
 8003884:	d019      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003886:	4b24      	ldr	r3, [pc, #144]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003890:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003892:	4b21      	ldr	r3, [pc, #132]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800389a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a8:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038b2:	4a19      	ldr	r2, [pc, #100]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d016      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fd f982 	bl	8000bcc <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ca:	e00b      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7fd f97e 	bl	8000bcc <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d902      	bls.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	74fb      	strb	r3, [r7, #19]
            break;
 80038e2:	e006      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0ec      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80038f2:	7cfb      	ldrb	r3, [r7, #19]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10b      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038f8:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003906:	4904      	ldr	r1, [pc, #16]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800390e:	e009      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003910:	7cfb      	ldrb	r3, [r7, #19]
 8003912:	74bb      	strb	r3, [r7, #18]
 8003914:	e006      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003924:	7c7b      	ldrb	r3, [r7, #17]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d105      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800392a:	4b9b      	ldr	r3, [pc, #620]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	4a9a      	ldr	r2, [pc, #616]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003934:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003942:	4b95      	ldr	r3, [pc, #596]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f023 0203 	bic.w	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	4991      	ldr	r1, [pc, #580]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003964:	4b8c      	ldr	r3, [pc, #560]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f023 020c 	bic.w	r2, r3, #12
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	4989      	ldr	r1, [pc, #548]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003986:	4b84      	ldr	r3, [pc, #528]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	4980      	ldr	r1, [pc, #512]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039a8:	4b7b      	ldr	r3, [pc, #492]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	4978      	ldr	r1, [pc, #480]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ca:	4b73      	ldr	r3, [pc, #460]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d8:	496f      	ldr	r1, [pc, #444]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039ec:	4b6a      	ldr	r3, [pc, #424]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	4967      	ldr	r1, [pc, #412]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a0e:	4b62      	ldr	r3, [pc, #392]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	495e      	ldr	r1, [pc, #376]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a30:	4b59      	ldr	r3, [pc, #356]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3e:	4956      	ldr	r1, [pc, #344]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a52:	4b51      	ldr	r3, [pc, #324]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	494d      	ldr	r1, [pc, #308]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d028      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a74:	4b48      	ldr	r3, [pc, #288]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a82:	4945      	ldr	r1, [pc, #276]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a92:	d106      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a94:	4b40      	ldr	r3, [pc, #256]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a3f      	ldr	r2, [pc, #252]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a9e:	60d3      	str	r3, [r2, #12]
 8003aa0:	e011      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aaa:	d10c      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 f872 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003abc:	7cfb      	ldrb	r3, [r7, #19]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8003ac2:	7cfb      	ldrb	r3, [r7, #19]
 8003ac4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d028      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ad2:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae0:	492d      	ldr	r1, [pc, #180]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af0:	d106      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af2:	4b29      	ldr	r3, [pc, #164]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	4a28      	ldr	r2, [pc, #160]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003af8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003afc:	60d3      	str	r3, [r2, #12]
 8003afe:	e011      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	2101      	movs	r1, #1
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 f843 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 8003b16:	4603      	mov	r3, r0
 8003b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b1a:	7cfb      	ldrb	r3, [r7, #19]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003b20:	7cfb      	ldrb	r3, [r7, #19]
 8003b22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01c      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b30:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3e:	4916      	ldr	r1, [pc, #88]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b4e:	d10c      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	2102      	movs	r1, #2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f820 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b60:	7cfb      	ldrb	r3, [r7, #19]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8003b66:	7cfb      	ldrb	r3, [r7, #19]
 8003b68:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	4904      	ldr	r1, [pc, #16]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000

08003b9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003baa:	4b74      	ldr	r3, [pc, #464]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d018      	beq.n	8003be8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bb6:	4b71      	ldr	r3, [pc, #452]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0203 	and.w	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d10d      	bne.n	8003be2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bce:	4b6b      	ldr	r3, [pc, #428]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	091b      	lsrs	r3, r3, #4
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
       ||
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d047      	beq.n	8003c72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
 8003be6:	e044      	b.n	8003c72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d018      	beq.n	8003c22 <RCCEx_PLLSAI1_Config+0x86>
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d825      	bhi.n	8003c40 <RCCEx_PLLSAI1_Config+0xa4>
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d002      	beq.n	8003bfe <RCCEx_PLLSAI1_Config+0x62>
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d009      	beq.n	8003c10 <RCCEx_PLLSAI1_Config+0x74>
 8003bfc:	e020      	b.n	8003c40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bfe:	4b5f      	ldr	r3, [pc, #380]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d11d      	bne.n	8003c46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c0e:	e01a      	b.n	8003c46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c10:	4b5a      	ldr	r3, [pc, #360]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d116      	bne.n	8003c4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c20:	e013      	b.n	8003c4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c22:	4b56      	ldr	r3, [pc, #344]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10f      	bne.n	8003c4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c2e:	4b53      	ldr	r3, [pc, #332]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c3e:	e006      	b.n	8003c4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
      break;
 8003c44:	e004      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c46:	bf00      	nop
 8003c48:	e002      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10d      	bne.n	8003c72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c56:	4b49      	ldr	r3, [pc, #292]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	4943      	ldr	r1, [pc, #268]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d17c      	bne.n	8003d72 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c78:	4b40      	ldr	r3, [pc, #256]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a3f      	ldr	r2, [pc, #252]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c84:	f7fc ffa2 	bl	8000bcc <HAL_GetTick>
 8003c88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c8a:	e009      	b.n	8003ca0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c8c:	f7fc ff9e 	bl	8000bcc <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d902      	bls.n	8003ca0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8003c9e:	e005      	b.n	8003cac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ca0:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1ef      	bne.n	8003c8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d15f      	bne.n	8003d72 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d110      	bne.n	8003cda <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cb8:	4b30      	ldr	r3, [pc, #192]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003cc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6892      	ldr	r2, [r2, #8]
 8003cc8:	0211      	lsls	r1, r2, #8
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68d2      	ldr	r2, [r2, #12]
 8003cce:	06d2      	lsls	r2, r2, #27
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	492a      	ldr	r1, [pc, #168]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	610b      	str	r3, [r1, #16]
 8003cd8:	e027      	b.n	8003d2a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d112      	bne.n	8003d06 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ce0:	4b26      	ldr	r3, [pc, #152]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ce8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6892      	ldr	r2, [r2, #8]
 8003cf0:	0211      	lsls	r1, r2, #8
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6912      	ldr	r2, [r2, #16]
 8003cf6:	0852      	lsrs	r2, r2, #1
 8003cf8:	3a01      	subs	r2, #1
 8003cfa:	0552      	lsls	r2, r2, #21
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	491f      	ldr	r1, [pc, #124]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	610b      	str	r3, [r1, #16]
 8003d04:	e011      	b.n	8003d2a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d06:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6892      	ldr	r2, [r2, #8]
 8003d16:	0211      	lsls	r1, r2, #8
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6952      	ldr	r2, [r2, #20]
 8003d1c:	0852      	lsrs	r2, r2, #1
 8003d1e:	3a01      	subs	r2, #1
 8003d20:	0652      	lsls	r2, r2, #25
 8003d22:	430a      	orrs	r2, r1
 8003d24:	4915      	ldr	r1, [pc, #84]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d2a:	4b14      	ldr	r3, [pc, #80]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a13      	ldr	r2, [pc, #76]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d36:	f7fc ff49 	bl	8000bcc <HAL_GetTick>
 8003d3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d3c:	e009      	b.n	8003d52 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d3e:	f7fc ff45 	bl	8000bcc <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d902      	bls.n	8003d52 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	73fb      	strb	r3, [r7, #15]
          break;
 8003d50:	e005      	b.n	8003d5e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d52:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0ef      	beq.n	8003d3e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d106      	bne.n	8003d72 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	4903      	ldr	r1, [pc, #12]	; (8003d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40021000 	.word	0x40021000

08003d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e049      	b.n	8003e26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fc fd28 	bl	80007fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f000 fb26 	bl	8004410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d001      	beq.n	8003e48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e033      	b.n	8003eb0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a19      	ldr	r2, [pc, #100]	; (8003ebc <HAL_TIM_Base_Start+0x8c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d009      	beq.n	8003e6e <HAL_TIM_Base_Start+0x3e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e62:	d004      	beq.n	8003e6e <HAL_TIM_Base_Start+0x3e>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <HAL_TIM_Base_Start+0x90>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d115      	bne.n	8003e9a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <HAL_TIM_Base_Start+0x94>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b06      	cmp	r3, #6
 8003e7e:	d015      	beq.n	8003eac <HAL_TIM_Base_Start+0x7c>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e86:	d011      	beq.n	8003eac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e98:	e008      	b.n	8003eac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e000      	b.n	8003eae <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40012c00 	.word	0x40012c00
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	00010007 	.word	0x00010007

08003ec8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d109      	bne.n	8003eec <HAL_TIM_OC_Start+0x24>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	bf14      	ite	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	2300      	moveq	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	e03c      	b.n	8003f66 <HAL_TIM_OC_Start+0x9e>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d109      	bne.n	8003f06 <HAL_TIM_OC_Start+0x3e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	bf14      	ite	ne
 8003efe:	2301      	movne	r3, #1
 8003f00:	2300      	moveq	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	e02f      	b.n	8003f66 <HAL_TIM_OC_Start+0x9e>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d109      	bne.n	8003f20 <HAL_TIM_OC_Start+0x58>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	bf14      	ite	ne
 8003f18:	2301      	movne	r3, #1
 8003f1a:	2300      	moveq	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	e022      	b.n	8003f66 <HAL_TIM_OC_Start+0x9e>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b0c      	cmp	r3, #12
 8003f24:	d109      	bne.n	8003f3a <HAL_TIM_OC_Start+0x72>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	bf14      	ite	ne
 8003f32:	2301      	movne	r3, #1
 8003f34:	2300      	moveq	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	e015      	b.n	8003f66 <HAL_TIM_OC_Start+0x9e>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	d109      	bne.n	8003f54 <HAL_TIM_OC_Start+0x8c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	bf14      	ite	ne
 8003f4c:	2301      	movne	r3, #1
 8003f4e:	2300      	moveq	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	e008      	b.n	8003f66 <HAL_TIM_OC_Start+0x9e>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e07e      	b.n	800406c <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d104      	bne.n	8003f7e <HAL_TIM_OC_Start+0xb6>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f7c:	e023      	b.n	8003fc6 <HAL_TIM_OC_Start+0xfe>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d104      	bne.n	8003f8e <HAL_TIM_OC_Start+0xc6>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f8c:	e01b      	b.n	8003fc6 <HAL_TIM_OC_Start+0xfe>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d104      	bne.n	8003f9e <HAL_TIM_OC_Start+0xd6>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f9c:	e013      	b.n	8003fc6 <HAL_TIM_OC_Start+0xfe>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b0c      	cmp	r3, #12
 8003fa2:	d104      	bne.n	8003fae <HAL_TIM_OC_Start+0xe6>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fac:	e00b      	b.n	8003fc6 <HAL_TIM_OC_Start+0xfe>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d104      	bne.n	8003fbe <HAL_TIM_OC_Start+0xf6>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fbc:	e003      	b.n	8003fc6 <HAL_TIM_OC_Start+0xfe>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	6839      	ldr	r1, [r7, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fc28 	bl	8004824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a26      	ldr	r2, [pc, #152]	; (8004074 <HAL_TIM_OC_Start+0x1ac>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d009      	beq.n	8003ff2 <HAL_TIM_OC_Start+0x12a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a25      	ldr	r2, [pc, #148]	; (8004078 <HAL_TIM_OC_Start+0x1b0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <HAL_TIM_OC_Start+0x12a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a23      	ldr	r2, [pc, #140]	; (800407c <HAL_TIM_OC_Start+0x1b4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_OC_Start+0x12e>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <HAL_TIM_OC_Start+0x130>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800400a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a18      	ldr	r2, [pc, #96]	; (8004074 <HAL_TIM_OC_Start+0x1ac>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d009      	beq.n	800402a <HAL_TIM_OC_Start+0x162>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d004      	beq.n	800402a <HAL_TIM_OC_Start+0x162>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <HAL_TIM_OC_Start+0x1b0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d115      	bne.n	8004056 <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_TIM_OC_Start+0x1b8>)
 8004032:	4013      	ands	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b06      	cmp	r3, #6
 800403a:	d015      	beq.n	8004068 <HAL_TIM_OC_Start+0x1a0>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004042:	d011      	beq.n	8004068 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004054:	e008      	b.n	8004068 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	e000      	b.n	800406a <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004068:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40014000 	.word	0x40014000
 800407c:	40014400 	.word	0x40014400
 8004080:	00010007 	.word	0x00010007

08004084 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e049      	b.n	800412a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f841 	bl	8004132 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4610      	mov	r0, r2
 80040c4:	f000 f9a4 	bl	8004410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b086      	sub	sp, #24
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004160:	2302      	movs	r3, #2
 8004162:	e088      	b.n	8004276 <HAL_TIM_IC_ConfigChannel+0x130>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d11b      	bne.n	80041aa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	6819      	ldr	r1, [r3, #0]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f000 f9a9 	bl	80044d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699a      	ldr	r2, [r3, #24]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 020c 	bic.w	r2, r2, #12
 8004194:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6999      	ldr	r1, [r3, #24]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	619a      	str	r2, [r3, #24]
 80041a8:	e060      	b.n	800426c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d11c      	bne.n	80041ea <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6818      	ldr	r0, [r3, #0]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	6819      	ldr	r1, [r3, #0]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f000 fa0f 	bl	80045e2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80041d2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6999      	ldr	r1, [r3, #24]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	021a      	lsls	r2, r3, #8
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	619a      	str	r2, [r3, #24]
 80041e8:	e040      	b.n	800426c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d11b      	bne.n	8004228 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6819      	ldr	r1, [r3, #0]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f000 fa5c 	bl	80046bc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 020c 	bic.w	r2, r2, #12
 8004212:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69d9      	ldr	r1, [r3, #28]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	61da      	str	r2, [r3, #28]
 8004226:	e021      	b.n	800426c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b0c      	cmp	r3, #12
 800422c:	d11c      	bne.n	8004268 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6819      	ldr	r1, [r3, #0]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f000 fa79 	bl	8004734 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004250:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69d9      	ldr	r1, [r3, #28]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	021a      	lsls	r2, r3, #8
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	61da      	str	r2, [r3, #28]
 8004266:	e001      	b.n	800426c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004274:	7dfb      	ldrb	r3, [r7, #23]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_TIM_ConfigClockSource+0x1c>
 8004296:	2302      	movs	r3, #2
 8004298:	e0b6      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x18a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2202      	movs	r2, #2
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042c4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d6:	d03e      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0xd8>
 80042d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042dc:	f200 8087 	bhi.w	80043ee <HAL_TIM_ConfigClockSource+0x170>
 80042e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e4:	f000 8086 	beq.w	80043f4 <HAL_TIM_ConfigClockSource+0x176>
 80042e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ec:	d87f      	bhi.n	80043ee <HAL_TIM_ConfigClockSource+0x170>
 80042ee:	2b70      	cmp	r3, #112	; 0x70
 80042f0:	d01a      	beq.n	8004328 <HAL_TIM_ConfigClockSource+0xaa>
 80042f2:	2b70      	cmp	r3, #112	; 0x70
 80042f4:	d87b      	bhi.n	80043ee <HAL_TIM_ConfigClockSource+0x170>
 80042f6:	2b60      	cmp	r3, #96	; 0x60
 80042f8:	d050      	beq.n	800439c <HAL_TIM_ConfigClockSource+0x11e>
 80042fa:	2b60      	cmp	r3, #96	; 0x60
 80042fc:	d877      	bhi.n	80043ee <HAL_TIM_ConfigClockSource+0x170>
 80042fe:	2b50      	cmp	r3, #80	; 0x50
 8004300:	d03c      	beq.n	800437c <HAL_TIM_ConfigClockSource+0xfe>
 8004302:	2b50      	cmp	r3, #80	; 0x50
 8004304:	d873      	bhi.n	80043ee <HAL_TIM_ConfigClockSource+0x170>
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	d058      	beq.n	80043bc <HAL_TIM_ConfigClockSource+0x13e>
 800430a:	2b40      	cmp	r3, #64	; 0x40
 800430c:	d86f      	bhi.n	80043ee <HAL_TIM_ConfigClockSource+0x170>
 800430e:	2b30      	cmp	r3, #48	; 0x30
 8004310:	d064      	beq.n	80043dc <HAL_TIM_ConfigClockSource+0x15e>
 8004312:	2b30      	cmp	r3, #48	; 0x30
 8004314:	d86b      	bhi.n	80043ee <HAL_TIM_ConfigClockSource+0x170>
 8004316:	2b20      	cmp	r3, #32
 8004318:	d060      	beq.n	80043dc <HAL_TIM_ConfigClockSource+0x15e>
 800431a:	2b20      	cmp	r3, #32
 800431c:	d867      	bhi.n	80043ee <HAL_TIM_ConfigClockSource+0x170>
 800431e:	2b00      	cmp	r3, #0
 8004320:	d05c      	beq.n	80043dc <HAL_TIM_ConfigClockSource+0x15e>
 8004322:	2b10      	cmp	r3, #16
 8004324:	d05a      	beq.n	80043dc <HAL_TIM_ConfigClockSource+0x15e>
 8004326:	e062      	b.n	80043ee <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6899      	ldr	r1, [r3, #8]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f000 fa54 	bl	80047e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800434a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	609a      	str	r2, [r3, #8]
      break;
 8004354:	e04f      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6899      	ldr	r1, [r3, #8]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f000 fa3d 	bl	80047e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004378:	609a      	str	r2, [r3, #8]
      break;
 800437a:	e03c      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	6859      	ldr	r1, [r3, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	461a      	mov	r2, r3
 800438a:	f000 f8fb 	bl	8004584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2150      	movs	r1, #80	; 0x50
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fa0a 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 800439a:	e02c      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	461a      	mov	r2, r3
 80043aa:	f000 f957 	bl	800465c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2160      	movs	r1, #96	; 0x60
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 f9fa 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 80043ba:	e01c      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6859      	ldr	r1, [r3, #4]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	461a      	mov	r2, r3
 80043ca:	f000 f8db 	bl	8004584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2140      	movs	r1, #64	; 0x40
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 f9ea 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 80043da:	e00c      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f000 f9e1 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 80043ec:	e003      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
      break;
 80043f2:	e000      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80043f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004406:	7bfb      	ldrb	r3, [r7, #15]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a2a      	ldr	r2, [pc, #168]	; (80044cc <TIM_Base_SetConfig+0xbc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d003      	beq.n	8004430 <TIM_Base_SetConfig+0x20>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442e:	d108      	bne.n	8004442 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a21      	ldr	r2, [pc, #132]	; (80044cc <TIM_Base_SetConfig+0xbc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00b      	beq.n	8004462 <TIM_Base_SetConfig+0x52>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004450:	d007      	beq.n	8004462 <TIM_Base_SetConfig+0x52>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <TIM_Base_SetConfig+0xc0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d003      	beq.n	8004462 <TIM_Base_SetConfig+0x52>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <TIM_Base_SetConfig+0xc4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d108      	bne.n	8004474 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a0c      	ldr	r2, [pc, #48]	; (80044cc <TIM_Base_SetConfig+0xbc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d007      	beq.n	80044b0 <TIM_Base_SetConfig+0xa0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a0b      	ldr	r2, [pc, #44]	; (80044d0 <TIM_Base_SetConfig+0xc0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d003      	beq.n	80044b0 <TIM_Base_SetConfig+0xa0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a0a      	ldr	r2, [pc, #40]	; (80044d4 <TIM_Base_SetConfig+0xc4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d103      	bne.n	80044b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	615a      	str	r2, [r3, #20]
}
 80044be:	bf00      	nop
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	40014000 	.word	0x40014000
 80044d4:	40014400 	.word	0x40014400

080044d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f023 0201 	bic.w	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a1e      	ldr	r2, [pc, #120]	; (800457c <TIM_TI1_SetConfig+0xa4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <TIM_TI1_SetConfig+0x3e>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450c:	d003      	beq.n	8004516 <TIM_TI1_SetConfig+0x3e>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <TIM_TI1_SetConfig+0xa8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d101      	bne.n	800451a <TIM_TI1_SetConfig+0x42>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <TIM_TI1_SetConfig+0x44>
 800451a:	2300      	movs	r3, #0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f023 0303 	bic.w	r3, r3, #3
 8004526:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	e003      	b.n	800453a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	b2db      	uxtb	r3, r3
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f023 030a 	bic.w	r3, r3, #10
 8004554:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f003 030a 	and.w	r3, r3, #10
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40012c00 	.word	0x40012c00
 8004580:	40014000 	.word	0x40014000

08004584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f023 0201 	bic.w	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f023 030a 	bic.w	r3, r3, #10
 80045c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	621a      	str	r2, [r3, #32]
}
 80045d6:	bf00      	nop
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b087      	sub	sp, #28
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
 80045ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f023 0210 	bic.w	r2, r3, #16
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800460e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	021b      	lsls	r3, r3, #8
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004620:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	031b      	lsls	r3, r3, #12
 8004626:	b29b      	uxth	r3, r3
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004634:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	621a      	str	r2, [r3, #32]
}
 8004650:	bf00      	nop
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	f023 0210 	bic.w	r2, r3, #16
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004686:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	031b      	lsls	r3, r3, #12
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004698:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	621a      	str	r2, [r3, #32]
}
 80046b0:	bf00      	nop
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f023 0303 	bic.w	r3, r3, #3
 80046e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800470c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	621a      	str	r2, [r3, #32]
}
 8004728:	bf00      	nop
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004760:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004772:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	031b      	lsls	r3, r3, #12
 8004778:	b29b      	uxth	r3, r3
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004786:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	031b      	lsls	r3, r3, #12
 800478c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f043 0307 	orr.w	r3, r3, #7
 80047d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	609a      	str	r2, [r3, #8]
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	021a      	lsls	r2, r3, #8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	431a      	orrs	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4313      	orrs	r3, r2
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	609a      	str	r2, [r3, #8]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2201      	movs	r2, #1
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1a      	ldr	r2, [r3, #32]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	43db      	mvns	r3, r3
 8004846:	401a      	ands	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a1a      	ldr	r2, [r3, #32]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	fa01 f303 	lsl.w	r3, r1, r3
 800485c:	431a      	orrs	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004884:	2302      	movs	r3, #2
 8004886:	e04f      	b.n	8004928 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a21      	ldr	r2, [pc, #132]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d108      	bne.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a14      	ldr	r2, [pc, #80]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d009      	beq.n	80048fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f0:	d004      	beq.n	80048fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a10      	ldr	r2, [pc, #64]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d10c      	bne.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004902:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	4313      	orrs	r3, r2
 800490c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	40012c00 	.word	0x40012c00
 8004938:	40014000 	.word	0x40014000

0800493c <__errno>:
 800493c:	4b01      	ldr	r3, [pc, #4]	; (8004944 <__errno+0x8>)
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	2000000c 	.word	0x2000000c

08004948 <__libc_init_array>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4d0d      	ldr	r5, [pc, #52]	; (8004980 <__libc_init_array+0x38>)
 800494c:	4c0d      	ldr	r4, [pc, #52]	; (8004984 <__libc_init_array+0x3c>)
 800494e:	1b64      	subs	r4, r4, r5
 8004950:	10a4      	asrs	r4, r4, #2
 8004952:	2600      	movs	r6, #0
 8004954:	42a6      	cmp	r6, r4
 8004956:	d109      	bne.n	800496c <__libc_init_array+0x24>
 8004958:	4d0b      	ldr	r5, [pc, #44]	; (8004988 <__libc_init_array+0x40>)
 800495a:	4c0c      	ldr	r4, [pc, #48]	; (800498c <__libc_init_array+0x44>)
 800495c:	f000 ffec 	bl	8005938 <_init>
 8004960:	1b64      	subs	r4, r4, r5
 8004962:	10a4      	asrs	r4, r4, #2
 8004964:	2600      	movs	r6, #0
 8004966:	42a6      	cmp	r6, r4
 8004968:	d105      	bne.n	8004976 <__libc_init_array+0x2e>
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004970:	4798      	blx	r3
 8004972:	3601      	adds	r6, #1
 8004974:	e7ee      	b.n	8004954 <__libc_init_array+0xc>
 8004976:	f855 3b04 	ldr.w	r3, [r5], #4
 800497a:	4798      	blx	r3
 800497c:	3601      	adds	r6, #1
 800497e:	e7f2      	b.n	8004966 <__libc_init_array+0x1e>
 8004980:	08005a38 	.word	0x08005a38
 8004984:	08005a38 	.word	0x08005a38
 8004988:	08005a38 	.word	0x08005a38
 800498c:	08005a3c 	.word	0x08005a3c

08004990 <memset>:
 8004990:	4402      	add	r2, r0
 8004992:	4603      	mov	r3, r0
 8004994:	4293      	cmp	r3, r2
 8004996:	d100      	bne.n	800499a <memset+0xa>
 8004998:	4770      	bx	lr
 800499a:	f803 1b01 	strb.w	r1, [r3], #1
 800499e:	e7f9      	b.n	8004994 <memset+0x4>

080049a0 <iprintf>:
 80049a0:	b40f      	push	{r0, r1, r2, r3}
 80049a2:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <iprintf+0x2c>)
 80049a4:	b513      	push	{r0, r1, r4, lr}
 80049a6:	681c      	ldr	r4, [r3, #0]
 80049a8:	b124      	cbz	r4, 80049b4 <iprintf+0x14>
 80049aa:	69a3      	ldr	r3, [r4, #24]
 80049ac:	b913      	cbnz	r3, 80049b4 <iprintf+0x14>
 80049ae:	4620      	mov	r0, r4
 80049b0:	f000 fa5e 	bl	8004e70 <__sinit>
 80049b4:	ab05      	add	r3, sp, #20
 80049b6:	9a04      	ldr	r2, [sp, #16]
 80049b8:	68a1      	ldr	r1, [r4, #8]
 80049ba:	9301      	str	r3, [sp, #4]
 80049bc:	4620      	mov	r0, r4
 80049be:	f000 fc2f 	bl	8005220 <_vfiprintf_r>
 80049c2:	b002      	add	sp, #8
 80049c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049c8:	b004      	add	sp, #16
 80049ca:	4770      	bx	lr
 80049cc:	2000000c 	.word	0x2000000c

080049d0 <_puts_r>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	460e      	mov	r6, r1
 80049d4:	4605      	mov	r5, r0
 80049d6:	b118      	cbz	r0, 80049e0 <_puts_r+0x10>
 80049d8:	6983      	ldr	r3, [r0, #24]
 80049da:	b90b      	cbnz	r3, 80049e0 <_puts_r+0x10>
 80049dc:	f000 fa48 	bl	8004e70 <__sinit>
 80049e0:	69ab      	ldr	r3, [r5, #24]
 80049e2:	68ac      	ldr	r4, [r5, #8]
 80049e4:	b913      	cbnz	r3, 80049ec <_puts_r+0x1c>
 80049e6:	4628      	mov	r0, r5
 80049e8:	f000 fa42 	bl	8004e70 <__sinit>
 80049ec:	4b2c      	ldr	r3, [pc, #176]	; (8004aa0 <_puts_r+0xd0>)
 80049ee:	429c      	cmp	r4, r3
 80049f0:	d120      	bne.n	8004a34 <_puts_r+0x64>
 80049f2:	686c      	ldr	r4, [r5, #4]
 80049f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049f6:	07db      	lsls	r3, r3, #31
 80049f8:	d405      	bmi.n	8004a06 <_puts_r+0x36>
 80049fa:	89a3      	ldrh	r3, [r4, #12]
 80049fc:	0598      	lsls	r0, r3, #22
 80049fe:	d402      	bmi.n	8004a06 <_puts_r+0x36>
 8004a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a02:	f000 fad3 	bl	8004fac <__retarget_lock_acquire_recursive>
 8004a06:	89a3      	ldrh	r3, [r4, #12]
 8004a08:	0719      	lsls	r1, r3, #28
 8004a0a:	d51d      	bpl.n	8004a48 <_puts_r+0x78>
 8004a0c:	6923      	ldr	r3, [r4, #16]
 8004a0e:	b1db      	cbz	r3, 8004a48 <_puts_r+0x78>
 8004a10:	3e01      	subs	r6, #1
 8004a12:	68a3      	ldr	r3, [r4, #8]
 8004a14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	60a3      	str	r3, [r4, #8]
 8004a1c:	bb39      	cbnz	r1, 8004a6e <_puts_r+0x9e>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	da38      	bge.n	8004a94 <_puts_r+0xc4>
 8004a22:	4622      	mov	r2, r4
 8004a24:	210a      	movs	r1, #10
 8004a26:	4628      	mov	r0, r5
 8004a28:	f000 f848 	bl	8004abc <__swbuf_r>
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	d011      	beq.n	8004a54 <_puts_r+0x84>
 8004a30:	250a      	movs	r5, #10
 8004a32:	e011      	b.n	8004a58 <_puts_r+0x88>
 8004a34:	4b1b      	ldr	r3, [pc, #108]	; (8004aa4 <_puts_r+0xd4>)
 8004a36:	429c      	cmp	r4, r3
 8004a38:	d101      	bne.n	8004a3e <_puts_r+0x6e>
 8004a3a:	68ac      	ldr	r4, [r5, #8]
 8004a3c:	e7da      	b.n	80049f4 <_puts_r+0x24>
 8004a3e:	4b1a      	ldr	r3, [pc, #104]	; (8004aa8 <_puts_r+0xd8>)
 8004a40:	429c      	cmp	r4, r3
 8004a42:	bf08      	it	eq
 8004a44:	68ec      	ldreq	r4, [r5, #12]
 8004a46:	e7d5      	b.n	80049f4 <_puts_r+0x24>
 8004a48:	4621      	mov	r1, r4
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f000 f888 	bl	8004b60 <__swsetup_r>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d0dd      	beq.n	8004a10 <_puts_r+0x40>
 8004a54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004a58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a5a:	07da      	lsls	r2, r3, #31
 8004a5c:	d405      	bmi.n	8004a6a <_puts_r+0x9a>
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	059b      	lsls	r3, r3, #22
 8004a62:	d402      	bmi.n	8004a6a <_puts_r+0x9a>
 8004a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a66:	f000 faa2 	bl	8004fae <__retarget_lock_release_recursive>
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	bd70      	pop	{r4, r5, r6, pc}
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	da04      	bge.n	8004a7c <_puts_r+0xac>
 8004a72:	69a2      	ldr	r2, [r4, #24]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	dc06      	bgt.n	8004a86 <_puts_r+0xb6>
 8004a78:	290a      	cmp	r1, #10
 8004a7a:	d004      	beq.n	8004a86 <_puts_r+0xb6>
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	6022      	str	r2, [r4, #0]
 8004a82:	7019      	strb	r1, [r3, #0]
 8004a84:	e7c5      	b.n	8004a12 <_puts_r+0x42>
 8004a86:	4622      	mov	r2, r4
 8004a88:	4628      	mov	r0, r5
 8004a8a:	f000 f817 	bl	8004abc <__swbuf_r>
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d1bf      	bne.n	8004a12 <_puts_r+0x42>
 8004a92:	e7df      	b.n	8004a54 <_puts_r+0x84>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	250a      	movs	r5, #10
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	6022      	str	r2, [r4, #0]
 8004a9c:	701d      	strb	r5, [r3, #0]
 8004a9e:	e7db      	b.n	8004a58 <_puts_r+0x88>
 8004aa0:	080059c4 	.word	0x080059c4
 8004aa4:	080059e4 	.word	0x080059e4
 8004aa8:	080059a4 	.word	0x080059a4

08004aac <puts>:
 8004aac:	4b02      	ldr	r3, [pc, #8]	; (8004ab8 <puts+0xc>)
 8004aae:	4601      	mov	r1, r0
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	f7ff bf8d 	b.w	80049d0 <_puts_r>
 8004ab6:	bf00      	nop
 8004ab8:	2000000c 	.word	0x2000000c

08004abc <__swbuf_r>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	460e      	mov	r6, r1
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	4605      	mov	r5, r0
 8004ac4:	b118      	cbz	r0, 8004ace <__swbuf_r+0x12>
 8004ac6:	6983      	ldr	r3, [r0, #24]
 8004ac8:	b90b      	cbnz	r3, 8004ace <__swbuf_r+0x12>
 8004aca:	f000 f9d1 	bl	8004e70 <__sinit>
 8004ace:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <__swbuf_r+0x98>)
 8004ad0:	429c      	cmp	r4, r3
 8004ad2:	d12b      	bne.n	8004b2c <__swbuf_r+0x70>
 8004ad4:	686c      	ldr	r4, [r5, #4]
 8004ad6:	69a3      	ldr	r3, [r4, #24]
 8004ad8:	60a3      	str	r3, [r4, #8]
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	071a      	lsls	r2, r3, #28
 8004ade:	d52f      	bpl.n	8004b40 <__swbuf_r+0x84>
 8004ae0:	6923      	ldr	r3, [r4, #16]
 8004ae2:	b36b      	cbz	r3, 8004b40 <__swbuf_r+0x84>
 8004ae4:	6923      	ldr	r3, [r4, #16]
 8004ae6:	6820      	ldr	r0, [r4, #0]
 8004ae8:	1ac0      	subs	r0, r0, r3
 8004aea:	6963      	ldr	r3, [r4, #20]
 8004aec:	b2f6      	uxtb	r6, r6
 8004aee:	4283      	cmp	r3, r0
 8004af0:	4637      	mov	r7, r6
 8004af2:	dc04      	bgt.n	8004afe <__swbuf_r+0x42>
 8004af4:	4621      	mov	r1, r4
 8004af6:	4628      	mov	r0, r5
 8004af8:	f000 f926 	bl	8004d48 <_fflush_r>
 8004afc:	bb30      	cbnz	r0, 8004b4c <__swbuf_r+0x90>
 8004afe:	68a3      	ldr	r3, [r4, #8]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	60a3      	str	r3, [r4, #8]
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	6022      	str	r2, [r4, #0]
 8004b0a:	701e      	strb	r6, [r3, #0]
 8004b0c:	6963      	ldr	r3, [r4, #20]
 8004b0e:	3001      	adds	r0, #1
 8004b10:	4283      	cmp	r3, r0
 8004b12:	d004      	beq.n	8004b1e <__swbuf_r+0x62>
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	07db      	lsls	r3, r3, #31
 8004b18:	d506      	bpl.n	8004b28 <__swbuf_r+0x6c>
 8004b1a:	2e0a      	cmp	r6, #10
 8004b1c:	d104      	bne.n	8004b28 <__swbuf_r+0x6c>
 8004b1e:	4621      	mov	r1, r4
 8004b20:	4628      	mov	r0, r5
 8004b22:	f000 f911 	bl	8004d48 <_fflush_r>
 8004b26:	b988      	cbnz	r0, 8004b4c <__swbuf_r+0x90>
 8004b28:	4638      	mov	r0, r7
 8004b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <__swbuf_r+0x9c>)
 8004b2e:	429c      	cmp	r4, r3
 8004b30:	d101      	bne.n	8004b36 <__swbuf_r+0x7a>
 8004b32:	68ac      	ldr	r4, [r5, #8]
 8004b34:	e7cf      	b.n	8004ad6 <__swbuf_r+0x1a>
 8004b36:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <__swbuf_r+0xa0>)
 8004b38:	429c      	cmp	r4, r3
 8004b3a:	bf08      	it	eq
 8004b3c:	68ec      	ldreq	r4, [r5, #12]
 8004b3e:	e7ca      	b.n	8004ad6 <__swbuf_r+0x1a>
 8004b40:	4621      	mov	r1, r4
 8004b42:	4628      	mov	r0, r5
 8004b44:	f000 f80c 	bl	8004b60 <__swsetup_r>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d0cb      	beq.n	8004ae4 <__swbuf_r+0x28>
 8004b4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004b50:	e7ea      	b.n	8004b28 <__swbuf_r+0x6c>
 8004b52:	bf00      	nop
 8004b54:	080059c4 	.word	0x080059c4
 8004b58:	080059e4 	.word	0x080059e4
 8004b5c:	080059a4 	.word	0x080059a4

08004b60 <__swsetup_r>:
 8004b60:	4b32      	ldr	r3, [pc, #200]	; (8004c2c <__swsetup_r+0xcc>)
 8004b62:	b570      	push	{r4, r5, r6, lr}
 8004b64:	681d      	ldr	r5, [r3, #0]
 8004b66:	4606      	mov	r6, r0
 8004b68:	460c      	mov	r4, r1
 8004b6a:	b125      	cbz	r5, 8004b76 <__swsetup_r+0x16>
 8004b6c:	69ab      	ldr	r3, [r5, #24]
 8004b6e:	b913      	cbnz	r3, 8004b76 <__swsetup_r+0x16>
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 f97d 	bl	8004e70 <__sinit>
 8004b76:	4b2e      	ldr	r3, [pc, #184]	; (8004c30 <__swsetup_r+0xd0>)
 8004b78:	429c      	cmp	r4, r3
 8004b7a:	d10f      	bne.n	8004b9c <__swsetup_r+0x3c>
 8004b7c:	686c      	ldr	r4, [r5, #4]
 8004b7e:	89a3      	ldrh	r3, [r4, #12]
 8004b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b84:	0719      	lsls	r1, r3, #28
 8004b86:	d42c      	bmi.n	8004be2 <__swsetup_r+0x82>
 8004b88:	06dd      	lsls	r5, r3, #27
 8004b8a:	d411      	bmi.n	8004bb0 <__swsetup_r+0x50>
 8004b8c:	2309      	movs	r3, #9
 8004b8e:	6033      	str	r3, [r6, #0]
 8004b90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b94:	81a3      	strh	r3, [r4, #12]
 8004b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b9a:	e03e      	b.n	8004c1a <__swsetup_r+0xba>
 8004b9c:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <__swsetup_r+0xd4>)
 8004b9e:	429c      	cmp	r4, r3
 8004ba0:	d101      	bne.n	8004ba6 <__swsetup_r+0x46>
 8004ba2:	68ac      	ldr	r4, [r5, #8]
 8004ba4:	e7eb      	b.n	8004b7e <__swsetup_r+0x1e>
 8004ba6:	4b24      	ldr	r3, [pc, #144]	; (8004c38 <__swsetup_r+0xd8>)
 8004ba8:	429c      	cmp	r4, r3
 8004baa:	bf08      	it	eq
 8004bac:	68ec      	ldreq	r4, [r5, #12]
 8004bae:	e7e6      	b.n	8004b7e <__swsetup_r+0x1e>
 8004bb0:	0758      	lsls	r0, r3, #29
 8004bb2:	d512      	bpl.n	8004bda <__swsetup_r+0x7a>
 8004bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bb6:	b141      	cbz	r1, 8004bca <__swsetup_r+0x6a>
 8004bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bbc:	4299      	cmp	r1, r3
 8004bbe:	d002      	beq.n	8004bc6 <__swsetup_r+0x66>
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f000 fa59 	bl	8005078 <_free_r>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	6363      	str	r3, [r4, #52]	; 0x34
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bd0:	81a3      	strh	r3, [r4, #12]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	6063      	str	r3, [r4, #4]
 8004bd6:	6923      	ldr	r3, [r4, #16]
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	89a3      	ldrh	r3, [r4, #12]
 8004bdc:	f043 0308 	orr.w	r3, r3, #8
 8004be0:	81a3      	strh	r3, [r4, #12]
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	b94b      	cbnz	r3, 8004bfa <__swsetup_r+0x9a>
 8004be6:	89a3      	ldrh	r3, [r4, #12]
 8004be8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf0:	d003      	beq.n	8004bfa <__swsetup_r+0x9a>
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	f000 f9ff 	bl	8004ff8 <__smakebuf_r>
 8004bfa:	89a0      	ldrh	r0, [r4, #12]
 8004bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c00:	f010 0301 	ands.w	r3, r0, #1
 8004c04:	d00a      	beq.n	8004c1c <__swsetup_r+0xbc>
 8004c06:	2300      	movs	r3, #0
 8004c08:	60a3      	str	r3, [r4, #8]
 8004c0a:	6963      	ldr	r3, [r4, #20]
 8004c0c:	425b      	negs	r3, r3
 8004c0e:	61a3      	str	r3, [r4, #24]
 8004c10:	6923      	ldr	r3, [r4, #16]
 8004c12:	b943      	cbnz	r3, 8004c26 <__swsetup_r+0xc6>
 8004c14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c18:	d1ba      	bne.n	8004b90 <__swsetup_r+0x30>
 8004c1a:	bd70      	pop	{r4, r5, r6, pc}
 8004c1c:	0781      	lsls	r1, r0, #30
 8004c1e:	bf58      	it	pl
 8004c20:	6963      	ldrpl	r3, [r4, #20]
 8004c22:	60a3      	str	r3, [r4, #8]
 8004c24:	e7f4      	b.n	8004c10 <__swsetup_r+0xb0>
 8004c26:	2000      	movs	r0, #0
 8004c28:	e7f7      	b.n	8004c1a <__swsetup_r+0xba>
 8004c2a:	bf00      	nop
 8004c2c:	2000000c 	.word	0x2000000c
 8004c30:	080059c4 	.word	0x080059c4
 8004c34:	080059e4 	.word	0x080059e4
 8004c38:	080059a4 	.word	0x080059a4

08004c3c <__sflush_r>:
 8004c3c:	898a      	ldrh	r2, [r1, #12]
 8004c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c42:	4605      	mov	r5, r0
 8004c44:	0710      	lsls	r0, r2, #28
 8004c46:	460c      	mov	r4, r1
 8004c48:	d458      	bmi.n	8004cfc <__sflush_r+0xc0>
 8004c4a:	684b      	ldr	r3, [r1, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	dc05      	bgt.n	8004c5c <__sflush_r+0x20>
 8004c50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	dc02      	bgt.n	8004c5c <__sflush_r+0x20>
 8004c56:	2000      	movs	r0, #0
 8004c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c5e:	2e00      	cmp	r6, #0
 8004c60:	d0f9      	beq.n	8004c56 <__sflush_r+0x1a>
 8004c62:	2300      	movs	r3, #0
 8004c64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c68:	682f      	ldr	r7, [r5, #0]
 8004c6a:	602b      	str	r3, [r5, #0]
 8004c6c:	d032      	beq.n	8004cd4 <__sflush_r+0x98>
 8004c6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c70:	89a3      	ldrh	r3, [r4, #12]
 8004c72:	075a      	lsls	r2, r3, #29
 8004c74:	d505      	bpl.n	8004c82 <__sflush_r+0x46>
 8004c76:	6863      	ldr	r3, [r4, #4]
 8004c78:	1ac0      	subs	r0, r0, r3
 8004c7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c7c:	b10b      	cbz	r3, 8004c82 <__sflush_r+0x46>
 8004c7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c80:	1ac0      	subs	r0, r0, r3
 8004c82:	2300      	movs	r3, #0
 8004c84:	4602      	mov	r2, r0
 8004c86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c88:	6a21      	ldr	r1, [r4, #32]
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	47b0      	blx	r6
 8004c8e:	1c43      	adds	r3, r0, #1
 8004c90:	89a3      	ldrh	r3, [r4, #12]
 8004c92:	d106      	bne.n	8004ca2 <__sflush_r+0x66>
 8004c94:	6829      	ldr	r1, [r5, #0]
 8004c96:	291d      	cmp	r1, #29
 8004c98:	d82c      	bhi.n	8004cf4 <__sflush_r+0xb8>
 8004c9a:	4a2a      	ldr	r2, [pc, #168]	; (8004d44 <__sflush_r+0x108>)
 8004c9c:	40ca      	lsrs	r2, r1
 8004c9e:	07d6      	lsls	r6, r2, #31
 8004ca0:	d528      	bpl.n	8004cf4 <__sflush_r+0xb8>
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	6062      	str	r2, [r4, #4]
 8004ca6:	04d9      	lsls	r1, r3, #19
 8004ca8:	6922      	ldr	r2, [r4, #16]
 8004caa:	6022      	str	r2, [r4, #0]
 8004cac:	d504      	bpl.n	8004cb8 <__sflush_r+0x7c>
 8004cae:	1c42      	adds	r2, r0, #1
 8004cb0:	d101      	bne.n	8004cb6 <__sflush_r+0x7a>
 8004cb2:	682b      	ldr	r3, [r5, #0]
 8004cb4:	b903      	cbnz	r3, 8004cb8 <__sflush_r+0x7c>
 8004cb6:	6560      	str	r0, [r4, #84]	; 0x54
 8004cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cba:	602f      	str	r7, [r5, #0]
 8004cbc:	2900      	cmp	r1, #0
 8004cbe:	d0ca      	beq.n	8004c56 <__sflush_r+0x1a>
 8004cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cc4:	4299      	cmp	r1, r3
 8004cc6:	d002      	beq.n	8004cce <__sflush_r+0x92>
 8004cc8:	4628      	mov	r0, r5
 8004cca:	f000 f9d5 	bl	8005078 <_free_r>
 8004cce:	2000      	movs	r0, #0
 8004cd0:	6360      	str	r0, [r4, #52]	; 0x34
 8004cd2:	e7c1      	b.n	8004c58 <__sflush_r+0x1c>
 8004cd4:	6a21      	ldr	r1, [r4, #32]
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	4628      	mov	r0, r5
 8004cda:	47b0      	blx	r6
 8004cdc:	1c41      	adds	r1, r0, #1
 8004cde:	d1c7      	bne.n	8004c70 <__sflush_r+0x34>
 8004ce0:	682b      	ldr	r3, [r5, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0c4      	beq.n	8004c70 <__sflush_r+0x34>
 8004ce6:	2b1d      	cmp	r3, #29
 8004ce8:	d001      	beq.n	8004cee <__sflush_r+0xb2>
 8004cea:	2b16      	cmp	r3, #22
 8004cec:	d101      	bne.n	8004cf2 <__sflush_r+0xb6>
 8004cee:	602f      	str	r7, [r5, #0]
 8004cf0:	e7b1      	b.n	8004c56 <__sflush_r+0x1a>
 8004cf2:	89a3      	ldrh	r3, [r4, #12]
 8004cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf8:	81a3      	strh	r3, [r4, #12]
 8004cfa:	e7ad      	b.n	8004c58 <__sflush_r+0x1c>
 8004cfc:	690f      	ldr	r7, [r1, #16]
 8004cfe:	2f00      	cmp	r7, #0
 8004d00:	d0a9      	beq.n	8004c56 <__sflush_r+0x1a>
 8004d02:	0793      	lsls	r3, r2, #30
 8004d04:	680e      	ldr	r6, [r1, #0]
 8004d06:	bf08      	it	eq
 8004d08:	694b      	ldreq	r3, [r1, #20]
 8004d0a:	600f      	str	r7, [r1, #0]
 8004d0c:	bf18      	it	ne
 8004d0e:	2300      	movne	r3, #0
 8004d10:	eba6 0807 	sub.w	r8, r6, r7
 8004d14:	608b      	str	r3, [r1, #8]
 8004d16:	f1b8 0f00 	cmp.w	r8, #0
 8004d1a:	dd9c      	ble.n	8004c56 <__sflush_r+0x1a>
 8004d1c:	6a21      	ldr	r1, [r4, #32]
 8004d1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d20:	4643      	mov	r3, r8
 8004d22:	463a      	mov	r2, r7
 8004d24:	4628      	mov	r0, r5
 8004d26:	47b0      	blx	r6
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	dc06      	bgt.n	8004d3a <__sflush_r+0xfe>
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d32:	81a3      	strh	r3, [r4, #12]
 8004d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d38:	e78e      	b.n	8004c58 <__sflush_r+0x1c>
 8004d3a:	4407      	add	r7, r0
 8004d3c:	eba8 0800 	sub.w	r8, r8, r0
 8004d40:	e7e9      	b.n	8004d16 <__sflush_r+0xda>
 8004d42:	bf00      	nop
 8004d44:	20400001 	.word	0x20400001

08004d48 <_fflush_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	690b      	ldr	r3, [r1, #16]
 8004d4c:	4605      	mov	r5, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	b913      	cbnz	r3, 8004d58 <_fflush_r+0x10>
 8004d52:	2500      	movs	r5, #0
 8004d54:	4628      	mov	r0, r5
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
 8004d58:	b118      	cbz	r0, 8004d62 <_fflush_r+0x1a>
 8004d5a:	6983      	ldr	r3, [r0, #24]
 8004d5c:	b90b      	cbnz	r3, 8004d62 <_fflush_r+0x1a>
 8004d5e:	f000 f887 	bl	8004e70 <__sinit>
 8004d62:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <_fflush_r+0x6c>)
 8004d64:	429c      	cmp	r4, r3
 8004d66:	d11b      	bne.n	8004da0 <_fflush_r+0x58>
 8004d68:	686c      	ldr	r4, [r5, #4]
 8004d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0ef      	beq.n	8004d52 <_fflush_r+0xa>
 8004d72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d74:	07d0      	lsls	r0, r2, #31
 8004d76:	d404      	bmi.n	8004d82 <_fflush_r+0x3a>
 8004d78:	0599      	lsls	r1, r3, #22
 8004d7a:	d402      	bmi.n	8004d82 <_fflush_r+0x3a>
 8004d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d7e:	f000 f915 	bl	8004fac <__retarget_lock_acquire_recursive>
 8004d82:	4628      	mov	r0, r5
 8004d84:	4621      	mov	r1, r4
 8004d86:	f7ff ff59 	bl	8004c3c <__sflush_r>
 8004d8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d8c:	07da      	lsls	r2, r3, #31
 8004d8e:	4605      	mov	r5, r0
 8004d90:	d4e0      	bmi.n	8004d54 <_fflush_r+0xc>
 8004d92:	89a3      	ldrh	r3, [r4, #12]
 8004d94:	059b      	lsls	r3, r3, #22
 8004d96:	d4dd      	bmi.n	8004d54 <_fflush_r+0xc>
 8004d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d9a:	f000 f908 	bl	8004fae <__retarget_lock_release_recursive>
 8004d9e:	e7d9      	b.n	8004d54 <_fflush_r+0xc>
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <_fflush_r+0x70>)
 8004da2:	429c      	cmp	r4, r3
 8004da4:	d101      	bne.n	8004daa <_fflush_r+0x62>
 8004da6:	68ac      	ldr	r4, [r5, #8]
 8004da8:	e7df      	b.n	8004d6a <_fflush_r+0x22>
 8004daa:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <_fflush_r+0x74>)
 8004dac:	429c      	cmp	r4, r3
 8004dae:	bf08      	it	eq
 8004db0:	68ec      	ldreq	r4, [r5, #12]
 8004db2:	e7da      	b.n	8004d6a <_fflush_r+0x22>
 8004db4:	080059c4 	.word	0x080059c4
 8004db8:	080059e4 	.word	0x080059e4
 8004dbc:	080059a4 	.word	0x080059a4

08004dc0 <std>:
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	b510      	push	{r4, lr}
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8004dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dce:	6083      	str	r3, [r0, #8]
 8004dd0:	8181      	strh	r1, [r0, #12]
 8004dd2:	6643      	str	r3, [r0, #100]	; 0x64
 8004dd4:	81c2      	strh	r2, [r0, #14]
 8004dd6:	6183      	str	r3, [r0, #24]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	2208      	movs	r2, #8
 8004ddc:	305c      	adds	r0, #92	; 0x5c
 8004dde:	f7ff fdd7 	bl	8004990 <memset>
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <std+0x38>)
 8004de4:	6263      	str	r3, [r4, #36]	; 0x24
 8004de6:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <std+0x3c>)
 8004de8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dea:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <std+0x40>)
 8004dec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dee:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <std+0x44>)
 8004df0:	6224      	str	r4, [r4, #32]
 8004df2:	6323      	str	r3, [r4, #48]	; 0x30
 8004df4:	bd10      	pop	{r4, pc}
 8004df6:	bf00      	nop
 8004df8:	080057c9 	.word	0x080057c9
 8004dfc:	080057eb 	.word	0x080057eb
 8004e00:	08005823 	.word	0x08005823
 8004e04:	08005847 	.word	0x08005847

08004e08 <_cleanup_r>:
 8004e08:	4901      	ldr	r1, [pc, #4]	; (8004e10 <_cleanup_r+0x8>)
 8004e0a:	f000 b8af 	b.w	8004f6c <_fwalk_reent>
 8004e0e:	bf00      	nop
 8004e10:	08004d49 	.word	0x08004d49

08004e14 <__sfmoreglue>:
 8004e14:	b570      	push	{r4, r5, r6, lr}
 8004e16:	1e4a      	subs	r2, r1, #1
 8004e18:	2568      	movs	r5, #104	; 0x68
 8004e1a:	4355      	muls	r5, r2
 8004e1c:	460e      	mov	r6, r1
 8004e1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e22:	f000 f979 	bl	8005118 <_malloc_r>
 8004e26:	4604      	mov	r4, r0
 8004e28:	b140      	cbz	r0, 8004e3c <__sfmoreglue+0x28>
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	e9c0 1600 	strd	r1, r6, [r0]
 8004e30:	300c      	adds	r0, #12
 8004e32:	60a0      	str	r0, [r4, #8]
 8004e34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e38:	f7ff fdaa 	bl	8004990 <memset>
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}

08004e40 <__sfp_lock_acquire>:
 8004e40:	4801      	ldr	r0, [pc, #4]	; (8004e48 <__sfp_lock_acquire+0x8>)
 8004e42:	f000 b8b3 	b.w	8004fac <__retarget_lock_acquire_recursive>
 8004e46:	bf00      	nop
 8004e48:	200021a4 	.word	0x200021a4

08004e4c <__sfp_lock_release>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	; (8004e54 <__sfp_lock_release+0x8>)
 8004e4e:	f000 b8ae 	b.w	8004fae <__retarget_lock_release_recursive>
 8004e52:	bf00      	nop
 8004e54:	200021a4 	.word	0x200021a4

08004e58 <__sinit_lock_acquire>:
 8004e58:	4801      	ldr	r0, [pc, #4]	; (8004e60 <__sinit_lock_acquire+0x8>)
 8004e5a:	f000 b8a7 	b.w	8004fac <__retarget_lock_acquire_recursive>
 8004e5e:	bf00      	nop
 8004e60:	2000219f 	.word	0x2000219f

08004e64 <__sinit_lock_release>:
 8004e64:	4801      	ldr	r0, [pc, #4]	; (8004e6c <__sinit_lock_release+0x8>)
 8004e66:	f000 b8a2 	b.w	8004fae <__retarget_lock_release_recursive>
 8004e6a:	bf00      	nop
 8004e6c:	2000219f 	.word	0x2000219f

08004e70 <__sinit>:
 8004e70:	b510      	push	{r4, lr}
 8004e72:	4604      	mov	r4, r0
 8004e74:	f7ff fff0 	bl	8004e58 <__sinit_lock_acquire>
 8004e78:	69a3      	ldr	r3, [r4, #24]
 8004e7a:	b11b      	cbz	r3, 8004e84 <__sinit+0x14>
 8004e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e80:	f7ff bff0 	b.w	8004e64 <__sinit_lock_release>
 8004e84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e88:	6523      	str	r3, [r4, #80]	; 0x50
 8004e8a:	4b13      	ldr	r3, [pc, #76]	; (8004ed8 <__sinit+0x68>)
 8004e8c:	4a13      	ldr	r2, [pc, #76]	; (8004edc <__sinit+0x6c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e92:	42a3      	cmp	r3, r4
 8004e94:	bf04      	itt	eq
 8004e96:	2301      	moveq	r3, #1
 8004e98:	61a3      	streq	r3, [r4, #24]
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f000 f820 	bl	8004ee0 <__sfp>
 8004ea0:	6060      	str	r0, [r4, #4]
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f000 f81c 	bl	8004ee0 <__sfp>
 8004ea8:	60a0      	str	r0, [r4, #8]
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f000 f818 	bl	8004ee0 <__sfp>
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	60e0      	str	r0, [r4, #12]
 8004eb4:	2104      	movs	r1, #4
 8004eb6:	6860      	ldr	r0, [r4, #4]
 8004eb8:	f7ff ff82 	bl	8004dc0 <std>
 8004ebc:	68a0      	ldr	r0, [r4, #8]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	2109      	movs	r1, #9
 8004ec2:	f7ff ff7d 	bl	8004dc0 <std>
 8004ec6:	68e0      	ldr	r0, [r4, #12]
 8004ec8:	2202      	movs	r2, #2
 8004eca:	2112      	movs	r1, #18
 8004ecc:	f7ff ff78 	bl	8004dc0 <std>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	61a3      	str	r3, [r4, #24]
 8004ed4:	e7d2      	b.n	8004e7c <__sinit+0xc>
 8004ed6:	bf00      	nop
 8004ed8:	080059a0 	.word	0x080059a0
 8004edc:	08004e09 	.word	0x08004e09

08004ee0 <__sfp>:
 8004ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee2:	4607      	mov	r7, r0
 8004ee4:	f7ff ffac 	bl	8004e40 <__sfp_lock_acquire>
 8004ee8:	4b1e      	ldr	r3, [pc, #120]	; (8004f64 <__sfp+0x84>)
 8004eea:	681e      	ldr	r6, [r3, #0]
 8004eec:	69b3      	ldr	r3, [r6, #24]
 8004eee:	b913      	cbnz	r3, 8004ef6 <__sfp+0x16>
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	f7ff ffbd 	bl	8004e70 <__sinit>
 8004ef6:	3648      	adds	r6, #72	; 0x48
 8004ef8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	d503      	bpl.n	8004f08 <__sfp+0x28>
 8004f00:	6833      	ldr	r3, [r6, #0]
 8004f02:	b30b      	cbz	r3, 8004f48 <__sfp+0x68>
 8004f04:	6836      	ldr	r6, [r6, #0]
 8004f06:	e7f7      	b.n	8004ef8 <__sfp+0x18>
 8004f08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f0c:	b9d5      	cbnz	r5, 8004f44 <__sfp+0x64>
 8004f0e:	4b16      	ldr	r3, [pc, #88]	; (8004f68 <__sfp+0x88>)
 8004f10:	60e3      	str	r3, [r4, #12]
 8004f12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f16:	6665      	str	r5, [r4, #100]	; 0x64
 8004f18:	f000 f847 	bl	8004faa <__retarget_lock_init_recursive>
 8004f1c:	f7ff ff96 	bl	8004e4c <__sfp_lock_release>
 8004f20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f28:	6025      	str	r5, [r4, #0]
 8004f2a:	61a5      	str	r5, [r4, #24]
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	4629      	mov	r1, r5
 8004f30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f34:	f7ff fd2c 	bl	8004990 <memset>
 8004f38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f40:	4620      	mov	r0, r4
 8004f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f44:	3468      	adds	r4, #104	; 0x68
 8004f46:	e7d9      	b.n	8004efc <__sfp+0x1c>
 8004f48:	2104      	movs	r1, #4
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	f7ff ff62 	bl	8004e14 <__sfmoreglue>
 8004f50:	4604      	mov	r4, r0
 8004f52:	6030      	str	r0, [r6, #0]
 8004f54:	2800      	cmp	r0, #0
 8004f56:	d1d5      	bne.n	8004f04 <__sfp+0x24>
 8004f58:	f7ff ff78 	bl	8004e4c <__sfp_lock_release>
 8004f5c:	230c      	movs	r3, #12
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	e7ee      	b.n	8004f40 <__sfp+0x60>
 8004f62:	bf00      	nop
 8004f64:	080059a0 	.word	0x080059a0
 8004f68:	ffff0001 	.word	0xffff0001

08004f6c <_fwalk_reent>:
 8004f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f70:	4606      	mov	r6, r0
 8004f72:	4688      	mov	r8, r1
 8004f74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f78:	2700      	movs	r7, #0
 8004f7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f7e:	f1b9 0901 	subs.w	r9, r9, #1
 8004f82:	d505      	bpl.n	8004f90 <_fwalk_reent+0x24>
 8004f84:	6824      	ldr	r4, [r4, #0]
 8004f86:	2c00      	cmp	r4, #0
 8004f88:	d1f7      	bne.n	8004f7a <_fwalk_reent+0xe>
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f90:	89ab      	ldrh	r3, [r5, #12]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d907      	bls.n	8004fa6 <_fwalk_reent+0x3a>
 8004f96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	d003      	beq.n	8004fa6 <_fwalk_reent+0x3a>
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	47c0      	blx	r8
 8004fa4:	4307      	orrs	r7, r0
 8004fa6:	3568      	adds	r5, #104	; 0x68
 8004fa8:	e7e9      	b.n	8004f7e <_fwalk_reent+0x12>

08004faa <__retarget_lock_init_recursive>:
 8004faa:	4770      	bx	lr

08004fac <__retarget_lock_acquire_recursive>:
 8004fac:	4770      	bx	lr

08004fae <__retarget_lock_release_recursive>:
 8004fae:	4770      	bx	lr

08004fb0 <__swhatbuf_r>:
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	460e      	mov	r6, r1
 8004fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	b096      	sub	sp, #88	; 0x58
 8004fbc:	4614      	mov	r4, r2
 8004fbe:	461d      	mov	r5, r3
 8004fc0:	da07      	bge.n	8004fd2 <__swhatbuf_r+0x22>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	602b      	str	r3, [r5, #0]
 8004fc6:	89b3      	ldrh	r3, [r6, #12]
 8004fc8:	061a      	lsls	r2, r3, #24
 8004fca:	d410      	bmi.n	8004fee <__swhatbuf_r+0x3e>
 8004fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd0:	e00e      	b.n	8004ff0 <__swhatbuf_r+0x40>
 8004fd2:	466a      	mov	r2, sp
 8004fd4:	f000 fc5e 	bl	8005894 <_fstat_r>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	dbf2      	blt.n	8004fc2 <__swhatbuf_r+0x12>
 8004fdc:	9a01      	ldr	r2, [sp, #4]
 8004fde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fe2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fe6:	425a      	negs	r2, r3
 8004fe8:	415a      	adcs	r2, r3
 8004fea:	602a      	str	r2, [r5, #0]
 8004fec:	e7ee      	b.n	8004fcc <__swhatbuf_r+0x1c>
 8004fee:	2340      	movs	r3, #64	; 0x40
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	b016      	add	sp, #88	; 0x58
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}

08004ff8 <__smakebuf_r>:
 8004ff8:	898b      	ldrh	r3, [r1, #12]
 8004ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ffc:	079d      	lsls	r5, r3, #30
 8004ffe:	4606      	mov	r6, r0
 8005000:	460c      	mov	r4, r1
 8005002:	d507      	bpl.n	8005014 <__smakebuf_r+0x1c>
 8005004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	6123      	str	r3, [r4, #16]
 800500c:	2301      	movs	r3, #1
 800500e:	6163      	str	r3, [r4, #20]
 8005010:	b002      	add	sp, #8
 8005012:	bd70      	pop	{r4, r5, r6, pc}
 8005014:	ab01      	add	r3, sp, #4
 8005016:	466a      	mov	r2, sp
 8005018:	f7ff ffca 	bl	8004fb0 <__swhatbuf_r>
 800501c:	9900      	ldr	r1, [sp, #0]
 800501e:	4605      	mov	r5, r0
 8005020:	4630      	mov	r0, r6
 8005022:	f000 f879 	bl	8005118 <_malloc_r>
 8005026:	b948      	cbnz	r0, 800503c <__smakebuf_r+0x44>
 8005028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800502c:	059a      	lsls	r2, r3, #22
 800502e:	d4ef      	bmi.n	8005010 <__smakebuf_r+0x18>
 8005030:	f023 0303 	bic.w	r3, r3, #3
 8005034:	f043 0302 	orr.w	r3, r3, #2
 8005038:	81a3      	strh	r3, [r4, #12]
 800503a:	e7e3      	b.n	8005004 <__smakebuf_r+0xc>
 800503c:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <__smakebuf_r+0x7c>)
 800503e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	6020      	str	r0, [r4, #0]
 8005044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005048:	81a3      	strh	r3, [r4, #12]
 800504a:	9b00      	ldr	r3, [sp, #0]
 800504c:	6163      	str	r3, [r4, #20]
 800504e:	9b01      	ldr	r3, [sp, #4]
 8005050:	6120      	str	r0, [r4, #16]
 8005052:	b15b      	cbz	r3, 800506c <__smakebuf_r+0x74>
 8005054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005058:	4630      	mov	r0, r6
 800505a:	f000 fc2d 	bl	80058b8 <_isatty_r>
 800505e:	b128      	cbz	r0, 800506c <__smakebuf_r+0x74>
 8005060:	89a3      	ldrh	r3, [r4, #12]
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	81a3      	strh	r3, [r4, #12]
 800506c:	89a0      	ldrh	r0, [r4, #12]
 800506e:	4305      	orrs	r5, r0
 8005070:	81a5      	strh	r5, [r4, #12]
 8005072:	e7cd      	b.n	8005010 <__smakebuf_r+0x18>
 8005074:	08004e09 	.word	0x08004e09

08005078 <_free_r>:
 8005078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800507a:	2900      	cmp	r1, #0
 800507c:	d048      	beq.n	8005110 <_free_r+0x98>
 800507e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005082:	9001      	str	r0, [sp, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f1a1 0404 	sub.w	r4, r1, #4
 800508a:	bfb8      	it	lt
 800508c:	18e4      	addlt	r4, r4, r3
 800508e:	f000 fc35 	bl	80058fc <__malloc_lock>
 8005092:	4a20      	ldr	r2, [pc, #128]	; (8005114 <_free_r+0x9c>)
 8005094:	9801      	ldr	r0, [sp, #4]
 8005096:	6813      	ldr	r3, [r2, #0]
 8005098:	4615      	mov	r5, r2
 800509a:	b933      	cbnz	r3, 80050aa <_free_r+0x32>
 800509c:	6063      	str	r3, [r4, #4]
 800509e:	6014      	str	r4, [r2, #0]
 80050a0:	b003      	add	sp, #12
 80050a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050a6:	f000 bc2f 	b.w	8005908 <__malloc_unlock>
 80050aa:	42a3      	cmp	r3, r4
 80050ac:	d90b      	bls.n	80050c6 <_free_r+0x4e>
 80050ae:	6821      	ldr	r1, [r4, #0]
 80050b0:	1862      	adds	r2, r4, r1
 80050b2:	4293      	cmp	r3, r2
 80050b4:	bf04      	itt	eq
 80050b6:	681a      	ldreq	r2, [r3, #0]
 80050b8:	685b      	ldreq	r3, [r3, #4]
 80050ba:	6063      	str	r3, [r4, #4]
 80050bc:	bf04      	itt	eq
 80050be:	1852      	addeq	r2, r2, r1
 80050c0:	6022      	streq	r2, [r4, #0]
 80050c2:	602c      	str	r4, [r5, #0]
 80050c4:	e7ec      	b.n	80050a0 <_free_r+0x28>
 80050c6:	461a      	mov	r2, r3
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	b10b      	cbz	r3, 80050d0 <_free_r+0x58>
 80050cc:	42a3      	cmp	r3, r4
 80050ce:	d9fa      	bls.n	80050c6 <_free_r+0x4e>
 80050d0:	6811      	ldr	r1, [r2, #0]
 80050d2:	1855      	adds	r5, r2, r1
 80050d4:	42a5      	cmp	r5, r4
 80050d6:	d10b      	bne.n	80050f0 <_free_r+0x78>
 80050d8:	6824      	ldr	r4, [r4, #0]
 80050da:	4421      	add	r1, r4
 80050dc:	1854      	adds	r4, r2, r1
 80050de:	42a3      	cmp	r3, r4
 80050e0:	6011      	str	r1, [r2, #0]
 80050e2:	d1dd      	bne.n	80050a0 <_free_r+0x28>
 80050e4:	681c      	ldr	r4, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	6053      	str	r3, [r2, #4]
 80050ea:	4421      	add	r1, r4
 80050ec:	6011      	str	r1, [r2, #0]
 80050ee:	e7d7      	b.n	80050a0 <_free_r+0x28>
 80050f0:	d902      	bls.n	80050f8 <_free_r+0x80>
 80050f2:	230c      	movs	r3, #12
 80050f4:	6003      	str	r3, [r0, #0]
 80050f6:	e7d3      	b.n	80050a0 <_free_r+0x28>
 80050f8:	6825      	ldr	r5, [r4, #0]
 80050fa:	1961      	adds	r1, r4, r5
 80050fc:	428b      	cmp	r3, r1
 80050fe:	bf04      	itt	eq
 8005100:	6819      	ldreq	r1, [r3, #0]
 8005102:	685b      	ldreq	r3, [r3, #4]
 8005104:	6063      	str	r3, [r4, #4]
 8005106:	bf04      	itt	eq
 8005108:	1949      	addeq	r1, r1, r5
 800510a:	6021      	streq	r1, [r4, #0]
 800510c:	6054      	str	r4, [r2, #4]
 800510e:	e7c7      	b.n	80050a0 <_free_r+0x28>
 8005110:	b003      	add	sp, #12
 8005112:	bd30      	pop	{r4, r5, pc}
 8005114:	20000094 	.word	0x20000094

08005118 <_malloc_r>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	1ccd      	adds	r5, r1, #3
 800511c:	f025 0503 	bic.w	r5, r5, #3
 8005120:	3508      	adds	r5, #8
 8005122:	2d0c      	cmp	r5, #12
 8005124:	bf38      	it	cc
 8005126:	250c      	movcc	r5, #12
 8005128:	2d00      	cmp	r5, #0
 800512a:	4606      	mov	r6, r0
 800512c:	db01      	blt.n	8005132 <_malloc_r+0x1a>
 800512e:	42a9      	cmp	r1, r5
 8005130:	d903      	bls.n	800513a <_malloc_r+0x22>
 8005132:	230c      	movs	r3, #12
 8005134:	6033      	str	r3, [r6, #0]
 8005136:	2000      	movs	r0, #0
 8005138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800513a:	f000 fbdf 	bl	80058fc <__malloc_lock>
 800513e:	4921      	ldr	r1, [pc, #132]	; (80051c4 <_malloc_r+0xac>)
 8005140:	680a      	ldr	r2, [r1, #0]
 8005142:	4614      	mov	r4, r2
 8005144:	b99c      	cbnz	r4, 800516e <_malloc_r+0x56>
 8005146:	4f20      	ldr	r7, [pc, #128]	; (80051c8 <_malloc_r+0xb0>)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	b923      	cbnz	r3, 8005156 <_malloc_r+0x3e>
 800514c:	4621      	mov	r1, r4
 800514e:	4630      	mov	r0, r6
 8005150:	f000 fb2a 	bl	80057a8 <_sbrk_r>
 8005154:	6038      	str	r0, [r7, #0]
 8005156:	4629      	mov	r1, r5
 8005158:	4630      	mov	r0, r6
 800515a:	f000 fb25 	bl	80057a8 <_sbrk_r>
 800515e:	1c43      	adds	r3, r0, #1
 8005160:	d123      	bne.n	80051aa <_malloc_r+0x92>
 8005162:	230c      	movs	r3, #12
 8005164:	6033      	str	r3, [r6, #0]
 8005166:	4630      	mov	r0, r6
 8005168:	f000 fbce 	bl	8005908 <__malloc_unlock>
 800516c:	e7e3      	b.n	8005136 <_malloc_r+0x1e>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	1b5b      	subs	r3, r3, r5
 8005172:	d417      	bmi.n	80051a4 <_malloc_r+0x8c>
 8005174:	2b0b      	cmp	r3, #11
 8005176:	d903      	bls.n	8005180 <_malloc_r+0x68>
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	441c      	add	r4, r3
 800517c:	6025      	str	r5, [r4, #0]
 800517e:	e004      	b.n	800518a <_malloc_r+0x72>
 8005180:	6863      	ldr	r3, [r4, #4]
 8005182:	42a2      	cmp	r2, r4
 8005184:	bf0c      	ite	eq
 8005186:	600b      	streq	r3, [r1, #0]
 8005188:	6053      	strne	r3, [r2, #4]
 800518a:	4630      	mov	r0, r6
 800518c:	f000 fbbc 	bl	8005908 <__malloc_unlock>
 8005190:	f104 000b 	add.w	r0, r4, #11
 8005194:	1d23      	adds	r3, r4, #4
 8005196:	f020 0007 	bic.w	r0, r0, #7
 800519a:	1ac2      	subs	r2, r0, r3
 800519c:	d0cc      	beq.n	8005138 <_malloc_r+0x20>
 800519e:	1a1b      	subs	r3, r3, r0
 80051a0:	50a3      	str	r3, [r4, r2]
 80051a2:	e7c9      	b.n	8005138 <_malloc_r+0x20>
 80051a4:	4622      	mov	r2, r4
 80051a6:	6864      	ldr	r4, [r4, #4]
 80051a8:	e7cc      	b.n	8005144 <_malloc_r+0x2c>
 80051aa:	1cc4      	adds	r4, r0, #3
 80051ac:	f024 0403 	bic.w	r4, r4, #3
 80051b0:	42a0      	cmp	r0, r4
 80051b2:	d0e3      	beq.n	800517c <_malloc_r+0x64>
 80051b4:	1a21      	subs	r1, r4, r0
 80051b6:	4630      	mov	r0, r6
 80051b8:	f000 faf6 	bl	80057a8 <_sbrk_r>
 80051bc:	3001      	adds	r0, #1
 80051be:	d1dd      	bne.n	800517c <_malloc_r+0x64>
 80051c0:	e7cf      	b.n	8005162 <_malloc_r+0x4a>
 80051c2:	bf00      	nop
 80051c4:	20000094 	.word	0x20000094
 80051c8:	20000098 	.word	0x20000098

080051cc <__sfputc_r>:
 80051cc:	6893      	ldr	r3, [r2, #8]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	b410      	push	{r4}
 80051d4:	6093      	str	r3, [r2, #8]
 80051d6:	da08      	bge.n	80051ea <__sfputc_r+0x1e>
 80051d8:	6994      	ldr	r4, [r2, #24]
 80051da:	42a3      	cmp	r3, r4
 80051dc:	db01      	blt.n	80051e2 <__sfputc_r+0x16>
 80051de:	290a      	cmp	r1, #10
 80051e0:	d103      	bne.n	80051ea <__sfputc_r+0x1e>
 80051e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051e6:	f7ff bc69 	b.w	8004abc <__swbuf_r>
 80051ea:	6813      	ldr	r3, [r2, #0]
 80051ec:	1c58      	adds	r0, r3, #1
 80051ee:	6010      	str	r0, [r2, #0]
 80051f0:	7019      	strb	r1, [r3, #0]
 80051f2:	4608      	mov	r0, r1
 80051f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <__sfputs_r>:
 80051fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fc:	4606      	mov	r6, r0
 80051fe:	460f      	mov	r7, r1
 8005200:	4614      	mov	r4, r2
 8005202:	18d5      	adds	r5, r2, r3
 8005204:	42ac      	cmp	r4, r5
 8005206:	d101      	bne.n	800520c <__sfputs_r+0x12>
 8005208:	2000      	movs	r0, #0
 800520a:	e007      	b.n	800521c <__sfputs_r+0x22>
 800520c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005210:	463a      	mov	r2, r7
 8005212:	4630      	mov	r0, r6
 8005214:	f7ff ffda 	bl	80051cc <__sfputc_r>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d1f3      	bne.n	8005204 <__sfputs_r+0xa>
 800521c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005220 <_vfiprintf_r>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	460d      	mov	r5, r1
 8005226:	b09d      	sub	sp, #116	; 0x74
 8005228:	4614      	mov	r4, r2
 800522a:	4698      	mov	r8, r3
 800522c:	4606      	mov	r6, r0
 800522e:	b118      	cbz	r0, 8005238 <_vfiprintf_r+0x18>
 8005230:	6983      	ldr	r3, [r0, #24]
 8005232:	b90b      	cbnz	r3, 8005238 <_vfiprintf_r+0x18>
 8005234:	f7ff fe1c 	bl	8004e70 <__sinit>
 8005238:	4b89      	ldr	r3, [pc, #548]	; (8005460 <_vfiprintf_r+0x240>)
 800523a:	429d      	cmp	r5, r3
 800523c:	d11b      	bne.n	8005276 <_vfiprintf_r+0x56>
 800523e:	6875      	ldr	r5, [r6, #4]
 8005240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005242:	07d9      	lsls	r1, r3, #31
 8005244:	d405      	bmi.n	8005252 <_vfiprintf_r+0x32>
 8005246:	89ab      	ldrh	r3, [r5, #12]
 8005248:	059a      	lsls	r2, r3, #22
 800524a:	d402      	bmi.n	8005252 <_vfiprintf_r+0x32>
 800524c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800524e:	f7ff fead 	bl	8004fac <__retarget_lock_acquire_recursive>
 8005252:	89ab      	ldrh	r3, [r5, #12]
 8005254:	071b      	lsls	r3, r3, #28
 8005256:	d501      	bpl.n	800525c <_vfiprintf_r+0x3c>
 8005258:	692b      	ldr	r3, [r5, #16]
 800525a:	b9eb      	cbnz	r3, 8005298 <_vfiprintf_r+0x78>
 800525c:	4629      	mov	r1, r5
 800525e:	4630      	mov	r0, r6
 8005260:	f7ff fc7e 	bl	8004b60 <__swsetup_r>
 8005264:	b1c0      	cbz	r0, 8005298 <_vfiprintf_r+0x78>
 8005266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005268:	07dc      	lsls	r4, r3, #31
 800526a:	d50e      	bpl.n	800528a <_vfiprintf_r+0x6a>
 800526c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005270:	b01d      	add	sp, #116	; 0x74
 8005272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005276:	4b7b      	ldr	r3, [pc, #492]	; (8005464 <_vfiprintf_r+0x244>)
 8005278:	429d      	cmp	r5, r3
 800527a:	d101      	bne.n	8005280 <_vfiprintf_r+0x60>
 800527c:	68b5      	ldr	r5, [r6, #8]
 800527e:	e7df      	b.n	8005240 <_vfiprintf_r+0x20>
 8005280:	4b79      	ldr	r3, [pc, #484]	; (8005468 <_vfiprintf_r+0x248>)
 8005282:	429d      	cmp	r5, r3
 8005284:	bf08      	it	eq
 8005286:	68f5      	ldreq	r5, [r6, #12]
 8005288:	e7da      	b.n	8005240 <_vfiprintf_r+0x20>
 800528a:	89ab      	ldrh	r3, [r5, #12]
 800528c:	0598      	lsls	r0, r3, #22
 800528e:	d4ed      	bmi.n	800526c <_vfiprintf_r+0x4c>
 8005290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005292:	f7ff fe8c 	bl	8004fae <__retarget_lock_release_recursive>
 8005296:	e7e9      	b.n	800526c <_vfiprintf_r+0x4c>
 8005298:	2300      	movs	r3, #0
 800529a:	9309      	str	r3, [sp, #36]	; 0x24
 800529c:	2320      	movs	r3, #32
 800529e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80052a6:	2330      	movs	r3, #48	; 0x30
 80052a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800546c <_vfiprintf_r+0x24c>
 80052ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052b0:	f04f 0901 	mov.w	r9, #1
 80052b4:	4623      	mov	r3, r4
 80052b6:	469a      	mov	sl, r3
 80052b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052bc:	b10a      	cbz	r2, 80052c2 <_vfiprintf_r+0xa2>
 80052be:	2a25      	cmp	r2, #37	; 0x25
 80052c0:	d1f9      	bne.n	80052b6 <_vfiprintf_r+0x96>
 80052c2:	ebba 0b04 	subs.w	fp, sl, r4
 80052c6:	d00b      	beq.n	80052e0 <_vfiprintf_r+0xc0>
 80052c8:	465b      	mov	r3, fp
 80052ca:	4622      	mov	r2, r4
 80052cc:	4629      	mov	r1, r5
 80052ce:	4630      	mov	r0, r6
 80052d0:	f7ff ff93 	bl	80051fa <__sfputs_r>
 80052d4:	3001      	adds	r0, #1
 80052d6:	f000 80aa 	beq.w	800542e <_vfiprintf_r+0x20e>
 80052da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052dc:	445a      	add	r2, fp
 80052de:	9209      	str	r2, [sp, #36]	; 0x24
 80052e0:	f89a 3000 	ldrb.w	r3, [sl]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80a2 	beq.w	800542e <_vfiprintf_r+0x20e>
 80052ea:	2300      	movs	r3, #0
 80052ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052f4:	f10a 0a01 	add.w	sl, sl, #1
 80052f8:	9304      	str	r3, [sp, #16]
 80052fa:	9307      	str	r3, [sp, #28]
 80052fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005300:	931a      	str	r3, [sp, #104]	; 0x68
 8005302:	4654      	mov	r4, sl
 8005304:	2205      	movs	r2, #5
 8005306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800530a:	4858      	ldr	r0, [pc, #352]	; (800546c <_vfiprintf_r+0x24c>)
 800530c:	f7fa ff60 	bl	80001d0 <memchr>
 8005310:	9a04      	ldr	r2, [sp, #16]
 8005312:	b9d8      	cbnz	r0, 800534c <_vfiprintf_r+0x12c>
 8005314:	06d1      	lsls	r1, r2, #27
 8005316:	bf44      	itt	mi
 8005318:	2320      	movmi	r3, #32
 800531a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800531e:	0713      	lsls	r3, r2, #28
 8005320:	bf44      	itt	mi
 8005322:	232b      	movmi	r3, #43	; 0x2b
 8005324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005328:	f89a 3000 	ldrb.w	r3, [sl]
 800532c:	2b2a      	cmp	r3, #42	; 0x2a
 800532e:	d015      	beq.n	800535c <_vfiprintf_r+0x13c>
 8005330:	9a07      	ldr	r2, [sp, #28]
 8005332:	4654      	mov	r4, sl
 8005334:	2000      	movs	r0, #0
 8005336:	f04f 0c0a 	mov.w	ip, #10
 800533a:	4621      	mov	r1, r4
 800533c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005340:	3b30      	subs	r3, #48	; 0x30
 8005342:	2b09      	cmp	r3, #9
 8005344:	d94e      	bls.n	80053e4 <_vfiprintf_r+0x1c4>
 8005346:	b1b0      	cbz	r0, 8005376 <_vfiprintf_r+0x156>
 8005348:	9207      	str	r2, [sp, #28]
 800534a:	e014      	b.n	8005376 <_vfiprintf_r+0x156>
 800534c:	eba0 0308 	sub.w	r3, r0, r8
 8005350:	fa09 f303 	lsl.w	r3, r9, r3
 8005354:	4313      	orrs	r3, r2
 8005356:	9304      	str	r3, [sp, #16]
 8005358:	46a2      	mov	sl, r4
 800535a:	e7d2      	b.n	8005302 <_vfiprintf_r+0xe2>
 800535c:	9b03      	ldr	r3, [sp, #12]
 800535e:	1d19      	adds	r1, r3, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	9103      	str	r1, [sp, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	bfbb      	ittet	lt
 8005368:	425b      	neglt	r3, r3
 800536a:	f042 0202 	orrlt.w	r2, r2, #2
 800536e:	9307      	strge	r3, [sp, #28]
 8005370:	9307      	strlt	r3, [sp, #28]
 8005372:	bfb8      	it	lt
 8005374:	9204      	strlt	r2, [sp, #16]
 8005376:	7823      	ldrb	r3, [r4, #0]
 8005378:	2b2e      	cmp	r3, #46	; 0x2e
 800537a:	d10c      	bne.n	8005396 <_vfiprintf_r+0x176>
 800537c:	7863      	ldrb	r3, [r4, #1]
 800537e:	2b2a      	cmp	r3, #42	; 0x2a
 8005380:	d135      	bne.n	80053ee <_vfiprintf_r+0x1ce>
 8005382:	9b03      	ldr	r3, [sp, #12]
 8005384:	1d1a      	adds	r2, r3, #4
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	9203      	str	r2, [sp, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	bfb8      	it	lt
 800538e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005392:	3402      	adds	r4, #2
 8005394:	9305      	str	r3, [sp, #20]
 8005396:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800547c <_vfiprintf_r+0x25c>
 800539a:	7821      	ldrb	r1, [r4, #0]
 800539c:	2203      	movs	r2, #3
 800539e:	4650      	mov	r0, sl
 80053a0:	f7fa ff16 	bl	80001d0 <memchr>
 80053a4:	b140      	cbz	r0, 80053b8 <_vfiprintf_r+0x198>
 80053a6:	2340      	movs	r3, #64	; 0x40
 80053a8:	eba0 000a 	sub.w	r0, r0, sl
 80053ac:	fa03 f000 	lsl.w	r0, r3, r0
 80053b0:	9b04      	ldr	r3, [sp, #16]
 80053b2:	4303      	orrs	r3, r0
 80053b4:	3401      	adds	r4, #1
 80053b6:	9304      	str	r3, [sp, #16]
 80053b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053bc:	482c      	ldr	r0, [pc, #176]	; (8005470 <_vfiprintf_r+0x250>)
 80053be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053c2:	2206      	movs	r2, #6
 80053c4:	f7fa ff04 	bl	80001d0 <memchr>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	d03f      	beq.n	800544c <_vfiprintf_r+0x22c>
 80053cc:	4b29      	ldr	r3, [pc, #164]	; (8005474 <_vfiprintf_r+0x254>)
 80053ce:	bb1b      	cbnz	r3, 8005418 <_vfiprintf_r+0x1f8>
 80053d0:	9b03      	ldr	r3, [sp, #12]
 80053d2:	3307      	adds	r3, #7
 80053d4:	f023 0307 	bic.w	r3, r3, #7
 80053d8:	3308      	adds	r3, #8
 80053da:	9303      	str	r3, [sp, #12]
 80053dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053de:	443b      	add	r3, r7
 80053e0:	9309      	str	r3, [sp, #36]	; 0x24
 80053e2:	e767      	b.n	80052b4 <_vfiprintf_r+0x94>
 80053e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80053e8:	460c      	mov	r4, r1
 80053ea:	2001      	movs	r0, #1
 80053ec:	e7a5      	b.n	800533a <_vfiprintf_r+0x11a>
 80053ee:	2300      	movs	r3, #0
 80053f0:	3401      	adds	r4, #1
 80053f2:	9305      	str	r3, [sp, #20]
 80053f4:	4619      	mov	r1, r3
 80053f6:	f04f 0c0a 	mov.w	ip, #10
 80053fa:	4620      	mov	r0, r4
 80053fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005400:	3a30      	subs	r2, #48	; 0x30
 8005402:	2a09      	cmp	r2, #9
 8005404:	d903      	bls.n	800540e <_vfiprintf_r+0x1ee>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0c5      	beq.n	8005396 <_vfiprintf_r+0x176>
 800540a:	9105      	str	r1, [sp, #20]
 800540c:	e7c3      	b.n	8005396 <_vfiprintf_r+0x176>
 800540e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005412:	4604      	mov	r4, r0
 8005414:	2301      	movs	r3, #1
 8005416:	e7f0      	b.n	80053fa <_vfiprintf_r+0x1da>
 8005418:	ab03      	add	r3, sp, #12
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	462a      	mov	r2, r5
 800541e:	4b16      	ldr	r3, [pc, #88]	; (8005478 <_vfiprintf_r+0x258>)
 8005420:	a904      	add	r1, sp, #16
 8005422:	4630      	mov	r0, r6
 8005424:	f3af 8000 	nop.w
 8005428:	4607      	mov	r7, r0
 800542a:	1c78      	adds	r0, r7, #1
 800542c:	d1d6      	bne.n	80053dc <_vfiprintf_r+0x1bc>
 800542e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005430:	07d9      	lsls	r1, r3, #31
 8005432:	d405      	bmi.n	8005440 <_vfiprintf_r+0x220>
 8005434:	89ab      	ldrh	r3, [r5, #12]
 8005436:	059a      	lsls	r2, r3, #22
 8005438:	d402      	bmi.n	8005440 <_vfiprintf_r+0x220>
 800543a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800543c:	f7ff fdb7 	bl	8004fae <__retarget_lock_release_recursive>
 8005440:	89ab      	ldrh	r3, [r5, #12]
 8005442:	065b      	lsls	r3, r3, #25
 8005444:	f53f af12 	bmi.w	800526c <_vfiprintf_r+0x4c>
 8005448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800544a:	e711      	b.n	8005270 <_vfiprintf_r+0x50>
 800544c:	ab03      	add	r3, sp, #12
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	462a      	mov	r2, r5
 8005452:	4b09      	ldr	r3, [pc, #36]	; (8005478 <_vfiprintf_r+0x258>)
 8005454:	a904      	add	r1, sp, #16
 8005456:	4630      	mov	r0, r6
 8005458:	f000 f880 	bl	800555c <_printf_i>
 800545c:	e7e4      	b.n	8005428 <_vfiprintf_r+0x208>
 800545e:	bf00      	nop
 8005460:	080059c4 	.word	0x080059c4
 8005464:	080059e4 	.word	0x080059e4
 8005468:	080059a4 	.word	0x080059a4
 800546c:	08005a04 	.word	0x08005a04
 8005470:	08005a0e 	.word	0x08005a0e
 8005474:	00000000 	.word	0x00000000
 8005478:	080051fb 	.word	0x080051fb
 800547c:	08005a0a 	.word	0x08005a0a

08005480 <_printf_common>:
 8005480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005484:	4616      	mov	r6, r2
 8005486:	4699      	mov	r9, r3
 8005488:	688a      	ldr	r2, [r1, #8]
 800548a:	690b      	ldr	r3, [r1, #16]
 800548c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005490:	4293      	cmp	r3, r2
 8005492:	bfb8      	it	lt
 8005494:	4613      	movlt	r3, r2
 8005496:	6033      	str	r3, [r6, #0]
 8005498:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800549c:	4607      	mov	r7, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	b10a      	cbz	r2, 80054a6 <_printf_common+0x26>
 80054a2:	3301      	adds	r3, #1
 80054a4:	6033      	str	r3, [r6, #0]
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	0699      	lsls	r1, r3, #26
 80054aa:	bf42      	ittt	mi
 80054ac:	6833      	ldrmi	r3, [r6, #0]
 80054ae:	3302      	addmi	r3, #2
 80054b0:	6033      	strmi	r3, [r6, #0]
 80054b2:	6825      	ldr	r5, [r4, #0]
 80054b4:	f015 0506 	ands.w	r5, r5, #6
 80054b8:	d106      	bne.n	80054c8 <_printf_common+0x48>
 80054ba:	f104 0a19 	add.w	sl, r4, #25
 80054be:	68e3      	ldr	r3, [r4, #12]
 80054c0:	6832      	ldr	r2, [r6, #0]
 80054c2:	1a9b      	subs	r3, r3, r2
 80054c4:	42ab      	cmp	r3, r5
 80054c6:	dc26      	bgt.n	8005516 <_printf_common+0x96>
 80054c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054cc:	1e13      	subs	r3, r2, #0
 80054ce:	6822      	ldr	r2, [r4, #0]
 80054d0:	bf18      	it	ne
 80054d2:	2301      	movne	r3, #1
 80054d4:	0692      	lsls	r2, r2, #26
 80054d6:	d42b      	bmi.n	8005530 <_printf_common+0xb0>
 80054d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054dc:	4649      	mov	r1, r9
 80054de:	4638      	mov	r0, r7
 80054e0:	47c0      	blx	r8
 80054e2:	3001      	adds	r0, #1
 80054e4:	d01e      	beq.n	8005524 <_printf_common+0xa4>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	68e5      	ldr	r5, [r4, #12]
 80054ea:	6832      	ldr	r2, [r6, #0]
 80054ec:	f003 0306 	and.w	r3, r3, #6
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	bf08      	it	eq
 80054f4:	1aad      	subeq	r5, r5, r2
 80054f6:	68a3      	ldr	r3, [r4, #8]
 80054f8:	6922      	ldr	r2, [r4, #16]
 80054fa:	bf0c      	ite	eq
 80054fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005500:	2500      	movne	r5, #0
 8005502:	4293      	cmp	r3, r2
 8005504:	bfc4      	itt	gt
 8005506:	1a9b      	subgt	r3, r3, r2
 8005508:	18ed      	addgt	r5, r5, r3
 800550a:	2600      	movs	r6, #0
 800550c:	341a      	adds	r4, #26
 800550e:	42b5      	cmp	r5, r6
 8005510:	d11a      	bne.n	8005548 <_printf_common+0xc8>
 8005512:	2000      	movs	r0, #0
 8005514:	e008      	b.n	8005528 <_printf_common+0xa8>
 8005516:	2301      	movs	r3, #1
 8005518:	4652      	mov	r2, sl
 800551a:	4649      	mov	r1, r9
 800551c:	4638      	mov	r0, r7
 800551e:	47c0      	blx	r8
 8005520:	3001      	adds	r0, #1
 8005522:	d103      	bne.n	800552c <_printf_common+0xac>
 8005524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800552c:	3501      	adds	r5, #1
 800552e:	e7c6      	b.n	80054be <_printf_common+0x3e>
 8005530:	18e1      	adds	r1, r4, r3
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	2030      	movs	r0, #48	; 0x30
 8005536:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800553a:	4422      	add	r2, r4
 800553c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005540:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005544:	3302      	adds	r3, #2
 8005546:	e7c7      	b.n	80054d8 <_printf_common+0x58>
 8005548:	2301      	movs	r3, #1
 800554a:	4622      	mov	r2, r4
 800554c:	4649      	mov	r1, r9
 800554e:	4638      	mov	r0, r7
 8005550:	47c0      	blx	r8
 8005552:	3001      	adds	r0, #1
 8005554:	d0e6      	beq.n	8005524 <_printf_common+0xa4>
 8005556:	3601      	adds	r6, #1
 8005558:	e7d9      	b.n	800550e <_printf_common+0x8e>
	...

0800555c <_printf_i>:
 800555c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005560:	460c      	mov	r4, r1
 8005562:	4691      	mov	r9, r2
 8005564:	7e27      	ldrb	r7, [r4, #24]
 8005566:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005568:	2f78      	cmp	r7, #120	; 0x78
 800556a:	4680      	mov	r8, r0
 800556c:	469a      	mov	sl, r3
 800556e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005572:	d807      	bhi.n	8005584 <_printf_i+0x28>
 8005574:	2f62      	cmp	r7, #98	; 0x62
 8005576:	d80a      	bhi.n	800558e <_printf_i+0x32>
 8005578:	2f00      	cmp	r7, #0
 800557a:	f000 80d8 	beq.w	800572e <_printf_i+0x1d2>
 800557e:	2f58      	cmp	r7, #88	; 0x58
 8005580:	f000 80a3 	beq.w	80056ca <_printf_i+0x16e>
 8005584:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005588:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800558c:	e03a      	b.n	8005604 <_printf_i+0xa8>
 800558e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005592:	2b15      	cmp	r3, #21
 8005594:	d8f6      	bhi.n	8005584 <_printf_i+0x28>
 8005596:	a001      	add	r0, pc, #4	; (adr r0, 800559c <_printf_i+0x40>)
 8005598:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800559c:	080055f5 	.word	0x080055f5
 80055a0:	08005609 	.word	0x08005609
 80055a4:	08005585 	.word	0x08005585
 80055a8:	08005585 	.word	0x08005585
 80055ac:	08005585 	.word	0x08005585
 80055b0:	08005585 	.word	0x08005585
 80055b4:	08005609 	.word	0x08005609
 80055b8:	08005585 	.word	0x08005585
 80055bc:	08005585 	.word	0x08005585
 80055c0:	08005585 	.word	0x08005585
 80055c4:	08005585 	.word	0x08005585
 80055c8:	08005715 	.word	0x08005715
 80055cc:	08005639 	.word	0x08005639
 80055d0:	080056f7 	.word	0x080056f7
 80055d4:	08005585 	.word	0x08005585
 80055d8:	08005585 	.word	0x08005585
 80055dc:	08005737 	.word	0x08005737
 80055e0:	08005585 	.word	0x08005585
 80055e4:	08005639 	.word	0x08005639
 80055e8:	08005585 	.word	0x08005585
 80055ec:	08005585 	.word	0x08005585
 80055f0:	080056ff 	.word	0x080056ff
 80055f4:	680b      	ldr	r3, [r1, #0]
 80055f6:	1d1a      	adds	r2, r3, #4
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	600a      	str	r2, [r1, #0]
 80055fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005604:	2301      	movs	r3, #1
 8005606:	e0a3      	b.n	8005750 <_printf_i+0x1f4>
 8005608:	6825      	ldr	r5, [r4, #0]
 800560a:	6808      	ldr	r0, [r1, #0]
 800560c:	062e      	lsls	r6, r5, #24
 800560e:	f100 0304 	add.w	r3, r0, #4
 8005612:	d50a      	bpl.n	800562a <_printf_i+0xce>
 8005614:	6805      	ldr	r5, [r0, #0]
 8005616:	600b      	str	r3, [r1, #0]
 8005618:	2d00      	cmp	r5, #0
 800561a:	da03      	bge.n	8005624 <_printf_i+0xc8>
 800561c:	232d      	movs	r3, #45	; 0x2d
 800561e:	426d      	negs	r5, r5
 8005620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005624:	485e      	ldr	r0, [pc, #376]	; (80057a0 <_printf_i+0x244>)
 8005626:	230a      	movs	r3, #10
 8005628:	e019      	b.n	800565e <_printf_i+0x102>
 800562a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800562e:	6805      	ldr	r5, [r0, #0]
 8005630:	600b      	str	r3, [r1, #0]
 8005632:	bf18      	it	ne
 8005634:	b22d      	sxthne	r5, r5
 8005636:	e7ef      	b.n	8005618 <_printf_i+0xbc>
 8005638:	680b      	ldr	r3, [r1, #0]
 800563a:	6825      	ldr	r5, [r4, #0]
 800563c:	1d18      	adds	r0, r3, #4
 800563e:	6008      	str	r0, [r1, #0]
 8005640:	0628      	lsls	r0, r5, #24
 8005642:	d501      	bpl.n	8005648 <_printf_i+0xec>
 8005644:	681d      	ldr	r5, [r3, #0]
 8005646:	e002      	b.n	800564e <_printf_i+0xf2>
 8005648:	0669      	lsls	r1, r5, #25
 800564a:	d5fb      	bpl.n	8005644 <_printf_i+0xe8>
 800564c:	881d      	ldrh	r5, [r3, #0]
 800564e:	4854      	ldr	r0, [pc, #336]	; (80057a0 <_printf_i+0x244>)
 8005650:	2f6f      	cmp	r7, #111	; 0x6f
 8005652:	bf0c      	ite	eq
 8005654:	2308      	moveq	r3, #8
 8005656:	230a      	movne	r3, #10
 8005658:	2100      	movs	r1, #0
 800565a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800565e:	6866      	ldr	r6, [r4, #4]
 8005660:	60a6      	str	r6, [r4, #8]
 8005662:	2e00      	cmp	r6, #0
 8005664:	bfa2      	ittt	ge
 8005666:	6821      	ldrge	r1, [r4, #0]
 8005668:	f021 0104 	bicge.w	r1, r1, #4
 800566c:	6021      	strge	r1, [r4, #0]
 800566e:	b90d      	cbnz	r5, 8005674 <_printf_i+0x118>
 8005670:	2e00      	cmp	r6, #0
 8005672:	d04d      	beq.n	8005710 <_printf_i+0x1b4>
 8005674:	4616      	mov	r6, r2
 8005676:	fbb5 f1f3 	udiv	r1, r5, r3
 800567a:	fb03 5711 	mls	r7, r3, r1, r5
 800567e:	5dc7      	ldrb	r7, [r0, r7]
 8005680:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005684:	462f      	mov	r7, r5
 8005686:	42bb      	cmp	r3, r7
 8005688:	460d      	mov	r5, r1
 800568a:	d9f4      	bls.n	8005676 <_printf_i+0x11a>
 800568c:	2b08      	cmp	r3, #8
 800568e:	d10b      	bne.n	80056a8 <_printf_i+0x14c>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	07df      	lsls	r7, r3, #31
 8005694:	d508      	bpl.n	80056a8 <_printf_i+0x14c>
 8005696:	6923      	ldr	r3, [r4, #16]
 8005698:	6861      	ldr	r1, [r4, #4]
 800569a:	4299      	cmp	r1, r3
 800569c:	bfde      	ittt	le
 800569e:	2330      	movle	r3, #48	; 0x30
 80056a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056a4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80056a8:	1b92      	subs	r2, r2, r6
 80056aa:	6122      	str	r2, [r4, #16]
 80056ac:	f8cd a000 	str.w	sl, [sp]
 80056b0:	464b      	mov	r3, r9
 80056b2:	aa03      	add	r2, sp, #12
 80056b4:	4621      	mov	r1, r4
 80056b6:	4640      	mov	r0, r8
 80056b8:	f7ff fee2 	bl	8005480 <_printf_common>
 80056bc:	3001      	adds	r0, #1
 80056be:	d14c      	bne.n	800575a <_printf_i+0x1fe>
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056c4:	b004      	add	sp, #16
 80056c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ca:	4835      	ldr	r0, [pc, #212]	; (80057a0 <_printf_i+0x244>)
 80056cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	680e      	ldr	r6, [r1, #0]
 80056d4:	061f      	lsls	r7, r3, #24
 80056d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80056da:	600e      	str	r6, [r1, #0]
 80056dc:	d514      	bpl.n	8005708 <_printf_i+0x1ac>
 80056de:	07d9      	lsls	r1, r3, #31
 80056e0:	bf44      	itt	mi
 80056e2:	f043 0320 	orrmi.w	r3, r3, #32
 80056e6:	6023      	strmi	r3, [r4, #0]
 80056e8:	b91d      	cbnz	r5, 80056f2 <_printf_i+0x196>
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	f023 0320 	bic.w	r3, r3, #32
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	2310      	movs	r3, #16
 80056f4:	e7b0      	b.n	8005658 <_printf_i+0xfc>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	f043 0320 	orr.w	r3, r3, #32
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	2378      	movs	r3, #120	; 0x78
 8005700:	4828      	ldr	r0, [pc, #160]	; (80057a4 <_printf_i+0x248>)
 8005702:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005706:	e7e3      	b.n	80056d0 <_printf_i+0x174>
 8005708:	065e      	lsls	r6, r3, #25
 800570a:	bf48      	it	mi
 800570c:	b2ad      	uxthmi	r5, r5
 800570e:	e7e6      	b.n	80056de <_printf_i+0x182>
 8005710:	4616      	mov	r6, r2
 8005712:	e7bb      	b.n	800568c <_printf_i+0x130>
 8005714:	680b      	ldr	r3, [r1, #0]
 8005716:	6826      	ldr	r6, [r4, #0]
 8005718:	6960      	ldr	r0, [r4, #20]
 800571a:	1d1d      	adds	r5, r3, #4
 800571c:	600d      	str	r5, [r1, #0]
 800571e:	0635      	lsls	r5, r6, #24
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	d501      	bpl.n	8005728 <_printf_i+0x1cc>
 8005724:	6018      	str	r0, [r3, #0]
 8005726:	e002      	b.n	800572e <_printf_i+0x1d2>
 8005728:	0671      	lsls	r1, r6, #25
 800572a:	d5fb      	bpl.n	8005724 <_printf_i+0x1c8>
 800572c:	8018      	strh	r0, [r3, #0]
 800572e:	2300      	movs	r3, #0
 8005730:	6123      	str	r3, [r4, #16]
 8005732:	4616      	mov	r6, r2
 8005734:	e7ba      	b.n	80056ac <_printf_i+0x150>
 8005736:	680b      	ldr	r3, [r1, #0]
 8005738:	1d1a      	adds	r2, r3, #4
 800573a:	600a      	str	r2, [r1, #0]
 800573c:	681e      	ldr	r6, [r3, #0]
 800573e:	6862      	ldr	r2, [r4, #4]
 8005740:	2100      	movs	r1, #0
 8005742:	4630      	mov	r0, r6
 8005744:	f7fa fd44 	bl	80001d0 <memchr>
 8005748:	b108      	cbz	r0, 800574e <_printf_i+0x1f2>
 800574a:	1b80      	subs	r0, r0, r6
 800574c:	6060      	str	r0, [r4, #4]
 800574e:	6863      	ldr	r3, [r4, #4]
 8005750:	6123      	str	r3, [r4, #16]
 8005752:	2300      	movs	r3, #0
 8005754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005758:	e7a8      	b.n	80056ac <_printf_i+0x150>
 800575a:	6923      	ldr	r3, [r4, #16]
 800575c:	4632      	mov	r2, r6
 800575e:	4649      	mov	r1, r9
 8005760:	4640      	mov	r0, r8
 8005762:	47d0      	blx	sl
 8005764:	3001      	adds	r0, #1
 8005766:	d0ab      	beq.n	80056c0 <_printf_i+0x164>
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	079b      	lsls	r3, r3, #30
 800576c:	d413      	bmi.n	8005796 <_printf_i+0x23a>
 800576e:	68e0      	ldr	r0, [r4, #12]
 8005770:	9b03      	ldr	r3, [sp, #12]
 8005772:	4298      	cmp	r0, r3
 8005774:	bfb8      	it	lt
 8005776:	4618      	movlt	r0, r3
 8005778:	e7a4      	b.n	80056c4 <_printf_i+0x168>
 800577a:	2301      	movs	r3, #1
 800577c:	4632      	mov	r2, r6
 800577e:	4649      	mov	r1, r9
 8005780:	4640      	mov	r0, r8
 8005782:	47d0      	blx	sl
 8005784:	3001      	adds	r0, #1
 8005786:	d09b      	beq.n	80056c0 <_printf_i+0x164>
 8005788:	3501      	adds	r5, #1
 800578a:	68e3      	ldr	r3, [r4, #12]
 800578c:	9903      	ldr	r1, [sp, #12]
 800578e:	1a5b      	subs	r3, r3, r1
 8005790:	42ab      	cmp	r3, r5
 8005792:	dcf2      	bgt.n	800577a <_printf_i+0x21e>
 8005794:	e7eb      	b.n	800576e <_printf_i+0x212>
 8005796:	2500      	movs	r5, #0
 8005798:	f104 0619 	add.w	r6, r4, #25
 800579c:	e7f5      	b.n	800578a <_printf_i+0x22e>
 800579e:	bf00      	nop
 80057a0:	08005a15 	.word	0x08005a15
 80057a4:	08005a26 	.word	0x08005a26

080057a8 <_sbrk_r>:
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	4d06      	ldr	r5, [pc, #24]	; (80057c4 <_sbrk_r+0x1c>)
 80057ac:	2300      	movs	r3, #0
 80057ae:	4604      	mov	r4, r0
 80057b0:	4608      	mov	r0, r1
 80057b2:	602b      	str	r3, [r5, #0]
 80057b4:	f7fb f930 	bl	8000a18 <_sbrk>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d102      	bne.n	80057c2 <_sbrk_r+0x1a>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	b103      	cbz	r3, 80057c2 <_sbrk_r+0x1a>
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	200021a8 	.word	0x200021a8

080057c8 <__sread>:
 80057c8:	b510      	push	{r4, lr}
 80057ca:	460c      	mov	r4, r1
 80057cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d0:	f000 f8a0 	bl	8005914 <_read_r>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	bfab      	itete	ge
 80057d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057da:	89a3      	ldrhlt	r3, [r4, #12]
 80057dc:	181b      	addge	r3, r3, r0
 80057de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057e2:	bfac      	ite	ge
 80057e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80057e6:	81a3      	strhlt	r3, [r4, #12]
 80057e8:	bd10      	pop	{r4, pc}

080057ea <__swrite>:
 80057ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ee:	461f      	mov	r7, r3
 80057f0:	898b      	ldrh	r3, [r1, #12]
 80057f2:	05db      	lsls	r3, r3, #23
 80057f4:	4605      	mov	r5, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	4616      	mov	r6, r2
 80057fa:	d505      	bpl.n	8005808 <__swrite+0x1e>
 80057fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005800:	2302      	movs	r3, #2
 8005802:	2200      	movs	r2, #0
 8005804:	f000 f868 	bl	80058d8 <_lseek_r>
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800580e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005812:	81a3      	strh	r3, [r4, #12]
 8005814:	4632      	mov	r2, r6
 8005816:	463b      	mov	r3, r7
 8005818:	4628      	mov	r0, r5
 800581a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800581e:	f000 b817 	b.w	8005850 <_write_r>

08005822 <__sseek>:
 8005822:	b510      	push	{r4, lr}
 8005824:	460c      	mov	r4, r1
 8005826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800582a:	f000 f855 	bl	80058d8 <_lseek_r>
 800582e:	1c43      	adds	r3, r0, #1
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	bf15      	itete	ne
 8005834:	6560      	strne	r0, [r4, #84]	; 0x54
 8005836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800583a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800583e:	81a3      	strheq	r3, [r4, #12]
 8005840:	bf18      	it	ne
 8005842:	81a3      	strhne	r3, [r4, #12]
 8005844:	bd10      	pop	{r4, pc}

08005846 <__sclose>:
 8005846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584a:	f000 b813 	b.w	8005874 <_close_r>
	...

08005850 <_write_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	4d07      	ldr	r5, [pc, #28]	; (8005870 <_write_r+0x20>)
 8005854:	4604      	mov	r4, r0
 8005856:	4608      	mov	r0, r1
 8005858:	4611      	mov	r1, r2
 800585a:	2200      	movs	r2, #0
 800585c:	602a      	str	r2, [r5, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	f7fb f889 	bl	8000976 <_write>
 8005864:	1c43      	adds	r3, r0, #1
 8005866:	d102      	bne.n	800586e <_write_r+0x1e>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	b103      	cbz	r3, 800586e <_write_r+0x1e>
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	bd38      	pop	{r3, r4, r5, pc}
 8005870:	200021a8 	.word	0x200021a8

08005874 <_close_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	4d06      	ldr	r5, [pc, #24]	; (8005890 <_close_r+0x1c>)
 8005878:	2300      	movs	r3, #0
 800587a:	4604      	mov	r4, r0
 800587c:	4608      	mov	r0, r1
 800587e:	602b      	str	r3, [r5, #0]
 8005880:	f7fb f895 	bl	80009ae <_close>
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d102      	bne.n	800588e <_close_r+0x1a>
 8005888:	682b      	ldr	r3, [r5, #0]
 800588a:	b103      	cbz	r3, 800588e <_close_r+0x1a>
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	bd38      	pop	{r3, r4, r5, pc}
 8005890:	200021a8 	.word	0x200021a8

08005894 <_fstat_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4d07      	ldr	r5, [pc, #28]	; (80058b4 <_fstat_r+0x20>)
 8005898:	2300      	movs	r3, #0
 800589a:	4604      	mov	r4, r0
 800589c:	4608      	mov	r0, r1
 800589e:	4611      	mov	r1, r2
 80058a0:	602b      	str	r3, [r5, #0]
 80058a2:	f7fb f890 	bl	80009c6 <_fstat>
 80058a6:	1c43      	adds	r3, r0, #1
 80058a8:	d102      	bne.n	80058b0 <_fstat_r+0x1c>
 80058aa:	682b      	ldr	r3, [r5, #0]
 80058ac:	b103      	cbz	r3, 80058b0 <_fstat_r+0x1c>
 80058ae:	6023      	str	r3, [r4, #0]
 80058b0:	bd38      	pop	{r3, r4, r5, pc}
 80058b2:	bf00      	nop
 80058b4:	200021a8 	.word	0x200021a8

080058b8 <_isatty_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4d06      	ldr	r5, [pc, #24]	; (80058d4 <_isatty_r+0x1c>)
 80058bc:	2300      	movs	r3, #0
 80058be:	4604      	mov	r4, r0
 80058c0:	4608      	mov	r0, r1
 80058c2:	602b      	str	r3, [r5, #0]
 80058c4:	f7fb f88f 	bl	80009e6 <_isatty>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d102      	bne.n	80058d2 <_isatty_r+0x1a>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	b103      	cbz	r3, 80058d2 <_isatty_r+0x1a>
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	200021a8 	.word	0x200021a8

080058d8 <_lseek_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	4d07      	ldr	r5, [pc, #28]	; (80058f8 <_lseek_r+0x20>)
 80058dc:	4604      	mov	r4, r0
 80058de:	4608      	mov	r0, r1
 80058e0:	4611      	mov	r1, r2
 80058e2:	2200      	movs	r2, #0
 80058e4:	602a      	str	r2, [r5, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	f7fb f888 	bl	80009fc <_lseek>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	d102      	bne.n	80058f6 <_lseek_r+0x1e>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	b103      	cbz	r3, 80058f6 <_lseek_r+0x1e>
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	bd38      	pop	{r3, r4, r5, pc}
 80058f8:	200021a8 	.word	0x200021a8

080058fc <__malloc_lock>:
 80058fc:	4801      	ldr	r0, [pc, #4]	; (8005904 <__malloc_lock+0x8>)
 80058fe:	f7ff bb55 	b.w	8004fac <__retarget_lock_acquire_recursive>
 8005902:	bf00      	nop
 8005904:	200021a0 	.word	0x200021a0

08005908 <__malloc_unlock>:
 8005908:	4801      	ldr	r0, [pc, #4]	; (8005910 <__malloc_unlock+0x8>)
 800590a:	f7ff bb50 	b.w	8004fae <__retarget_lock_release_recursive>
 800590e:	bf00      	nop
 8005910:	200021a0 	.word	0x200021a0

08005914 <_read_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	4d07      	ldr	r5, [pc, #28]	; (8005934 <_read_r+0x20>)
 8005918:	4604      	mov	r4, r0
 800591a:	4608      	mov	r0, r1
 800591c:	4611      	mov	r1, r2
 800591e:	2200      	movs	r2, #0
 8005920:	602a      	str	r2, [r5, #0]
 8005922:	461a      	mov	r2, r3
 8005924:	f7fb f80a 	bl	800093c <_read>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	d102      	bne.n	8005932 <_read_r+0x1e>
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	b103      	cbz	r3, 8005932 <_read_r+0x1e>
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	200021a8 	.word	0x200021a8

08005938 <_init>:
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	bf00      	nop
 800593c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593e:	bc08      	pop	{r3}
 8005940:	469e      	mov	lr, r3
 8005942:	4770      	bx	lr

08005944 <_fini>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	bf00      	nop
 8005948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594a:	bc08      	pop	{r3}
 800594c:	469e      	mov	lr, r3
 800594e:	4770      	bx	lr
