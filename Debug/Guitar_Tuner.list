
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002180  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800230c  0800230c  0001230c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023bc  080023bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080023bc  080023bc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023bc  080023bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023bc  080023bc  000123bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023c0  080023c0  000123c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080023c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  08002434  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002434  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b77  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001619  00000000  00000000  00027c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  00029230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000550  00000000  00000000  00029838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d1d  00000000  00000000  00029d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000698f  00000000  00000000  0004aaa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1947  00000000  00000000  00051434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00112d7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c8c  00000000  00000000  00112dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080022f4 	.word	0x080022f4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	080022f4 	.word	0x080022f4

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fa0b 	bl	80005ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f812 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f860 	bl	800029c <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80001dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e4:	f000 fd12 	bl	8000c0c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80001e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001ec:	f000 fa72 	bl	80006d4 <HAL_Delay>
	  printf("LED Toggle\n");
 80001f0:	4801      	ldr	r0, [pc, #4]	; (80001f8 <main+0x2c>)
 80001f2:	f001 fc27 	bl	8001a44 <puts>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80001f6:	e7f1      	b.n	80001dc <main+0x10>
 80001f8:	0800230c 	.word	0x0800230c

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b096      	sub	sp, #88	; 0x58
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0314 	add.w	r3, r7, #20
 8000206:	2244      	movs	r2, #68	; 0x44
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fba4 	bl	8001958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	463b      	mov	r3, r7
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800021e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000222:	f000 fd1b 	bl	8000c5c <HAL_PWREx_ControlVoltageScaling>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800022c:	f000 f882 	bl	8000334 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000230:	2301      	movs	r3, #1
 8000232:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023e:	2303      	movs	r3, #3
 8000240:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000242:	2306      	movs	r3, #6
 8000244:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000246:	2350      	movs	r3, #80	; 0x50
 8000248:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800024a:	2307      	movs	r3, #7
 800024c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800024e:	2302      	movs	r3, #2
 8000250:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000252:	2304      	movs	r3, #4
 8000254:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0314 	add.w	r3, r7, #20
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fd54 	bl	8000d08 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000266:	f000 f865 	bl	8000334 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2303      	movs	r3, #3
 8000270:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800027e:	463b      	mov	r3, r7
 8000280:	2104      	movs	r1, #4
 8000282:	4618      	mov	r0, r3
 8000284:	f001 f952 	bl	800152c <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800028e:	f000 f851 	bl	8000334 <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3758      	adds	r7, #88	; 0x58
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 030c 	add.w	r3, r7, #12
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002b2:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <MX_GPIO_Init+0x94>)
 80002b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b6:	4a1e      	ldr	r2, [pc, #120]	; (8000330 <MX_GPIO_Init+0x94>)
 80002b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002be:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <MX_GPIO_Init+0x94>)
 80002c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002c6:	60bb      	str	r3, [r7, #8]
 80002c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ca:	4b19      	ldr	r3, [pc, #100]	; (8000330 <MX_GPIO_Init+0x94>)
 80002cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ce:	4a18      	ldr	r2, [pc, #96]	; (8000330 <MX_GPIO_Init+0x94>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002d6:	4b16      	ldr	r3, [pc, #88]	; (8000330 <MX_GPIO_Init+0x94>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e2:	4b13      	ldr	r3, [pc, #76]	; (8000330 <MX_GPIO_Init+0x94>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	4a12      	ldr	r2, [pc, #72]	; (8000330 <MX_GPIO_Init+0x94>)
 80002e8:	f043 0302 	orr.w	r3, r3, #2
 80002ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ee:	4b10      	ldr	r3, [pc, #64]	; (8000330 <MX_GPIO_Init+0x94>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f2:	f003 0302 	and.w	r3, r3, #2
 80002f6:	603b      	str	r3, [r7, #0]
 80002f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000304:	f000 fc6a 	bl	8000bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800030c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030e:	2301      	movs	r3, #1
 8000310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000316:	2300      	movs	r3, #0
 8000318:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800031a:	f107 030c 	add.w	r3, r7, #12
 800031e:	4619      	mov	r1, r3
 8000320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000324:	f000 fae0 	bl	80008e8 <HAL_GPIO_Init>

}
 8000328:	bf00      	nop
 800032a:	3720      	adds	r7, #32
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40021000 	.word	0x40021000

08000334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000338:	b672      	cpsid	i
}
 800033a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800033c:	e7fe      	b.n	800033c <Error_Handler+0x8>
	...

08000340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <HAL_MspInit+0x44>)
 8000348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800034a:	4a0e      	ldr	r2, [pc, #56]	; (8000384 <HAL_MspInit+0x44>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6613      	str	r3, [r2, #96]	; 0x60
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <HAL_MspInit+0x44>)
 8000354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <HAL_MspInit+0x44>)
 8000360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000362:	4a08      	ldr	r2, [pc, #32]	; (8000384 <HAL_MspInit+0x44>)
 8000364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000368:	6593      	str	r3, [r2, #88]	; 0x58
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <HAL_MspInit+0x44>)
 800036c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800036e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000

08000388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800038c:	e7fe      	b.n	800038c <NMI_Handler+0x4>

0800038e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000392:	e7fe      	b.n	8000392 <HardFault_Handler+0x4>

08000394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000398:	e7fe      	b.n	8000398 <MemManage_Handler+0x4>

0800039a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800039e:	e7fe      	b.n	800039e <BusFault_Handler+0x4>

080003a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <UsageFault_Handler+0x4>

080003a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr

080003c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003d4:	f000 f95e 	bl	8000694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}

080003dc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <ITM_SendChar+0x48>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <ITM_SendChar+0x48>)
 80003ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003f0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80003f2:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <ITM_SendChar+0x4c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a0c      	ldr	r2, [pc, #48]	; (8000428 <ITM_SendChar+0x4c>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80003fe:	bf00      	nop
 8000400:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	2b00      	cmp	r3, #0
 800040c:	d0f8      	beq.n	8000400 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800040e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	6013      	str	r3, [r2, #0]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000edfc 	.word	0xe000edfc
 8000428:	e0000e00 	.word	0xe0000e00

0800042c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	e00a      	b.n	8000454 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800043e:	f3af 8000 	nop.w
 8000442:	4601      	mov	r1, r0
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	1c5a      	adds	r2, r3, #1
 8000448:	60ba      	str	r2, [r7, #8]
 800044a:	b2ca      	uxtb	r2, r1
 800044c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	3301      	adds	r3, #1
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	697a      	ldr	r2, [r7, #20]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	429a      	cmp	r2, r3
 800045a:	dbf0      	blt.n	800043e <_read+0x12>
	}

return len;
 800045c:	687b      	ldr	r3, [r7, #4]
}
 800045e:	4618      	mov	r0, r3
 8000460:	3718      	adds	r7, #24
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	b086      	sub	sp, #24
 800046a:	af00      	add	r7, sp, #0
 800046c:	60f8      	str	r0, [r7, #12]
 800046e:	60b9      	str	r1, [r7, #8]
 8000470:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
 8000476:	e009      	b.n	800048c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);   // This sends to the trace
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	1c5a      	adds	r2, r3, #1
 800047c:	60ba      	str	r2, [r7, #8]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ffab 	bl	80003dc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	3301      	adds	r3, #1
 800048a:	617b      	str	r3, [r7, #20]
 800048c:	697a      	ldr	r2, [r7, #20]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	429a      	cmp	r2, r3
 8000492:	dbf1      	blt.n	8000478 <_write+0x12>
	}
	return len;
 8000494:	687b      	ldr	r3, [r7, #4]
}
 8000496:	4618      	mov	r0, r3
 8000498:	3718      	adds	r7, #24
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <_close>:

int _close(int file)
{
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
	return -1;
 80004a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004c6:	605a      	str	r2, [r3, #4]
	return 0;
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <_isatty>:

int _isatty(int file)
{
 80004d6:	b480      	push	{r7}
 80004d8:	b083      	sub	sp, #12
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
	return 1;
 80004de:	2301      	movs	r3, #1
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
	return 0;
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
	...

08000508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000510:	4a14      	ldr	r2, [pc, #80]	; (8000564 <_sbrk+0x5c>)
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <_sbrk+0x60>)
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <_sbrk+0x64>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d102      	bne.n	800052a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <_sbrk+0x64>)
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <_sbrk+0x68>)
 8000528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	693a      	ldr	r2, [r7, #16]
 8000534:	429a      	cmp	r2, r3
 8000536:	d207      	bcs.n	8000548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000538:	f001 f9e4 	bl	8001904 <__errno>
 800053c:	4603      	mov	r3, r0
 800053e:	220c      	movs	r2, #12
 8000540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000546:	e009      	b.n	800055c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <_sbrk+0x64>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <_sbrk+0x64>)
 8000558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055a:	68fb      	ldr	r3, [r7, #12]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20010000 	.word	0x20010000
 8000568:	00000400 	.word	0x00000400
 800056c:	2000008c 	.word	0x2000008c
 8000570:	200000b0 	.word	0x200000b0

08000574 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <SystemInit+0x20>)
 800057a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <SystemInit+0x20>)
 8000580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800059c:	f7ff ffea 	bl	8000574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a2:	490d      	ldr	r1, [pc, #52]	; (80005d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <LoopForever+0xe>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a8:	e002      	b.n	80005b0 <LoopCopyDataInit>

080005aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ae:	3304      	adds	r3, #4

080005b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b4:	d3f9      	bcc.n	80005aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b8:	4c0a      	ldr	r4, [pc, #40]	; (80005e4 <LoopForever+0x16>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005bc:	e001      	b.n	80005c2 <LoopFillZerobss>

080005be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c0:	3204      	adds	r2, #4

080005c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c4:	d3fb      	bcc.n	80005be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005c6:	f001 f9a3 	bl	8001910 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ca:	f7ff fdff 	bl	80001cc <main>

080005ce <LoopForever>:

LoopForever:
    b LoopForever
 80005ce:	e7fe      	b.n	80005ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005dc:	080023c4 	.word	0x080023c4
  ldr r2, =_sbss
 80005e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005e4:	200000ac 	.word	0x200000ac

080005e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005e8:	e7fe      	b.n	80005e8 <ADC1_IRQHandler>

080005ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005f0:	2300      	movs	r3, #0
 80005f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f943 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005fa:	200f      	movs	r0, #15
 80005fc:	f000 f80e 	bl	800061c <HAL_InitTick>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	e001      	b.n	8000610 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800060c:	f7ff fe98 	bl	8000340 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000610:	79fb      	ldrb	r3, [r7, #7]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HAL_InitTick+0x6c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d023      	beq.n	8000678 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <HAL_InitTick+0x70>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <HAL_InitTick+0x6c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000642:	fbb2 f3f3 	udiv	r3, r2, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f941 	bl	80008ce <HAL_SYSTICK_Config>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d10f      	bne.n	8000672 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d809      	bhi.n	800066c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000658:	2200      	movs	r2, #0
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000660:	f000 f919 	bl	8000896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000664:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <HAL_InitTick+0x74>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	e007      	b.n	800067c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	73fb      	strb	r3, [r7, #15]
 8000670:	e004      	b.n	800067c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	e001      	b.n	800067c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000678:	2301      	movs	r3, #1
 800067a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000008 	.word	0x20000008
 800068c:	20000000 	.word	0x20000000
 8000690:	20000004 	.word	0x20000004

08000694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_IncTick+0x20>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_IncTick+0x24>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <HAL_IncTick+0x24>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000008 	.word	0x20000008
 80006b8:	20000098 	.word	0x20000098

080006bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return uwTick;
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <HAL_GetTick+0x14>)
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000098 	.word	0x20000098

080006d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006dc:	f7ff ffee 	bl	80006bc <HAL_GetTick>
 80006e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006ec:	d005      	beq.n	80006fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <HAL_Delay+0x44>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4413      	add	r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006fa:	bf00      	nop
 80006fc:	f7ff ffde 	bl	80006bc <HAL_GetTick>
 8000700:	4602      	mov	r2, r0
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	429a      	cmp	r2, r3
 800070a:	d8f7      	bhi.n	80006fc <HAL_Delay+0x28>
  {
  }
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000008 	.word	0x20000008

0800071c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <__NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	; 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800084c:	d301      	bcc.n	8000852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2301      	movs	r3, #1
 8000850:	e00f      	b.n	8000872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SysTick_Config+0x40>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085a:	210f      	movs	r1, #15
 800085c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000860:	f7ff ff8e 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <SysTick_Config+0x40>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff47 	bl	800071c <__NVIC_SetPriorityGrouping>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff5c 	bl	8000764 <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff8e 	bl	80007d4 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5d 	bl	8000780 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffb0 	bl	800083c <SysTick_Config>
 80008dc:	4603      	mov	r3, r0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b087      	sub	sp, #28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f6:	e154      	b.n	8000ba2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	2101      	movs	r1, #1
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 8146 	beq.w	8000b9c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f003 0303 	and.w	r3, r3, #3
 8000918:	2b01      	cmp	r3, #1
 800091a:	d005      	beq.n	8000928 <HAL_GPIO_Init+0x40>
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f003 0303 	and.w	r3, r3, #3
 8000924:	2b02      	cmp	r3, #2
 8000926:	d130      	bne.n	800098a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	2203      	movs	r2, #3
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4313      	orrs	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800095e:	2201      	movs	r2, #1
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4013      	ands	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	091b      	lsrs	r3, r3, #4
 8000974:	f003 0201 	and.w	r2, r3, #1
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4313      	orrs	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	2b03      	cmp	r3, #3
 8000994:	d017      	beq.n	80009c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	2203      	movs	r2, #3
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 0303 	and.w	r3, r3, #3
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d123      	bne.n	8000a1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	08da      	lsrs	r2, r3, #3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3208      	adds	r2, #8
 80009da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	220f      	movs	r2, #15
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	691a      	ldr	r2, [r3, #16]
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f003 0307 	and.w	r3, r3, #7
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	08da      	lsrs	r2, r3, #3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3208      	adds	r2, #8
 8000a14:	6939      	ldr	r1, [r7, #16]
 8000a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	2203      	movs	r2, #3
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f003 0203 	and.w	r2, r3, #3
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 80a0 	beq.w	8000b9c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5c:	4b58      	ldr	r3, [pc, #352]	; (8000bc0 <HAL_GPIO_Init+0x2d8>)
 8000a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a60:	4a57      	ldr	r2, [pc, #348]	; (8000bc0 <HAL_GPIO_Init+0x2d8>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6613      	str	r3, [r2, #96]	; 0x60
 8000a68:	4b55      	ldr	r3, [pc, #340]	; (8000bc0 <HAL_GPIO_Init+0x2d8>)
 8000a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a74:	4a53      	ldr	r2, [pc, #332]	; (8000bc4 <HAL_GPIO_Init+0x2dc>)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	220f      	movs	r2, #15
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a9e:	d019      	beq.n	8000ad4 <HAL_GPIO_Init+0x1ec>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a49      	ldr	r2, [pc, #292]	; (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d013      	beq.n	8000ad0 <HAL_GPIO_Init+0x1e8>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a48      	ldr	r2, [pc, #288]	; (8000bcc <HAL_GPIO_Init+0x2e4>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d00d      	beq.n	8000acc <HAL_GPIO_Init+0x1e4>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a47      	ldr	r2, [pc, #284]	; (8000bd0 <HAL_GPIO_Init+0x2e8>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d007      	beq.n	8000ac8 <HAL_GPIO_Init+0x1e0>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a46      	ldr	r2, [pc, #280]	; (8000bd4 <HAL_GPIO_Init+0x2ec>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d101      	bne.n	8000ac4 <HAL_GPIO_Init+0x1dc>
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	e008      	b.n	8000ad6 <HAL_GPIO_Init+0x1ee>
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	e006      	b.n	8000ad6 <HAL_GPIO_Init+0x1ee>
 8000ac8:	2303      	movs	r3, #3
 8000aca:	e004      	b.n	8000ad6 <HAL_GPIO_Init+0x1ee>
 8000acc:	2302      	movs	r3, #2
 8000ace:	e002      	b.n	8000ad6 <HAL_GPIO_Init+0x1ee>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e000      	b.n	8000ad6 <HAL_GPIO_Init+0x1ee>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	f002 0203 	and.w	r2, r2, #3
 8000adc:	0092      	lsls	r2, r2, #2
 8000ade:	4093      	lsls	r3, r2
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ae6:	4937      	ldr	r1, [pc, #220]	; (8000bc4 <HAL_GPIO_Init+0x2dc>)
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	089b      	lsrs	r3, r3, #2
 8000aec:	3302      	adds	r3, #2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000af4:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <HAL_GPIO_Init+0x2f0>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b18:	4a2f      	ldr	r2, [pc, #188]	; (8000bd8 <HAL_GPIO_Init+0x2f0>)
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <HAL_GPIO_Init+0x2f0>)
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b42:	4a25      	ldr	r2, [pc, #148]	; (8000bd8 <HAL_GPIO_Init+0x2f0>)
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <HAL_GPIO_Init+0x2f0>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b6c:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <HAL_GPIO_Init+0x2f0>)
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <HAL_GPIO_Init+0x2f0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <HAL_GPIO_Init+0x2f0>)
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f47f aea3 	bne.w	80008f8 <HAL_GPIO_Init+0x10>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	bf00      	nop
 8000bb6:	371c      	adds	r7, #28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	48000400 	.word	0x48000400
 8000bcc:	48000800 	.word	0x48000800
 8000bd0:	48000c00 	.word	0x48000c00
 8000bd4:	48001000 	.word	0x48001000
 8000bd8:	40010400 	.word	0x40010400

08000bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	807b      	strh	r3, [r7, #2]
 8000be8:	4613      	mov	r3, r2
 8000bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bec:	787b      	ldrb	r3, [r7, #1]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bf8:	e002      	b.n	8000c00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bfa:	887a      	ldrh	r2, [r7, #2]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c1e:	887a      	ldrh	r2, [r7, #2]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4013      	ands	r3, r2
 8000c24:	041a      	lsls	r2, r3, #16
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	43d9      	mvns	r1, r3
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	400b      	ands	r3, r1
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	619a      	str	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40007000 	.word	0x40007000

08000c5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c6a:	d130      	bne.n	8000cce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c78:	d038      	beq.n	8000cec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c82:	4a1e      	ldr	r2, [pc, #120]	; (8000cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2232      	movs	r2, #50	; 0x32
 8000c90:	fb02 f303 	mul.w	r3, r2, r3
 8000c94:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c96:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9a:	0c9b      	lsrs	r3, r3, #18
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ca0:	e002      	b.n	8000ca8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cb4:	d102      	bne.n	8000cbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f2      	bne.n	8000ca2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cc8:	d110      	bne.n	8000cec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e00f      	b.n	8000cee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cda:	d007      	beq.n	8000cec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ce4:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40007000 	.word	0x40007000
 8000d00:	20000000 	.word	0x20000000
 8000d04:	431bde83 	.word	0x431bde83

08000d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e3fe      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d1a:	4ba1      	ldr	r3, [pc, #644]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f003 030c 	and.w	r3, r3, #12
 8000d22:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d24:	4b9e      	ldr	r3, [pc, #632]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 80e4 	beq.w	8000f04 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d007      	beq.n	8000d52 <HAL_RCC_OscConfig+0x4a>
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	2b0c      	cmp	r3, #12
 8000d46:	f040 808b 	bne.w	8000e60 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	f040 8087 	bne.w	8000e60 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d52:	4b93      	ldr	r3, [pc, #588]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d005      	beq.n	8000d6a <HAL_RCC_OscConfig+0x62>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e3d6      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a1a      	ldr	r2, [r3, #32]
 8000d6e:	4b8c      	ldr	r3, [pc, #560]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d004      	beq.n	8000d84 <HAL_RCC_OscConfig+0x7c>
 8000d7a:	4b89      	ldr	r3, [pc, #548]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d82:	e005      	b.n	8000d90 <HAL_RCC_OscConfig+0x88>
 8000d84:	4b86      	ldr	r3, [pc, #536]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d223      	bcs.n	8000ddc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 fd53 	bl	8001844 <RCC_SetFlashLatencyFromMSIRange>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e3b7      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000da8:	4b7d      	ldr	r3, [pc, #500]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a7c      	ldr	r2, [pc, #496]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000dae:	f043 0308 	orr.w	r3, r3, #8
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b7a      	ldr	r3, [pc, #488]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a1b      	ldr	r3, [r3, #32]
 8000dc0:	4977      	ldr	r1, [pc, #476]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dc6:	4b76      	ldr	r3, [pc, #472]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	4972      	ldr	r1, [pc, #456]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	604b      	str	r3, [r1, #4]
 8000dda:	e025      	b.n	8000e28 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ddc:	4b70      	ldr	r3, [pc, #448]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a6f      	ldr	r2, [pc, #444]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000de2:	f043 0308 	orr.w	r3, r3, #8
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	4b6d      	ldr	r3, [pc, #436]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	496a      	ldr	r1, [pc, #424]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dfa:	4b69      	ldr	r3, [pc, #420]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	4965      	ldr	r1, [pc, #404]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d109      	bne.n	8000e28 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fd13 	bl	8001844 <RCC_SetFlashLatencyFromMSIRange>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e377      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e28:	f000 fc80 	bl	800172c <HAL_RCC_GetSysClockFreq>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	4b5c      	ldr	r3, [pc, #368]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	091b      	lsrs	r3, r3, #4
 8000e34:	f003 030f 	and.w	r3, r3, #15
 8000e38:	495a      	ldr	r1, [pc, #360]	; (8000fa4 <HAL_RCC_OscConfig+0x29c>)
 8000e3a:	5ccb      	ldrb	r3, [r1, r3]
 8000e3c:	f003 031f 	and.w	r3, r3, #31
 8000e40:	fa22 f303 	lsr.w	r3, r2, r3
 8000e44:	4a58      	ldr	r2, [pc, #352]	; (8000fa8 <HAL_RCC_OscConfig+0x2a0>)
 8000e46:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e48:	4b58      	ldr	r3, [pc, #352]	; (8000fac <HAL_RCC_OscConfig+0x2a4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fbe5 	bl	800061c <HAL_InitTick>
 8000e52:	4603      	mov	r3, r0
 8000e54:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d052      	beq.n	8000f02 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	e35b      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d032      	beq.n	8000ece <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e68:	4b4d      	ldr	r3, [pc, #308]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a4c      	ldr	r2, [pc, #304]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fc22 	bl	80006bc <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fc1e 	bl	80006bc <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e344      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e8e:	4b44      	ldr	r3, [pc, #272]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f0      	beq.n	8000e7c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e9a:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a40      	ldr	r2, [pc, #256]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	493b      	ldr	r1, [pc, #236]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eb8:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	4936      	ldr	r1, [pc, #216]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	604b      	str	r3, [r1, #4]
 8000ecc:	e01a      	b.n	8000f04 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a33      	ldr	r2, [pc, #204]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000ed4:	f023 0301 	bic.w	r3, r3, #1
 8000ed8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eda:	f7ff fbef 	bl	80006bc <HAL_GetTick>
 8000ede:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ee0:	e008      	b.n	8000ef4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ee2:	f7ff fbeb 	bl	80006bc <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e311      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f0      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x1da>
 8000f00:	e000      	b.n	8000f04 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f02:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d074      	beq.n	8000ffa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	2b08      	cmp	r3, #8
 8000f14:	d005      	beq.n	8000f22 <HAL_RCC_OscConfig+0x21a>
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	2b0c      	cmp	r3, #12
 8000f1a:	d10e      	bne.n	8000f3a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d10b      	bne.n	8000f3a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d064      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x2f0>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d160      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e2ee      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f42:	d106      	bne.n	8000f52 <HAL_RCC_OscConfig+0x24a>
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	e01d      	b.n	8000f8e <HAL_RCC_OscConfig+0x286>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f5a:	d10c      	bne.n	8000f76 <HAL_RCC_OscConfig+0x26e>
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000f62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	e00b      	b.n	8000f8e <HAL_RCC_OscConfig+0x286>
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_RCC_OscConfig+0x298>)
 8000f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d01c      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f96:	f7ff fb91 	bl	80006bc <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f9c:	e011      	b.n	8000fc2 <HAL_RCC_OscConfig+0x2ba>
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	08002318 	.word	0x08002318
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fb84 	bl	80006bc <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	; 0x64
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e2aa      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fc2:	4baf      	ldr	r3, [pc, #700]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x2a8>
 8000fce:	e014      	b.n	8000ffa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fb74 	bl	80006bc <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fb70 	bl	80006bc <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e296      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fea:	4ba5      	ldr	r3, [pc, #660]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f0      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x2d0>
 8000ff6:	e000      	b.n	8000ffa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d060      	beq.n	80010c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	2b04      	cmp	r3, #4
 800100a:	d005      	beq.n	8001018 <HAL_RCC_OscConfig+0x310>
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	2b0c      	cmp	r3, #12
 8001010:	d119      	bne.n	8001046 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d116      	bne.n	8001046 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001018:	4b99      	ldr	r3, [pc, #612]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001020:	2b00      	cmp	r3, #0
 8001022:	d005      	beq.n	8001030 <HAL_RCC_OscConfig+0x328>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e273      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001030:	4b93      	ldr	r3, [pc, #588]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	061b      	lsls	r3, r3, #24
 800103e:	4990      	ldr	r1, [pc, #576]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001040:	4313      	orrs	r3, r2
 8001042:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001044:	e040      	b.n	80010c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d023      	beq.n	8001096 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800104e:	4b8c      	ldr	r3, [pc, #560]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a8b      	ldr	r2, [pc, #556]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105a:	f7ff fb2f 	bl	80006bc <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001062:	f7ff fb2b 	bl	80006bc <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e251      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001074:	4b82      	ldr	r3, [pc, #520]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f0      	beq.n	8001062 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001080:	4b7f      	ldr	r3, [pc, #508]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	061b      	lsls	r3, r3, #24
 800108e:	497c      	ldr	r1, [pc, #496]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001090:	4313      	orrs	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
 8001094:	e018      	b.n	80010c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001096:	4b7a      	ldr	r3, [pc, #488]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a79      	ldr	r2, [pc, #484]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 800109c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a2:	f7ff fb0b 	bl	80006bc <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010aa:	f7ff fb07 	bl	80006bc <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e22d      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010bc:	4b70      	ldr	r3, [pc, #448]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f0      	bne.n	80010aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d03c      	beq.n	800114e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d01c      	beq.n	8001116 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010dc:	4b68      	ldr	r3, [pc, #416]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 80010de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e2:	4a67      	ldr	r2, [pc, #412]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ec:	f7ff fae6 	bl	80006bc <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f4:	f7ff fae2 	bl	80006bc <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e208      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001106:	4b5e      	ldr	r3, [pc, #376]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0ef      	beq.n	80010f4 <HAL_RCC_OscConfig+0x3ec>
 8001114:	e01b      	b.n	800114e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001116:	4b5a      	ldr	r3, [pc, #360]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800111c:	4a58      	ldr	r2, [pc, #352]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001126:	f7ff fac9 	bl	80006bc <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800112e:	f7ff fac5 	bl	80006bc <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e1eb      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001140:	4b4f      	ldr	r3, [pc, #316]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1ef      	bne.n	800112e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 80a6 	beq.w	80012a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001160:	4b47      	ldr	r3, [pc, #284]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10d      	bne.n	8001188 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116c:	4b44      	ldr	r3, [pc, #272]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 800116e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001170:	4a43      	ldr	r2, [pc, #268]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001176:	6593      	str	r3, [r2, #88]	; 0x58
 8001178:	4b41      	ldr	r3, [pc, #260]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 800117a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001184:	2301      	movs	r3, #1
 8001186:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001188:	4b3e      	ldr	r3, [pc, #248]	; (8001284 <HAL_RCC_OscConfig+0x57c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001190:	2b00      	cmp	r3, #0
 8001192:	d118      	bne.n	80011c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001194:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <HAL_RCC_OscConfig+0x57c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a3a      	ldr	r2, [pc, #232]	; (8001284 <HAL_RCC_OscConfig+0x57c>)
 800119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011a0:	f7ff fa8c 	bl	80006bc <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011a8:	f7ff fa88 	bl	80006bc <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e1ae      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ba:	4b32      	ldr	r3, [pc, #200]	; (8001284 <HAL_RCC_OscConfig+0x57c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d108      	bne.n	80011e0 <HAL_RCC_OscConfig+0x4d8>
 80011ce:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 80011d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d4:	4a2a      	ldr	r2, [pc, #168]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011de:	e024      	b.n	800122a <HAL_RCC_OscConfig+0x522>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	d110      	bne.n	800120a <HAL_RCC_OscConfig+0x502>
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 80011ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ee:	4a24      	ldr	r2, [pc, #144]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 80011fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fe:	4a20      	ldr	r2, [pc, #128]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001208:	e00f      	b.n	800122a <HAL_RCC_OscConfig+0x522>
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 800120c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001212:	f023 0301 	bic.w	r3, r3, #1
 8001216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 800121c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001220:	4a17      	ldr	r2, [pc, #92]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001222:	f023 0304 	bic.w	r3, r3, #4
 8001226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d016      	beq.n	8001260 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001232:	f7ff fa43 	bl	80006bc <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001238:	e00a      	b.n	8001250 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123a:	f7ff fa3f 	bl	80006bc <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	f241 3288 	movw	r2, #5000	; 0x1388
 8001248:	4293      	cmp	r3, r2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e163      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_RCC_OscConfig+0x578>)
 8001252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0ed      	beq.n	800123a <HAL_RCC_OscConfig+0x532>
 800125e:	e01a      	b.n	8001296 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001260:	f7ff fa2c 	bl	80006bc <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001266:	e00f      	b.n	8001288 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001268:	f7ff fa28 	bl	80006bc <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	f241 3288 	movw	r2, #5000	; 0x1388
 8001276:	4293      	cmp	r3, r2
 8001278:	d906      	bls.n	8001288 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e14c      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001288:	4ba5      	ldr	r3, [pc, #660]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 800128a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1e8      	bne.n	8001268 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001296:	7ffb      	ldrb	r3, [r7, #31]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d105      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800129c:	4ba0      	ldr	r3, [pc, #640]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 800129e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a0:	4a9f      	ldr	r2, [pc, #636]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 80012a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0320 	and.w	r3, r3, #32
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d03c      	beq.n	800132e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d01c      	beq.n	80012f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012bc:	4b98      	ldr	r3, [pc, #608]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 80012be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012c2:	4a97      	ldr	r2, [pc, #604]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012cc:	f7ff f9f6 	bl	80006bc <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012d4:	f7ff f9f2 	bl	80006bc <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e118      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012e6:	4b8e      	ldr	r3, [pc, #568]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 80012e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0ef      	beq.n	80012d4 <HAL_RCC_OscConfig+0x5cc>
 80012f4:	e01b      	b.n	800132e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012f6:	4b8a      	ldr	r3, [pc, #552]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 80012f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012fc:	4a88      	ldr	r2, [pc, #544]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001306:	f7ff f9d9 	bl	80006bc <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800130e:	f7ff f9d5 	bl	80006bc <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e0fb      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001320:	4b7f      	ldr	r3, [pc, #508]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 8001322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ef      	bne.n	800130e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 80ef 	beq.w	8001516 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133c:	2b02      	cmp	r3, #2
 800133e:	f040 80c5 	bne.w	80014cc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001342:	4b77      	ldr	r3, [pc, #476]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f003 0203 	and.w	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	429a      	cmp	r2, r3
 8001354:	d12c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	3b01      	subs	r3, #1
 8001362:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001364:	429a      	cmp	r2, r3
 8001366:	d123      	bne.n	80013b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001372:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001374:	429a      	cmp	r2, r3
 8001376:	d11b      	bne.n	80013b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001382:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001384:	429a      	cmp	r2, r3
 8001386:	d113      	bne.n	80013b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001392:	085b      	lsrs	r3, r3, #1
 8001394:	3b01      	subs	r3, #1
 8001396:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001398:	429a      	cmp	r2, r3
 800139a:	d109      	bne.n	80013b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	085b      	lsrs	r3, r3, #1
 80013a8:	3b01      	subs	r3, #1
 80013aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d067      	beq.n	8001480 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	d062      	beq.n	800147c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013b6:	4b5a      	ldr	r3, [pc, #360]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0a8      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013c6:	4b56      	ldr	r3, [pc, #344]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a55      	ldr	r2, [pc, #340]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 80013cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013d2:	f7ff f973 	bl	80006bc <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013da:	f7ff f96f 	bl	80006bc <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e095      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ec:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f0      	bne.n	80013da <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013f8:	4b49      	ldr	r3, [pc, #292]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	4b49      	ldr	r3, [pc, #292]	; (8001524 <HAL_RCC_OscConfig+0x81c>)
 80013fe:	4013      	ands	r3, r2
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001408:	3a01      	subs	r2, #1
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	4311      	orrs	r1, r2
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001412:	0212      	lsls	r2, r2, #8
 8001414:	4311      	orrs	r1, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800141a:	0852      	lsrs	r2, r2, #1
 800141c:	3a01      	subs	r2, #1
 800141e:	0552      	lsls	r2, r2, #21
 8001420:	4311      	orrs	r1, r2
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001426:	0852      	lsrs	r2, r2, #1
 8001428:	3a01      	subs	r2, #1
 800142a:	0652      	lsls	r2, r2, #25
 800142c:	4311      	orrs	r1, r2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001432:	06d2      	lsls	r2, r2, #27
 8001434:	430a      	orrs	r2, r1
 8001436:	493a      	ldr	r1, [pc, #232]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 8001438:	4313      	orrs	r3, r2
 800143a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800143c:	4b38      	ldr	r3, [pc, #224]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a37      	ldr	r2, [pc, #220]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 8001442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001446:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001448:	4b35      	ldr	r3, [pc, #212]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	4a34      	ldr	r2, [pc, #208]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 800144e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001452:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001454:	f7ff f932 	bl	80006bc <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff f92e 	bl	80006bc <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e054      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146e:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800147a:	e04c      	b.n	8001516 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e04b      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001480:	4b27      	ldr	r3, [pc, #156]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d144      	bne.n	8001516 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a23      	ldr	r2, [pc, #140]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 8001492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001496:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	4a20      	ldr	r2, [pc, #128]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 800149e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014a4:	f7ff f90a 	bl	80006bc <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff f906 	bl	80006bc <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e02c      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x7a4>
 80014ca:	e024      	b.n	8001516 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2b0c      	cmp	r3, #12
 80014d0:	d01f      	beq.n	8001512 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 80014d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014de:	f7ff f8ed 	bl	80006bc <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e6:	f7ff f8e9 	bl	80006bc <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e00f      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	4905      	ldr	r1, [pc, #20]	; (8001520 <HAL_RCC_OscConfig+0x818>)
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <HAL_RCC_OscConfig+0x820>)
 800150c:	4013      	ands	r3, r2
 800150e:	60cb      	str	r3, [r1, #12]
 8001510:	e001      	b.n	8001516 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	019d808c 	.word	0x019d808c
 8001528:	feeefffc 	.word	0xfeeefffc

0800152c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0e7      	b.n	8001710 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001540:	4b75      	ldr	r3, [pc, #468]	; (8001718 <HAL_RCC_ClockConfig+0x1ec>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d910      	bls.n	8001570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154e:	4b72      	ldr	r3, [pc, #456]	; (8001718 <HAL_RCC_ClockConfig+0x1ec>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 0207 	bic.w	r2, r3, #7
 8001556:	4970      	ldr	r1, [pc, #448]	; (8001718 <HAL_RCC_ClockConfig+0x1ec>)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155e:	4b6e      	ldr	r3, [pc, #440]	; (8001718 <HAL_RCC_ClockConfig+0x1ec>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d001      	beq.n	8001570 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0cf      	b.n	8001710 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d010      	beq.n	800159e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	4b66      	ldr	r3, [pc, #408]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001588:	429a      	cmp	r2, r3
 800158a:	d908      	bls.n	800159e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800158c:	4b63      	ldr	r3, [pc, #396]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4960      	ldr	r1, [pc, #384]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 800159a:	4313      	orrs	r3, r2
 800159c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d04c      	beq.n	8001644 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b2:	4b5a      	ldr	r3, [pc, #360]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d121      	bne.n	8001602 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0a6      	b.n	8001710 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ca:	4b54      	ldr	r3, [pc, #336]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d115      	bne.n	8001602 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e09a      	b.n	8001710 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015e2:	4b4e      	ldr	r3, [pc, #312]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e08e      	b.n	8001710 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f2:	4b4a      	ldr	r3, [pc, #296]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e086      	b.n	8001710 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001602:	4b46      	ldr	r3, [pc, #280]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f023 0203 	bic.w	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4943      	ldr	r1, [pc, #268]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 8001610:	4313      	orrs	r3, r2
 8001612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001614:	f7ff f852 	bl	80006bc <HAL_GetTick>
 8001618:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161a:	e00a      	b.n	8001632 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800161c:	f7ff f84e 	bl	80006bc <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	; 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e06e      	b.n	8001710 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001632:	4b3a      	ldr	r3, [pc, #232]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 020c 	and.w	r2, r3, #12
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	429a      	cmp	r2, r3
 8001642:	d1eb      	bne.n	800161c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d010      	beq.n	8001672 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800165c:	429a      	cmp	r2, r3
 800165e:	d208      	bcs.n	8001672 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001660:	4b2e      	ldr	r3, [pc, #184]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	492b      	ldr	r1, [pc, #172]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 800166e:	4313      	orrs	r3, r2
 8001670:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001672:	4b29      	ldr	r3, [pc, #164]	; (8001718 <HAL_RCC_ClockConfig+0x1ec>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d210      	bcs.n	80016a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <HAL_RCC_ClockConfig+0x1ec>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 0207 	bic.w	r2, r3, #7
 8001688:	4923      	ldr	r1, [pc, #140]	; (8001718 <HAL_RCC_ClockConfig+0x1ec>)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	4313      	orrs	r3, r2
 800168e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001690:	4b21      	ldr	r3, [pc, #132]	; (8001718 <HAL_RCC_ClockConfig+0x1ec>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d001      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e036      	b.n	8001710 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d008      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	4918      	ldr	r1, [pc, #96]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4910      	ldr	r1, [pc, #64]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016e0:	f000 f824 	bl	800172c <HAL_RCC_GetSysClockFreq>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_RCC_ClockConfig+0x1f0>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	490b      	ldr	r1, [pc, #44]	; (8001720 <HAL_RCC_ClockConfig+0x1f4>)
 80016f2:	5ccb      	ldrb	r3, [r1, r3]
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
 80016fc:	4a09      	ldr	r2, [pc, #36]	; (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 80016fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_ClockConfig+0x1fc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe ff89 	bl	800061c <HAL_InitTick>
 800170a:	4603      	mov	r3, r0
 800170c:	72fb      	strb	r3, [r7, #11]

  return status;
 800170e:	7afb      	ldrb	r3, [r7, #11]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40022000 	.word	0x40022000
 800171c:	40021000 	.word	0x40021000
 8001720:	08002318 	.word	0x08002318
 8001724:	20000000 	.word	0x20000000
 8001728:	20000004 	.word	0x20000004

0800172c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800173a:	4b3e      	ldr	r3, [pc, #248]	; (8001834 <HAL_RCC_GetSysClockFreq+0x108>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001744:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_GetSysClockFreq+0x108>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x34>
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d121      	bne.n	800179e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d11e      	bne.n	800179e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001760:	4b34      	ldr	r3, [pc, #208]	; (8001834 <HAL_RCC_GetSysClockFreq+0x108>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	2b00      	cmp	r3, #0
 800176a:	d107      	bne.n	800177c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800176c:	4b31      	ldr	r3, [pc, #196]	; (8001834 <HAL_RCC_GetSysClockFreq+0x108>)
 800176e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e005      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800177c:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <HAL_RCC_GetSysClockFreq+0x108>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001788:	4a2b      	ldr	r2, [pc, #172]	; (8001838 <HAL_RCC_GetSysClockFreq+0x10c>)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10d      	bne.n	80017b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d102      	bne.n	80017aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <HAL_RCC_GetSysClockFreq+0x110>)
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	e004      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017b0:	4b23      	ldr	r3, [pc, #140]	; (8001840 <HAL_RCC_GetSysClockFreq+0x114>)
 80017b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d134      	bne.n	8001824 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <HAL_RCC_GetSysClockFreq+0x108>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d003      	beq.n	80017d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d003      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0xac>
 80017d0:	e005      	b.n	80017de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_RCC_GetSysClockFreq+0x110>)
 80017d4:	617b      	str	r3, [r7, #20]
      break;
 80017d6:	e005      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_RCC_GetSysClockFreq+0x114>)
 80017da:	617b      	str	r3, [r7, #20]
      break;
 80017dc:	e002      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	617b      	str	r3, [r7, #20]
      break;
 80017e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_RCC_GetSysClockFreq+0x108>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	3301      	adds	r3, #1
 80017f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_RCC_GetSysClockFreq+0x108>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	0a1b      	lsrs	r3, r3, #8
 80017f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	fb02 f203 	mul.w	r2, r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	fbb2 f3f3 	udiv	r3, r2, r3
 8001808:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_RCC_GetSysClockFreq+0x108>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	0e5b      	lsrs	r3, r3, #25
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	3301      	adds	r3, #1
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001824:	69bb      	ldr	r3, [r7, #24]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	08002328 	.word	0x08002328
 800183c:	00f42400 	.word	0x00f42400
 8001840:	016e3600 	.word	0x016e3600

08001844 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800185c:	f7ff f9f0 	bl	8000c40 <HAL_PWREx_GetVoltageRange>
 8001860:	6178      	str	r0, [r7, #20]
 8001862:	e014      	b.n	800188e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	4a24      	ldr	r2, [pc, #144]	; (80018fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800186a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186e:	6593      	str	r3, [r2, #88]	; 0x58
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800187c:	f7ff f9e0 	bl	8000c40 <HAL_PWREx_GetVoltageRange>
 8001880:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001882:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001894:	d10b      	bne.n	80018ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b80      	cmp	r3, #128	; 0x80
 800189a:	d919      	bls.n	80018d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2ba0      	cmp	r3, #160	; 0xa0
 80018a0:	d902      	bls.n	80018a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018a2:	2302      	movs	r3, #2
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	e013      	b.n	80018d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018a8:	2301      	movs	r3, #1
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	e010      	b.n	80018d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b80      	cmp	r3, #128	; 0x80
 80018b2:	d902      	bls.n	80018ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018b4:	2303      	movs	r3, #3
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	e00a      	b.n	80018d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b80      	cmp	r3, #128	; 0x80
 80018be:	d102      	bne.n	80018c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018c0:	2302      	movs	r3, #2
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	e004      	b.n	80018d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b70      	cmp	r3, #112	; 0x70
 80018ca:	d101      	bne.n	80018d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018cc:	2301      	movs	r3, #1
 80018ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 0207 	bic.w	r2, r3, #7
 80018d8:	4909      	ldr	r1, [pc, #36]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d001      	beq.n	80018f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40021000 	.word	0x40021000
 8001900:	40022000 	.word	0x40022000

08001904 <__errno>:
 8001904:	4b01      	ldr	r3, [pc, #4]	; (800190c <__errno+0x8>)
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	2000000c 	.word	0x2000000c

08001910 <__libc_init_array>:
 8001910:	b570      	push	{r4, r5, r6, lr}
 8001912:	4d0d      	ldr	r5, [pc, #52]	; (8001948 <__libc_init_array+0x38>)
 8001914:	4c0d      	ldr	r4, [pc, #52]	; (800194c <__libc_init_array+0x3c>)
 8001916:	1b64      	subs	r4, r4, r5
 8001918:	10a4      	asrs	r4, r4, #2
 800191a:	2600      	movs	r6, #0
 800191c:	42a6      	cmp	r6, r4
 800191e:	d109      	bne.n	8001934 <__libc_init_array+0x24>
 8001920:	4d0b      	ldr	r5, [pc, #44]	; (8001950 <__libc_init_array+0x40>)
 8001922:	4c0c      	ldr	r4, [pc, #48]	; (8001954 <__libc_init_array+0x44>)
 8001924:	f000 fce6 	bl	80022f4 <_init>
 8001928:	1b64      	subs	r4, r4, r5
 800192a:	10a4      	asrs	r4, r4, #2
 800192c:	2600      	movs	r6, #0
 800192e:	42a6      	cmp	r6, r4
 8001930:	d105      	bne.n	800193e <__libc_init_array+0x2e>
 8001932:	bd70      	pop	{r4, r5, r6, pc}
 8001934:	f855 3b04 	ldr.w	r3, [r5], #4
 8001938:	4798      	blx	r3
 800193a:	3601      	adds	r6, #1
 800193c:	e7ee      	b.n	800191c <__libc_init_array+0xc>
 800193e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001942:	4798      	blx	r3
 8001944:	3601      	adds	r6, #1
 8001946:	e7f2      	b.n	800192e <__libc_init_array+0x1e>
 8001948:	080023bc 	.word	0x080023bc
 800194c:	080023bc 	.word	0x080023bc
 8001950:	080023bc 	.word	0x080023bc
 8001954:	080023c0 	.word	0x080023c0

08001958 <memset>:
 8001958:	4402      	add	r2, r0
 800195a:	4603      	mov	r3, r0
 800195c:	4293      	cmp	r3, r2
 800195e:	d100      	bne.n	8001962 <memset+0xa>
 8001960:	4770      	bx	lr
 8001962:	f803 1b01 	strb.w	r1, [r3], #1
 8001966:	e7f9      	b.n	800195c <memset+0x4>

08001968 <_puts_r>:
 8001968:	b570      	push	{r4, r5, r6, lr}
 800196a:	460e      	mov	r6, r1
 800196c:	4605      	mov	r5, r0
 800196e:	b118      	cbz	r0, 8001978 <_puts_r+0x10>
 8001970:	6983      	ldr	r3, [r0, #24]
 8001972:	b90b      	cbnz	r3, 8001978 <_puts_r+0x10>
 8001974:	f000 fa48 	bl	8001e08 <__sinit>
 8001978:	69ab      	ldr	r3, [r5, #24]
 800197a:	68ac      	ldr	r4, [r5, #8]
 800197c:	b913      	cbnz	r3, 8001984 <_puts_r+0x1c>
 800197e:	4628      	mov	r0, r5
 8001980:	f000 fa42 	bl	8001e08 <__sinit>
 8001984:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <_puts_r+0xd0>)
 8001986:	429c      	cmp	r4, r3
 8001988:	d120      	bne.n	80019cc <_puts_r+0x64>
 800198a:	686c      	ldr	r4, [r5, #4]
 800198c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800198e:	07db      	lsls	r3, r3, #31
 8001990:	d405      	bmi.n	800199e <_puts_r+0x36>
 8001992:	89a3      	ldrh	r3, [r4, #12]
 8001994:	0598      	lsls	r0, r3, #22
 8001996:	d402      	bmi.n	800199e <_puts_r+0x36>
 8001998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800199a:	f000 fad3 	bl	8001f44 <__retarget_lock_acquire_recursive>
 800199e:	89a3      	ldrh	r3, [r4, #12]
 80019a0:	0719      	lsls	r1, r3, #28
 80019a2:	d51d      	bpl.n	80019e0 <_puts_r+0x78>
 80019a4:	6923      	ldr	r3, [r4, #16]
 80019a6:	b1db      	cbz	r3, 80019e0 <_puts_r+0x78>
 80019a8:	3e01      	subs	r6, #1
 80019aa:	68a3      	ldr	r3, [r4, #8]
 80019ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80019b0:	3b01      	subs	r3, #1
 80019b2:	60a3      	str	r3, [r4, #8]
 80019b4:	bb39      	cbnz	r1, 8001a06 <_puts_r+0x9e>
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da38      	bge.n	8001a2c <_puts_r+0xc4>
 80019ba:	4622      	mov	r2, r4
 80019bc:	210a      	movs	r1, #10
 80019be:	4628      	mov	r0, r5
 80019c0:	f000 f848 	bl	8001a54 <__swbuf_r>
 80019c4:	3001      	adds	r0, #1
 80019c6:	d011      	beq.n	80019ec <_puts_r+0x84>
 80019c8:	250a      	movs	r5, #10
 80019ca:	e011      	b.n	80019f0 <_puts_r+0x88>
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <_puts_r+0xd4>)
 80019ce:	429c      	cmp	r4, r3
 80019d0:	d101      	bne.n	80019d6 <_puts_r+0x6e>
 80019d2:	68ac      	ldr	r4, [r5, #8]
 80019d4:	e7da      	b.n	800198c <_puts_r+0x24>
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <_puts_r+0xd8>)
 80019d8:	429c      	cmp	r4, r3
 80019da:	bf08      	it	eq
 80019dc:	68ec      	ldreq	r4, [r5, #12]
 80019de:	e7d5      	b.n	800198c <_puts_r+0x24>
 80019e0:	4621      	mov	r1, r4
 80019e2:	4628      	mov	r0, r5
 80019e4:	f000 f888 	bl	8001af8 <__swsetup_r>
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d0dd      	beq.n	80019a8 <_puts_r+0x40>
 80019ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80019f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019f2:	07da      	lsls	r2, r3, #31
 80019f4:	d405      	bmi.n	8001a02 <_puts_r+0x9a>
 80019f6:	89a3      	ldrh	r3, [r4, #12]
 80019f8:	059b      	lsls	r3, r3, #22
 80019fa:	d402      	bmi.n	8001a02 <_puts_r+0x9a>
 80019fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019fe:	f000 faa2 	bl	8001f46 <__retarget_lock_release_recursive>
 8001a02:	4628      	mov	r0, r5
 8001a04:	bd70      	pop	{r4, r5, r6, pc}
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	da04      	bge.n	8001a14 <_puts_r+0xac>
 8001a0a:	69a2      	ldr	r2, [r4, #24]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	dc06      	bgt.n	8001a1e <_puts_r+0xb6>
 8001a10:	290a      	cmp	r1, #10
 8001a12:	d004      	beq.n	8001a1e <_puts_r+0xb6>
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	6022      	str	r2, [r4, #0]
 8001a1a:	7019      	strb	r1, [r3, #0]
 8001a1c:	e7c5      	b.n	80019aa <_puts_r+0x42>
 8001a1e:	4622      	mov	r2, r4
 8001a20:	4628      	mov	r0, r5
 8001a22:	f000 f817 	bl	8001a54 <__swbuf_r>
 8001a26:	3001      	adds	r0, #1
 8001a28:	d1bf      	bne.n	80019aa <_puts_r+0x42>
 8001a2a:	e7df      	b.n	80019ec <_puts_r+0x84>
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	250a      	movs	r5, #10
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	6022      	str	r2, [r4, #0]
 8001a34:	701d      	strb	r5, [r3, #0]
 8001a36:	e7db      	b.n	80019f0 <_puts_r+0x88>
 8001a38:	0800237c 	.word	0x0800237c
 8001a3c:	0800239c 	.word	0x0800239c
 8001a40:	0800235c 	.word	0x0800235c

08001a44 <puts>:
 8001a44:	4b02      	ldr	r3, [pc, #8]	; (8001a50 <puts+0xc>)
 8001a46:	4601      	mov	r1, r0
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	f7ff bf8d 	b.w	8001968 <_puts_r>
 8001a4e:	bf00      	nop
 8001a50:	2000000c 	.word	0x2000000c

08001a54 <__swbuf_r>:
 8001a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a56:	460e      	mov	r6, r1
 8001a58:	4614      	mov	r4, r2
 8001a5a:	4605      	mov	r5, r0
 8001a5c:	b118      	cbz	r0, 8001a66 <__swbuf_r+0x12>
 8001a5e:	6983      	ldr	r3, [r0, #24]
 8001a60:	b90b      	cbnz	r3, 8001a66 <__swbuf_r+0x12>
 8001a62:	f000 f9d1 	bl	8001e08 <__sinit>
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <__swbuf_r+0x98>)
 8001a68:	429c      	cmp	r4, r3
 8001a6a:	d12b      	bne.n	8001ac4 <__swbuf_r+0x70>
 8001a6c:	686c      	ldr	r4, [r5, #4]
 8001a6e:	69a3      	ldr	r3, [r4, #24]
 8001a70:	60a3      	str	r3, [r4, #8]
 8001a72:	89a3      	ldrh	r3, [r4, #12]
 8001a74:	071a      	lsls	r2, r3, #28
 8001a76:	d52f      	bpl.n	8001ad8 <__swbuf_r+0x84>
 8001a78:	6923      	ldr	r3, [r4, #16]
 8001a7a:	b36b      	cbz	r3, 8001ad8 <__swbuf_r+0x84>
 8001a7c:	6923      	ldr	r3, [r4, #16]
 8001a7e:	6820      	ldr	r0, [r4, #0]
 8001a80:	1ac0      	subs	r0, r0, r3
 8001a82:	6963      	ldr	r3, [r4, #20]
 8001a84:	b2f6      	uxtb	r6, r6
 8001a86:	4283      	cmp	r3, r0
 8001a88:	4637      	mov	r7, r6
 8001a8a:	dc04      	bgt.n	8001a96 <__swbuf_r+0x42>
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	4628      	mov	r0, r5
 8001a90:	f000 f926 	bl	8001ce0 <_fflush_r>
 8001a94:	bb30      	cbnz	r0, 8001ae4 <__swbuf_r+0x90>
 8001a96:	68a3      	ldr	r3, [r4, #8]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	60a3      	str	r3, [r4, #8]
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	6022      	str	r2, [r4, #0]
 8001aa2:	701e      	strb	r6, [r3, #0]
 8001aa4:	6963      	ldr	r3, [r4, #20]
 8001aa6:	3001      	adds	r0, #1
 8001aa8:	4283      	cmp	r3, r0
 8001aaa:	d004      	beq.n	8001ab6 <__swbuf_r+0x62>
 8001aac:	89a3      	ldrh	r3, [r4, #12]
 8001aae:	07db      	lsls	r3, r3, #31
 8001ab0:	d506      	bpl.n	8001ac0 <__swbuf_r+0x6c>
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	d104      	bne.n	8001ac0 <__swbuf_r+0x6c>
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	4628      	mov	r0, r5
 8001aba:	f000 f911 	bl	8001ce0 <_fflush_r>
 8001abe:	b988      	cbnz	r0, 8001ae4 <__swbuf_r+0x90>
 8001ac0:	4638      	mov	r0, r7
 8001ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <__swbuf_r+0x9c>)
 8001ac6:	429c      	cmp	r4, r3
 8001ac8:	d101      	bne.n	8001ace <__swbuf_r+0x7a>
 8001aca:	68ac      	ldr	r4, [r5, #8]
 8001acc:	e7cf      	b.n	8001a6e <__swbuf_r+0x1a>
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <__swbuf_r+0xa0>)
 8001ad0:	429c      	cmp	r4, r3
 8001ad2:	bf08      	it	eq
 8001ad4:	68ec      	ldreq	r4, [r5, #12]
 8001ad6:	e7ca      	b.n	8001a6e <__swbuf_r+0x1a>
 8001ad8:	4621      	mov	r1, r4
 8001ada:	4628      	mov	r0, r5
 8001adc:	f000 f80c 	bl	8001af8 <__swsetup_r>
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	d0cb      	beq.n	8001a7c <__swbuf_r+0x28>
 8001ae4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001ae8:	e7ea      	b.n	8001ac0 <__swbuf_r+0x6c>
 8001aea:	bf00      	nop
 8001aec:	0800237c 	.word	0x0800237c
 8001af0:	0800239c 	.word	0x0800239c
 8001af4:	0800235c 	.word	0x0800235c

08001af8 <__swsetup_r>:
 8001af8:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <__swsetup_r+0xcc>)
 8001afa:	b570      	push	{r4, r5, r6, lr}
 8001afc:	681d      	ldr	r5, [r3, #0]
 8001afe:	4606      	mov	r6, r0
 8001b00:	460c      	mov	r4, r1
 8001b02:	b125      	cbz	r5, 8001b0e <__swsetup_r+0x16>
 8001b04:	69ab      	ldr	r3, [r5, #24]
 8001b06:	b913      	cbnz	r3, 8001b0e <__swsetup_r+0x16>
 8001b08:	4628      	mov	r0, r5
 8001b0a:	f000 f97d 	bl	8001e08 <__sinit>
 8001b0e:	4b2e      	ldr	r3, [pc, #184]	; (8001bc8 <__swsetup_r+0xd0>)
 8001b10:	429c      	cmp	r4, r3
 8001b12:	d10f      	bne.n	8001b34 <__swsetup_r+0x3c>
 8001b14:	686c      	ldr	r4, [r5, #4]
 8001b16:	89a3      	ldrh	r3, [r4, #12]
 8001b18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b1c:	0719      	lsls	r1, r3, #28
 8001b1e:	d42c      	bmi.n	8001b7a <__swsetup_r+0x82>
 8001b20:	06dd      	lsls	r5, r3, #27
 8001b22:	d411      	bmi.n	8001b48 <__swsetup_r+0x50>
 8001b24:	2309      	movs	r3, #9
 8001b26:	6033      	str	r3, [r6, #0]
 8001b28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001b2c:	81a3      	strh	r3, [r4, #12]
 8001b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b32:	e03e      	b.n	8001bb2 <__swsetup_r+0xba>
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <__swsetup_r+0xd4>)
 8001b36:	429c      	cmp	r4, r3
 8001b38:	d101      	bne.n	8001b3e <__swsetup_r+0x46>
 8001b3a:	68ac      	ldr	r4, [r5, #8]
 8001b3c:	e7eb      	b.n	8001b16 <__swsetup_r+0x1e>
 8001b3e:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <__swsetup_r+0xd8>)
 8001b40:	429c      	cmp	r4, r3
 8001b42:	bf08      	it	eq
 8001b44:	68ec      	ldreq	r4, [r5, #12]
 8001b46:	e7e6      	b.n	8001b16 <__swsetup_r+0x1e>
 8001b48:	0758      	lsls	r0, r3, #29
 8001b4a:	d512      	bpl.n	8001b72 <__swsetup_r+0x7a>
 8001b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b4e:	b141      	cbz	r1, 8001b62 <__swsetup_r+0x6a>
 8001b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b54:	4299      	cmp	r1, r3
 8001b56:	d002      	beq.n	8001b5e <__swsetup_r+0x66>
 8001b58:	4630      	mov	r0, r6
 8001b5a:	f000 fa59 	bl	8002010 <_free_r>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	6363      	str	r3, [r4, #52]	; 0x34
 8001b62:	89a3      	ldrh	r3, [r4, #12]
 8001b64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b68:	81a3      	strh	r3, [r4, #12]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	6063      	str	r3, [r4, #4]
 8001b6e:	6923      	ldr	r3, [r4, #16]
 8001b70:	6023      	str	r3, [r4, #0]
 8001b72:	89a3      	ldrh	r3, [r4, #12]
 8001b74:	f043 0308 	orr.w	r3, r3, #8
 8001b78:	81a3      	strh	r3, [r4, #12]
 8001b7a:	6923      	ldr	r3, [r4, #16]
 8001b7c:	b94b      	cbnz	r3, 8001b92 <__swsetup_r+0x9a>
 8001b7e:	89a3      	ldrh	r3, [r4, #12]
 8001b80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b88:	d003      	beq.n	8001b92 <__swsetup_r+0x9a>
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	4630      	mov	r0, r6
 8001b8e:	f000 f9ff 	bl	8001f90 <__smakebuf_r>
 8001b92:	89a0      	ldrh	r0, [r4, #12]
 8001b94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b98:	f010 0301 	ands.w	r3, r0, #1
 8001b9c:	d00a      	beq.n	8001bb4 <__swsetup_r+0xbc>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60a3      	str	r3, [r4, #8]
 8001ba2:	6963      	ldr	r3, [r4, #20]
 8001ba4:	425b      	negs	r3, r3
 8001ba6:	61a3      	str	r3, [r4, #24]
 8001ba8:	6923      	ldr	r3, [r4, #16]
 8001baa:	b943      	cbnz	r3, 8001bbe <__swsetup_r+0xc6>
 8001bac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001bb0:	d1ba      	bne.n	8001b28 <__swsetup_r+0x30>
 8001bb2:	bd70      	pop	{r4, r5, r6, pc}
 8001bb4:	0781      	lsls	r1, r0, #30
 8001bb6:	bf58      	it	pl
 8001bb8:	6963      	ldrpl	r3, [r4, #20]
 8001bba:	60a3      	str	r3, [r4, #8]
 8001bbc:	e7f4      	b.n	8001ba8 <__swsetup_r+0xb0>
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	e7f7      	b.n	8001bb2 <__swsetup_r+0xba>
 8001bc2:	bf00      	nop
 8001bc4:	2000000c 	.word	0x2000000c
 8001bc8:	0800237c 	.word	0x0800237c
 8001bcc:	0800239c 	.word	0x0800239c
 8001bd0:	0800235c 	.word	0x0800235c

08001bd4 <__sflush_r>:
 8001bd4:	898a      	ldrh	r2, [r1, #12]
 8001bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bda:	4605      	mov	r5, r0
 8001bdc:	0710      	lsls	r0, r2, #28
 8001bde:	460c      	mov	r4, r1
 8001be0:	d458      	bmi.n	8001c94 <__sflush_r+0xc0>
 8001be2:	684b      	ldr	r3, [r1, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	dc05      	bgt.n	8001bf4 <__sflush_r+0x20>
 8001be8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	dc02      	bgt.n	8001bf4 <__sflush_r+0x20>
 8001bee:	2000      	movs	r0, #0
 8001bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bf6:	2e00      	cmp	r6, #0
 8001bf8:	d0f9      	beq.n	8001bee <__sflush_r+0x1a>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c00:	682f      	ldr	r7, [r5, #0]
 8001c02:	602b      	str	r3, [r5, #0]
 8001c04:	d032      	beq.n	8001c6c <__sflush_r+0x98>
 8001c06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c08:	89a3      	ldrh	r3, [r4, #12]
 8001c0a:	075a      	lsls	r2, r3, #29
 8001c0c:	d505      	bpl.n	8001c1a <__sflush_r+0x46>
 8001c0e:	6863      	ldr	r3, [r4, #4]
 8001c10:	1ac0      	subs	r0, r0, r3
 8001c12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c14:	b10b      	cbz	r3, 8001c1a <__sflush_r+0x46>
 8001c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c18:	1ac0      	subs	r0, r0, r3
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c20:	6a21      	ldr	r1, [r4, #32]
 8001c22:	4628      	mov	r0, r5
 8001c24:	47b0      	blx	r6
 8001c26:	1c43      	adds	r3, r0, #1
 8001c28:	89a3      	ldrh	r3, [r4, #12]
 8001c2a:	d106      	bne.n	8001c3a <__sflush_r+0x66>
 8001c2c:	6829      	ldr	r1, [r5, #0]
 8001c2e:	291d      	cmp	r1, #29
 8001c30:	d82c      	bhi.n	8001c8c <__sflush_r+0xb8>
 8001c32:	4a2a      	ldr	r2, [pc, #168]	; (8001cdc <__sflush_r+0x108>)
 8001c34:	40ca      	lsrs	r2, r1
 8001c36:	07d6      	lsls	r6, r2, #31
 8001c38:	d528      	bpl.n	8001c8c <__sflush_r+0xb8>
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	6062      	str	r2, [r4, #4]
 8001c3e:	04d9      	lsls	r1, r3, #19
 8001c40:	6922      	ldr	r2, [r4, #16]
 8001c42:	6022      	str	r2, [r4, #0]
 8001c44:	d504      	bpl.n	8001c50 <__sflush_r+0x7c>
 8001c46:	1c42      	adds	r2, r0, #1
 8001c48:	d101      	bne.n	8001c4e <__sflush_r+0x7a>
 8001c4a:	682b      	ldr	r3, [r5, #0]
 8001c4c:	b903      	cbnz	r3, 8001c50 <__sflush_r+0x7c>
 8001c4e:	6560      	str	r0, [r4, #84]	; 0x54
 8001c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c52:	602f      	str	r7, [r5, #0]
 8001c54:	2900      	cmp	r1, #0
 8001c56:	d0ca      	beq.n	8001bee <__sflush_r+0x1a>
 8001c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c5c:	4299      	cmp	r1, r3
 8001c5e:	d002      	beq.n	8001c66 <__sflush_r+0x92>
 8001c60:	4628      	mov	r0, r5
 8001c62:	f000 f9d5 	bl	8002010 <_free_r>
 8001c66:	2000      	movs	r0, #0
 8001c68:	6360      	str	r0, [r4, #52]	; 0x34
 8001c6a:	e7c1      	b.n	8001bf0 <__sflush_r+0x1c>
 8001c6c:	6a21      	ldr	r1, [r4, #32]
 8001c6e:	2301      	movs	r3, #1
 8001c70:	4628      	mov	r0, r5
 8001c72:	47b0      	blx	r6
 8001c74:	1c41      	adds	r1, r0, #1
 8001c76:	d1c7      	bne.n	8001c08 <__sflush_r+0x34>
 8001c78:	682b      	ldr	r3, [r5, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0c4      	beq.n	8001c08 <__sflush_r+0x34>
 8001c7e:	2b1d      	cmp	r3, #29
 8001c80:	d001      	beq.n	8001c86 <__sflush_r+0xb2>
 8001c82:	2b16      	cmp	r3, #22
 8001c84:	d101      	bne.n	8001c8a <__sflush_r+0xb6>
 8001c86:	602f      	str	r7, [r5, #0]
 8001c88:	e7b1      	b.n	8001bee <__sflush_r+0x1a>
 8001c8a:	89a3      	ldrh	r3, [r4, #12]
 8001c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c90:	81a3      	strh	r3, [r4, #12]
 8001c92:	e7ad      	b.n	8001bf0 <__sflush_r+0x1c>
 8001c94:	690f      	ldr	r7, [r1, #16]
 8001c96:	2f00      	cmp	r7, #0
 8001c98:	d0a9      	beq.n	8001bee <__sflush_r+0x1a>
 8001c9a:	0793      	lsls	r3, r2, #30
 8001c9c:	680e      	ldr	r6, [r1, #0]
 8001c9e:	bf08      	it	eq
 8001ca0:	694b      	ldreq	r3, [r1, #20]
 8001ca2:	600f      	str	r7, [r1, #0]
 8001ca4:	bf18      	it	ne
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	eba6 0807 	sub.w	r8, r6, r7
 8001cac:	608b      	str	r3, [r1, #8]
 8001cae:	f1b8 0f00 	cmp.w	r8, #0
 8001cb2:	dd9c      	ble.n	8001bee <__sflush_r+0x1a>
 8001cb4:	6a21      	ldr	r1, [r4, #32]
 8001cb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001cb8:	4643      	mov	r3, r8
 8001cba:	463a      	mov	r2, r7
 8001cbc:	4628      	mov	r0, r5
 8001cbe:	47b0      	blx	r6
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	dc06      	bgt.n	8001cd2 <__sflush_r+0xfe>
 8001cc4:	89a3      	ldrh	r3, [r4, #12]
 8001cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cca:	81a3      	strh	r3, [r4, #12]
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cd0:	e78e      	b.n	8001bf0 <__sflush_r+0x1c>
 8001cd2:	4407      	add	r7, r0
 8001cd4:	eba8 0800 	sub.w	r8, r8, r0
 8001cd8:	e7e9      	b.n	8001cae <__sflush_r+0xda>
 8001cda:	bf00      	nop
 8001cdc:	20400001 	.word	0x20400001

08001ce0 <_fflush_r>:
 8001ce0:	b538      	push	{r3, r4, r5, lr}
 8001ce2:	690b      	ldr	r3, [r1, #16]
 8001ce4:	4605      	mov	r5, r0
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	b913      	cbnz	r3, 8001cf0 <_fflush_r+0x10>
 8001cea:	2500      	movs	r5, #0
 8001cec:	4628      	mov	r0, r5
 8001cee:	bd38      	pop	{r3, r4, r5, pc}
 8001cf0:	b118      	cbz	r0, 8001cfa <_fflush_r+0x1a>
 8001cf2:	6983      	ldr	r3, [r0, #24]
 8001cf4:	b90b      	cbnz	r3, 8001cfa <_fflush_r+0x1a>
 8001cf6:	f000 f887 	bl	8001e08 <__sinit>
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <_fflush_r+0x6c>)
 8001cfc:	429c      	cmp	r4, r3
 8001cfe:	d11b      	bne.n	8001d38 <_fflush_r+0x58>
 8001d00:	686c      	ldr	r4, [r5, #4]
 8001d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0ef      	beq.n	8001cea <_fflush_r+0xa>
 8001d0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d0c:	07d0      	lsls	r0, r2, #31
 8001d0e:	d404      	bmi.n	8001d1a <_fflush_r+0x3a>
 8001d10:	0599      	lsls	r1, r3, #22
 8001d12:	d402      	bmi.n	8001d1a <_fflush_r+0x3a>
 8001d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d16:	f000 f915 	bl	8001f44 <__retarget_lock_acquire_recursive>
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	f7ff ff59 	bl	8001bd4 <__sflush_r>
 8001d22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d24:	07da      	lsls	r2, r3, #31
 8001d26:	4605      	mov	r5, r0
 8001d28:	d4e0      	bmi.n	8001cec <_fflush_r+0xc>
 8001d2a:	89a3      	ldrh	r3, [r4, #12]
 8001d2c:	059b      	lsls	r3, r3, #22
 8001d2e:	d4dd      	bmi.n	8001cec <_fflush_r+0xc>
 8001d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d32:	f000 f908 	bl	8001f46 <__retarget_lock_release_recursive>
 8001d36:	e7d9      	b.n	8001cec <_fflush_r+0xc>
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <_fflush_r+0x70>)
 8001d3a:	429c      	cmp	r4, r3
 8001d3c:	d101      	bne.n	8001d42 <_fflush_r+0x62>
 8001d3e:	68ac      	ldr	r4, [r5, #8]
 8001d40:	e7df      	b.n	8001d02 <_fflush_r+0x22>
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <_fflush_r+0x74>)
 8001d44:	429c      	cmp	r4, r3
 8001d46:	bf08      	it	eq
 8001d48:	68ec      	ldreq	r4, [r5, #12]
 8001d4a:	e7da      	b.n	8001d02 <_fflush_r+0x22>
 8001d4c:	0800237c 	.word	0x0800237c
 8001d50:	0800239c 	.word	0x0800239c
 8001d54:	0800235c 	.word	0x0800235c

08001d58 <std>:
 8001d58:	2300      	movs	r3, #0
 8001d5a:	b510      	push	{r4, lr}
 8001d5c:	4604      	mov	r4, r0
 8001d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8001d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d66:	6083      	str	r3, [r0, #8]
 8001d68:	8181      	strh	r1, [r0, #12]
 8001d6a:	6643      	str	r3, [r0, #100]	; 0x64
 8001d6c:	81c2      	strh	r2, [r0, #14]
 8001d6e:	6183      	str	r3, [r0, #24]
 8001d70:	4619      	mov	r1, r3
 8001d72:	2208      	movs	r2, #8
 8001d74:	305c      	adds	r0, #92	; 0x5c
 8001d76:	f7ff fdef 	bl	8001958 <memset>
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <std+0x38>)
 8001d7c:	6263      	str	r3, [r4, #36]	; 0x24
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <std+0x3c>)
 8001d80:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <std+0x40>)
 8001d84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <std+0x44>)
 8001d88:	6224      	str	r4, [r4, #32]
 8001d8a:	6323      	str	r3, [r4, #48]	; 0x30
 8001d8c:	bd10      	pop	{r4, pc}
 8001d8e:	bf00      	nop
 8001d90:	08002185 	.word	0x08002185
 8001d94:	080021a7 	.word	0x080021a7
 8001d98:	080021df 	.word	0x080021df
 8001d9c:	08002203 	.word	0x08002203

08001da0 <_cleanup_r>:
 8001da0:	4901      	ldr	r1, [pc, #4]	; (8001da8 <_cleanup_r+0x8>)
 8001da2:	f000 b8af 	b.w	8001f04 <_fwalk_reent>
 8001da6:	bf00      	nop
 8001da8:	08001ce1 	.word	0x08001ce1

08001dac <__sfmoreglue>:
 8001dac:	b570      	push	{r4, r5, r6, lr}
 8001dae:	1e4a      	subs	r2, r1, #1
 8001db0:	2568      	movs	r5, #104	; 0x68
 8001db2:	4355      	muls	r5, r2
 8001db4:	460e      	mov	r6, r1
 8001db6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001dba:	f000 f979 	bl	80020b0 <_malloc_r>
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	b140      	cbz	r0, 8001dd4 <__sfmoreglue+0x28>
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	e9c0 1600 	strd	r1, r6, [r0]
 8001dc8:	300c      	adds	r0, #12
 8001dca:	60a0      	str	r0, [r4, #8]
 8001dcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001dd0:	f7ff fdc2 	bl	8001958 <memset>
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}

08001dd8 <__sfp_lock_acquire>:
 8001dd8:	4801      	ldr	r0, [pc, #4]	; (8001de0 <__sfp_lock_acquire+0x8>)
 8001dda:	f000 b8b3 	b.w	8001f44 <__retarget_lock_acquire_recursive>
 8001dde:	bf00      	nop
 8001de0:	200000a4 	.word	0x200000a4

08001de4 <__sfp_lock_release>:
 8001de4:	4801      	ldr	r0, [pc, #4]	; (8001dec <__sfp_lock_release+0x8>)
 8001de6:	f000 b8ae 	b.w	8001f46 <__retarget_lock_release_recursive>
 8001dea:	bf00      	nop
 8001dec:	200000a4 	.word	0x200000a4

08001df0 <__sinit_lock_acquire>:
 8001df0:	4801      	ldr	r0, [pc, #4]	; (8001df8 <__sinit_lock_acquire+0x8>)
 8001df2:	f000 b8a7 	b.w	8001f44 <__retarget_lock_acquire_recursive>
 8001df6:	bf00      	nop
 8001df8:	2000009f 	.word	0x2000009f

08001dfc <__sinit_lock_release>:
 8001dfc:	4801      	ldr	r0, [pc, #4]	; (8001e04 <__sinit_lock_release+0x8>)
 8001dfe:	f000 b8a2 	b.w	8001f46 <__retarget_lock_release_recursive>
 8001e02:	bf00      	nop
 8001e04:	2000009f 	.word	0x2000009f

08001e08 <__sinit>:
 8001e08:	b510      	push	{r4, lr}
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	f7ff fff0 	bl	8001df0 <__sinit_lock_acquire>
 8001e10:	69a3      	ldr	r3, [r4, #24]
 8001e12:	b11b      	cbz	r3, 8001e1c <__sinit+0x14>
 8001e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e18:	f7ff bff0 	b.w	8001dfc <__sinit_lock_release>
 8001e1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001e20:	6523      	str	r3, [r4, #80]	; 0x50
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <__sinit+0x68>)
 8001e24:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <__sinit+0x6c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	62a2      	str	r2, [r4, #40]	; 0x28
 8001e2a:	42a3      	cmp	r3, r4
 8001e2c:	bf04      	itt	eq
 8001e2e:	2301      	moveq	r3, #1
 8001e30:	61a3      	streq	r3, [r4, #24]
 8001e32:	4620      	mov	r0, r4
 8001e34:	f000 f820 	bl	8001e78 <__sfp>
 8001e38:	6060      	str	r0, [r4, #4]
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f000 f81c 	bl	8001e78 <__sfp>
 8001e40:	60a0      	str	r0, [r4, #8]
 8001e42:	4620      	mov	r0, r4
 8001e44:	f000 f818 	bl	8001e78 <__sfp>
 8001e48:	2200      	movs	r2, #0
 8001e4a:	60e0      	str	r0, [r4, #12]
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	6860      	ldr	r0, [r4, #4]
 8001e50:	f7ff ff82 	bl	8001d58 <std>
 8001e54:	68a0      	ldr	r0, [r4, #8]
 8001e56:	2201      	movs	r2, #1
 8001e58:	2109      	movs	r1, #9
 8001e5a:	f7ff ff7d 	bl	8001d58 <std>
 8001e5e:	68e0      	ldr	r0, [r4, #12]
 8001e60:	2202      	movs	r2, #2
 8001e62:	2112      	movs	r1, #18
 8001e64:	f7ff ff78 	bl	8001d58 <std>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61a3      	str	r3, [r4, #24]
 8001e6c:	e7d2      	b.n	8001e14 <__sinit+0xc>
 8001e6e:	bf00      	nop
 8001e70:	08002358 	.word	0x08002358
 8001e74:	08001da1 	.word	0x08001da1

08001e78 <__sfp>:
 8001e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7a:	4607      	mov	r7, r0
 8001e7c:	f7ff ffac 	bl	8001dd8 <__sfp_lock_acquire>
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <__sfp+0x84>)
 8001e82:	681e      	ldr	r6, [r3, #0]
 8001e84:	69b3      	ldr	r3, [r6, #24]
 8001e86:	b913      	cbnz	r3, 8001e8e <__sfp+0x16>
 8001e88:	4630      	mov	r0, r6
 8001e8a:	f7ff ffbd 	bl	8001e08 <__sinit>
 8001e8e:	3648      	adds	r6, #72	; 0x48
 8001e90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	d503      	bpl.n	8001ea0 <__sfp+0x28>
 8001e98:	6833      	ldr	r3, [r6, #0]
 8001e9a:	b30b      	cbz	r3, 8001ee0 <__sfp+0x68>
 8001e9c:	6836      	ldr	r6, [r6, #0]
 8001e9e:	e7f7      	b.n	8001e90 <__sfp+0x18>
 8001ea0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001ea4:	b9d5      	cbnz	r5, 8001edc <__sfp+0x64>
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <__sfp+0x88>)
 8001ea8:	60e3      	str	r3, [r4, #12]
 8001eaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001eae:	6665      	str	r5, [r4, #100]	; 0x64
 8001eb0:	f000 f847 	bl	8001f42 <__retarget_lock_init_recursive>
 8001eb4:	f7ff ff96 	bl	8001de4 <__sfp_lock_release>
 8001eb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001ebc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001ec0:	6025      	str	r5, [r4, #0]
 8001ec2:	61a5      	str	r5, [r4, #24]
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ecc:	f7ff fd44 	bl	8001958 <memset>
 8001ed0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001ed4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001ed8:	4620      	mov	r0, r4
 8001eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001edc:	3468      	adds	r4, #104	; 0x68
 8001ede:	e7d9      	b.n	8001e94 <__sfp+0x1c>
 8001ee0:	2104      	movs	r1, #4
 8001ee2:	4638      	mov	r0, r7
 8001ee4:	f7ff ff62 	bl	8001dac <__sfmoreglue>
 8001ee8:	4604      	mov	r4, r0
 8001eea:	6030      	str	r0, [r6, #0]
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d1d5      	bne.n	8001e9c <__sfp+0x24>
 8001ef0:	f7ff ff78 	bl	8001de4 <__sfp_lock_release>
 8001ef4:	230c      	movs	r3, #12
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	e7ee      	b.n	8001ed8 <__sfp+0x60>
 8001efa:	bf00      	nop
 8001efc:	08002358 	.word	0x08002358
 8001f00:	ffff0001 	.word	0xffff0001

08001f04 <_fwalk_reent>:
 8001f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f08:	4606      	mov	r6, r0
 8001f0a:	4688      	mov	r8, r1
 8001f0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001f10:	2700      	movs	r7, #0
 8001f12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f16:	f1b9 0901 	subs.w	r9, r9, #1
 8001f1a:	d505      	bpl.n	8001f28 <_fwalk_reent+0x24>
 8001f1c:	6824      	ldr	r4, [r4, #0]
 8001f1e:	2c00      	cmp	r4, #0
 8001f20:	d1f7      	bne.n	8001f12 <_fwalk_reent+0xe>
 8001f22:	4638      	mov	r0, r7
 8001f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f28:	89ab      	ldrh	r3, [r5, #12]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d907      	bls.n	8001f3e <_fwalk_reent+0x3a>
 8001f2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f32:	3301      	adds	r3, #1
 8001f34:	d003      	beq.n	8001f3e <_fwalk_reent+0x3a>
 8001f36:	4629      	mov	r1, r5
 8001f38:	4630      	mov	r0, r6
 8001f3a:	47c0      	blx	r8
 8001f3c:	4307      	orrs	r7, r0
 8001f3e:	3568      	adds	r5, #104	; 0x68
 8001f40:	e7e9      	b.n	8001f16 <_fwalk_reent+0x12>

08001f42 <__retarget_lock_init_recursive>:
 8001f42:	4770      	bx	lr

08001f44 <__retarget_lock_acquire_recursive>:
 8001f44:	4770      	bx	lr

08001f46 <__retarget_lock_release_recursive>:
 8001f46:	4770      	bx	lr

08001f48 <__swhatbuf_r>:
 8001f48:	b570      	push	{r4, r5, r6, lr}
 8001f4a:	460e      	mov	r6, r1
 8001f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f50:	2900      	cmp	r1, #0
 8001f52:	b096      	sub	sp, #88	; 0x58
 8001f54:	4614      	mov	r4, r2
 8001f56:	461d      	mov	r5, r3
 8001f58:	da07      	bge.n	8001f6a <__swhatbuf_r+0x22>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	602b      	str	r3, [r5, #0]
 8001f5e:	89b3      	ldrh	r3, [r6, #12]
 8001f60:	061a      	lsls	r2, r3, #24
 8001f62:	d410      	bmi.n	8001f86 <__swhatbuf_r+0x3e>
 8001f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f68:	e00e      	b.n	8001f88 <__swhatbuf_r+0x40>
 8001f6a:	466a      	mov	r2, sp
 8001f6c:	f000 f970 	bl	8002250 <_fstat_r>
 8001f70:	2800      	cmp	r0, #0
 8001f72:	dbf2      	blt.n	8001f5a <__swhatbuf_r+0x12>
 8001f74:	9a01      	ldr	r2, [sp, #4]
 8001f76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001f7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001f7e:	425a      	negs	r2, r3
 8001f80:	415a      	adcs	r2, r3
 8001f82:	602a      	str	r2, [r5, #0]
 8001f84:	e7ee      	b.n	8001f64 <__swhatbuf_r+0x1c>
 8001f86:	2340      	movs	r3, #64	; 0x40
 8001f88:	2000      	movs	r0, #0
 8001f8a:	6023      	str	r3, [r4, #0]
 8001f8c:	b016      	add	sp, #88	; 0x58
 8001f8e:	bd70      	pop	{r4, r5, r6, pc}

08001f90 <__smakebuf_r>:
 8001f90:	898b      	ldrh	r3, [r1, #12]
 8001f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f94:	079d      	lsls	r5, r3, #30
 8001f96:	4606      	mov	r6, r0
 8001f98:	460c      	mov	r4, r1
 8001f9a:	d507      	bpl.n	8001fac <__smakebuf_r+0x1c>
 8001f9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001fa0:	6023      	str	r3, [r4, #0]
 8001fa2:	6123      	str	r3, [r4, #16]
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	6163      	str	r3, [r4, #20]
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd70      	pop	{r4, r5, r6, pc}
 8001fac:	ab01      	add	r3, sp, #4
 8001fae:	466a      	mov	r2, sp
 8001fb0:	f7ff ffca 	bl	8001f48 <__swhatbuf_r>
 8001fb4:	9900      	ldr	r1, [sp, #0]
 8001fb6:	4605      	mov	r5, r0
 8001fb8:	4630      	mov	r0, r6
 8001fba:	f000 f879 	bl	80020b0 <_malloc_r>
 8001fbe:	b948      	cbnz	r0, 8001fd4 <__smakebuf_r+0x44>
 8001fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fc4:	059a      	lsls	r2, r3, #22
 8001fc6:	d4ef      	bmi.n	8001fa8 <__smakebuf_r+0x18>
 8001fc8:	f023 0303 	bic.w	r3, r3, #3
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	81a3      	strh	r3, [r4, #12]
 8001fd2:	e7e3      	b.n	8001f9c <__smakebuf_r+0xc>
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <__smakebuf_r+0x7c>)
 8001fd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001fd8:	89a3      	ldrh	r3, [r4, #12]
 8001fda:	6020      	str	r0, [r4, #0]
 8001fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe0:	81a3      	strh	r3, [r4, #12]
 8001fe2:	9b00      	ldr	r3, [sp, #0]
 8001fe4:	6163      	str	r3, [r4, #20]
 8001fe6:	9b01      	ldr	r3, [sp, #4]
 8001fe8:	6120      	str	r0, [r4, #16]
 8001fea:	b15b      	cbz	r3, 8002004 <__smakebuf_r+0x74>
 8001fec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ff0:	4630      	mov	r0, r6
 8001ff2:	f000 f93f 	bl	8002274 <_isatty_r>
 8001ff6:	b128      	cbz	r0, 8002004 <__smakebuf_r+0x74>
 8001ff8:	89a3      	ldrh	r3, [r4, #12]
 8001ffa:	f023 0303 	bic.w	r3, r3, #3
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	81a3      	strh	r3, [r4, #12]
 8002004:	89a0      	ldrh	r0, [r4, #12]
 8002006:	4305      	orrs	r5, r0
 8002008:	81a5      	strh	r5, [r4, #12]
 800200a:	e7cd      	b.n	8001fa8 <__smakebuf_r+0x18>
 800200c:	08001da1 	.word	0x08001da1

08002010 <_free_r>:
 8002010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002012:	2900      	cmp	r1, #0
 8002014:	d048      	beq.n	80020a8 <_free_r+0x98>
 8002016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800201a:	9001      	str	r0, [sp, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	f1a1 0404 	sub.w	r4, r1, #4
 8002022:	bfb8      	it	lt
 8002024:	18e4      	addlt	r4, r4, r3
 8002026:	f000 f947 	bl	80022b8 <__malloc_lock>
 800202a:	4a20      	ldr	r2, [pc, #128]	; (80020ac <_free_r+0x9c>)
 800202c:	9801      	ldr	r0, [sp, #4]
 800202e:	6813      	ldr	r3, [r2, #0]
 8002030:	4615      	mov	r5, r2
 8002032:	b933      	cbnz	r3, 8002042 <_free_r+0x32>
 8002034:	6063      	str	r3, [r4, #4]
 8002036:	6014      	str	r4, [r2, #0]
 8002038:	b003      	add	sp, #12
 800203a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800203e:	f000 b941 	b.w	80022c4 <__malloc_unlock>
 8002042:	42a3      	cmp	r3, r4
 8002044:	d90b      	bls.n	800205e <_free_r+0x4e>
 8002046:	6821      	ldr	r1, [r4, #0]
 8002048:	1862      	adds	r2, r4, r1
 800204a:	4293      	cmp	r3, r2
 800204c:	bf04      	itt	eq
 800204e:	681a      	ldreq	r2, [r3, #0]
 8002050:	685b      	ldreq	r3, [r3, #4]
 8002052:	6063      	str	r3, [r4, #4]
 8002054:	bf04      	itt	eq
 8002056:	1852      	addeq	r2, r2, r1
 8002058:	6022      	streq	r2, [r4, #0]
 800205a:	602c      	str	r4, [r5, #0]
 800205c:	e7ec      	b.n	8002038 <_free_r+0x28>
 800205e:	461a      	mov	r2, r3
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	b10b      	cbz	r3, 8002068 <_free_r+0x58>
 8002064:	42a3      	cmp	r3, r4
 8002066:	d9fa      	bls.n	800205e <_free_r+0x4e>
 8002068:	6811      	ldr	r1, [r2, #0]
 800206a:	1855      	adds	r5, r2, r1
 800206c:	42a5      	cmp	r5, r4
 800206e:	d10b      	bne.n	8002088 <_free_r+0x78>
 8002070:	6824      	ldr	r4, [r4, #0]
 8002072:	4421      	add	r1, r4
 8002074:	1854      	adds	r4, r2, r1
 8002076:	42a3      	cmp	r3, r4
 8002078:	6011      	str	r1, [r2, #0]
 800207a:	d1dd      	bne.n	8002038 <_free_r+0x28>
 800207c:	681c      	ldr	r4, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	6053      	str	r3, [r2, #4]
 8002082:	4421      	add	r1, r4
 8002084:	6011      	str	r1, [r2, #0]
 8002086:	e7d7      	b.n	8002038 <_free_r+0x28>
 8002088:	d902      	bls.n	8002090 <_free_r+0x80>
 800208a:	230c      	movs	r3, #12
 800208c:	6003      	str	r3, [r0, #0]
 800208e:	e7d3      	b.n	8002038 <_free_r+0x28>
 8002090:	6825      	ldr	r5, [r4, #0]
 8002092:	1961      	adds	r1, r4, r5
 8002094:	428b      	cmp	r3, r1
 8002096:	bf04      	itt	eq
 8002098:	6819      	ldreq	r1, [r3, #0]
 800209a:	685b      	ldreq	r3, [r3, #4]
 800209c:	6063      	str	r3, [r4, #4]
 800209e:	bf04      	itt	eq
 80020a0:	1949      	addeq	r1, r1, r5
 80020a2:	6021      	streq	r1, [r4, #0]
 80020a4:	6054      	str	r4, [r2, #4]
 80020a6:	e7c7      	b.n	8002038 <_free_r+0x28>
 80020a8:	b003      	add	sp, #12
 80020aa:	bd30      	pop	{r4, r5, pc}
 80020ac:	20000090 	.word	0x20000090

080020b0 <_malloc_r>:
 80020b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b2:	1ccd      	adds	r5, r1, #3
 80020b4:	f025 0503 	bic.w	r5, r5, #3
 80020b8:	3508      	adds	r5, #8
 80020ba:	2d0c      	cmp	r5, #12
 80020bc:	bf38      	it	cc
 80020be:	250c      	movcc	r5, #12
 80020c0:	2d00      	cmp	r5, #0
 80020c2:	4606      	mov	r6, r0
 80020c4:	db01      	blt.n	80020ca <_malloc_r+0x1a>
 80020c6:	42a9      	cmp	r1, r5
 80020c8:	d903      	bls.n	80020d2 <_malloc_r+0x22>
 80020ca:	230c      	movs	r3, #12
 80020cc:	6033      	str	r3, [r6, #0]
 80020ce:	2000      	movs	r0, #0
 80020d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020d2:	f000 f8f1 	bl	80022b8 <__malloc_lock>
 80020d6:	4921      	ldr	r1, [pc, #132]	; (800215c <_malloc_r+0xac>)
 80020d8:	680a      	ldr	r2, [r1, #0]
 80020da:	4614      	mov	r4, r2
 80020dc:	b99c      	cbnz	r4, 8002106 <_malloc_r+0x56>
 80020de:	4f20      	ldr	r7, [pc, #128]	; (8002160 <_malloc_r+0xb0>)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b923      	cbnz	r3, 80020ee <_malloc_r+0x3e>
 80020e4:	4621      	mov	r1, r4
 80020e6:	4630      	mov	r0, r6
 80020e8:	f000 f83c 	bl	8002164 <_sbrk_r>
 80020ec:	6038      	str	r0, [r7, #0]
 80020ee:	4629      	mov	r1, r5
 80020f0:	4630      	mov	r0, r6
 80020f2:	f000 f837 	bl	8002164 <_sbrk_r>
 80020f6:	1c43      	adds	r3, r0, #1
 80020f8:	d123      	bne.n	8002142 <_malloc_r+0x92>
 80020fa:	230c      	movs	r3, #12
 80020fc:	6033      	str	r3, [r6, #0]
 80020fe:	4630      	mov	r0, r6
 8002100:	f000 f8e0 	bl	80022c4 <__malloc_unlock>
 8002104:	e7e3      	b.n	80020ce <_malloc_r+0x1e>
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	1b5b      	subs	r3, r3, r5
 800210a:	d417      	bmi.n	800213c <_malloc_r+0x8c>
 800210c:	2b0b      	cmp	r3, #11
 800210e:	d903      	bls.n	8002118 <_malloc_r+0x68>
 8002110:	6023      	str	r3, [r4, #0]
 8002112:	441c      	add	r4, r3
 8002114:	6025      	str	r5, [r4, #0]
 8002116:	e004      	b.n	8002122 <_malloc_r+0x72>
 8002118:	6863      	ldr	r3, [r4, #4]
 800211a:	42a2      	cmp	r2, r4
 800211c:	bf0c      	ite	eq
 800211e:	600b      	streq	r3, [r1, #0]
 8002120:	6053      	strne	r3, [r2, #4]
 8002122:	4630      	mov	r0, r6
 8002124:	f000 f8ce 	bl	80022c4 <__malloc_unlock>
 8002128:	f104 000b 	add.w	r0, r4, #11
 800212c:	1d23      	adds	r3, r4, #4
 800212e:	f020 0007 	bic.w	r0, r0, #7
 8002132:	1ac2      	subs	r2, r0, r3
 8002134:	d0cc      	beq.n	80020d0 <_malloc_r+0x20>
 8002136:	1a1b      	subs	r3, r3, r0
 8002138:	50a3      	str	r3, [r4, r2]
 800213a:	e7c9      	b.n	80020d0 <_malloc_r+0x20>
 800213c:	4622      	mov	r2, r4
 800213e:	6864      	ldr	r4, [r4, #4]
 8002140:	e7cc      	b.n	80020dc <_malloc_r+0x2c>
 8002142:	1cc4      	adds	r4, r0, #3
 8002144:	f024 0403 	bic.w	r4, r4, #3
 8002148:	42a0      	cmp	r0, r4
 800214a:	d0e3      	beq.n	8002114 <_malloc_r+0x64>
 800214c:	1a21      	subs	r1, r4, r0
 800214e:	4630      	mov	r0, r6
 8002150:	f000 f808 	bl	8002164 <_sbrk_r>
 8002154:	3001      	adds	r0, #1
 8002156:	d1dd      	bne.n	8002114 <_malloc_r+0x64>
 8002158:	e7cf      	b.n	80020fa <_malloc_r+0x4a>
 800215a:	bf00      	nop
 800215c:	20000090 	.word	0x20000090
 8002160:	20000094 	.word	0x20000094

08002164 <_sbrk_r>:
 8002164:	b538      	push	{r3, r4, r5, lr}
 8002166:	4d06      	ldr	r5, [pc, #24]	; (8002180 <_sbrk_r+0x1c>)
 8002168:	2300      	movs	r3, #0
 800216a:	4604      	mov	r4, r0
 800216c:	4608      	mov	r0, r1
 800216e:	602b      	str	r3, [r5, #0]
 8002170:	f7fe f9ca 	bl	8000508 <_sbrk>
 8002174:	1c43      	adds	r3, r0, #1
 8002176:	d102      	bne.n	800217e <_sbrk_r+0x1a>
 8002178:	682b      	ldr	r3, [r5, #0]
 800217a:	b103      	cbz	r3, 800217e <_sbrk_r+0x1a>
 800217c:	6023      	str	r3, [r4, #0]
 800217e:	bd38      	pop	{r3, r4, r5, pc}
 8002180:	200000a8 	.word	0x200000a8

08002184 <__sread>:
 8002184:	b510      	push	{r4, lr}
 8002186:	460c      	mov	r4, r1
 8002188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800218c:	f000 f8a0 	bl	80022d0 <_read_r>
 8002190:	2800      	cmp	r0, #0
 8002192:	bfab      	itete	ge
 8002194:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002196:	89a3      	ldrhlt	r3, [r4, #12]
 8002198:	181b      	addge	r3, r3, r0
 800219a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800219e:	bfac      	ite	ge
 80021a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80021a2:	81a3      	strhlt	r3, [r4, #12]
 80021a4:	bd10      	pop	{r4, pc}

080021a6 <__swrite>:
 80021a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021aa:	461f      	mov	r7, r3
 80021ac:	898b      	ldrh	r3, [r1, #12]
 80021ae:	05db      	lsls	r3, r3, #23
 80021b0:	4605      	mov	r5, r0
 80021b2:	460c      	mov	r4, r1
 80021b4:	4616      	mov	r6, r2
 80021b6:	d505      	bpl.n	80021c4 <__swrite+0x1e>
 80021b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021bc:	2302      	movs	r3, #2
 80021be:	2200      	movs	r2, #0
 80021c0:	f000 f868 	bl	8002294 <_lseek_r>
 80021c4:	89a3      	ldrh	r3, [r4, #12]
 80021c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021ce:	81a3      	strh	r3, [r4, #12]
 80021d0:	4632      	mov	r2, r6
 80021d2:	463b      	mov	r3, r7
 80021d4:	4628      	mov	r0, r5
 80021d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021da:	f000 b817 	b.w	800220c <_write_r>

080021de <__sseek>:
 80021de:	b510      	push	{r4, lr}
 80021e0:	460c      	mov	r4, r1
 80021e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021e6:	f000 f855 	bl	8002294 <_lseek_r>
 80021ea:	1c43      	adds	r3, r0, #1
 80021ec:	89a3      	ldrh	r3, [r4, #12]
 80021ee:	bf15      	itete	ne
 80021f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80021f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80021f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80021fa:	81a3      	strheq	r3, [r4, #12]
 80021fc:	bf18      	it	ne
 80021fe:	81a3      	strhne	r3, [r4, #12]
 8002200:	bd10      	pop	{r4, pc}

08002202 <__sclose>:
 8002202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002206:	f000 b813 	b.w	8002230 <_close_r>
	...

0800220c <_write_r>:
 800220c:	b538      	push	{r3, r4, r5, lr}
 800220e:	4d07      	ldr	r5, [pc, #28]	; (800222c <_write_r+0x20>)
 8002210:	4604      	mov	r4, r0
 8002212:	4608      	mov	r0, r1
 8002214:	4611      	mov	r1, r2
 8002216:	2200      	movs	r2, #0
 8002218:	602a      	str	r2, [r5, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	f7fe f923 	bl	8000466 <_write>
 8002220:	1c43      	adds	r3, r0, #1
 8002222:	d102      	bne.n	800222a <_write_r+0x1e>
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	b103      	cbz	r3, 800222a <_write_r+0x1e>
 8002228:	6023      	str	r3, [r4, #0]
 800222a:	bd38      	pop	{r3, r4, r5, pc}
 800222c:	200000a8 	.word	0x200000a8

08002230 <_close_r>:
 8002230:	b538      	push	{r3, r4, r5, lr}
 8002232:	4d06      	ldr	r5, [pc, #24]	; (800224c <_close_r+0x1c>)
 8002234:	2300      	movs	r3, #0
 8002236:	4604      	mov	r4, r0
 8002238:	4608      	mov	r0, r1
 800223a:	602b      	str	r3, [r5, #0]
 800223c:	f7fe f92f 	bl	800049e <_close>
 8002240:	1c43      	adds	r3, r0, #1
 8002242:	d102      	bne.n	800224a <_close_r+0x1a>
 8002244:	682b      	ldr	r3, [r5, #0]
 8002246:	b103      	cbz	r3, 800224a <_close_r+0x1a>
 8002248:	6023      	str	r3, [r4, #0]
 800224a:	bd38      	pop	{r3, r4, r5, pc}
 800224c:	200000a8 	.word	0x200000a8

08002250 <_fstat_r>:
 8002250:	b538      	push	{r3, r4, r5, lr}
 8002252:	4d07      	ldr	r5, [pc, #28]	; (8002270 <_fstat_r+0x20>)
 8002254:	2300      	movs	r3, #0
 8002256:	4604      	mov	r4, r0
 8002258:	4608      	mov	r0, r1
 800225a:	4611      	mov	r1, r2
 800225c:	602b      	str	r3, [r5, #0]
 800225e:	f7fe f92a 	bl	80004b6 <_fstat>
 8002262:	1c43      	adds	r3, r0, #1
 8002264:	d102      	bne.n	800226c <_fstat_r+0x1c>
 8002266:	682b      	ldr	r3, [r5, #0]
 8002268:	b103      	cbz	r3, 800226c <_fstat_r+0x1c>
 800226a:	6023      	str	r3, [r4, #0]
 800226c:	bd38      	pop	{r3, r4, r5, pc}
 800226e:	bf00      	nop
 8002270:	200000a8 	.word	0x200000a8

08002274 <_isatty_r>:
 8002274:	b538      	push	{r3, r4, r5, lr}
 8002276:	4d06      	ldr	r5, [pc, #24]	; (8002290 <_isatty_r+0x1c>)
 8002278:	2300      	movs	r3, #0
 800227a:	4604      	mov	r4, r0
 800227c:	4608      	mov	r0, r1
 800227e:	602b      	str	r3, [r5, #0]
 8002280:	f7fe f929 	bl	80004d6 <_isatty>
 8002284:	1c43      	adds	r3, r0, #1
 8002286:	d102      	bne.n	800228e <_isatty_r+0x1a>
 8002288:	682b      	ldr	r3, [r5, #0]
 800228a:	b103      	cbz	r3, 800228e <_isatty_r+0x1a>
 800228c:	6023      	str	r3, [r4, #0]
 800228e:	bd38      	pop	{r3, r4, r5, pc}
 8002290:	200000a8 	.word	0x200000a8

08002294 <_lseek_r>:
 8002294:	b538      	push	{r3, r4, r5, lr}
 8002296:	4d07      	ldr	r5, [pc, #28]	; (80022b4 <_lseek_r+0x20>)
 8002298:	4604      	mov	r4, r0
 800229a:	4608      	mov	r0, r1
 800229c:	4611      	mov	r1, r2
 800229e:	2200      	movs	r2, #0
 80022a0:	602a      	str	r2, [r5, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	f7fe f922 	bl	80004ec <_lseek>
 80022a8:	1c43      	adds	r3, r0, #1
 80022aa:	d102      	bne.n	80022b2 <_lseek_r+0x1e>
 80022ac:	682b      	ldr	r3, [r5, #0]
 80022ae:	b103      	cbz	r3, 80022b2 <_lseek_r+0x1e>
 80022b0:	6023      	str	r3, [r4, #0]
 80022b2:	bd38      	pop	{r3, r4, r5, pc}
 80022b4:	200000a8 	.word	0x200000a8

080022b8 <__malloc_lock>:
 80022b8:	4801      	ldr	r0, [pc, #4]	; (80022c0 <__malloc_lock+0x8>)
 80022ba:	f7ff be43 	b.w	8001f44 <__retarget_lock_acquire_recursive>
 80022be:	bf00      	nop
 80022c0:	200000a0 	.word	0x200000a0

080022c4 <__malloc_unlock>:
 80022c4:	4801      	ldr	r0, [pc, #4]	; (80022cc <__malloc_unlock+0x8>)
 80022c6:	f7ff be3e 	b.w	8001f46 <__retarget_lock_release_recursive>
 80022ca:	bf00      	nop
 80022cc:	200000a0 	.word	0x200000a0

080022d0 <_read_r>:
 80022d0:	b538      	push	{r3, r4, r5, lr}
 80022d2:	4d07      	ldr	r5, [pc, #28]	; (80022f0 <_read_r+0x20>)
 80022d4:	4604      	mov	r4, r0
 80022d6:	4608      	mov	r0, r1
 80022d8:	4611      	mov	r1, r2
 80022da:	2200      	movs	r2, #0
 80022dc:	602a      	str	r2, [r5, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	f7fe f8a4 	bl	800042c <_read>
 80022e4:	1c43      	adds	r3, r0, #1
 80022e6:	d102      	bne.n	80022ee <_read_r+0x1e>
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	b103      	cbz	r3, 80022ee <_read_r+0x1e>
 80022ec:	6023      	str	r3, [r4, #0]
 80022ee:	bd38      	pop	{r3, r4, r5, pc}
 80022f0:	200000a8 	.word	0x200000a8

080022f4 <_init>:
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f6:	bf00      	nop
 80022f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fa:	bc08      	pop	{r3}
 80022fc:	469e      	mov	lr, r3
 80022fe:	4770      	bx	lr

08002300 <_fini>:
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	bf00      	nop
 8002304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002306:	bc08      	pop	{r3}
 8002308:	469e      	mov	lr, r3
 800230a:	4770      	bx	lr
