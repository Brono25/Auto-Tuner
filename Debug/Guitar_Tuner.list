
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004794  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004920  08004920  00014920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004960  08004960  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004960  08004960  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004960  08004960  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004960  08004960  00014960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004968  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d9c  20000014  0800497c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005db0  0800497c  00025db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d71  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ac  00000000  00000000  00031db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00034168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00035148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023164  00000000  00000000  00036020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fe4  00000000  00000000  00059184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd52e  00000000  00000000  0006a168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147696  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000440c  00000000  00000000  001476ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000014 	.word	0x20000014
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004908 	.word	0x08004908

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000018 	.word	0x20000018
 80001c8:	08004908 	.word	0x08004908

080001cc <__aeabi_dmul>:
 80001cc:	b570      	push	{r4, r5, r6, lr}
 80001ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001da:	bf1d      	ittte	ne
 80001dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e0:	ea94 0f0c 	teqne	r4, ip
 80001e4:	ea95 0f0c 	teqne	r5, ip
 80001e8:	f000 f8de 	bleq	80003a8 <__aeabi_dmul+0x1dc>
 80001ec:	442c      	add	r4, r5
 80001ee:	ea81 0603 	eor.w	r6, r1, r3
 80001f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fe:	bf18      	it	ne
 8000200:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000204:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000208:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800020c:	d038      	beq.n	8000280 <__aeabi_dmul+0xb4>
 800020e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000212:	f04f 0500 	mov.w	r5, #0
 8000216:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000222:	f04f 0600 	mov.w	r6, #0
 8000226:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022a:	f09c 0f00 	teq	ip, #0
 800022e:	bf18      	it	ne
 8000230:	f04e 0e01 	orrne.w	lr, lr, #1
 8000234:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000238:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800023c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000240:	d204      	bcs.n	800024c <__aeabi_dmul+0x80>
 8000242:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000246:	416d      	adcs	r5, r5
 8000248:	eb46 0606 	adc.w	r6, r6, r6
 800024c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000250:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000254:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000258:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800025c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000260:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000264:	bf88      	it	hi
 8000266:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026a:	d81e      	bhi.n	80002aa <__aeabi_dmul+0xde>
 800026c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000270:	bf08      	it	eq
 8000272:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000276:	f150 0000 	adcs.w	r0, r0, #0
 800027a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000284:	ea46 0101 	orr.w	r1, r6, r1
 8000288:	ea40 0002 	orr.w	r0, r0, r2
 800028c:	ea81 0103 	eor.w	r1, r1, r3
 8000290:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000294:	bfc2      	ittt	gt
 8000296:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029e:	bd70      	popgt	{r4, r5, r6, pc}
 80002a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a4:	f04f 0e00 	mov.w	lr, #0
 80002a8:	3c01      	subs	r4, #1
 80002aa:	f300 80ab 	bgt.w	8000404 <__aeabi_dmul+0x238>
 80002ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b2:	bfde      	ittt	le
 80002b4:	2000      	movle	r0, #0
 80002b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ba:	bd70      	pople	{r4, r5, r6, pc}
 80002bc:	f1c4 0400 	rsb	r4, r4, #0
 80002c0:	3c20      	subs	r4, #32
 80002c2:	da35      	bge.n	8000330 <__aeabi_dmul+0x164>
 80002c4:	340c      	adds	r4, #12
 80002c6:	dc1b      	bgt.n	8000300 <__aeabi_dmul+0x134>
 80002c8:	f104 0414 	add.w	r4, r4, #20
 80002cc:	f1c4 0520 	rsb	r5, r4, #32
 80002d0:	fa00 f305 	lsl.w	r3, r0, r5
 80002d4:	fa20 f004 	lsr.w	r0, r0, r4
 80002d8:	fa01 f205 	lsl.w	r2, r1, r5
 80002dc:	ea40 0002 	orr.w	r0, r0, r2
 80002e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002ec:	fa21 f604 	lsr.w	r6, r1, r4
 80002f0:	eb42 0106 	adc.w	r1, r2, r6
 80002f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f8:	bf08      	it	eq
 80002fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f1c4 040c 	rsb	r4, r4, #12
 8000304:	f1c4 0520 	rsb	r5, r4, #32
 8000308:	fa00 f304 	lsl.w	r3, r0, r4
 800030c:	fa20 f005 	lsr.w	r0, r0, r5
 8000310:	fa01 f204 	lsl.w	r2, r1, r4
 8000314:	ea40 0002 	orr.w	r0, r0, r2
 8000318:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800031c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000320:	f141 0100 	adc.w	r1, r1, #0
 8000324:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000328:	bf08      	it	eq
 800032a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f205 	lsl.w	r2, r0, r5
 8000338:	ea4e 0e02 	orr.w	lr, lr, r2
 800033c:	fa20 f304 	lsr.w	r3, r0, r4
 8000340:	fa01 f205 	lsl.w	r2, r1, r5
 8000344:	ea43 0302 	orr.w	r3, r3, r2
 8000348:	fa21 f004 	lsr.w	r0, r1, r4
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	fa21 f204 	lsr.w	r2, r1, r4
 8000354:	ea20 0002 	bic.w	r0, r0, r2
 8000358:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800035c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000360:	bf08      	it	eq
 8000362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f094 0f00 	teq	r4, #0
 800036c:	d10f      	bne.n	800038e <__aeabi_dmul+0x1c2>
 800036e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000372:	0040      	lsls	r0, r0, #1
 8000374:	eb41 0101 	adc.w	r1, r1, r1
 8000378:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800037c:	bf08      	it	eq
 800037e:	3c01      	subeq	r4, #1
 8000380:	d0f7      	beq.n	8000372 <__aeabi_dmul+0x1a6>
 8000382:	ea41 0106 	orr.w	r1, r1, r6
 8000386:	f095 0f00 	teq	r5, #0
 800038a:	bf18      	it	ne
 800038c:	4770      	bxne	lr
 800038e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000392:	0052      	lsls	r2, r2, #1
 8000394:	eb43 0303 	adc.w	r3, r3, r3
 8000398:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800039c:	bf08      	it	eq
 800039e:	3d01      	subeq	r5, #1
 80003a0:	d0f7      	beq.n	8000392 <__aeabi_dmul+0x1c6>
 80003a2:	ea43 0306 	orr.w	r3, r3, r6
 80003a6:	4770      	bx	lr
 80003a8:	ea94 0f0c 	teq	r4, ip
 80003ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b0:	bf18      	it	ne
 80003b2:	ea95 0f0c 	teqne	r5, ip
 80003b6:	d00c      	beq.n	80003d2 <__aeabi_dmul+0x206>
 80003b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003bc:	bf18      	it	ne
 80003be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c2:	d1d1      	bne.n	8000368 <__aeabi_dmul+0x19c>
 80003c4:	ea81 0103 	eor.w	r1, r1, r3
 80003c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	f04f 0000 	mov.w	r0, #0
 80003d0:	bd70      	pop	{r4, r5, r6, pc}
 80003d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d6:	bf06      	itte	eq
 80003d8:	4610      	moveq	r0, r2
 80003da:	4619      	moveq	r1, r3
 80003dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e0:	d019      	beq.n	8000416 <__aeabi_dmul+0x24a>
 80003e2:	ea94 0f0c 	teq	r4, ip
 80003e6:	d102      	bne.n	80003ee <__aeabi_dmul+0x222>
 80003e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003ec:	d113      	bne.n	8000416 <__aeabi_dmul+0x24a>
 80003ee:	ea95 0f0c 	teq	r5, ip
 80003f2:	d105      	bne.n	8000400 <__aeabi_dmul+0x234>
 80003f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f8:	bf1c      	itt	ne
 80003fa:	4610      	movne	r0, r2
 80003fc:	4619      	movne	r1, r3
 80003fe:	d10a      	bne.n	8000416 <__aeabi_dmul+0x24a>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800040c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000410:	f04f 0000 	mov.w	r0, #0
 8000414:	bd70      	pop	{r4, r5, r6, pc}
 8000416:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041e:	bd70      	pop	{r4, r5, r6, pc}

08000420 <__aeabi_drsub>:
 8000420:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000424:	e002      	b.n	800042c <__adddf3>
 8000426:	bf00      	nop

08000428 <__aeabi_dsub>:
 8000428:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800042c <__adddf3>:
 800042c:	b530      	push	{r4, r5, lr}
 800042e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000432:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	bf1f      	itttt	ne
 8000442:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000446:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000452:	f000 80e2 	beq.w	800061a <__adddf3+0x1ee>
 8000456:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045e:	bfb8      	it	lt
 8000460:	426d      	neglt	r5, r5
 8000462:	dd0c      	ble.n	800047e <__adddf3+0x52>
 8000464:	442c      	add	r4, r5
 8000466:	ea80 0202 	eor.w	r2, r0, r2
 800046a:	ea81 0303 	eor.w	r3, r1, r3
 800046e:	ea82 0000 	eor.w	r0, r2, r0
 8000472:	ea83 0101 	eor.w	r1, r3, r1
 8000476:	ea80 0202 	eor.w	r2, r0, r2
 800047a:	ea81 0303 	eor.w	r3, r1, r3
 800047e:	2d36      	cmp	r5, #54	; 0x36
 8000480:	bf88      	it	hi
 8000482:	bd30      	pophi	{r4, r5, pc}
 8000484:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000488:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800048c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000490:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000494:	d002      	beq.n	800049c <__adddf3+0x70>
 8000496:	4240      	negs	r0, r0
 8000498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800049c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x84>
 80004aa:	4252      	negs	r2, r2
 80004ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b0:	ea94 0f05 	teq	r4, r5
 80004b4:	f000 80a7 	beq.w	8000606 <__adddf3+0x1da>
 80004b8:	f1a4 0401 	sub.w	r4, r4, #1
 80004bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c0:	db0d      	blt.n	80004de <__adddf3+0xb2>
 80004c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ca:	1880      	adds	r0, r0, r2
 80004cc:	f141 0100 	adc.w	r1, r1, #0
 80004d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d4:	1880      	adds	r0, r0, r2
 80004d6:	fa43 f305 	asr.w	r3, r3, r5
 80004da:	4159      	adcs	r1, r3
 80004dc:	e00e      	b.n	80004fc <__adddf3+0xd0>
 80004de:	f1a5 0520 	sub.w	r5, r5, #32
 80004e2:	f10e 0e20 	add.w	lr, lr, #32
 80004e6:	2a01      	cmp	r2, #1
 80004e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ec:	bf28      	it	cs
 80004ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	18c0      	adds	r0, r0, r3
 80004f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	d507      	bpl.n	8000512 <__adddf3+0xe6>
 8000502:	f04f 0e00 	mov.w	lr, #0
 8000506:	f1dc 0c00 	rsbs	ip, ip, #0
 800050a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000512:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000516:	d31b      	bcc.n	8000550 <__adddf3+0x124>
 8000518:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800051c:	d30c      	bcc.n	8000538 <__adddf3+0x10c>
 800051e:	0849      	lsrs	r1, r1, #1
 8000520:	ea5f 0030 	movs.w	r0, r0, rrx
 8000524:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000528:	f104 0401 	add.w	r4, r4, #1
 800052c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000530:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000534:	f080 809a 	bcs.w	800066c <__adddf3+0x240>
 8000538:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800053c:	bf08      	it	eq
 800053e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000542:	f150 0000 	adcs.w	r0, r0, #0
 8000546:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054a:	ea41 0105 	orr.w	r1, r1, r5
 800054e:	bd30      	pop	{r4, r5, pc}
 8000550:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000554:	4140      	adcs	r0, r0
 8000556:	eb41 0101 	adc.w	r1, r1, r1
 800055a:	3c01      	subs	r4, #1
 800055c:	bf28      	it	cs
 800055e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000562:	d2e9      	bcs.n	8000538 <__adddf3+0x10c>
 8000564:	f091 0f00 	teq	r1, #0
 8000568:	bf04      	itt	eq
 800056a:	4601      	moveq	r1, r0
 800056c:	2000      	moveq	r0, #0
 800056e:	fab1 f381 	clz	r3, r1
 8000572:	bf08      	it	eq
 8000574:	3320      	addeq	r3, #32
 8000576:	f1a3 030b 	sub.w	r3, r3, #11
 800057a:	f1b3 0220 	subs.w	r2, r3, #32
 800057e:	da0c      	bge.n	800059a <__adddf3+0x16e>
 8000580:	320c      	adds	r2, #12
 8000582:	dd08      	ble.n	8000596 <__adddf3+0x16a>
 8000584:	f102 0c14 	add.w	ip, r2, #20
 8000588:	f1c2 020c 	rsb	r2, r2, #12
 800058c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000590:	fa21 f102 	lsr.w	r1, r1, r2
 8000594:	e00c      	b.n	80005b0 <__adddf3+0x184>
 8000596:	f102 0214 	add.w	r2, r2, #20
 800059a:	bfd8      	it	le
 800059c:	f1c2 0c20 	rsble	ip, r2, #32
 80005a0:	fa01 f102 	lsl.w	r1, r1, r2
 80005a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a8:	bfdc      	itt	le
 80005aa:	ea41 010c 	orrle.w	r1, r1, ip
 80005ae:	4090      	lslle	r0, r2
 80005b0:	1ae4      	subs	r4, r4, r3
 80005b2:	bfa2      	ittt	ge
 80005b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b8:	4329      	orrge	r1, r5
 80005ba:	bd30      	popge	{r4, r5, pc}
 80005bc:	ea6f 0404 	mvn.w	r4, r4
 80005c0:	3c1f      	subs	r4, #31
 80005c2:	da1c      	bge.n	80005fe <__adddf3+0x1d2>
 80005c4:	340c      	adds	r4, #12
 80005c6:	dc0e      	bgt.n	80005e6 <__adddf3+0x1ba>
 80005c8:	f104 0414 	add.w	r4, r4, #20
 80005cc:	f1c4 0220 	rsb	r2, r4, #32
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f302 	lsl.w	r3, r1, r2
 80005d8:	ea40 0003 	orr.w	r0, r0, r3
 80005dc:	fa21 f304 	lsr.w	r3, r1, r4
 80005e0:	ea45 0103 	orr.w	r1, r5, r3
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	f1c4 040c 	rsb	r4, r4, #12
 80005ea:	f1c4 0220 	rsb	r2, r4, #32
 80005ee:	fa20 f002 	lsr.w	r0, r0, r2
 80005f2:	fa01 f304 	lsl.w	r3, r1, r4
 80005f6:	ea40 0003 	orr.w	r0, r0, r3
 80005fa:	4629      	mov	r1, r5
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000602:	4629      	mov	r1, r5
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f094 0f00 	teq	r4, #0
 800060a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060e:	bf06      	itte	eq
 8000610:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000614:	3401      	addeq	r4, #1
 8000616:	3d01      	subne	r5, #1
 8000618:	e74e      	b.n	80004b8 <__adddf3+0x8c>
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf18      	it	ne
 8000620:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000624:	d029      	beq.n	800067a <__adddf3+0x24e>
 8000626:	ea94 0f05 	teq	r4, r5
 800062a:	bf08      	it	eq
 800062c:	ea90 0f02 	teqeq	r0, r2
 8000630:	d005      	beq.n	800063e <__adddf3+0x212>
 8000632:	ea54 0c00 	orrs.w	ip, r4, r0
 8000636:	bf04      	itt	eq
 8000638:	4619      	moveq	r1, r3
 800063a:	4610      	moveq	r0, r2
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	ea91 0f03 	teq	r1, r3
 8000642:	bf1e      	ittt	ne
 8000644:	2100      	movne	r1, #0
 8000646:	2000      	movne	r0, #0
 8000648:	bd30      	popne	{r4, r5, pc}
 800064a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064e:	d105      	bne.n	800065c <__adddf3+0x230>
 8000650:	0040      	lsls	r0, r0, #1
 8000652:	4149      	adcs	r1, r1
 8000654:	bf28      	it	cs
 8000656:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065a:	bd30      	pop	{r4, r5, pc}
 800065c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000660:	bf3c      	itt	cc
 8000662:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000666:	bd30      	popcc	{r4, r5, pc}
 8000668:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800066c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000670:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000674:	f04f 0000 	mov.w	r0, #0
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067e:	bf1a      	itte	ne
 8000680:	4619      	movne	r1, r3
 8000682:	4610      	movne	r0, r2
 8000684:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000688:	bf1c      	itt	ne
 800068a:	460b      	movne	r3, r1
 800068c:	4602      	movne	r2, r0
 800068e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000692:	bf06      	itte	eq
 8000694:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000698:	ea91 0f03 	teqeq	r1, r3
 800069c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	bf00      	nop

080006a4 <__aeabi_ui2d>:
 80006a4:	f090 0f00 	teq	r0, #0
 80006a8:	bf04      	itt	eq
 80006aa:	2100      	moveq	r1, #0
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b8:	f04f 0500 	mov.w	r5, #0
 80006bc:	f04f 0100 	mov.w	r1, #0
 80006c0:	e750      	b.n	8000564 <__adddf3+0x138>
 80006c2:	bf00      	nop

080006c4 <__aeabi_i2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006dc:	bf48      	it	mi
 80006de:	4240      	negmi	r0, r0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e73e      	b.n	8000564 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_f2d>:
 80006e8:	0042      	lsls	r2, r0, #1
 80006ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f6:	bf1f      	itttt	ne
 80006f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000700:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000704:	4770      	bxne	lr
 8000706:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070a:	bf08      	it	eq
 800070c:	4770      	bxeq	lr
 800070e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000712:	bf04      	itt	eq
 8000714:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000720:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	e71c      	b.n	8000564 <__adddf3+0x138>
 800072a:	bf00      	nop

0800072c <__aeabi_ul2d>:
 800072c:	ea50 0201 	orrs.w	r2, r0, r1
 8000730:	bf08      	it	eq
 8000732:	4770      	bxeq	lr
 8000734:	b530      	push	{r4, r5, lr}
 8000736:	f04f 0500 	mov.w	r5, #0
 800073a:	e00a      	b.n	8000752 <__aeabi_l2d+0x16>

0800073c <__aeabi_l2d>:
 800073c:	ea50 0201 	orrs.w	r2, r0, r1
 8000740:	bf08      	it	eq
 8000742:	4770      	bxeq	lr
 8000744:	b530      	push	{r4, r5, lr}
 8000746:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074a:	d502      	bpl.n	8000752 <__aeabi_l2d+0x16>
 800074c:	4240      	negs	r0, r0
 800074e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000752:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000756:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075e:	f43f aed8 	beq.w	8000512 <__adddf3+0xe6>
 8000762:	f04f 0203 	mov.w	r2, #3
 8000766:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076a:	bf18      	it	ne
 800076c:	3203      	addne	r2, #3
 800076e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000772:	bf18      	it	ne
 8000774:	3203      	addne	r2, #3
 8000776:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077a:	f1c2 0320 	rsb	r3, r2, #32
 800077e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000782:	fa20 f002 	lsr.w	r0, r0, r2
 8000786:	fa01 fe03 	lsl.w	lr, r1, r3
 800078a:	ea40 000e 	orr.w	r0, r0, lr
 800078e:	fa21 f102 	lsr.w	r1, r1, r2
 8000792:	4414      	add	r4, r2
 8000794:	e6bd      	b.n	8000512 <__adddf3+0xe6>
 8000796:	bf00      	nop

08000798 <__aeabi_d2uiz>:
 8000798:	004a      	lsls	r2, r1, #1
 800079a:	d211      	bcs.n	80007c0 <__aeabi_d2uiz+0x28>
 800079c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007a0:	d211      	bcs.n	80007c6 <__aeabi_d2uiz+0x2e>
 80007a2:	d50d      	bpl.n	80007c0 <__aeabi_d2uiz+0x28>
 80007a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007ac:	d40e      	bmi.n	80007cc <__aeabi_d2uiz+0x34>
 80007ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	4770      	bx	lr
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	4770      	bx	lr
 80007c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ca:	d102      	bne.n	80007d2 <__aeabi_d2uiz+0x3a>
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007d0:	4770      	bx	lr
 80007d2:	f04f 0000 	mov.w	r0, #0
 80007d6:	4770      	bx	lr

080007d8 <HAL_ADC_ConvHalfCpltCallback>:
	counter++;
}


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	in_buff = &adc_buff[0];
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 80007e2:	4a06      	ldr	r2, [pc, #24]	; (80007fc <HAL_ADC_ConvHalfCpltCallback+0x24>)
 80007e4:	601a      	str	r2, [r3, #0]
	out_buff = &dac_buff[HLF_BUFFER_LEN];
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80007ea:	601a      	str	r2, [r3, #0]
	//gain = 1;

}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	20000030 	.word	0x20000030
 80007fc:	2000018c 	.word	0x2000018c
 8000800:	20000034 	.word	0x20000034
 8000804:	200046a4 	.word	0x200046a4

08000808 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	in_buff = &adc_buff[HLF_BUFFER_LEN];
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <HAL_ADC_ConvCpltCallback+0x28>)
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000814:	601a      	str	r2, [r3, #0]
	out_buff = &dac_buff[0];
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_ADC_ConvCpltCallback+0x30>)
 8000818:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_ADC_ConvCpltCallback+0x34>)
 800081a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 800081c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000824:	f002 fc4c 	bl	80030c0 <HAL_GPIO_TogglePin>
	//gain = 0.5;
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000030 	.word	0x20000030
 8000834:	20001894 	.word	0x20001894
 8000838:	20000034 	.word	0x20000034
 800083c:	20002f9c 	.word	0x20002f9c

08000840 <process_dsp>:

void process_dsp()
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0

	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	e01f      	b.n	800088c <process_dsp+0x4c>
	{
		out_buff[i] = gain * in_buff[i];
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <process_dsp+0x68>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	b29b      	uxth	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff32 	bl	80006c4 <__aeabi_i2d>
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <process_dsp+0x6c>)
 8000862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000866:	f7ff fcb1 	bl	80001cc <__aeabi_dmul>
 800086a:	4602      	mov	r2, r0
 800086c:	460b      	mov	r3, r1
 800086e:	4610      	mov	r0, r2
 8000870:	4619      	mov	r1, r3
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <process_dsp+0x70>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	18d4      	adds	r4, r2, r3
 800087c:	f7ff ff8c 	bl	8000798 <__aeabi_d2uiz>
 8000880:	4603      	mov	r3, r0
 8000882:	b29b      	uxth	r3, r3
 8000884:	8023      	strh	r3, [r4, #0]
	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3301      	adds	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f640 3283 	movw	r2, #2947	; 0xb83
 8000892:	4293      	cmp	r3, r2
 8000894:	ddda      	ble.n	800084c <process_dsp+0xc>

	}
	out_buff[0] = 0;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <process_dsp+0x70>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2200      	movs	r2, #0
 800089c:	801a      	strh	r2, [r3, #0]


}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd90      	pop	{r4, r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000030 	.word	0x20000030
 80008ac:	20000000 	.word	0x20000000
 80008b0:	20000034 	.word	0x20000034

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ba:	f000 fb84 	bl	8000fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008be:	f000 f82d 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 f96f 	bl	8000ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 80008c6:	f000 f947 	bl	8000b58 <MX_DMA_Init>
  MX_ADC1_Init();
 80008ca:	f000 f877 	bl	80009bc <MX_ADC1_Init>
  MX_TIM6_Init();
 80008ce:	f000 f90d 	bl	8000aec <MX_TIM6_Init>
  MX_DAC1_Init();
 80008d2:	f000 f8d9 	bl	8000a88 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 80008d6:	480c      	ldr	r0, [pc, #48]	; (8000908 <main+0x54>)
 80008d8:	f003 fdd0 	bl	800447c <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim6, TIM_CHANNEL_6);
 80008dc:	2114      	movs	r1, #20
 80008de:	480a      	ldr	r0, [pc, #40]	; (8000908 <main+0x54>)
 80008e0:	f003 fe18 	bl	8004514 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, FULL_BUFFER_LEN);
 80008e4:	f241 7208 	movw	r2, #5896	; 0x1708
 80008e8:	4908      	ldr	r1, [pc, #32]	; (800090c <main+0x58>)
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <main+0x5c>)
 80008ec:	f000 ff14 	bl	8001718 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)dac_buff,  FULL_BUFFER_LEN, DAC_ALIGN_12B_R);
 80008f0:	2300      	movs	r3, #0
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	f241 7308 	movw	r3, #5896	; 0x1708
 80008f8:	4a06      	ldr	r2, [pc, #24]	; (8000914 <main+0x60>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4806      	ldr	r0, [pc, #24]	; (8000918 <main+0x64>)
 80008fe:	f001 fdc7 	bl	8002490 <HAL_DAC_Start_DMA>
  {


    /* USER CODE END WHILE */

	  process_dsp();
 8000902:	f7ff ff9d 	bl	8000840 <process_dsp>
 8000906:	e7fc      	b.n	8000902 <main+0x4e>
 8000908:	20000140 	.word	0x20000140
 800090c:	2000018c 	.word	0x2000018c
 8000910:	20000094 	.word	0x20000094
 8000914:	20002f9c 	.word	0x20002f9c
 8000918:	20000038 	.word	0x20000038

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b096      	sub	sp, #88	; 0x58
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	2244      	movs	r2, #68	; 0x44
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f003 ffe4 	bl	80048f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800093e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000942:	f002 fbe5 	bl	8003110 <HAL_PWREx_ControlVoltageScaling>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800094c:	f000 f976 	bl	8000c3c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000950:	2301      	movs	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000958:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	2303      	movs	r3, #3
 8000960:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000962:	2306      	movs	r3, #6
 8000964:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000966:	2350      	movs	r3, #80	; 0x50
 8000968:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800096a:	2307      	movs	r3, #7
 800096c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800096e:	2302      	movs	r3, #2
 8000970:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000972:	2304      	movs	r3, #4
 8000974:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4618      	mov	r0, r3
 800097c:	f002 fc1e 	bl	80031bc <HAL_RCC_OscConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000986:	f000 f959 	bl	8000c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	230f      	movs	r3, #15
 800098c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2303      	movs	r3, #3
 8000990:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800099e:	463b      	mov	r3, r7
 80009a0:	2104      	movs	r1, #4
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 f81c 	bl	80039e0 <HAL_RCC_ClockConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009ae:	f000 f945 	bl	8000c3c <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3758      	adds	r7, #88	; 0x58
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
 80009d0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <MX_ADC1_Init+0xc0>)
 80009d4:	4a2a      	ldr	r2, [pc, #168]	; (8000a80 <MX_ADC1_Init+0xc4>)
 80009d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <MX_ADC1_Init+0xc0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009de:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <MX_ADC1_Init+0xc0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e4:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <MX_ADC1_Init+0xc0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <MX_ADC1_Init+0xc0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_ADC1_Init+0xc0>)
 80009f2:	2204      	movs	r2, #4
 80009f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_ADC1_Init+0xc0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_ADC1_Init+0xc0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <MX_ADC1_Init+0xc0>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_ADC1_Init+0xc0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_ADC1_Init+0xc0>)
 8000a12:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_ADC1_Init+0xc0>)
 8000a1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_ADC1_Init+0xc0>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_ADC1_Init+0xc0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_ADC1_Init+0xc0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a36:	4811      	ldr	r0, [pc, #68]	; (8000a7c <MX_ADC1_Init+0xc0>)
 8000a38:	f000 fd26 	bl	8001488 <HAL_ADC_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a42:	f000 f8fb 	bl	8000c3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_ADC1_Init+0xc8>)
 8000a48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4a:	2306      	movs	r3, #6
 8000a4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a52:	237f      	movs	r3, #127	; 0x7f
 8000a54:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a56:	2304      	movs	r3, #4
 8000a58:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <MX_ADC1_Init+0xc0>)
 8000a64:	f000 fee6 	bl	8001834 <HAL_ADC_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a6e:	f000 f8e5 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000094 	.word	0x20000094
 8000a80:	50040000 	.word	0x50040000
 8000a84:	14f00020 	.word	0x14f00020

08000a88 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2224      	movs	r2, #36	; 0x24
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f003 ff2f 	bl	80048f8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_DAC1_Init+0x5c>)
 8000a9c:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_DAC1_Init+0x60>)
 8000a9e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000aa0:	4810      	ldr	r0, [pc, #64]	; (8000ae4 <MX_DAC1_Init+0x5c>)
 8000aa2:	f001 fcd2 	bl	800244a <HAL_DAC_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000aac:	f000 f8c6 	bl	8000c3c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_DAC1_Init+0x5c>)
 8000acc:	f001 fdca 	bl	8002664 <HAL_DAC_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000ad6:	f000 f8b1 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	; 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000038 	.word	0x20000038
 8000ae8:	40007400 	.word	0x40007400

08000aec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_TIM6_Init+0x64>)
 8000afe:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <MX_TIM6_Init+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_TIM6_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_TIM6_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000 - 1;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_TIM6_Init+0x64>)
 8000b10:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b14:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_TIM6_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_TIM6_Init+0x64>)
 8000b1e:	f003 fc55 	bl	80043cc <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b28:	f000 f888 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b2c:	2320      	movs	r3, #32
 8000b2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_TIM6_Init+0x64>)
 8000b3a:	f003 fe53 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b44:	f000 f87a 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000140 	.word	0x20000140
 8000b54:	40001000 	.word	0x40001000

08000b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_DMA_Init+0x48>)
 8000b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <MX_DMA_Init+0x48>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6493      	str	r3, [r2, #72]	; 0x48
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <MX_DMA_Init+0x48>)
 8000b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	200b      	movs	r0, #11
 8000b7c:	f001 fc2f 	bl	80023de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b80:	200b      	movs	r0, #11
 8000b82:	f001 fc48 	bl	8002416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	200d      	movs	r0, #13
 8000b8c:	f001 fc27 	bl	80023de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b90:	200d      	movs	r0, #13
 8000b92:	f001 fc40 	bl	8002416 <HAL_NVIC_EnableIRQ>

}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_GPIO_Init+0x94>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <MX_GPIO_Init+0x94>)
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_GPIO_Init+0x94>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_GPIO_Init+0x94>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <MX_GPIO_Init+0x94>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_GPIO_Init+0x94>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_GPIO_Init+0x94>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <MX_GPIO_Init+0x94>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_GPIO_Init+0x94>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f002 fa40 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000c10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	4619      	mov	r1, r3
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2c:	f002 f8b6 	bl	8002d9c <HAL_GPIO_Init>

}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_MspInit+0x44>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <HAL_MspInit+0x44>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6613      	str	r3, [r2, #96]	; 0x60
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x44>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6593      	str	r3, [r2, #88]	; 0x58
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x44>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0a0      	sub	sp, #128	; 0x80
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	225c      	movs	r2, #92	; 0x5c
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f003 fe21 	bl	80048f8 <memset>
  if(hadc->Instance==ADC1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a3b      	ldr	r2, [pc, #236]	; (8000da8 <HAL_ADC_MspInit+0x118>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d16f      	bne.n	8000da0 <HAL_ADC_MspInit+0x110>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cc4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000cc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cca:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 6;
 8000cd0:	2306      	movs	r3, #6
 8000cd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 43;
 8000cd4:	232b      	movs	r3, #43	; 0x2b
 8000cd6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f003 f862 	bl	8003db8 <HAL_RCCEx_PeriphCLKConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000cfa:	f7ff ff9f 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cfe:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <HAL_ADC_MspInit+0x11c>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	4a2a      	ldr	r2, [pc, #168]	; (8000dac <HAL_ADC_MspInit+0x11c>)
 8000d04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0a:	4b28      	ldr	r3, [pc, #160]	; (8000dac <HAL_ADC_MspInit+0x11c>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b25      	ldr	r3, [pc, #148]	; (8000dac <HAL_ADC_MspInit+0x11c>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	4a24      	ldr	r2, [pc, #144]	; (8000dac <HAL_ADC_MspInit+0x11c>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d22:	4b22      	ldr	r3, [pc, #136]	; (8000dac <HAL_ADC_MspInit+0x11c>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d32:	230b      	movs	r3, #11
 8000d34:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f002 f82a 	bl	8002d9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d4a:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <HAL_ADC_MspInit+0x124>)
 8000d4c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d62:	2280      	movs	r2, #128	; 0x80
 8000d64:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d6c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d78:	2220      	movs	r2, #32
 8000d7a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d86:	f001 fe11 	bl	80029ac <HAL_DMA_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8000d90:	f7ff ff54 	bl	8000c3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d98:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <HAL_ADC_MspInit+0x120>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	3780      	adds	r7, #128	; 0x80
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	50040000 	.word	0x50040000
 8000dac:	40021000 	.word	0x40021000
 8000db0:	200000f8 	.word	0x200000f8
 8000db4:	40020008 	.word	0x40020008

08000db8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a2b      	ldr	r2, [pc, #172]	; (8000e84 <HAL_DAC_MspInit+0xcc>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d14f      	bne.n	8000e7a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000dda:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <HAL_DAC_MspInit+0xd0>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	4a2a      	ldr	r2, [pc, #168]	; (8000e88 <HAL_DAC_MspInit+0xd0>)
 8000de0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000de4:	6593      	str	r3, [r2, #88]	; 0x58
 8000de6:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <HAL_DAC_MspInit+0xd0>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <HAL_DAC_MspInit+0xd0>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a24      	ldr	r2, [pc, #144]	; (8000e88 <HAL_DAC_MspInit+0xd0>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <HAL_DAC_MspInit+0xd0>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f001 ffbc 	bl	8002d9c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_DAC_MspInit+0xd4>)
 8000e26:	4a1a      	ldr	r2, [pc, #104]	; (8000e90 <HAL_DAC_MspInit+0xd8>)
 8000e28:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <HAL_DAC_MspInit+0xd4>)
 8000e2c:	2206      	movs	r2, #6
 8000e2e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_DAC_MspInit+0xd4>)
 8000e32:	2210      	movs	r2, #16
 8000e34:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_DAC_MspInit+0xd4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <HAL_DAC_MspInit+0xd4>)
 8000e3e:	2280      	movs	r2, #128	; 0x80
 8000e40:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_DAC_MspInit+0xd4>)
 8000e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e48:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <HAL_DAC_MspInit+0xd4>)
 8000e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e50:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_DAC_MspInit+0xd4>)
 8000e54:	2220      	movs	r2, #32
 8000e56:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_DAC_MspInit+0xd4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000e5e:	480b      	ldr	r0, [pc, #44]	; (8000e8c <HAL_DAC_MspInit+0xd4>)
 8000e60:	f001 fda4 	bl	80029ac <HAL_DMA_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000e6a:	f7ff fee7 	bl	8000c3c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_DAC_MspInit+0xd4>)
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <HAL_DAC_MspInit+0xd4>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40007400 	.word	0x40007400
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	2000004c 	.word	0x2000004c
 8000e90:	40020030 	.word	0x40020030

08000e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_TIM_Base_MspInit+0x38>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d10b      	bne.n	8000ebe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <HAL_TIM_Base_MspInit+0x3c>)
 8000eac:	f043 0310 	orr.w	r3, r3, #16
 8000eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_TIM_Base_MspInit+0x3c>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40001000 	.word	0x40001000
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f20:	f000 f8a6 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <DMA1_Channel1_IRQHandler+0x10>)
 8000f2e:	f001 fe55 	bl	8002bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000f8 	.word	0x200000f8

08000f3c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <DMA1_Channel3_IRQHandler+0x10>)
 8000f42:	f001 fe4b 	bl	8002bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000004c 	.word	0x2000004c

08000f50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <SystemInit+0x20>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <SystemInit+0x20>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f78:	f7ff ffea 	bl	8000f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f7c:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7e:	490d      	ldr	r1, [pc, #52]	; (8000fb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <LoopForever+0xe>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f94:	4c0a      	ldr	r4, [pc, #40]	; (8000fc0 <LoopForever+0x16>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f003 fc85 	bl	80048b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fa6:	f7ff fc85 	bl	80008b4 <main>

08000faa <LoopForever>:

LoopForever:
    b LoopForever
 8000faa:	e7fe      	b.n	8000faa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fb8:	08004968 	.word	0x08004968
  ldr r2, =_sbss
 8000fbc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000fc0:	20005db0 	.word	0x20005db0

08000fc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC1_IRQHandler>

08000fc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f001 f9f9 	bl	80023c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f000 f80e 	bl	8000ff8 <HAL_InitTick>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	e001      	b.n	8000fec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fe8:	f7ff fe2e 	bl	8000c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fec:	79fb      	ldrb	r3, [r7, #7]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_InitTick+0x6c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d023      	beq.n	8001054 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <HAL_InitTick+0x70>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_InitTick+0x6c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	fbb3 f3f1 	udiv	r3, r3, r1
 800101e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f001 fa05 	bl	8002432 <HAL_SYSTICK_Config>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10f      	bne.n	800104e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d809      	bhi.n	8001048 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800103c:	f001 f9cf 	bl	80023de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_InitTick+0x74>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e007      	b.n	8001058 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	e004      	b.n	8001058 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e001      	b.n	8001058 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000010 	.word	0x20000010
 8001068:	20000008 	.word	0x20000008
 800106c:	2000000c 	.word	0x2000000c

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000010 	.word	0x20000010
 8001094:	20005dac 	.word	0x20005dac

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20005dac 	.word	0x20005dac

080010b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff ffee 	bl	8001098 <HAL_GetTick>
 80010bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010c8:	d005      	beq.n	80010d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_Delay+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d6:	bf00      	nop
 80010d8:	f7ff ffde 	bl	8001098 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d8f7      	bhi.n	80010d8 <HAL_Delay+0x28>
  {
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000010 	.word	0x20000010

080010f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	431a      	orrs	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	609a      	str	r2, [r3, #8]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	609a      	str	r2, [r3, #8]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3360      	adds	r3, #96	; 0x60
 8001172:	461a      	mov	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <LL_ADC_SetOffset+0x44>)
 8001182:	4013      	ands	r3, r2
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	4313      	orrs	r3, r2
 8001190:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001198:	bf00      	nop
 800119a:	371c      	adds	r7, #28
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	03fff000 	.word	0x03fff000

080011a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3360      	adds	r3, #96	; 0x60
 80011b6:	461a      	mov	r2, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3360      	adds	r3, #96	; 0x60
 80011e4:	461a      	mov	r2, r3
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	431a      	orrs	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011fe:	bf00      	nop
 8001200:	371c      	adds	r7, #28
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3330      	adds	r3, #48	; 0x30
 8001240:	461a      	mov	r2, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	f003 030c 	and.w	r3, r3, #12
 800124c:	4413      	add	r3, r2
 800124e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	211f      	movs	r1, #31
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	401a      	ands	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	0e9b      	lsrs	r3, r3, #26
 8001268:	f003 011f 	and.w	r1, r3, #31
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	431a      	orrs	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800127c:	bf00      	nop
 800127e:	371c      	adds	r7, #28
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3314      	adds	r3, #20
 8001298:	461a      	mov	r2, r3
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	0e5b      	lsrs	r3, r3, #25
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	4413      	add	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	0d1b      	lsrs	r3, r3, #20
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	2107      	movs	r1, #7
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	401a      	ands	r2, r3
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	0d1b      	lsrs	r3, r3, #20
 80012c2:	f003 031f 	and.w	r3, r3, #31
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	431a      	orrs	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012d2:	bf00      	nop
 80012d4:	371c      	adds	r7, #28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012f8:	43db      	mvns	r3, r3
 80012fa:	401a      	ands	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0318 	and.w	r3, r3, #24
 8001302:	4908      	ldr	r1, [pc, #32]	; (8001324 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001304:	40d9      	lsrs	r1, r3
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	400b      	ands	r3, r1
 800130a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800130e:	431a      	orrs	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	0007ffff 	.word	0x0007ffff

08001328 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001338:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6093      	str	r3, [r2, #8]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800135c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001360:	d101      	bne.n	8001366 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001388:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013b0:	d101      	bne.n	80013b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013d8:	f043 0201 	orr.w	r2, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <LL_ADC_IsEnabled+0x18>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <LL_ADC_IsEnabled+0x1a>
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001422:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001426:	f043 0204 	orr.w	r2, r3, #4
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b04      	cmp	r3, #4
 800144c:	d101      	bne.n	8001452 <LL_ADC_REG_IsConversionOngoing+0x18>
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b08      	cmp	r3, #8
 8001472:	d101      	bne.n	8001478 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e12c      	b.n	80016fc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d109      	bne.n	80014c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff fbed 	bl	8000c90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff3f 	bl	800134c <LL_ADC_IsDeepPowerDownEnabled>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d004      	beq.n	80014de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff25 	bl	8001328 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff5a 	bl	800139c <LL_ADC_IsInternalRegulatorEnabled>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d115      	bne.n	800151a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ff3e 	bl	8001374 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014f8:	4b82      	ldr	r3, [pc, #520]	; (8001704 <HAL_ADC_Init+0x27c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	099b      	lsrs	r3, r3, #6
 80014fe:	4a82      	ldr	r2, [pc, #520]	; (8001708 <HAL_ADC_Init+0x280>)
 8001500:	fba2 2303 	umull	r2, r3, r2, r3
 8001504:	099b      	lsrs	r3, r3, #6
 8001506:	3301      	adds	r3, #1
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800150c:	e002      	b.n	8001514 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	3b01      	subs	r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f9      	bne.n	800150e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ff3c 	bl	800139c <LL_ADC_IsInternalRegulatorEnabled>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10d      	bne.n	8001546 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152e:	f043 0210 	orr.w	r2, r3, #16
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153a:	f043 0201 	orr.w	r2, r3, #1
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff75 	bl	800143a <LL_ADC_REG_IsConversionOngoing>
 8001550:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	2b00      	cmp	r3, #0
 800155c:	f040 80c5 	bne.w	80016ea <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f040 80c1 	bne.w	80016ea <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001570:	f043 0202 	orr.w	r2, r3, #2
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff35 	bl	80013ec <LL_ADC_IsEnabled>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10b      	bne.n	80015a0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001588:	4860      	ldr	r0, [pc, #384]	; (800170c <HAL_ADC_Init+0x284>)
 800158a:	f7ff ff2f 	bl	80013ec <LL_ADC_IsEnabled>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d105      	bne.n	80015a0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	4619      	mov	r1, r3
 800159a:	485d      	ldr	r0, [pc, #372]	; (8001710 <HAL_ADC_Init+0x288>)
 800159c:	f7ff fdac 	bl	80010f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7e5b      	ldrb	r3, [r3, #25]
 80015a4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015aa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80015b0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80015b6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015be:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d106      	bne.n	80015dc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	3b01      	subs	r3, #1
 80015d4:	045b      	lsls	r3, r3, #17
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d009      	beq.n	80015f8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	4b45      	ldr	r3, [pc, #276]	; (8001714 <HAL_ADC_Init+0x28c>)
 8001600:	4013      	ands	r3, r2
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	69b9      	ldr	r1, [r7, #24]
 8001608:	430b      	orrs	r3, r1
 800160a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff12 	bl	800143a <LL_ADC_REG_IsConversionOngoing>
 8001616:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff1f 	bl	8001460 <LL_ADC_INJ_IsConversionOngoing>
 8001622:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d13d      	bne.n	80016a6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d13a      	bne.n	80016a6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001634:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800163c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800164c:	f023 0302 	bic.w	r3, r3, #2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	69b9      	ldr	r1, [r7, #24]
 8001656:	430b      	orrs	r3, r1
 8001658:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001660:	2b01      	cmp	r3, #1
 8001662:	d118      	bne.n	8001696 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800166e:	f023 0304 	bic.w	r3, r3, #4
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800167a:	4311      	orrs	r1, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001680:	4311      	orrs	r1, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001686:	430a      	orrs	r2, r1
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	611a      	str	r2, [r3, #16]
 8001694:	e007      	b.n	80016a6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0201 	bic.w	r2, r2, #1
 80016a4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d10c      	bne.n	80016c8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	f023 010f 	bic.w	r1, r3, #15
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	1e5a      	subs	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	631a      	str	r2, [r3, #48]	; 0x30
 80016c6:	e007      	b.n	80016d8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 020f 	bic.w	r2, r2, #15
 80016d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016dc:	f023 0303 	bic.w	r3, r3, #3
 80016e0:	f043 0201 	orr.w	r2, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	655a      	str	r2, [r3, #84]	; 0x54
 80016e8:	e007      	b.n	80016fa <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ee:	f043 0210 	orr.w	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000008 	.word	0x20000008
 8001708:	053e2d63 	.word	0x053e2d63
 800170c:	50040000 	.word	0x50040000
 8001710:	50040300 	.word	0x50040300
 8001714:	fff0c007 	.word	0xfff0c007

08001718 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fe86 	bl	800143a <LL_ADC_REG_IsConversionOngoing>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d167      	bne.n	8001804 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_ADC_Start_DMA+0x2a>
 800173e:	2302      	movs	r3, #2
 8001740:	e063      	b.n	800180a <HAL_ADC_Start_DMA+0xf2>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 fc52 	bl	8001ff4 <ADC_Enable>
 8001750:	4603      	mov	r3, r0
 8001752:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d14f      	bne.n	80017fa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	f023 0206 	bic.w	r2, r3, #6
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	659a      	str	r2, [r3, #88]	; 0x58
 8001786:	e002      	b.n	800178e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	4a20      	ldr	r2, [pc, #128]	; (8001814 <HAL_ADC_Start_DMA+0xfc>)
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <HAL_ADC_Start_DMA+0x100>)
 800179c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	4a1e      	ldr	r2, [pc, #120]	; (800181c <HAL_ADC_Start_DMA+0x104>)
 80017a4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	221c      	movs	r2, #28
 80017ac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0210 	orr.w	r2, r2, #16
 80017c4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0201 	orr.w	r2, r2, #1
 80017d4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3340      	adds	r3, #64	; 0x40
 80017e0:	4619      	mov	r1, r3
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f001 f999 	bl	8002b1c <HAL_DMA_Start_IT>
 80017ea:	4603      	mov	r3, r0
 80017ec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fe0d 	bl	8001412 <LL_ADC_REG_StartConversion>
 80017f8:	e006      	b.n	8001808 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001802:	e001      	b.n	8001808 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001804:	2302      	movs	r3, #2
 8001806:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001808:	7dfb      	ldrb	r3, [r7, #23]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	08002101 	.word	0x08002101
 8001818:	080021d9 	.word	0x080021d9
 800181c:	080021f5 	.word	0x080021f5

08001820 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b0b6      	sub	sp, #216	; 0xd8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x22>
 8001852:	2302      	movs	r3, #2
 8001854:	e3b9      	b.n	8001fca <HAL_ADC_ConfigChannel+0x796>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fde9 	bl	800143a <LL_ADC_REG_IsConversionOngoing>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 839e 	bne.w	8001fac <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d824      	bhi.n	80018c2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	3b02      	subs	r3, #2
 800187e:	2b03      	cmp	r3, #3
 8001880:	d81b      	bhi.n	80018ba <HAL_ADC_ConfigChannel+0x86>
 8001882:	a201      	add	r2, pc, #4	; (adr r2, 8001888 <HAL_ADC_ConfigChannel+0x54>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	08001899 	.word	0x08001899
 800188c:	080018a1 	.word	0x080018a1
 8001890:	080018a9 	.word	0x080018a9
 8001894:	080018b1 	.word	0x080018b1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	220c      	movs	r2, #12
 800189c:	605a      	str	r2, [r3, #4]
          break;
 800189e:	e011      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2212      	movs	r2, #18
 80018a4:	605a      	str	r2, [r3, #4]
          break;
 80018a6:	e00d      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2218      	movs	r2, #24
 80018ac:	605a      	str	r2, [r3, #4]
          break;
 80018ae:	e009      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b6:	605a      	str	r2, [r3, #4]
          break;
 80018b8:	e004      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2206      	movs	r2, #6
 80018be:	605a      	str	r2, [r3, #4]
          break;
 80018c0:	e000      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80018c2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6859      	ldr	r1, [r3, #4]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	f7ff fcad 	bl	8001230 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fdad 	bl	800143a <LL_ADC_REG_IsConversionOngoing>
 80018e0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fdb9 	bl	8001460 <LL_ADC_INJ_IsConversionOngoing>
 80018ee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 81a6 	bne.w	8001c48 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001900:	2b00      	cmp	r3, #0
 8001902:	f040 81a1 	bne.w	8001c48 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	6819      	ldr	r1, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	461a      	mov	r2, r3
 8001914:	f7ff fcb8 	bl	8001288 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	08db      	lsrs	r3, r3, #3
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	2b04      	cmp	r3, #4
 8001938:	d00a      	beq.n	8001950 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	6919      	ldr	r1, [r3, #16]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800194a:	f7ff fc09 	bl	8001160 <LL_ADC_SetOffset>
 800194e:	e17b      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fc26 	bl	80011a8 <LL_ADC_GetOffsetChannel>
 800195c:	4603      	mov	r3, r0
 800195e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10a      	bne.n	800197c <HAL_ADC_ConfigChannel+0x148>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fc1b 	bl	80011a8 <LL_ADC_GetOffsetChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	0e9b      	lsrs	r3, r3, #26
 8001976:	f003 021f 	and.w	r2, r3, #31
 800197a:	e01e      	b.n	80019ba <HAL_ADC_ConfigChannel+0x186>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fc10 	bl	80011a8 <LL_ADC_GetOffsetChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001992:	fa93 f3a3 	rbit	r3, r3
 8001996:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800199a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800199e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80019aa:	2320      	movs	r3, #32
 80019ac:	e004      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80019ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d105      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x19e>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	0e9b      	lsrs	r3, r3, #26
 80019cc:	f003 031f 	and.w	r3, r3, #31
 80019d0:	e018      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x1d0>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019de:	fa93 f3a3 	rbit	r3, r3
 80019e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80019f6:	2320      	movs	r3, #32
 80019f8:	e004      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80019fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d106      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fbdf 	bl	80011d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fbc3 	bl	80011a8 <LL_ADC_GetOffsetChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10a      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x20e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fbb8 	bl	80011a8 <LL_ADC_GetOffsetChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	0e9b      	lsrs	r3, r3, #26
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	e01e      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x24c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2101      	movs	r1, #1
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fbad 	bl	80011a8 <LL_ADC_GetOffsetChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a58:	fa93 f3a3 	rbit	r3, r3
 8001a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001a70:	2320      	movs	r3, #32
 8001a72:	e004      	b.n	8001a7e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001a74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d105      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x264>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0e9b      	lsrs	r3, r3, #26
 8001a92:	f003 031f 	and.w	r3, r3, #31
 8001a96:	e018      	b.n	8001aca <HAL_ADC_ConfigChannel+0x296>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001aa4:	fa93 f3a3 	rbit	r3, r3
 8001aa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001aac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ab0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001abc:	2320      	movs	r3, #32
 8001abe:	e004      	b.n	8001aca <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d106      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fb7c 	bl	80011d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fb60 	bl	80011a8 <LL_ADC_GetOffsetChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10a      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x2d4>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2102      	movs	r1, #2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fb55 	bl	80011a8 <LL_ADC_GetOffsetChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	0e9b      	lsrs	r3, r3, #26
 8001b02:	f003 021f 	and.w	r2, r3, #31
 8001b06:	e01e      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x312>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fb4a 	bl	80011a8 <LL_ADC_GetOffsetChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b1e:	fa93 f3a3 	rbit	r3, r3
 8001b22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001b36:	2320      	movs	r3, #32
 8001b38:	e004      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001b3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d105      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x32a>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0e9b      	lsrs	r3, r3, #26
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	e016      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x358>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b6a:	fa93 f3a3 	rbit	r3, r3
 8001b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001b7e:	2320      	movs	r3, #32
 8001b80:	e004      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d106      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	2102      	movs	r1, #2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fb1b 	bl	80011d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2103      	movs	r1, #3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff faff 	bl	80011a8 <LL_ADC_GetOffsetChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10a      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x396>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2103      	movs	r1, #3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff faf4 	bl	80011a8 <LL_ADC_GetOffsetChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	0e9b      	lsrs	r3, r3, #26
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	e017      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x3c6>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2103      	movs	r1, #3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fae9 	bl	80011a8 <LL_ADC_GetOffsetChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001be4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001bec:	2320      	movs	r3, #32
 8001bee:	e003      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d105      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x3de>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	0e9b      	lsrs	r3, r3, #26
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	e011      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x402>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c22:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	e003      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d106      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2103      	movs	r1, #3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fac6 	bl	80011d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fbcd 	bl	80013ec <LL_ADC_IsEnabled>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f040 813f 	bne.w	8001ed8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	6819      	ldr	r1, [r3, #0]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	461a      	mov	r2, r3
 8001c68:	f7ff fb3a 	bl	80012e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4a8e      	ldr	r2, [pc, #568]	; (8001eac <HAL_ADC_ConfigChannel+0x678>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	f040 8130 	bne.w	8001ed8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10b      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x46c>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0e9b      	lsrs	r3, r3, #26
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	2b09      	cmp	r3, #9
 8001c96:	bf94      	ite	ls
 8001c98:	2301      	movls	r3, #1
 8001c9a:	2300      	movhi	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	e019      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x4a0>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001cae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cb0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	e003      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001cbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	2b09      	cmp	r3, #9
 8001ccc:	bf94      	ite	ls
 8001cce:	2301      	movls	r3, #1
 8001cd0:	2300      	movhi	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d079      	beq.n	8001dcc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d107      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x4c0>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0e9b      	lsrs	r3, r3, #26
 8001cea:	3301      	adds	r3, #1
 8001cec:	069b      	lsls	r3, r3, #26
 8001cee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cf2:	e015      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x4ec>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cfc:	fa93 f3a3 	rbit	r3, r3
 8001d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d04:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001d0c:	2320      	movs	r3, #32
 8001d0e:	e003      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	069b      	lsls	r3, r3, #26
 8001d1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d109      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x50c>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0e9b      	lsrs	r3, r3, #26
 8001d32:	3301      	adds	r3, #1
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	2101      	movs	r1, #1
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	e017      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x53c>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d50:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001d58:	2320      	movs	r3, #32
 8001d5a:	e003      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	3301      	adds	r3, #1
 8001d66:	f003 031f 	and.w	r3, r3, #31
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d70:	ea42 0103 	orr.w	r1, r2, r3
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10a      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x562>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0e9b      	lsrs	r3, r3, #26
 8001d86:	3301      	adds	r3, #1
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	051b      	lsls	r3, r3, #20
 8001d94:	e018      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x594>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001dae:	2320      	movs	r3, #32
 8001db0:	e003      	b.n	8001dba <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f003 021f 	and.w	r2, r3, #31
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	e080      	b.n	8001ece <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d107      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x5b4>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	3301      	adds	r3, #1
 8001de0:	069b      	lsls	r3, r3, #26
 8001de2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001de6:	e015      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x5e0>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001e00:	2320      	movs	r3, #32
 8001e02:	e003      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	069b      	lsls	r3, r3, #26
 8001e10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d109      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x600>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	0e9b      	lsrs	r3, r3, #26
 8001e26:	3301      	adds	r3, #1
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	e017      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x630>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	61fb      	str	r3, [r7, #28]
  return result;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	e003      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	2101      	movs	r1, #1
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	ea42 0103 	orr.w	r1, r2, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10d      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x65c>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0e9b      	lsrs	r3, r3, #26
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	3b1e      	subs	r3, #30
 8001e88:	051b      	lsls	r3, r3, #20
 8001e8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	e01d      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x698>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	613b      	str	r3, [r7, #16]
  return result;
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d103      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001ea8:	2320      	movs	r3, #32
 8001eaa:	e005      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x684>
 8001eac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f003 021f 	and.w	r2, r3, #31
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3b1e      	subs	r3, #30
 8001ec6:	051b      	lsls	r3, r3, #20
 8001ec8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	6892      	ldr	r2, [r2, #8]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f7ff f9d8 	bl	8001288 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b3d      	ldr	r3, [pc, #244]	; (8001fd4 <HAL_ADC_ConfigChannel+0x7a0>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d06c      	beq.n	8001fbe <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ee4:	483c      	ldr	r0, [pc, #240]	; (8001fd8 <HAL_ADC_ConfigChannel+0x7a4>)
 8001ee6:	f7ff f92d 	bl	8001144 <LL_ADC_GetCommonPathInternalCh>
 8001eea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a3a      	ldr	r2, [pc, #232]	; (8001fdc <HAL_ADC_ConfigChannel+0x7a8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d127      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ef8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d121      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a35      	ldr	r2, [pc, #212]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7ac>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d157      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f16:	4619      	mov	r1, r3
 8001f18:	482f      	ldr	r0, [pc, #188]	; (8001fd8 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f1a:	f7ff f900 	bl	800111e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f1e:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <HAL_ADC_ConfigChannel+0x7b0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	099b      	lsrs	r3, r3, #6
 8001f24:	4a30      	ldr	r2, [pc, #192]	; (8001fe8 <HAL_ADC_ConfigChannel+0x7b4>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	099b      	lsrs	r3, r3, #6
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f38:	e002      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f9      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f46:	e03a      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a27      	ldr	r2, [pc, #156]	; (8001fec <HAL_ADC_ConfigChannel+0x7b8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d113      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x746>
 8001f52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10d      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7ac>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d12a      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f70:	4619      	mov	r1, r3
 8001f72:	4819      	ldr	r0, [pc, #100]	; (8001fd8 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f74:	f7ff f8d3 	bl	800111e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f78:	e021      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_ADC_ConfigChannel+0x7bc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d11c      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d116      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7ac>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d111      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <HAL_ADC_ConfigChannel+0x7a4>)
 8001fa6:	f7ff f8ba 	bl	800111e <LL_ADC_SetCommonPathInternalCh>
 8001faa:	e008      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb0:	f043 0220 	orr.w	r2, r3, #32
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	37d8      	adds	r7, #216	; 0xd8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	80080000 	.word	0x80080000
 8001fd8:	50040300 	.word	0x50040300
 8001fdc:	c7520000 	.word	0xc7520000
 8001fe0:	50040000 	.word	0x50040000
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	053e2d63 	.word	0x053e2d63
 8001fec:	cb840000 	.word	0xcb840000
 8001ff0:	80000001 	.word	0x80000001

08001ff4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff f9f1 	bl	80013ec <LL_ADC_IsEnabled>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d169      	bne.n	80020e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <ADC_Enable+0xfc>)
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00d      	beq.n	800203a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e055      	b.n	80020e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f9c0 	bl	80013c4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002044:	482b      	ldr	r0, [pc, #172]	; (80020f4 <ADC_Enable+0x100>)
 8002046:	f7ff f87d 	bl	8001144 <LL_ADC_GetCommonPathInternalCh>
 800204a:	4603      	mov	r3, r0
 800204c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002054:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <ADC_Enable+0x104>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	099b      	lsrs	r3, r3, #6
 800205a:	4a28      	ldr	r2, [pc, #160]	; (80020fc <ADC_Enable+0x108>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800206e:	e002      	b.n	8002076 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	3b01      	subs	r3, #1
 8002074:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f9      	bne.n	8002070 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800207c:	f7ff f80c 	bl	8001098 <HAL_GetTick>
 8002080:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002082:	e028      	b.n	80020d6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff f9af 	bl	80013ec <LL_ADC_IsEnabled>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d104      	bne.n	800209e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f993 	bl	80013c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800209e:	f7fe fffb 	bl	8001098 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d914      	bls.n	80020d6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d00d      	beq.n	80020d6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020be:	f043 0210 	orr.w	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	f043 0201 	orr.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e007      	b.n	80020e6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d1cf      	bne.n	8002084 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	8000003f 	.word	0x8000003f
 80020f4:	50040300 	.word	0x50040300
 80020f8:	20000008 	.word	0x20000008
 80020fc:	053e2d63 	.word	0x053e2d63

08002100 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002112:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002116:	2b00      	cmp	r3, #0
 8002118:	d14b      	bne.n	80021b2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d021      	beq.n	8002178 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff f866 	bl	800120a <LL_ADC_REG_IsTriggerSourceSWStart>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d032      	beq.n	80021aa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d12b      	bne.n	80021aa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002156:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d11f      	bne.n	80021aa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	655a      	str	r2, [r3, #84]	; 0x54
 8002176:	e018      	b.n	80021aa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d111      	bne.n	80021aa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d105      	bne.n	80021aa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a2:	f043 0201 	orr.w	r2, r3, #1
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7fe fb2c 	bl	8000808 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021b0:	e00e      	b.n	80021d0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f7ff fb2e 	bl	8001820 <HAL_ADC_ErrorCallback>
}
 80021c4:	e004      	b.n	80021d0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4798      	blx	r3
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f7fe faf6 	bl	80007d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	f043 0204 	orr.w	r2, r3, #4
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f7ff fb00 	bl	8001820 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002244:	4013      	ands	r3, r2
 8002246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225a:	4a04      	ldr	r2, [pc, #16]	; (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	60d3      	str	r3, [r2, #12]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <__NVIC_GetPriorityGrouping+0x18>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	f003 0307 	and.w	r3, r3, #7
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	2b00      	cmp	r3, #0
 800229c:	db0b      	blt.n	80022b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4907      	ldr	r1, [pc, #28]	; (80022c4 <__NVIC_EnableIRQ+0x38>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2001      	movs	r0, #1
 80022ae:	fa00 f202 	lsl.w	r2, r0, r2
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000e100 	.word	0xe000e100

080022c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	6039      	str	r1, [r7, #0]
 80022d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	db0a      	blt.n	80022f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	490c      	ldr	r1, [pc, #48]	; (8002314 <__NVIC_SetPriority+0x4c>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	0112      	lsls	r2, r2, #4
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	440b      	add	r3, r1
 80022ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f0:	e00a      	b.n	8002308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4908      	ldr	r1, [pc, #32]	; (8002318 <__NVIC_SetPriority+0x50>)
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	3b04      	subs	r3, #4
 8002300:	0112      	lsls	r2, r2, #4
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	440b      	add	r3, r1
 8002306:	761a      	strb	r2, [r3, #24]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000e100 	.word	0xe000e100
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f1c3 0307 	rsb	r3, r3, #7
 8002336:	2b04      	cmp	r3, #4
 8002338:	bf28      	it	cs
 800233a:	2304      	movcs	r3, #4
 800233c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3304      	adds	r3, #4
 8002342:	2b06      	cmp	r3, #6
 8002344:	d902      	bls.n	800234c <NVIC_EncodePriority+0x30>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3b03      	subs	r3, #3
 800234a:	e000      	b.n	800234e <NVIC_EncodePriority+0x32>
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	401a      	ands	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002364:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	43d9      	mvns	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	4313      	orrs	r3, r2
         );
}
 8002376:	4618      	mov	r0, r3
 8002378:	3724      	adds	r7, #36	; 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002394:	d301      	bcc.n	800239a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002396:	2301      	movs	r3, #1
 8002398:	e00f      	b.n	80023ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <SysTick_Config+0x40>)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a2:	210f      	movs	r1, #15
 80023a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023a8:	f7ff ff8e 	bl	80022c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <SysTick_Config+0x40>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b2:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <SysTick_Config+0x40>)
 80023b4:	2207      	movs	r2, #7
 80023b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	e000e010 	.word	0xe000e010

080023c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ff29 	bl	8002228 <__NVIC_SetPriorityGrouping>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023f0:	f7ff ff3e 	bl	8002270 <__NVIC_GetPriorityGrouping>
 80023f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	6978      	ldr	r0, [r7, #20]
 80023fc:	f7ff ff8e 	bl	800231c <NVIC_EncodePriority>
 8002400:	4602      	mov	r2, r0
 8002402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff5d 	bl	80022c8 <__NVIC_SetPriority>
}
 800240e:	bf00      	nop
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff31 	bl	800228c <__NVIC_EnableIRQ>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff ffa2 	bl	8002384 <SysTick_Config>
 8002440:	4603      	mov	r3, r0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e014      	b.n	8002486 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	791b      	ldrb	r3, [r3, #4]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7fe fca3 	bl	8000db8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	795b      	ldrb	r3, [r3, #5]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_DAC_Start_DMA+0x1e>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e0ab      	b.n	8002606 <HAL_DAC_Start_DMA+0x176>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2202      	movs	r2, #2
 80024b8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d12f      	bne.n	8002520 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4a52      	ldr	r2, [pc, #328]	; (8002610 <HAL_DAC_Start_DMA+0x180>)
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a51      	ldr	r2, [pc, #324]	; (8002614 <HAL_DAC_Start_DMA+0x184>)
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4a50      	ldr	r2, [pc, #320]	; (8002618 <HAL_DAC_Start_DMA+0x188>)
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024e6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d013      	beq.n	8002516 <HAL_DAC_Start_DMA+0x86>
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d845      	bhi.n	8002580 <HAL_DAC_Start_DMA+0xf0>
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_DAC_Start_DMA+0x72>
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d005      	beq.n	800250c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002500:	e03e      	b.n	8002580 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3308      	adds	r3, #8
 8002508:	613b      	str	r3, [r7, #16]
        break;
 800250a:	e03c      	b.n	8002586 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	330c      	adds	r3, #12
 8002512:	613b      	str	r3, [r7, #16]
        break;
 8002514:	e037      	b.n	8002586 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3310      	adds	r3, #16
 800251c:	613b      	str	r3, [r7, #16]
        break;
 800251e:	e032      	b.n	8002586 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4a3d      	ldr	r2, [pc, #244]	; (800261c <HAL_DAC_Start_DMA+0x18c>)
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4a3c      	ldr	r2, [pc, #240]	; (8002620 <HAL_DAC_Start_DMA+0x190>)
 800252e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4a3b      	ldr	r2, [pc, #236]	; (8002624 <HAL_DAC_Start_DMA+0x194>)
 8002536:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002546:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	2b08      	cmp	r3, #8
 800254c:	d013      	beq.n	8002576 <HAL_DAC_Start_DMA+0xe6>
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	2b08      	cmp	r3, #8
 8002552:	d817      	bhi.n	8002584 <HAL_DAC_Start_DMA+0xf4>
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_DAC_Start_DMA+0xd2>
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	2b04      	cmp	r3, #4
 800255e:	d005      	beq.n	800256c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002560:	e010      	b.n	8002584 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3314      	adds	r3, #20
 8002568:	613b      	str	r3, [r7, #16]
        break;
 800256a:	e00c      	b.n	8002586 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3318      	adds	r3, #24
 8002572:	613b      	str	r3, [r7, #16]
        break;
 8002574:	e007      	b.n	8002586 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	331c      	adds	r3, #28
 800257c:	613b      	str	r3, [r7, #16]
        break;
 800257e:	e002      	b.n	8002586 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002580:	bf00      	nop
 8002582:	e000      	b.n	8002586 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002584:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d111      	bne.n	80025b0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800259a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6898      	ldr	r0, [r3, #8]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	f000 fab9 	bl	8002b1c <HAL_DMA_Start_IT>
 80025aa:	4603      	mov	r3, r0
 80025ac:	75fb      	strb	r3, [r7, #23]
 80025ae:	e010      	b.n	80025d2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80025be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	68d8      	ldr	r0, [r3, #12]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	f000 faa7 	bl	8002b1c <HAL_DMA_Start_IT>
 80025ce:	4603      	mov	r3, r0
 80025d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10c      	bne.n	80025f8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6819      	ldr	r1, [r3, #0]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2201      	movs	r2, #1
 80025ec:	409a      	lsls	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e005      	b.n	8002604 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f043 0204 	orr.w	r2, r3, #4
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002604:	7dfb      	ldrb	r3, [r7, #23]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	08002899 	.word	0x08002899
 8002614:	080028bb 	.word	0x080028bb
 8002618:	080028d7 	.word	0x080028d7
 800261c:	08002941 	.word	0x08002941
 8002620:	08002963 	.word	0x08002963
 8002624:	0800297f 	.word	0x0800297f

08002628 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	795b      	ldrb	r3, [r3, #5]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_DAC_ConfigChannel+0x1c>
 800267c:	2302      	movs	r3, #2
 800267e:	e107      	b.n	8002890 <HAL_DAC_ConfigChannel+0x22c>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2202      	movs	r2, #2
 800268a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b04      	cmp	r3, #4
 8002692:	d174      	bne.n	800277e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002694:	f7fe fd00 	bl	8001098 <HAL_GetTick>
 8002698:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d134      	bne.n	800270a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80026a0:	e011      	b.n	80026c6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80026a2:	f7fe fcf9 	bl	8001098 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d90a      	bls.n	80026c6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	f043 0208 	orr.w	r2, r3, #8
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2203      	movs	r2, #3
 80026c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e0e4      	b.n	8002890 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1e6      	bne.n	80026a2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80026d4:	2001      	movs	r0, #1
 80026d6:	f7fe fceb 	bl	80010b0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	6992      	ldr	r2, [r2, #24]
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
 80026e4:	e01e      	b.n	8002724 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80026e6:	f7fe fcd7 	bl	8001098 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d90a      	bls.n	800270a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f043 0208 	orr.w	r2, r3, #8
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2203      	movs	r2, #3
 8002704:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e0c2      	b.n	8002890 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002710:	2b00      	cmp	r3, #0
 8002712:	dbe8      	blt.n	80026e6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002714:	2001      	movs	r0, #1
 8002716:	f7fe fccb 	bl	80010b0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	6992      	ldr	r2, [r2, #24]
 8002722:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	ea02 0103 	and.w	r1, r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	69da      	ldr	r2, [r3, #28]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	409a      	lsls	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	21ff      	movs	r1, #255	; 0xff
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	ea02 0103 	and.w	r1, r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	6a1a      	ldr	r2, [r3, #32]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	409a      	lsls	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d11d      	bne.n	80027c2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	221f      	movs	r2, #31
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2207      	movs	r2, #7
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	400a      	ands	r2, r1
 8002826:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	f640 72fc 	movw	r2, #4092	; 0xffc
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6819      	ldr	r1, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	22c0      	movs	r2, #192	; 0xc0
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43da      	mvns	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	400a      	ands	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3720      	adds	r7, #32
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7ff febe 	bl	8002628 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2201      	movs	r2, #1
 80028b0:	711a      	strb	r2, [r3, #4]
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f7ff feb7 	bl	800263c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f043 0204 	orr.w	r2, r3, #4
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7ff fead 	bl	8002650 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	711a      	strb	r2, [r3, #4]
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7ff ffd8 	bl	8002904 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	711a      	strb	r2, [r3, #4]
}
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f7ff ffd1 	bl	8002918 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f043 0204 	orr.w	r2, r3, #4
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7ff ffc7 	bl	800292c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	711a      	strb	r2, [r3, #4]
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e098      	b.n	8002af0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b4d      	ldr	r3, [pc, #308]	; (8002afc <HAL_DMA_Init+0x150>)
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d80f      	bhi.n	80029ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	4b4b      	ldr	r3, [pc, #300]	; (8002b00 <HAL_DMA_Init+0x154>)
 80029d2:	4413      	add	r3, r2
 80029d4:	4a4b      	ldr	r2, [pc, #300]	; (8002b04 <HAL_DMA_Init+0x158>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	009a      	lsls	r2, r3, #2
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a48      	ldr	r2, [pc, #288]	; (8002b08 <HAL_DMA_Init+0x15c>)
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
 80029e8:	e00e      	b.n	8002a08 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	4b46      	ldr	r3, [pc, #280]	; (8002b0c <HAL_DMA_Init+0x160>)
 80029f2:	4413      	add	r3, r2
 80029f4:	4a43      	ldr	r2, [pc, #268]	; (8002b04 <HAL_DMA_Init+0x158>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	091b      	lsrs	r3, r3, #4
 80029fc:	009a      	lsls	r2, r3, #2
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a42      	ldr	r2, [pc, #264]	; (8002b10 <HAL_DMA_Init+0x164>)
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a62:	d039      	beq.n	8002ad8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	4a27      	ldr	r2, [pc, #156]	; (8002b08 <HAL_DMA_Init+0x15c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d11a      	bne.n	8002aa4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a6e:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <HAL_DMA_Init+0x168>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f003 031c 	and.w	r3, r3, #28
 8002a7a:	210f      	movs	r1, #15
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	4924      	ldr	r1, [pc, #144]	; (8002b14 <HAL_DMA_Init+0x168>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a88:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_DMA_Init+0x168>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	f003 031c 	and.w	r3, r3, #28
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	491d      	ldr	r1, [pc, #116]	; (8002b14 <HAL_DMA_Init+0x168>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]
 8002aa2:	e019      	b.n	8002ad8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <HAL_DMA_Init+0x16c>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	f003 031c 	and.w	r3, r3, #28
 8002ab0:	210f      	movs	r1, #15
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	4917      	ldr	r1, [pc, #92]	; (8002b18 <HAL_DMA_Init+0x16c>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <HAL_DMA_Init+0x16c>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f003 031c 	and.w	r3, r3, #28
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	4911      	ldr	r1, [pc, #68]	; (8002b18 <HAL_DMA_Init+0x16c>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	40020407 	.word	0x40020407
 8002b00:	bffdfff8 	.word	0xbffdfff8
 8002b04:	cccccccd 	.word	0xcccccccd
 8002b08:	40020000 	.word	0x40020000
 8002b0c:	bffdfbf8 	.word	0xbffdfbf8
 8002b10:	40020400 	.word	0x40020400
 8002b14:	400200a8 	.word	0x400200a8
 8002b18:	400204a8 	.word	0x400204a8

08002b1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_DMA_Start_IT+0x20>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e04b      	b.n	8002bd4 <HAL_DMA_Start_IT+0xb8>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d13a      	bne.n	8002bc6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f8e0 	bl	8002d3a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 020e 	orr.w	r2, r2, #14
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e00f      	b.n	8002bb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0204 	bic.w	r2, r2, #4
 8002ba2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 020a 	orr.w	r2, r2, #10
 8002bb2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e005      	b.n	8002bd2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf8:	f003 031c 	and.w	r3, r3, #28
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d026      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x7a>
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d021      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d107      	bne.n	8002c30 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0204 	bic.w	r2, r2, #4
 8002c2e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c34:	f003 021c 	and.w	r2, r3, #28
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	2104      	movs	r1, #4
 8002c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c42:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d071      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002c54:	e06c      	b.n	8002d30 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f003 031c 	and.w	r3, r3, #28
 8002c5e:	2202      	movs	r2, #2
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d02e      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xec>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d029      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10b      	bne.n	8002c9a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 020a 	bic.w	r2, r2, #10
 8002c90:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f003 021c 	and.w	r2, r3, #28
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d038      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cc6:	e033      	b.n	8002d30 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	f003 031c 	and.w	r3, r3, #28
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d02a      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x156>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d025      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 020e 	bic.w	r2, r2, #14
 8002cf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f003 021c 	and.w	r2, r3, #28
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	2101      	movs	r1, #1
 8002d04:	fa01 f202 	lsl.w	r2, r1, r2
 8002d08:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
}
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	f003 021c 	and.w	r2, r3, #28
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d108      	bne.n	8002d7e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d7c:	e007      	b.n	8002d8e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	60da      	str	r2, [r3, #12]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002daa:	e154      	b.n	8003056 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	2101      	movs	r1, #1
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	4013      	ands	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8146 	beq.w	8003050 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d005      	beq.n	8002ddc <HAL_GPIO_Init+0x40>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d130      	bne.n	8002e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	2203      	movs	r2, #3
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e12:	2201      	movs	r2, #1
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	f003 0201 	and.w	r2, r3, #1
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d017      	beq.n	8002e7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	2203      	movs	r2, #3
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d123      	bne.n	8002ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	08da      	lsrs	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3208      	adds	r2, #8
 8002e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	08da      	lsrs	r2, r3, #3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3208      	adds	r2, #8
 8002ec8:	6939      	ldr	r1, [r7, #16]
 8002eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	2203      	movs	r2, #3
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0203 	and.w	r2, r3, #3
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80a0 	beq.w	8003050 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f10:	4b58      	ldr	r3, [pc, #352]	; (8003074 <HAL_GPIO_Init+0x2d8>)
 8002f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f14:	4a57      	ldr	r2, [pc, #348]	; (8003074 <HAL_GPIO_Init+0x2d8>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6613      	str	r3, [r2, #96]	; 0x60
 8002f1c:	4b55      	ldr	r3, [pc, #340]	; (8003074 <HAL_GPIO_Init+0x2d8>)
 8002f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f28:	4a53      	ldr	r2, [pc, #332]	; (8003078 <HAL_GPIO_Init+0x2dc>)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	089b      	lsrs	r3, r3, #2
 8002f2e:	3302      	adds	r3, #2
 8002f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f52:	d019      	beq.n	8002f88 <HAL_GPIO_Init+0x1ec>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a49      	ldr	r2, [pc, #292]	; (800307c <HAL_GPIO_Init+0x2e0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d013      	beq.n	8002f84 <HAL_GPIO_Init+0x1e8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a48      	ldr	r2, [pc, #288]	; (8003080 <HAL_GPIO_Init+0x2e4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d00d      	beq.n	8002f80 <HAL_GPIO_Init+0x1e4>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a47      	ldr	r2, [pc, #284]	; (8003084 <HAL_GPIO_Init+0x2e8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d007      	beq.n	8002f7c <HAL_GPIO_Init+0x1e0>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a46      	ldr	r2, [pc, #280]	; (8003088 <HAL_GPIO_Init+0x2ec>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d101      	bne.n	8002f78 <HAL_GPIO_Init+0x1dc>
 8002f74:	2304      	movs	r3, #4
 8002f76:	e008      	b.n	8002f8a <HAL_GPIO_Init+0x1ee>
 8002f78:	2307      	movs	r3, #7
 8002f7a:	e006      	b.n	8002f8a <HAL_GPIO_Init+0x1ee>
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e004      	b.n	8002f8a <HAL_GPIO_Init+0x1ee>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e002      	b.n	8002f8a <HAL_GPIO_Init+0x1ee>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <HAL_GPIO_Init+0x1ee>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	f002 0203 	and.w	r2, r2, #3
 8002f90:	0092      	lsls	r2, r2, #2
 8002f92:	4093      	lsls	r3, r2
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f9a:	4937      	ldr	r1, [pc, #220]	; (8003078 <HAL_GPIO_Init+0x2dc>)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fa8:	4b38      	ldr	r3, [pc, #224]	; (800308c <HAL_GPIO_Init+0x2f0>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fcc:	4a2f      	ldr	r2, [pc, #188]	; (800308c <HAL_GPIO_Init+0x2f0>)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fd2:	4b2e      	ldr	r3, [pc, #184]	; (800308c <HAL_GPIO_Init+0x2f0>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ff6:	4a25      	ldr	r2, [pc, #148]	; (800308c <HAL_GPIO_Init+0x2f0>)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ffc:	4b23      	ldr	r3, [pc, #140]	; (800308c <HAL_GPIO_Init+0x2f0>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	43db      	mvns	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003020:	4a1a      	ldr	r2, [pc, #104]	; (800308c <HAL_GPIO_Init+0x2f0>)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003026:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_GPIO_Init+0x2f0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	43db      	mvns	r3, r3
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800304a:	4a10      	ldr	r2, [pc, #64]	; (800308c <HAL_GPIO_Init+0x2f0>)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	3301      	adds	r3, #1
 8003054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	f47f aea3 	bne.w	8002dac <HAL_GPIO_Init+0x10>
  }
}
 8003066:	bf00      	nop
 8003068:	bf00      	nop
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40021000 	.word	0x40021000
 8003078:	40010000 	.word	0x40010000
 800307c:	48000400 	.word	0x48000400
 8003080:	48000800 	.word	0x48000800
 8003084:	48000c00 	.word	0x48000c00
 8003088:	48001000 	.word	0x48001000
 800308c:	40010400 	.word	0x40010400

08003090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	807b      	strh	r3, [r7, #2]
 800309c:	4613      	mov	r3, r2
 800309e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a0:	787b      	ldrb	r3, [r7, #1]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030a6:	887a      	ldrh	r2, [r7, #2]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030ac:	e002      	b.n	80030b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4013      	ands	r3, r2
 80030d8:	041a      	lsls	r2, r3, #16
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	43d9      	mvns	r1, r3
 80030de:	887b      	ldrh	r3, [r7, #2]
 80030e0:	400b      	ands	r3, r1
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	619a      	str	r2, [r3, #24]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <HAL_PWREx_GetVoltageRange+0x18>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40007000 	.word	0x40007000

08003110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800311e:	d130      	bne.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003120:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312c:	d038      	beq.n	80031a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800312e:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003136:	4a1e      	ldr	r2, [pc, #120]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800313c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800313e:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2232      	movs	r2, #50	; 0x32
 8003144:	fb02 f303 	mul.w	r3, r2, r3
 8003148:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	0c9b      	lsrs	r3, r3, #18
 8003150:	3301      	adds	r3, #1
 8003152:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003154:	e002      	b.n	800315c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3b01      	subs	r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003168:	d102      	bne.n	8003170 <HAL_PWREx_ControlVoltageScaling+0x60>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f2      	bne.n	8003156 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003170:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317c:	d110      	bne.n	80031a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e00f      	b.n	80031a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800318a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318e:	d007      	beq.n	80031a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003190:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003198:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800319e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40007000 	.word	0x40007000
 80031b4:	20000008 	.word	0x20000008
 80031b8:	431bde83 	.word	0x431bde83

080031bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e3fe      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ce:	4ba1      	ldr	r3, [pc, #644]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031d8:	4b9e      	ldr	r3, [pc, #632]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 80e4 	beq.w	80033b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <HAL_RCC_OscConfig+0x4a>
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	2b0c      	cmp	r3, #12
 80031fa:	f040 808b 	bne.w	8003314 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b01      	cmp	r3, #1
 8003202:	f040 8087 	bne.w	8003314 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003206:	4b93      	ldr	r3, [pc, #588]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_RCC_OscConfig+0x62>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e3d6      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1a      	ldr	r2, [r3, #32]
 8003222:	4b8c      	ldr	r3, [pc, #560]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d004      	beq.n	8003238 <HAL_RCC_OscConfig+0x7c>
 800322e:	4b89      	ldr	r3, [pc, #548]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003236:	e005      	b.n	8003244 <HAL_RCC_OscConfig+0x88>
 8003238:	4b86      	ldr	r3, [pc, #536]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 800323a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003244:	4293      	cmp	r3, r2
 8003246:	d223      	bcs.n	8003290 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fd53 	bl	8003cf8 <RCC_SetFlashLatencyFromMSIRange>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e3b7      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800325c:	4b7d      	ldr	r3, [pc, #500]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a7c      	ldr	r2, [pc, #496]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003262:	f043 0308 	orr.w	r3, r3, #8
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	4b7a      	ldr	r3, [pc, #488]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	4977      	ldr	r1, [pc, #476]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800327a:	4b76      	ldr	r3, [pc, #472]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	4972      	ldr	r1, [pc, #456]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
 800328e:	e025      	b.n	80032dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003290:	4b70      	ldr	r3, [pc, #448]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a6f      	ldr	r2, [pc, #444]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003296:	f043 0308 	orr.w	r3, r3, #8
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b6d      	ldr	r3, [pc, #436]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	496a      	ldr	r1, [pc, #424]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ae:	4b69      	ldr	r3, [pc, #420]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	4965      	ldr	r1, [pc, #404]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d109      	bne.n	80032dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fd13 	bl	8003cf8 <RCC_SetFlashLatencyFromMSIRange>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e377      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032dc:	f000 fc80 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b5c      	ldr	r3, [pc, #368]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	495a      	ldr	r1, [pc, #360]	; (8003458 <HAL_RCC_OscConfig+0x29c>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
 80032f8:	4a58      	ldr	r2, [pc, #352]	; (800345c <HAL_RCC_OscConfig+0x2a0>)
 80032fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032fc:	4b58      	ldr	r3, [pc, #352]	; (8003460 <HAL_RCC_OscConfig+0x2a4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd fe79 	bl	8000ff8 <HAL_InitTick>
 8003306:	4603      	mov	r3, r0
 8003308:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d052      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	e35b      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d032      	beq.n	8003382 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800331c:	4b4d      	ldr	r3, [pc, #308]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a4c      	ldr	r2, [pc, #304]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003328:	f7fd feb6 	bl	8001098 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003330:	f7fd feb2 	bl	8001098 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e344      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003342:	4b44      	ldr	r3, [pc, #272]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800334e:	4b41      	ldr	r3, [pc, #260]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a40      	ldr	r2, [pc, #256]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003354:	f043 0308 	orr.w	r3, r3, #8
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4b3e      	ldr	r3, [pc, #248]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	493b      	ldr	r1, [pc, #236]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800336c:	4b39      	ldr	r3, [pc, #228]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	4936      	ldr	r1, [pc, #216]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 800337c:	4313      	orrs	r3, r2
 800337e:	604b      	str	r3, [r1, #4]
 8003380:	e01a      	b.n	80033b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003382:	4b34      	ldr	r3, [pc, #208]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a33      	ldr	r2, [pc, #204]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800338e:	f7fd fe83 	bl	8001098 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003396:	f7fd fe7f 	bl	8001098 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e311      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033a8:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f0      	bne.n	8003396 <HAL_RCC_OscConfig+0x1da>
 80033b4:	e000      	b.n	80033b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d074      	beq.n	80034ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d005      	beq.n	80033d6 <HAL_RCC_OscConfig+0x21a>
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b0c      	cmp	r3, #12
 80033ce:	d10e      	bne.n	80033ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d10b      	bne.n	80033ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d6:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d064      	beq.n	80034ac <HAL_RCC_OscConfig+0x2f0>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d160      	bne.n	80034ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e2ee      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f6:	d106      	bne.n	8003406 <HAL_RCC_OscConfig+0x24a>
 80033f8:	4b16      	ldr	r3, [pc, #88]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a15      	ldr	r2, [pc, #84]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 80033fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	e01d      	b.n	8003442 <HAL_RCC_OscConfig+0x286>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800340e:	d10c      	bne.n	800342a <HAL_RCC_OscConfig+0x26e>
 8003410:	4b10      	ldr	r3, [pc, #64]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a0f      	ldr	r2, [pc, #60]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003416:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0c      	ldr	r2, [pc, #48]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	e00b      	b.n	8003442 <HAL_RCC_OscConfig+0x286>
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a09      	ldr	r2, [pc, #36]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b07      	ldr	r3, [pc, #28]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a06      	ldr	r2, [pc, #24]	; (8003454 <HAL_RCC_OscConfig+0x298>)
 800343c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003440:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d01c      	beq.n	8003484 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344a:	f7fd fe25 	bl	8001098 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003450:	e011      	b.n	8003476 <HAL_RCC_OscConfig+0x2ba>
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	08004920 	.word	0x08004920
 800345c:	20000008 	.word	0x20000008
 8003460:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003464:	f7fd fe18 	bl	8001098 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	; 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e2aa      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003476:	4baf      	ldr	r3, [pc, #700]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x2a8>
 8003482:	e014      	b.n	80034ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fd fe08 	bl	8001098 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800348c:	f7fd fe04 	bl	8001098 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	; 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e296      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800349e:	4ba5      	ldr	r3, [pc, #660]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x2d0>
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d060      	beq.n	800357c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d005      	beq.n	80034cc <HAL_RCC_OscConfig+0x310>
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b0c      	cmp	r3, #12
 80034c4:	d119      	bne.n	80034fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d116      	bne.n	80034fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034cc:	4b99      	ldr	r3, [pc, #612]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_OscConfig+0x328>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e273      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e4:	4b93      	ldr	r3, [pc, #588]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	4990      	ldr	r1, [pc, #576]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034f8:	e040      	b.n	800357c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d023      	beq.n	800354a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003502:	4b8c      	ldr	r3, [pc, #560]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a8b      	ldr	r2, [pc, #556]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 8003508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fd fdc3 	bl	8001098 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003516:	f7fd fdbf 	bl	8001098 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e251      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003528:	4b82      	ldr	r3, [pc, #520]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003534:	4b7f      	ldr	r3, [pc, #508]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	497c      	ldr	r1, [pc, #496]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
 8003548:	e018      	b.n	800357c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354a:	4b7a      	ldr	r3, [pc, #488]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a79      	ldr	r2, [pc, #484]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 8003550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fd fd9f 	bl	8001098 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355e:	f7fd fd9b 	bl	8001098 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e22d      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003570:	4b70      	ldr	r3, [pc, #448]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f0      	bne.n	800355e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d03c      	beq.n	8003602 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01c      	beq.n	80035ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003590:	4b68      	ldr	r3, [pc, #416]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 8003592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003596:	4a67      	ldr	r2, [pc, #412]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fd fd7a 	bl	8001098 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fd fd76 	bl	8001098 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e208      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035ba:	4b5e      	ldr	r3, [pc, #376]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 80035bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0ef      	beq.n	80035a8 <HAL_RCC_OscConfig+0x3ec>
 80035c8:	e01b      	b.n	8003602 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ca:	4b5a      	ldr	r3, [pc, #360]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 80035cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d0:	4a58      	ldr	r2, [pc, #352]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035da:	f7fd fd5d 	bl	8001098 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e2:	f7fd fd59 	bl	8001098 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e1eb      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035f4:	4b4f      	ldr	r3, [pc, #316]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 80035f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1ef      	bne.n	80035e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80a6 	beq.w	800375c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003610:	2300      	movs	r3, #0
 8003612:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003614:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10d      	bne.n	800363c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003620:	4b44      	ldr	r3, [pc, #272]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003624:	4a43      	ldr	r2, [pc, #268]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 8003626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362a:	6593      	str	r3, [r2, #88]	; 0x58
 800362c:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003638:	2301      	movs	r3, #1
 800363a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800363c:	4b3e      	ldr	r3, [pc, #248]	; (8003738 <HAL_RCC_OscConfig+0x57c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d118      	bne.n	800367a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003648:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_RCC_OscConfig+0x57c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a3a      	ldr	r2, [pc, #232]	; (8003738 <HAL_RCC_OscConfig+0x57c>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003654:	f7fd fd20 	bl	8001098 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365c:	f7fd fd1c 	bl	8001098 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e1ae      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800366e:	4b32      	ldr	r3, [pc, #200]	; (8003738 <HAL_RCC_OscConfig+0x57c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d108      	bne.n	8003694 <HAL_RCC_OscConfig+0x4d8>
 8003682:	4b2c      	ldr	r3, [pc, #176]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	4a2a      	ldr	r2, [pc, #168]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003692:	e024      	b.n	80036de <HAL_RCC_OscConfig+0x522>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b05      	cmp	r3, #5
 800369a:	d110      	bne.n	80036be <HAL_RCC_OscConfig+0x502>
 800369c:	4b25      	ldr	r3, [pc, #148]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	4a24      	ldr	r2, [pc, #144]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ac:	4b21      	ldr	r3, [pc, #132]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b2:	4a20      	ldr	r2, [pc, #128]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036bc:	e00f      	b.n	80036de <HAL_RCC_OscConfig+0x522>
 80036be:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c4:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ce:	4b19      	ldr	r3, [pc, #100]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	4a17      	ldr	r2, [pc, #92]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 80036d6:	f023 0304 	bic.w	r3, r3, #4
 80036da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d016      	beq.n	8003714 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fd fcd7 	bl	8001098 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fd fcd3 	bl	8001098 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e163      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_OscConfig+0x578>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0ed      	beq.n	80036ee <HAL_RCC_OscConfig+0x532>
 8003712:	e01a      	b.n	800374a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fd fcc0 	bl	8001098 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800371a:	e00f      	b.n	800373c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fd fcbc 	bl	8001098 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d906      	bls.n	800373c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e14c      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000
 8003738:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800373c:	4ba5      	ldr	r3, [pc, #660]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1e8      	bne.n	800371c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800374a:	7ffb      	ldrb	r3, [r7, #31]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d105      	bne.n	800375c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003750:	4ba0      	ldr	r3, [pc, #640]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003754:	4a9f      	ldr	r2, [pc, #636]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 8003756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d03c      	beq.n	80037e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01c      	beq.n	80037aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003770:	4b98      	ldr	r3, [pc, #608]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 8003772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003776:	4a97      	ldr	r2, [pc, #604]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fd fc8a 	bl	8001098 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003788:	f7fd fc86 	bl	8001098 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e118      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800379a:	4b8e      	ldr	r3, [pc, #568]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 800379c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ef      	beq.n	8003788 <HAL_RCC_OscConfig+0x5cc>
 80037a8:	e01b      	b.n	80037e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037aa:	4b8a      	ldr	r3, [pc, #552]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 80037ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b0:	4a88      	ldr	r2, [pc, #544]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ba:	f7fd fc6d 	bl	8001098 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037c2:	f7fd fc69 	bl	8001098 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e0fb      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037d4:	4b7f      	ldr	r3, [pc, #508]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 80037d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1ef      	bne.n	80037c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80ef 	beq.w	80039ca <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	f040 80c5 	bne.w	8003980 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037f6:	4b77      	ldr	r3, [pc, #476]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 0203 	and.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	429a      	cmp	r2, r3
 8003808:	d12c      	bne.n	8003864 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	3b01      	subs	r3, #1
 8003816:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d123      	bne.n	8003864 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003826:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d11b      	bne.n	8003864 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d113      	bne.n	8003864 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	3b01      	subs	r3, #1
 800384a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d109      	bne.n	8003864 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	3b01      	subs	r3, #1
 800385e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d067      	beq.n	8003934 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d062      	beq.n	8003930 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800386a:	4b5a      	ldr	r3, [pc, #360]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e0a8      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800387a:	4b56      	ldr	r3, [pc, #344]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a55      	ldr	r2, [pc, #340]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 8003880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003884:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003886:	f7fd fc07 	bl	8001098 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388e:	f7fd fc03 	bl	8001098 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e095      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a0:	4b4c      	ldr	r3, [pc, #304]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f0      	bne.n	800388e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ac:	4b49      	ldr	r3, [pc, #292]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	4b49      	ldr	r3, [pc, #292]	; (80039d8 <HAL_RCC_OscConfig+0x81c>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038bc:	3a01      	subs	r2, #1
 80038be:	0112      	lsls	r2, r2, #4
 80038c0:	4311      	orrs	r1, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038c6:	0212      	lsls	r2, r2, #8
 80038c8:	4311      	orrs	r1, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038ce:	0852      	lsrs	r2, r2, #1
 80038d0:	3a01      	subs	r2, #1
 80038d2:	0552      	lsls	r2, r2, #21
 80038d4:	4311      	orrs	r1, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038da:	0852      	lsrs	r2, r2, #1
 80038dc:	3a01      	subs	r2, #1
 80038de:	0652      	lsls	r2, r2, #25
 80038e0:	4311      	orrs	r1, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038e6:	06d2      	lsls	r2, r2, #27
 80038e8:	430a      	orrs	r2, r1
 80038ea:	493a      	ldr	r1, [pc, #232]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038f0:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a37      	ldr	r2, [pc, #220]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 80038f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038fc:	4b35      	ldr	r3, [pc, #212]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	4a34      	ldr	r2, [pc, #208]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 8003902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003906:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003908:	f7fd fbc6 	bl	8001098 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003910:	f7fd fbc2 	bl	8001098 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e054      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003922:	4b2c      	ldr	r3, [pc, #176]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800392e:	e04c      	b.n	80039ca <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e04b      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003934:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d144      	bne.n	80039ca <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003940:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a23      	ldr	r2, [pc, #140]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 8003946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800394a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800394c:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4a20      	ldr	r2, [pc, #128]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 8003952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003956:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003958:	f7fd fb9e 	bl	8001098 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7fd fb9a 	bl	8001098 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e02c      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003972:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x7a4>
 800397e:	e024      	b.n	80039ca <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b0c      	cmp	r3, #12
 8003984:	d01f      	beq.n	80039c6 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 800398c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003992:	f7fd fb81 	bl	8001098 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399a:	f7fd fb7d 	bl	8001098 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e00f      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f0      	bne.n	800399a <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	4905      	ldr	r1, [pc, #20]	; (80039d4 <HAL_RCC_OscConfig+0x818>)
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <HAL_RCC_OscConfig+0x820>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	60cb      	str	r3, [r1, #12]
 80039c4:	e001      	b.n	80039ca <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3720      	adds	r7, #32
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40021000 	.word	0x40021000
 80039d8:	019d808c 	.word	0x019d808c
 80039dc:	feeefffc 	.word	0xfeeefffc

080039e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0e7      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f4:	4b75      	ldr	r3, [pc, #468]	; (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d910      	bls.n	8003a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b72      	ldr	r3, [pc, #456]	; (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 0207 	bic.w	r2, r3, #7
 8003a0a:	4970      	ldr	r1, [pc, #448]	; (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b6e      	ldr	r3, [pc, #440]	; (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0cf      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d010      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	4b66      	ldr	r3, [pc, #408]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d908      	bls.n	8003a52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a40:	4b63      	ldr	r3, [pc, #396]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4960      	ldr	r1, [pc, #384]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d04c      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a66:	4b5a      	ldr	r3, [pc, #360]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d121      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e0a6      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a7e:	4b54      	ldr	r3, [pc, #336]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d115      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e09a      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a96:	4b4e      	ldr	r3, [pc, #312]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e08e      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa6:	4b4a      	ldr	r3, [pc, #296]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e086      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ab6:	4b46      	ldr	r3, [pc, #280]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f023 0203 	bic.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4943      	ldr	r1, [pc, #268]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac8:	f7fd fae6 	bl	8001098 <HAL_GetTick>
 8003acc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad0:	f7fd fae2 	bl	8001098 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e06e      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	4b3a      	ldr	r3, [pc, #232]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 020c 	and.w	r2, r3, #12
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d1eb      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d010      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	4b31      	ldr	r3, [pc, #196]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d208      	bcs.n	8003b26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b14:	4b2e      	ldr	r3, [pc, #184]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	492b      	ldr	r1, [pc, #172]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b26:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d210      	bcs.n	8003b56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b34:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 0207 	bic.w	r2, r3, #7
 8003b3c:	4923      	ldr	r1, [pc, #140]	; (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b44:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d001      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e036      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b62:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	4918      	ldr	r1, [pc, #96]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d009      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b80:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4910      	ldr	r1, [pc, #64]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b94:	f000 f824 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	490b      	ldr	r1, [pc, #44]	; (8003bd4 <HAL_RCC_ClockConfig+0x1f4>)
 8003ba6:	5ccb      	ldrb	r3, [r1, r3]
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb0:	4a09      	ldr	r2, [pc, #36]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f8>)
 8003bb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <HAL_RCC_ClockConfig+0x1fc>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fd fa1d 	bl	8000ff8 <HAL_InitTick>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bc2:	7afb      	ldrb	r3, [r7, #11]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40022000 	.word	0x40022000
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	08004920 	.word	0x08004920
 8003bd8:	20000008 	.word	0x20000008
 8003bdc:	2000000c 	.word	0x2000000c

08003be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b089      	sub	sp, #36	; 0x24
 8003be4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bee:	4b3e      	ldr	r3, [pc, #248]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bf8:	4b3b      	ldr	r3, [pc, #236]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x34>
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b0c      	cmp	r3, #12
 8003c0c:	d121      	bne.n	8003c52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d11e      	bne.n	8003c52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c14:	4b34      	ldr	r3, [pc, #208]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d107      	bne.n	8003c30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c20:	4b31      	ldr	r3, [pc, #196]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	e005      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c30:	4b2d      	ldr	r3, [pc, #180]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c3c:	4a2b      	ldr	r2, [pc, #172]	; (8003cec <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10d      	bne.n	8003c68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d102      	bne.n	8003c5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c58:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c5a:	61bb      	str	r3, [r7, #24]
 8003c5c:	e004      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c64:	4b23      	ldr	r3, [pc, #140]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b0c      	cmp	r3, #12
 8003c6c:	d134      	bne.n	8003cd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d003      	beq.n	8003c86 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d003      	beq.n	8003c8c <HAL_RCC_GetSysClockFreq+0xac>
 8003c84:	e005      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c86:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c88:	617b      	str	r3, [r7, #20]
      break;
 8003c8a:	e005      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c8c:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c8e:	617b      	str	r3, [r7, #20]
      break;
 8003c90:	e002      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	617b      	str	r3, [r7, #20]
      break;
 8003c96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c98:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	fb02 f203 	mul.w	r2, r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	0e5b      	lsrs	r3, r3, #25
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	3301      	adds	r3, #1
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003cd8:	69bb      	ldr	r3, [r7, #24]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3724      	adds	r7, #36	; 0x24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	08004930 	.word	0x08004930
 8003cf0:	00f42400 	.word	0x00f42400
 8003cf4:	016e3600 	.word	0x016e3600

08003cf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d04:	4b2a      	ldr	r3, [pc, #168]	; (8003db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d10:	f7ff f9f0 	bl	80030f4 <HAL_PWREx_GetVoltageRange>
 8003d14:	6178      	str	r0, [r7, #20]
 8003d16:	e014      	b.n	8003d42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d18:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	4a24      	ldr	r2, [pc, #144]	; (8003db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d22:	6593      	str	r3, [r2, #88]	; 0x58
 8003d24:	4b22      	ldr	r3, [pc, #136]	; (8003db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d30:	f7ff f9e0 	bl	80030f4 <HAL_PWREx_GetVoltageRange>
 8003d34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d36:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3a:	4a1d      	ldr	r2, [pc, #116]	; (8003db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d48:	d10b      	bne.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b80      	cmp	r3, #128	; 0x80
 8003d4e:	d919      	bls.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2ba0      	cmp	r3, #160	; 0xa0
 8003d54:	d902      	bls.n	8003d5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d56:	2302      	movs	r3, #2
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	e013      	b.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	e010      	b.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b80      	cmp	r3, #128	; 0x80
 8003d66:	d902      	bls.n	8003d6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d68:	2303      	movs	r3, #3
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	e00a      	b.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	d102      	bne.n	8003d7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d74:	2302      	movs	r3, #2
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	e004      	b.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b70      	cmp	r3, #112	; 0x70
 8003d7e:	d101      	bne.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d80:	2301      	movs	r3, #1
 8003d82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f023 0207 	bic.w	r2, r3, #7
 8003d8c:	4909      	ldr	r1, [pc, #36]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d94:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d001      	beq.n	8003da6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40022000 	.word	0x40022000

08003db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d031      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ddc:	d01a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003dde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003de2:	d814      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d009      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003de8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dec:	d10f      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003dee:	4b5d      	ldr	r3, [pc, #372]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	4a5c      	ldr	r2, [pc, #368]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dfa:	e00c      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	2100      	movs	r1, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 f9f0 	bl	80041e8 <RCCEx_PLLSAI1_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e0c:	e003      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	74fb      	strb	r3, [r7, #19]
      break;
 8003e12:	e000      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e16:	7cfb      	ldrb	r3, [r7, #19]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e1c:	4b51      	ldr	r3, [pc, #324]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	494e      	ldr	r1, [pc, #312]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e32:	e001      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e34:	7cfb      	ldrb	r3, [r7, #19]
 8003e36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 809e 	beq.w	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e46:	2300      	movs	r3, #0
 8003e48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e4a:	4b46      	ldr	r3, [pc, #280]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e60:	4b40      	ldr	r3, [pc, #256]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e64:	4a3f      	ldr	r2, [pc, #252]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e6c:	4b3d      	ldr	r3, [pc, #244]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e7c:	4b3a      	ldr	r3, [pc, #232]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a39      	ldr	r2, [pc, #228]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e88:	f7fd f906 	bl	8001098 <HAL_GetTick>
 8003e8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e8e:	e009      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e90:	f7fd f902 	bl	8001098 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d902      	bls.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	74fb      	strb	r3, [r7, #19]
        break;
 8003ea2:	e005      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ea4:	4b30      	ldr	r3, [pc, #192]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ef      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d15a      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003eb6:	4b2b      	ldr	r3, [pc, #172]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01e      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d019      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ed2:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003edc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ede:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee4:	4a1f      	ldr	r2, [pc, #124]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003eee:	4b1d      	ldr	r3, [pc, #116]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	4a1b      	ldr	r2, [pc, #108]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003efe:	4a19      	ldr	r2, [pc, #100]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d016      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fd f8c2 	bl	8001098 <HAL_GetTick>
 8003f14:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f16:	e00b      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f18:	f7fd f8be 	bl	8001098 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d902      	bls.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	74fb      	strb	r3, [r7, #19]
            break;
 8003f2e:	e006      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0ec      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003f3e:	7cfb      	ldrb	r3, [r7, #19]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10b      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f44:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	4904      	ldr	r1, [pc, #16]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f5a:	e009      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f5c:	7cfb      	ldrb	r3, [r7, #19]
 8003f5e:	74bb      	strb	r3, [r7, #18]
 8003f60:	e006      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f62:	bf00      	nop
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	7cfb      	ldrb	r3, [r7, #19]
 8003f6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f70:	7c7b      	ldrb	r3, [r7, #17]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d105      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f76:	4b9b      	ldr	r3, [pc, #620]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	4a9a      	ldr	r2, [pc, #616]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f8e:	4b95      	ldr	r3, [pc, #596]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f023 0203 	bic.w	r2, r3, #3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	4991      	ldr	r1, [pc, #580]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fb0:	4b8c      	ldr	r3, [pc, #560]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	f023 020c 	bic.w	r2, r3, #12
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	4989      	ldr	r1, [pc, #548]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fd2:	4b84      	ldr	r3, [pc, #528]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	4980      	ldr	r1, [pc, #512]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ff4:	4b7b      	ldr	r3, [pc, #492]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	4978      	ldr	r1, [pc, #480]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004016:	4b73      	ldr	r3, [pc, #460]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004024:	496f      	ldr	r1, [pc, #444]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004038:	4b6a      	ldr	r3, [pc, #424]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	4967      	ldr	r1, [pc, #412]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800405a:	4b62      	ldr	r3, [pc, #392]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	495e      	ldr	r1, [pc, #376]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800407c:	4b59      	ldr	r3, [pc, #356]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408a:	4956      	ldr	r1, [pc, #344]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800409e:	4b51      	ldr	r3, [pc, #324]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ac:	494d      	ldr	r1, [pc, #308]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d028      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040c0:	4b48      	ldr	r3, [pc, #288]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ce:	4945      	ldr	r1, [pc, #276]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040de:	d106      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e0:	4b40      	ldr	r3, [pc, #256]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4a3f      	ldr	r2, [pc, #252]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ea:	60d3      	str	r3, [r2, #12]
 80040ec:	e011      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040f6:	d10c      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3304      	adds	r3, #4
 80040fc:	2101      	movs	r1, #1
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 f872 	bl	80041e8 <RCCEx_PLLSAI1_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004108:	7cfb      	ldrb	r3, [r7, #19]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800410e:	7cfb      	ldrb	r3, [r7, #19]
 8004110:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d028      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800411e:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412c:	492d      	ldr	r1, [pc, #180]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800413c:	d106      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800413e:	4b29      	ldr	r3, [pc, #164]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	4a28      	ldr	r2, [pc, #160]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004148:	60d3      	str	r3, [r2, #12]
 800414a:	e011      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004154:	d10c      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3304      	adds	r3, #4
 800415a:	2101      	movs	r1, #1
 800415c:	4618      	mov	r0, r3
 800415e:	f000 f843 	bl	80041e8 <RCCEx_PLLSAI1_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004166:	7cfb      	ldrb	r3, [r7, #19]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01c      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800417c:	4b19      	ldr	r3, [pc, #100]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418a:	4916      	ldr	r1, [pc, #88]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800419a:	d10c      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3304      	adds	r3, #4
 80041a0:	2102      	movs	r1, #2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f820 	bl	80041e8 <RCCEx_PLLSAI1_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ac:	7cfb      	ldrb	r3, [r7, #19]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041c2:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d0:	4904      	ldr	r1, [pc, #16]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40021000 	.word	0x40021000

080041e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041f6:	4b74      	ldr	r3, [pc, #464]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d018      	beq.n	8004234 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004202:	4b71      	ldr	r3, [pc, #452]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0203 	and.w	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d10d      	bne.n	800422e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
       ||
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800421a:	4b6b      	ldr	r3, [pc, #428]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
       ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d047      	beq.n	80042be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
 8004232:	e044      	b.n	80042be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b03      	cmp	r3, #3
 800423a:	d018      	beq.n	800426e <RCCEx_PLLSAI1_Config+0x86>
 800423c:	2b03      	cmp	r3, #3
 800423e:	d825      	bhi.n	800428c <RCCEx_PLLSAI1_Config+0xa4>
 8004240:	2b01      	cmp	r3, #1
 8004242:	d002      	beq.n	800424a <RCCEx_PLLSAI1_Config+0x62>
 8004244:	2b02      	cmp	r3, #2
 8004246:	d009      	beq.n	800425c <RCCEx_PLLSAI1_Config+0x74>
 8004248:	e020      	b.n	800428c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800424a:	4b5f      	ldr	r3, [pc, #380]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d11d      	bne.n	8004292 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800425a:	e01a      	b.n	8004292 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800425c:	4b5a      	ldr	r3, [pc, #360]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004264:	2b00      	cmp	r3, #0
 8004266:	d116      	bne.n	8004296 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800426c:	e013      	b.n	8004296 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800426e:	4b56      	ldr	r3, [pc, #344]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10f      	bne.n	800429a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800427a:	4b53      	ldr	r3, [pc, #332]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800428a:	e006      	b.n	800429a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
      break;
 8004290:	e004      	b.n	800429c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004292:	bf00      	nop
 8004294:	e002      	b.n	800429c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800429a:	bf00      	nop
    }

    if(status == HAL_OK)
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10d      	bne.n	80042be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042a2:	4b49      	ldr	r3, [pc, #292]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6819      	ldr	r1, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	430b      	orrs	r3, r1
 80042b8:	4943      	ldr	r1, [pc, #268]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d17c      	bne.n	80043be <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042c4:	4b40      	ldr	r3, [pc, #256]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a3f      	ldr	r2, [pc, #252]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d0:	f7fc fee2 	bl	8001098 <HAL_GetTick>
 80042d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042d6:	e009      	b.n	80042ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042d8:	f7fc fede 	bl	8001098 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d902      	bls.n	80042ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	73fb      	strb	r3, [r7, #15]
        break;
 80042ea:	e005      	b.n	80042f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042ec:	4b36      	ldr	r3, [pc, #216]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1ef      	bne.n	80042d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d15f      	bne.n	80043be <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d110      	bne.n	8004326 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004304:	4b30      	ldr	r3, [pc, #192]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800430c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6892      	ldr	r2, [r2, #8]
 8004314:	0211      	lsls	r1, r2, #8
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68d2      	ldr	r2, [r2, #12]
 800431a:	06d2      	lsls	r2, r2, #27
 800431c:	430a      	orrs	r2, r1
 800431e:	492a      	ldr	r1, [pc, #168]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004320:	4313      	orrs	r3, r2
 8004322:	610b      	str	r3, [r1, #16]
 8004324:	e027      	b.n	8004376 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d112      	bne.n	8004352 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800432c:	4b26      	ldr	r3, [pc, #152]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004334:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6892      	ldr	r2, [r2, #8]
 800433c:	0211      	lsls	r1, r2, #8
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6912      	ldr	r2, [r2, #16]
 8004342:	0852      	lsrs	r2, r2, #1
 8004344:	3a01      	subs	r2, #1
 8004346:	0552      	lsls	r2, r2, #21
 8004348:	430a      	orrs	r2, r1
 800434a:	491f      	ldr	r1, [pc, #124]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800434c:	4313      	orrs	r3, r2
 800434e:	610b      	str	r3, [r1, #16]
 8004350:	e011      	b.n	8004376 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004352:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800435a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6892      	ldr	r2, [r2, #8]
 8004362:	0211      	lsls	r1, r2, #8
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6952      	ldr	r2, [r2, #20]
 8004368:	0852      	lsrs	r2, r2, #1
 800436a:	3a01      	subs	r2, #1
 800436c:	0652      	lsls	r2, r2, #25
 800436e:	430a      	orrs	r2, r1
 8004370:	4915      	ldr	r1, [pc, #84]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004372:	4313      	orrs	r3, r2
 8004374:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004376:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800437c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004380:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004382:	f7fc fe89 	bl	8001098 <HAL_GetTick>
 8004386:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004388:	e009      	b.n	800439e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800438a:	f7fc fe85 	bl	8001098 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d902      	bls.n	800439e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	73fb      	strb	r3, [r7, #15]
          break;
 800439c:	e005      	b.n	80043aa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800439e:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0ef      	beq.n	800438a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d106      	bne.n	80043be <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	4903      	ldr	r1, [pc, #12]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043be:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000

080043cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e049      	b.n	8004472 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fc fd4e 	bl	8000e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	4619      	mov	r1, r3
 800440a:	4610      	mov	r0, r2
 800440c:	f000 f960 	bl	80046d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d001      	beq.n	8004494 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e033      	b.n	80044fc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a19      	ldr	r2, [pc, #100]	; (8004508 <HAL_TIM_Base_Start+0x8c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d009      	beq.n	80044ba <HAL_TIM_Base_Start+0x3e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ae:	d004      	beq.n	80044ba <HAL_TIM_Base_Start+0x3e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a15      	ldr	r2, [pc, #84]	; (800450c <HAL_TIM_Base_Start+0x90>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d115      	bne.n	80044e6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	4b13      	ldr	r3, [pc, #76]	; (8004510 <HAL_TIM_Base_Start+0x94>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b06      	cmp	r3, #6
 80044ca:	d015      	beq.n	80044f8 <HAL_TIM_Base_Start+0x7c>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d2:	d011      	beq.n	80044f8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e4:	e008      	b.n	80044f8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0201 	orr.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e000      	b.n	80044fa <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40014000 	.word	0x40014000
 8004510:	00010007 	.word	0x00010007

08004514 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <HAL_TIM_OC_Start+0x24>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e03c      	b.n	80045b2 <HAL_TIM_OC_Start+0x9e>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b04      	cmp	r3, #4
 800453c:	d109      	bne.n	8004552 <HAL_TIM_OC_Start+0x3e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b01      	cmp	r3, #1
 8004548:	bf14      	ite	ne
 800454a:	2301      	movne	r3, #1
 800454c:	2300      	moveq	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	e02f      	b.n	80045b2 <HAL_TIM_OC_Start+0x9e>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d109      	bne.n	800456c <HAL_TIM_OC_Start+0x58>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	bf14      	ite	ne
 8004564:	2301      	movne	r3, #1
 8004566:	2300      	moveq	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	e022      	b.n	80045b2 <HAL_TIM_OC_Start+0x9e>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b0c      	cmp	r3, #12
 8004570:	d109      	bne.n	8004586 <HAL_TIM_OC_Start+0x72>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	bf14      	ite	ne
 800457e:	2301      	movne	r3, #1
 8004580:	2300      	moveq	r3, #0
 8004582:	b2db      	uxtb	r3, r3
 8004584:	e015      	b.n	80045b2 <HAL_TIM_OC_Start+0x9e>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b10      	cmp	r3, #16
 800458a:	d109      	bne.n	80045a0 <HAL_TIM_OC_Start+0x8c>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	bf14      	ite	ne
 8004598:	2301      	movne	r3, #1
 800459a:	2300      	moveq	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e008      	b.n	80045b2 <HAL_TIM_OC_Start+0x9e>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	bf14      	ite	ne
 80045ac:	2301      	movne	r3, #1
 80045ae:	2300      	moveq	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e07e      	b.n	80046b8 <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d104      	bne.n	80045ca <HAL_TIM_OC_Start+0xb6>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045c8:	e023      	b.n	8004612 <HAL_TIM_OC_Start+0xfe>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d104      	bne.n	80045da <HAL_TIM_OC_Start+0xc6>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045d8:	e01b      	b.n	8004612 <HAL_TIM_OC_Start+0xfe>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d104      	bne.n	80045ea <HAL_TIM_OC_Start+0xd6>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e8:	e013      	b.n	8004612 <HAL_TIM_OC_Start+0xfe>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b0c      	cmp	r3, #12
 80045ee:	d104      	bne.n	80045fa <HAL_TIM_OC_Start+0xe6>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045f8:	e00b      	b.n	8004612 <HAL_TIM_OC_Start+0xfe>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d104      	bne.n	800460a <HAL_TIM_OC_Start+0xf6>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004608:	e003      	b.n	8004612 <HAL_TIM_OC_Start+0xfe>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2201      	movs	r2, #1
 8004618:	6839      	ldr	r1, [r7, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f8bc 	bl	8004798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a26      	ldr	r2, [pc, #152]	; (80046c0 <HAL_TIM_OC_Start+0x1ac>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d009      	beq.n	800463e <HAL_TIM_OC_Start+0x12a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a25      	ldr	r2, [pc, #148]	; (80046c4 <HAL_TIM_OC_Start+0x1b0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <HAL_TIM_OC_Start+0x12a>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a23      	ldr	r2, [pc, #140]	; (80046c8 <HAL_TIM_OC_Start+0x1b4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_TIM_OC_Start+0x12e>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <HAL_TIM_OC_Start+0x130>
 8004642:	2300      	movs	r3, #0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004656:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <HAL_TIM_OC_Start+0x1ac>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d009      	beq.n	8004676 <HAL_TIM_OC_Start+0x162>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466a:	d004      	beq.n	8004676 <HAL_TIM_OC_Start+0x162>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a14      	ldr	r2, [pc, #80]	; (80046c4 <HAL_TIM_OC_Start+0x1b0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d115      	bne.n	80046a2 <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	4b13      	ldr	r3, [pc, #76]	; (80046cc <HAL_TIM_OC_Start+0x1b8>)
 800467e:	4013      	ands	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b06      	cmp	r3, #6
 8004686:	d015      	beq.n	80046b4 <HAL_TIM_OC_Start+0x1a0>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468e:	d011      	beq.n	80046b4 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a0:	e008      	b.n	80046b4 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	e000      	b.n	80046b6 <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40012c00 	.word	0x40012c00
 80046c4:	40014000 	.word	0x40014000
 80046c8:	40014400 	.word	0x40014400
 80046cc:	00010007 	.word	0x00010007

080046d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a2a      	ldr	r2, [pc, #168]	; (800478c <TIM_Base_SetConfig+0xbc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d003      	beq.n	80046f0 <TIM_Base_SetConfig+0x20>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ee:	d108      	bne.n	8004702 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a21      	ldr	r2, [pc, #132]	; (800478c <TIM_Base_SetConfig+0xbc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00b      	beq.n	8004722 <TIM_Base_SetConfig+0x52>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004710:	d007      	beq.n	8004722 <TIM_Base_SetConfig+0x52>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a1e      	ldr	r2, [pc, #120]	; (8004790 <TIM_Base_SetConfig+0xc0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d003      	beq.n	8004722 <TIM_Base_SetConfig+0x52>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a1d      	ldr	r2, [pc, #116]	; (8004794 <TIM_Base_SetConfig+0xc4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d108      	bne.n	8004734 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a0c      	ldr	r2, [pc, #48]	; (800478c <TIM_Base_SetConfig+0xbc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d007      	beq.n	8004770 <TIM_Base_SetConfig+0xa0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a0b      	ldr	r2, [pc, #44]	; (8004790 <TIM_Base_SetConfig+0xc0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_Base_SetConfig+0xa0>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a0a      	ldr	r2, [pc, #40]	; (8004794 <TIM_Base_SetConfig+0xc4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d103      	bne.n	8004778 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	615a      	str	r2, [r3, #20]
}
 800477e:	bf00      	nop
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40012c00 	.word	0x40012c00
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400

08004798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	2201      	movs	r2, #1
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1a      	ldr	r2, [r3, #32]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	43db      	mvns	r3, r3
 80047ba:	401a      	ands	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1a      	ldr	r2, [r3, #32]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	fa01 f303 	lsl.w	r3, r1, r3
 80047d0:	431a      	orrs	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
	...

080047e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e04f      	b.n	800489c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a21      	ldr	r2, [pc, #132]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d108      	bne.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800482c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d009      	beq.n	8004870 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004864:	d004      	beq.n	8004870 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a10      	ldr	r2, [pc, #64]	; (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d10c      	bne.n	800488a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004876:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	4313      	orrs	r3, r2
 8004880:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40014000 	.word	0x40014000

080048b0 <__libc_init_array>:
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	4d0d      	ldr	r5, [pc, #52]	; (80048e8 <__libc_init_array+0x38>)
 80048b4:	4c0d      	ldr	r4, [pc, #52]	; (80048ec <__libc_init_array+0x3c>)
 80048b6:	1b64      	subs	r4, r4, r5
 80048b8:	10a4      	asrs	r4, r4, #2
 80048ba:	2600      	movs	r6, #0
 80048bc:	42a6      	cmp	r6, r4
 80048be:	d109      	bne.n	80048d4 <__libc_init_array+0x24>
 80048c0:	4d0b      	ldr	r5, [pc, #44]	; (80048f0 <__libc_init_array+0x40>)
 80048c2:	4c0c      	ldr	r4, [pc, #48]	; (80048f4 <__libc_init_array+0x44>)
 80048c4:	f000 f820 	bl	8004908 <_init>
 80048c8:	1b64      	subs	r4, r4, r5
 80048ca:	10a4      	asrs	r4, r4, #2
 80048cc:	2600      	movs	r6, #0
 80048ce:	42a6      	cmp	r6, r4
 80048d0:	d105      	bne.n	80048de <__libc_init_array+0x2e>
 80048d2:	bd70      	pop	{r4, r5, r6, pc}
 80048d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d8:	4798      	blx	r3
 80048da:	3601      	adds	r6, #1
 80048dc:	e7ee      	b.n	80048bc <__libc_init_array+0xc>
 80048de:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e2:	4798      	blx	r3
 80048e4:	3601      	adds	r6, #1
 80048e6:	e7f2      	b.n	80048ce <__libc_init_array+0x1e>
 80048e8:	08004960 	.word	0x08004960
 80048ec:	08004960 	.word	0x08004960
 80048f0:	08004960 	.word	0x08004960
 80048f4:	08004964 	.word	0x08004964

080048f8 <memset>:
 80048f8:	4402      	add	r2, r0
 80048fa:	4603      	mov	r3, r0
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d100      	bne.n	8004902 <memset+0xa>
 8004900:	4770      	bx	lr
 8004902:	f803 1b01 	strb.w	r1, [r3], #1
 8004906:	e7f9      	b.n	80048fc <memset+0x4>

08004908 <_init>:
 8004908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490a:	bf00      	nop
 800490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490e:	bc08      	pop	{r3}
 8004910:	469e      	mov	lr, r3
 8004912:	4770      	bx	lr

08004914 <_fini>:
 8004914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004916:	bf00      	nop
 8004918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491a:	bc08      	pop	{r3}
 800491c:	469e      	mov	lr, r3
 800491e:	4770      	bx	lr
