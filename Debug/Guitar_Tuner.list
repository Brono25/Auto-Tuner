
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002788  0800efc0  0800efc0  0001efc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011748  08011748  00030220  2**0
                  CONTENTS
  4 .ARM          00000000  08011748  08011748  00030220  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011748  08011748  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011748  08011748  00021748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801174c  0801174c  0002174c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08011750  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000488c  20000220  08011970  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004aac  08011970  00034aac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020244  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004019  00000000  00000000  00050494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  000544b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  00055df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265ca  00000000  00000000  00057560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7e7  00000000  00000000  0007db2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3d5b  00000000  00000000  0009a311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  0017e06c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fd8  00000000  00000000  0017e130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000017de  00000000  00000000  00186108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800efa4 	.word	0x0800efa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0800efa4 	.word	0x0800efa4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8000c90:	2254      	movs	r2, #84	; 0x54
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <MPU6050_Init+0x1c>)
 8000c96:	f009 fba5 	bl	800a3e4 <memcpy>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000023c 	.word	0x2000023c

08000ca8 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8000cb8:	23d0      	movs	r3, #208	; 0xd0
 8000cba:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	b299      	uxth	r1, r3
 8000cc4:	f107 020c 	add.w	r2, r7, #12
 8000cc8:	230a      	movs	r3, #10
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	2301      	movs	r3, #1
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <I2C_Read+0x48>)
 8000cd0:	f005 fa72 	bl	80061b8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	b299      	uxth	r1, r3
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	2264      	movs	r2, #100	; 0x64
 8000cde:	9200      	str	r2, [sp, #0]
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <I2C_Read+0x48>)
 8000ce4:	f005 fb5c 	bl	80063a0 <HAL_I2C_Master_Receive>
}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000023c 	.word	0x2000023c

08000cf4 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	71fb      	strb	r3, [r7, #7]
 8000d00:	4613      	mov	r3, r2
 8000d02:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8000d08:	79bb      	ldrb	r3, [r7, #6]
 8000d0a:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8000d0c:	23d0      	movs	r3, #208	; 0xd0
 8000d0e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	b299      	uxth	r1, r3
 8000d14:	f107 020c 	add.w	r2, r7, #12
 8000d18:	2364      	movs	r3, #100	; 0x64
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	4803      	ldr	r0, [pc, #12]	; (8000d2c <I2C_Write8+0x38>)
 8000d20:	f005 fa4a 	bl	80061b8 <HAL_I2C_Master_Transmit>
}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	2000023c 	.word	0x2000023c

08000d30 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
	//Clock Source
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	206b      	movs	r0, #107	; 0x6b
 8000d40:	f7ff ffd8 	bl	8000cf4 <I2C_Write8>
	HAL_Delay(100);
 8000d44:	2064      	movs	r0, #100	; 0x64
 8000d46:	f002 ffd9 	bl	8003cfc <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	791b      	ldrb	r3, [r3, #4]
 8000d58:	019b      	lsls	r3, r3, #6
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	206b      	movs	r0, #107	; 0x6b
 8000d72:	f7ff ffbf 	bl	8000cf4 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8000d76:	2064      	movs	r0, #100	; 0x64
 8000d78:	f002 ffc0 	bl	8003cfc <HAL_Delay>

	//Set the Digital Low Pass Filter
	Buffer = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	78db      	ldrb	r3, [r3, #3]
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	201a      	movs	r0, #26
 8000d90:	f7ff ffb0 	bl	8000cf4 <I2C_Write8>

	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	785b      	ldrb	r3, [r3, #1]
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	f003 0318 	and.w	r3, r3, #24
 8000da4:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	4619      	mov	r1, r3
 8000daa:	201b      	movs	r0, #27
 8000dac:	f7ff ffa2 	bl	8000cf4 <I2C_Write8>

	//Select the Accelerometer Full Scale Range
	Buffer = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	789b      	ldrb	r3, [r3, #2]
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f003 0318 	and.w	r3, r3, #24
 8000dc0:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	201c      	movs	r0, #28
 8000dc8:	f7ff ff94 	bl	8000cf4 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8000dcc:	2004      	movs	r0, #4
 8000dce:	f000 f857 	bl	8000e80 <MPU6050_Set_SMPRT_DIV>


	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	789b      	ldrb	r3, [r3, #2]
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d81a      	bhi.n	8000e10 <MPU6050_Config+0xe0>
 8000dda:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <MPU6050_Config+0xb0>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000df1 	.word	0x08000df1
 8000de4:	08000df9 	.word	0x08000df9
 8000de8:	08000e01 	.word	0x08000e01
 8000dec:	08000e09 	.word	0x08000e09
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MPU6050_Config+0x12c>)
 8000df2:	4a1b      	ldr	r2, [pc, #108]	; (8000e60 <MPU6050_Config+0x130>)
 8000df4:	601a      	str	r2, [r3, #0]
			break;
 8000df6:	e00c      	b.n	8000e12 <MPU6050_Config+0xe2>

		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MPU6050_Config+0x12c>)
 8000dfa:	4a1a      	ldr	r2, [pc, #104]	; (8000e64 <MPU6050_Config+0x134>)
 8000dfc:	601a      	str	r2, [r3, #0]
				break;
 8000dfe:	e008      	b.n	8000e12 <MPU6050_Config+0xe2>

		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <MPU6050_Config+0x12c>)
 8000e02:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <MPU6050_Config+0x138>)
 8000e04:	601a      	str	r2, [r3, #0]
			break;
 8000e06:	e004      	b.n	8000e12 <MPU6050_Config+0xe2>

		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MPU6050_Config+0x12c>)
 8000e0a:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <MPU6050_Config+0x13c>)
 8000e0c:	601a      	str	r2, [r3, #0]
			break;
 8000e0e:	e000      	b.n	8000e12 <MPU6050_Config+0xe2>

		default:
			break;
 8000e10:	bf00      	nop
	}
	//Gyroscope Scaling Factor
	switch (config->Gyro_Full_Scale)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	785b      	ldrb	r3, [r3, #1]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d81a      	bhi.n	8000e50 <MPU6050_Config+0x120>
 8000e1a:	a201      	add	r2, pc, #4	; (adr r2, 8000e20 <MPU6050_Config+0xf0>)
 8000e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e20:	08000e31 	.word	0x08000e31
 8000e24:	08000e39 	.word	0x08000e39
 8000e28:	08000e41 	.word	0x08000e41
 8000e2c:	08000e49 	.word	0x08000e49
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MPU6050_Config+0x140>)
 8000e32:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <MPU6050_Config+0x144>)
 8000e34:	601a      	str	r2, [r3, #0]
			break;
 8000e36:	e00c      	b.n	8000e52 <MPU6050_Config+0x122>

		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <MPU6050_Config+0x140>)
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <MPU6050_Config+0x148>)
 8000e3c:	601a      	str	r2, [r3, #0]
				break;
 8000e3e:	e008      	b.n	8000e52 <MPU6050_Config+0x122>

		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MPU6050_Config+0x140>)
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <MPU6050_Config+0x14c>)
 8000e44:	601a      	str	r2, [r3, #0]
			break;
 8000e46:	e004      	b.n	8000e52 <MPU6050_Config+0x122>

		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MPU6050_Config+0x140>)
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <MPU6050_Config+0x130>)
 8000e4c:	601a      	str	r2, [r3, #0]
			break;
 8000e4e:	e000      	b.n	8000e52 <MPU6050_Config+0x122>

		default:
			break;
 8000e50:	bf00      	nop
	}

}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000290 	.word	0x20000290
 8000e60:	3d7a0000 	.word	0x3d7a0000
 8000e64:	3dfa0000 	.word	0x3dfa0000
 8000e68:	3e7a0000 	.word	0x3e7a0000
 8000e6c:	3efa0000 	.word	0x3efa0000
 8000e70:	20000294 	.word	0x20000294
 8000e74:	3bfa0000 	.word	0x3bfa0000
 8000e78:	3c7a0000 	.word	0x3c7a0000
 8000e7c:	3cfa0000 	.word	0x3cfa0000

08000e80 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	2019      	movs	r0, #25
 8000e90:	f7ff ff30 	bl	8000cf4 <I2C_Write8>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <MPU6050_Get_Accel_RawData>:

}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4619      	mov	r1, r3
 8000eae:	203a      	movs	r0, #58	; 0x3a
 8000eb0:	f7ff fefa 	bl	8000ca8 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8000eb4:	7f7b      	ldrb	r3, [r7, #29]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d04f      	beq.n	8000f5a <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2206      	movs	r2, #6
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	203b      	movs	r0, #59	; 0x3b
 8000ec4:	f7ff fef0 	bl	8000ca8 <I2C_Read>

		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8000ec8:	7d3b      	ldrb	r3, [r7, #20]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	7d7b      	ldrb	r3, [r7, #21]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8000ede:	7dbb      	ldrb	r3, [r7, #22]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4413      	add	r3, r2
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	b21a      	sxth	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8000ef4:	7e3b      	ldrb	r3, [r7, #24]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	7e7b      	ldrb	r3, [r7, #25]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	4413      	add	r3, r2
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	2206      	movs	r2, #6
 8000f10:	4619      	mov	r1, r3
 8000f12:	2043      	movs	r0, #67	; 0x43
 8000f14:	f7ff fec8 	bl	8000ca8 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8000f18:	7b3b      	ldrb	r3, [r7, #12]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	7b7b      	ldrb	r3, [r7, #13]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	4413      	add	r3, r2
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MPU6050_Get_Accel_RawData+0xc8>)
 8000f2c:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MPU6050_Get_Accel_RawData+0xc8>)
 8000f42:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 8000f44:	7c3b      	ldrb	r3, [r7, #16]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	7c7b      	ldrb	r3, [r7, #17]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	4413      	add	r3, r2
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <MPU6050_Get_Accel_RawData+0xc8>)
 8000f58:	809a      	strh	r2, [r3, #4]
	}
}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000298 	.word	0x20000298

08000f68 <MPU6050_Get_Accel_Scale>:

//10- Get Accel scaled data (g unit of gravity, 1g = 9.81m/s2)
void MPU6050_Get_Accel_Scale(ScaledData_Def *scaledDef)
{
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

	RawData_Def AccelRData;
	MPU6050_Get_Accel_RawData(&AccelRData);
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff91 	bl	8000e9c <MPU6050_Get_Accel_RawData>

	scaledDef->x = atan2(AccelRData.y, AccelRData.z) * 57.3;
 8000f7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fad0 	bl	8000524 <__aeabi_i2d>
 8000f84:	4604      	mov	r4, r0
 8000f86:	460d      	mov	r5, r1
 8000f88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fac9 	bl	8000524 <__aeabi_i2d>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	ec43 2b11 	vmov	d1, r2, r3
 8000f9a:	ec45 4b10 	vmov	d0, r4, r5
 8000f9e:	f00c f9e3 	bl	800d368 <atan2>
 8000fa2:	ec51 0b10 	vmov	r0, r1, d0
 8000fa6:	a328      	add	r3, pc, #160	; (adr r3, 8001048 <MPU6050_Get_Accel_Scale+0xe0>)
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff fb24 	bl	80005f8 <__aeabi_dmul>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f7ff fe16 	bl	8000be8 <__aeabi_d2f>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	601a      	str	r2, [r3, #0]
	scaledDef->y = atan2(-AccelRData.x,sqrt((AccelRData.y)^2 + (AccelRData.z)^2)) * 57.3;
 8000fc2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000fc6:	425b      	negs	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff faab 	bl	8000524 <__aeabi_i2d>
 8000fce:	4604      	mov	r4, r0
 8000fd0:	460d      	mov	r5, r1
 8000fd2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fdc:	3302      	adds	r3, #2
 8000fde:	4053      	eors	r3, r2
 8000fe0:	f083 0302 	eor.w	r3, r3, #2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fa9d 	bl	8000524 <__aeabi_i2d>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	ec43 2b10 	vmov	d0, r2, r3
 8000ff2:	f00c fa4d 	bl	800d490 <sqrt>
 8000ff6:	eeb0 7a40 	vmov.f32	s14, s0
 8000ffa:	eef0 7a60 	vmov.f32	s15, s1
 8000ffe:	eeb0 1a47 	vmov.f32	s2, s14
 8001002:	eef0 1a67 	vmov.f32	s3, s15
 8001006:	ec45 4b10 	vmov	d0, r4, r5
 800100a:	f00c f9ad 	bl	800d368 <atan2>
 800100e:	ec51 0b10 	vmov	r0, r1, d0
 8001012:	a30d      	add	r3, pc, #52	; (adr r3, 8001048 <MPU6050_Get_Accel_Scale+0xe0>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff faee 	bl	80005f8 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fde0 	bl	8000be8 <__aeabi_d2f>
 8001028:	4602      	mov	r2, r0
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	605a      	str	r2, [r3, #4]
	scaledDef->z = (AccelRData.z);
 800102e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	edc3 7a02 	vstr	s15, [r3, #8]

	//Accel Scale data
//	scaledDef->x = ((AccelRData.x+0.0f)*accelScalingFactor);
//	scaledDef->y = ((AccelRData.y+0.0f)*accelScalingFactor);
//	scaledDef->z = ((AccelRData.z+0.0f)*accelScalingFactor);
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bdb0      	pop	{r4, r5, r7, pc}
 8001048:	66666666 	.word	0x66666666
 800104c:	404ca666 	.word	0x404ca666

08001050 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <MPU6050_Get_Gyro_RawData+0x34>)
 800105a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MPU6050_Get_Gyro_RawData+0x34>)
 8001064:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <MPU6050_Get_Gyro_RawData+0x34>)
 800106e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	809a      	strh	r2, [r3, #4]

}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000298 	.word	0x20000298

08001088 <MPU6050_Get_Gyro_Scale>:

//13- Get Gyro scaled data
void MPU6050_Get_Gyro_Scale(ScaledData_Def *scaledDef)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	RawData_Def myGyroRaw;
	MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ffdb 	bl	8001050 <MPU6050_Get_Gyro_RawData>

	//Gyro Scale data
	scaledDef->x = (myGyroRaw.x)*gyroScalingFactor; // x-Axis
 800109a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MPU6050_Get_Gyro_Scale+0x70>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = (myGyroRaw.y)*gyroScalingFactor; // y-Axis
 80010b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MPU6050_Get_Gyro_Scale+0x70>)
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = (myGyroRaw.z)*gyroScalingFactor; // z-Axis
 80010d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MPU6050_Get_Gyro_Scale+0x70>)
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000294 	.word	0x20000294

080010fc <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM16)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a22      	ldr	r2, [pc, #136]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d12a      	bne.n	8001164 <HAL_TIM_PeriodElapsedCallback+0x68>
	{

		MPU6050_Get_Accel_Scale(&myAccelScaled);
 800110e:	4822      	ldr	r0, [pc, #136]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001110:	f7ff ff2a 	bl	8000f68 <MPU6050_Get_Accel_Scale>
		MPU6050_Get_Gyro_Scale(&myGyroScaled);
 8001114:	4821      	ldr	r0, [pc, #132]	; (800119c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001116:	f7ff ffb7 	bl	8001088 <MPU6050_Get_Gyro_Scale>
		if (myAccelScaled.x > 0 && screenflip == 0)
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	dd09      	ble.n	800113e <HAL_TIM_PeriodElapsedCallback+0x42>
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d105      	bne.n	800113e <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			ssd1306_Init1();
 8001132:	f002 fc9f 	bl	8003a74 <ssd1306_Init1>
			screenflip = 1;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
		HAL_Delay(50);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
	}
}
 800113c:	e026      	b.n	800118c <HAL_TIM_PeriodElapsedCallback+0x90>
		} else if (myAccelScaled.x < 0 && screenflip == 1)
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	d400      	bmi.n	8001150 <HAL_TIM_PeriodElapsedCallback+0x54>
}
 800114e:	e01d      	b.n	800118c <HAL_TIM_PeriodElapsedCallback+0x90>
		} else if (myAccelScaled.x < 0 && screenflip == 1)
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d119      	bne.n	800118c <HAL_TIM_PeriodElapsedCallback+0x90>
			ssd1306_Init2();
 8001158:	f002 fcf4 	bl	8003b44 <ssd1306_Init2>
			screenflip = 0;
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
}
 8001162:	e013      	b.n	800118c <HAL_TIM_PeriodElapsedCallback+0x90>
	} else if (htim->Instance == TIM2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800116c:	d10e      	bne.n	800118c <HAL_TIM_PeriodElapsedCallback+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	2102      	movs	r1, #2
 8001172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001176:	f004 ff5f 	bl	8006038 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800117a:	2032      	movs	r0, #50	; 0x32
 800117c:	f002 fdbe 	bl	8003cfc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2102      	movs	r1, #2
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f004 ff56 	bl	8006038 <HAL_GPIO_WritePin>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40014400 	.word	0x40014400
 8001198:	2000289c 	.word	0x2000289c
 800119c:	20004a7c 	.word	0x20004a7c
 80011a0:	200002cc 	.word	0x200002cc

080011a4 <init_tunings>:


/*  HAL_TIM_SET_PRESCALER(&htim2,newValue); */

void init_tunings()
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
	curr_target_string[0] = E2;
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <init_tunings+0x34>)
 80011aa:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <init_tunings+0x38>)
 80011ac:	601a      	str	r2, [r3, #0]
	curr_target_string[1] = A2;
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <init_tunings+0x34>)
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <init_tunings+0x3c>)
 80011b2:	605a      	str	r2, [r3, #4]
	curr_target_string[2] = D3;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <init_tunings+0x34>)
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <init_tunings+0x40>)
 80011b8:	609a      	str	r2, [r3, #8]
	curr_target_string[3] = G3;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <init_tunings+0x34>)
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <init_tunings+0x44>)
 80011be:	60da      	str	r2, [r3, #12]
	curr_target_string[4] = B3;
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <init_tunings+0x34>)
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <init_tunings+0x48>)
 80011c4:	611a      	str	r2, [r3, #16]
	curr_target_string[5] = E4;
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <init_tunings+0x34>)
 80011c8:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <init_tunings+0x4c>)
 80011ca:	615a      	str	r2, [r3, #20]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	200027a0 	.word	0x200027a0
 80011dc:	42a4d1ec 	.word	0x42a4d1ec
 80011e0:	42dc0000 	.word	0x42dc0000
 80011e4:	4312d47b 	.word	0x4312d47b
 80011e8:	43440000 	.word	0x43440000
 80011ec:	4376f0a4 	.word	0x4376f0a4
 80011f0:	43a4d0a4 	.word	0x43a4d0a4

080011f4 <adc_to_guitar_signal>:


void adc_to_guitar_signal(uint16_t *src, float32_t *guitar_signal)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < BLOCK_SIZE; i++)
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	e015      	b.n	8001230 <adc_to_guitar_signal+0x3c>
	{
		guitar_signal[i] = (float32_t) src[i] - DC_BIAS;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	4413      	add	r3, r2
 800121e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001250 <adc_to_guitar_signal+0x5c>
 8001222:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001226:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < BLOCK_SIZE; i++)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3301      	adds	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001236:	dbe5      	blt.n	8001204 <adc_to_guitar_signal+0x10>
	}
	arm_biquad_cascade_df1_f32(&iir_settings, guitar_signal, guitar_signal, BLOCK_SIZE);
 8001238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	6839      	ldr	r1, [r7, #0]
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <adc_to_guitar_signal+0x60>)
 8001242:	f008 ff8f 	bl	800a164 <arm_biquad_cascade_df1_f32>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	450e8000 	.word	0x450e8000
 8001254:	200049d8 	.word	0x200049d8

08001258 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	in_ptr = &adc_buff[0];
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001262:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8001264:	601a      	str	r2, [r3, #0]
	adc_to_guitar_signal(in_ptr, &guitar_signal[0]);
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4914      	ldr	r1, [pc, #80]	; (80012bc <HAL_ADC_ConvHalfCpltCallback+0x64>)
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ffc1 	bl	80011f4 <adc_to_guitar_signal>

	float32_t *p  = &guitar_signal[0];
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8001274:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < BLOCK_SIZE; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	e013      	b.n	80012a4 <HAL_ADC_ConvHalfCpltCallback+0x4c>
	{
		if(*p > THRESHOLD)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	edd3 7a00 	vldr	s15, [r3]
 8001282:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80012c0 <HAL_ADC_ConvHalfCpltCallback+0x68>
 8001286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	dd03      	ble.n	8001298 <HAL_ADC_ConvHalfCpltCallback+0x40>
		{
			callback_state = 1;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]
			return;
 8001296:	e009      	b.n	80012ac <HAL_ADC_ConvHalfCpltCallback+0x54>
		}
		p++;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3304      	adds	r3, #4
 800129c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < BLOCK_SIZE; i++)
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	3301      	adds	r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012aa:	dbe7      	blt.n	800127c <HAL_ADC_ConvHalfCpltCallback+0x24>
	}
}
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200028a8 	.word	0x200028a8
 80012b8:	2000398c 	.word	0x2000398c
 80012bc:	200028f4 	.word	0x200028f4
 80012c0:	44160000 	.word	0x44160000
 80012c4:	200002a4 	.word	0x200002a4

080012c8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	in_ptr = &adc_buff[BLOCK_SIZE];
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <HAL_ADC_ConvCpltCallback+0x5c>)
 80012d2:	4a15      	ldr	r2, [pc, #84]	; (8001328 <HAL_ADC_ConvCpltCallback+0x60>)
 80012d4:	601a      	str	r2, [r3, #0]
	adc_to_guitar_signal(in_ptr, &guitar_signal[0]);
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_ADC_ConvCpltCallback+0x5c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4914      	ldr	r1, [pc, #80]	; (800132c <HAL_ADC_ConvCpltCallback+0x64>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff89 	bl	80011f4 <adc_to_guitar_signal>

	float32_t *p  = &guitar_signal[0];
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_ADC_ConvCpltCallback+0x64>)
 80012e4:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < BLOCK_SIZE; i++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	e013      	b.n	8001314 <HAL_ADC_ConvCpltCallback+0x4c>
	{
		if(*p > THRESHOLD)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001330 <HAL_ADC_ConvCpltCallback+0x68>
 80012f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fe:	dd03      	ble.n	8001308 <HAL_ADC_ConvCpltCallback+0x40>
		{
			callback_state = 1;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]
			return;
 8001306:	e009      	b.n	800131c <HAL_ADC_ConvCpltCallback+0x54>
		}
		p++;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3304      	adds	r3, #4
 800130c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < BLOCK_SIZE; i++)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3301      	adds	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800131a:	dbe7      	blt.n	80012ec <HAL_ADC_ConvCpltCallback+0x24>
	}
}
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200028a8 	.word	0x200028a8
 8001328:	2000418c 	.word	0x2000418c
 800132c:	200028f4 	.word	0x200028f4
 8001330:	44160000 	.word	0x44160000
 8001334:	200002a4 	.word	0x200002a4

08001338 <get_frequency>:
  float32_t fb = *(const float32_t*) b;
  return (fa > fb) - (fa < fb);
}

void get_frequency(float32_t *signal, float32_t target_freq, float32_t *out_freq)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	ed87 0a02 	vstr	s0, [r7, #8]
 8001344:	6079      	str	r1, [r7, #4]
	if (callback_state == 1)
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <get_frequency+0x78>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d12b      	bne.n	80013a6 <get_frequency+0x6e>
	{
		float32_t curr_freq = 0;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
		mpm_mcleod_pitch_method_f32(&signal[0], &curr_freq);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f001 fa94 	bl	8002888 <mpm_mcleod_pitch_method_f32>
		callback_state = 0;
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <get_frequency+0x78>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
		*out_freq = ceill(4 * curr_freq) / 4;
 8001366:	edd7 7a05 	vldr	s15, [r7, #20]
 800136a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800136e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001372:	ee17 0a90 	vmov	r0, s15
 8001376:	f7ff f8e7 	bl	8000548 <__aeabi_f2d>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	ec43 2b10 	vmov	d0, r2, r3
 8001382:	f00b fecd 	bl	800d120 <ceill>
 8001386:	ec51 0b10 	vmov	r0, r1, d0
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <get_frequency+0x7c>)
 8001390:	f7ff fa5c 	bl	800084c <__aeabi_ddiv>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f7ff fc24 	bl	8000be8 <__aeabi_d2f>
 80013a0:	4602      	mov	r2, r0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	601a      	str	r2, [r3, #0]
	}
}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200002a4 	.word	0x200002a4
 80013b4:	40100000 	.word	0x40100000

080013b8 <get_error_in_cents>:

float32_t get_error_in_cents(float32_t curr_frequency, float32_t target_frequency)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	ed87 0a01 	vstr	s0, [r7, #4]
 80013c2:	edc7 0a00 	vstr	s1, [r7]
	float32_t error = 1200 * log2(curr_frequency / target_frequency);
 80013c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80013ca:	edd7 7a00 	vldr	s15, [r7]
 80013ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013d2:	ee16 0a90 	vmov	r0, s13
 80013d6:	f7ff f8b7 	bl	8000548 <__aeabi_f2d>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	ec43 2b10 	vmov	d0, r2, r3
 80013e2:	f00b ffc5 	bl	800d370 <log>
 80013e6:	ec51 0b10 	vmov	r0, r1, d0
 80013ea:	a318      	add	r3, pc, #96	; (adr r3, 800144c <get_error_in_cents+0x94>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff fa2c 	bl	800084c <__aeabi_ddiv>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <get_error_in_cents+0x90>)
 8001402:	f7ff f8f9 	bl	80005f8 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff fbeb 	bl	8000be8 <__aeabi_d2f>
 8001412:	4603      	mov	r3, r0
 8001414:	60fb      	str	r3, [r7, #12]
	return round(error);
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f7ff f896 	bl	8000548 <__aeabi_f2d>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	ec43 2b10 	vmov	d0, r2, r3
 8001424:	f00b ff04 	bl	800d230 <round>
 8001428:	ec53 2b10 	vmov	r2, r3, d0
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fbda 	bl	8000be8 <__aeabi_d2f>
 8001434:	4603      	mov	r3, r0
 8001436:	ee07 3a90 	vmov	s15, r3
}
 800143a:	eeb0 0a67 	vmov.f32	s0, s15
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	f3af 8000 	nop.w
 8001448:	4092c000 	.word	0x4092c000
 800144c:	fefa39ef 	.word	0xfefa39ef
 8001450:	3fe62e42 	.word	0x3fe62e42

08001454 <toggle_motor_wait>:


void toggle_motor_wait()
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
	if (motor_wait == 2)
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <toggle_motor_wait+0x28>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d103      	bne.n	8001468 <toggle_motor_wait+0x14>
	{
		motor_wait = 0;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <toggle_motor_wait+0x28>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
	} else
	{
		motor_wait++;
	}
}
 8001466:	e004      	b.n	8001472 <toggle_motor_wait+0x1e>
		motor_wait++;
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <toggle_motor_wait+0x28>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	4a03      	ldr	r2, [pc, #12]	; (800147c <toggle_motor_wait+0x28>)
 8001470:	6013      	str	r3, [r2, #0]
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	200002a0 	.word	0x200002a0

08001480 <state_tune_up_fine>:

void state_tune_up_fine()
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
	int pulse_width = 46;
 8001486:	232e      	movs	r3, #46	; 0x2e
 8001488:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <state_tune_up_fine+0x34>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 8001492:	2064      	movs	r0, #100	; 0x64
 8001494:	f002 fc32 	bl	8003cfc <HAL_Delay>
	pulse_width = 50;
 8001498:	2332      	movs	r3, #50	; 0x32
 800149a:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <state_tune_up_fine+0x34>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	641a      	str	r2, [r3, #64]	; 0x40
	state = state_get_pitch;
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <state_tune_up_fine+0x38>)
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <state_tune_up_fine+0x3c>)
 80014a8:	601a      	str	r2, [r3, #0]
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20003940 	.word	0x20003940
 80014b8:	200027b8 	.word	0x200027b8
 80014bc:	080018e9 	.word	0x080018e9

080014c0 <state_tune_up_fast>:

void state_tune_up_fast()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	int pulse_width = 40;
 80014c6:	2328      	movs	r3, #40	; 0x28
 80014c8:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <state_tune_up_fast+0x40>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(200);
 80014d2:	20c8      	movs	r0, #200	; 0xc8
 80014d4:	f002 fc12 	bl	8003cfc <HAL_Delay>
	pulse_width = 50;
 80014d8:	2332      	movs	r3, #50	; 0x32
 80014da:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <state_tune_up_fast+0x40>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 80014e4:	2064      	movs	r0, #100	; 0x64
 80014e6:	f002 fc09 	bl	8003cfc <HAL_Delay>
	motor_wait = 0;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <state_tune_up_fast+0x44>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
	state = state_get_pitch;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <state_tune_up_fast+0x48>)
 80014f2:	4a06      	ldr	r2, [pc, #24]	; (800150c <state_tune_up_fast+0x4c>)
 80014f4:	601a      	str	r2, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20003940 	.word	0x20003940
 8001504:	200002a0 	.word	0x200002a0
 8001508:	200027b8 	.word	0x200027b8
 800150c:	080018e9 	.word	0x080018e9

08001510 <state_tune_down_fine>:

void state_tune_down_fine()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
	int pulse_width = 54;
 8001516:	2336      	movs	r3, #54	; 0x36
 8001518:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <state_tune_down_fine+0x34>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 8001522:	2064      	movs	r0, #100	; 0x64
 8001524:	f002 fbea 	bl	8003cfc <HAL_Delay>
	pulse_width = 50;
 8001528:	2332      	movs	r3, #50	; 0x32
 800152a:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <state_tune_down_fine+0x34>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40
	state = state_get_pitch;
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <state_tune_down_fine+0x38>)
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <state_tune_down_fine+0x3c>)
 8001538:	601a      	str	r2, [r3, #0]
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20003940 	.word	0x20003940
 8001548:	200027b8 	.word	0x200027b8
 800154c:	080018e9 	.word	0x080018e9

08001550 <state_tune_down_fast>:

void state_tune_down_fast()
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
	int pulse_width = 64;
 8001556:	2340      	movs	r3, #64	; 0x40
 8001558:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <state_tune_down_fast+0x40>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(200);
 8001562:	20c8      	movs	r0, #200	; 0xc8
 8001564:	f002 fbca 	bl	8003cfc <HAL_Delay>
	pulse_width = 50;
 8001568:	2332      	movs	r3, #50	; 0x32
 800156a:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <state_tune_down_fast+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 8001574:	2064      	movs	r0, #100	; 0x64
 8001576:	f002 fbc1 	bl	8003cfc <HAL_Delay>
	motor_wait = 0;
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <state_tune_down_fast+0x44>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
	state = state_get_pitch;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <state_tune_down_fast+0x48>)
 8001582:	4a06      	ldr	r2, [pc, #24]	; (800159c <state_tune_down_fast+0x4c>)
 8001584:	601a      	str	r2, [r3, #0]
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20003940 	.word	0x20003940
 8001594:	200002a0 	.word	0x200002a0
 8001598:	200027b8 	.word	0x200027b8
 800159c:	080018e9 	.word	0x080018e9

080015a0 <iterate_table_pos>:


void iterate_table_pos()
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
	if(table_pos_ptr == &pitch_table[TABLE_SIZE - 1])
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <iterate_table_pos+0x2c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a09      	ldr	r2, [pc, #36]	; (80015d0 <iterate_table_pos+0x30>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d103      	bne.n	80015b6 <iterate_table_pos+0x16>
	{
		table_pos_ptr = &pitch_table[0];
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <iterate_table_pos+0x2c>)
 80015b0:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <iterate_table_pos+0x34>)
 80015b2:	601a      	str	r2, [r3, #0]
	}else
	{
		table_pos_ptr++;
	}

}
 80015b4:	e004      	b.n	80015c0 <iterate_table_pos+0x20>
		table_pos_ptr++;
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <iterate_table_pos+0x2c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	3304      	adds	r3, #4
 80015bc:	4a03      	ldr	r2, [pc, #12]	; (80015cc <iterate_table_pos+0x2c>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000000 	.word	0x20000000
 80015d0:	200002c8 	.word	0x200002c8
 80015d4:	200002b8 	.word	0x200002b8

080015d8 <get_min_table>:

float32_t  get_min_table()
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0

	float32_t min = pitch_table[0];
 80015de:	4b14      	ldr	r3, [pc, #80]	; (8001630 <get_min_table+0x58>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < TABLE_SIZE; i++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	e015      	b.n	8001616 <get_min_table+0x3e>
	{
		if(pitch_table[i] < min)
 80015ea:	4a11      	ldr	r2, [pc, #68]	; (8001630 <get_min_table+0x58>)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80015fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001602:	dd05      	ble.n	8001610 <get_min_table+0x38>
		{
			min = pitch_table[i];
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <get_min_table+0x58>)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < TABLE_SIZE; i++)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	3301      	adds	r3, #1
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	2b04      	cmp	r3, #4
 800161a:	dde6      	ble.n	80015ea <get_min_table+0x12>
		}
	}
	//qsort(pitch_table, TABLE_SIZE, sizeof(float32_t), cmpfunc);
	//float32_t median_error = tmp[TABLE_CENTRE];
	return min;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	ee07 3a90 	vmov	s15, r3
}
 8001622:	eeb0 0a67 	vmov.f32	s0, s15
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	200002b8 	.word	0x200002b8

08001634 <init_table>:


int init_table(int PITCH_U, int PITCH_L, float32_t target_freq)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	ed87 0a01 	vstr	s0, [r7, #4]
	#define END TABLE_SIZE - 1

	if( pitch_table[END] < PITCH_L || pitch_table[END] > PITCH_U)
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <init_table+0xa4>)
 8001644:	ed93 7a04 	vldr	s14, [r3, #16]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165a:	d40c      	bmi.n	8001676 <init_table+0x42>
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <init_table+0xa4>)
 800165e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001674:	dd2a      	ble.n	80016cc <init_table+0x98>
	{
		float32_t freq = 0;
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
		get_frequency(&guitar_signal[0], target_freq, &freq);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	ed97 0a01 	vldr	s0, [r7, #4]
 8001686:	4815      	ldr	r0, [pc, #84]	; (80016dc <init_table+0xa8>)
 8001688:	f7ff fe56 	bl	8001338 <get_frequency>
		if(PITCH_L < freq && freq < PITCH_U)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001696:	edd7 7a05 	vldr	s15, [r7, #20]
 800169a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a2:	d513      	bpl.n	80016cc <init_table+0x98>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	ee07 3a90 	vmov	s15, r3
 80016aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80016b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ba:	dd07      	ble.n	80016cc <init_table+0x98>
		{
			*table_pos_ptr = freq;
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <init_table+0xac>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	601a      	str	r2, [r3, #0]
			iterate_table_pos();
 80016c4:	f7ff ff6c 	bl	80015a0 <iterate_table_pos>
			return 1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <init_table+0x9a>
		}
	}
	return 0;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200002b8 	.word	0x200002b8
 80016dc:	200028f4 	.word	0x200028f4
 80016e0:	20000000 	.word	0x20000000

080016e4 <state_string_pitch>:




void state_string_pitch(int UPP_LIM, int LOW_LIM, float32_t target_freq)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	ed87 0a01 	vstr	s0, [r7, #4]

	if (correct_pitch_counter ==  MIN_CORRECT)
 80016f2:	4b6f      	ldr	r3, [pc, #444]	; (80018b0 <state_string_pitch+0x1cc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d134      	bne.n	8001764 <state_string_pitch+0x80>
	{
		oled_clear_screen();
 80016fa:	f001 f973 	bl	80029e4 <oled_clear_screen>
		char *str = "Next";
 80016fe:	4b6d      	ldr	r3, [pc, #436]	; (80018b4 <state_string_pitch+0x1d0>)
 8001700:	617b      	str	r3, [r7, #20]
		oled_print_string(str);
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f001 f958 	bl	80029b8 <oled_print_string>
		string_tracking++;
 8001708:	4b6b      	ldr	r3, [pc, #428]	; (80018b8 <state_string_pitch+0x1d4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	4a6a      	ldr	r2, [pc, #424]	; (80018b8 <state_string_pitch+0x1d4>)
 8001710:	6013      	str	r3, [r2, #0]
		correct_pitch_counter = 0;
 8001712:	4b67      	ldr	r3, [pc, #412]	; (80018b0 <state_string_pitch+0x1cc>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]


		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	2102      	movs	r1, #2
 800171c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001720:	f004 fc8a 	bl	8006038 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8001724:	2032      	movs	r0, #50	; 0x32
 8001726:	f002 fae9 	bl	8003cfc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2102      	movs	r1, #2
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001732:	f004 fc81 	bl	8006038 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001736:	20c8      	movs	r0, #200	; 0xc8
 8001738:	f002 fae0 	bl	8003cfc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800173c:	2201      	movs	r2, #1
 800173e:	2102      	movs	r1, #2
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f004 fc78 	bl	8006038 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8001748:	2032      	movs	r0, #50	; 0x32
 800174a:	f002 fad7 	bl	8003cfc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2102      	movs	r1, #2
 8001752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001756:	f004 fc6f 	bl	8006038 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 800175a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800175e:	f002 facd 	bl	8003cfc <HAL_Delay>
 8001762:	e0a2      	b.n	80018aa <state_string_pitch+0x1c6>
		return;
	}

	while(init_table(UPP_LIM, LOW_LIM, target_freq));
 8001764:	bf00      	nop
 8001766:	ed97 0a01 	vldr	s0, [r7, #4]
 800176a:	68b9      	ldr	r1, [r7, #8]
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f7ff ff61 	bl	8001634 <init_table>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f6      	bne.n	8001766 <state_string_pitch+0x82>

	float32_t freq = 0;
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
	get_frequency(&guitar_signal[0], target_freq, &freq);
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	4619      	mov	r1, r3
 8001784:	ed97 0a01 	vldr	s0, [r7, #4]
 8001788:	484c      	ldr	r0, [pc, #304]	; (80018bc <state_string_pitch+0x1d8>)
 800178a:	f7ff fdd5 	bl	8001338 <get_frequency>

	if(LOW_LIM < freq && freq < UPP_LIM)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001798:	edd7 7a04 	vldr	s15, [r7, #16]
 800179c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a4:	d575      	bpl.n	8001892 <state_string_pitch+0x1ae>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80017b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017bc:	dd69      	ble.n	8001892 <state_string_pitch+0x1ae>
	{
		*table_pos_ptr = freq;
 80017be:	4b40      	ldr	r3, [pc, #256]	; (80018c0 <state_string_pitch+0x1dc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	601a      	str	r2, [r3, #0]
		iterate_table_pos();
 80017c6:	f7ff feeb 	bl	80015a0 <iterate_table_pos>
		float32_t m_freq = get_min_table();
 80017ca:	f7ff ff05 	bl	80015d8 <get_min_table>
 80017ce:	ed87 0a07 	vstr	s0, [r7, #28]
		float32_t error = get_error_in_cents(m_freq, target_freq);
 80017d2:	edd7 0a01 	vldr	s1, [r7, #4]
 80017d6:	ed97 0a07 	vldr	s0, [r7, #28]
 80017da:	f7ff fded 	bl	80013b8 <get_error_in_cents>
 80017de:	ed87 0a06 	vstr	s0, [r7, #24]

		oled_print_pitch_indicator_screen(guitar_strings[string_tracking], (int) error);
 80017e2:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <state_string_pitch+0x1d4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a37      	ldr	r2, [pc, #220]	; (80018c4 <state_string_pitch+0x1e0>)
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80017f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f4:	ee17 1a90 	vmov	r1, s15
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 f903 	bl	8002a04 <oled_print_pitch_indicator_screen>

		if (motor_wait == 0)
 80017fe:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <state_string_pitch+0x1e4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d14e      	bne.n	80018a4 <state_string_pitch+0x1c0>
		{
			if(error > 40) {
 8001806:	edd7 7a06 	vldr	s15, [r7, #24]
 800180a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80018cc <state_string_pitch+0x1e8>
 800180e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	dd06      	ble.n	8001826 <state_string_pitch+0x142>
				state = state_tune_down_fast;
 8001818:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <state_string_pitch+0x1ec>)
 800181a:	4a2e      	ldr	r2, [pc, #184]	; (80018d4 <state_string_pitch+0x1f0>)
 800181c:	601a      	str	r2, [r3, #0]
				correct_pitch_counter = 0;
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <state_string_pitch+0x1cc>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
	{
 8001824:	e03e      	b.n	80018a4 <state_string_pitch+0x1c0>
			} else if (error > 7)
 8001826:	edd7 7a06 	vldr	s15, [r7, #24]
 800182a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800182e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	dd06      	ble.n	8001846 <state_string_pitch+0x162>
			{
				state = state_tune_down_fine;
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <state_string_pitch+0x1ec>)
 800183a:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <state_string_pitch+0x1f4>)
 800183c:	601a      	str	r2, [r3, #0]
				correct_pitch_counter = 0;
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <state_string_pitch+0x1cc>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
	{
 8001844:	e02e      	b.n	80018a4 <state_string_pitch+0x1c0>
			}else if(error < -40.0)
 8001846:	edd7 7a06 	vldr	s15, [r7, #24]
 800184a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80018dc <state_string_pitch+0x1f8>
 800184e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001856:	d506      	bpl.n	8001866 <state_string_pitch+0x182>
			{

				state = state_tune_up_fast;
 8001858:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <state_string_pitch+0x1ec>)
 800185a:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <state_string_pitch+0x1fc>)
 800185c:	601a      	str	r2, [r3, #0]
				correct_pitch_counter = 0;
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <state_string_pitch+0x1cc>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
	{
 8001864:	e01e      	b.n	80018a4 <state_string_pitch+0x1c0>
			}else if(error < -7)
 8001866:	edd7 7a06 	vldr	s15, [r7, #24]
 800186a:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 800186e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001876:	d506      	bpl.n	8001886 <state_string_pitch+0x1a2>
			{
				state = state_tune_up_fine;
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <state_string_pitch+0x1ec>)
 800187a:	4a1a      	ldr	r2, [pc, #104]	; (80018e4 <state_string_pitch+0x200>)
 800187c:	601a      	str	r2, [r3, #0]
				correct_pitch_counter = 0;
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <state_string_pitch+0x1cc>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
	{
 8001884:	e00e      	b.n	80018a4 <state_string_pitch+0x1c0>
			} else
			{
				correct_pitch_counter++;
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <state_string_pitch+0x1cc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <state_string_pitch+0x1cc>)
 800188e:	6013      	str	r3, [r2, #0]
	{
 8001890:	e008      	b.n	80018a4 <state_string_pitch+0x1c0>
			}
		}
	}
	else
	{
		oled_clear_pitch_indicator_tick(guitar_strings[string_tracking]);
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <state_string_pitch+0x1d4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <state_string_pitch+0x1e0>)
 8001898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189c:	4618      	mov	r0, r3
 800189e:	f001 f901 	bl	8002aa4 <oled_clear_pitch_indicator_tick>
 80018a2:	e000      	b.n	80018a6 <state_string_pitch+0x1c2>
	{
 80018a4:	bf00      	nop
	}
	toggle_motor_wait();
 80018a6:	f7ff fdd5 	bl	8001454 <toggle_motor_wait>
}
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200002b4 	.word	0x200002b4
 80018b4:	0800efd8 	.word	0x0800efd8
 80018b8:	200002ac 	.word	0x200002ac
 80018bc:	200028f4 	.word	0x200028f4
 80018c0:	20000000 	.word	0x20000000
 80018c4:	20000018 	.word	0x20000018
 80018c8:	200002a0 	.word	0x200002a0
 80018cc:	42200000 	.word	0x42200000
 80018d0:	200027b8 	.word	0x200027b8
 80018d4:	08001551 	.word	0x08001551
 80018d8:	08001511 	.word	0x08001511
 80018dc:	c2200000 	.word	0xc2200000
 80018e0:	080014c1 	.word	0x080014c1
 80018e4:	08001481 	.word	0x08001481

080018e8 <state_get_pitch>:


void state_get_pitch()
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	#define B3_U 320
	#define B3_L 205
	#define E4_U 350
	#define E4_L 305

	if (string_tracking == E2_STRING_NUM)
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <state_get_pitch+0x98>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d106      	bne.n	8001902 <state_get_pitch+0x1a>
	{
		state_string_pitch(E2_U, E2_L, E2);
 80018f4:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001984 <state_get_pitch+0x9c>
 80018f8:	2137      	movs	r1, #55	; 0x37
 80018fa:	2064      	movs	r0, #100	; 0x64
 80018fc:	f7ff fef2 	bl	80016e4 <state_string_pitch>





}
 8001900:	e03c      	b.n	800197c <state_get_pitch+0x94>
	} else if (string_tracking == A2_STRING_NUM)
 8001902:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <state_get_pitch+0x98>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d106      	bne.n	8001918 <state_get_pitch+0x30>
		state_string_pitch(A2_U, A2_L, A2);
 800190a:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001988 <state_get_pitch+0xa0>
 800190e:	2155      	movs	r1, #85	; 0x55
 8001910:	208c      	movs	r0, #140	; 0x8c
 8001912:	f7ff fee7 	bl	80016e4 <state_string_pitch>
}
 8001916:	e031      	b.n	800197c <state_get_pitch+0x94>
	}else if (string_tracking == D3_STRING_NUM)
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <state_get_pitch+0x98>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d106      	bne.n	800192e <state_get_pitch+0x46>
		state_string_pitch(D3_U, D3_L, D3);
 8001920:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800198c <state_get_pitch+0xa4>
 8001924:	2173      	movs	r1, #115	; 0x73
 8001926:	20be      	movs	r0, #190	; 0xbe
 8001928:	f7ff fedc 	bl	80016e4 <state_string_pitch>
}
 800192c:	e026      	b.n	800197c <state_get_pitch+0x94>
	}else if (string_tracking == G3_STRING_NUM)
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <state_get_pitch+0x98>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d106      	bne.n	8001944 <state_get_pitch+0x5c>
		state_string_pitch(G3_U, G3_L, G3);
 8001936:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001990 <state_get_pitch+0xa8>
 800193a:	219b      	movs	r1, #155	; 0x9b
 800193c:	20e6      	movs	r0, #230	; 0xe6
 800193e:	f7ff fed1 	bl	80016e4 <state_string_pitch>
}
 8001942:	e01b      	b.n	800197c <state_get_pitch+0x94>
	}else if (string_tracking == B3_STRING_NUM)
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <state_get_pitch+0x98>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b04      	cmp	r3, #4
 800194a:	d107      	bne.n	800195c <state_get_pitch+0x74>
		state_string_pitch(B3_U, B3_L, B3);
 800194c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001994 <state_get_pitch+0xac>
 8001950:	21cd      	movs	r1, #205	; 0xcd
 8001952:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001956:	f7ff fec5 	bl	80016e4 <state_string_pitch>
}
 800195a:	e00f      	b.n	800197c <state_get_pitch+0x94>
	}else if (string_tracking == E4_STRING_NUM)
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <state_get_pitch+0x98>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b05      	cmp	r3, #5
 8001962:	d108      	bne.n	8001976 <state_get_pitch+0x8e>
		state_string_pitch(E4_U, E4_L, E4);
 8001964:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001998 <state_get_pitch+0xb0>
 8001968:	f240 1131 	movw	r1, #305	; 0x131
 800196c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001970:	f7ff feb8 	bl	80016e4 <state_string_pitch>
}
 8001974:	e002      	b.n	800197c <state_get_pitch+0x94>
		string_tracking =  E2_STRING_NUM;
 8001976:	4b02      	ldr	r3, [pc, #8]	; (8001980 <state_get_pitch+0x98>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200002ac 	.word	0x200002ac
 8001984:	42a4d1ec 	.word	0x42a4d1ec
 8001988:	42dc0000 	.word	0x42dc0000
 800198c:	4312d47b 	.word	0x4312d47b
 8001990:	43440000 	.word	0x43440000
 8001994:	4376f0a4 	.word	0x4376f0a4
 8001998:	43a4d0a4 	.word	0x43a4d0a4

0800199c <metronome>:




void metronome(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim2);
 80019a2:	4822      	ldr	r0, [pc, #136]	; (8001a2c <metronome+0x90>)
 80019a4:	f006 fee8 	bl	8008778 <HAL_TIM_Base_Start_IT>

	int bpm = 100;
 80019a8:	2364      	movs	r3, #100	; 0x64
 80019aa:	60fb      	str	r3, [r7, #12]

	oled_timing_screen(bpm);
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f001 f8cb 	bl	8002b48 <oled_timing_screen>
	ssd1306_UpdateScreen();
 80019b2:	f001 fdc1 	bl	8003538 <ssd1306_UpdateScreen>

	while (1)
	{
		int exit = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80019b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ba:	481d      	ldr	r0, [pc, #116]	; (8001a30 <metronome+0x94>)
 80019bc:	f004 fb24 	bl	8006008 <HAL_GPIO_ReadPin>
 80019c0:	4603      	mov	r3, r0
 80019c2:	60bb      	str	r3, [r7, #8]

		if (exit == 1)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d103      	bne.n	80019d2 <metronome+0x36>
		{
			HAL_TIM_Base_Stop_IT(&htim2);
 80019ca:	4818      	ldr	r0, [pc, #96]	; (8001a2c <metronome+0x90>)
 80019cc:	f006 ff28 	bl	8008820 <HAL_TIM_Base_Stop_IT>
			return;
 80019d0:	e029      	b.n	8001a26 <metronome+0x8a>
		}

		if (HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin))
 80019d2:	2140      	movs	r1, #64	; 0x40
 80019d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d8:	f004 fb16 	bl	8006008 <HAL_GPIO_ReadPin>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <metronome+0x56>
		{
			bpm++;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3301      	adds	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
			oled_timing_screen(bpm);
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f001 f8ad 	bl	8002b48 <oled_timing_screen>
			ssd1306_UpdateScreen();
 80019ee:	f001 fda3 	bl	8003538 <ssd1306_UpdateScreen>

		}
		if (HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin))
 80019f2:	2180      	movs	r1, #128	; 0x80
 80019f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f8:	f004 fb06 	bl	8006008 <HAL_GPIO_ReadPin>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d007      	beq.n	8001a12 <metronome+0x76>
		{
			bpm--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
			oled_timing_screen(bpm);
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f001 f89d 	bl	8002b48 <oled_timing_screen>
			ssd1306_UpdateScreen();
 8001a0e:	f001 fd93 	bl	8003538 <ssd1306_UpdateScreen>

		}

		int pre_scalar = 10000 * 60 / bpm;
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <metronome+0x98>)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a1a:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_PRESCALER(&htim2, pre_scalar);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <metronome+0x90>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
	{
 8001a24:	e7c7      	b.n	80019b6 <metronome+0x1a>

	}

}
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2000498c 	.word	0x2000498c
 8001a30:	48000400 	.word	0x48000400
 8001a34:	000927c0 	.word	0x000927c0

08001a38 <get_sineval>:




void get_sineval(uint32_t *sineval)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<100; i++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e03f      	b.n	8001ac6 <get_sineval+0x8e>
	{
		sineval[i] = 0.5 * ((sin(i*2*PI/100)+1)*(4096/2));
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	ee07 3a90 	vmov	s15, r3
 8001a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a52:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001ad8 <get_sineval+0xa0>
 8001a56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a5a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001adc <get_sineval+0xa4>
 8001a5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a62:	ee16 0a90 	vmov	r0, s13
 8001a66:	f7fe fd6f 	bl	8000548 <__aeabi_f2d>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	ec43 2b10 	vmov	d0, r2, r3
 8001a72:	f00b fc25 	bl	800d2c0 <sin>
 8001a76:	ec51 0b10 	vmov	r0, r1, d0
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <get_sineval+0xa8>)
 8001a80:	f7fe fc04 	bl	800028c <__adddf3>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <get_sineval+0xac>)
 8001a92:	f7fe fdb1 	bl	80005f8 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <get_sineval+0xb0>)
 8001aa4:	f7fe fda8 	bl	80005f8 <__aeabi_dmul>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	18d4      	adds	r4, r2, r3
 8001ab8:	f7ff f876 	bl	8000ba8 <__aeabi_d2uiz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	6023      	str	r3, [r4, #0]
	for (int i=0; i<100; i++)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b63      	cmp	r3, #99	; 0x63
 8001aca:	ddbc      	ble.n	8001a46 <get_sineval+0xe>
	}
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd90      	pop	{r4, r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40490fdb 	.word	0x40490fdb
 8001adc:	42c80000 	.word	0x42c80000
 8001ae0:	3ff00000 	.word	0x3ff00000
 8001ae4:	40a00000 	.word	0x40a00000
 8001ae8:	3fe00000 	.word	0x3fe00000

08001aec <tone_gen>:

void tone_gen(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b0e8      	sub	sp, #416	; 0x1a0
 8001af0:	af02      	add	r7, sp, #8

	oled_tone_screen(100);
 8001af2:	2064      	movs	r0, #100	; 0x64
 8001af4:	f000 fff6 	bl	8002ae4 <oled_tone_screen>
	HAL_TIM_Base_Start(&htim7);
 8001af8:	481e      	ldr	r0, [pc, #120]	; (8001b74 <tone_gen+0x88>)
 8001afa:	f006 fdc9 	bl	8008690 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b08:	f004 fa96 	bl	8006038 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001b0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b10:	f002 f8f4 	bl	8003cfc <HAL_Delay>

	uint32_t sineval[100];


	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1 , sineval, 100, DAC_ALIGN_12B_R);
 8001b14:	1d3a      	adds	r2, r7, #4
 8001b16:	2300      	movs	r3, #0
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2364      	movs	r3, #100	; 0x64
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4816      	ldr	r0, [pc, #88]	; (8001b78 <tone_gen+0x8c>)
 8001b20:	f003 fbee 	bl	8005300 <HAL_DAC_Start_DMA>

	while (1)
	{
		int exit = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8001b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b28:	4814      	ldr	r0, [pc, #80]	; (8001b7c <tone_gen+0x90>)
 8001b2a:	f004 fa6d 	bl	8006008 <HAL_GPIO_ReadPin>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

		if (exit == 1)
 8001b34:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d107      	bne.n	8001b4c <tone_gen+0x60>
		{
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	480e      	ldr	r0, [pc, #56]	; (8001b78 <tone_gen+0x8c>)
 8001b40:	f003 fcaa 	bl	8005498 <HAL_DAC_Stop_DMA>
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
			HAL_TIM_Base_Stop(&htim7);
 8001b44:	480b      	ldr	r0, [pc, #44]	; (8001b74 <tone_gen+0x88>)
 8001b46:	f006 fdef 	bl	8008728 <HAL_TIM_Base_Stop>
			return;
 8001b4a:	e00e      	b.n	8001b6a <tone_gen+0x7e>
		}

		if (HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin))
 8001b4c:	2140      	movs	r1, #64	; 0x40
 8001b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b52:	f004 fa59 	bl	8006008 <HAL_GPIO_ReadPin>
		{

		}
		if (HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin))
 8001b56:	2180      	movs	r1, #128	; 0x80
 8001b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5c:	f004 fa54 	bl	8006008 <HAL_GPIO_ReadPin>
		{


		}

		get_sineval(&sineval[0]);
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff68 	bl	8001a38 <get_sineval>
	{
 8001b68:	e7dc      	b.n	8001b24 <tone_gen+0x38>

	}



}
 8001b6a:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20004a30 	.word	0x20004a30
 8001b78:	200026e4 	.word	0x200026e4
 8001b7c:	48000400 	.word	0x48000400

08001b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b86:	f002 f845 	bl	8003c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b8a:	f000 f8e7 	bl	8001d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b8e:	f000 fc0b 	bl	80023a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b92:	f000 fbe3 	bl	800235c <MX_DMA_Init>
  MX_TIM6_Init();
 8001b96:	f000 fb4d 	bl	8002234 <MX_TIM6_Init>
  MX_OPAMP1_Init();
 8001b9a:	f000 fa4b 	bl	8002034 <MX_OPAMP1_Init>
  MX_ADC1_Init();
 8001b9e:	f000 f92d 	bl	8001dfc <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ba2:	f000 f9c3 	bl	8001f2c <MX_I2C1_Init>
  MX_DAC1_Init();
 8001ba6:	f000 f98f 	bl	8001ec8 <MX_DAC1_Init>
  MX_TIM1_Init();
 8001baa:	f000 fa67 	bl	800207c <MX_TIM1_Init>
  MX_I2C2_Init();
 8001bae:	f000 f9fd 	bl	8001fac <MX_I2C2_Init>
  MX_TIM16_Init();
 8001bb2:	f000 fbab 	bl	800230c <MX_TIM16_Init>
  MX_TIM2_Init();
 8001bb6:	f000 faef 	bl	8002198 <MX_TIM2_Init>
  MX_TIM7_Init();
 8001bba:	f000 fb71 	bl	80022a0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim6);
 8001bbe:	4859      	ldr	r0, [pc, #356]	; (8001d24 <main+0x1a4>)
 8001bc0:	f006 fd66 	bl	8008690 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001bc4:	210c      	movs	r1, #12
 8001bc6:	4858      	ldr	r0, [pc, #352]	; (8001d28 <main+0x1a8>)
 8001bc8:	f006 ff90 	bl	8008aec <HAL_TIM_PWM_Start>

	HAL_TIM_OC_Start(&htim6, TIM_CHANNEL_6);
 8001bcc:	2114      	movs	r1, #20
 8001bce:	4855      	ldr	r0, [pc, #340]	; (8001d24 <main+0x1a4>)
 8001bd0:	f006 fe56 	bl	8008880 <HAL_TIM_OC_Start>
	HAL_OPAMP_SelfCalibrate (&hopamp1);
 8001bd4:	4855      	ldr	r0, [pc, #340]	; (8001d2c <main+0x1ac>)
 8001bd6:	f005 fa78 	bl	80070ca <HAL_OPAMP_SelfCalibrate>
	HAL_OPAMP_Start(&hopamp1);
 8001bda:	4854      	ldr	r0, [pc, #336]	; (8001d2c <main+0x1ac>)
 8001bdc:	f005 fa44 	bl	8007068 <HAL_OPAMP_Start>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001be0:	217f      	movs	r1, #127	; 0x7f
 8001be2:	4853      	ldr	r0, [pc, #332]	; (8001d30 <main+0x1b0>)
 8001be4:	f003 f9f8 	bl	8004fd8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, 2 * BLOCK_SIZE);
 8001be8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bec:	4951      	ldr	r1, [pc, #324]	; (8001d34 <main+0x1b4>)
 8001bee:	4850      	ldr	r0, [pc, #320]	; (8001d30 <main+0x1b0>)
 8001bf0:	f002 fbde 	bl	80043b0 <HAL_ADC_Start_DMA>
	arm_biquad_cascade_df1_init_f32(&iir_settings, NUM_IIR_STAGES, &iir_taps[0], &iir_state[0]);
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <main+0x1b8>)
 8001bf6:	4a51      	ldr	r2, [pc, #324]	; (8001d3c <main+0x1bc>)
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4851      	ldr	r0, [pc, #324]	; (8001d40 <main+0x1c0>)
 8001bfc:	f008 faa6 	bl	800a14c <arm_biquad_cascade_df1_init_f32>


	oled_init();
 8001c00:	f000 fe96 	bl	8002930 <oled_init>
	init_tunings();
 8001c04:	f7ff face 	bl	80011a4 <init_tunings>

	MPU6050_Init(&hi2c1);
 8001c08:	484e      	ldr	r0, [pc, #312]	; (8001d44 <main+0x1c4>)
 8001c0a:	f7ff f83d 	bl	8000c88 <MPU6050_Init>
	myMpuConfig.Accel_Full_Scale = AFS_SEL_2g;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	70bb      	strb	r3, [r7, #2]
    myMpuConfig.CONFIG_DLPF = Internal_8MHz;
 8001c12:	2300      	movs	r3, #0
 8001c14:	70fb      	strb	r3, [r7, #3]
    myMpuConfig.ClockSource = DLPF_184A_188G_Hz;
 8001c16:	2301      	movs	r3, #1
 8001c18:	703b      	strb	r3, [r7, #0]
    myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	707b      	strb	r3, [r7, #1]
    myMpuConfig.Sleep_Mode_Bit = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	713b      	strb	r3, [r7, #4]
    MPU6050_Config(&myMpuConfig);
 8001c22:	463b      	mov	r3, r7
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff f883 	bl	8000d30 <MPU6050_Config>

	HAL_TIM_Base_Start_IT(&htim16);
 8001c2a:	4847      	ldr	r0, [pc, #284]	; (8001d48 <main+0x1c8>)
 8001c2c:	f006 fda4 	bl	8008778 <HAL_TIM_Base_Start_IT>



	state = state_get_pitch;
 8001c30:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <main+0x1cc>)
 8001c32:	4a47      	ldr	r2, [pc, #284]	; (8001d50 <main+0x1d0>)
 8001c34:	601a      	str	r2, [r3, #0]



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001c36:	2201      	movs	r2, #1
 8001c38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c3c:	4845      	ldr	r0, [pc, #276]	; (8001d54 <main+0x1d4>)
 8001c3e:	f004 f9fb 	bl	8006038 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001c42:	2201      	movs	r2, #1
 8001c44:	2101      	movs	r1, #1
 8001c46:	4843      	ldr	r0, [pc, #268]	; (8001d54 <main+0x1d4>)
 8001c48:	f004 f9f6 	bl	8006038 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c52:	4840      	ldr	r0, [pc, #256]	; (8001d54 <main+0x1d4>)
 8001c54:	f004 f9f0 	bl	8006038 <HAL_GPIO_WritePin>



	int counter = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	/*-------------------------------------------------------------------------------------------------------------------------------------------------------------*/
	while (1)
	{
		if (mode == 0)
 8001c5c:	4b3e      	ldr	r3, [pc, #248]	; (8001d58 <main+0x1d8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d156      	bne.n	8001d12 <main+0x192>
		{




			int Button1_val = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8001c64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c68:	483a      	ldr	r0, [pc, #232]	; (8001d54 <main+0x1d4>)
 8001c6a:	f004 f9cd 	bl	8006008 <HAL_GPIO_ReadPin>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	613b      	str	r3, [r7, #16]
			int Button2_val = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8001c72:	2140      	movs	r1, #64	; 0x40
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c78:	f004 f9c6 	bl	8006008 <HAL_GPIO_ReadPin>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60fb      	str	r3, [r7, #12]
			int Button3_val = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c86:	f004 f9bf 	bl	8006008 <HAL_GPIO_ReadPin>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	60bb      	str	r3, [r7, #8]

			if (Button2_val == 1 || Button3_val == 1)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d002      	beq.n	8001c9a <main+0x11a>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d125      	bne.n	8001ce6 <main+0x166>
			{

				if (counter == 0 )
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d111      	bne.n	8001cc4 <main+0x144>
				{

					oled_selection_screen();
 8001ca0:	f000 ff88 	bl	8002bb4 <oled_selection_screen>
					ssd1306_DrawRectangle(0, 36, 128,  58, 0);
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	233a      	movs	r3, #58	; 0x3a
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	2124      	movs	r1, #36	; 0x24
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f001 fe77 	bl	80039a2 <ssd1306_DrawRectangle>
					ssd1306_UpdateScreen();
 8001cb4:	f001 fc40 	bl	8003538 <ssd1306_UpdateScreen>
					counter = 1;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
					HAL_Delay(100);
 8001cbc:	2064      	movs	r0, #100	; 0x64
 8001cbe:	f002 f81d 	bl	8003cfc <HAL_Delay>
 8001cc2:	e010      	b.n	8001ce6 <main+0x166>

				} else
				{
					oled_selection_screen();
 8001cc4:	f000 ff76 	bl	8002bb4 <oled_selection_screen>
					ssd1306_DrawRectangle(0, 8, 128,  30, 0);
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	231e      	movs	r3, #30
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	2108      	movs	r1, #8
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f001 fe65 	bl	80039a2 <ssd1306_DrawRectangle>
					ssd1306_UpdateScreen();
 8001cd8:	f001 fc2e 	bl	8003538 <ssd1306_UpdateScreen>

					counter = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
					HAL_Delay(100);
 8001ce0:	2064      	movs	r0, #100	; 0x64
 8001ce2:	f002 f80b 	bl	8003cfc <HAL_Delay>
				}
			}

			if (Button1_val == 1)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d1b7      	bne.n	8001c5c <main+0xdc>
			{
				if (counter == 0)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d107      	bne.n	8001d02 <main+0x182>
				{

					tone_gen();
 8001cf2:	f7ff fefb 	bl	8001aec <tone_gen>
					oled_selection_screen();
 8001cf6:	f000 ff5d 	bl	8002bb4 <oled_selection_screen>
					HAL_Delay(200);
 8001cfa:	20c8      	movs	r0, #200	; 0xc8
 8001cfc:	f001 fffe 	bl	8003cfc <HAL_Delay>
 8001d00:	e7ac      	b.n	8001c5c <main+0xdc>

			} else {

					metronome();
 8001d02:	f7ff fe4b 	bl	800199c <metronome>
					oled_selection_screen();
 8001d06:	f000 ff55 	bl	8002bb4 <oled_selection_screen>
					HAL_Delay(200);
 8001d0a:	20c8      	movs	r0, #200	; 0xc8
 8001d0c:	f001 fff6 	bl	8003cfc <HAL_Delay>
 8001d10:	e7a4      	b.n	8001c5c <main+0xdc>

				}
			}


		}else if (mode == 1)
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <main+0x1d8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d1a0      	bne.n	8001c5c <main+0xdc>
		{
			//oled_timing_screen(100);
			state();
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <main+0x1cc>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4798      	blx	r3
		if (mode == 0)
 8001d20:	e79c      	b.n	8001c5c <main+0xdc>
 8001d22:	bf00      	nop
 8001d24:	200038f4 	.word	0x200038f4
 8001d28:	20003940 	.word	0x20003940
 8001d2c:	20002804 	.word	0x20002804
 8001d30:	20002838 	.word	0x20002838
 8001d34:	2000398c 	.word	0x2000398c
 8001d38:	20004a88 	.word	0x20004a88
 8001d3c:	20000004 	.word	0x20000004
 8001d40:	200049d8 	.word	0x200049d8
 8001d44:	200026f8 	.word	0x200026f8
 8001d48:	200049e4 	.word	0x200049e4
 8001d4c:	200027b8 	.word	0x200027b8
 8001d50:	080018e9 	.word	0x080018e9
 8001d54:	48000400 	.word	0x48000400
 8001d58:	200002b0 	.word	0x200002b0

08001d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b096      	sub	sp, #88	; 0x58
 8001d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	2244      	movs	r2, #68	; 0x44
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f008 fb48 	bl	800a400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d70:	463b      	mov	r3, r7
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d82:	f005 facf 	bl	8007324 <HAL_PWREx_ControlVoltageScaling>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d8c:	f000 fbda 	bl	8002544 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d90:	2301      	movs	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001da2:	2306      	movs	r3, #6
 8001da4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001da6:	2350      	movs	r3, #80	; 0x50
 8001da8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001daa:	2307      	movs	r3, #7
 8001dac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dae:	2302      	movs	r3, #2
 8001db0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001db2:	2304      	movs	r3, #4
 8001db4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f005 fb08 	bl	80073d0 <HAL_RCC_OscConfig>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001dc6:	f000 fbbd 	bl	8002544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dca:	230f      	movs	r3, #15
 8001dcc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001dde:	463b      	mov	r3, r7
 8001de0:	2104      	movs	r1, #4
 8001de2:	4618      	mov	r0, r3
 8001de4:	f005 ff06 	bl	8007bf4 <HAL_RCC_ClockConfig>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001dee:	f000 fba9 	bl	8002544 <Error_Handler>
  }
}
 8001df2:	bf00      	nop
 8001df4:	3758      	adds	r7, #88	; 0x58
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e02:	463b      	mov	r3, r7
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
 8001e10:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e12:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e14:	4a2a      	ldr	r2, [pc, #168]	; (8001ec0 <MX_ADC1_Init+0xc4>)
 8001e16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e18:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e1e:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e2a:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e30:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e32:	2204      	movs	r2, #4
 8001e34:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e3c:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e48:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e52:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e60:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e76:	4811      	ldr	r0, [pc, #68]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001e78:	f002 f952 	bl	8004120 <HAL_ADC_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001e82:	f000 fb5f 	bl	8002544 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <MX_ADC1_Init+0xc8>)
 8001e88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e92:	237f      	movs	r3, #127	; 0x7f
 8001e94:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e96:	2304      	movs	r3, #4
 8001e98:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4806      	ldr	r0, [pc, #24]	; (8001ebc <MX_ADC1_Init+0xc0>)
 8001ea4:	f002 fb12 	bl	80044cc <HAL_ADC_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001eae:	f000 fb49 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20002838 	.word	0x20002838
 8001ec0:	50040000 	.word	0x50040000
 8001ec4:	21800100 	.word	0x21800100

08001ec8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	2224      	movs	r2, #36	; 0x24
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f008 fa93 	bl	800a400 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <MX_DAC1_Init+0x5c>)
 8001edc:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <MX_DAC1_Init+0x60>)
 8001ede:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001ee0:	4810      	ldr	r0, [pc, #64]	; (8001f24 <MX_DAC1_Init+0x5c>)
 8001ee2:	f003 f9ea 	bl	80052ba <HAL_DAC_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001eec:	f000 fb2a 	bl	8002544 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8001ef4:	2314      	movs	r3, #20
 8001ef6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8001efc:	2301      	movs	r3, #1
 8001efe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	2200      	movs	r2, #0
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4806      	ldr	r0, [pc, #24]	; (8001f24 <MX_DAC1_Init+0x5c>)
 8001f0c:	f003 fb27 	bl	800555e <HAL_DAC_ConfigChannel>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001f16:	f000 fb15 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	3728      	adds	r7, #40	; 0x28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200026e4 	.word	0x200026e4
 8001f28:	40007400 	.word	0x40007400

08001f2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f32:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <MX_I2C1_Init+0x78>)
 8001f34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f38:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <MX_I2C1_Init+0x7c>)
 8001f3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f3c:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f42:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f48:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f4e:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f66:	480e      	ldr	r0, [pc, #56]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f68:	f004 f896 	bl	8006098 <HAL_I2C_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f72:	f000 fae7 	bl	8002544 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f76:	2100      	movs	r1, #0
 8001f78:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f7a:	f004 fee7 	bl	8006d4c <HAL_I2CEx_ConfigAnalogFilter>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f84:	f000 fade 	bl	8002544 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_I2C1_Init+0x74>)
 8001f8c:	f004 ff29 	bl	8006de2 <HAL_I2CEx_ConfigDigitalFilter>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f96:	f000 fad5 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200026f8 	.word	0x200026f8
 8001fa4:	40005400 	.word	0x40005400
 8001fa8:	00702991 	.word	0x00702991

08001fac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <MX_I2C2_Init+0x7c>)
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	; (800202c <MX_I2C2_Init+0x80>)
 8001fb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300F33;
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <MX_I2C2_Init+0x7c>)
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <MX_I2C2_Init+0x84>)
 8001fba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <MX_I2C2_Init+0x7c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fc2:	4b19      	ldr	r3, [pc, #100]	; (8002028 <MX_I2C2_Init+0x7c>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fc8:	4b17      	ldr	r3, [pc, #92]	; (8002028 <MX_I2C2_Init+0x7c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <MX_I2C2_Init+0x7c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <MX_I2C2_Init+0x7c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <MX_I2C2_Init+0x7c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <MX_I2C2_Init+0x7c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fe6:	4810      	ldr	r0, [pc, #64]	; (8002028 <MX_I2C2_Init+0x7c>)
 8001fe8:	f004 f856 	bl	8006098 <HAL_I2C_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001ff2:	f000 faa7 	bl	8002544 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	480b      	ldr	r0, [pc, #44]	; (8002028 <MX_I2C2_Init+0x7c>)
 8001ffa:	f004 fea7 	bl	8006d4c <HAL_I2CEx_ConfigAnalogFilter>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002004:	f000 fa9e 	bl	8002544 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002008:	2100      	movs	r1, #0
 800200a:	4807      	ldr	r0, [pc, #28]	; (8002028 <MX_I2C2_Init+0x7c>)
 800200c:	f004 fee9 	bl	8006de2 <HAL_I2CEx_ConfigDigitalFilter>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002016:	f000 fa95 	bl	8002544 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 800201a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800201e:	f004 ff2d 	bl	8006e7c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000274c 	.word	0x2000274c
 800202c:	40005800 	.word	0x40005800
 8002030:	00300f33 	.word	0x00300f33

08002034 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <MX_OPAMP1_Init+0x40>)
 800203a:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <MX_OPAMP1_Init+0x44>)
 800203c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_HIGH;
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <MX_OPAMP1_Init+0x40>)
 8002040:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002044:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <MX_OPAMP1_Init+0x40>)
 8002048:	220c      	movs	r2, #12
 800204a:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_OPAMP1_Init+0x40>)
 800204e:	2200      	movs	r2, #0
 8002050:	615a      	str	r2, [r3, #20]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <MX_OPAMP1_Init+0x40>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_OPAMP1_Init+0x40>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800205e:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_OPAMP1_Init+0x40>)
 8002060:	f004 ff2c 	bl	8006ebc <HAL_OPAMP_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_OPAMP1_Init+0x3a>
  {
    Error_Handler();
 800206a:	f000 fa6b 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20002804 	.word	0x20002804
 8002078:	40007800 	.word	0x40007800

0800207c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b096      	sub	sp, #88	; 0x58
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002082:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800208e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	611a      	str	r2, [r3, #16]
 800209e:	615a      	str	r2, [r3, #20]
 80020a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	222c      	movs	r2, #44	; 0x2c
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f008 f9a9 	bl	800a400 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ae:	4b38      	ldr	r3, [pc, #224]	; (8002190 <MX_TIM1_Init+0x114>)
 80020b0:	4a38      	ldr	r2, [pc, #224]	; (8002194 <MX_TIM1_Init+0x118>)
 80020b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2352;
 80020b4:	4b36      	ldr	r3, [pc, #216]	; (8002190 <MX_TIM1_Init+0x114>)
 80020b6:	f44f 6213 	mov.w	r2, #2352	; 0x930
 80020ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020bc:	4b34      	ldr	r3, [pc, #208]	; (8002190 <MX_TIM1_Init+0x114>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80020c2:	4b33      	ldr	r3, [pc, #204]	; (8002190 <MX_TIM1_Init+0x114>)
 80020c4:	2264      	movs	r2, #100	; 0x64
 80020c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c8:	4b31      	ldr	r3, [pc, #196]	; (8002190 <MX_TIM1_Init+0x114>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020ce:	4b30      	ldr	r3, [pc, #192]	; (8002190 <MX_TIM1_Init+0x114>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020d4:	4b2e      	ldr	r3, [pc, #184]	; (8002190 <MX_TIM1_Init+0x114>)
 80020d6:	2280      	movs	r2, #128	; 0x80
 80020d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020da:	482d      	ldr	r0, [pc, #180]	; (8002190 <MX_TIM1_Init+0x114>)
 80020dc:	f006 fcae 	bl	8008a3c <HAL_TIM_PWM_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80020e6:	f000 fa2d 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020fa:	4619      	mov	r1, r3
 80020fc:	4824      	ldr	r0, [pc, #144]	; (8002190 <MX_TIM1_Init+0x114>)
 80020fe:	f007 fc9b 	bl	8009a38 <HAL_TIMEx_MasterConfigSynchronization>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002108:	f000 fa1c 	bl	8002544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800210c:	2360      	movs	r3, #96	; 0x60
 800210e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 8002110:	2332      	movs	r3, #50	; 0x32
 8002112:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002114:	2300      	movs	r3, #0
 8002116:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800211c:	2300      	movs	r3, #0
 800211e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002120:	2300      	movs	r3, #0
 8002122:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002128:	220c      	movs	r2, #12
 800212a:	4619      	mov	r1, r3
 800212c:	4818      	ldr	r0, [pc, #96]	; (8002190 <MX_TIM1_Init+0x114>)
 800212e:	f006 fedb 	bl	8008ee8 <HAL_TIM_PWM_ConfigChannel>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002138:	f000 fa04 	bl	8002544 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002154:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800215e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	4619      	mov	r1, r3
 8002170:	4807      	ldr	r0, [pc, #28]	; (8002190 <MX_TIM1_Init+0x114>)
 8002172:	f007 fcc7 	bl	8009b04 <HAL_TIMEx_ConfigBreakDeadTime>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 800217c:	f000 f9e2 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002180:	4803      	ldr	r0, [pc, #12]	; (8002190 <MX_TIM1_Init+0x114>)
 8002182:	f000 ffbd 	bl	8003100 <HAL_TIM_MspPostInit>

}
 8002186:	bf00      	nop
 8002188:	3758      	adds	r7, #88	; 0x58
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20003940 	.word	0x20003940
 8002194:	40012c00 	.word	0x40012c00

08002198 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219e:	f107 0310 	add.w	r3, r7, #16
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <MX_TIM2_Init+0x98>)
 80021b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000- 1;
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <MX_TIM2_Init+0x98>)
 80021c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80021c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <MX_TIM2_Init+0x98>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000 - 1;
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <MX_TIM2_Init+0x98>)
 80021ce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80021d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d4:	4b16      	ldr	r3, [pc, #88]	; (8002230 <MX_TIM2_Init+0x98>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <MX_TIM2_Init+0x98>)
 80021dc:	2280      	movs	r2, #128	; 0x80
 80021de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021e0:	4813      	ldr	r0, [pc, #76]	; (8002230 <MX_TIM2_Init+0x98>)
 80021e2:	f006 f9fd 	bl	80085e0 <HAL_TIM_Base_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80021ec:	f000 f9aa 	bl	8002544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021f6:	f107 0310 	add.w	r3, r7, #16
 80021fa:	4619      	mov	r1, r3
 80021fc:	480c      	ldr	r0, [pc, #48]	; (8002230 <MX_TIM2_Init+0x98>)
 80021fe:	f006 ff87 	bl	8009110 <HAL_TIM_ConfigClockSource>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002208:	f000 f99c 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220c:	2300      	movs	r3, #0
 800220e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	4619      	mov	r1, r3
 8002218:	4805      	ldr	r0, [pc, #20]	; (8002230 <MX_TIM2_Init+0x98>)
 800221a:	f007 fc0d 	bl	8009a38 <HAL_TIMEx_MasterConfigSynchronization>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002224:	f000 f98e 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002228:	bf00      	nop
 800222a:	3720      	adds	r7, #32
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	2000498c 	.word	0x2000498c

08002234 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <MX_TIM6_Init+0x64>)
 8002246:	4a15      	ldr	r2, [pc, #84]	; (800229c <MX_TIM6_Init+0x68>)
 8002248:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <MX_TIM6_Init+0x64>)
 800224c:	2200      	movs	r2, #0
 800224e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <MX_TIM6_Init+0x64>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000 - 1;
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <MX_TIM6_Init+0x64>)
 8002258:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800225c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800225e:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <MX_TIM6_Init+0x64>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <MX_TIM6_Init+0x64>)
 8002266:	f006 f9bb 	bl	80085e0 <HAL_TIM_Base_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002270:	f000 f968 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002274:	2320      	movs	r3, #32
 8002276:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	4619      	mov	r1, r3
 8002280:	4805      	ldr	r0, [pc, #20]	; (8002298 <MX_TIM6_Init+0x64>)
 8002282:	f007 fbd9 	bl	8009a38 <HAL_TIMEx_MasterConfigSynchronization>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800228c:	f000 f95a 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200038f4 	.word	0x200038f4
 800229c:	40001000 	.word	0x40001000

080022a0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <MX_TIM7_Init+0x64>)
 80022b2:	4a15      	ldr	r2, [pc, #84]	; (8002308 <MX_TIM7_Init+0x68>)
 80022b4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 800 - 1;
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <MX_TIM7_Init+0x64>)
 80022b8:	f240 321f 	movw	r2, #799	; 0x31f
 80022bc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <MX_TIM7_Init+0x64>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10 - 1;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <MX_TIM7_Init+0x64>)
 80022c6:	2209      	movs	r2, #9
 80022c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <MX_TIM7_Init+0x64>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80022d0:	480c      	ldr	r0, [pc, #48]	; (8002304 <MX_TIM7_Init+0x64>)
 80022d2:	f006 f985 	bl	80085e0 <HAL_TIM_Base_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80022dc:	f000 f932 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022e0:	2320      	movs	r3, #32
 80022e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	4619      	mov	r1, r3
 80022ec:	4805      	ldr	r0, [pc, #20]	; (8002304 <MX_TIM7_Init+0x64>)
 80022ee:	f007 fba3 	bl	8009a38 <HAL_TIMEx_MasterConfigSynchronization>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80022f8:	f000 f924 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20004a30 	.word	0x20004a30
 8002308:	40001400 	.word	0x40001400

0800230c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <MX_TIM16_Init+0x48>)
 8002312:	4a11      	ldr	r2, [pc, #68]	; (8002358 <MX_TIM16_Init+0x4c>)
 8002314:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 20000;
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <MX_TIM16_Init+0x48>)
 8002318:	f644 6220 	movw	r2, #20000	; 0x4e20
 800231c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <MX_TIM16_Init+0x48>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4000 - 1;
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <MX_TIM16_Init+0x48>)
 8002326:	f640 729f 	movw	r2, #3999	; 0xf9f
 800232a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <MX_TIM16_Init+0x48>)
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <MX_TIM16_Init+0x48>)
 8002334:	2200      	movs	r2, #0
 8002336:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <MX_TIM16_Init+0x48>)
 800233a:	2200      	movs	r2, #0
 800233c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800233e:	4805      	ldr	r0, [pc, #20]	; (8002354 <MX_TIM16_Init+0x48>)
 8002340:	f006 f94e 	bl	80085e0 <HAL_TIM_Base_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800234a:	f000 f8fb 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	200049e4 	.word	0x200049e4
 8002358:	40014400 	.word	0x40014400

0800235c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <MX_DMA_Init+0x48>)
 8002364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002366:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <MX_DMA_Init+0x48>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6493      	str	r3, [r2, #72]	; 0x48
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <MX_DMA_Init+0x48>)
 8002370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	200b      	movs	r0, #11
 8002380:	f002 ff65 	bl	800524e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002384:	200b      	movs	r0, #11
 8002386:	f002 ff7e 	bl	8005286 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	200d      	movs	r0, #13
 8002390:	f002 ff5d 	bl	800524e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002394:	200d      	movs	r0, #13
 8002396:	f002 ff76 	bl	8005286 <HAL_NVIC_EnableIRQ>

}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000

080023a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ae:	f107 030c 	add.w	r3, r7, #12
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	60da      	str	r2, [r3, #12]
 80023bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023be:	4b45      	ldr	r3, [pc, #276]	; (80024d4 <MX_GPIO_Init+0x12c>)
 80023c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c2:	4a44      	ldr	r2, [pc, #272]	; (80024d4 <MX_GPIO_Init+0x12c>)
 80023c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ca:	4b42      	ldr	r3, [pc, #264]	; (80024d4 <MX_GPIO_Init+0x12c>)
 80023cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <MX_GPIO_Init+0x12c>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	4a3e      	ldr	r2, [pc, #248]	; (80024d4 <MX_GPIO_Init+0x12c>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e2:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <MX_GPIO_Init+0x12c>)
 80023e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ee:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <MX_GPIO_Init+0x12c>)
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	4a38      	ldr	r2, [pc, #224]	; (80024d4 <MX_GPIO_Init+0x12c>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023fa:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <MX_GPIO_Init+0x12c>)
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LED_BLUE_Pin, GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	f248 0102 	movw	r1, #32770	; 0x8002
 800240c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002410:	f003 fe12 	bl	8006038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Button2_Vcc_Pin, GPIO_PIN_RESET);
 8002414:	2200      	movs	r2, #0
 8002416:	f240 2101 	movw	r1, #513	; 0x201
 800241a:	482f      	ldr	r0, [pc, #188]	; (80024d8 <MX_GPIO_Init+0x130>)
 800241c:	f003 fe0c 	bl	8006038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Switch_High_GPIO_Port, Switch_High_Pin, GPIO_PIN_SET);
 8002420:	2201      	movs	r2, #1
 8002422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002426:	482c      	ldr	r0, [pc, #176]	; (80024d8 <MX_GPIO_Init+0x130>)
 8002428:	f003 fe06 	bl	8006038 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 LED_BLUE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LED_BLUE_Pin;
 800242c:	f248 0302 	movw	r3, #32770	; 0x8002
 8002430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002432:	2301      	movs	r3, #1
 8002434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	4619      	mov	r1, r3
 8002444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002448:	f003 fc64 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button3_Pin;
 800244c:	23c0      	movs	r3, #192	; 0xc0
 800244e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002458:	f107 030c 	add.w	r3, r7, #12
 800245c:	4619      	mov	r1, r3
 800245e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002462:	f003 fc57 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 Switch_High_Pin Button2_Vcc_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Switch_High_Pin|Button2_Vcc_Pin;
 8002466:	f248 2301 	movw	r3, #33281	; 0x8201
 800246a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246c:	2301      	movs	r3, #1
 800246e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	4619      	mov	r1, r3
 800247e:	4816      	ldr	r0, [pc, #88]	; (80024d8 <MX_GPIO_Init+0x130>)
 8002480:	f003 fc48 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch_Int_Pin */
  GPIO_InitStruct.Pin = Switch_Int_Pin;
 8002484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800248a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800248e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Switch_Int_GPIO_Port, &GPIO_InitStruct);
 8002494:	f107 030c 	add.w	r3, r7, #12
 8002498:	4619      	mov	r1, r3
 800249a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800249e:	f003 fc39 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 80024a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 80024b0:	f107 030c 	add.w	r3, r7, #12
 80024b4:	4619      	mov	r1, r3
 80024b6:	4808      	ldr	r0, [pc, #32]	; (80024d8 <MX_GPIO_Init+0x130>)
 80024b8:	f003 fc2c 	bl	8005d14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	2101      	movs	r1, #1
 80024c0:	2017      	movs	r0, #23
 80024c2:	f002 fec4 	bl	800524e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024c6:	2017      	movs	r0, #23
 80024c8:	f002 fedd 	bl	8005286 <HAL_NVIC_EnableIRQ>

}
 80024cc:	bf00      	nop
 80024ce:	3720      	adds	r7, #32
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	48000400 	.word	0x48000400

080024dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	80fb      	strh	r3, [r7, #6]

	Screenmode = HAL_GPIO_ReadPin(GPIOA, Switch_Int_Pin);
 80024e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ee:	f003 fd8b 	bl	8006008 <HAL_GPIO_ReadPin>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_GPIO_EXTI_Callback+0x5c>)
 80024f8:	601a      	str	r2, [r3, #0]



	if (Screenmode == 0)
 80024fa:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <HAL_GPIO_EXTI_Callback+0x5c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d105      	bne.n	800250e <HAL_GPIO_EXTI_Callback+0x32>
	{
		oled_selection_screen();
 8002502:	f000 fb57 	bl	8002bb4 <oled_selection_screen>
		mode = 0;
 8002506:	4b0d      	ldr	r3, [pc, #52]	; (800253c <HAL_GPIO_EXTI_Callback+0x60>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
		oled_clear_screen();

	}


}
 800250c:	e00f      	b.n	800252e <HAL_GPIO_EXTI_Callback+0x52>
		oled_clear_screen();
 800250e:	f000 fa69 	bl	80029e4 <oled_clear_screen>
		mode = 1;
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_GPIO_EXTI_Callback+0x60>)
 8002514:	2201      	movs	r2, #1
 8002516:	601a      	str	r2, [r3, #0]
		char *s = "Tuning";
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_GPIO_EXTI_Callback+0x64>)
 800251a:	60fb      	str	r3, [r7, #12]
		oled_print_string(s);
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 fa4b 	bl	80029b8 <oled_print_string>
		HAL_Delay(2000);
 8002522:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002526:	f001 fbe9 	bl	8003cfc <HAL_Delay>
		oled_clear_screen();
 800252a:	f000 fa5b 	bl	80029e4 <oled_clear_screen>
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200002a8 	.word	0x200002a8
 800253c:	200002b0 	.word	0x200002b0
 8002540:	0800efe0 	.word	0x0800efe0

08002544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002548:	b672      	cpsid	i
}
 800254a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800254c:	e7fe      	b.n	800254c <Error_Handler+0x8>

0800254e <mpm_sum_f32>:
	printf("end\n");
}


void mpm_sum_f32(float32_t *pSrc, uint16_t scrLen, float32_t *pRes)
{
 800254e:	b480      	push	{r7}
 8002550:	b087      	sub	sp, #28
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	460b      	mov	r3, r1
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	817b      	strh	r3, [r7, #10]
	*pRes = 0;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < scrLen; i++)
 8002564:	2300      	movs	r3, #0
 8002566:	82fb      	strh	r3, [r7, #22]
 8002568:	e010      	b.n	800258c <mpm_sum_f32+0x3e>
	{
		 *pRes += *pSrc;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	ed93 7a00 	vldr	s14, [r3]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	edc3 7a00 	vstr	s15, [r3]
		 pSrc++;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3304      	adds	r3, #4
 8002584:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < scrLen; i++)
 8002586:	8afb      	ldrh	r3, [r7, #22]
 8002588:	3301      	adds	r3, #1
 800258a:	82fb      	strh	r3, [r7, #22]
 800258c:	8afa      	ldrh	r2, [r7, #22]
 800258e:	897b      	ldrh	r3, [r7, #10]
 8002590:	429a      	cmp	r2, r3
 8002592:	d3ea      	bcc.n	800256a <mpm_sum_f32+0x1c>
	}
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	0000      	movs	r0, r0
 80025a4:	0000      	movs	r0, r0
	...

080025a8 <mpm_find_peak_f32>:


void mpm_find_peak_f32(float32_t *pSrc, uint16_t *tau)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
	uint16_t flag = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	82fb      	strh	r3, [r7, #22]
	uint16_t valid_peak_flag = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	82bb      	strh	r3, [r7, #20]
	float32_t peak_value = 0;
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	613b      	str	r3, [r7, #16]

	for (uint16_t i = 0; i < BLOCK_SIZE; i++)
 80025c0:	2300      	movs	r3, #0
 80025c2:	81fb      	strh	r3, [r7, #14]
 80025c4:	e038      	b.n	8002638 <mpm_find_peak_f32+0x90>
    {

       if (flag == 0 && *pSrc < 0)
 80025c6:	8afb      	ldrh	r3, [r7, #22]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d109      	bne.n	80025e0 <mpm_find_peak_f32+0x38>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	d501      	bpl.n	80025e0 <mpm_find_peak_f32+0x38>
       {
           flag = 1;
 80025dc:	2301      	movs	r3, #1
 80025de:	82fb      	strh	r3, [r7, #22]

       }
       if (flag == 1)
 80025e0:	8afb      	ldrh	r3, [r7, #22]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d122      	bne.n	800262c <mpm_find_peak_f32+0x84>
       {
       		if (*pSrc > peak_value && *pSrc > PEAK_THRESHOLD)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	edd3 7a00 	vldr	s15, [r3]
 80025ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80025f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f8:	d515      	bpl.n	8002626 <mpm_find_peak_f32+0x7e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd ffa2 	bl	8000548 <__aeabi_f2d>
 8002604:	a312      	add	r3, pc, #72	; (adr r3, 8002650 <mpm_find_peak_f32+0xa8>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	f7fe fa85 	bl	8000b18 <__aeabi_dcmpgt>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <mpm_find_peak_f32+0x7e>
       		{
				peak_value = *pSrc;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	613b      	str	r3, [r7, #16]
              	*tau = i;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	89fa      	ldrh	r2, [r7, #14]
 800261e:	801a      	strh	r2, [r3, #0]
                valid_peak_flag = 1;
 8002620:	2301      	movs	r3, #1
 8002622:	82bb      	strh	r3, [r7, #20]
 8002624:	e002      	b.n	800262c <mpm_find_peak_f32+0x84>

       		} else if (valid_peak_flag == 1)
 8002626:	8abb      	ldrh	r3, [r7, #20]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d00a      	beq.n	8002642 <mpm_find_peak_f32+0x9a>
       		{
       			return;
       		}
       }
       pSrc++;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3304      	adds	r3, #4
 8002630:	607b      	str	r3, [r7, #4]
	for (uint16_t i = 0; i < BLOCK_SIZE; i++)
 8002632:	89fb      	ldrh	r3, [r7, #14]
 8002634:	3301      	adds	r3, #1
 8002636:	81fb      	strh	r3, [r7, #14]
 8002638:	89fb      	ldrh	r3, [r7, #14]
 800263a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800263e:	d3c2      	bcc.n	80025c6 <mpm_find_peak_f32+0x1e>
 8002640:	e000      	b.n	8002644 <mpm_find_peak_f32+0x9c>
       			return;
 8002642:	bf00      	nop
    }
}
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	f3af 8000 	nop.w
 8002650:	cccccccd 	.word	0xcccccccd
 8002654:	3feccccc 	.word	0x3feccccc

08002658 <mpm_NSDF_f32>:


void mpm_NSDF_f32(float32_t *pSrc, float32_t **pDst)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08c      	sub	sp, #48	; 0x30
 800265c:	af02      	add	r7, sp, #8
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]

	float32_t *xcorr = &mpm_reserved_memory[1];
 8002662:	4b33      	ldr	r3, [pc, #204]	; (8002730 <mpm_NSDF_f32+0xd8>)
 8002664:	613b      	str	r3, [r7, #16]


	arm_correlate_f32(&pSrc[0], BLOCK_SIZE , &pSrc[0], BLOCK_SIZE, xcorr);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f007 fadb 	bl	8009c30 <arm_correlate_f32>


	float32_t *r = &xcorr[BLOCK_SIZE - 1];
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
	*pDst = r;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002686:	601a      	str	r2, [r3, #0]

	float32_t *xs = &mpm_reserved_memory[0];
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <mpm_NSDF_f32+0xdc>)
 800268a:	60fb      	str	r3, [r7, #12]
	float32_t *p_xs1 = &xs[0];
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	623b      	str	r3, [r7, #32]
	float32_t *p_xs2 = &xs[BLOCK_SIZE - 1];
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 8002696:	61fb      	str	r3, [r7, #28]
	float32_t xs1, xs2;

	arm_mult_f32(&pSrc[0], &pSrc[0],  &xs[0], BLOCK_SIZE);
 8002698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f007 fe2f 	bl	800a304 <arm_mult_f32>
	mpm_sum_f32(&xs[0], BLOCK_SIZE, &xs1);
 80026a6:	f107 0308 	add.w	r3, r7, #8
 80026aa:	461a      	mov	r2, r3
 80026ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f7ff ff4c 	bl	800254e <mpm_sum_f32>
	xs2 = xs1;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	61bb      	str	r3, [r7, #24]


	for (uint16_t tau = 0; tau < BLOCK_SIZE  ; tau++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	82fb      	strh	r3, [r7, #22]
 80026be:	e02d      	b.n	800271c <mpm_NSDF_f32+0xc4>
	{

		*r = 2 * (*r) / (xs1 + xs2);
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	edd3 7a00 	vldr	s15, [r3]
 80026c6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80026ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80026ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80026d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	edc3 7a00 	vstr	s15, [r3]

		xs1 = xs1 - (*p_xs1);
 80026e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	edd3 7a00 	vldr	s15, [r3]
 80026ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ee:	edc7 7a02 	vstr	s15, [r7, #8]
		xs2 = xs2 - (*p_xs2);
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	edd3 7a00 	vldr	s15, [r3]
 80026f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80026fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002700:	edc7 7a06 	vstr	s15, [r7, #24]

		r++;
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	3304      	adds	r3, #4
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
		p_xs1++;
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	3304      	adds	r3, #4
 800270e:	623b      	str	r3, [r7, #32]
		p_xs2--;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	3b04      	subs	r3, #4
 8002714:	61fb      	str	r3, [r7, #28]
	for (uint16_t tau = 0; tau < BLOCK_SIZE  ; tau++)
 8002716:	8afb      	ldrh	r3, [r7, #22]
 8002718:	3301      	adds	r3, #1
 800271a:	82fb      	strh	r3, [r7, #22]
 800271c:	8afb      	ldrh	r3, [r7, #22]
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002722:	d3cd      	bcc.n	80026c0 <mpm_NSDF_f32+0x68>
	}
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200002d4 	.word	0x200002d4
 8002734:	200002d0 	.word	0x200002d0

08002738 <mpm_parabolic_interpolation_f32>:


void mpm_parabolic_interpolation_f32(uint16_t x_pos, float32_t a, float32_t b, float32_t c, float32_t *delta_tau)
{
 8002738:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800273c:	b088      	sub	sp, #32
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	ed87 0a04 	vstr	s0, [r7, #16]
 8002746:	edc7 0a03 	vstr	s1, [r7, #12]
 800274a:	ed87 1a02 	vstr	s2, [r7, #8]
 800274e:	6079      	str	r1, [r7, #4]
 8002750:	82fb      	strh	r3, [r7, #22]
	a = 20*log10(a);
 8002752:	6938      	ldr	r0, [r7, #16]
 8002754:	f7fd fef8 	bl	8000548 <__aeabi_f2d>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	ec43 2b10 	vmov	d0, r2, r3
 8002760:	f00a fe4e 	bl	800d400 <log10>
 8002764:	ec51 0b10 	vmov	r0, r1, d0
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	4b43      	ldr	r3, [pc, #268]	; (800287c <mpm_parabolic_interpolation_f32+0x144>)
 800276e:	f7fd ff43 	bl	80005f8 <__aeabi_dmul>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	f7fe fa35 	bl	8000be8 <__aeabi_d2f>
 800277e:	4603      	mov	r3, r0
 8002780:	613b      	str	r3, [r7, #16]
	b = 20*log10(b);
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f7fd fee0 	bl	8000548 <__aeabi_f2d>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	ec43 2b10 	vmov	d0, r2, r3
 8002790:	f00a fe36 	bl	800d400 <log10>
 8002794:	ec51 0b10 	vmov	r0, r1, d0
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	4b37      	ldr	r3, [pc, #220]	; (800287c <mpm_parabolic_interpolation_f32+0x144>)
 800279e:	f7fd ff2b 	bl	80005f8 <__aeabi_dmul>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	f7fe fa1d 	bl	8000be8 <__aeabi_d2f>
 80027ae:	4603      	mov	r3, r0
 80027b0:	60fb      	str	r3, [r7, #12]
	c = 20*log10(c);
 80027b2:	68b8      	ldr	r0, [r7, #8]
 80027b4:	f7fd fec8 	bl	8000548 <__aeabi_f2d>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	ec43 2b10 	vmov	d0, r2, r3
 80027c0:	f00a fe1e 	bl	800d400 <log10>
 80027c4:	ec51 0b10 	vmov	r0, r1, d0
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	4b2b      	ldr	r3, [pc, #172]	; (800287c <mpm_parabolic_interpolation_f32+0x144>)
 80027ce:	f7fd ff13 	bl	80005f8 <__aeabi_dmul>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	f7fe fa05 	bl	8000be8 <__aeabi_d2f>
 80027de:	4603      	mov	r3, r0
 80027e0:	60bb      	str	r3, [r7, #8]

	float32_t delta_pos = 0.5 * (a - c) / (1 - 2.0*b + c);
 80027e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80027e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ee:	ee17 0a90 	vmov	r0, s15
 80027f2:	f7fd fea9 	bl	8000548 <__aeabi_f2d>
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	4b21      	ldr	r3, [pc, #132]	; (8002880 <mpm_parabolic_interpolation_f32+0x148>)
 80027fc:	f7fd fefc 	bl	80005f8 <__aeabi_dmul>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4614      	mov	r4, r2
 8002806:	461d      	mov	r5, r3
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f7fd fe9d 	bl	8000548 <__aeabi_f2d>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	f7fd fd3b 	bl	800028c <__adddf3>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	f04f 0000 	mov.w	r0, #0
 800281e:	4919      	ldr	r1, [pc, #100]	; (8002884 <mpm_parabolic_interpolation_f32+0x14c>)
 8002820:	f7fd fd32 	bl	8000288 <__aeabi_dsub>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4690      	mov	r8, r2
 800282a:	4699      	mov	r9, r3
 800282c:	68b8      	ldr	r0, [r7, #8]
 800282e:	f7fd fe8b 	bl	8000548 <__aeabi_f2d>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4640      	mov	r0, r8
 8002838:	4649      	mov	r1, r9
 800283a:	f7fd fd27 	bl	800028c <__adddf3>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4620      	mov	r0, r4
 8002844:	4629      	mov	r1, r5
 8002846:	f7fe f801 	bl	800084c <__aeabi_ddiv>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	f7fe f9c9 	bl	8000be8 <__aeabi_d2f>
 8002856:	4603      	mov	r3, r0
 8002858:	61fb      	str	r3, [r7, #28]

	*delta_tau = x_pos + delta_pos;
 800285a:	8afb      	ldrh	r3, [r7, #22]
 800285c:	ee07 3a90 	vmov	s15, r3
 8002860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002864:	edd7 7a07 	vldr	s15, [r7, #28]
 8002868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	edc3 7a00 	vstr	s15, [r3]
}
 8002872:	bf00      	nop
 8002874:	3720      	adds	r7, #32
 8002876:	46bd      	mov	sp, r7
 8002878:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800287c:	40340000 	.word	0x40340000
 8002880:	3fe00000 	.word	0x3fe00000
 8002884:	3ff00000 	.word	0x3ff00000

08002888 <mpm_mcleod_pitch_method_f32>:


void mpm_mcleod_pitch_method_f32(float32_t *pData, float32_t *pitch_estimate)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]


	float32_t *p_ncorr;

	mpm_NSDF_f32(pData, &p_ncorr);
 8002892:	f107 0314 	add.w	r3, r7, #20
 8002896:	4619      	mov	r1, r3
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff fedd 	bl	8002658 <mpm_NSDF_f32>
	uint16_t tau = 1;
 800289e:	2301      	movs	r3, #1
 80028a0:	827b      	strh	r3, [r7, #18]
	mpm_find_peak_f32(p_ncorr, &tau);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f107 0212 	add.w	r2, r7, #18
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fe7c 	bl	80025a8 <mpm_find_peak_f32>



   if (tau > BLOCK_SIZE - 2)
 80028b0:	8a7b      	ldrh	r3, [r7, #18]
 80028b2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d902      	bls.n	80028c0 <mpm_mcleod_pitch_method_f32+0x38>
   {
   	tau = BLOCK_SIZE - 2;
 80028ba:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80028be:	827b      	strh	r3, [r7, #18]
   }

	uint16_t xp = tau;
 80028c0:	8a7b      	ldrh	r3, [r7, #18]
 80028c2:	84fb      	strh	r3, [r7, #38]	; 0x26
	float32_t a = p_ncorr[tau - 1];
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	8a7b      	ldrh	r3, [r7, #18]
 80028c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028cc:	3b01      	subs	r3, #1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	623b      	str	r3, [r7, #32]
	float32_t b = p_ncorr[tau];
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	8a7b      	ldrh	r3, [r7, #18]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	61fb      	str	r3, [r7, #28]
	float32_t c = p_ncorr[tau + 1];
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	8a7b      	ldrh	r3, [r7, #18]
 80028e6:	3301      	adds	r3, #1
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	61bb      	str	r3, [r7, #24]

	float32_t delta_tau = 0;
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
	mpm_parabolic_interpolation_f32(xp, a, b, c, &delta_tau);
 80028f6:	f107 020c 	add.w	r2, r7, #12
 80028fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028fc:	4611      	mov	r1, r2
 80028fe:	ed97 1a06 	vldr	s2, [r7, #24]
 8002902:	edd7 0a07 	vldr	s1, [r7, #28]
 8002906:	ed97 0a08 	vldr	s0, [r7, #32]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff ff14 	bl	8002738 <mpm_parabolic_interpolation_f32>


	*pitch_estimate = FS / delta_tau;
 8002910:	ed97 7a03 	vldr	s14, [r7, #12]
 8002914:	eddf 6a05 	vldr	s13, [pc, #20]	; 800292c <mpm_mcleod_pitch_method_f32+0xa4>
 8002918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	edc3 7a00 	vstr	s15, [r3]
}
 8002922:	bf00      	nop
 8002924:	3728      	adds	r7, #40	; 0x28
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	471c4000 	.word	0x471c4000

08002930 <oled_init>:
#define RADIUS 30



void oled_init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
	ssd1306_Init1();
 8002936:	f001 f89d 	bl	8003a74 <ssd1306_Init1>
	ssd1306_Fill(White);
 800293a:	2001      	movs	r0, #1
 800293c:	f000 fdd8 	bl	80034f0 <ssd1306_Fill>
	ssd1306_DrawCircle(SCREEN_CENTRE_X, SCREEN_CENTRE_Y, RADIUS, Black);
 8002940:	2300      	movs	r3, #0
 8002942:	221e      	movs	r2, #30
 8002944:	2120      	movs	r1, #32
 8002946:	2040      	movs	r0, #64	; 0x40
 8002948:	f000 ffa4 	bl	8003894 <ssd1306_DrawCircle>

	char home_screen[11] = "Auto-Tuner";
 800294c:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <oled_init+0x80>)
 800294e:	463b      	mov	r3, r7
 8002950:	ca07      	ldmia	r2, {r0, r1, r2}
 8002952:	c303      	stmia	r3!, {r0, r1}
 8002954:	801a      	strh	r2, [r3, #0]
 8002956:	3302      	adds	r3, #2
 8002958:	0c12      	lsrs	r2, r2, #16
 800295a:	701a      	strb	r2, [r3, #0]
	for(int x = WIDTH; x > MID_X_POS_MED; x--)
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e010      	b.n	8002984 <oled_init+0x54>
	{
		ssd1306_SetCursor(x, MID_Y_POS_MED);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2118      	movs	r1, #24
 8002968:	4618      	mov	r0, r3
 800296a:	f000 ff0f 	bl	800378c <ssd1306_SetCursor>
		ssd1306_WriteString(home_screen, FONT_MED, Black);
 800296e:	4a11      	ldr	r2, [pc, #68]	; (80029b4 <oled_init+0x84>)
 8002970:	4638      	mov	r0, r7
 8002972:	2300      	movs	r3, #0
 8002974:	ca06      	ldmia	r2, {r1, r2}
 8002976:	f000 fee3 	bl	8003740 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800297a:	f000 fddd 	bl	8003538 <ssd1306_UpdateScreen>
	for(int x = WIDTH; x > MID_X_POS_MED; x--)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3b01      	subs	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b0a      	cmp	r3, #10
 8002988:	dceb      	bgt.n	8002962 <oled_init+0x32>
	}

	HAL_Delay(3000);
 800298a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800298e:	f001 f9b5 	bl	8003cfc <HAL_Delay>

	ssd1306_Fill(White);
 8002992:	2001      	movs	r0, #1
 8002994:	f000 fdac 	bl	80034f0 <ssd1306_Fill>
	ssd1306_DrawCircle(SCREEN_CENTRE_X, SCREEN_CENTRE_Y, RADIUS, Black);
 8002998:	2300      	movs	r3, #0
 800299a:	221e      	movs	r2, #30
 800299c:	2120      	movs	r1, #32
 800299e:	2040      	movs	r0, #64	; 0x40
 80029a0:	f000 ff78 	bl	8003894 <ssd1306_DrawCircle>
	ssd1306_UpdateScreen();
 80029a4:	f000 fdc8 	bl	8003538 <ssd1306_UpdateScreen>
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	0800efe8 	.word	0x0800efe8
 80029b4:	20000034 	.word	0x20000034

080029b8 <oled_print_string>:

void oled_print_string(char *string)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	 ssd1306_SetCursor(10, 24);
 80029c0:	2118      	movs	r1, #24
 80029c2:	200a      	movs	r0, #10
 80029c4:	f000 fee2 	bl	800378c <ssd1306_SetCursor>
	 ssd1306_WriteString(string, FONT_MED, Black);
 80029c8:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <oled_print_string+0x28>)
 80029ca:	2300      	movs	r3, #0
 80029cc:	ca06      	ldmia	r2, {r1, r2}
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 feb6 	bl	8003740 <ssd1306_WriteString>
	 ssd1306_UpdateScreen();
 80029d4:	f000 fdb0 	bl	8003538 <ssd1306_UpdateScreen>

}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000034 	.word	0x20000034

080029e4 <oled_clear_screen>:
	ssd1306_UpdateScreen();
}


void oled_clear_screen(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0

	ssd1306_Fill(White);
 80029e8:	2001      	movs	r0, #1
 80029ea:	f000 fd81 	bl	80034f0 <ssd1306_Fill>
	ssd1306_DrawCircle(SCREEN_CENTRE_X, SCREEN_CENTRE_Y, RADIUS, Black);
 80029ee:	2300      	movs	r3, #0
 80029f0:	221e      	movs	r2, #30
 80029f2:	2120      	movs	r1, #32
 80029f4:	2040      	movs	r0, #64	; 0x40
 80029f6:	f000 ff4d 	bl	8003894 <ssd1306_DrawCircle>
	ssd1306_UpdateScreen();
 80029fa:	f000 fd9d 	bl	8003538 <ssd1306_UpdateScreen>


}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <oled_print_pitch_indicator_screen>:

void oled_print_pitch_indicator_screen(char *guit_string, int error)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]

	ssd1306_Fill(White);
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f000 fd6e 	bl	80034f0 <ssd1306_Fill>
	ssd1306_DrawCircle(SCREEN_CENTRE_X, SCREEN_CENTRE_Y, RADIUS, Black);
 8002a14:	2300      	movs	r3, #0
 8002a16:	221e      	movs	r2, #30
 8002a18:	2120      	movs	r1, #32
 8002a1a:	2040      	movs	r0, #64	; 0x40
 8002a1c:	f000 ff3a 	bl	8003894 <ssd1306_DrawCircle>
	ssd1306_SetCursor(50, 5);
 8002a20:	2105      	movs	r1, #5
 8002a22:	2032      	movs	r0, #50	; 0x32
 8002a24:	f000 feb2 	bl	800378c <ssd1306_SetCursor>
	ssd1306_WriteString(guit_string, FONT_LARGE, Black);
 8002a28:	4a1c      	ldr	r2, [pc, #112]	; (8002a9c <oled_print_pitch_indicator_screen+0x98>)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	ca06      	ldmia	r2, {r1, r2}
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fe86 	bl	8003740 <ssd1306_WriteString>

	int x_pos = round(error/2) + 62;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	0fda      	lsrs	r2, r3, #31
 8002a38:	4413      	add	r3, r2
 8002a3a:	105b      	asrs	r3, r3, #1
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fd71 	bl	8000524 <__aeabi_i2d>
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <oled_print_pitch_indicator_screen+0x9c>)
 8002a48:	f7fd fc20 	bl	800028c <__adddf3>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f7fe f880 	bl	8000b58 <__aeabi_d2iz>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	60fb      	str	r3, [r7, #12]
	if (x_pos < 1)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	dc02      	bgt.n	8002a68 <oled_print_pitch_indicator_screen+0x64>
	{
		x_pos = 1;
 8002a62:	2301      	movs	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	e004      	b.n	8002a72 <oled_print_pitch_indicator_screen+0x6e>
	}
	else if (x_pos > 126)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b7e      	cmp	r3, #126	; 0x7e
 8002a6c:	dd01      	ble.n	8002a72 <oled_print_pitch_indicator_screen+0x6e>
	{
		x_pos = 126;
 8002a6e:	237e      	movs	r3, #126	; 0x7e
 8002a70:	60fb      	str	r3, [r7, #12]
	}
	ssd1306_SetCursor(x_pos , 30);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	211e      	movs	r1, #30
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fe87 	bl	800378c <ssd1306_SetCursor>

	char indicator = '|';
 8002a7e:	237c      	movs	r3, #124	; 0x7c
 8002a80:	72fb      	strb	r3, [r7, #11]
	ssd1306_WriteChar(indicator, FONT_LARGE, Black);
 8002a82:	4a06      	ldr	r2, [pc, #24]	; (8002a9c <oled_print_pitch_indicator_screen+0x98>)
 8002a84:	7af8      	ldrb	r0, [r7, #11]
 8002a86:	2300      	movs	r3, #0
 8002a88:	ca06      	ldmia	r2, {r1, r2}
 8002a8a:	f000 fdd1 	bl	8003630 <ssd1306_WriteChar>

	ssd1306_UpdateScreen();
 8002a8e:	f000 fd53 	bl	8003538 <ssd1306_UpdateScreen>


}
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	2000003c 	.word	0x2000003c
 8002aa0:	404f0000 	.word	0x404f0000

08002aa4 <oled_clear_pitch_indicator_tick>:


void oled_clear_pitch_indicator_tick(char *guit_string)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

	ssd1306_Fill(White);
 8002aac:	2001      	movs	r0, #1
 8002aae:	f000 fd1f 	bl	80034f0 <ssd1306_Fill>
	ssd1306_DrawCircle(SCREEN_CENTRE_X, SCREEN_CENTRE_Y, RADIUS, Black);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	221e      	movs	r2, #30
 8002ab6:	2120      	movs	r1, #32
 8002ab8:	2040      	movs	r0, #64	; 0x40
 8002aba:	f000 feeb 	bl	8003894 <ssd1306_DrawCircle>
	ssd1306_SetCursor(50, 5);
 8002abe:	2105      	movs	r1, #5
 8002ac0:	2032      	movs	r0, #50	; 0x32
 8002ac2:	f000 fe63 	bl	800378c <ssd1306_SetCursor>
	ssd1306_WriteString(guit_string, FONT_LARGE, Black);
 8002ac6:	4a06      	ldr	r2, [pc, #24]	; (8002ae0 <oled_clear_pitch_indicator_tick+0x3c>)
 8002ac8:	2300      	movs	r3, #0
 8002aca:	ca06      	ldmia	r2, {r1, r2}
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fe37 	bl	8003740 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002ad2:	f000 fd31 	bl	8003538 <ssd1306_UpdateScreen>

}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	2000003c 	.word	0x2000003c

08002ae4 <oled_tone_screen>:



void oled_tone_screen(int tone)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]



	ssd1306_Fill(White);
 8002aec:	2001      	movs	r0, #1
 8002aee:	f000 fcff 	bl	80034f0 <ssd1306_Fill>
	ssd1306_SetCursor(84, MID_Y_POS_MED);
 8002af2:	2118      	movs	r1, #24
 8002af4:	2054      	movs	r0, #84	; 0x54
 8002af6:	f000 fe49 	bl	800378c <ssd1306_SetCursor>
	char tone_string[10];
	sprintf(tone_string,"%d", tone);
 8002afa:	f107 030c 	add.w	r3, r7, #12
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	490e      	ldr	r1, [pc, #56]	; (8002b3c <oled_tone_screen+0x58>)
 8002b02:	4618      	mov	r0, r3
 8002b04:	f008 f8ee 	bl	800ace4 <siprintf>
	ssd1306_WriteString(tone_string, FONT_MED, Black);
 8002b08:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <oled_tone_screen+0x5c>)
 8002b0a:	f107 000c 	add.w	r0, r7, #12
 8002b0e:	2300      	movs	r3, #0
 8002b10:	ca06      	ldmia	r2, {r1, r2}
 8002b12:	f000 fe15 	bl	8003740 <ssd1306_WriteString>
	ssd1306_SetCursor(18, MID_Y_POS_MED);
 8002b16:	2118      	movs	r1, #24
 8002b18:	2012      	movs	r0, #18
 8002b1a:	f000 fe37 	bl	800378c <ssd1306_SetCursor>
	ssd1306_WriteString("Tone: ", FONT_MED, Black);
 8002b1e:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <oled_tone_screen+0x5c>)
 8002b20:	2300      	movs	r3, #0
 8002b22:	ca06      	ldmia	r2, {r1, r2}
 8002b24:	4807      	ldr	r0, [pc, #28]	; (8002b44 <oled_tone_screen+0x60>)
 8002b26:	f000 fe0b 	bl	8003740 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002b2a:	f000 fd05 	bl	8003538 <ssd1306_UpdateScreen>
	HAL_Delay(100);
 8002b2e:	2064      	movs	r0, #100	; 0x64
 8002b30:	f001 f8e4 	bl	8003cfc <HAL_Delay>

}
 8002b34:	bf00      	nop
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	0800f000 	.word	0x0800f000
 8002b40:	20000034 	.word	0x20000034
 8002b44:	0800f004 	.word	0x0800f004

08002b48 <oled_timing_screen>:

void oled_timing_screen(int timing)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

	ssd1306_Fill(White);
 8002b50:	2001      	movs	r0, #1
 8002b52:	f000 fccd 	bl	80034f0 <ssd1306_Fill>


	ssd1306_Fill(White);
 8002b56:	2001      	movs	r0, #1
 8002b58:	f000 fcca 	bl	80034f0 <ssd1306_Fill>
	ssd1306_SetCursor(30, MID_Y_POS_MED);
 8002b5c:	2118      	movs	r1, #24
 8002b5e:	201e      	movs	r0, #30
 8002b60:	f000 fe14 	bl	800378c <ssd1306_SetCursor>
	char timing_string[10];
	sprintf(timing_string,"%d", timing);
 8002b64:	f107 030c 	add.w	r3, r7, #12
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	490f      	ldr	r1, [pc, #60]	; (8002ba8 <oled_timing_screen+0x60>)
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f008 f8b9 	bl	800ace4 <siprintf>
	ssd1306_WriteString(timing_string, FONT_MED, Black);
 8002b72:	4a0e      	ldr	r2, [pc, #56]	; (8002bac <oled_timing_screen+0x64>)
 8002b74:	f107 000c 	add.w	r0, r7, #12
 8002b78:	2300      	movs	r3, #0
 8002b7a:	ca06      	ldmia	r2, {r1, r2}
 8002b7c:	f000 fde0 	bl	8003740 <ssd1306_WriteString>
	ssd1306_SetCursor(70, MID_Y_POS_MED);
 8002b80:	2118      	movs	r1, #24
 8002b82:	2046      	movs	r0, #70	; 0x46
 8002b84:	f000 fe02 	bl	800378c <ssd1306_SetCursor>
	ssd1306_WriteString(" BPM", FONT_MED, Black);
 8002b88:	4a08      	ldr	r2, [pc, #32]	; (8002bac <oled_timing_screen+0x64>)
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	ca06      	ldmia	r2, {r1, r2}
 8002b8e:	4808      	ldr	r0, [pc, #32]	; (8002bb0 <oled_timing_screen+0x68>)
 8002b90:	f000 fdd6 	bl	8003740 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002b94:	f000 fcd0 	bl	8003538 <ssd1306_UpdateScreen>
	HAL_Delay(100);
 8002b98:	2064      	movs	r0, #100	; 0x64
 8002b9a:	f001 f8af 	bl	8003cfc <HAL_Delay>

}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	0800f000 	.word	0x0800f000
 8002bac:	20000034 	.word	0x20000034
 8002bb0:	0800f00c 	.word	0x0800f00c

08002bb4 <oled_selection_screen>:


void oled_selection_screen(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
	ssd1306_Fill(White);
 8002bba:	2001      	movs	r0, #1
 8002bbc:	f000 fc98 	bl	80034f0 <ssd1306_Fill>

	char selection_screen[5] = "Tone";
 8002bc0:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <oled_selection_screen+0x68>)
 8002bc2:	463b      	mov	r3, r7
 8002bc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bc8:	6018      	str	r0, [r3, #0]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	7019      	strb	r1, [r3, #0]
	char *timing_screen = "Metronome";
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <oled_selection_screen+0x6c>)
 8002bd0:	60bb      	str	r3, [r7, #8]
	for(int x = 98; x > MID_X_POS_MED; x--)
 8002bd2:	2362      	movs	r3, #98	; 0x62
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	e018      	b.n	8002c0a <oled_selection_screen+0x56>
	{
		ssd1306_SetCursor(40, 10);
 8002bd8:	210a      	movs	r1, #10
 8002bda:	2028      	movs	r0, #40	; 0x28
 8002bdc:	f000 fdd6 	bl	800378c <ssd1306_SetCursor>
		ssd1306_WriteString(selection_screen, FONT_MED, Black);
 8002be0:	4a10      	ldr	r2, [pc, #64]	; (8002c24 <oled_selection_screen+0x70>)
 8002be2:	4638      	mov	r0, r7
 8002be4:	2300      	movs	r3, #0
 8002be6:	ca06      	ldmia	r2, {r1, r2}
 8002be8:	f000 fdaa 	bl	8003740 <ssd1306_WriteString>
		ssd1306_SetCursor(15, 40);
 8002bec:	2128      	movs	r1, #40	; 0x28
 8002bee:	200f      	movs	r0, #15
 8002bf0:	f000 fdcc 	bl	800378c <ssd1306_SetCursor>
		ssd1306_WriteString(timing_screen, FONT_MED, Black);
 8002bf4:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <oled_selection_screen+0x70>)
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	ca06      	ldmia	r2, {r1, r2}
 8002bfa:	68b8      	ldr	r0, [r7, #8]
 8002bfc:	f000 fda0 	bl	8003740 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8002c00:	f000 fc9a 	bl	8003538 <ssd1306_UpdateScreen>
	for(int x = 98; x > MID_X_POS_MED; x--)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b0a      	cmp	r3, #10
 8002c0e:	dce3      	bgt.n	8002bd8 <oled_selection_screen+0x24>

	}
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	0800f020 	.word	0x0800f020
 8002c20:	0800f014 	.word	0x0800f014
 8002c24:	20000034 	.word	0x20000034

08002c28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <HAL_MspInit+0x44>)
 8002c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c32:	4a0e      	ldr	r2, [pc, #56]	; (8002c6c <HAL_MspInit+0x44>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6613      	str	r3, [r2, #96]	; 0x60
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <HAL_MspInit+0x44>)
 8002c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	607b      	str	r3, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_MspInit+0x44>)
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <HAL_MspInit+0x44>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c50:	6593      	str	r3, [r2, #88]	; 0x58
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_MspInit+0x44>)
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000

08002c70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b09a      	sub	sp, #104	; 0x68
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c78:	f107 030c 	add.w	r3, r7, #12
 8002c7c:	225c      	movs	r2, #92	; 0x5c
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f007 fbbd 	bl	800a400 <memset>
  if(hadc->Instance==ADC1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a2e      	ldr	r2, [pc, #184]	; (8002d44 <HAL_ADC_MspInit+0xd4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d155      	bne.n	8002d3c <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002c90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c94:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002c96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 6;
 8002ca0:	2306      	movs	r3, #6
 8002ca2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 43;
 8002ca4:	232b      	movs	r3, #43	; 0x2b
 8002ca6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002ca8:	2307      	movs	r3, #7
 8002caa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002cac:	2302      	movs	r3, #2
 8002cae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cba:	f107 030c 	add.w	r3, r7, #12
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f005 f984 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 8002cca:	f7ff fc3b 	bl	8002544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002cce:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <HAL_ADC_MspInit+0xd8>)
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <HAL_ADC_MspInit+0xd8>)
 8002cd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_ADC_MspInit+0xd8>)
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002ce6:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_ADC_MspInit+0xdc>)
 8002ce8:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <HAL_ADC_MspInit+0xe0>)
 8002cea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002cec:	4b17      	ldr	r3, [pc, #92]	; (8002d4c <HAL_ADC_MspInit+0xdc>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cf2:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <HAL_ADC_MspInit+0xdc>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <HAL_ADC_MspInit+0xdc>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002cfe:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <HAL_ADC_MspInit+0xdc>)
 8002d00:	2280      	movs	r2, #128	; 0x80
 8002d02:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_ADC_MspInit+0xdc>)
 8002d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d0a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <HAL_ADC_MspInit+0xdc>)
 8002d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d12:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <HAL_ADC_MspInit+0xdc>)
 8002d16:	2220      	movs	r2, #32
 8002d18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d1a:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <HAL_ADC_MspInit+0xdc>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d20:	480a      	ldr	r0, [pc, #40]	; (8002d4c <HAL_ADC_MspInit+0xdc>)
 8002d22:	f002 fdc1 	bl	80058a8 <HAL_DMA_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8002d2c:	f7ff fc0a 	bl	8002544 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a06      	ldr	r2, [pc, #24]	; (8002d4c <HAL_ADC_MspInit+0xdc>)
 8002d34:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d36:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <HAL_ADC_MspInit+0xdc>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d3c:	bf00      	nop
 8002d3e:	3768      	adds	r7, #104	; 0x68
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	50040000 	.word	0x50040000
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	200028ac 	.word	0x200028ac
 8002d50:	40020008 	.word	0x40020008

08002d54 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08a      	sub	sp, #40	; 0x28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2b      	ldr	r2, [pc, #172]	; (8002e20 <HAL_DAC_MspInit+0xcc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d14f      	bne.n	8002e16 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002d76:	4b2b      	ldr	r3, [pc, #172]	; (8002e24 <HAL_DAC_MspInit+0xd0>)
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	4a2a      	ldr	r2, [pc, #168]	; (8002e24 <HAL_DAC_MspInit+0xd0>)
 8002d7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d80:	6593      	str	r3, [r2, #88]	; 0x58
 8002d82:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <HAL_DAC_MspInit+0xd0>)
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8e:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <HAL_DAC_MspInit+0xd0>)
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	4a24      	ldr	r2, [pc, #144]	; (8002e24 <HAL_DAC_MspInit+0xd0>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d9a:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <HAL_DAC_MspInit+0xd0>)
 8002d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002da6:	2310      	movs	r3, #16
 8002da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002daa:	2303      	movs	r3, #3
 8002dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	4619      	mov	r1, r3
 8002db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dbc:	f002 ffaa 	bl	8005d14 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_DAC_MspInit+0xd4>)
 8002dc2:	4a1a      	ldr	r2, [pc, #104]	; (8002e2c <HAL_DAC_MspInit+0xd8>)
 8002dc4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8002dc6:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <HAL_DAC_MspInit+0xd4>)
 8002dc8:	2206      	movs	r2, #6
 8002dca:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dcc:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <HAL_DAC_MspInit+0xd4>)
 8002dce:	2210      	movs	r2, #16
 8002dd0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_DAC_MspInit+0xd4>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <HAL_DAC_MspInit+0xd4>)
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_DAC_MspInit+0xd4>)
 8002de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_DAC_MspInit+0xd4>)
 8002de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dec:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_DAC_MspInit+0xd4>)
 8002df0:	2220      	movs	r2, #32
 8002df2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_DAC_MspInit+0xd4>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002dfa:	480b      	ldr	r0, [pc, #44]	; (8002e28 <HAL_DAC_MspInit+0xd4>)
 8002dfc:	f002 fd54 	bl	80058a8 <HAL_DMA_Init>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002e06:	f7ff fb9d 	bl	8002544 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a06      	ldr	r2, [pc, #24]	; (8002e28 <HAL_DAC_MspInit+0xd4>)
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <HAL_DAC_MspInit+0xd4>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002e16:	bf00      	nop
 8002e18:	3728      	adds	r7, #40	; 0x28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40007400 	.word	0x40007400
 8002e24:	40021000 	.word	0x40021000
 8002e28:	200027bc 	.word	0x200027bc
 8002e2c:	40020030 	.word	0x40020030

08002e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b0a2      	sub	sp, #136	; 0x88
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e48:	f107 0318 	add.w	r3, r7, #24
 8002e4c:	225c      	movs	r2, #92	; 0x5c
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f007 fad5 	bl	800a400 <memset>
  if(hi2c->Instance==I2C1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a3f      	ldr	r2, [pc, #252]	; (8002f58 <HAL_I2C_MspInit+0x128>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d138      	bne.n	8002ed2 <HAL_I2C_MspInit+0xa2>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002e60:	2340      	movs	r3, #64	; 0x40
 8002e62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002e64:	2300      	movs	r3, #0
 8002e66:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e68:	f107 0318 	add.w	r3, r7, #24
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f005 f8ad 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002e78:	f7ff fb64 	bl	8002544 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7c:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <HAL_I2C_MspInit+0x12c>)
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e80:	4a36      	ldr	r2, [pc, #216]	; (8002f5c <HAL_I2C_MspInit+0x12c>)
 8002e82:	f043 0302 	orr.w	r3, r3, #2
 8002e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e88:	4b34      	ldr	r3, [pc, #208]	; (8002f5c <HAL_I2C_MspInit+0x12c>)
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e94:	23c0      	movs	r3, #192	; 0xc0
 8002e96:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e98:	2312      	movs	r3, #18
 8002e9a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	482b      	ldr	r0, [pc, #172]	; (8002f60 <HAL_I2C_MspInit+0x130>)
 8002eb4:	f002 ff2e 	bl	8005d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eb8:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_I2C_MspInit+0x12c>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	4a27      	ldr	r2, [pc, #156]	; (8002f5c <HAL_I2C_MspInit+0x12c>)
 8002ebe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec4:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <HAL_I2C_MspInit+0x12c>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ed0:	e03d      	b.n	8002f4e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <HAL_I2C_MspInit+0x134>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d138      	bne.n	8002f4e <HAL_I2C_MspInit+0x11e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ee4:	f107 0318 	add.w	r3, r7, #24
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f005 f86f 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_I2C_MspInit+0xc8>
      Error_Handler();
 8002ef4:	f7ff fb26 	bl	8002544 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef8:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <HAL_I2C_MspInit+0x12c>)
 8002efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efc:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <HAL_I2C_MspInit+0x12c>)
 8002efe:	f043 0302 	orr.w	r3, r3, #2
 8002f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f04:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <HAL_I2C_MspInit+0x12c>)
 8002f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f14:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f16:	2312      	movs	r3, #18
 8002f18:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f24:	2304      	movs	r3, #4
 8002f26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f2e:	4619      	mov	r1, r3
 8002f30:	480b      	ldr	r0, [pc, #44]	; (8002f60 <HAL_I2C_MspInit+0x130>)
 8002f32:	f002 feef 	bl	8005d14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_I2C_MspInit+0x12c>)
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <HAL_I2C_MspInit+0x12c>)
 8002f3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f40:	6593      	str	r3, [r2, #88]	; 0x58
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_I2C_MspInit+0x12c>)
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
}
 8002f4e:	bf00      	nop
 8002f50:	3788      	adds	r7, #136	; 0x88
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40005400 	.word	0x40005400
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	48000400 	.word	0x48000400
 8002f64:	40005800 	.word	0x40005800

08002f68 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <HAL_OPAMP_MspInit+0x74>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d124      	bne.n	8002fd4 <HAL_OPAMP_MspInit+0x6c>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <HAL_OPAMP_MspInit+0x78>)
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8e:	4a14      	ldr	r2, [pc, #80]	; (8002fe0 <HAL_OPAMP_MspInit+0x78>)
 8002f90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f94:	6593      	str	r3, [r2, #88]	; 0x58
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_OPAMP_MspInit+0x78>)
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa2:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <HAL_OPAMP_MspInit+0x78>)
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa6:	4a0e      	ldr	r2, [pc, #56]	; (8002fe0 <HAL_OPAMP_MspInit+0x78>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fae:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <HAL_OPAMP_MspInit+0x78>)
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002fba:	2309      	movs	r3, #9
 8002fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fd0:	f002 fea0 	bl	8005d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8002fd4:	bf00      	nop
 8002fd6:	3728      	adds	r7, #40	; 0x28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40007800 	.word	0x40007800
 8002fe0:	40021000 	.word	0x40021000

08002fe4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	; (8003028 <HAL_TIM_PWM_MspInit+0x44>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d113      	bne.n	800301e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	; (800302c <HAL_TIM_PWM_MspInit+0x48>)
 8002ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffa:	4a0c      	ldr	r2, [pc, #48]	; (800302c <HAL_TIM_PWM_MspInit+0x48>)
 8002ffc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003000:	6613      	str	r3, [r2, #96]	; 0x60
 8003002:	4b0a      	ldr	r3, [pc, #40]	; (800302c <HAL_TIM_PWM_MspInit+0x48>)
 8003004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2102      	movs	r1, #2
 8003012:	2019      	movs	r0, #25
 8003014:	f002 f91b 	bl	800524e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003018:	2019      	movs	r0, #25
 800301a:	f002 f934 	bl	8005286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40012c00 	.word	0x40012c00
 800302c:	40021000 	.word	0x40021000

08003030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003040:	d114      	bne.n	800306c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003042:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <HAL_TIM_Base_MspInit+0xc0>)
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <HAL_TIM_Base_MspInit+0xc0>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6593      	str	r3, [r2, #88]	; 0x58
 800304e:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <HAL_TIM_Base_MspInit+0xc0>)
 8003050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	2102      	movs	r1, #2
 800305e:	201c      	movs	r0, #28
 8003060:	f002 f8f5 	bl	800524e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003064:	201c      	movs	r0, #28
 8003066:	f002 f90e 	bl	8005286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800306a:	e03c      	b.n	80030e6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <HAL_TIM_Base_MspInit+0xc4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10c      	bne.n	8003090 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003076:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <HAL_TIM_Base_MspInit+0xc0>)
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <HAL_TIM_Base_MspInit+0xc0>)
 800307c:	f043 0310 	orr.w	r3, r3, #16
 8003080:	6593      	str	r3, [r2, #88]	; 0x58
 8003082:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <HAL_TIM_Base_MspInit+0xc0>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]
}
 800308e:	e02a      	b.n	80030e6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <HAL_TIM_Base_MspInit+0xc8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d10c      	bne.n	80030b4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <HAL_TIM_Base_MspInit+0xc0>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <HAL_TIM_Base_MspInit+0xc0>)
 80030a0:	f043 0320 	orr.w	r3, r3, #32
 80030a4:	6593      	str	r3, [r2, #88]	; 0x58
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_TIM_Base_MspInit+0xc0>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
}
 80030b2:	e018      	b.n	80030e6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a10      	ldr	r2, [pc, #64]	; (80030fc <HAL_TIM_Base_MspInit+0xcc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d113      	bne.n	80030e6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80030be:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <HAL_TIM_Base_MspInit+0xc0>)
 80030c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c2:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <HAL_TIM_Base_MspInit+0xc0>)
 80030c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c8:	6613      	str	r3, [r2, #96]	; 0x60
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_TIM_Base_MspInit+0xc0>)
 80030cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2102      	movs	r1, #2
 80030da:	2019      	movs	r0, #25
 80030dc:	f002 f8b7 	bl	800524e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80030e0:	2019      	movs	r0, #25
 80030e2:	f002 f8d0 	bl	8005286 <HAL_NVIC_EnableIRQ>
}
 80030e6:	bf00      	nop
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40001000 	.word	0x40001000
 80030f8:	40001400 	.word	0x40001400
 80030fc:	40014400 	.word	0x40014400

08003100 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003108:	f107 030c 	add.w	r3, r7, #12
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a12      	ldr	r2, [pc, #72]	; (8003168 <HAL_TIM_MspPostInit+0x68>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d11d      	bne.n	800315e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003122:	4b12      	ldr	r3, [pc, #72]	; (800316c <HAL_TIM_MspPostInit+0x6c>)
 8003124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003126:	4a11      	ldr	r2, [pc, #68]	; (800316c <HAL_TIM_MspPostInit+0x6c>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800312e:	4b0f      	ldr	r3, [pc, #60]	; (800316c <HAL_TIM_MspPostInit+0x6c>)
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800313a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800313e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003140:	2302      	movs	r3, #2
 8003142:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800314c:	2301      	movs	r3, #1
 800314e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	4619      	mov	r1, r3
 8003156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800315a:	f002 fddb 	bl	8005d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800315e:	bf00      	nop
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40012c00 	.word	0x40012c00
 800316c:	40021000 	.word	0x40021000

08003170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003174:	e7fe      	b.n	8003174 <NMI_Handler+0x4>

08003176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800317a:	e7fe      	b.n	800317a <HardFault_Handler+0x4>

0800317c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003180:	e7fe      	b.n	8003180 <MemManage_Handler+0x4>

08003182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003186:	e7fe      	b.n	8003186 <BusFault_Handler+0x4>

08003188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800318c:	e7fe      	b.n	800318c <UsageFault_Handler+0x4>

0800318e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031bc:	f000 fd7e 	bl	8003cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <DMA1_Channel1_IRQHandler+0x10>)
 80031ca:	f002 fcc3 	bl	8005b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	200028ac 	.word	0x200028ac

080031d8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80031dc:	4802      	ldr	r0, [pc, #8]	; (80031e8 <DMA1_Channel3_IRQHandler+0x10>)
 80031de:	f002 fcb9 	bl	8005b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	200027bc 	.word	0x200027bc

080031ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Switch_Int_Pin);
 80031f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031f4:	f002 ff38 	bl	8006068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}

080031fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003200:	4803      	ldr	r0, [pc, #12]	; (8003210 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003202:	f005 fd51 	bl	8008ca8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003206:	4803      	ldr	r0, [pc, #12]	; (8003214 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003208:	f005 fd4e 	bl	8008ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800320c:	bf00      	nop
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20003940 	.word	0x20003940
 8003214:	200049e4 	.word	0x200049e4

08003218 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <TIM2_IRQHandler+0x10>)
 800321e:	f005 fd43 	bl	8008ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	2000498c 	.word	0x2000498c

0800322c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8003236:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <ITM_SendChar+0x48>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a0e      	ldr	r2, [pc, #56]	; (8003274 <ITM_SendChar+0x48>)
 800323c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003240:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8003242:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <ITM_SendChar+0x4c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a0c      	ldr	r2, [pc, #48]	; (8003278 <ITM_SendChar+0x4c>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800324e:	bf00      	nop
 8003250:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f8      	beq.n	8003250 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800325e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	6013      	str	r3, [r2, #0]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	e000edfc 	.word	0xe000edfc
 8003278:	e0000e00 	.word	0xe0000e00

0800327c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
	return 1;
 8003280:	2301      	movs	r3, #1
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <_kill>:

int _kill(int pid, int sig)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003296:	f007 f87b 	bl	800a390 <__errno>
 800329a:	4603      	mov	r3, r0
 800329c:	2216      	movs	r2, #22
 800329e:	601a      	str	r2, [r3, #0]
	return -1;
 80032a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_exit>:

void _exit (int status)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80032b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ffe7 	bl	800328c <_kill>
	while (1) {}		/* Make sure we hang here */
 80032be:	e7fe      	b.n	80032be <_exit+0x12>

080032c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	e00a      	b.n	80032e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032d2:	f3af 8000 	nop.w
 80032d6:	4601      	mov	r1, r0
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	60ba      	str	r2, [r7, #8]
 80032de:	b2ca      	uxtb	r2, r1
 80032e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	3301      	adds	r3, #1
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	dbf0      	blt.n	80032d2 <_read+0x12>
	}

return len;
 80032f0:	687b      	ldr	r3, [r7, #4]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e009      	b.n	8003320 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);   // This sends to the trace
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	60ba      	str	r2, [r7, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff89 	bl	800322c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	3301      	adds	r3, #1
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	429a      	cmp	r2, r3
 8003326:	dbf1      	blt.n	800330c <_write+0x12>
	}
	return len;
 8003328:	687b      	ldr	r3, [r7, #4]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <_close>:

int _close(int file)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
	return -1;
 800333a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800335a:	605a      	str	r2, [r3, #4]
	return 0;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <_isatty>:

int _isatty(int file)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
	return 1;
 8003372:	2301      	movs	r3, #1
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
	return 0;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033a4:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <_sbrk+0x5c>)
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <_sbrk+0x60>)
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033b0:	4b13      	ldr	r3, [pc, #76]	; (8003400 <_sbrk+0x64>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033b8:	4b11      	ldr	r3, [pc, #68]	; (8003400 <_sbrk+0x64>)
 80033ba:	4a12      	ldr	r2, [pc, #72]	; (8003404 <_sbrk+0x68>)
 80033bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033be:	4b10      	ldr	r3, [pc, #64]	; (8003400 <_sbrk+0x64>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4413      	add	r3, r2
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d207      	bcs.n	80033dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033cc:	f006 ffe0 	bl	800a390 <__errno>
 80033d0:	4603      	mov	r3, r0
 80033d2:	220c      	movs	r2, #12
 80033d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033da:	e009      	b.n	80033f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033dc:	4b08      	ldr	r3, [pc, #32]	; (8003400 <_sbrk+0x64>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033e2:	4b07      	ldr	r3, [pc, #28]	; (8003400 <_sbrk+0x64>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	4a05      	ldr	r2, [pc, #20]	; (8003400 <_sbrk+0x64>)
 80033ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033ee:	68fb      	ldr	r3, [r7, #12]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	20010000 	.word	0x20010000
 80033fc:	00000400 	.word	0x00000400
 8003400:	200022d0 	.word	0x200022d0
 8003404:	20004ab0 	.word	0x20004ab0

08003408 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <SystemInit+0x20>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	4a05      	ldr	r2, [pc, #20]	; (8003428 <SystemInit+0x20>)
 8003414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800342c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003464 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003430:	f7ff ffea 	bl	8003408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003434:	480c      	ldr	r0, [pc, #48]	; (8003468 <LoopForever+0x6>)
  ldr r1, =_edata
 8003436:	490d      	ldr	r1, [pc, #52]	; (800346c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003438:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <LoopForever+0xe>)
  movs r3, #0
 800343a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800343c:	e002      	b.n	8003444 <LoopCopyDataInit>

0800343e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800343e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003442:	3304      	adds	r3, #4

08003444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003448:	d3f9      	bcc.n	800343e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800344a:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <LoopForever+0x12>)
  ldr r4, =_ebss
 800344c:	4c0a      	ldr	r4, [pc, #40]	; (8003478 <LoopForever+0x16>)
  movs r3, #0
 800344e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003450:	e001      	b.n	8003456 <LoopFillZerobss>

08003452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003454:	3204      	adds	r2, #4

08003456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003458:	d3fb      	bcc.n	8003452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800345a:	f006 ff9f 	bl	800a39c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800345e:	f7fe fb8f 	bl	8001b80 <main>

08003462 <LoopForever>:

LoopForever:
    b LoopForever
 8003462:	e7fe      	b.n	8003462 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003464:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800346c:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8003470:	08011750 	.word	0x08011750
  ldr r2, =_sbss
 8003474:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003478:	20004aac 	.word	0x20004aac

0800347c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800347c:	e7fe      	b.n	800347c <ADC1_IRQHandler>

0800347e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800347e:	b480      	push	{r7}
 8003480:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003482:	bf00      	nop
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af04      	add	r7, sp, #16
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800349a:	9302      	str	r3, [sp, #8]
 800349c:	2301      	movs	r3, #1
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	1dfb      	adds	r3, r7, #7
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2301      	movs	r3, #1
 80034a6:	2200      	movs	r2, #0
 80034a8:	2178      	movs	r1, #120	; 0x78
 80034aa:	4803      	ldr	r0, [pc, #12]	; (80034b8 <ssd1306_WriteCommand+0x2c>)
 80034ac:	f003 f86e 	bl	800658c <HAL_I2C_Mem_Write>
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	2000274c 	.word	0x2000274c

080034bc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af04      	add	r7, sp, #16
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034ce:	9202      	str	r2, [sp, #8]
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2301      	movs	r3, #1
 80034d8:	2240      	movs	r2, #64	; 0x40
 80034da:	2178      	movs	r1, #120	; 0x78
 80034dc:	4803      	ldr	r0, [pc, #12]	; (80034ec <ssd1306_WriteData+0x30>)
 80034de:	f003 f855 	bl	800658c <HAL_I2C_Mem_Write>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	2000274c 	.word	0x2000274c

080034f0 <ssd1306_Fill>:




// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	e00d      	b.n	800351c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <ssd1306_Fill+0x1a>
 8003506:	2100      	movs	r1, #0
 8003508:	e000      	b.n	800350c <ssd1306_Fill+0x1c>
 800350a:	21ff      	movs	r1, #255	; 0xff
 800350c:	4a09      	ldr	r2, [pc, #36]	; (8003534 <ssd1306_Fill+0x44>)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4413      	add	r3, r2
 8003512:	460a      	mov	r2, r1
 8003514:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	3301      	adds	r3, #1
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003522:	d3ed      	bcc.n	8003500 <ssd1306_Fill+0x10>
    }
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	200022d4 	.word	0x200022d4

08003538 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800353e:	2300      	movs	r3, #0
 8003540:	71fb      	strb	r3, [r7, #7]
 8003542:	e016      	b.n	8003572 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	3b50      	subs	r3, #80	; 0x50
 8003548:	b2db      	uxtb	r3, r3
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff ff9e 	bl	800348c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003550:	2000      	movs	r0, #0
 8003552:	f7ff ff9b 	bl	800348c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003556:	2010      	movs	r0, #16
 8003558:	f7ff ff98 	bl	800348c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	01db      	lsls	r3, r3, #7
 8003560:	4a08      	ldr	r2, [pc, #32]	; (8003584 <ssd1306_UpdateScreen+0x4c>)
 8003562:	4413      	add	r3, r2
 8003564:	2180      	movs	r1, #128	; 0x80
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff ffa8 	bl	80034bc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	3301      	adds	r3, #1
 8003570:	71fb      	strb	r3, [r7, #7]
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	2b07      	cmp	r3, #7
 8003576:	d9e5      	bls.n	8003544 <ssd1306_UpdateScreen+0xc>
    }
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200022d4 	.word	0x200022d4

08003588 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	71fb      	strb	r3, [r7, #7]
 8003592:	460b      	mov	r3, r1
 8003594:	71bb      	strb	r3, [r7, #6]
 8003596:	4613      	mov	r3, r2
 8003598:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800359a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	db3d      	blt.n	800361e <ssd1306_DrawPixel+0x96>
 80035a2:	79bb      	ldrb	r3, [r7, #6]
 80035a4:	2b3f      	cmp	r3, #63	; 0x3f
 80035a6:	d83a      	bhi.n	800361e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80035a8:	797b      	ldrb	r3, [r7, #5]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d11a      	bne.n	80035e4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80035ae:	79fa      	ldrb	r2, [r7, #7]
 80035b0:	79bb      	ldrb	r3, [r7, #6]
 80035b2:	08db      	lsrs	r3, r3, #3
 80035b4:	b2d8      	uxtb	r0, r3
 80035b6:	4603      	mov	r3, r0
 80035b8:	01db      	lsls	r3, r3, #7
 80035ba:	4413      	add	r3, r2
 80035bc:	4a1b      	ldr	r2, [pc, #108]	; (800362c <ssd1306_DrawPixel+0xa4>)
 80035be:	5cd3      	ldrb	r3, [r2, r3]
 80035c0:	b25a      	sxtb	r2, r3
 80035c2:	79bb      	ldrb	r3, [r7, #6]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	2101      	movs	r1, #1
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	b25b      	sxtb	r3, r3
 80035d0:	4313      	orrs	r3, r2
 80035d2:	b259      	sxtb	r1, r3
 80035d4:	79fa      	ldrb	r2, [r7, #7]
 80035d6:	4603      	mov	r3, r0
 80035d8:	01db      	lsls	r3, r3, #7
 80035da:	4413      	add	r3, r2
 80035dc:	b2c9      	uxtb	r1, r1
 80035de:	4a13      	ldr	r2, [pc, #76]	; (800362c <ssd1306_DrawPixel+0xa4>)
 80035e0:	54d1      	strb	r1, [r2, r3]
 80035e2:	e01d      	b.n	8003620 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80035e4:	79fa      	ldrb	r2, [r7, #7]
 80035e6:	79bb      	ldrb	r3, [r7, #6]
 80035e8:	08db      	lsrs	r3, r3, #3
 80035ea:	b2d8      	uxtb	r0, r3
 80035ec:	4603      	mov	r3, r0
 80035ee:	01db      	lsls	r3, r3, #7
 80035f0:	4413      	add	r3, r2
 80035f2:	4a0e      	ldr	r2, [pc, #56]	; (800362c <ssd1306_DrawPixel+0xa4>)
 80035f4:	5cd3      	ldrb	r3, [r2, r3]
 80035f6:	b25a      	sxtb	r2, r3
 80035f8:	79bb      	ldrb	r3, [r7, #6]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f303 	lsl.w	r3, r1, r3
 8003604:	b25b      	sxtb	r3, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	b25b      	sxtb	r3, r3
 800360a:	4013      	ands	r3, r2
 800360c:	b259      	sxtb	r1, r3
 800360e:	79fa      	ldrb	r2, [r7, #7]
 8003610:	4603      	mov	r3, r0
 8003612:	01db      	lsls	r3, r3, #7
 8003614:	4413      	add	r3, r2
 8003616:	b2c9      	uxtb	r1, r1
 8003618:	4a04      	ldr	r2, [pc, #16]	; (800362c <ssd1306_DrawPixel+0xa4>)
 800361a:	54d1      	strb	r1, [r2, r3]
 800361c:	e000      	b.n	8003620 <ssd1306_DrawPixel+0x98>
        return;
 800361e:	bf00      	nop
    }
}
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	200022d4 	.word	0x200022d4

08003630 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003630:	b590      	push	{r4, r7, lr}
 8003632:	b089      	sub	sp, #36	; 0x24
 8003634:	af00      	add	r7, sp, #0
 8003636:	4604      	mov	r4, r0
 8003638:	1d38      	adds	r0, r7, #4
 800363a:	e880 0006 	stmia.w	r0, {r1, r2}
 800363e:	461a      	mov	r2, r3
 8003640:	4623      	mov	r3, r4
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	4613      	mov	r3, r2
 8003646:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b1f      	cmp	r3, #31
 800364c:	d902      	bls.n	8003654 <ssd1306_WriteChar+0x24>
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	2b7e      	cmp	r3, #126	; 0x7e
 8003652:	d901      	bls.n	8003658 <ssd1306_WriteChar+0x28>
        return 0;
 8003654:	2300      	movs	r3, #0
 8003656:	e06d      	b.n	8003734 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003658:	4b38      	ldr	r3, [pc, #224]	; (800373c <ssd1306_WriteChar+0x10c>)
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	793b      	ldrb	r3, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	2b80      	cmp	r3, #128	; 0x80
 8003664:	dc06      	bgt.n	8003674 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003666:	4b35      	ldr	r3, [pc, #212]	; (800373c <ssd1306_WriteChar+0x10c>)
 8003668:	885b      	ldrh	r3, [r3, #2]
 800366a:	461a      	mov	r2, r3
 800366c:	797b      	ldrb	r3, [r7, #5]
 800366e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	dd01      	ble.n	8003678 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003674:	2300      	movs	r3, #0
 8003676:	e05d      	b.n	8003734 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	e04c      	b.n	8003718 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	3b20      	subs	r3, #32
 8003684:	7979      	ldrb	r1, [r7, #5]
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	4619      	mov	r1, r3
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	440b      	add	r3, r1
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003698:	2300      	movs	r3, #0
 800369a:	61bb      	str	r3, [r7, #24]
 800369c:	e034      	b.n	8003708 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d012      	beq.n	80036d4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80036ae:	4b23      	ldr	r3, [pc, #140]	; (800373c <ssd1306_WriteChar+0x10c>)
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	4413      	add	r3, r2
 80036ba:	b2d8      	uxtb	r0, r3
 80036bc:	4b1f      	ldr	r3, [pc, #124]	; (800373c <ssd1306_WriteChar+0x10c>)
 80036be:	885b      	ldrh	r3, [r3, #2]
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	7bba      	ldrb	r2, [r7, #14]
 80036cc:	4619      	mov	r1, r3
 80036ce:	f7ff ff5b 	bl	8003588 <ssd1306_DrawPixel>
 80036d2:	e016      	b.n	8003702 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <ssd1306_WriteChar+0x10c>)
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	4413      	add	r3, r2
 80036e0:	b2d8      	uxtb	r0, r3
 80036e2:	4b16      	ldr	r3, [pc, #88]	; (800373c <ssd1306_WriteChar+0x10c>)
 80036e4:	885b      	ldrh	r3, [r3, #2]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	b2d9      	uxtb	r1, r3
 80036f0:	7bbb      	ldrb	r3, [r7, #14]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bf0c      	ite	eq
 80036f6:	2301      	moveq	r3, #1
 80036f8:	2300      	movne	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	f7ff ff43 	bl	8003588 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	3301      	adds	r3, #1
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	793b      	ldrb	r3, [r7, #4]
 800370a:	461a      	mov	r2, r3
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	4293      	cmp	r3, r2
 8003710:	d3c5      	bcc.n	800369e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3301      	adds	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	797b      	ldrb	r3, [r7, #5]
 800371a:	461a      	mov	r2, r3
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4293      	cmp	r3, r2
 8003720:	d3ad      	bcc.n	800367e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <ssd1306_WriteChar+0x10c>)
 8003724:	881a      	ldrh	r2, [r3, #0]
 8003726:	793b      	ldrb	r3, [r7, #4]
 8003728:	b29b      	uxth	r3, r3
 800372a:	4413      	add	r3, r2
 800372c:	b29a      	uxth	r2, r3
 800372e:	4b03      	ldr	r3, [pc, #12]	; (800373c <ssd1306_WriteChar+0x10c>)
 8003730:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003732:	7bfb      	ldrb	r3, [r7, #15]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3724      	adds	r7, #36	; 0x24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd90      	pop	{r4, r7, pc}
 800373c:	200026d4 	.word	0x200026d4

08003740 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	1d38      	adds	r0, r7, #4
 800374a:	e880 0006 	stmia.w	r0, {r1, r2}
 800374e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8003750:	e012      	b.n	8003778 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	7818      	ldrb	r0, [r3, #0]
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	1d3a      	adds	r2, r7, #4
 800375a:	ca06      	ldmia	r2, {r1, r2}
 800375c:	f7ff ff68 	bl	8003630 <ssd1306_WriteChar>
 8003760:	4603      	mov	r3, r0
 8003762:	461a      	mov	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d002      	beq.n	8003772 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	e008      	b.n	8003784 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	3301      	adds	r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e8      	bne.n	8003752 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	781b      	ldrb	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	460a      	mov	r2, r1
 8003796:	71fb      	strb	r3, [r7, #7]
 8003798:	4613      	mov	r3, r2
 800379a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	b29a      	uxth	r2, r3
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <ssd1306_SetCursor+0x2c>)
 80037a2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80037a4:	79bb      	ldrb	r3, [r7, #6]
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <ssd1306_SetCursor+0x2c>)
 80037aa:	805a      	strh	r2, [r3, #2]
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	200026d4 	.word	0x200026d4

080037bc <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b089      	sub	sp, #36	; 0x24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4604      	mov	r4, r0
 80037c4:	4608      	mov	r0, r1
 80037c6:	4611      	mov	r1, r2
 80037c8:	461a      	mov	r2, r3
 80037ca:	4623      	mov	r3, r4
 80037cc:	71fb      	strb	r3, [r7, #7]
 80037ce:	4603      	mov	r3, r0
 80037d0:	71bb      	strb	r3, [r7, #6]
 80037d2:	460b      	mov	r3, r1
 80037d4:	717b      	strb	r3, [r7, #5]
 80037d6:	4613      	mov	r3, r2
 80037d8:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 80037da:	797a      	ldrb	r2, [r7, #5]
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bfb8      	it	lt
 80037e4:	425b      	neglt	r3, r3
 80037e6:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 80037e8:	793a      	ldrb	r2, [r7, #4]
 80037ea:	79bb      	ldrb	r3, [r7, #6]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	bfb8      	it	lt
 80037f2:	425b      	neglt	r3, r3
 80037f4:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 80037f6:	79fa      	ldrb	r2, [r7, #7]
 80037f8:	797b      	ldrb	r3, [r7, #5]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d201      	bcs.n	8003802 <ssd1306_Line+0x46>
 80037fe:	2301      	movs	r3, #1
 8003800:	e001      	b.n	8003806 <ssd1306_Line+0x4a>
 8003802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003806:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8003808:	79ba      	ldrb	r2, [r7, #6]
 800380a:	793b      	ldrb	r3, [r7, #4]
 800380c:	429a      	cmp	r2, r3
 800380e:	d201      	bcs.n	8003814 <ssd1306_Line+0x58>
 8003810:	2301      	movs	r3, #1
 8003812:	e001      	b.n	8003818 <ssd1306_Line+0x5c>
 8003814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003818:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8003822:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003826:	7939      	ldrb	r1, [r7, #4]
 8003828:	797b      	ldrb	r3, [r7, #5]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff feac 	bl	8003588 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8003830:	e024      	b.n	800387c <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8003832:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003836:	79b9      	ldrb	r1, [r7, #6]
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fea4 	bl	8003588 <ssd1306_DrawPixel>
    error2 = error * 2;
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	425b      	negs	r3, r3
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	429a      	cmp	r2, r3
 800384e:	dd08      	ble.n	8003862 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	4413      	add	r3, r2
 8003860:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	429a      	cmp	r2, r3
 8003868:	da08      	bge.n	800387c <ssd1306_Line+0xc0>
    {
      error += deltaX;
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	4413      	add	r3, r2
 8003870:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	79bb      	ldrb	r3, [r7, #6]
 8003878:	4413      	add	r3, r2
 800387a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 800387c:	79fa      	ldrb	r2, [r7, #7]
 800387e:	797b      	ldrb	r3, [r7, #5]
 8003880:	429a      	cmp	r2, r3
 8003882:	d1d6      	bne.n	8003832 <ssd1306_Line+0x76>
 8003884:	79ba      	ldrb	r2, [r7, #6]
 8003886:	793b      	ldrb	r3, [r7, #4]
 8003888:	429a      	cmp	r2, r3
 800388a:	d1d2      	bne.n	8003832 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 800388c:	bf00      	nop
}
 800388e:	3724      	adds	r7, #36	; 0x24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd90      	pop	{r4, r7, pc}

08003894 <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	4604      	mov	r4, r0
 800389c:	4608      	mov	r0, r1
 800389e:	4611      	mov	r1, r2
 80038a0:	461a      	mov	r2, r3
 80038a2:	4623      	mov	r3, r4
 80038a4:	71fb      	strb	r3, [r7, #7]
 80038a6:	4603      	mov	r3, r0
 80038a8:	71bb      	strb	r3, [r7, #6]
 80038aa:	460b      	mov	r3, r1
 80038ac:	717b      	strb	r3, [r7, #5]
 80038ae:	4613      	mov	r3, r2
 80038b0:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 80038b2:	797b      	ldrb	r3, [r7, #5]
 80038b4:	425b      	negs	r3, r3
 80038b6:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 80038bc:	797b      	ldrb	r3, [r7, #5]
 80038be:	f1c3 0301 	rsb	r3, r3, #1
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	db65      	blt.n	800399a <ssd1306_DrawCircle+0x106>
 80038ce:	79bb      	ldrb	r3, [r7, #6]
 80038d0:	2b3f      	cmp	r3, #63	; 0x3f
 80038d2:	d862      	bhi.n	800399a <ssd1306_DrawCircle+0x106>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	79fa      	ldrb	r2, [r7, #7]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	b2d8      	uxtb	r0, r3
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	79bb      	ldrb	r3, [r7, #6]
 80038e4:	4413      	add	r3, r2
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	793a      	ldrb	r2, [r7, #4]
 80038ea:	4619      	mov	r1, r3
 80038ec:	f7ff fe4c 	bl	8003588 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	4413      	add	r3, r2
 80038f8:	b2d8      	uxtb	r0, r3
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	79bb      	ldrb	r3, [r7, #6]
 8003900:	4413      	add	r3, r2
 8003902:	b2db      	uxtb	r3, r3
 8003904:	793a      	ldrb	r2, [r7, #4]
 8003906:	4619      	mov	r1, r3
 8003908:	f7ff fe3e 	bl	8003588 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	4413      	add	r3, r2
 8003914:	b2d8      	uxtb	r0, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	b2db      	uxtb	r3, r3
 800391a:	79ba      	ldrb	r2, [r7, #6]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	b2db      	uxtb	r3, r3
 8003920:	793a      	ldrb	r2, [r7, #4]
 8003922:	4619      	mov	r1, r3
 8003924:	f7ff fe30 	bl	8003588 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	79fa      	ldrb	r2, [r7, #7]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	b2d8      	uxtb	r0, r3
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	79ba      	ldrb	r2, [r7, #6]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	793a      	ldrb	r2, [r7, #4]
 800393e:	4619      	mov	r1, r3
 8003940:	f7ff fe22 	bl	8003588 <ssd1306_DrawPixel>
        e2 = err;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	429a      	cmp	r2, r3
 800394e:	dc13      	bgt.n	8003978 <ssd1306_DrawCircle+0xe4>
            y++;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	3301      	adds	r3, #1
 8003954:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	3301      	adds	r3, #1
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	425b      	negs	r3, r3
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	429a      	cmp	r2, r3
 800396a:	d105      	bne.n	8003978 <ssd1306_DrawCircle+0xe4>
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	429a      	cmp	r2, r3
 8003972:	dc01      	bgt.n	8003978 <ssd1306_DrawCircle+0xe4>
              e2 = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	429a      	cmp	r2, r3
 800397e:	dd08      	ble.n	8003992 <ssd1306_DrawCircle+0xfe>
          x++;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	3301      	adds	r3, #1
 8003984:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	3301      	adds	r3, #1
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	dd9d      	ble.n	80038d4 <ssd1306_DrawCircle+0x40>

    return;
 8003998:	e000      	b.n	800399c <ssd1306_DrawCircle+0x108>
    return;
 800399a:	bf00      	nop
}
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd90      	pop	{r4, r7, pc}

080039a2 <ssd1306_DrawRectangle>:

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80039a2:	b590      	push	{r4, r7, lr}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af02      	add	r7, sp, #8
 80039a8:	4604      	mov	r4, r0
 80039aa:	4608      	mov	r0, r1
 80039ac:	4611      	mov	r1, r2
 80039ae:	461a      	mov	r2, r3
 80039b0:	4623      	mov	r3, r4
 80039b2:	71fb      	strb	r3, [r7, #7]
 80039b4:	4603      	mov	r3, r0
 80039b6:	71bb      	strb	r3, [r7, #6]
 80039b8:	460b      	mov	r3, r1
 80039ba:	717b      	strb	r3, [r7, #5]
 80039bc:	4613      	mov	r3, r2
 80039be:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 80039c0:	79bc      	ldrb	r4, [r7, #6]
 80039c2:	797a      	ldrb	r2, [r7, #5]
 80039c4:	79b9      	ldrb	r1, [r7, #6]
 80039c6:	79f8      	ldrb	r0, [r7, #7]
 80039c8:	7e3b      	ldrb	r3, [r7, #24]
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	4623      	mov	r3, r4
 80039ce:	f7ff fef5 	bl	80037bc <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 80039d2:	793c      	ldrb	r4, [r7, #4]
 80039d4:	797a      	ldrb	r2, [r7, #5]
 80039d6:	79b9      	ldrb	r1, [r7, #6]
 80039d8:	7978      	ldrb	r0, [r7, #5]
 80039da:	7e3b      	ldrb	r3, [r7, #24]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	4623      	mov	r3, r4
 80039e0:	f7ff feec 	bl	80037bc <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 80039e4:	793c      	ldrb	r4, [r7, #4]
 80039e6:	79fa      	ldrb	r2, [r7, #7]
 80039e8:	7939      	ldrb	r1, [r7, #4]
 80039ea:	7978      	ldrb	r0, [r7, #5]
 80039ec:	7e3b      	ldrb	r3, [r7, #24]
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	4623      	mov	r3, r4
 80039f2:	f7ff fee3 	bl	80037bc <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 80039f6:	79bc      	ldrb	r4, [r7, #6]
 80039f8:	79fa      	ldrb	r2, [r7, #7]
 80039fa:	7939      	ldrb	r1, [r7, #4]
 80039fc:	79f8      	ldrb	r0, [r7, #7]
 80039fe:	7e3b      	ldrb	r3, [r7, #24]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	4623      	mov	r3, r4
 8003a04:	f7ff feda 	bl	80037bc <ssd1306_Line>

  return;
 8003a08:	bf00      	nop
}
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd90      	pop	{r4, r7, pc}

08003a10 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003a1a:	2381      	movs	r3, #129	; 0x81
 8003a1c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fd33 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff fd2f 	bl	800348c <ssd1306_WriteCommand>
}
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003a48:	23af      	movs	r3, #175	; 0xaf
 8003a4a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003a4c:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <ssd1306_SetDisplayOn+0x38>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	715a      	strb	r2, [r3, #5]
 8003a52:	e004      	b.n	8003a5e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003a54:	23ae      	movs	r3, #174	; 0xae
 8003a56:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <ssd1306_SetDisplayOn+0x38>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fd13 	bl	800348c <ssd1306_WriteCommand>
}
 8003a66:	bf00      	nop
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	200026d4 	.word	0x200026d4

08003a74 <ssd1306_Init1>:




// Initialize the oled screen
void ssd1306_Init1(void) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003a78:	f7ff fd01 	bl	800347e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003a7c:	2064      	movs	r0, #100	; 0x64
 8003a7e:	f000 f93d 	bl	8003cfc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003a82:	2000      	movs	r0, #0
 8003a84:	f7ff ffd8 	bl	8003a38 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003a88:	2020      	movs	r0, #32
 8003a8a:	f7ff fcff 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003a8e:	2000      	movs	r0, #0
 8003a90:	f7ff fcfc 	bl	800348c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003a94:	20b0      	movs	r0, #176	; 0xb0
 8003a96:	f7ff fcf9 	bl	800348c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003a9a:	20c8      	movs	r0, #200	; 0xc8
 8003a9c:	f7ff fcf6 	bl	800348c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	f7ff fcf3 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003aa6:	2010      	movs	r0, #16
 8003aa8:	f7ff fcf0 	bl	800348c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003aac:	2040      	movs	r0, #64	; 0x40
 8003aae:	f7ff fced 	bl	800348c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003ab2:	20ff      	movs	r0, #255	; 0xff
 8003ab4:	f7ff ffac 	bl	8003a10 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003ab8:	20a1      	movs	r0, #161	; 0xa1
 8003aba:	f7ff fce7 	bl	800348c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003abe:	20a6      	movs	r0, #166	; 0xa6
 8003ac0:	f7ff fce4 	bl	800348c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003ac4:	20a8      	movs	r0, #168	; 0xa8
 8003ac6:	f7ff fce1 	bl	800348c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003aca:	203f      	movs	r0, #63	; 0x3f
 8003acc:	f7ff fcde 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003ad0:	20a4      	movs	r0, #164	; 0xa4
 8003ad2:	f7ff fcdb 	bl	800348c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003ad6:	20d3      	movs	r0, #211	; 0xd3
 8003ad8:	f7ff fcd8 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003adc:	2000      	movs	r0, #0
 8003ade:	f7ff fcd5 	bl	800348c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003ae2:	20d5      	movs	r0, #213	; 0xd5
 8003ae4:	f7ff fcd2 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003ae8:	20f0      	movs	r0, #240	; 0xf0
 8003aea:	f7ff fccf 	bl	800348c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003aee:	20d9      	movs	r0, #217	; 0xd9
 8003af0:	f7ff fccc 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003af4:	2022      	movs	r0, #34	; 0x22
 8003af6:	f7ff fcc9 	bl	800348c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003afa:	20da      	movs	r0, #218	; 0xda
 8003afc:	f7ff fcc6 	bl	800348c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003b00:	2012      	movs	r0, #18
 8003b02:	f7ff fcc3 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003b06:	20db      	movs	r0, #219	; 0xdb
 8003b08:	f7ff fcc0 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003b0c:	2020      	movs	r0, #32
 8003b0e:	f7ff fcbd 	bl	800348c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003b12:	208d      	movs	r0, #141	; 0x8d
 8003b14:	f7ff fcba 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003b18:	2014      	movs	r0, #20
 8003b1a:	f7ff fcb7 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003b1e:	2001      	movs	r0, #1
 8003b20:	f7ff ff8a 	bl	8003a38 <ssd1306_SetDisplayOn>


    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003b24:	f7ff fd08 	bl	8003538 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <ssd1306_Init1+0xcc>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003b2e:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <ssd1306_Init1+0xcc>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8003b34:	4b02      	ldr	r3, [pc, #8]	; (8003b40 <ssd1306_Init1+0xcc>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	711a      	strb	r2, [r3, #4]
}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	200026d4 	.word	0x200026d4

08003b44 <ssd1306_Init2>:


// Initialize the oled screen
void ssd1306_Init2(void) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003b48:	f7ff fc99 	bl	800347e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003b4c:	2064      	movs	r0, #100	; 0x64
 8003b4e:	f000 f8d5 	bl	8003cfc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003b52:	2000      	movs	r0, #0
 8003b54:	f7ff ff70 	bl	8003a38 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003b58:	2020      	movs	r0, #32
 8003b5a:	f7ff fc97 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003b5e:	2000      	movs	r0, #0
 8003b60:	f7ff fc94 	bl	800348c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003b64:	20b0      	movs	r0, #176	; 0xb0
 8003b66:	f7ff fc91 	bl	800348c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC8); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC0); //Set COM Output Scan Direction
 8003b6a:	20c0      	movs	r0, #192	; 0xc0
 8003b6c:	f7ff fc8e 	bl	800348c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003b70:	2000      	movs	r0, #0
 8003b72:	f7ff fc8b 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003b76:	2010      	movs	r0, #16
 8003b78:	f7ff fc88 	bl	800348c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003b7c:	2040      	movs	r0, #64	; 0x40
 8003b7e:	f7ff fc85 	bl	800348c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003b82:	20ff      	movs	r0, #255	; 0xff
 8003b84:	f7ff ff44 	bl	8003a10 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA1); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA0); //--set segment re-map 0 to 127 - CHECK
 8003b88:	20a0      	movs	r0, #160	; 0xa0
 8003b8a:	f7ff fc7f 	bl	800348c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003b8e:	20a6      	movs	r0, #166	; 0xa6
 8003b90:	f7ff fc7c 	bl	800348c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003b94:	20a8      	movs	r0, #168	; 0xa8
 8003b96:	f7ff fc79 	bl	800348c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003b9a:	203f      	movs	r0, #63	; 0x3f
 8003b9c:	f7ff fc76 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003ba0:	20a4      	movs	r0, #164	; 0xa4
 8003ba2:	f7ff fc73 	bl	800348c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003ba6:	20d3      	movs	r0, #211	; 0xd3
 8003ba8:	f7ff fc70 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003bac:	2000      	movs	r0, #0
 8003bae:	f7ff fc6d 	bl	800348c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003bb2:	20d5      	movs	r0, #213	; 0xd5
 8003bb4:	f7ff fc6a 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003bb8:	20f0      	movs	r0, #240	; 0xf0
 8003bba:	f7ff fc67 	bl	800348c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003bbe:	20d9      	movs	r0, #217	; 0xd9
 8003bc0:	f7ff fc64 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003bc4:	2022      	movs	r0, #34	; 0x22
 8003bc6:	f7ff fc61 	bl	800348c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003bca:	20da      	movs	r0, #218	; 0xda
 8003bcc:	f7ff fc5e 	bl	800348c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003bd0:	2012      	movs	r0, #18
 8003bd2:	f7ff fc5b 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003bd6:	20db      	movs	r0, #219	; 0xdb
 8003bd8:	f7ff fc58 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003bdc:	2020      	movs	r0, #32
 8003bde:	f7ff fc55 	bl	800348c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003be2:	208d      	movs	r0, #141	; 0x8d
 8003be4:	f7ff fc52 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003be8:	2014      	movs	r0, #20
 8003bea:	f7ff fc4f 	bl	800348c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003bee:	2001      	movs	r0, #1
 8003bf0:	f7ff ff22 	bl	8003a38 <ssd1306_SetDisplayOn>


    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003bf4:	f7ff fca0 	bl	8003538 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <ssd1306_Init2+0xcc>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003bfe:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <ssd1306_Init2+0xcc>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8003c04:	4b02      	ldr	r3, [pc, #8]	; (8003c10 <ssd1306_Init2+0xcc>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	711a      	strb	r2, [r3, #4]
}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	200026d4 	.word	0x200026d4

08003c14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c1e:	2003      	movs	r0, #3
 8003c20:	f001 fb0a 	bl	8005238 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c24:	2000      	movs	r0, #0
 8003c26:	f000 f80d 	bl	8003c44 <HAL_InitTick>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	71fb      	strb	r3, [r7, #7]
 8003c34:	e001      	b.n	8003c3a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c36:	f7fe fff7 	bl	8002c28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003c50:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <HAL_InitTick+0x6c>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d023      	beq.n	8003ca0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003c58:	4b16      	ldr	r3, [pc, #88]	; (8003cb4 <HAL_InitTick+0x70>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <HAL_InitTick+0x6c>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	4619      	mov	r1, r3
 8003c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 fb17 	bl	80052a2 <HAL_SYSTICK_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b0f      	cmp	r3, #15
 8003c7e:	d809      	bhi.n	8003c94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c80:	2200      	movs	r2, #0
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c88:	f001 fae1 	bl	800524e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c8c:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <HAL_InitTick+0x74>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	e007      	b.n	8003ca4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	73fb      	strb	r3, [r7, #15]
 8003c98:	e004      	b.n	8003ca4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
 8003c9e:	e001      	b.n	8003ca4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000048 	.word	0x20000048
 8003cb4:	20000030 	.word	0x20000030
 8003cb8:	20000044 	.word	0x20000044

08003cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <HAL_IncTick+0x20>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_IncTick+0x24>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4413      	add	r3, r2
 8003ccc:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <HAL_IncTick+0x24>)
 8003cce:	6013      	str	r3, [r2, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000048 	.word	0x20000048
 8003ce0:	20004a98 	.word	0x20004a98

08003ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <HAL_GetTick+0x14>)
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20004a98 	.word	0x20004a98

08003cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d04:	f7ff ffee 	bl	8003ce4 <HAL_GetTick>
 8003d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d14:	d005      	beq.n	8003d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003d16:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <HAL_Delay+0x44>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d22:	bf00      	nop
 8003d24:	f7ff ffde 	bl	8003ce4 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d8f7      	bhi.n	8003d24 <HAL_Delay+0x28>
  {
  }
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000048 	.word	0x20000048

08003d44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	609a      	str	r2, [r3, #8]
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	609a      	str	r2, [r3, #8]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3360      	adds	r3, #96	; 0x60
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <LL_ADC_SetOffset+0x44>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	03fff000 	.word	0x03fff000

08003df4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3360      	adds	r3, #96	; 0x60
 8003e02:	461a      	mov	r2, r3
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3360      	adds	r3, #96	; 0x60
 8003e30:	461a      	mov	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	431a      	orrs	r2, r3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3330      	adds	r3, #48	; 0x30
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	0a1b      	lsrs	r3, r3, #8
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	4413      	add	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 031f 	and.w	r3, r3, #31
 8003ea6:	211f      	movs	r1, #31
 8003ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	401a      	ands	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	0e9b      	lsrs	r3, r3, #26
 8003eb4:	f003 011f 	and.w	r1, r3, #31
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ec8:	bf00      	nop
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3314      	adds	r3, #20
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	0e5b      	lsrs	r3, r3, #25
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	4413      	add	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	0d1b      	lsrs	r3, r3, #20
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	2107      	movs	r1, #7
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	43db      	mvns	r3, r3
 8003f08:	401a      	ands	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	0d1b      	lsrs	r3, r3, #20
 8003f0e:	f003 031f 	and.w	r3, r3, #31
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	fa01 f303 	lsl.w	r3, r1, r3
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f44:	43db      	mvns	r3, r3
 8003f46:	401a      	ands	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f003 0318 	and.w	r3, r3, #24
 8003f4e:	4908      	ldr	r1, [pc, #32]	; (8003f70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f50:	40d9      	lsrs	r1, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	400b      	ands	r3, r1
 8003f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003f62:	bf00      	nop
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	0007ffff 	.word	0x0007ffff

08003f74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003f84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6093      	str	r3, [r2, #8]
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fac:	d101      	bne.n	8003fb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003fd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ffc:	d101      	bne.n	8004002 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004020:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004024:	f043 0201 	orr.w	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004048:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800404c:	f043 0202 	orr.w	r2, r3, #2
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <LL_ADC_IsEnabled+0x18>
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <LL_ADC_IsEnabled+0x1a>
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b02      	cmp	r3, #2
 8004098:	d101      	bne.n	800409e <LL_ADC_IsDisableOngoing+0x18>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <LL_ADC_IsDisableOngoing+0x1a>
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040c0:	f043 0204 	orr.w	r2, r3, #4
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d101      	bne.n	80040ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b08      	cmp	r3, #8
 800410c:	d101      	bne.n	8004112 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800412c:	2300      	movs	r3, #0
 800412e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e12c      	b.n	8004394 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	2b00      	cmp	r3, #0
 8004146:	d109      	bne.n	800415c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7fe fd91 	bl	8002c70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff ff19 	bl	8003f98 <LL_ADC_IsDeepPowerDownEnabled>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d004      	beq.n	8004176 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff feff 	bl	8003f74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff ff34 	bl	8003fe8 <LL_ADC_IsInternalRegulatorEnabled>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d115      	bne.n	80041b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff ff18 	bl	8003fc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004190:	4b82      	ldr	r3, [pc, #520]	; (800439c <HAL_ADC_Init+0x27c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	099b      	lsrs	r3, r3, #6
 8004196:	4a82      	ldr	r2, [pc, #520]	; (80043a0 <HAL_ADC_Init+0x280>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	099b      	lsrs	r3, r3, #6
 800419e:	3301      	adds	r3, #1
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041a4:	e002      	b.n	80041ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f9      	bne.n	80041a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff ff16 	bl	8003fe8 <LL_ADC_IsInternalRegulatorEnabled>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10d      	bne.n	80041de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c6:	f043 0210 	orr.w	r2, r3, #16
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d2:	f043 0201 	orr.w	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff ff76 	bl	80040d4 <LL_ADC_REG_IsConversionOngoing>
 80041e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f040 80c5 	bne.w	8004382 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f040 80c1 	bne.w	8004382 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004208:	f043 0202 	orr.w	r2, r3, #2
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff ff23 	bl	8004060 <LL_ADC_IsEnabled>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10b      	bne.n	8004238 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004220:	4860      	ldr	r0, [pc, #384]	; (80043a4 <HAL_ADC_Init+0x284>)
 8004222:	f7ff ff1d 	bl	8004060 <LL_ADC_IsEnabled>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4619      	mov	r1, r3
 8004232:	485d      	ldr	r0, [pc, #372]	; (80043a8 <HAL_ADC_Init+0x288>)
 8004234:	f7ff fd86 	bl	8003d44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	7e5b      	ldrb	r3, [r3, #25]
 800423c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004242:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004248:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800424e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004256:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004258:	4313      	orrs	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d106      	bne.n	8004274 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	3b01      	subs	r3, #1
 800426c:	045b      	lsls	r3, r3, #17
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	2b00      	cmp	r3, #0
 800427a:	d009      	beq.n	8004290 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	4b45      	ldr	r3, [pc, #276]	; (80043ac <HAL_ADC_Init+0x28c>)
 8004298:	4013      	ands	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	69b9      	ldr	r1, [r7, #24]
 80042a0:	430b      	orrs	r3, r1
 80042a2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff ff13 	bl	80040d4 <LL_ADC_REG_IsConversionOngoing>
 80042ae:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff20 	bl	80040fa <LL_ADC_INJ_IsConversionOngoing>
 80042ba:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d13d      	bne.n	800433e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d13a      	bne.n	800433e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80042cc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042d4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042e4:	f023 0302 	bic.w	r3, r3, #2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	69b9      	ldr	r1, [r7, #24]
 80042ee:	430b      	orrs	r3, r1
 80042f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d118      	bne.n	800432e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004306:	f023 0304 	bic.w	r3, r3, #4
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004312:	4311      	orrs	r1, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004318:	4311      	orrs	r1, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800431e:	430a      	orrs	r2, r1
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	611a      	str	r2, [r3, #16]
 800432c:	e007      	b.n	800433e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d10c      	bne.n	8004360 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	f023 010f 	bic.w	r1, r3, #15
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	1e5a      	subs	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
 800435e:	e007      	b.n	8004370 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 020f 	bic.w	r2, r2, #15
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	f023 0303 	bic.w	r3, r3, #3
 8004378:	f043 0201 	orr.w	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
 8004380:	e007      	b.n	8004392 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	f043 0210 	orr.w	r2, r3, #16
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004392:	7ffb      	ldrb	r3, [r7, #31]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000030 	.word	0x20000030
 80043a0:	053e2d63 	.word	0x053e2d63
 80043a4:	50040000 	.word	0x50040000
 80043a8:	50040300 	.word	0x50040300
 80043ac:	fff0c007 	.word	0xfff0c007

080043b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fe87 	bl	80040d4 <LL_ADC_REG_IsConversionOngoing>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d167      	bne.n	800449c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_ADC_Start_DMA+0x2a>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e063      	b.n	80044a2 <HAL_ADC_Start_DMA+0xf2>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 fc52 	bl	8004c8c <ADC_Enable>
 80043e8:	4603      	mov	r3, r0
 80043ea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d14f      	bne.n	8004492 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d006      	beq.n	8004420 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004416:	f023 0206 	bic.w	r2, r3, #6
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	659a      	str	r2, [r3, #88]	; 0x58
 800441e:	e002      	b.n	8004426 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442a:	4a20      	ldr	r2, [pc, #128]	; (80044ac <HAL_ADC_Start_DMA+0xfc>)
 800442c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	4a1f      	ldr	r2, [pc, #124]	; (80044b0 <HAL_ADC_Start_DMA+0x100>)
 8004434:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443a:	4a1e      	ldr	r2, [pc, #120]	; (80044b4 <HAL_ADC_Start_DMA+0x104>)
 800443c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	221c      	movs	r2, #28
 8004444:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0210 	orr.w	r2, r2, #16
 800445c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0201 	orr.w	r2, r2, #1
 800446c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3340      	adds	r3, #64	; 0x40
 8004478:	4619      	mov	r1, r3
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f001 facb 	bl	8005a18 <HAL_DMA_Start_IT>
 8004482:	4603      	mov	r3, r0
 8004484:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fe0e 	bl	80040ac <LL_ADC_REG_StartConversion>
 8004490:	e006      	b.n	80044a0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800449a:	e001      	b.n	80044a0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800449c:	2302      	movs	r3, #2
 800449e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80044a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	08004e57 	.word	0x08004e57
 80044b0:	08004f2f 	.word	0x08004f2f
 80044b4:	08004f4b 	.word	0x08004f4b

080044b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b0b6      	sub	sp, #216	; 0xd8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x22>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e3b9      	b.n	8004c62 <HAL_ADC_ConfigChannel+0x796>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fdea 	bl	80040d4 <LL_ADC_REG_IsConversionOngoing>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	f040 839e 	bne.w	8004c44 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b05      	cmp	r3, #5
 800450e:	d824      	bhi.n	800455a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	3b02      	subs	r3, #2
 8004516:	2b03      	cmp	r3, #3
 8004518:	d81b      	bhi.n	8004552 <HAL_ADC_ConfigChannel+0x86>
 800451a:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <HAL_ADC_ConfigChannel+0x54>)
 800451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004520:	08004531 	.word	0x08004531
 8004524:	08004539 	.word	0x08004539
 8004528:	08004541 	.word	0x08004541
 800452c:	08004549 	.word	0x08004549
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	220c      	movs	r2, #12
 8004534:	605a      	str	r2, [r3, #4]
          break;
 8004536:	e011      	b.n	800455c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2212      	movs	r2, #18
 800453c:	605a      	str	r2, [r3, #4]
          break;
 800453e:	e00d      	b.n	800455c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2218      	movs	r2, #24
 8004544:	605a      	str	r2, [r3, #4]
          break;
 8004546:	e009      	b.n	800455c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800454e:	605a      	str	r2, [r3, #4]
          break;
 8004550:	e004      	b.n	800455c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2206      	movs	r2, #6
 8004556:	605a      	str	r2, [r3, #4]
          break;
 8004558:	e000      	b.n	800455c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800455a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	6859      	ldr	r1, [r3, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	f7ff fc87 	bl	8003e7c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fdae 	bl	80040d4 <LL_ADC_REG_IsConversionOngoing>
 8004578:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff fdba 	bl	80040fa <LL_ADC_INJ_IsConversionOngoing>
 8004586:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800458a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 81a6 	bne.w	80048e0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004594:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004598:	2b00      	cmp	r3, #0
 800459a:	f040 81a1 	bne.w	80048e0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6819      	ldr	r1, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f7ff fc92 	bl	8003ed4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	08db      	lsrs	r3, r3, #3
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d00a      	beq.n	80045e8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6919      	ldr	r1, [r3, #16]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045e2:	f7ff fbe3 	bl	8003dac <LL_ADC_SetOffset>
 80045e6:	e17b      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff fc00 	bl	8003df4 <LL_ADC_GetOffsetChannel>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x148>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2100      	movs	r1, #0
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff fbf5 	bl	8003df4 <LL_ADC_GetOffsetChannel>
 800460a:	4603      	mov	r3, r0
 800460c:	0e9b      	lsrs	r3, r3, #26
 800460e:	f003 021f 	and.w	r2, r3, #31
 8004612:	e01e      	b.n	8004652 <HAL_ADC_ConfigChannel+0x186>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2100      	movs	r1, #0
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fbea 	bl	8003df4 <LL_ADC_GetOffsetChannel>
 8004620:	4603      	mov	r3, r0
 8004622:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004626:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800462a:	fa93 f3a3 	rbit	r3, r3
 800462e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800463a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004642:	2320      	movs	r3, #32
 8004644:	e004      	b.n	8004650 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004646:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800464a:	fab3 f383 	clz	r3, r3
 800464e:	b2db      	uxtb	r3, r3
 8004650:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800465a:	2b00      	cmp	r3, #0
 800465c:	d105      	bne.n	800466a <HAL_ADC_ConfigChannel+0x19e>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	0e9b      	lsrs	r3, r3, #26
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	e018      	b.n	800469c <HAL_ADC_ConfigChannel+0x1d0>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004672:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004676:	fa93 f3a3 	rbit	r3, r3
 800467a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800467e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004682:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004686:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800468e:	2320      	movs	r3, #32
 8004690:	e004      	b.n	800469c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004692:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004696:	fab3 f383 	clz	r3, r3
 800469a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800469c:	429a      	cmp	r2, r3
 800469e:	d106      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2200      	movs	r2, #0
 80046a6:	2100      	movs	r1, #0
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff fbb9 	bl	8003e20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2101      	movs	r1, #1
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff fb9d 	bl	8003df4 <LL_ADC_GetOffsetChannel>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <HAL_ADC_ConfigChannel+0x20e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2101      	movs	r1, #1
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fb92 	bl	8003df4 <LL_ADC_GetOffsetChannel>
 80046d0:	4603      	mov	r3, r0
 80046d2:	0e9b      	lsrs	r3, r3, #26
 80046d4:	f003 021f 	and.w	r2, r3, #31
 80046d8:	e01e      	b.n	8004718 <HAL_ADC_ConfigChannel+0x24c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2101      	movs	r1, #1
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fb87 	bl	8003df4 <LL_ADC_GetOffsetChannel>
 80046e6:	4603      	mov	r3, r0
 80046e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046f0:	fa93 f3a3 	rbit	r3, r3
 80046f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80046f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004708:	2320      	movs	r3, #32
 800470a:	e004      	b.n	8004716 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800470c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004710:	fab3 f383 	clz	r3, r3
 8004714:	b2db      	uxtb	r3, r3
 8004716:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004720:	2b00      	cmp	r3, #0
 8004722:	d105      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x264>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	0e9b      	lsrs	r3, r3, #26
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	e018      	b.n	8004762 <HAL_ADC_ConfigChannel+0x296>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800473c:	fa93 f3a3 	rbit	r3, r3
 8004740:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004744:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800474c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004754:	2320      	movs	r3, #32
 8004756:	e004      	b.n	8004762 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004758:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800475c:	fab3 f383 	clz	r3, r3
 8004760:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004762:	429a      	cmp	r2, r3
 8004764:	d106      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2200      	movs	r2, #0
 800476c:	2101      	movs	r1, #1
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff fb56 	bl	8003e20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2102      	movs	r1, #2
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fb3a 	bl	8003df4 <LL_ADC_GetOffsetChannel>
 8004780:	4603      	mov	r3, r0
 8004782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x2d4>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2102      	movs	r1, #2
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff fb2f 	bl	8003df4 <LL_ADC_GetOffsetChannel>
 8004796:	4603      	mov	r3, r0
 8004798:	0e9b      	lsrs	r3, r3, #26
 800479a:	f003 021f 	and.w	r2, r3, #31
 800479e:	e01e      	b.n	80047de <HAL_ADC_ConfigChannel+0x312>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2102      	movs	r1, #2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fb24 	bl	8003df4 <LL_ADC_GetOffsetChannel>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047b6:	fa93 f3a3 	rbit	r3, r3
 80047ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80047be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80047c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80047ce:	2320      	movs	r3, #32
 80047d0:	e004      	b.n	80047dc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80047d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047d6:	fab3 f383 	clz	r3, r3
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d105      	bne.n	80047f6 <HAL_ADC_ConfigChannel+0x32a>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	0e9b      	lsrs	r3, r3, #26
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	e016      	b.n	8004824 <HAL_ADC_ConfigChannel+0x358>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004802:	fa93 f3a3 	rbit	r3, r3
 8004806:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004808:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800480a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800480e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004816:	2320      	movs	r3, #32
 8004818:	e004      	b.n	8004824 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800481a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800481e:	fab3 f383 	clz	r3, r3
 8004822:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004824:	429a      	cmp	r2, r3
 8004826:	d106      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2200      	movs	r2, #0
 800482e:	2102      	movs	r1, #2
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff faf5 	bl	8003e20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2103      	movs	r1, #3
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff fad9 	bl	8003df4 <LL_ADC_GetOffsetChannel>
 8004842:	4603      	mov	r3, r0
 8004844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x396>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2103      	movs	r1, #3
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff face 	bl	8003df4 <LL_ADC_GetOffsetChannel>
 8004858:	4603      	mov	r3, r0
 800485a:	0e9b      	lsrs	r3, r3, #26
 800485c:	f003 021f 	and.w	r2, r3, #31
 8004860:	e017      	b.n	8004892 <HAL_ADC_ConfigChannel+0x3c6>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2103      	movs	r1, #3
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fac3 	bl	8003df4 <LL_ADC_GetOffsetChannel>
 800486e:	4603      	mov	r3, r0
 8004870:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004874:	fa93 f3a3 	rbit	r3, r3
 8004878:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800487a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800487c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800487e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004884:	2320      	movs	r3, #32
 8004886:	e003      	b.n	8004890 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800488a:	fab3 f383 	clz	r3, r3
 800488e:	b2db      	uxtb	r3, r3
 8004890:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800489a:	2b00      	cmp	r3, #0
 800489c:	d105      	bne.n	80048aa <HAL_ADC_ConfigChannel+0x3de>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	0e9b      	lsrs	r3, r3, #26
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	e011      	b.n	80048ce <HAL_ADC_ConfigChannel+0x402>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80048b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80048bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80048c2:	2320      	movs	r3, #32
 80048c4:	e003      	b.n	80048ce <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80048c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c8:	fab3 f383 	clz	r3, r3
 80048cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d106      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2200      	movs	r2, #0
 80048d8:	2103      	movs	r1, #3
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff faa0 	bl	8003e20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fbbb 	bl	8004060 <LL_ADC_IsEnabled>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f040 813f 	bne.w	8004b70 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6819      	ldr	r1, [r3, #0]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	461a      	mov	r2, r3
 8004900:	f7ff fb14 	bl	8003f2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4a8e      	ldr	r2, [pc, #568]	; (8004b44 <HAL_ADC_ConfigChannel+0x678>)
 800490a:	4293      	cmp	r3, r2
 800490c:	f040 8130 	bne.w	8004b70 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10b      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x46c>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	0e9b      	lsrs	r3, r3, #26
 8004926:	3301      	adds	r3, #1
 8004928:	f003 031f 	and.w	r3, r3, #31
 800492c:	2b09      	cmp	r3, #9
 800492e:	bf94      	ite	ls
 8004930:	2301      	movls	r3, #1
 8004932:	2300      	movhi	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	e019      	b.n	800496c <HAL_ADC_ConfigChannel+0x4a0>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004940:	fa93 f3a3 	rbit	r3, r3
 8004944:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004948:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800494a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004950:	2320      	movs	r3, #32
 8004952:	e003      	b.n	800495c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004956:	fab3 f383 	clz	r3, r3
 800495a:	b2db      	uxtb	r3, r3
 800495c:	3301      	adds	r3, #1
 800495e:	f003 031f 	and.w	r3, r3, #31
 8004962:	2b09      	cmp	r3, #9
 8004964:	bf94      	ite	ls
 8004966:	2301      	movls	r3, #1
 8004968:	2300      	movhi	r3, #0
 800496a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800496c:	2b00      	cmp	r3, #0
 800496e:	d079      	beq.n	8004a64 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004978:	2b00      	cmp	r3, #0
 800497a:	d107      	bne.n	800498c <HAL_ADC_ConfigChannel+0x4c0>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	0e9b      	lsrs	r3, r3, #26
 8004982:	3301      	adds	r3, #1
 8004984:	069b      	lsls	r3, r3, #26
 8004986:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800498a:	e015      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x4ec>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004994:	fa93 f3a3 	rbit	r3, r3
 8004998:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800499a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800499e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80049a4:	2320      	movs	r3, #32
 80049a6:	e003      	b.n	80049b0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80049a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049aa:	fab3 f383 	clz	r3, r3
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	3301      	adds	r3, #1
 80049b2:	069b      	lsls	r3, r3, #26
 80049b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d109      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x50c>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	0e9b      	lsrs	r3, r3, #26
 80049ca:	3301      	adds	r3, #1
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	2101      	movs	r1, #1
 80049d2:	fa01 f303 	lsl.w	r3, r1, r3
 80049d6:	e017      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x53c>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e0:	fa93 f3a3 	rbit	r3, r3
 80049e4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80049e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80049ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80049f0:	2320      	movs	r3, #32
 80049f2:	e003      	b.n	80049fc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80049f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f6:	fab3 f383 	clz	r3, r3
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	3301      	adds	r3, #1
 80049fe:	f003 031f 	and.w	r3, r3, #31
 8004a02:	2101      	movs	r1, #1
 8004a04:	fa01 f303 	lsl.w	r3, r1, r3
 8004a08:	ea42 0103 	orr.w	r1, r2, r3
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x562>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	0e9b      	lsrs	r3, r3, #26
 8004a1e:	3301      	adds	r3, #1
 8004a20:	f003 021f 	and.w	r2, r3, #31
 8004a24:	4613      	mov	r3, r2
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	4413      	add	r3, r2
 8004a2a:	051b      	lsls	r3, r3, #20
 8004a2c:	e018      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x594>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	fa93 f3a3 	rbit	r3, r3
 8004a3a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004a46:	2320      	movs	r3, #32
 8004a48:	e003      	b.n	8004a52 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4c:	fab3 f383 	clz	r3, r3
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	3301      	adds	r3, #1
 8004a54:	f003 021f 	and.w	r2, r3, #31
 8004a58:	4613      	mov	r3, r2
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	4413      	add	r3, r2
 8004a5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a60:	430b      	orrs	r3, r1
 8004a62:	e080      	b.n	8004b66 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d107      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x5b4>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	0e9b      	lsrs	r3, r3, #26
 8004a76:	3301      	adds	r3, #1
 8004a78:	069b      	lsls	r3, r3, #26
 8004a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a7e:	e015      	b.n	8004aac <HAL_ADC_ConfigChannel+0x5e0>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a88:	fa93 f3a3 	rbit	r3, r3
 8004a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004a98:	2320      	movs	r3, #32
 8004a9a:	e003      	b.n	8004aa4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	fab3 f383 	clz	r3, r3
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	069b      	lsls	r3, r3, #26
 8004aa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d109      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x600>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	0e9b      	lsrs	r3, r3, #26
 8004abe:	3301      	adds	r3, #1
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aca:	e017      	b.n	8004afc <HAL_ADC_ConfigChannel+0x630>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	fa93 f3a3 	rbit	r3, r3
 8004ad8:	61fb      	str	r3, [r7, #28]
  return result;
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004ae4:	2320      	movs	r3, #32
 8004ae6:	e003      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	fab3 f383 	clz	r3, r3
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	3301      	adds	r3, #1
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	2101      	movs	r1, #1
 8004af8:	fa01 f303 	lsl.w	r3, r1, r3
 8004afc:	ea42 0103 	orr.w	r1, r2, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10d      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x65c>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	0e9b      	lsrs	r3, r3, #26
 8004b12:	3301      	adds	r3, #1
 8004b14:	f003 021f 	and.w	r2, r3, #31
 8004b18:	4613      	mov	r3, r2
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	4413      	add	r3, r2
 8004b1e:	3b1e      	subs	r3, #30
 8004b20:	051b      	lsls	r3, r3, #20
 8004b22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b26:	e01d      	b.n	8004b64 <HAL_ADC_ConfigChannel+0x698>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	fa93 f3a3 	rbit	r3, r3
 8004b34:	613b      	str	r3, [r7, #16]
  return result;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004b40:	2320      	movs	r3, #32
 8004b42:	e005      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x684>
 8004b44:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	fab3 f383 	clz	r3, r3
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	3301      	adds	r3, #1
 8004b52:	f003 021f 	and.w	r2, r3, #31
 8004b56:	4613      	mov	r3, r2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3b1e      	subs	r3, #30
 8004b5e:	051b      	lsls	r3, r3, #20
 8004b60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b64:	430b      	orrs	r3, r1
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	6892      	ldr	r2, [r2, #8]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	f7ff f9b2 	bl	8003ed4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	4b3d      	ldr	r3, [pc, #244]	; (8004c6c <HAL_ADC_ConfigChannel+0x7a0>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d06c      	beq.n	8004c56 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b7c:	483c      	ldr	r0, [pc, #240]	; (8004c70 <HAL_ADC_ConfigChannel+0x7a4>)
 8004b7e:	f7ff f907 	bl	8003d90 <LL_ADC_GetCommonPathInternalCh>
 8004b82:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a3a      	ldr	r2, [pc, #232]	; (8004c74 <HAL_ADC_ConfigChannel+0x7a8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d127      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d121      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a35      	ldr	r2, [pc, #212]	; (8004c78 <HAL_ADC_ConfigChannel+0x7ac>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d157      	bne.n	8004c56 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004baa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bae:	4619      	mov	r1, r3
 8004bb0:	482f      	ldr	r0, [pc, #188]	; (8004c70 <HAL_ADC_ConfigChannel+0x7a4>)
 8004bb2:	f7ff f8da 	bl	8003d6a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bb6:	4b31      	ldr	r3, [pc, #196]	; (8004c7c <HAL_ADC_ConfigChannel+0x7b0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	099b      	lsrs	r3, r3, #6
 8004bbc:	4a30      	ldr	r2, [pc, #192]	; (8004c80 <HAL_ADC_ConfigChannel+0x7b4>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	099b      	lsrs	r3, r3, #6
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004bd0:	e002      	b.n	8004bd8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f9      	bne.n	8004bd2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bde:	e03a      	b.n	8004c56 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a27      	ldr	r2, [pc, #156]	; (8004c84 <HAL_ADC_ConfigChannel+0x7b8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d113      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x746>
 8004bea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10d      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1f      	ldr	r2, [pc, #124]	; (8004c78 <HAL_ADC_ConfigChannel+0x7ac>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d12a      	bne.n	8004c56 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4819      	ldr	r0, [pc, #100]	; (8004c70 <HAL_ADC_ConfigChannel+0x7a4>)
 8004c0c:	f7ff f8ad 	bl	8003d6a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c10:	e021      	b.n	8004c56 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1c      	ldr	r2, [pc, #112]	; (8004c88 <HAL_ADC_ConfigChannel+0x7bc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d11c      	bne.n	8004c56 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d116      	bne.n	8004c56 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a12      	ldr	r2, [pc, #72]	; (8004c78 <HAL_ADC_ConfigChannel+0x7ac>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d111      	bne.n	8004c56 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	480c      	ldr	r0, [pc, #48]	; (8004c70 <HAL_ADC_ConfigChannel+0x7a4>)
 8004c3e:	f7ff f894 	bl	8003d6a <LL_ADC_SetCommonPathInternalCh>
 8004c42:	e008      	b.n	8004c56 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c48:	f043 0220 	orr.w	r2, r3, #32
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	37d8      	adds	r7, #216	; 0xd8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	80080000 	.word	0x80080000
 8004c70:	50040300 	.word	0x50040300
 8004c74:	c7520000 	.word	0xc7520000
 8004c78:	50040000 	.word	0x50040000
 8004c7c:	20000030 	.word	0x20000030
 8004c80:	053e2d63 	.word	0x053e2d63
 8004c84:	cb840000 	.word	0xcb840000
 8004c88:	80000001 	.word	0x80000001

08004c8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff f9df 	bl	8004060 <LL_ADC_IsEnabled>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d169      	bne.n	8004d7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	4b36      	ldr	r3, [pc, #216]	; (8004d88 <ADC_Enable+0xfc>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00d      	beq.n	8004cd2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cba:	f043 0210 	orr.w	r2, r3, #16
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc6:	f043 0201 	orr.w	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e055      	b.n	8004d7e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff f99a 	bl	8004010 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004cdc:	482b      	ldr	r0, [pc, #172]	; (8004d8c <ADC_Enable+0x100>)
 8004cde:	f7ff f857 	bl	8003d90 <LL_ADC_GetCommonPathInternalCh>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d013      	beq.n	8004d14 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cec:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <ADC_Enable+0x104>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	099b      	lsrs	r3, r3, #6
 8004cf2:	4a28      	ldr	r2, [pc, #160]	; (8004d94 <ADC_Enable+0x108>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	099b      	lsrs	r3, r3, #6
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	4413      	add	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004d06:	e002      	b.n	8004d0e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f9      	bne.n	8004d08 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004d14:	f7fe ffe6 	bl	8003ce4 <HAL_GetTick>
 8004d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d1a:	e028      	b.n	8004d6e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff f99d 	bl	8004060 <LL_ADC_IsEnabled>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d104      	bne.n	8004d36 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff f96d 	bl	8004010 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d36:	f7fe ffd5 	bl	8003ce4 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d914      	bls.n	8004d6e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d00d      	beq.n	8004d6e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	f043 0210 	orr.w	r2, r3, #16
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d62:	f043 0201 	orr.w	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e007      	b.n	8004d7e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d1cf      	bne.n	8004d1c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	8000003f 	.word	0x8000003f
 8004d8c:	50040300 	.word	0x50040300
 8004d90:	20000030 	.word	0x20000030
 8004d94:	053e2d63 	.word	0x053e2d63

08004d98 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff f96e 	bl	8004086 <LL_ADC_IsDisableOngoing>
 8004daa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff f955 	bl	8004060 <LL_ADC_IsEnabled>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d047      	beq.n	8004e4c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d144      	bne.n	8004e4c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 030d 	and.w	r3, r3, #13
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d10c      	bne.n	8004dea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff f92f 	bl	8004038 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2203      	movs	r2, #3
 8004de0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004de2:	f7fe ff7f 	bl	8003ce4 <HAL_GetTick>
 8004de6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004de8:	e029      	b.n	8004e3e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	f043 0210 	orr.w	r2, r3, #16
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfa:	f043 0201 	orr.w	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e023      	b.n	8004e4e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e06:	f7fe ff6d 	bl	8003ce4 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d914      	bls.n	8004e3e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00d      	beq.n	8004e3e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e26:	f043 0210 	orr.w	r2, r3, #16
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	f043 0201 	orr.w	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e007      	b.n	8004e4e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1dc      	bne.n	8004e06 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d14b      	bne.n	8004f08 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d021      	beq.n	8004ece <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fe ffe1 	bl	8003e56 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d032      	beq.n	8004f00 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d12b      	bne.n	8004f00 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d11f      	bne.n	8004f00 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	f043 0201 	orr.w	r2, r3, #1
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54
 8004ecc:	e018      	b.n	8004f00 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d111      	bne.n	8004f00 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef8:	f043 0201 	orr.w	r2, r3, #1
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7fc f9e1 	bl	80012c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f06:	e00e      	b.n	8004f26 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f7ff facf 	bl	80044b8 <HAL_ADC_ErrorCallback>
}
 8004f1a:	e004      	b.n	8004f26 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	4798      	blx	r3
}
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f7fc f98b 	bl	8001258 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f42:	bf00      	nop
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f68:	f043 0204 	orr.w	r2, r3, #4
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7ff faa1 	bl	80044b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f76:	bf00      	nop
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <LL_ADC_StartCalibration>:
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004f90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	609a      	str	r2, [r3, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <LL_ADC_IsCalibrationOnGoing>:
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fc4:	d101      	bne.n	8004fca <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_ADCEx_Calibration_Start+0x1c>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e04d      	b.n	8005090 <HAL_ADCEx_Calibration_Start+0xb8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff fecb 	bl	8004d98 <ADC_Disable>
 8005002:	4603      	mov	r3, r0
 8005004:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005006:	7bfb      	ldrb	r3, [r7, #15]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d136      	bne.n	800507a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005010:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005014:	f023 0302 	bic.w	r3, r3, #2
 8005018:	f043 0202 	orr.w	r2, r3, #2
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6839      	ldr	r1, [r7, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff ffa9 	bl	8004f7e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800502c:	e014      	b.n	8005058 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	3301      	adds	r3, #1
 8005032:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800503a:	d30d      	bcc.n	8005058 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005040:	f023 0312 	bic.w	r3, r3, #18
 8005044:	f043 0210 	orr.w	r2, r3, #16
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e01b      	b.n	8005090 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff ffa7 	bl	8004fb0 <LL_ADC_IsCalibrationOnGoing>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e2      	bne.n	800502e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506c:	f023 0303 	bic.w	r3, r3, #3
 8005070:	f043 0201 	orr.w	r2, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	655a      	str	r2, [r3, #84]	; 0x54
 8005078:	e005      	b.n	8005086 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507e:	f043 0210 	orr.w	r2, r3, #16
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800508e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050a8:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <__NVIC_SetPriorityGrouping+0x44>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050b4:	4013      	ands	r3, r2
 80050b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050ca:	4a04      	ldr	r2, [pc, #16]	; (80050dc <__NVIC_SetPriorityGrouping+0x44>)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	60d3      	str	r3, [r2, #12]
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	e000ed00 	.word	0xe000ed00

080050e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050e4:	4b04      	ldr	r3, [pc, #16]	; (80050f8 <__NVIC_GetPriorityGrouping+0x18>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	0a1b      	lsrs	r3, r3, #8
 80050ea:	f003 0307 	and.w	r3, r3, #7
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	e000ed00 	.word	0xe000ed00

080050fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510a:	2b00      	cmp	r3, #0
 800510c:	db0b      	blt.n	8005126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	f003 021f 	and.w	r2, r3, #31
 8005114:	4907      	ldr	r1, [pc, #28]	; (8005134 <__NVIC_EnableIRQ+0x38>)
 8005116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	2001      	movs	r0, #1
 800511e:	fa00 f202 	lsl.w	r2, r0, r2
 8005122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	e000e100 	.word	0xe000e100

08005138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	6039      	str	r1, [r7, #0]
 8005142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005148:	2b00      	cmp	r3, #0
 800514a:	db0a      	blt.n	8005162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	b2da      	uxtb	r2, r3
 8005150:	490c      	ldr	r1, [pc, #48]	; (8005184 <__NVIC_SetPriority+0x4c>)
 8005152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005156:	0112      	lsls	r2, r2, #4
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	440b      	add	r3, r1
 800515c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005160:	e00a      	b.n	8005178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	b2da      	uxtb	r2, r3
 8005166:	4908      	ldr	r1, [pc, #32]	; (8005188 <__NVIC_SetPriority+0x50>)
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	3b04      	subs	r3, #4
 8005170:	0112      	lsls	r2, r2, #4
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	440b      	add	r3, r1
 8005176:	761a      	strb	r2, [r3, #24]
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	e000e100 	.word	0xe000e100
 8005188:	e000ed00 	.word	0xe000ed00

0800518c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800518c:	b480      	push	{r7}
 800518e:	b089      	sub	sp, #36	; 0x24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f1c3 0307 	rsb	r3, r3, #7
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	bf28      	it	cs
 80051aa:	2304      	movcs	r3, #4
 80051ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3304      	adds	r3, #4
 80051b2:	2b06      	cmp	r3, #6
 80051b4:	d902      	bls.n	80051bc <NVIC_EncodePriority+0x30>
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	3b03      	subs	r3, #3
 80051ba:	e000      	b.n	80051be <NVIC_EncodePriority+0x32>
 80051bc:	2300      	movs	r3, #0
 80051be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	43da      	mvns	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	401a      	ands	r2, r3
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	fa01 f303 	lsl.w	r3, r1, r3
 80051de:	43d9      	mvns	r1, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051e4:	4313      	orrs	r3, r2
         );
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3724      	adds	r7, #36	; 0x24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
	...

080051f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3b01      	subs	r3, #1
 8005200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005204:	d301      	bcc.n	800520a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005206:	2301      	movs	r3, #1
 8005208:	e00f      	b.n	800522a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800520a:	4a0a      	ldr	r2, [pc, #40]	; (8005234 <SysTick_Config+0x40>)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3b01      	subs	r3, #1
 8005210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005212:	210f      	movs	r1, #15
 8005214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005218:	f7ff ff8e 	bl	8005138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800521c:	4b05      	ldr	r3, [pc, #20]	; (8005234 <SysTick_Config+0x40>)
 800521e:	2200      	movs	r2, #0
 8005220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005222:	4b04      	ldr	r3, [pc, #16]	; (8005234 <SysTick_Config+0x40>)
 8005224:	2207      	movs	r2, #7
 8005226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	e000e010 	.word	0xe000e010

08005238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff ff29 	bl	8005098 <__NVIC_SetPriorityGrouping>
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b086      	sub	sp, #24
 8005252:	af00      	add	r7, sp, #0
 8005254:	4603      	mov	r3, r0
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
 800525a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005260:	f7ff ff3e 	bl	80050e0 <__NVIC_GetPriorityGrouping>
 8005264:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	6978      	ldr	r0, [r7, #20]
 800526c:	f7ff ff8e 	bl	800518c <NVIC_EncodePriority>
 8005270:	4602      	mov	r2, r0
 8005272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005276:	4611      	mov	r1, r2
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff ff5d 	bl	8005138 <__NVIC_SetPriority>
}
 800527e:	bf00      	nop
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	4603      	mov	r3, r0
 800528e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff ff31 	bl	80050fc <__NVIC_EnableIRQ>
}
 800529a:	bf00      	nop
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff ffa2 	bl	80051f4 <SysTick_Config>
 80052b0:	4603      	mov	r3, r0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e014      	b.n	80052f6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	791b      	ldrb	r3, [r3, #4]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d105      	bne.n	80052e2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7fd fd39 	bl	8002d54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2202      	movs	r2, #2
 80052e6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	795b      	ldrb	r3, [r3, #5]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_DAC_Start_DMA+0x1e>
 800531a:	2302      	movs	r3, #2
 800531c:	e0ab      	b.n	8005476 <HAL_DAC_Start_DMA+0x176>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2202      	movs	r2, #2
 8005328:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d12f      	bne.n	8005390 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	4a52      	ldr	r2, [pc, #328]	; (8005480 <HAL_DAC_Start_DMA+0x180>)
 8005336:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	4a51      	ldr	r2, [pc, #324]	; (8005484 <HAL_DAC_Start_DMA+0x184>)
 800533e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	4a50      	ldr	r2, [pc, #320]	; (8005488 <HAL_DAC_Start_DMA+0x188>)
 8005346:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005356:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	2b08      	cmp	r3, #8
 800535c:	d013      	beq.n	8005386 <HAL_DAC_Start_DMA+0x86>
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	2b08      	cmp	r3, #8
 8005362:	d845      	bhi.n	80053f0 <HAL_DAC_Start_DMA+0xf0>
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_DAC_Start_DMA+0x72>
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	2b04      	cmp	r3, #4
 800536e:	d005      	beq.n	800537c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8005370:	e03e      	b.n	80053f0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3308      	adds	r3, #8
 8005378:	613b      	str	r3, [r7, #16]
        break;
 800537a:	e03c      	b.n	80053f6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	613b      	str	r3, [r7, #16]
        break;
 8005384:	e037      	b.n	80053f6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3310      	adds	r3, #16
 800538c:	613b      	str	r3, [r7, #16]
        break;
 800538e:	e032      	b.n	80053f6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	4a3d      	ldr	r2, [pc, #244]	; (800548c <HAL_DAC_Start_DMA+0x18c>)
 8005396:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4a3c      	ldr	r2, [pc, #240]	; (8005490 <HAL_DAC_Start_DMA+0x190>)
 800539e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	4a3b      	ldr	r2, [pc, #236]	; (8005494 <HAL_DAC_Start_DMA+0x194>)
 80053a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80053b6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d013      	beq.n	80053e6 <HAL_DAC_Start_DMA+0xe6>
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d817      	bhi.n	80053f4 <HAL_DAC_Start_DMA+0xf4>
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_DAC_Start_DMA+0xd2>
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d005      	beq.n	80053dc <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80053d0:	e010      	b.n	80053f4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	613b      	str	r3, [r7, #16]
        break;
 80053da:	e00c      	b.n	80053f6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3318      	adds	r3, #24
 80053e2:	613b      	str	r3, [r7, #16]
        break;
 80053e4:	e007      	b.n	80053f6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	331c      	adds	r3, #28
 80053ec:	613b      	str	r3, [r7, #16]
        break;
 80053ee:	e002      	b.n	80053f6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80053f0:	bf00      	nop
 80053f2:	e000      	b.n	80053f6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80053f4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d111      	bne.n	8005420 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800540a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6898      	ldr	r0, [r3, #8]
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	f000 faff 	bl	8005a18 <HAL_DMA_Start_IT>
 800541a:	4603      	mov	r3, r0
 800541c:	75fb      	strb	r3, [r7, #23]
 800541e:	e010      	b.n	8005442 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800542e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	68d8      	ldr	r0, [r3, #12]
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	f000 faed 	bl	8005a18 <HAL_DMA_Start_IT>
 800543e:	4603      	mov	r3, r0
 8005440:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10c      	bne.n	8005468 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	2201      	movs	r2, #1
 800545c:	409a      	lsls	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	e005      	b.n	8005474 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f043 0204 	orr.w	r2, r3, #4
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005474:	7dfb      	ldrb	r3, [r7, #23]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	08005793 	.word	0x08005793
 8005484:	080057b5 	.word	0x080057b5
 8005488:	080057d1 	.word	0x080057d1
 800548c:	0800583b 	.word	0x0800583b
 8005490:	0800585d 	.word	0x0800585d
 8005494:	08005879 	.word	0x08005879

08005498 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6819      	ldr	r1, [r3, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	43da      	mvns	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	400a      	ands	r2, r1
 80054be:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6819      	ldr	r1, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2201      	movs	r2, #1
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	43da      	mvns	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	400a      	ands	r2, r1
 80054da:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10d      	bne.n	80054fe <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 faf6 	bl	8005ad8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	e00c      	b.n	8005518 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fae8 	bl	8005ad8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005516:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b088      	sub	sp, #32
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	795b      	ldrb	r3, [r3, #5]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_DAC_ConfigChannel+0x1c>
 8005576:	2302      	movs	r3, #2
 8005578:	e107      	b.n	800578a <HAL_DAC_ConfigChannel+0x22c>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2202      	movs	r2, #2
 8005584:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b04      	cmp	r3, #4
 800558c:	d174      	bne.n	8005678 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800558e:	f7fe fba9 	bl	8003ce4 <HAL_GetTick>
 8005592:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d134      	bne.n	8005604 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800559a:	e011      	b.n	80055c0 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800559c:	f7fe fba2 	bl	8003ce4 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d90a      	bls.n	80055c0 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f043 0208 	orr.w	r2, r3, #8
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2203      	movs	r2, #3
 80055ba:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e0e4      	b.n	800578a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e6      	bne.n	800559c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80055ce:	2001      	movs	r0, #1
 80055d0:	f7fe fb94 	bl	8003cfc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	6992      	ldr	r2, [r2, #24]
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40
 80055de:	e01e      	b.n	800561e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80055e0:	f7fe fb80 	bl	8003ce4 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d90a      	bls.n	8005604 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f043 0208 	orr.w	r2, r3, #8
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2203      	movs	r2, #3
 80055fe:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e0c2      	b.n	800578a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560a:	2b00      	cmp	r3, #0
 800560c:	dbe8      	blt.n	80055e0 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800560e:	2001      	movs	r0, #1
 8005610:	f7fe fb74 	bl	8003cfc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	6992      	ldr	r2, [r2, #24]
 800561c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800562e:	fa01 f303 	lsl.w	r3, r1, r3
 8005632:	43db      	mvns	r3, r3
 8005634:	ea02 0103 	and.w	r1, r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	409a      	lsls	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f003 0310 	and.w	r3, r3, #16
 8005658:	21ff      	movs	r1, #255	; 0xff
 800565a:	fa01 f303 	lsl.w	r3, r1, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	ea02 0103 	and.w	r1, r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	6a1a      	ldr	r2, [r3, #32]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	409a      	lsls	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d11d      	bne.n	80056bc <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	221f      	movs	r2, #31
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	43db      	mvns	r3, r3
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	4013      	ands	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f003 0310 	and.w	r3, r3, #16
 80056ca:	2207      	movs	r2, #7
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	43db      	mvns	r3, r3
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	4013      	ands	r3, r2
 80056d6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	431a      	orrs	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6819      	ldr	r1, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	43da      	mvns	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	400a      	ands	r2, r1
 8005720:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	f640 72fc 	movw	r2, #4092	; 0xffc
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	43db      	mvns	r3, r3
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	4013      	ands	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4313      	orrs	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6819      	ldr	r1, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	22c0      	movs	r2, #192	; 0xc0
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	43da      	mvns	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	400a      	ands	r2, r1
 800577a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3720      	adds	r7, #32
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff febe 	bl	8005522 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	711a      	strb	r2, [r3, #4]
}
 80057ac:	bf00      	nop
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7ff feb7 	bl	8005536 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f043 0204 	orr.w	r2, r3, #4
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7ff fead 	bl	800554a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	711a      	strb	r2, [r3, #4]
}
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005846:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f7ff ffd8 	bl	80057fe <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	711a      	strb	r2, [r3, #4]
}
 8005854:	bf00      	nop
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005868:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f7ff ffd1 	bl	8005812 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005870:	bf00      	nop
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f043 0204 	orr.w	r2, r3, #4
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f7ff ffc7 	bl	8005826 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	711a      	strb	r2, [r3, #4]
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e098      	b.n	80059ec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	4b4d      	ldr	r3, [pc, #308]	; (80059f8 <HAL_DMA_Init+0x150>)
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d80f      	bhi.n	80058e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	4b4b      	ldr	r3, [pc, #300]	; (80059fc <HAL_DMA_Init+0x154>)
 80058ce:	4413      	add	r3, r2
 80058d0:	4a4b      	ldr	r2, [pc, #300]	; (8005a00 <HAL_DMA_Init+0x158>)
 80058d2:	fba2 2303 	umull	r2, r3, r2, r3
 80058d6:	091b      	lsrs	r3, r3, #4
 80058d8:	009a      	lsls	r2, r3, #2
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a48      	ldr	r2, [pc, #288]	; (8005a04 <HAL_DMA_Init+0x15c>)
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40
 80058e4:	e00e      	b.n	8005904 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	4b46      	ldr	r3, [pc, #280]	; (8005a08 <HAL_DMA_Init+0x160>)
 80058ee:	4413      	add	r3, r2
 80058f0:	4a43      	ldr	r2, [pc, #268]	; (8005a00 <HAL_DMA_Init+0x158>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	091b      	lsrs	r3, r3, #4
 80058f8:	009a      	lsls	r2, r3, #2
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a42      	ldr	r2, [pc, #264]	; (8005a0c <HAL_DMA_Init+0x164>)
 8005902:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800591a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005928:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005934:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005940:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800595e:	d039      	beq.n	80059d4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	4a27      	ldr	r2, [pc, #156]	; (8005a04 <HAL_DMA_Init+0x15c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d11a      	bne.n	80059a0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800596a:	4b29      	ldr	r3, [pc, #164]	; (8005a10 <HAL_DMA_Init+0x168>)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005972:	f003 031c 	and.w	r3, r3, #28
 8005976:	210f      	movs	r1, #15
 8005978:	fa01 f303 	lsl.w	r3, r1, r3
 800597c:	43db      	mvns	r3, r3
 800597e:	4924      	ldr	r1, [pc, #144]	; (8005a10 <HAL_DMA_Init+0x168>)
 8005980:	4013      	ands	r3, r2
 8005982:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005984:	4b22      	ldr	r3, [pc, #136]	; (8005a10 <HAL_DMA_Init+0x168>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6859      	ldr	r1, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005990:	f003 031c 	and.w	r3, r3, #28
 8005994:	fa01 f303 	lsl.w	r3, r1, r3
 8005998:	491d      	ldr	r1, [pc, #116]	; (8005a10 <HAL_DMA_Init+0x168>)
 800599a:	4313      	orrs	r3, r2
 800599c:	600b      	str	r3, [r1, #0]
 800599e:	e019      	b.n	80059d4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80059a0:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <HAL_DMA_Init+0x16c>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a8:	f003 031c 	and.w	r3, r3, #28
 80059ac:	210f      	movs	r1, #15
 80059ae:	fa01 f303 	lsl.w	r3, r1, r3
 80059b2:	43db      	mvns	r3, r3
 80059b4:	4917      	ldr	r1, [pc, #92]	; (8005a14 <HAL_DMA_Init+0x16c>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80059ba:	4b16      	ldr	r3, [pc, #88]	; (8005a14 <HAL_DMA_Init+0x16c>)
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6859      	ldr	r1, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c6:	f003 031c 	and.w	r3, r3, #28
 80059ca:	fa01 f303 	lsl.w	r3, r1, r3
 80059ce:	4911      	ldr	r1, [pc, #68]	; (8005a14 <HAL_DMA_Init+0x16c>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	40020407 	.word	0x40020407
 80059fc:	bffdfff8 	.word	0xbffdfff8
 8005a00:	cccccccd 	.word	0xcccccccd
 8005a04:	40020000 	.word	0x40020000
 8005a08:	bffdfbf8 	.word	0xbffdfbf8
 8005a0c:	40020400 	.word	0x40020400
 8005a10:	400200a8 	.word	0x400200a8
 8005a14:	400204a8 	.word	0x400204a8

08005a18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_DMA_Start_IT+0x20>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e04b      	b.n	8005ad0 <HAL_DMA_Start_IT+0xb8>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d13a      	bne.n	8005ac2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	68b9      	ldr	r1, [r7, #8]
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 f91e 	bl	8005cb2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d008      	beq.n	8005a90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 020e 	orr.w	r2, r2, #14
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e00f      	b.n	8005ab0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0204 	bic.w	r2, r2, #4
 8005a9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 020a 	orr.w	r2, r2, #10
 8005aae:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	e005      	b.n	8005ace <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005aca:	2302      	movs	r3, #2
 8005acc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d008      	beq.n	8005b02 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2204      	movs	r2, #4
 8005af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e022      	b.n	8005b48 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 020e 	bic.w	r2, r2, #14
 8005b10:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0201 	bic.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b26:	f003 021c 	and.w	r2, r3, #28
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	2101      	movs	r1, #1
 8005b30:	fa01 f202 	lsl.w	r2, r1, r2
 8005b34:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b70:	f003 031c 	and.w	r3, r3, #28
 8005b74:	2204      	movs	r2, #4
 8005b76:	409a      	lsls	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d026      	beq.n	8005bce <HAL_DMA_IRQHandler+0x7a>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d021      	beq.n	8005bce <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0320 	and.w	r3, r3, #32
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d107      	bne.n	8005ba8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0204 	bic.w	r2, r2, #4
 8005ba6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bac:	f003 021c 	and.w	r2, r3, #28
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	2104      	movs	r1, #4
 8005bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8005bba:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d071      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005bcc:	e06c      	b.n	8005ca8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd2:	f003 031c 	and.w	r3, r3, #28
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d02e      	beq.n	8005c40 <HAL_DMA_IRQHandler+0xec>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d029      	beq.n	8005c40 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0320 	and.w	r3, r3, #32
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10b      	bne.n	8005c12 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 020a 	bic.w	r2, r2, #10
 8005c08:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c16:	f003 021c 	and.w	r2, r3, #28
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	2102      	movs	r1, #2
 8005c20:	fa01 f202 	lsl.w	r2, r1, r2
 8005c24:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d038      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005c3e:	e033      	b.n	8005ca8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c44:	f003 031c 	and.w	r3, r3, #28
 8005c48:	2208      	movs	r2, #8
 8005c4a:	409a      	lsls	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d02a      	beq.n	8005caa <HAL_DMA_IRQHandler+0x156>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d025      	beq.n	8005caa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 020e 	bic.w	r2, r2, #14
 8005c6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c72:	f003 021c 	and.w	r2, r3, #28
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c80:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d004      	beq.n	8005caa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
}
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b085      	sub	sp, #20
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	607a      	str	r2, [r7, #4]
 8005cbe:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc4:	f003 021c 	and.w	r2, r3, #28
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	2101      	movs	r1, #1
 8005cce:	fa01 f202 	lsl.w	r2, r1, r2
 8005cd2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b10      	cmp	r3, #16
 8005ce2:	d108      	bne.n	8005cf6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005cf4:	e007      	b.n	8005d06 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	60da      	str	r2, [r3, #12]
}
 8005d06:	bf00      	nop
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
	...

08005d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d22:	e154      	b.n	8005fce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	2101      	movs	r1, #1
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d30:	4013      	ands	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 8146 	beq.w	8005fc8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d005      	beq.n	8005d54 <HAL_GPIO_Init+0x40>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d130      	bne.n	8005db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	2203      	movs	r2, #3
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	fa02 f303 	lsl.w	r3, r2, r3
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d92:	43db      	mvns	r3, r3
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4013      	ands	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	091b      	lsrs	r3, r3, #4
 8005da0:	f003 0201 	and.w	r2, r3, #1
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d017      	beq.n	8005df2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	2203      	movs	r2, #3
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d123      	bne.n	8005e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	08da      	lsrs	r2, r3, #3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3208      	adds	r2, #8
 8005e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	220f      	movs	r2, #15
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	08da      	lsrs	r2, r3, #3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3208      	adds	r2, #8
 8005e40:	6939      	ldr	r1, [r7, #16]
 8005e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	2203      	movs	r2, #3
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	43db      	mvns	r3, r3
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f003 0203 	and.w	r2, r3, #3
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 80a0 	beq.w	8005fc8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e88:	4b58      	ldr	r3, [pc, #352]	; (8005fec <HAL_GPIO_Init+0x2d8>)
 8005e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e8c:	4a57      	ldr	r2, [pc, #348]	; (8005fec <HAL_GPIO_Init+0x2d8>)
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	6613      	str	r3, [r2, #96]	; 0x60
 8005e94:	4b55      	ldr	r3, [pc, #340]	; (8005fec <HAL_GPIO_Init+0x2d8>)
 8005e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	60bb      	str	r3, [r7, #8]
 8005e9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005ea0:	4a53      	ldr	r2, [pc, #332]	; (8005ff0 <HAL_GPIO_Init+0x2dc>)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	089b      	lsrs	r3, r3, #2
 8005ea6:	3302      	adds	r3, #2
 8005ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	220f      	movs	r2, #15
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005eca:	d019      	beq.n	8005f00 <HAL_GPIO_Init+0x1ec>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a49      	ldr	r2, [pc, #292]	; (8005ff4 <HAL_GPIO_Init+0x2e0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d013      	beq.n	8005efc <HAL_GPIO_Init+0x1e8>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a48      	ldr	r2, [pc, #288]	; (8005ff8 <HAL_GPIO_Init+0x2e4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d00d      	beq.n	8005ef8 <HAL_GPIO_Init+0x1e4>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a47      	ldr	r2, [pc, #284]	; (8005ffc <HAL_GPIO_Init+0x2e8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d007      	beq.n	8005ef4 <HAL_GPIO_Init+0x1e0>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a46      	ldr	r2, [pc, #280]	; (8006000 <HAL_GPIO_Init+0x2ec>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d101      	bne.n	8005ef0 <HAL_GPIO_Init+0x1dc>
 8005eec:	2304      	movs	r3, #4
 8005eee:	e008      	b.n	8005f02 <HAL_GPIO_Init+0x1ee>
 8005ef0:	2307      	movs	r3, #7
 8005ef2:	e006      	b.n	8005f02 <HAL_GPIO_Init+0x1ee>
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e004      	b.n	8005f02 <HAL_GPIO_Init+0x1ee>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e002      	b.n	8005f02 <HAL_GPIO_Init+0x1ee>
 8005efc:	2301      	movs	r3, #1
 8005efe:	e000      	b.n	8005f02 <HAL_GPIO_Init+0x1ee>
 8005f00:	2300      	movs	r3, #0
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	f002 0203 	and.w	r2, r2, #3
 8005f08:	0092      	lsls	r2, r2, #2
 8005f0a:	4093      	lsls	r3, r2
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005f12:	4937      	ldr	r1, [pc, #220]	; (8005ff0 <HAL_GPIO_Init+0x2dc>)
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	089b      	lsrs	r3, r3, #2
 8005f18:	3302      	adds	r3, #2
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f20:	4b38      	ldr	r3, [pc, #224]	; (8006004 <HAL_GPIO_Init+0x2f0>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f44:	4a2f      	ldr	r2, [pc, #188]	; (8006004 <HAL_GPIO_Init+0x2f0>)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f4a:	4b2e      	ldr	r3, [pc, #184]	; (8006004 <HAL_GPIO_Init+0x2f0>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	43db      	mvns	r3, r3
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4013      	ands	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f6e:	4a25      	ldr	r2, [pc, #148]	; (8006004 <HAL_GPIO_Init+0x2f0>)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005f74:	4b23      	ldr	r3, [pc, #140]	; (8006004 <HAL_GPIO_Init+0x2f0>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4013      	ands	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f98:	4a1a      	ldr	r2, [pc, #104]	; (8006004 <HAL_GPIO_Init+0x2f0>)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005f9e:	4b19      	ldr	r3, [pc, #100]	; (8006004 <HAL_GPIO_Init+0x2f0>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4013      	ands	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005fc2:	4a10      	ldr	r2, [pc, #64]	; (8006004 <HAL_GPIO_Init+0x2f0>)
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f47f aea3 	bne.w	8005d24 <HAL_GPIO_Init+0x10>
  }
}
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	371c      	adds	r7, #28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	40010000 	.word	0x40010000
 8005ff4:	48000400 	.word	0x48000400
 8005ff8:	48000800 	.word	0x48000800
 8005ffc:	48000c00 	.word	0x48000c00
 8006000:	48001000 	.word	0x48001000
 8006004:	40010400 	.word	0x40010400

08006008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	460b      	mov	r3, r1
 8006012:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	887b      	ldrh	r3, [r7, #2]
 800601a:	4013      	ands	r3, r2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006020:	2301      	movs	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]
 8006024:	e001      	b.n	800602a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	807b      	strh	r3, [r7, #2]
 8006044:	4613      	mov	r3, r2
 8006046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006048:	787b      	ldrb	r3, [r7, #1]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800604e:	887a      	ldrh	r2, [r7, #2]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006054:	e002      	b.n	800605c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006056:	887a      	ldrh	r2, [r7, #2]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	4603      	mov	r3, r0
 8006070:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006072:	4b08      	ldr	r3, [pc, #32]	; (8006094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006074:	695a      	ldr	r2, [r3, #20]
 8006076:	88fb      	ldrh	r3, [r7, #6]
 8006078:	4013      	ands	r3, r2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d006      	beq.n	800608c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800607e:	4a05      	ldr	r2, [pc, #20]	; (8006094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006080:	88fb      	ldrh	r3, [r7, #6]
 8006082:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006084:	88fb      	ldrh	r3, [r7, #6]
 8006086:	4618      	mov	r0, r3
 8006088:	f7fc fa28 	bl	80024dc <HAL_GPIO_EXTI_Callback>
  }
}
 800608c:	bf00      	nop
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	40010400 	.word	0x40010400

08006098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e081      	b.n	80061ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fc feb6 	bl	8002e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2224      	movs	r2, #36	; 0x24
 80060c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0201 	bic.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80060e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d107      	bne.n	8006112 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689a      	ldr	r2, [r3, #8]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800610e:	609a      	str	r2, [r3, #8]
 8006110:	e006      	b.n	8006120 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800611e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	2b02      	cmp	r3, #2
 8006126:	d104      	bne.n	8006132 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006130:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6812      	ldr	r2, [r2, #0]
 800613c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006144:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006154:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691a      	ldr	r2, [r3, #16]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	69d9      	ldr	r1, [r3, #28]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a1a      	ldr	r2, [r3, #32]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af02      	add	r7, sp, #8
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	607a      	str	r2, [r7, #4]
 80061c2:	461a      	mov	r2, r3
 80061c4:	460b      	mov	r3, r1
 80061c6:	817b      	strh	r3, [r7, #10]
 80061c8:	4613      	mov	r3, r2
 80061ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b20      	cmp	r3, #32
 80061d6:	f040 80da 	bne.w	800638e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d101      	bne.n	80061e8 <HAL_I2C_Master_Transmit+0x30>
 80061e4:	2302      	movs	r3, #2
 80061e6:	e0d3      	b.n	8006390 <HAL_I2C_Master_Transmit+0x1d8>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061f0:	f7fd fd78 	bl	8003ce4 <HAL_GetTick>
 80061f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	2319      	movs	r3, #25
 80061fc:	2201      	movs	r2, #1
 80061fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 fb4e 	bl	80068a4 <I2C_WaitOnFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e0be      	b.n	8006390 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2221      	movs	r2, #33	; 0x21
 8006216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2210      	movs	r2, #16
 800621e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	893a      	ldrh	r2, [r7, #8]
 8006232:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623e:	b29b      	uxth	r3, r3
 8006240:	2bff      	cmp	r3, #255	; 0xff
 8006242:	d90e      	bls.n	8006262 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	22ff      	movs	r2, #255	; 0xff
 8006248:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624e:	b2da      	uxtb	r2, r3
 8006250:	8979      	ldrh	r1, [r7, #10]
 8006252:	4b51      	ldr	r3, [pc, #324]	; (8006398 <HAL_I2C_Master_Transmit+0x1e0>)
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 fd44 	bl	8006ce8 <I2C_TransferConfig>
 8006260:	e06c      	b.n	800633c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006270:	b2da      	uxtb	r2, r3
 8006272:	8979      	ldrh	r1, [r7, #10]
 8006274:	4b48      	ldr	r3, [pc, #288]	; (8006398 <HAL_I2C_Master_Transmit+0x1e0>)
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 fd33 	bl	8006ce8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006282:	e05b      	b.n	800633c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	6a39      	ldr	r1, [r7, #32]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 fb4b 	bl	8006924 <I2C_WaitOnTXISFlagUntilTimeout>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e07b      	b.n	8006390 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	781a      	ldrb	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	3b01      	subs	r3, #1
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d034      	beq.n	800633c <HAL_I2C_Master_Transmit+0x184>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d130      	bne.n	800633c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	2200      	movs	r2, #0
 80062e2:	2180      	movs	r1, #128	; 0x80
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 fadd 	bl	80068a4 <I2C_WaitOnFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e04d      	b.n	8006390 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2bff      	cmp	r3, #255	; 0xff
 80062fc:	d90e      	bls.n	800631c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	22ff      	movs	r2, #255	; 0xff
 8006302:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006308:	b2da      	uxtb	r2, r3
 800630a:	8979      	ldrh	r1, [r7, #10]
 800630c:	2300      	movs	r3, #0
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fce7 	bl	8006ce8 <I2C_TransferConfig>
 800631a:	e00f      	b.n	800633c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632a:	b2da      	uxtb	r2, r3
 800632c:	8979      	ldrh	r1, [r7, #10]
 800632e:	2300      	movs	r3, #0
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 fcd6 	bl	8006ce8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d19e      	bne.n	8006284 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	6a39      	ldr	r1, [r7, #32]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 fb2a 	bl	80069a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e01a      	b.n	8006390 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2220      	movs	r2, #32
 8006360:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6859      	ldr	r1, [r3, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4b0b      	ldr	r3, [pc, #44]	; (800639c <HAL_I2C_Master_Transmit+0x1e4>)
 800636e:	400b      	ands	r3, r1
 8006370:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e000      	b.n	8006390 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
  }
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	80002000 	.word	0x80002000
 800639c:	fe00e800 	.word	0xfe00e800

080063a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	607a      	str	r2, [r7, #4]
 80063aa:	461a      	mov	r2, r3
 80063ac:	460b      	mov	r3, r1
 80063ae:	817b      	strh	r3, [r7, #10]
 80063b0:	4613      	mov	r3, r2
 80063b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b20      	cmp	r3, #32
 80063be:	f040 80db 	bne.w	8006578 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <HAL_I2C_Master_Receive+0x30>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e0d4      	b.n	800657a <HAL_I2C_Master_Receive+0x1da>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063d8:	f7fd fc84 	bl	8003ce4 <HAL_GetTick>
 80063dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	2319      	movs	r3, #25
 80063e4:	2201      	movs	r2, #1
 80063e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 fa5a 	bl	80068a4 <I2C_WaitOnFlagUntilTimeout>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e0bf      	b.n	800657a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2222      	movs	r2, #34	; 0x22
 80063fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2210      	movs	r2, #16
 8006406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	893a      	ldrh	r2, [r7, #8]
 800641a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006426:	b29b      	uxth	r3, r3
 8006428:	2bff      	cmp	r3, #255	; 0xff
 800642a:	d90e      	bls.n	800644a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	22ff      	movs	r2, #255	; 0xff
 8006430:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006436:	b2da      	uxtb	r2, r3
 8006438:	8979      	ldrh	r1, [r7, #10]
 800643a:	4b52      	ldr	r3, [pc, #328]	; (8006584 <HAL_I2C_Master_Receive+0x1e4>)
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fc50 	bl	8006ce8 <I2C_TransferConfig>
 8006448:	e06d      	b.n	8006526 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006458:	b2da      	uxtb	r2, r3
 800645a:	8979      	ldrh	r1, [r7, #10]
 800645c:	4b49      	ldr	r3, [pc, #292]	; (8006584 <HAL_I2C_Master_Receive+0x1e4>)
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 fc3f 	bl	8006ce8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800646a:	e05c      	b.n	8006526 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	6a39      	ldr	r1, [r7, #32]
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 fad3 	bl	8006a1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e07c      	b.n	800657a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d034      	beq.n	8006526 <HAL_I2C_Master_Receive+0x186>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d130      	bne.n	8006526 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	2200      	movs	r2, #0
 80064cc:	2180      	movs	r1, #128	; 0x80
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f9e8 	bl	80068a4 <I2C_WaitOnFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e04d      	b.n	800657a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2bff      	cmp	r3, #255	; 0xff
 80064e6:	d90e      	bls.n	8006506 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	22ff      	movs	r2, #255	; 0xff
 80064ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	8979      	ldrh	r1, [r7, #10]
 80064f6:	2300      	movs	r3, #0
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 fbf2 	bl	8006ce8 <I2C_TransferConfig>
 8006504:	e00f      	b.n	8006526 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006514:	b2da      	uxtb	r2, r3
 8006516:	8979      	ldrh	r1, [r7, #10]
 8006518:	2300      	movs	r3, #0
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fbe1 	bl	8006ce8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652a:	b29b      	uxth	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d19d      	bne.n	800646c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	6a39      	ldr	r1, [r7, #32]
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fa35 	bl	80069a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e01a      	b.n	800657a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2220      	movs	r2, #32
 800654a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6859      	ldr	r1, [r3, #4]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <HAL_I2C_Master_Receive+0x1e8>)
 8006558:	400b      	ands	r3, r1
 800655a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2220      	movs	r2, #32
 8006560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	e000      	b.n	800657a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006578:	2302      	movs	r3, #2
  }
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	80002400 	.word	0x80002400
 8006588:	fe00e800 	.word	0xfe00e800

0800658c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af02      	add	r7, sp, #8
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	4608      	mov	r0, r1
 8006596:	4611      	mov	r1, r2
 8006598:	461a      	mov	r2, r3
 800659a:	4603      	mov	r3, r0
 800659c:	817b      	strh	r3, [r7, #10]
 800659e:	460b      	mov	r3, r1
 80065a0:	813b      	strh	r3, [r7, #8]
 80065a2:	4613      	mov	r3, r2
 80065a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	f040 80f9 	bne.w	80067a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <HAL_I2C_Mem_Write+0x34>
 80065ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d105      	bne.n	80065cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e0ed      	b.n	80067a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d101      	bne.n	80065da <HAL_I2C_Mem_Write+0x4e>
 80065d6:	2302      	movs	r3, #2
 80065d8:	e0e6      	b.n	80067a8 <HAL_I2C_Mem_Write+0x21c>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065e2:	f7fd fb7f 	bl	8003ce4 <HAL_GetTick>
 80065e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	2319      	movs	r3, #25
 80065ee:	2201      	movs	r2, #1
 80065f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f955 	bl	80068a4 <I2C_WaitOnFlagUntilTimeout>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e0d1      	b.n	80067a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2221      	movs	r2, #33	; 0x21
 8006608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2240      	movs	r2, #64	; 0x40
 8006610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a3a      	ldr	r2, [r7, #32]
 800661e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800662c:	88f8      	ldrh	r0, [r7, #6]
 800662e:	893a      	ldrh	r2, [r7, #8]
 8006630:	8979      	ldrh	r1, [r7, #10]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	9301      	str	r3, [sp, #4]
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	4603      	mov	r3, r0
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f8b9 	bl	80067b4 <I2C_RequestMemoryWrite>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e0a9      	b.n	80067a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006658:	b29b      	uxth	r3, r3
 800665a:	2bff      	cmp	r3, #255	; 0xff
 800665c:	d90e      	bls.n	800667c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	22ff      	movs	r2, #255	; 0xff
 8006662:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006668:	b2da      	uxtb	r2, r3
 800666a:	8979      	ldrh	r1, [r7, #10]
 800666c:	2300      	movs	r3, #0
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fb37 	bl	8006ce8 <I2C_TransferConfig>
 800667a:	e00f      	b.n	800669c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668a:	b2da      	uxtb	r2, r3
 800668c:	8979      	ldrh	r1, [r7, #10]
 800668e:	2300      	movs	r3, #0
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 fb26 	bl	8006ce8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f93f 	bl	8006924 <I2C_WaitOnTXISFlagUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e07b      	b.n	80067a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	781a      	ldrb	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	3b01      	subs	r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d8:	3b01      	subs	r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d034      	beq.n	8006754 <HAL_I2C_Mem_Write+0x1c8>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d130      	bne.n	8006754 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	2200      	movs	r2, #0
 80066fa:	2180      	movs	r1, #128	; 0x80
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f8d1 	bl	80068a4 <I2C_WaitOnFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e04d      	b.n	80067a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006710:	b29b      	uxth	r3, r3
 8006712:	2bff      	cmp	r3, #255	; 0xff
 8006714:	d90e      	bls.n	8006734 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	22ff      	movs	r2, #255	; 0xff
 800671a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006720:	b2da      	uxtb	r2, r3
 8006722:	8979      	ldrh	r1, [r7, #10]
 8006724:	2300      	movs	r3, #0
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 fadb 	bl	8006ce8 <I2C_TransferConfig>
 8006732:	e00f      	b.n	8006754 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006742:	b2da      	uxtb	r2, r3
 8006744:	8979      	ldrh	r1, [r7, #10]
 8006746:	2300      	movs	r3, #0
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 faca 	bl	8006ce8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d19e      	bne.n	800669c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 f91e 	bl	80069a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e01a      	b.n	80067a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2220      	movs	r2, #32
 8006778:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6859      	ldr	r1, [r3, #4]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <HAL_I2C_Mem_Write+0x224>)
 8006786:	400b      	ands	r3, r1
 8006788:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2220      	movs	r2, #32
 800678e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	e000      	b.n	80067a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80067a6:	2302      	movs	r3, #2
  }
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	fe00e800 	.word	0xfe00e800

080067b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af02      	add	r7, sp, #8
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	4608      	mov	r0, r1
 80067be:	4611      	mov	r1, r2
 80067c0:	461a      	mov	r2, r3
 80067c2:	4603      	mov	r3, r0
 80067c4:	817b      	strh	r3, [r7, #10]
 80067c6:	460b      	mov	r3, r1
 80067c8:	813b      	strh	r3, [r7, #8]
 80067ca:	4613      	mov	r3, r2
 80067cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	8979      	ldrh	r1, [r7, #10]
 80067d4:	4b20      	ldr	r3, [pc, #128]	; (8006858 <I2C_RequestMemoryWrite+0xa4>)
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 fa83 	bl	8006ce8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	69b9      	ldr	r1, [r7, #24]
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f89c 	bl	8006924 <I2C_WaitOnTXISFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e02c      	b.n	8006850 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d105      	bne.n	8006808 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067fc:	893b      	ldrh	r3, [r7, #8]
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	629a      	str	r2, [r3, #40]	; 0x28
 8006806:	e015      	b.n	8006834 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006808:	893b      	ldrh	r3, [r7, #8]
 800680a:	0a1b      	lsrs	r3, r3, #8
 800680c:	b29b      	uxth	r3, r3
 800680e:	b2da      	uxtb	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	69b9      	ldr	r1, [r7, #24]
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 f882 	bl	8006924 <I2C_WaitOnTXISFlagUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e012      	b.n	8006850 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800682a:	893b      	ldrh	r3, [r7, #8]
 800682c:	b2da      	uxtb	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2200      	movs	r2, #0
 800683c:	2180      	movs	r1, #128	; 0x80
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 f830 	bl	80068a4 <I2C_WaitOnFlagUntilTimeout>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	80002000 	.word	0x80002000

0800685c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b02      	cmp	r3, #2
 8006870:	d103      	bne.n	800687a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2200      	movs	r2, #0
 8006878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b01      	cmp	r3, #1
 8006886:	d007      	beq.n	8006898 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0201 	orr.w	r2, r2, #1
 8006896:	619a      	str	r2, [r3, #24]
  }
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	603b      	str	r3, [r7, #0]
 80068b0:	4613      	mov	r3, r2
 80068b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068b4:	e022      	b.n	80068fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068bc:	d01e      	beq.n	80068fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068be:	f7fd fa11 	bl	8003ce4 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d302      	bcc.n	80068d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d113      	bne.n	80068fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d8:	f043 0220 	orr.w	r2, r3, #32
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e00f      	b.n	800691c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	4013      	ands	r3, r2
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	429a      	cmp	r2, r3
 800690a:	bf0c      	ite	eq
 800690c:	2301      	moveq	r3, #1
 800690e:	2300      	movne	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	461a      	mov	r2, r3
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	429a      	cmp	r2, r3
 8006918:	d0cd      	beq.n	80068b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006930:	e02c      	b.n	800698c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 f8ea 	bl	8006b10 <I2C_IsErrorOccurred>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e02a      	b.n	800699c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800694c:	d01e      	beq.n	800698c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800694e:	f7fd f9c9 	bl	8003ce4 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	429a      	cmp	r2, r3
 800695c:	d302      	bcc.n	8006964 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d113      	bne.n	800698c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006968:	f043 0220 	orr.w	r2, r3, #32
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2220      	movs	r2, #32
 8006974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e007      	b.n	800699c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b02      	cmp	r3, #2
 8006998:	d1cb      	bne.n	8006932 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069b0:	e028      	b.n	8006a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	68b9      	ldr	r1, [r7, #8]
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 f8aa 	bl	8006b10 <I2C_IsErrorOccurred>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e026      	b.n	8006a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c6:	f7fd f98d 	bl	8003ce4 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d302      	bcc.n	80069dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d113      	bne.n	8006a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e0:	f043 0220 	orr.w	r2, r3, #32
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e007      	b.n	8006a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	d1cf      	bne.n	80069b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a28:	e064      	b.n	8006af4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 f86e 	bl	8006b10 <I2C_IsErrorOccurred>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e062      	b.n	8006b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d138      	bne.n	8006abe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d105      	bne.n	8006a66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	e04e      	b.n	8006b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	f003 0310 	and.w	r3, r3, #16
 8006a70:	2b10      	cmp	r3, #16
 8006a72:	d107      	bne.n	8006a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2210      	movs	r2, #16
 8006a7a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2204      	movs	r2, #4
 8006a80:	645a      	str	r2, [r3, #68]	; 0x44
 8006a82:	e002      	b.n	8006a8a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6859      	ldr	r1, [r3, #4]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	4b1b      	ldr	r3, [pc, #108]	; (8006b0c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006a9e:	400b      	ands	r3, r1
 8006aa0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e022      	b.n	8006b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abe:	f7fd f911 	bl	8003ce4 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d302      	bcc.n	8006ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10f      	bne.n	8006af4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad8:	f043 0220 	orr.w	r2, r3, #32
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e007      	b.n	8006b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	f003 0304 	and.w	r3, r3, #4
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d193      	bne.n	8006a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	fe00e800 	.word	0xfe00e800

08006b10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08a      	sub	sp, #40	; 0x28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	f003 0310 	and.w	r3, r3, #16
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d075      	beq.n	8006c28 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2210      	movs	r2, #16
 8006b42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b44:	e056      	b.n	8006bf4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b4c:	d052      	beq.n	8006bf4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b4e:	f7fd f8c9 	bl	8003ce4 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d302      	bcc.n	8006b64 <I2C_IsErrorOccurred+0x54>
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d147      	bne.n	8006bf4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b86:	d12e      	bne.n	8006be6 <I2C_IsErrorOccurred+0xd6>
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b8e:	d02a      	beq.n	8006be6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006b90:	7cfb      	ldrb	r3, [r7, #19]
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	d027      	beq.n	8006be6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ba4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006ba6:	f7fd f89d 	bl	8003ce4 <HAL_GetTick>
 8006baa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bac:	e01b      	b.n	8006be6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006bae:	f7fd f899 	bl	8003ce4 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b19      	cmp	r3, #25
 8006bba:	d914      	bls.n	8006be6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc0:	f043 0220 	orr.w	r2, r3, #32
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	f003 0320 	and.w	r3, r3, #32
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	d1dc      	bne.n	8006bae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	d003      	beq.n	8006c0a <I2C_IsErrorOccurred+0xfa>
 8006c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d09d      	beq.n	8006b46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d103      	bne.n	8006c1a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2220      	movs	r2, #32
 8006c18:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	f043 0304 	orr.w	r3, r3, #4
 8006c20:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00b      	beq.n	8006c52 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	f043 0301 	orr.w	r3, r3, #1
 8006c40:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00b      	beq.n	8006c74 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	f043 0308 	orr.w	r3, r3, #8
 8006c62:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00b      	beq.n	8006c96 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	f043 0302 	orr.w	r3, r3, #2
 8006c84:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d01c      	beq.n	8006cd8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff fddc 	bl	800685c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6859      	ldr	r1, [r3, #4]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4b0d      	ldr	r3, [pc, #52]	; (8006ce4 <I2C_IsErrorOccurred+0x1d4>)
 8006cb0:	400b      	ands	r3, r1
 8006cb2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3728      	adds	r7, #40	; 0x28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	fe00e800 	.word	0xfe00e800

08006ce8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	607b      	str	r3, [r7, #4]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	817b      	strh	r3, [r7, #10]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cfa:	897b      	ldrh	r3, [r7, #10]
 8006cfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006d00:	7a7b      	ldrb	r3, [r7, #9]
 8006d02:	041b      	lsls	r3, r3, #16
 8006d04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	0d5b      	lsrs	r3, r3, #21
 8006d22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006d26:	4b08      	ldr	r3, [pc, #32]	; (8006d48 <I2C_TransferConfig+0x60>)
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	43db      	mvns	r3, r3
 8006d2c:	ea02 0103 	and.w	r1, r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	03ff63ff 	.word	0x03ff63ff

08006d4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d138      	bne.n	8006dd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d101      	bne.n	8006d70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	e032      	b.n	8006dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2224      	movs	r2, #36	; 0x24
 8006d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0201 	bic.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6819      	ldr	r1, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0201 	orr.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	e000      	b.n	8006dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006dd4:	2302      	movs	r3, #2
  }
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b085      	sub	sp, #20
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b20      	cmp	r3, #32
 8006df6:	d139      	bne.n	8006e6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d101      	bne.n	8006e06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e02:	2302      	movs	r3, #2
 8006e04:	e033      	b.n	8006e6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2224      	movs	r2, #36	; 0x24
 8006e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0201 	bic.w	r2, r2, #1
 8006e24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	021b      	lsls	r3, r3, #8
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0201 	orr.w	r2, r2, #1
 8006e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e000      	b.n	8006e6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e6c:	2302      	movs	r3, #2
  }
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
	...

08006e7c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e84:	4b0b      	ldr	r3, [pc, #44]	; (8006eb4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e88:	4a0a      	ldr	r2, [pc, #40]	; (8006eb4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006e8a:	f043 0301 	orr.w	r3, r3, #1
 8006e8e:	6613      	str	r3, [r2, #96]	; 0x60
 8006e90:	4b08      	ldr	r3, [pc, #32]	; (8006eb4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	4905      	ldr	r1, [pc, #20]	; (8006eb8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	604b      	str	r3, [r1, #4]
}
 8006ea8:	bf00      	nop
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	40010000 	.word	0x40010000

08006ebc <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e0c3      	b.n	800705a <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b05      	cmp	r3, #5
 8006edc:	d101      	bne.n	8006ee2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e0bb      	b.n	800705a <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d101      	bne.n	8006ef2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e0b3      	b.n	800705a <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d103      	bne.n	8006f0e <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fc f82a 	bl	8002f68 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f22:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d11b      	bne.n	8006f64 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8006f36:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6891      	ldr	r1, [r2, #8]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	68d2      	ldr	r2, [r2, #12]
 8006f42:	4311      	orrs	r1, r2
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6992      	ldr	r2, [r2, #24]
 8006f48:	4311      	orrs	r1, r2
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6912      	ldr	r2, [r2, #16]
 8006f4e:	4311      	orrs	r1, r2
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6952      	ldr	r2, [r2, #20]
 8006f54:	4311      	orrs	r1, r2
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	69d2      	ldr	r2, [r2, #28]
 8006f5a:	4311      	orrs	r1, r2
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	6812      	ldr	r2, [r2, #0]
 8006f60:	430b      	orrs	r3, r1
 8006f62:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	2b0c      	cmp	r3, #12
 8006f6a:	d115      	bne.n	8006f98 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8006f76:	f023 030e 	bic.w	r3, r3, #14
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6891      	ldr	r1, [r2, #8]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	68d2      	ldr	r2, [r2, #12]
 8006f82:	4311      	orrs	r1, r2
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	6952      	ldr	r2, [r2, #20]
 8006f88:	4311      	orrs	r1, r2
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	69d2      	ldr	r2, [r2, #28]
 8006f8e:	4311      	orrs	r1, r2
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	430b      	orrs	r3, r1
 8006f96:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d118      	bne.n	8006fd2 <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8006faa:	f023 030e 	bic.w	r3, r3, #14
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6891      	ldr	r1, [r2, #8]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	68d2      	ldr	r2, [r2, #12]
 8006fb6:	4311      	orrs	r1, r2
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	6912      	ldr	r2, [r2, #16]
 8006fbc:	4311      	orrs	r1, r2
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	6952      	ldr	r2, [r2, #20]
 8006fc2:	4311      	orrs	r1, r2
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	69d2      	ldr	r2, [r2, #28]
 8006fc8:	4311      	orrs	r1, r2
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6812      	ldr	r2, [r2, #0]
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fda:	d12a      	bne.n	8007032 <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d013      	beq.n	800700c <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006ffc:	f023 031f 	bic.w	r3, r3, #31
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	6812      	ldr	r2, [r2, #0]
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	430b      	orrs	r3, r1
 8007008:	6053      	str	r3, [r2, #4]
 800700a:	e012      	b.n	8007032 <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007010:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8007016:	4313      	orrs	r3, r2
 8007018:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8007024:	f023 031f 	bic.w	r3, r3, #31
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	68b9      	ldr	r1, [r7, #8]
 800702e:	430b      	orrs	r3, r1
 8007030:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 8007032:	4b0c      	ldr	r3, [pc, #48]	; (8007064 <HAL_OPAMP_Init+0x1a8>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	4909      	ldr	r1, [pc, #36]	; (8007064 <HAL_OPAMP_Init+0x1a8>)
 8007040:	4313      	orrs	r3, r2
 8007042:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d103      	bne.n	8007058 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	40007800 	.word	0x40007800

08007068 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	73fb      	strb	r3, [r7, #15]
 800707e:	e01d      	b.n	80070bc <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b05      	cmp	r3, #5
 800708a:	d102      	bne.n	8007092 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	73fb      	strb	r3, [r7, #15]
 8007090:	e014      	b.n	80070bc <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b01      	cmp	r3, #1
 800709c:	d10c      	bne.n	80070b8 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f042 0201 	orr.w	r2, r2, #1
 80070ac:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2204      	movs	r2, #4
 80070b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80070b6:	e001      	b.n	80070bc <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status

  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b088      	sub	sp, #32
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	77fb      	strb	r3, [r7, #31]

  __IO uint32_t* tmp_opamp_reg_trimming;   /* Selection of register of trimming depending on power mode: OTR or LPOTR */

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d102      	bne.n	80070e2 <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	77fb      	strb	r3, [r7, #31]
 80070e0:	e10d      	b.n	80072fe <HAL_OPAMP_SelfCalibrate+0x234>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b05      	cmp	r3, #5
 80070ec:	d102      	bne.n	80070f4 <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	77fb      	strb	r3, [r7, #31]
 80070f2:	e104      	b.n	80072fe <HAL_OPAMP_SelfCalibrate+0x234>
  }
  else
  {
    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if(hopamp->State ==  HAL_OPAMP_STATE_READY)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	f040 80fc 	bne.w	80072fa <HAL_OPAMP_SelfCalibrate+0x230>
      assert_param(IS_OPAMP_POWERMODE(hopamp->Init.PowerMode));

      /* Save OPAMP mode as in                                       */
      /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx */
      /* the calibration is not working in PGA mode                  */
      opampmode = READ_BIT(hopamp->Instance->CSR,OPAMP_CSR_OPAMODE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 030c 	and.w	r3, r3, #12
 800710c:	60bb      	str	r3, [r7, #8]

      /* Use of standalone mode */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_OPAMODE, OPAMP_STANDALONE_MODE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 020c 	bic.w	r2, r2, #12
 800711c:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800712c:	601a      	str	r2, [r3, #0]

      /* Select trimming settings depending on power mode */
      if (hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d104      	bne.n	8007140 <HAL_OPAMP_SelfCalibrate+0x76>
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->OTR;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3304      	adds	r3, #4
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	e003      	b.n	8007148 <HAL_OPAMP_SelfCalibrate+0x7e>
      }
      else
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->LPOTR;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3308      	adds	r3, #8
 8007146:	60fb      	str	r3, [r7, #12]
      }

      /* Enable calibration */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007156:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALSEL);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007166:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16U;
 8007178:	2310      	movs	r3, #16
 800717a:	61bb      	str	r3, [r7, #24]
      delta = 8U;
 800717c:	2308      	movs	r3, #8
 800717e:	613b      	str	r3, [r7, #16]

      while (delta != 0U)
 8007180:	e01d      	b.n	80071be <HAL_OPAMP_SelfCalibrate+0xf4>
      {
        /* Set candidate trimming */
        /* OPAMP_POWERMODE_NORMALPOWER */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f023 021f 	bic.w	r2, r3, #31
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	431a      	orrs	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 8007192:	2001      	movs	r0, #1
 8007194:	f7fc fdb2 	bl	8003cfc <HAL_Delay>

        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d004      	beq.n	80071b0 <HAL_OPAMP_SelfCalibrate+0xe6>
        {
          /* OPAMP_CSR_CALOUT is HIGH try higher trimming */
          trimmingvaluen -= delta;
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	e003      	b.n	80071b8 <HAL_OPAMP_SelfCalibrate+0xee>
        }
        else
        {
          /* OPAMP_CSR_CALOUT is LOW try lower trimming */
          trimmingvaluen += delta;
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	4413      	add	r3, r2
 80071b6:	61bb      	str	r3, [r7, #24]
        }
        /* Divide range by 2 to continue dichotomy sweep */
        delta >>= 1U;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	085b      	lsrs	r3, r3, #1
 80071bc:	613b      	str	r3, [r7, #16]
      while (delta != 0U)
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1de      	bne.n	8007182 <HAL_OPAMP_SelfCalibrate+0xb8>
      }

      /* Still need to check if right calibration is current value or one step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 0 to 1  */
      /* Set candidate trimming */
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f023 021f 	bic.w	r2, r3, #31
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 80071d4:	2001      	movs	r0, #1
 80071d6:	f7fc fd91 	bl	8003cfc <HAL_Delay>

      if ((READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT)) == 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <HAL_OPAMP_SelfCalibrate+0x134>
      {
        /* Trimming value is actually one value more */
        trimmingvaluen++;
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	3301      	adds	r3, #1
 80071ec:	61bb      	str	r3, [r7, #24]
        /* Set right trimming */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f023 021f 	bic.w	r2, r3, #31
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	431a      	orrs	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALSEL);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800720c:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16U;
 800720e:	2310      	movs	r3, #16
 8007210:	617b      	str	r3, [r7, #20]
      delta = 8U;
 8007212:	2308      	movs	r3, #8
 8007214:	613b      	str	r3, [r7, #16]

      while (delta != 0U)
 8007216:	e01e      	b.n	8007256 <HAL_OPAMP_SelfCalibrate+0x18c>
      {
        /* Set candidate trimming */
        /* OPAMP_POWERMODE_NORMALPOWER */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	021b      	lsls	r3, r3, #8
 8007224:	431a      	orrs	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 800722a:	2001      	movs	r0, #1
 800722c:	f7fc fd66 	bl	8003cfc <HAL_Delay>

        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d004      	beq.n	8007248 <HAL_OPAMP_SelfCalibrate+0x17e>
        {
          /* OPAMP_CSR_CALOUT is HIGH try higher trimming */
          trimmingvaluep += delta;
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	4413      	add	r3, r2
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	e003      	b.n	8007250 <HAL_OPAMP_SelfCalibrate+0x186>
        }
        else
        {
          /* OPAMP_CSR_CALOUT  is LOW try lower trimming */
          trimmingvaluep -= delta;
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	617b      	str	r3, [r7, #20]
        }

        /* Divide range by 2 to continue dichotomy sweep */
        delta >>= 1U;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	085b      	lsrs	r3, r3, #1
 8007254:	613b      	str	r3, [r7, #16]
      while (delta != 0U)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1dd      	bne.n	8007218 <HAL_OPAMP_SelfCalibrate+0x14e>
      }

      /* Still need to check if right calibration is current value or one step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      /* Set candidate trimming */
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	021b      	lsls	r3, r3, #8
 8007268:	431a      	orrs	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 800726e:	2001      	movs	r0, #1
 8007270:	f7fc fd44 	bl	8003cfc <HAL_Delay>

      if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00b      	beq.n	800729a <HAL_OPAMP_SelfCalibrate+0x1d0>
      {
        /* Trimming value is actually one value more */
        trimmingvaluep++;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	3301      	adds	r3, #1
 8007286:	617b      	str	r3, [r7, #20]
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	021b      	lsls	r3, r3, #8
 8007294:	431a      	orrs	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	601a      	str	r2, [r3, #0]
      }

      /* Disable the OPAMP */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0201 	bic.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

      /* Disable calibration & set normal mode (operating mode) */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072b8:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user trimming) results in init structure. */

      /* Set user trimming mode */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80072c0:	61da      	str	r2, [r3, #28]

      /* Affect calibration parameters depending on mode normal/low power */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d006      	beq.n	80072d8 <HAL_OPAMP_SelfCalibrate+0x20e>
      {
        /* Write calibration result N */
        hopamp->Init.TrimmingValueN = trimmingvaluen;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	625a      	str	r2, [r3, #36]	; 0x24
        /* Write calibration result P */
        hopamp->Init.TrimmingValueP = trimmingvaluep;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	621a      	str	r2, [r3, #32]
 80072d6:	e005      	b.n	80072e4 <HAL_OPAMP_SelfCalibrate+0x21a>
      }
      else
      {
        /* Write calibration result N */
        hopamp->Init.TrimmingValueNLowPower = trimmingvaluen;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	62da      	str	r2, [r3, #44]	; 0x2c
        /* Write calibration result P */
        hopamp->Init.TrimmingValuePLowPower = trimmingvaluep;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	629a      	str	r2, [r3, #40]	; 0x28
      }

    /* Restore OPAMP mode after calibration */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_OPAMODE, opampmode);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f023 010c 	bic.w	r1, r3, #12
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	e001      	b.n	80072fe <HAL_OPAMP_SelfCalibrate+0x234>
    }
    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 80072fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3720      	adds	r7, #32
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800730c:	4b04      	ldr	r3, [pc, #16]	; (8007320 <HAL_PWREx_GetVoltageRange+0x18>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007314:	4618      	mov	r0, r3
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	40007000 	.word	0x40007000

08007324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007332:	d130      	bne.n	8007396 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007334:	4b23      	ldr	r3, [pc, #140]	; (80073c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800733c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007340:	d038      	beq.n	80073b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007342:	4b20      	ldr	r3, [pc, #128]	; (80073c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800734a:	4a1e      	ldr	r2, [pc, #120]	; (80073c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800734c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007350:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007352:	4b1d      	ldr	r3, [pc, #116]	; (80073c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2232      	movs	r2, #50	; 0x32
 8007358:	fb02 f303 	mul.w	r3, r2, r3
 800735c:	4a1b      	ldr	r2, [pc, #108]	; (80073cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800735e:	fba2 2303 	umull	r2, r3, r2, r3
 8007362:	0c9b      	lsrs	r3, r3, #18
 8007364:	3301      	adds	r3, #1
 8007366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007368:	e002      	b.n	8007370 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3b01      	subs	r3, #1
 800736e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007370:	4b14      	ldr	r3, [pc, #80]	; (80073c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800737c:	d102      	bne.n	8007384 <HAL_PWREx_ControlVoltageScaling+0x60>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1f2      	bne.n	800736a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007384:	4b0f      	ldr	r3, [pc, #60]	; (80073c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800738c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007390:	d110      	bne.n	80073b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e00f      	b.n	80073b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007396:	4b0b      	ldr	r3, [pc, #44]	; (80073c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800739e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073a2:	d007      	beq.n	80073b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80073a4:	4b07      	ldr	r3, [pc, #28]	; (80073c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80073ac:	4a05      	ldr	r2, [pc, #20]	; (80073c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80073ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80073b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	40007000 	.word	0x40007000
 80073c8:	20000030 	.word	0x20000030
 80073cc:	431bde83 	.word	0x431bde83

080073d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e3fe      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073e2:	4ba1      	ldr	r3, [pc, #644]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f003 030c 	and.w	r3, r3, #12
 80073ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073ec:	4b9e      	ldr	r3, [pc, #632]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f003 0303 	and.w	r3, r3, #3
 80073f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0310 	and.w	r3, r3, #16
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 80e4 	beq.w	80075cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d007      	beq.n	800741a <HAL_RCC_OscConfig+0x4a>
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	2b0c      	cmp	r3, #12
 800740e:	f040 808b 	bne.w	8007528 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2b01      	cmp	r3, #1
 8007416:	f040 8087 	bne.w	8007528 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800741a:	4b93      	ldr	r3, [pc, #588]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <HAL_RCC_OscConfig+0x62>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e3d6      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1a      	ldr	r2, [r3, #32]
 8007436:	4b8c      	ldr	r3, [pc, #560]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0308 	and.w	r3, r3, #8
 800743e:	2b00      	cmp	r3, #0
 8007440:	d004      	beq.n	800744c <HAL_RCC_OscConfig+0x7c>
 8007442:	4b89      	ldr	r3, [pc, #548]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800744a:	e005      	b.n	8007458 <HAL_RCC_OscConfig+0x88>
 800744c:	4b86      	ldr	r3, [pc, #536]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 800744e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007452:	091b      	lsrs	r3, r3, #4
 8007454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007458:	4293      	cmp	r3, r2
 800745a:	d223      	bcs.n	80074a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fd53 	bl	8007f0c <RCC_SetFlashLatencyFromMSIRange>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e3b7      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007470:	4b7d      	ldr	r3, [pc, #500]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a7c      	ldr	r2, [pc, #496]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007476:	f043 0308 	orr.w	r3, r3, #8
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	4b7a      	ldr	r3, [pc, #488]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	4977      	ldr	r1, [pc, #476]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 800748a:	4313      	orrs	r3, r2
 800748c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800748e:	4b76      	ldr	r3, [pc, #472]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	021b      	lsls	r3, r3, #8
 800749c:	4972      	ldr	r1, [pc, #456]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	604b      	str	r3, [r1, #4]
 80074a2:	e025      	b.n	80074f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80074a4:	4b70      	ldr	r3, [pc, #448]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a6f      	ldr	r2, [pc, #444]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 80074aa:	f043 0308 	orr.w	r3, r3, #8
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	4b6d      	ldr	r3, [pc, #436]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	496a      	ldr	r1, [pc, #424]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074c2:	4b69      	ldr	r3, [pc, #420]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	021b      	lsls	r3, r3, #8
 80074d0:	4965      	ldr	r1, [pc, #404]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d109      	bne.n	80074f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fd13 	bl	8007f0c <RCC_SetFlashLatencyFromMSIRange>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e377      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80074f0:	f000 fc80 	bl	8007df4 <HAL_RCC_GetSysClockFreq>
 80074f4:	4602      	mov	r2, r0
 80074f6:	4b5c      	ldr	r3, [pc, #368]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	091b      	lsrs	r3, r3, #4
 80074fc:	f003 030f 	and.w	r3, r3, #15
 8007500:	495a      	ldr	r1, [pc, #360]	; (800766c <HAL_RCC_OscConfig+0x29c>)
 8007502:	5ccb      	ldrb	r3, [r1, r3]
 8007504:	f003 031f 	and.w	r3, r3, #31
 8007508:	fa22 f303 	lsr.w	r3, r2, r3
 800750c:	4a58      	ldr	r2, [pc, #352]	; (8007670 <HAL_RCC_OscConfig+0x2a0>)
 800750e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007510:	4b58      	ldr	r3, [pc, #352]	; (8007674 <HAL_RCC_OscConfig+0x2a4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4618      	mov	r0, r3
 8007516:	f7fc fb95 	bl	8003c44 <HAL_InitTick>
 800751a:	4603      	mov	r3, r0
 800751c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d052      	beq.n	80075ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	e35b      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d032      	beq.n	8007596 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007530:	4b4d      	ldr	r3, [pc, #308]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a4c      	ldr	r2, [pc, #304]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007536:	f043 0301 	orr.w	r3, r3, #1
 800753a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800753c:	f7fc fbd2 	bl	8003ce4 <HAL_GetTick>
 8007540:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007542:	e008      	b.n	8007556 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007544:	f7fc fbce 	bl	8003ce4 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b02      	cmp	r3, #2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e344      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007556:	4b44      	ldr	r3, [pc, #272]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0f0      	beq.n	8007544 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007562:	4b41      	ldr	r3, [pc, #260]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a40      	ldr	r2, [pc, #256]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007568:	f043 0308 	orr.w	r3, r3, #8
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	4b3e      	ldr	r3, [pc, #248]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	493b      	ldr	r1, [pc, #236]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 800757c:	4313      	orrs	r3, r2
 800757e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007580:	4b39      	ldr	r3, [pc, #228]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	021b      	lsls	r3, r3, #8
 800758e:	4936      	ldr	r1, [pc, #216]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007590:	4313      	orrs	r3, r2
 8007592:	604b      	str	r3, [r1, #4]
 8007594:	e01a      	b.n	80075cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007596:	4b34      	ldr	r3, [pc, #208]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a33      	ldr	r2, [pc, #204]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 800759c:	f023 0301 	bic.w	r3, r3, #1
 80075a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80075a2:	f7fc fb9f 	bl	8003ce4 <HAL_GetTick>
 80075a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80075a8:	e008      	b.n	80075bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80075aa:	f7fc fb9b 	bl	8003ce4 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e311      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80075bc:	4b2a      	ldr	r3, [pc, #168]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f0      	bne.n	80075aa <HAL_RCC_OscConfig+0x1da>
 80075c8:	e000      	b.n	80075cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80075ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d074      	beq.n	80076c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	2b08      	cmp	r3, #8
 80075dc:	d005      	beq.n	80075ea <HAL_RCC_OscConfig+0x21a>
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	2b0c      	cmp	r3, #12
 80075e2:	d10e      	bne.n	8007602 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d10b      	bne.n	8007602 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075ea:	4b1f      	ldr	r3, [pc, #124]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d064      	beq.n	80076c0 <HAL_RCC_OscConfig+0x2f0>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d160      	bne.n	80076c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e2ee      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800760a:	d106      	bne.n	800761a <HAL_RCC_OscConfig+0x24a>
 800760c:	4b16      	ldr	r3, [pc, #88]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a15      	ldr	r2, [pc, #84]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	e01d      	b.n	8007656 <HAL_RCC_OscConfig+0x286>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007622:	d10c      	bne.n	800763e <HAL_RCC_OscConfig+0x26e>
 8007624:	4b10      	ldr	r3, [pc, #64]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a0f      	ldr	r2, [pc, #60]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 800762a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800762e:	6013      	str	r3, [r2, #0]
 8007630:	4b0d      	ldr	r3, [pc, #52]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a0c      	ldr	r2, [pc, #48]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	e00b      	b.n	8007656 <HAL_RCC_OscConfig+0x286>
 800763e:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a09      	ldr	r2, [pc, #36]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007648:	6013      	str	r3, [r2, #0]
 800764a:	4b07      	ldr	r3, [pc, #28]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a06      	ldr	r2, [pc, #24]	; (8007668 <HAL_RCC_OscConfig+0x298>)
 8007650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007654:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d01c      	beq.n	8007698 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800765e:	f7fc fb41 	bl	8003ce4 <HAL_GetTick>
 8007662:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007664:	e011      	b.n	800768a <HAL_RCC_OscConfig+0x2ba>
 8007666:	bf00      	nop
 8007668:	40021000 	.word	0x40021000
 800766c:	0800f034 	.word	0x0800f034
 8007670:	20000030 	.word	0x20000030
 8007674:	20000044 	.word	0x20000044
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007678:	f7fc fb34 	bl	8003ce4 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	2b64      	cmp	r3, #100	; 0x64
 8007684:	d901      	bls.n	800768a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e2aa      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800768a:	4baf      	ldr	r3, [pc, #700]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0f0      	beq.n	8007678 <HAL_RCC_OscConfig+0x2a8>
 8007696:	e014      	b.n	80076c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007698:	f7fc fb24 	bl	8003ce4 <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076a0:	f7fc fb20 	bl	8003ce4 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b64      	cmp	r3, #100	; 0x64
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e296      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80076b2:	4ba5      	ldr	r3, [pc, #660]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1f0      	bne.n	80076a0 <HAL_RCC_OscConfig+0x2d0>
 80076be:	e000      	b.n	80076c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0302 	and.w	r3, r3, #2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d060      	beq.n	8007790 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	2b04      	cmp	r3, #4
 80076d2:	d005      	beq.n	80076e0 <HAL_RCC_OscConfig+0x310>
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b0c      	cmp	r3, #12
 80076d8:	d119      	bne.n	800770e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d116      	bne.n	800770e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076e0:	4b99      	ldr	r3, [pc, #612]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <HAL_RCC_OscConfig+0x328>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e273      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076f8:	4b93      	ldr	r3, [pc, #588]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	061b      	lsls	r3, r3, #24
 8007706:	4990      	ldr	r1, [pc, #576]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 8007708:	4313      	orrs	r3, r2
 800770a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800770c:	e040      	b.n	8007790 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d023      	beq.n	800775e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007716:	4b8c      	ldr	r3, [pc, #560]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a8b      	ldr	r2, [pc, #556]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 800771c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007722:	f7fc fadf 	bl	8003ce4 <HAL_GetTick>
 8007726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007728:	e008      	b.n	800773c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800772a:	f7fc fadb 	bl	8003ce4 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	2b02      	cmp	r3, #2
 8007736:	d901      	bls.n	800773c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e251      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800773c:	4b82      	ldr	r3, [pc, #520]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007744:	2b00      	cmp	r3, #0
 8007746:	d0f0      	beq.n	800772a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007748:	4b7f      	ldr	r3, [pc, #508]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	061b      	lsls	r3, r3, #24
 8007756:	497c      	ldr	r1, [pc, #496]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 8007758:	4313      	orrs	r3, r2
 800775a:	604b      	str	r3, [r1, #4]
 800775c:	e018      	b.n	8007790 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800775e:	4b7a      	ldr	r3, [pc, #488]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a79      	ldr	r2, [pc, #484]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 8007764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800776a:	f7fc fabb 	bl	8003ce4 <HAL_GetTick>
 800776e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007770:	e008      	b.n	8007784 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007772:	f7fc fab7 	bl	8003ce4 <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b02      	cmp	r3, #2
 800777e:	d901      	bls.n	8007784 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e22d      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007784:	4b70      	ldr	r3, [pc, #448]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1f0      	bne.n	8007772 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0308 	and.w	r3, r3, #8
 8007798:	2b00      	cmp	r3, #0
 800779a:	d03c      	beq.n	8007816 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d01c      	beq.n	80077de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077a4:	4b68      	ldr	r3, [pc, #416]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80077a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077aa:	4a67      	ldr	r2, [pc, #412]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80077ac:	f043 0301 	orr.w	r3, r3, #1
 80077b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077b4:	f7fc fa96 	bl	8003ce4 <HAL_GetTick>
 80077b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077ba:	e008      	b.n	80077ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077bc:	f7fc fa92 	bl	8003ce4 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d901      	bls.n	80077ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e208      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077ce:	4b5e      	ldr	r3, [pc, #376]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80077d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0ef      	beq.n	80077bc <HAL_RCC_OscConfig+0x3ec>
 80077dc:	e01b      	b.n	8007816 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077de:	4b5a      	ldr	r3, [pc, #360]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80077e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077e4:	4a58      	ldr	r2, [pc, #352]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80077e6:	f023 0301 	bic.w	r3, r3, #1
 80077ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ee:	f7fc fa79 	bl	8003ce4 <HAL_GetTick>
 80077f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077f4:	e008      	b.n	8007808 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077f6:	f7fc fa75 	bl	8003ce4 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	2b02      	cmp	r3, #2
 8007802:	d901      	bls.n	8007808 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e1eb      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007808:	4b4f      	ldr	r3, [pc, #316]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 800780a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1ef      	bne.n	80077f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0304 	and.w	r3, r3, #4
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 80a6 	beq.w	8007970 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007824:	2300      	movs	r3, #0
 8007826:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007828:	4b47      	ldr	r3, [pc, #284]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 800782a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10d      	bne.n	8007850 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007834:	4b44      	ldr	r3, [pc, #272]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 8007836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007838:	4a43      	ldr	r2, [pc, #268]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 800783a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800783e:	6593      	str	r3, [r2, #88]	; 0x58
 8007840:	4b41      	ldr	r3, [pc, #260]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 8007842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007848:	60bb      	str	r3, [r7, #8]
 800784a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800784c:	2301      	movs	r3, #1
 800784e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007850:	4b3e      	ldr	r3, [pc, #248]	; (800794c <HAL_RCC_OscConfig+0x57c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007858:	2b00      	cmp	r3, #0
 800785a:	d118      	bne.n	800788e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800785c:	4b3b      	ldr	r3, [pc, #236]	; (800794c <HAL_RCC_OscConfig+0x57c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a3a      	ldr	r2, [pc, #232]	; (800794c <HAL_RCC_OscConfig+0x57c>)
 8007862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007866:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007868:	f7fc fa3c 	bl	8003ce4 <HAL_GetTick>
 800786c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800786e:	e008      	b.n	8007882 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007870:	f7fc fa38 	bl	8003ce4 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e1ae      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007882:	4b32      	ldr	r3, [pc, #200]	; (800794c <HAL_RCC_OscConfig+0x57c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0f0      	beq.n	8007870 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d108      	bne.n	80078a8 <HAL_RCC_OscConfig+0x4d8>
 8007896:	4b2c      	ldr	r3, [pc, #176]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 8007898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800789c:	4a2a      	ldr	r2, [pc, #168]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 800789e:	f043 0301 	orr.w	r3, r3, #1
 80078a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078a6:	e024      	b.n	80078f2 <HAL_RCC_OscConfig+0x522>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	2b05      	cmp	r3, #5
 80078ae:	d110      	bne.n	80078d2 <HAL_RCC_OscConfig+0x502>
 80078b0:	4b25      	ldr	r3, [pc, #148]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80078b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b6:	4a24      	ldr	r2, [pc, #144]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80078b8:	f043 0304 	orr.w	r3, r3, #4
 80078bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078c0:	4b21      	ldr	r3, [pc, #132]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80078c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c6:	4a20      	ldr	r2, [pc, #128]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80078c8:	f043 0301 	orr.w	r3, r3, #1
 80078cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078d0:	e00f      	b.n	80078f2 <HAL_RCC_OscConfig+0x522>
 80078d2:	4b1d      	ldr	r3, [pc, #116]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80078d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d8:	4a1b      	ldr	r2, [pc, #108]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80078da:	f023 0301 	bic.w	r3, r3, #1
 80078de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078e2:	4b19      	ldr	r3, [pc, #100]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80078e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078e8:	4a17      	ldr	r2, [pc, #92]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 80078ea:	f023 0304 	bic.w	r3, r3, #4
 80078ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d016      	beq.n	8007928 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078fa:	f7fc f9f3 	bl	8003ce4 <HAL_GetTick>
 80078fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007900:	e00a      	b.n	8007918 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007902:	f7fc f9ef 	bl	8003ce4 <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007910:	4293      	cmp	r3, r2
 8007912:	d901      	bls.n	8007918 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e163      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007918:	4b0b      	ldr	r3, [pc, #44]	; (8007948 <HAL_RCC_OscConfig+0x578>)
 800791a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0ed      	beq.n	8007902 <HAL_RCC_OscConfig+0x532>
 8007926:	e01a      	b.n	800795e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007928:	f7fc f9dc 	bl	8003ce4 <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800792e:	e00f      	b.n	8007950 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007930:	f7fc f9d8 	bl	8003ce4 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	f241 3288 	movw	r2, #5000	; 0x1388
 800793e:	4293      	cmp	r3, r2
 8007940:	d906      	bls.n	8007950 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e14c      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
 8007946:	bf00      	nop
 8007948:	40021000 	.word	0x40021000
 800794c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007950:	4ba5      	ldr	r3, [pc, #660]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1e8      	bne.n	8007930 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800795e:	7ffb      	ldrb	r3, [r7, #31]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d105      	bne.n	8007970 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007964:	4ba0      	ldr	r3, [pc, #640]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007968:	4a9f      	ldr	r2, [pc, #636]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 800796a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800796e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0320 	and.w	r3, r3, #32
 8007978:	2b00      	cmp	r3, #0
 800797a:	d03c      	beq.n	80079f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	2b00      	cmp	r3, #0
 8007982:	d01c      	beq.n	80079be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007984:	4b98      	ldr	r3, [pc, #608]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800798a:	4a97      	ldr	r2, [pc, #604]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 800798c:	f043 0301 	orr.w	r3, r3, #1
 8007990:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007994:	f7fc f9a6 	bl	8003ce4 <HAL_GetTick>
 8007998:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800799a:	e008      	b.n	80079ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800799c:	f7fc f9a2 	bl	8003ce4 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d901      	bls.n	80079ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e118      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80079ae:	4b8e      	ldr	r3, [pc, #568]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 80079b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0ef      	beq.n	800799c <HAL_RCC_OscConfig+0x5cc>
 80079bc:	e01b      	b.n	80079f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80079be:	4b8a      	ldr	r3, [pc, #552]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 80079c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079c4:	4a88      	ldr	r2, [pc, #544]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 80079c6:	f023 0301 	bic.w	r3, r3, #1
 80079ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ce:	f7fc f989 	bl	8003ce4 <HAL_GetTick>
 80079d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80079d4:	e008      	b.n	80079e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079d6:	f7fc f985 	bl	8003ce4 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d901      	bls.n	80079e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e0fb      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80079e8:	4b7f      	ldr	r3, [pc, #508]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 80079ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1ef      	bne.n	80079d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 80ef 	beq.w	8007bde <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	f040 80c5 	bne.w	8007b94 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007a0a:	4b77      	ldr	r3, [pc, #476]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f003 0203 	and.w	r2, r3, #3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d12c      	bne.n	8007a78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d123      	bne.n	8007a78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d11b      	bne.n	8007a78 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d113      	bne.n	8007a78 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5a:	085b      	lsrs	r3, r3, #1
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d109      	bne.n	8007a78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	085b      	lsrs	r3, r3, #1
 8007a70:	3b01      	subs	r3, #1
 8007a72:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d067      	beq.n	8007b48 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	2b0c      	cmp	r3, #12
 8007a7c:	d062      	beq.n	8007b44 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007a7e:	4b5a      	ldr	r3, [pc, #360]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e0a8      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007a8e:	4b56      	ldr	r3, [pc, #344]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a55      	ldr	r2, [pc, #340]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007a94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a98:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a9a:	f7fc f923 	bl	8003ce4 <HAL_GetTick>
 8007a9e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007aa0:	e008      	b.n	8007ab4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aa2:	f7fc f91f 	bl	8003ce4 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d901      	bls.n	8007ab4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e095      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ab4:	4b4c      	ldr	r3, [pc, #304]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1f0      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ac0:	4b49      	ldr	r3, [pc, #292]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	4b49      	ldr	r3, [pc, #292]	; (8007bec <HAL_RCC_OscConfig+0x81c>)
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007ad0:	3a01      	subs	r2, #1
 8007ad2:	0112      	lsls	r2, r2, #4
 8007ad4:	4311      	orrs	r1, r2
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ada:	0212      	lsls	r2, r2, #8
 8007adc:	4311      	orrs	r1, r2
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007ae2:	0852      	lsrs	r2, r2, #1
 8007ae4:	3a01      	subs	r2, #1
 8007ae6:	0552      	lsls	r2, r2, #21
 8007ae8:	4311      	orrs	r1, r2
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007aee:	0852      	lsrs	r2, r2, #1
 8007af0:	3a01      	subs	r2, #1
 8007af2:	0652      	lsls	r2, r2, #25
 8007af4:	4311      	orrs	r1, r2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007afa:	06d2      	lsls	r2, r2, #27
 8007afc:	430a      	orrs	r2, r1
 8007afe:	493a      	ldr	r1, [pc, #232]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007b04:	4b38      	ldr	r3, [pc, #224]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a37      	ldr	r2, [pc, #220]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b10:	4b35      	ldr	r3, [pc, #212]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	4a34      	ldr	r2, [pc, #208]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b1c:	f7fc f8e2 	bl	8003ce4 <HAL_GetTick>
 8007b20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b22:	e008      	b.n	8007b36 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b24:	f7fc f8de 	bl	8003ce4 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e054      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b36:	4b2c      	ldr	r3, [pc, #176]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0f0      	beq.n	8007b24 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b42:	e04c      	b.n	8007bde <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e04b      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b48:	4b27      	ldr	r3, [pc, #156]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d144      	bne.n	8007bde <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007b54:	4b24      	ldr	r3, [pc, #144]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a23      	ldr	r2, [pc, #140]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b60:	4b21      	ldr	r3, [pc, #132]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	4a20      	ldr	r2, [pc, #128]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007b6c:	f7fc f8ba 	bl	8003ce4 <HAL_GetTick>
 8007b70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b74:	f7fc f8b6 	bl	8003ce4 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e02c      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b86:	4b18      	ldr	r3, [pc, #96]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0f0      	beq.n	8007b74 <HAL_RCC_OscConfig+0x7a4>
 8007b92:	e024      	b.n	8007bde <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	2b0c      	cmp	r3, #12
 8007b98:	d01f      	beq.n	8007bda <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b9a:	4b13      	ldr	r3, [pc, #76]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a12      	ldr	r2, [pc, #72]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007ba0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba6:	f7fc f89d 	bl	8003ce4 <HAL_GetTick>
 8007baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bac:	e008      	b.n	8007bc0 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bae:	f7fc f899 	bl	8003ce4 <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d901      	bls.n	8007bc0 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e00f      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bc0:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1f0      	bne.n	8007bae <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007bcc:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007bce:	68da      	ldr	r2, [r3, #12]
 8007bd0:	4905      	ldr	r1, [pc, #20]	; (8007be8 <HAL_RCC_OscConfig+0x818>)
 8007bd2:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <HAL_RCC_OscConfig+0x820>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	60cb      	str	r3, [r1, #12]
 8007bd8:	e001      	b.n	8007bde <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e000      	b.n	8007be0 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3720      	adds	r7, #32
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	40021000 	.word	0x40021000
 8007bec:	019d808c 	.word	0x019d808c
 8007bf0:	feeefffc 	.word	0xfeeefffc

08007bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e0e7      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c08:	4b75      	ldr	r3, [pc, #468]	; (8007de0 <HAL_RCC_ClockConfig+0x1ec>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0307 	and.w	r3, r3, #7
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d910      	bls.n	8007c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c16:	4b72      	ldr	r3, [pc, #456]	; (8007de0 <HAL_RCC_ClockConfig+0x1ec>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f023 0207 	bic.w	r2, r3, #7
 8007c1e:	4970      	ldr	r1, [pc, #448]	; (8007de0 <HAL_RCC_ClockConfig+0x1ec>)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c26:	4b6e      	ldr	r3, [pc, #440]	; (8007de0 <HAL_RCC_ClockConfig+0x1ec>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d001      	beq.n	8007c38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e0cf      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0302 	and.w	r3, r3, #2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d010      	beq.n	8007c66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	4b66      	ldr	r3, [pc, #408]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d908      	bls.n	8007c66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c54:	4b63      	ldr	r3, [pc, #396]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	4960      	ldr	r1, [pc, #384]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d04c      	beq.n	8007d0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d107      	bne.n	8007c8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c7a:	4b5a      	ldr	r3, [pc, #360]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d121      	bne.n	8007cca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e0a6      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d107      	bne.n	8007ca2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c92:	4b54      	ldr	r3, [pc, #336]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d115      	bne.n	8007cca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e09a      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d107      	bne.n	8007cba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007caa:	4b4e      	ldr	r3, [pc, #312]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d109      	bne.n	8007cca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e08e      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007cba:	4b4a      	ldr	r3, [pc, #296]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e086      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007cca:	4b46      	ldr	r3, [pc, #280]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f023 0203 	bic.w	r2, r3, #3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	4943      	ldr	r1, [pc, #268]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cdc:	f7fc f802 	bl	8003ce4 <HAL_GetTick>
 8007ce0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ce2:	e00a      	b.n	8007cfa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ce4:	f7fb fffe 	bl	8003ce4 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d901      	bls.n	8007cfa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e06e      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cfa:	4b3a      	ldr	r3, [pc, #232]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f003 020c 	and.w	r2, r3, #12
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d1eb      	bne.n	8007ce4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d010      	beq.n	8007d3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	4b31      	ldr	r3, [pc, #196]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d208      	bcs.n	8007d3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d28:	4b2e      	ldr	r3, [pc, #184]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	492b      	ldr	r1, [pc, #172]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d3a:	4b29      	ldr	r3, [pc, #164]	; (8007de0 <HAL_RCC_ClockConfig+0x1ec>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d210      	bcs.n	8007d6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d48:	4b25      	ldr	r3, [pc, #148]	; (8007de0 <HAL_RCC_ClockConfig+0x1ec>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f023 0207 	bic.w	r2, r3, #7
 8007d50:	4923      	ldr	r1, [pc, #140]	; (8007de0 <HAL_RCC_ClockConfig+0x1ec>)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d58:	4b21      	ldr	r3, [pc, #132]	; (8007de0 <HAL_RCC_ClockConfig+0x1ec>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0307 	and.w	r3, r3, #7
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d001      	beq.n	8007d6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e036      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0304 	and.w	r3, r3, #4
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d008      	beq.n	8007d88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d76:	4b1b      	ldr	r3, [pc, #108]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	4918      	ldr	r1, [pc, #96]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d009      	beq.n	8007da8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d94:	4b13      	ldr	r3, [pc, #76]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	4910      	ldr	r1, [pc, #64]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007da8:	f000 f824 	bl	8007df4 <HAL_RCC_GetSysClockFreq>
 8007dac:	4602      	mov	r2, r0
 8007dae:	4b0d      	ldr	r3, [pc, #52]	; (8007de4 <HAL_RCC_ClockConfig+0x1f0>)
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	091b      	lsrs	r3, r3, #4
 8007db4:	f003 030f 	and.w	r3, r3, #15
 8007db8:	490b      	ldr	r1, [pc, #44]	; (8007de8 <HAL_RCC_ClockConfig+0x1f4>)
 8007dba:	5ccb      	ldrb	r3, [r1, r3]
 8007dbc:	f003 031f 	and.w	r3, r3, #31
 8007dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc4:	4a09      	ldr	r2, [pc, #36]	; (8007dec <HAL_RCC_ClockConfig+0x1f8>)
 8007dc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007dc8:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <HAL_RCC_ClockConfig+0x1fc>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fb ff39 	bl	8003c44 <HAL_InitTick>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8007dd6:	7afb      	ldrb	r3, [r7, #11]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	40022000 	.word	0x40022000
 8007de4:	40021000 	.word	0x40021000
 8007de8:	0800f034 	.word	0x0800f034
 8007dec:	20000030 	.word	0x20000030
 8007df0:	20000044 	.word	0x20000044

08007df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b089      	sub	sp, #36	; 0x24
 8007df8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	61fb      	str	r3, [r7, #28]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e02:	4b3e      	ldr	r3, [pc, #248]	; (8007efc <HAL_RCC_GetSysClockFreq+0x108>)
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f003 030c 	and.w	r3, r3, #12
 8007e0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e0c:	4b3b      	ldr	r3, [pc, #236]	; (8007efc <HAL_RCC_GetSysClockFreq+0x108>)
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f003 0303 	and.w	r3, r3, #3
 8007e14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d005      	beq.n	8007e28 <HAL_RCC_GetSysClockFreq+0x34>
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	2b0c      	cmp	r3, #12
 8007e20:	d121      	bne.n	8007e66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d11e      	bne.n	8007e66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007e28:	4b34      	ldr	r3, [pc, #208]	; (8007efc <HAL_RCC_GetSysClockFreq+0x108>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0308 	and.w	r3, r3, #8
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d107      	bne.n	8007e44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007e34:	4b31      	ldr	r3, [pc, #196]	; (8007efc <HAL_RCC_GetSysClockFreq+0x108>)
 8007e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e3a:	0a1b      	lsrs	r3, r3, #8
 8007e3c:	f003 030f 	and.w	r3, r3, #15
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	e005      	b.n	8007e50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007e44:	4b2d      	ldr	r3, [pc, #180]	; (8007efc <HAL_RCC_GetSysClockFreq+0x108>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	091b      	lsrs	r3, r3, #4
 8007e4a:	f003 030f 	and.w	r3, r3, #15
 8007e4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007e50:	4a2b      	ldr	r2, [pc, #172]	; (8007f00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10d      	bne.n	8007e7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e64:	e00a      	b.n	8007e7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	d102      	bne.n	8007e72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007e6c:	4b25      	ldr	r3, [pc, #148]	; (8007f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8007e6e:	61bb      	str	r3, [r7, #24]
 8007e70:	e004      	b.n	8007e7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	2b08      	cmp	r3, #8
 8007e76:	d101      	bne.n	8007e7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007e78:	4b23      	ldr	r3, [pc, #140]	; (8007f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8007e7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	2b0c      	cmp	r3, #12
 8007e80:	d134      	bne.n	8007eec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e82:	4b1e      	ldr	r3, [pc, #120]	; (8007efc <HAL_RCC_GetSysClockFreq+0x108>)
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d003      	beq.n	8007e9a <HAL_RCC_GetSysClockFreq+0xa6>
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	d003      	beq.n	8007ea0 <HAL_RCC_GetSysClockFreq+0xac>
 8007e98:	e005      	b.n	8007ea6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007e9a:	4b1a      	ldr	r3, [pc, #104]	; (8007f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8007e9c:	617b      	str	r3, [r7, #20]
      break;
 8007e9e:	e005      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007ea0:	4b19      	ldr	r3, [pc, #100]	; (8007f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8007ea2:	617b      	str	r3, [r7, #20]
      break;
 8007ea4:	e002      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	617b      	str	r3, [r7, #20]
      break;
 8007eaa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007eac:	4b13      	ldr	r3, [pc, #76]	; (8007efc <HAL_RCC_GetSysClockFreq+0x108>)
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	091b      	lsrs	r3, r3, #4
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007eba:	4b10      	ldr	r3, [pc, #64]	; (8007efc <HAL_RCC_GetSysClockFreq+0x108>)
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	0a1b      	lsrs	r3, r3, #8
 8007ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	fb02 f203 	mul.w	r2, r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ed2:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <HAL_RCC_GetSysClockFreq+0x108>)
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	0e5b      	lsrs	r3, r3, #25
 8007ed8:	f003 0303 	and.w	r3, r3, #3
 8007edc:	3301      	adds	r3, #1
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007eec:	69bb      	ldr	r3, [r7, #24]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3724      	adds	r7, #36	; 0x24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	40021000 	.word	0x40021000
 8007f00:	0800f044 	.word	0x0800f044
 8007f04:	00f42400 	.word	0x00f42400
 8007f08:	016e3600 	.word	0x016e3600

08007f0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007f14:	2300      	movs	r3, #0
 8007f16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007f18:	4b2a      	ldr	r3, [pc, #168]	; (8007fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007f24:	f7ff f9f0 	bl	8007308 <HAL_PWREx_GetVoltageRange>
 8007f28:	6178      	str	r0, [r7, #20]
 8007f2a:	e014      	b.n	8007f56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f2c:	4b25      	ldr	r3, [pc, #148]	; (8007fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f30:	4a24      	ldr	r2, [pc, #144]	; (8007fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f36:	6593      	str	r3, [r2, #88]	; 0x58
 8007f38:	4b22      	ldr	r3, [pc, #136]	; (8007fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f40:	60fb      	str	r3, [r7, #12]
 8007f42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007f44:	f7ff f9e0 	bl	8007308 <HAL_PWREx_GetVoltageRange>
 8007f48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007f4a:	4b1e      	ldr	r3, [pc, #120]	; (8007fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4e:	4a1d      	ldr	r2, [pc, #116]	; (8007fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f5c:	d10b      	bne.n	8007f76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b80      	cmp	r3, #128	; 0x80
 8007f62:	d919      	bls.n	8007f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2ba0      	cmp	r3, #160	; 0xa0
 8007f68:	d902      	bls.n	8007f70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	613b      	str	r3, [r7, #16]
 8007f6e:	e013      	b.n	8007f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007f70:	2301      	movs	r3, #1
 8007f72:	613b      	str	r3, [r7, #16]
 8007f74:	e010      	b.n	8007f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b80      	cmp	r3, #128	; 0x80
 8007f7a:	d902      	bls.n	8007f82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	613b      	str	r3, [r7, #16]
 8007f80:	e00a      	b.n	8007f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b80      	cmp	r3, #128	; 0x80
 8007f86:	d102      	bne.n	8007f8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007f88:	2302      	movs	r3, #2
 8007f8a:	613b      	str	r3, [r7, #16]
 8007f8c:	e004      	b.n	8007f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b70      	cmp	r3, #112	; 0x70
 8007f92:	d101      	bne.n	8007f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007f94:	2301      	movs	r3, #1
 8007f96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007f98:	4b0b      	ldr	r3, [pc, #44]	; (8007fc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f023 0207 	bic.w	r2, r3, #7
 8007fa0:	4909      	ldr	r1, [pc, #36]	; (8007fc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007fa8:	4b07      	ldr	r3, [pc, #28]	; (8007fc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d001      	beq.n	8007fba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e000      	b.n	8007fbc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	40021000 	.word	0x40021000
 8007fc8:	40022000 	.word	0x40022000

08007fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007fd8:	2300      	movs	r3, #0
 8007fda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d031      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ff0:	d01a      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007ff2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ff6:	d814      	bhi.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d009      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007ffc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008000:	d10f      	bne.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8008002:	4b5d      	ldr	r3, [pc, #372]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	4a5c      	ldr	r2, [pc, #368]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800800c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800800e:	e00c      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3304      	adds	r3, #4
 8008014:	2100      	movs	r1, #0
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f9f0 	bl	80083fc <RCCEx_PLLSAI1_Config>
 800801c:	4603      	mov	r3, r0
 800801e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008020:	e003      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	74fb      	strb	r3, [r7, #19]
      break;
 8008026:	e000      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800802a:	7cfb      	ldrb	r3, [r7, #19]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10b      	bne.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008030:	4b51      	ldr	r3, [pc, #324]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008036:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803e:	494e      	ldr	r1, [pc, #312]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008040:	4313      	orrs	r3, r2
 8008042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008046:	e001      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008048:	7cfb      	ldrb	r3, [r7, #19]
 800804a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 809e 	beq.w	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800805a:	2300      	movs	r3, #0
 800805c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800805e:	4b46      	ldr	r3, [pc, #280]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800806a:	2301      	movs	r3, #1
 800806c:	e000      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800806e:	2300      	movs	r3, #0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00d      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008074:	4b40      	ldr	r3, [pc, #256]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008078:	4a3f      	ldr	r2, [pc, #252]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800807a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800807e:	6593      	str	r3, [r2, #88]	; 0x58
 8008080:	4b3d      	ldr	r3, [pc, #244]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008088:	60bb      	str	r3, [r7, #8]
 800808a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800808c:	2301      	movs	r3, #1
 800808e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008090:	4b3a      	ldr	r3, [pc, #232]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a39      	ldr	r2, [pc, #228]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800809a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800809c:	f7fb fe22 	bl	8003ce4 <HAL_GetTick>
 80080a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80080a2:	e009      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080a4:	f7fb fe1e 	bl	8003ce4 <HAL_GetTick>
 80080a8:	4602      	mov	r2, r0
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d902      	bls.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	74fb      	strb	r3, [r7, #19]
        break;
 80080b6:	e005      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80080b8:	4b30      	ldr	r3, [pc, #192]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0ef      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80080c4:	7cfb      	ldrb	r3, [r7, #19]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d15a      	bne.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80080ca:	4b2b      	ldr	r3, [pc, #172]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80080cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01e      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d019      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80080e6:	4b24      	ldr	r3, [pc, #144]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80080e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080f2:	4b21      	ldr	r3, [pc, #132]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80080f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f8:	4a1f      	ldr	r2, [pc, #124]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80080fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008102:	4b1d      	ldr	r3, [pc, #116]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008108:	4a1b      	ldr	r2, [pc, #108]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800810a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800810e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008112:	4a19      	ldr	r2, [pc, #100]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b00      	cmp	r3, #0
 8008122:	d016      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008124:	f7fb fdde 	bl	8003ce4 <HAL_GetTick>
 8008128:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800812a:	e00b      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800812c:	f7fb fdda 	bl	8003ce4 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	f241 3288 	movw	r2, #5000	; 0x1388
 800813a:	4293      	cmp	r3, r2
 800813c:	d902      	bls.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	74fb      	strb	r3, [r7, #19]
            break;
 8008142:	e006      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008144:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b00      	cmp	r3, #0
 8008150:	d0ec      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008152:	7cfb      	ldrb	r3, [r7, #19]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10b      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008158:	4b07      	ldr	r3, [pc, #28]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800815a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800815e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008166:	4904      	ldr	r1, [pc, #16]	; (8008178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008168:	4313      	orrs	r3, r2
 800816a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800816e:	e009      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008170:	7cfb      	ldrb	r3, [r7, #19]
 8008172:	74bb      	strb	r3, [r7, #18]
 8008174:	e006      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008176:	bf00      	nop
 8008178:	40021000 	.word	0x40021000
 800817c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008180:	7cfb      	ldrb	r3, [r7, #19]
 8008182:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008184:	7c7b      	ldrb	r3, [r7, #17]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d105      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800818a:	4b9b      	ldr	r3, [pc, #620]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800818c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800818e:	4a9a      	ldr	r2, [pc, #616]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008194:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00a      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081a2:	4b95      	ldr	r3, [pc, #596]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80081a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a8:	f023 0203 	bic.w	r2, r3, #3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	4991      	ldr	r1, [pc, #580]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00a      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081c4:	4b8c      	ldr	r3, [pc, #560]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80081c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ca:	f023 020c 	bic.w	r2, r3, #12
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	4989      	ldr	r1, [pc, #548]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80081d4:	4313      	orrs	r3, r2
 80081d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0304 	and.w	r3, r3, #4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00a      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081e6:	4b84      	ldr	r3, [pc, #528]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80081e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f4:	4980      	ldr	r1, [pc, #512]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80081f6:	4313      	orrs	r3, r2
 80081f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0320 	and.w	r3, r3, #32
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00a      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008208:	4b7b      	ldr	r3, [pc, #492]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800820a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800820e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	4978      	ldr	r1, [pc, #480]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008218:	4313      	orrs	r3, r2
 800821a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00a      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800822a:	4b73      	ldr	r3, [pc, #460]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800822c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008230:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008238:	496f      	ldr	r1, [pc, #444]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800823a:	4313      	orrs	r3, r2
 800823c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00a      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800824c:	4b6a      	ldr	r3, [pc, #424]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800824e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008252:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	4967      	ldr	r1, [pc, #412]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800825c:	4313      	orrs	r3, r2
 800825e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00a      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800826e:	4b62      	ldr	r3, [pc, #392]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008274:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827c:	495e      	ldr	r1, [pc, #376]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800827e:	4313      	orrs	r3, r2
 8008280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00a      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008290:	4b59      	ldr	r3, [pc, #356]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008296:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800829e:	4956      	ldr	r1, [pc, #344]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00a      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80082b2:	4b51      	ldr	r3, [pc, #324]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80082b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c0:	494d      	ldr	r1, [pc, #308]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d028      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80082d4:	4b48      	ldr	r3, [pc, #288]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80082d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082e2:	4945      	ldr	r1, [pc, #276]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082f2:	d106      	bne.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082f4:	4b40      	ldr	r3, [pc, #256]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	4a3f      	ldr	r2, [pc, #252]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80082fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082fe:	60d3      	str	r3, [r2, #12]
 8008300:	e011      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008306:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800830a:	d10c      	bne.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3304      	adds	r3, #4
 8008310:	2101      	movs	r1, #1
 8008312:	4618      	mov	r0, r3
 8008314:	f000 f872 	bl	80083fc <RCCEx_PLLSAI1_Config>
 8008318:	4603      	mov	r3, r0
 800831a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800831c:	7cfb      	ldrb	r3, [r7, #19]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8008322:	7cfb      	ldrb	r3, [r7, #19]
 8008324:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d028      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008332:	4b31      	ldr	r3, [pc, #196]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008338:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008340:	492d      	ldr	r1, [pc, #180]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008342:	4313      	orrs	r3, r2
 8008344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800834c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008350:	d106      	bne.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008352:	4b29      	ldr	r3, [pc, #164]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	4a28      	ldr	r2, [pc, #160]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800835c:	60d3      	str	r3, [r2, #12]
 800835e:	e011      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008364:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008368:	d10c      	bne.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	3304      	adds	r3, #4
 800836e:	2101      	movs	r1, #1
 8008370:	4618      	mov	r0, r3
 8008372:	f000 f843 	bl	80083fc <RCCEx_PLLSAI1_Config>
 8008376:	4603      	mov	r3, r0
 8008378:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800837a:	7cfb      	ldrb	r3, [r7, #19]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8008380:	7cfb      	ldrb	r3, [r7, #19]
 8008382:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d01c      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008390:	4b19      	ldr	r3, [pc, #100]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008396:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800839e:	4916      	ldr	r1, [pc, #88]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083ae:	d10c      	bne.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3304      	adds	r3, #4
 80083b4:	2102      	movs	r1, #2
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 f820 	bl	80083fc <RCCEx_PLLSAI1_Config>
 80083bc:	4603      	mov	r3, r0
 80083be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80083c0:	7cfb      	ldrb	r3, [r7, #19]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80083c6:	7cfb      	ldrb	r3, [r7, #19]
 80083c8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00a      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80083d6:	4b08      	ldr	r3, [pc, #32]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80083d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083dc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e4:	4904      	ldr	r1, [pc, #16]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80083ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	40021000 	.word	0x40021000

080083fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800840a:	4b74      	ldr	r3, [pc, #464]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f003 0303 	and.w	r3, r3, #3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d018      	beq.n	8008448 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008416:	4b71      	ldr	r3, [pc, #452]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f003 0203 	and.w	r2, r3, #3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	429a      	cmp	r2, r3
 8008424:	d10d      	bne.n	8008442 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
       ||
 800842a:	2b00      	cmp	r3, #0
 800842c:	d009      	beq.n	8008442 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800842e:	4b6b      	ldr	r3, [pc, #428]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	091b      	lsrs	r3, r3, #4
 8008434:	f003 0307 	and.w	r3, r3, #7
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
       ||
 800843e:	429a      	cmp	r2, r3
 8008440:	d047      	beq.n	80084d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	73fb      	strb	r3, [r7, #15]
 8008446:	e044      	b.n	80084d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b03      	cmp	r3, #3
 800844e:	d018      	beq.n	8008482 <RCCEx_PLLSAI1_Config+0x86>
 8008450:	2b03      	cmp	r3, #3
 8008452:	d825      	bhi.n	80084a0 <RCCEx_PLLSAI1_Config+0xa4>
 8008454:	2b01      	cmp	r3, #1
 8008456:	d002      	beq.n	800845e <RCCEx_PLLSAI1_Config+0x62>
 8008458:	2b02      	cmp	r3, #2
 800845a:	d009      	beq.n	8008470 <RCCEx_PLLSAI1_Config+0x74>
 800845c:	e020      	b.n	80084a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800845e:	4b5f      	ldr	r3, [pc, #380]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d11d      	bne.n	80084a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800846e:	e01a      	b.n	80084a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008470:	4b5a      	ldr	r3, [pc, #360]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008478:	2b00      	cmp	r3, #0
 800847a:	d116      	bne.n	80084aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008480:	e013      	b.n	80084aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008482:	4b56      	ldr	r3, [pc, #344]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10f      	bne.n	80084ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800848e:	4b53      	ldr	r3, [pc, #332]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d109      	bne.n	80084ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800849e:	e006      	b.n	80084ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	73fb      	strb	r3, [r7, #15]
      break;
 80084a4:	e004      	b.n	80084b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80084a6:	bf00      	nop
 80084a8:	e002      	b.n	80084b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80084aa:	bf00      	nop
 80084ac:	e000      	b.n	80084b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80084ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10d      	bne.n	80084d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80084b6:	4b49      	ldr	r3, [pc, #292]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6819      	ldr	r1, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	3b01      	subs	r3, #1
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	430b      	orrs	r3, r1
 80084cc:	4943      	ldr	r1, [pc, #268]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d17c      	bne.n	80085d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80084d8:	4b40      	ldr	r3, [pc, #256]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a3f      	ldr	r2, [pc, #252]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80084de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084e4:	f7fb fbfe 	bl	8003ce4 <HAL_GetTick>
 80084e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80084ea:	e009      	b.n	8008500 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80084ec:	f7fb fbfa 	bl	8003ce4 <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d902      	bls.n	8008500 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	73fb      	strb	r3, [r7, #15]
        break;
 80084fe:	e005      	b.n	800850c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008500:	4b36      	ldr	r3, [pc, #216]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1ef      	bne.n	80084ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d15f      	bne.n	80085d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d110      	bne.n	800853a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008518:	4b30      	ldr	r3, [pc, #192]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008520:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	6892      	ldr	r2, [r2, #8]
 8008528:	0211      	lsls	r1, r2, #8
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	68d2      	ldr	r2, [r2, #12]
 800852e:	06d2      	lsls	r2, r2, #27
 8008530:	430a      	orrs	r2, r1
 8008532:	492a      	ldr	r1, [pc, #168]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008534:	4313      	orrs	r3, r2
 8008536:	610b      	str	r3, [r1, #16]
 8008538:	e027      	b.n	800858a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d112      	bne.n	8008566 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008540:	4b26      	ldr	r3, [pc, #152]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008548:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	6892      	ldr	r2, [r2, #8]
 8008550:	0211      	lsls	r1, r2, #8
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	6912      	ldr	r2, [r2, #16]
 8008556:	0852      	lsrs	r2, r2, #1
 8008558:	3a01      	subs	r2, #1
 800855a:	0552      	lsls	r2, r2, #21
 800855c:	430a      	orrs	r2, r1
 800855e:	491f      	ldr	r1, [pc, #124]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008560:	4313      	orrs	r3, r2
 8008562:	610b      	str	r3, [r1, #16]
 8008564:	e011      	b.n	800858a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008566:	4b1d      	ldr	r3, [pc, #116]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800856e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	6892      	ldr	r2, [r2, #8]
 8008576:	0211      	lsls	r1, r2, #8
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	6952      	ldr	r2, [r2, #20]
 800857c:	0852      	lsrs	r2, r2, #1
 800857e:	3a01      	subs	r2, #1
 8008580:	0652      	lsls	r2, r2, #25
 8008582:	430a      	orrs	r2, r1
 8008584:	4915      	ldr	r1, [pc, #84]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008586:	4313      	orrs	r3, r2
 8008588:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800858a:	4b14      	ldr	r3, [pc, #80]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a13      	ldr	r2, [pc, #76]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008590:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008594:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008596:	f7fb fba5 	bl	8003ce4 <HAL_GetTick>
 800859a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800859c:	e009      	b.n	80085b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800859e:	f7fb fba1 	bl	8003ce4 <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d902      	bls.n	80085b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	73fb      	strb	r3, [r7, #15]
          break;
 80085b0:	e005      	b.n	80085be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80085b2:	4b0a      	ldr	r3, [pc, #40]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d0ef      	beq.n	800859e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d106      	bne.n	80085d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80085c4:	4b05      	ldr	r3, [pc, #20]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80085c6:	691a      	ldr	r2, [r3, #16]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	4903      	ldr	r1, [pc, #12]	; (80085dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	40021000 	.word	0x40021000

080085e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e049      	b.n	8008686 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d106      	bne.n	800860c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7fa fd12 	bl	8003030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3304      	adds	r3, #4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f000 fe68 	bl	80092f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
	...

08008690 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d001      	beq.n	80086a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e033      	b.n	8008710 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2202      	movs	r2, #2
 80086ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a19      	ldr	r2, [pc, #100]	; (800871c <HAL_TIM_Base_Start+0x8c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d009      	beq.n	80086ce <HAL_TIM_Base_Start+0x3e>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086c2:	d004      	beq.n	80086ce <HAL_TIM_Base_Start+0x3e>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a15      	ldr	r2, [pc, #84]	; (8008720 <HAL_TIM_Base_Start+0x90>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d115      	bne.n	80086fa <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689a      	ldr	r2, [r3, #8]
 80086d4:	4b13      	ldr	r3, [pc, #76]	; (8008724 <HAL_TIM_Base_Start+0x94>)
 80086d6:	4013      	ands	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b06      	cmp	r3, #6
 80086de:	d015      	beq.n	800870c <HAL_TIM_Base_Start+0x7c>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e6:	d011      	beq.n	800870c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f042 0201 	orr.w	r2, r2, #1
 80086f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f8:	e008      	b.n	800870c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f042 0201 	orr.w	r2, r2, #1
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	e000      	b.n	800870e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800870c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	40012c00 	.word	0x40012c00
 8008720:	40014000 	.word	0x40014000
 8008724:	00010007 	.word	0x00010007

08008728 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6a1a      	ldr	r2, [r3, #32]
 8008736:	f241 1311 	movw	r3, #4369	; 0x1111
 800873a:	4013      	ands	r3, r2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10f      	bne.n	8008760 <HAL_TIM_Base_Stop+0x38>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6a1a      	ldr	r2, [r3, #32]
 8008746:	f240 4344 	movw	r3, #1092	; 0x444
 800874a:	4013      	ands	r3, r2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d107      	bne.n	8008760 <HAL_TIM_Base_Stop+0x38>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0201 	bic.w	r2, r2, #1
 800875e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
	...

08008778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b01      	cmp	r3, #1
 800878a:	d001      	beq.n	8008790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	e03b      	b.n	8008808 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68da      	ldr	r2, [r3, #12]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0201 	orr.w	r2, r2, #1
 80087a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a19      	ldr	r2, [pc, #100]	; (8008814 <HAL_TIM_Base_Start_IT+0x9c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d009      	beq.n	80087c6 <HAL_TIM_Base_Start_IT+0x4e>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ba:	d004      	beq.n	80087c6 <HAL_TIM_Base_Start_IT+0x4e>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a15      	ldr	r2, [pc, #84]	; (8008818 <HAL_TIM_Base_Start_IT+0xa0>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d115      	bne.n	80087f2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	4b13      	ldr	r3, [pc, #76]	; (800881c <HAL_TIM_Base_Start_IT+0xa4>)
 80087ce:	4013      	ands	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b06      	cmp	r3, #6
 80087d6:	d015      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x8c>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087de:	d011      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0201 	orr.w	r2, r2, #1
 80087ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f0:	e008      	b.n	8008804 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f042 0201 	orr.w	r2, r2, #1
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	e000      	b.n	8008806 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008804:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	40012c00 	.word	0x40012c00
 8008818:	40014000 	.word	0x40014000
 800881c:	00010007 	.word	0x00010007

08008820 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68da      	ldr	r2, [r3, #12]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 0201 	bic.w	r2, r2, #1
 8008836:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6a1a      	ldr	r2, [r3, #32]
 800883e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008842:	4013      	ands	r3, r2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10f      	bne.n	8008868 <HAL_TIM_Base_Stop_IT+0x48>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6a1a      	ldr	r2, [r3, #32]
 800884e:	f240 4344 	movw	r3, #1092	; 0x444
 8008852:	4013      	ands	r3, r2
 8008854:	2b00      	cmp	r3, #0
 8008856:	d107      	bne.n	8008868 <HAL_TIM_Base_Stop_IT+0x48>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 0201 	bic.w	r2, r2, #1
 8008866:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
	...

08008880 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d109      	bne.n	80088a4 <HAL_TIM_OC_Start+0x24>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b01      	cmp	r3, #1
 800889a:	bf14      	ite	ne
 800889c:	2301      	movne	r3, #1
 800889e:	2300      	moveq	r3, #0
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	e03c      	b.n	800891e <HAL_TIM_OC_Start+0x9e>
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	2b04      	cmp	r3, #4
 80088a8:	d109      	bne.n	80088be <HAL_TIM_OC_Start+0x3e>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	bf14      	ite	ne
 80088b6:	2301      	movne	r3, #1
 80088b8:	2300      	moveq	r3, #0
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	e02f      	b.n	800891e <HAL_TIM_OC_Start+0x9e>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d109      	bne.n	80088d8 <HAL_TIM_OC_Start+0x58>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	bf14      	ite	ne
 80088d0:	2301      	movne	r3, #1
 80088d2:	2300      	moveq	r3, #0
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	e022      	b.n	800891e <HAL_TIM_OC_Start+0x9e>
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	2b0c      	cmp	r3, #12
 80088dc:	d109      	bne.n	80088f2 <HAL_TIM_OC_Start+0x72>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	bf14      	ite	ne
 80088ea:	2301      	movne	r3, #1
 80088ec:	2300      	moveq	r3, #0
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	e015      	b.n	800891e <HAL_TIM_OC_Start+0x9e>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b10      	cmp	r3, #16
 80088f6:	d109      	bne.n	800890c <HAL_TIM_OC_Start+0x8c>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b01      	cmp	r3, #1
 8008902:	bf14      	ite	ne
 8008904:	2301      	movne	r3, #1
 8008906:	2300      	moveq	r3, #0
 8008908:	b2db      	uxtb	r3, r3
 800890a:	e008      	b.n	800891e <HAL_TIM_OC_Start+0x9e>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b01      	cmp	r3, #1
 8008916:	bf14      	ite	ne
 8008918:	2301      	movne	r3, #1
 800891a:	2300      	moveq	r3, #0
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e07e      	b.n	8008a24 <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d104      	bne.n	8008936 <HAL_TIM_OC_Start+0xb6>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2202      	movs	r2, #2
 8008930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008934:	e023      	b.n	800897e <HAL_TIM_OC_Start+0xfe>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2b04      	cmp	r3, #4
 800893a:	d104      	bne.n	8008946 <HAL_TIM_OC_Start+0xc6>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008944:	e01b      	b.n	800897e <HAL_TIM_OC_Start+0xfe>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b08      	cmp	r3, #8
 800894a:	d104      	bne.n	8008956 <HAL_TIM_OC_Start+0xd6>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2202      	movs	r2, #2
 8008950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008954:	e013      	b.n	800897e <HAL_TIM_OC_Start+0xfe>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b0c      	cmp	r3, #12
 800895a:	d104      	bne.n	8008966 <HAL_TIM_OC_Start+0xe6>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2202      	movs	r2, #2
 8008960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008964:	e00b      	b.n	800897e <HAL_TIM_OC_Start+0xfe>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b10      	cmp	r3, #16
 800896a:	d104      	bne.n	8008976 <HAL_TIM_OC_Start+0xf6>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008974:	e003      	b.n	800897e <HAL_TIM_OC_Start+0xfe>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2202      	movs	r2, #2
 800897a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2201      	movs	r2, #1
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	4618      	mov	r0, r3
 8008988:	f001 f830 	bl	80099ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a26      	ldr	r2, [pc, #152]	; (8008a2c <HAL_TIM_OC_Start+0x1ac>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d009      	beq.n	80089aa <HAL_TIM_OC_Start+0x12a>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a25      	ldr	r2, [pc, #148]	; (8008a30 <HAL_TIM_OC_Start+0x1b0>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d004      	beq.n	80089aa <HAL_TIM_OC_Start+0x12a>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a23      	ldr	r2, [pc, #140]	; (8008a34 <HAL_TIM_OC_Start+0x1b4>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d101      	bne.n	80089ae <HAL_TIM_OC_Start+0x12e>
 80089aa:	2301      	movs	r3, #1
 80089ac:	e000      	b.n	80089b0 <HAL_TIM_OC_Start+0x130>
 80089ae:	2300      	movs	r3, #0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d007      	beq.n	80089c4 <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a18      	ldr	r2, [pc, #96]	; (8008a2c <HAL_TIM_OC_Start+0x1ac>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d009      	beq.n	80089e2 <HAL_TIM_OC_Start+0x162>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d6:	d004      	beq.n	80089e2 <HAL_TIM_OC_Start+0x162>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a14      	ldr	r2, [pc, #80]	; (8008a30 <HAL_TIM_OC_Start+0x1b0>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d115      	bne.n	8008a0e <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	4b13      	ldr	r3, [pc, #76]	; (8008a38 <HAL_TIM_OC_Start+0x1b8>)
 80089ea:	4013      	ands	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b06      	cmp	r3, #6
 80089f2:	d015      	beq.n	8008a20 <HAL_TIM_OC_Start+0x1a0>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089fa:	d011      	beq.n	8008a20 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f042 0201 	orr.w	r2, r2, #1
 8008a0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a0c:	e008      	b.n	8008a20 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f042 0201 	orr.w	r2, r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	e000      	b.n	8008a22 <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	40012c00 	.word	0x40012c00
 8008a30:	40014000 	.word	0x40014000
 8008a34:	40014400 	.word	0x40014400
 8008a38:	00010007 	.word	0x00010007

08008a3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e049      	b.n	8008ae2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d106      	bne.n	8008a68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7fa fabe 	bl	8002fe4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	3304      	adds	r3, #4
 8008a78:	4619      	mov	r1, r3
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	f000 fc3a 	bl	80092f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d109      	bne.n	8008b10 <HAL_TIM_PWM_Start+0x24>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	bf14      	ite	ne
 8008b08:	2301      	movne	r3, #1
 8008b0a:	2300      	moveq	r3, #0
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	e03c      	b.n	8008b8a <HAL_TIM_PWM_Start+0x9e>
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d109      	bne.n	8008b2a <HAL_TIM_PWM_Start+0x3e>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	bf14      	ite	ne
 8008b22:	2301      	movne	r3, #1
 8008b24:	2300      	moveq	r3, #0
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	e02f      	b.n	8008b8a <HAL_TIM_PWM_Start+0x9e>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	d109      	bne.n	8008b44 <HAL_TIM_PWM_Start+0x58>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	bf14      	ite	ne
 8008b3c:	2301      	movne	r3, #1
 8008b3e:	2300      	moveq	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	e022      	b.n	8008b8a <HAL_TIM_PWM_Start+0x9e>
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	2b0c      	cmp	r3, #12
 8008b48:	d109      	bne.n	8008b5e <HAL_TIM_PWM_Start+0x72>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	bf14      	ite	ne
 8008b56:	2301      	movne	r3, #1
 8008b58:	2300      	moveq	r3, #0
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	e015      	b.n	8008b8a <HAL_TIM_PWM_Start+0x9e>
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b10      	cmp	r3, #16
 8008b62:	d109      	bne.n	8008b78 <HAL_TIM_PWM_Start+0x8c>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	bf14      	ite	ne
 8008b70:	2301      	movne	r3, #1
 8008b72:	2300      	moveq	r3, #0
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	e008      	b.n	8008b8a <HAL_TIM_PWM_Start+0x9e>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	bf14      	ite	ne
 8008b84:	2301      	movne	r3, #1
 8008b86:	2300      	moveq	r3, #0
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e07e      	b.n	8008c90 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d104      	bne.n	8008ba2 <HAL_TIM_PWM_Start+0xb6>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ba0:	e023      	b.n	8008bea <HAL_TIM_PWM_Start+0xfe>
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b04      	cmp	r3, #4
 8008ba6:	d104      	bne.n	8008bb2 <HAL_TIM_PWM_Start+0xc6>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2202      	movs	r2, #2
 8008bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bb0:	e01b      	b.n	8008bea <HAL_TIM_PWM_Start+0xfe>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d104      	bne.n	8008bc2 <HAL_TIM_PWM_Start+0xd6>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bc0:	e013      	b.n	8008bea <HAL_TIM_PWM_Start+0xfe>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b0c      	cmp	r3, #12
 8008bc6:	d104      	bne.n	8008bd2 <HAL_TIM_PWM_Start+0xe6>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bd0:	e00b      	b.n	8008bea <HAL_TIM_PWM_Start+0xfe>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b10      	cmp	r3, #16
 8008bd6:	d104      	bne.n	8008be2 <HAL_TIM_PWM_Start+0xf6>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008be0:	e003      	b.n	8008bea <HAL_TIM_PWM_Start+0xfe>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2202      	movs	r2, #2
 8008be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fefa 	bl	80099ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a26      	ldr	r2, [pc, #152]	; (8008c98 <HAL_TIM_PWM_Start+0x1ac>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d009      	beq.n	8008c16 <HAL_TIM_PWM_Start+0x12a>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a25      	ldr	r2, [pc, #148]	; (8008c9c <HAL_TIM_PWM_Start+0x1b0>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d004      	beq.n	8008c16 <HAL_TIM_PWM_Start+0x12a>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a23      	ldr	r2, [pc, #140]	; (8008ca0 <HAL_TIM_PWM_Start+0x1b4>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d101      	bne.n	8008c1a <HAL_TIM_PWM_Start+0x12e>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e000      	b.n	8008c1c <HAL_TIM_PWM_Start+0x130>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d007      	beq.n	8008c30 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a18      	ldr	r2, [pc, #96]	; (8008c98 <HAL_TIM_PWM_Start+0x1ac>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d009      	beq.n	8008c4e <HAL_TIM_PWM_Start+0x162>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c42:	d004      	beq.n	8008c4e <HAL_TIM_PWM_Start+0x162>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a14      	ldr	r2, [pc, #80]	; (8008c9c <HAL_TIM_PWM_Start+0x1b0>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d115      	bne.n	8008c7a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	689a      	ldr	r2, [r3, #8]
 8008c54:	4b13      	ldr	r3, [pc, #76]	; (8008ca4 <HAL_TIM_PWM_Start+0x1b8>)
 8008c56:	4013      	ands	r3, r2
 8008c58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b06      	cmp	r3, #6
 8008c5e:	d015      	beq.n	8008c8c <HAL_TIM_PWM_Start+0x1a0>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c66:	d011      	beq.n	8008c8c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f042 0201 	orr.w	r2, r2, #1
 8008c76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c78:	e008      	b.n	8008c8c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f042 0201 	orr.w	r2, r2, #1
 8008c88:	601a      	str	r2, [r3, #0]
 8008c8a:	e000      	b.n	8008c8e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	40012c00 	.word	0x40012c00
 8008c9c:	40014000 	.word	0x40014000
 8008ca0:	40014400 	.word	0x40014400
 8008ca4:	00010007 	.word	0x00010007

08008ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d122      	bne.n	8008d04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	f003 0302 	and.w	r3, r3, #2
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d11b      	bne.n	8008d04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f06f 0202 	mvn.w	r2, #2
 8008cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	f003 0303 	and.w	r3, r3, #3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fae3 	bl	80092b6 <HAL_TIM_IC_CaptureCallback>
 8008cf0:	e005      	b.n	8008cfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fad5 	bl	80092a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fae6 	bl	80092ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	f003 0304 	and.w	r3, r3, #4
 8008d0e:	2b04      	cmp	r3, #4
 8008d10:	d122      	bne.n	8008d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	d11b      	bne.n	8008d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f06f 0204 	mvn.w	r2, #4
 8008d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fab9 	bl	80092b6 <HAL_TIM_IC_CaptureCallback>
 8008d44:	e005      	b.n	8008d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 faab 	bl	80092a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fabc 	bl	80092ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	f003 0308 	and.w	r3, r3, #8
 8008d62:	2b08      	cmp	r3, #8
 8008d64:	d122      	bne.n	8008dac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f003 0308 	and.w	r3, r3, #8
 8008d70:	2b08      	cmp	r3, #8
 8008d72:	d11b      	bne.n	8008dac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f06f 0208 	mvn.w	r2, #8
 8008d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2204      	movs	r2, #4
 8008d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	f003 0303 	and.w	r3, r3, #3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d003      	beq.n	8008d9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa8f 	bl	80092b6 <HAL_TIM_IC_CaptureCallback>
 8008d98:	e005      	b.n	8008da6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fa81 	bl	80092a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fa92 	bl	80092ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	f003 0310 	and.w	r3, r3, #16
 8008db6:	2b10      	cmp	r3, #16
 8008db8:	d122      	bne.n	8008e00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	f003 0310 	and.w	r3, r3, #16
 8008dc4:	2b10      	cmp	r3, #16
 8008dc6:	d11b      	bne.n	8008e00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f06f 0210 	mvn.w	r2, #16
 8008dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2208      	movs	r2, #8
 8008dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	69db      	ldr	r3, [r3, #28]
 8008dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fa65 	bl	80092b6 <HAL_TIM_IC_CaptureCallback>
 8008dec:	e005      	b.n	8008dfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fa57 	bl	80092a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fa68 	bl	80092ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d10e      	bne.n	8008e2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f003 0301 	and.w	r3, r3, #1
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d107      	bne.n	8008e2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f06f 0201 	mvn.w	r2, #1
 8008e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7f8 f968 	bl	80010fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e36:	2b80      	cmp	r3, #128	; 0x80
 8008e38:	d10e      	bne.n	8008e58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e44:	2b80      	cmp	r3, #128	; 0x80
 8008e46:	d107      	bne.n	8008e58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fed8 	bl	8009c08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e66:	d10e      	bne.n	8008e86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e72:	2b80      	cmp	r3, #128	; 0x80
 8008e74:	d107      	bne.n	8008e86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fecb 	bl	8009c1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e90:	2b40      	cmp	r3, #64	; 0x40
 8008e92:	d10e      	bne.n	8008eb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e9e:	2b40      	cmp	r3, #64	; 0x40
 8008ea0:	d107      	bne.n	8008eb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fa16 	bl	80092de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	f003 0320 	and.w	r3, r3, #32
 8008ebc:	2b20      	cmp	r3, #32
 8008ebe:	d10e      	bne.n	8008ede <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	2b20      	cmp	r3, #32
 8008ecc:	d107      	bne.n	8008ede <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f06f 0220 	mvn.w	r2, #32
 8008ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fe8b 	bl	8009bf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ede:	bf00      	nop
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
	...

08008ee8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d101      	bne.n	8008f06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f02:	2302      	movs	r3, #2
 8008f04:	e0ff      	b.n	8009106 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b14      	cmp	r3, #20
 8008f12:	f200 80f0 	bhi.w	80090f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008f16:	a201      	add	r2, pc, #4	; (adr r2, 8008f1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1c:	08008f71 	.word	0x08008f71
 8008f20:	080090f7 	.word	0x080090f7
 8008f24:	080090f7 	.word	0x080090f7
 8008f28:	080090f7 	.word	0x080090f7
 8008f2c:	08008fb1 	.word	0x08008fb1
 8008f30:	080090f7 	.word	0x080090f7
 8008f34:	080090f7 	.word	0x080090f7
 8008f38:	080090f7 	.word	0x080090f7
 8008f3c:	08008ff3 	.word	0x08008ff3
 8008f40:	080090f7 	.word	0x080090f7
 8008f44:	080090f7 	.word	0x080090f7
 8008f48:	080090f7 	.word	0x080090f7
 8008f4c:	08009033 	.word	0x08009033
 8008f50:	080090f7 	.word	0x080090f7
 8008f54:	080090f7 	.word	0x080090f7
 8008f58:	080090f7 	.word	0x080090f7
 8008f5c:	08009075 	.word	0x08009075
 8008f60:	080090f7 	.word	0x080090f7
 8008f64:	080090f7 	.word	0x080090f7
 8008f68:	080090f7 	.word	0x080090f7
 8008f6c:	080090b5 	.word	0x080090b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68b9      	ldr	r1, [r7, #8]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 fa20 	bl	80093bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	699a      	ldr	r2, [r3, #24]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f042 0208 	orr.w	r2, r2, #8
 8008f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	699a      	ldr	r2, [r3, #24]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f022 0204 	bic.w	r2, r2, #4
 8008f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6999      	ldr	r1, [r3, #24]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	691a      	ldr	r2, [r3, #16]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	430a      	orrs	r2, r1
 8008fac:	619a      	str	r2, [r3, #24]
      break;
 8008fae:	e0a5      	b.n	80090fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68b9      	ldr	r1, [r7, #8]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 fa7c 	bl	80094b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	699a      	ldr	r2, [r3, #24]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	699a      	ldr	r2, [r3, #24]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6999      	ldr	r1, [r3, #24]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	021a      	lsls	r2, r3, #8
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	430a      	orrs	r2, r1
 8008fee:	619a      	str	r2, [r3, #24]
      break;
 8008ff0:	e084      	b.n	80090fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68b9      	ldr	r1, [r7, #8]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 fad5 	bl	80095a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	69da      	ldr	r2, [r3, #28]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f042 0208 	orr.w	r2, r2, #8
 800900c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69da      	ldr	r2, [r3, #28]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f022 0204 	bic.w	r2, r2, #4
 800901c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	69d9      	ldr	r1, [r3, #28]
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	691a      	ldr	r2, [r3, #16]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	430a      	orrs	r2, r1
 800902e:	61da      	str	r2, [r3, #28]
      break;
 8009030:	e064      	b.n	80090fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68b9      	ldr	r1, [r7, #8]
 8009038:	4618      	mov	r0, r3
 800903a:	f000 fb2d 	bl	8009698 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	69da      	ldr	r2, [r3, #28]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800904c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	69da      	ldr	r2, [r3, #28]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800905c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	69d9      	ldr	r1, [r3, #28]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	021a      	lsls	r2, r3, #8
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	61da      	str	r2, [r3, #28]
      break;
 8009072:	e043      	b.n	80090fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68b9      	ldr	r1, [r7, #8]
 800907a:	4618      	mov	r0, r3
 800907c:	f000 fb6a 	bl	8009754 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f042 0208 	orr.w	r2, r2, #8
 800908e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 0204 	bic.w	r2, r2, #4
 800909e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	691a      	ldr	r2, [r3, #16]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	430a      	orrs	r2, r1
 80090b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80090b2:	e023      	b.n	80090fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68b9      	ldr	r1, [r7, #8]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 fba2 	bl	8009804 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	021a      	lsls	r2, r3, #8
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	430a      	orrs	r2, r1
 80090f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80090f4:	e002      	b.n	80090fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	75fb      	strb	r3, [r7, #23]
      break;
 80090fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009104:	7dfb      	ldrb	r3, [r7, #23]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop

08009110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009124:	2b01      	cmp	r3, #1
 8009126:	d101      	bne.n	800912c <HAL_TIM_ConfigClockSource+0x1c>
 8009128:	2302      	movs	r3, #2
 800912a:	e0b6      	b.n	800929a <HAL_TIM_ConfigClockSource+0x18a>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2202      	movs	r2, #2
 8009138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800914a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800914e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009168:	d03e      	beq.n	80091e8 <HAL_TIM_ConfigClockSource+0xd8>
 800916a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800916e:	f200 8087 	bhi.w	8009280 <HAL_TIM_ConfigClockSource+0x170>
 8009172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009176:	f000 8086 	beq.w	8009286 <HAL_TIM_ConfigClockSource+0x176>
 800917a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800917e:	d87f      	bhi.n	8009280 <HAL_TIM_ConfigClockSource+0x170>
 8009180:	2b70      	cmp	r3, #112	; 0x70
 8009182:	d01a      	beq.n	80091ba <HAL_TIM_ConfigClockSource+0xaa>
 8009184:	2b70      	cmp	r3, #112	; 0x70
 8009186:	d87b      	bhi.n	8009280 <HAL_TIM_ConfigClockSource+0x170>
 8009188:	2b60      	cmp	r3, #96	; 0x60
 800918a:	d050      	beq.n	800922e <HAL_TIM_ConfigClockSource+0x11e>
 800918c:	2b60      	cmp	r3, #96	; 0x60
 800918e:	d877      	bhi.n	8009280 <HAL_TIM_ConfigClockSource+0x170>
 8009190:	2b50      	cmp	r3, #80	; 0x50
 8009192:	d03c      	beq.n	800920e <HAL_TIM_ConfigClockSource+0xfe>
 8009194:	2b50      	cmp	r3, #80	; 0x50
 8009196:	d873      	bhi.n	8009280 <HAL_TIM_ConfigClockSource+0x170>
 8009198:	2b40      	cmp	r3, #64	; 0x40
 800919a:	d058      	beq.n	800924e <HAL_TIM_ConfigClockSource+0x13e>
 800919c:	2b40      	cmp	r3, #64	; 0x40
 800919e:	d86f      	bhi.n	8009280 <HAL_TIM_ConfigClockSource+0x170>
 80091a0:	2b30      	cmp	r3, #48	; 0x30
 80091a2:	d064      	beq.n	800926e <HAL_TIM_ConfigClockSource+0x15e>
 80091a4:	2b30      	cmp	r3, #48	; 0x30
 80091a6:	d86b      	bhi.n	8009280 <HAL_TIM_ConfigClockSource+0x170>
 80091a8:	2b20      	cmp	r3, #32
 80091aa:	d060      	beq.n	800926e <HAL_TIM_ConfigClockSource+0x15e>
 80091ac:	2b20      	cmp	r3, #32
 80091ae:	d867      	bhi.n	8009280 <HAL_TIM_ConfigClockSource+0x170>
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d05c      	beq.n	800926e <HAL_TIM_ConfigClockSource+0x15e>
 80091b4:	2b10      	cmp	r3, #16
 80091b6:	d05a      	beq.n	800926e <HAL_TIM_ConfigClockSource+0x15e>
 80091b8:	e062      	b.n	8009280 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	6899      	ldr	r1, [r3, #8]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	f000 fbef 	bl	80099ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80091dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	609a      	str	r2, [r3, #8]
      break;
 80091e6:	e04f      	b.n	8009288 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6818      	ldr	r0, [r3, #0]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	6899      	ldr	r1, [r3, #8]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f000 fbd8 	bl	80099ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689a      	ldr	r2, [r3, #8]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800920a:	609a      	str	r2, [r3, #8]
      break;
 800920c:	e03c      	b.n	8009288 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6818      	ldr	r0, [r3, #0]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	6859      	ldr	r1, [r3, #4]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	461a      	mov	r2, r3
 800921c:	f000 fb4c 	bl	80098b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2150      	movs	r1, #80	; 0x50
 8009226:	4618      	mov	r0, r3
 8009228:	f000 fba5 	bl	8009976 <TIM_ITRx_SetConfig>
      break;
 800922c:	e02c      	b.n	8009288 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6818      	ldr	r0, [r3, #0]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	6859      	ldr	r1, [r3, #4]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	461a      	mov	r2, r3
 800923c:	f000 fb6b 	bl	8009916 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2160      	movs	r1, #96	; 0x60
 8009246:	4618      	mov	r0, r3
 8009248:	f000 fb95 	bl	8009976 <TIM_ITRx_SetConfig>
      break;
 800924c:	e01c      	b.n	8009288 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6818      	ldr	r0, [r3, #0]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	6859      	ldr	r1, [r3, #4]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	461a      	mov	r2, r3
 800925c:	f000 fb2c 	bl	80098b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2140      	movs	r1, #64	; 0x40
 8009266:	4618      	mov	r0, r3
 8009268:	f000 fb85 	bl	8009976 <TIM_ITRx_SetConfig>
      break;
 800926c:	e00c      	b.n	8009288 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4619      	mov	r1, r3
 8009278:	4610      	mov	r0, r2
 800927a:	f000 fb7c 	bl	8009976 <TIM_ITRx_SetConfig>
      break;
 800927e:	e003      	b.n	8009288 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	73fb      	strb	r3, [r7, #15]
      break;
 8009284:	e000      	b.n	8009288 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009298:	7bfb      	ldrb	r3, [r7, #15]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092a2:	b480      	push	{r7}
 80092a4:	b083      	sub	sp, #12
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092aa:	bf00      	nop
 80092ac:	370c      	adds	r7, #12
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b083      	sub	sp, #12
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092be:	bf00      	nop
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b083      	sub	sp, #12
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092d2:	bf00      	nop
 80092d4:	370c      	adds	r7, #12
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092de:	b480      	push	{r7}
 80092e0:	b083      	sub	sp, #12
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092e6:	bf00      	nop
 80092e8:	370c      	adds	r7, #12
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
	...

080092f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a2a      	ldr	r2, [pc, #168]	; (80093b0 <TIM_Base_SetConfig+0xbc>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d003      	beq.n	8009314 <TIM_Base_SetConfig+0x20>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009312:	d108      	bne.n	8009326 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800931a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	4313      	orrs	r3, r2
 8009324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a21      	ldr	r2, [pc, #132]	; (80093b0 <TIM_Base_SetConfig+0xbc>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d00b      	beq.n	8009346 <TIM_Base_SetConfig+0x52>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009334:	d007      	beq.n	8009346 <TIM_Base_SetConfig+0x52>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a1e      	ldr	r2, [pc, #120]	; (80093b4 <TIM_Base_SetConfig+0xc0>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d003      	beq.n	8009346 <TIM_Base_SetConfig+0x52>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a1d      	ldr	r2, [pc, #116]	; (80093b8 <TIM_Base_SetConfig+0xc4>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d108      	bne.n	8009358 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800934c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	4313      	orrs	r3, r2
 8009356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	4313      	orrs	r3, r2
 8009364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	689a      	ldr	r2, [r3, #8]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a0c      	ldr	r2, [pc, #48]	; (80093b0 <TIM_Base_SetConfig+0xbc>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d007      	beq.n	8009394 <TIM_Base_SetConfig+0xa0>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a0b      	ldr	r2, [pc, #44]	; (80093b4 <TIM_Base_SetConfig+0xc0>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d003      	beq.n	8009394 <TIM_Base_SetConfig+0xa0>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a0a      	ldr	r2, [pc, #40]	; (80093b8 <TIM_Base_SetConfig+0xc4>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d103      	bne.n	800939c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	691a      	ldr	r2, [r3, #16]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	615a      	str	r2, [r3, #20]
}
 80093a2:	bf00      	nop
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	40012c00 	.word	0x40012c00
 80093b4:	40014000 	.word	0x40014000
 80093b8:	40014400 	.word	0x40014400

080093bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093bc:	b480      	push	{r7}
 80093be:	b087      	sub	sp, #28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a1b      	ldr	r3, [r3, #32]
 80093ca:	f023 0201 	bic.w	r2, r3, #1
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f023 0303 	bic.w	r3, r3, #3
 80093f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	4313      	orrs	r3, r2
 8009400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	f023 0302 	bic.w	r3, r3, #2
 8009408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	4313      	orrs	r3, r2
 8009412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a24      	ldr	r2, [pc, #144]	; (80094a8 <TIM_OC1_SetConfig+0xec>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d007      	beq.n	800942c <TIM_OC1_SetConfig+0x70>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a23      	ldr	r2, [pc, #140]	; (80094ac <TIM_OC1_SetConfig+0xf0>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d003      	beq.n	800942c <TIM_OC1_SetConfig+0x70>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a22      	ldr	r2, [pc, #136]	; (80094b0 <TIM_OC1_SetConfig+0xf4>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d10c      	bne.n	8009446 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	f023 0308 	bic.w	r3, r3, #8
 8009432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	697a      	ldr	r2, [r7, #20]
 800943a:	4313      	orrs	r3, r2
 800943c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f023 0304 	bic.w	r3, r3, #4
 8009444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a17      	ldr	r2, [pc, #92]	; (80094a8 <TIM_OC1_SetConfig+0xec>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d007      	beq.n	800945e <TIM_OC1_SetConfig+0xa2>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a16      	ldr	r2, [pc, #88]	; (80094ac <TIM_OC1_SetConfig+0xf0>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d003      	beq.n	800945e <TIM_OC1_SetConfig+0xa2>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a15      	ldr	r2, [pc, #84]	; (80094b0 <TIM_OC1_SetConfig+0xf4>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d111      	bne.n	8009482 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800946c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	695b      	ldr	r3, [r3, #20]
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	4313      	orrs	r3, r2
 8009476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	4313      	orrs	r3, r2
 8009480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	621a      	str	r2, [r3, #32]
}
 800949c:	bf00      	nop
 800949e:	371c      	adds	r7, #28
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	40012c00 	.word	0x40012c00
 80094ac:	40014000 	.word	0x40014000
 80094b0:	40014400 	.word	0x40014400

080094b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b087      	sub	sp, #28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	f023 0210 	bic.w	r2, r3, #16
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	021b      	lsls	r3, r3, #8
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	f023 0320 	bic.w	r3, r3, #32
 8009502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	011b      	lsls	r3, r3, #4
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	4313      	orrs	r3, r2
 800950e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a22      	ldr	r2, [pc, #136]	; (800959c <TIM_OC2_SetConfig+0xe8>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d10d      	bne.n	8009534 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800951e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	011b      	lsls	r3, r3, #4
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	4313      	orrs	r3, r2
 800952a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009532:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a19      	ldr	r2, [pc, #100]	; (800959c <TIM_OC2_SetConfig+0xe8>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d007      	beq.n	800954c <TIM_OC2_SetConfig+0x98>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a18      	ldr	r2, [pc, #96]	; (80095a0 <TIM_OC2_SetConfig+0xec>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d003      	beq.n	800954c <TIM_OC2_SetConfig+0x98>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a17      	ldr	r2, [pc, #92]	; (80095a4 <TIM_OC2_SetConfig+0xf0>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d113      	bne.n	8009574 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800955a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	695b      	ldr	r3, [r3, #20]
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	4313      	orrs	r3, r2
 8009566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	4313      	orrs	r3, r2
 8009572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	685a      	ldr	r2, [r3, #4]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	621a      	str	r2, [r3, #32]
}
 800958e:	bf00      	nop
 8009590:	371c      	adds	r7, #28
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	40012c00 	.word	0x40012c00
 80095a0:	40014000 	.word	0x40014000
 80095a4:	40014400 	.word	0x40014400

080095a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	69db      	ldr	r3, [r3, #28]
 80095ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f023 0303 	bic.w	r3, r3, #3
 80095e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	021b      	lsls	r3, r3, #8
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	4313      	orrs	r3, r2
 8009600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a21      	ldr	r2, [pc, #132]	; (800968c <TIM_OC3_SetConfig+0xe4>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d10d      	bne.n	8009626 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	021b      	lsls	r3, r3, #8
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	4313      	orrs	r3, r2
 800961c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a18      	ldr	r2, [pc, #96]	; (800968c <TIM_OC3_SetConfig+0xe4>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d007      	beq.n	800963e <TIM_OC3_SetConfig+0x96>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a17      	ldr	r2, [pc, #92]	; (8009690 <TIM_OC3_SetConfig+0xe8>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d003      	beq.n	800963e <TIM_OC3_SetConfig+0x96>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a16      	ldr	r2, [pc, #88]	; (8009694 <TIM_OC3_SetConfig+0xec>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d113      	bne.n	8009666 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800964c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	011b      	lsls	r3, r3, #4
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	4313      	orrs	r3, r2
 8009658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	4313      	orrs	r3, r2
 8009664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	621a      	str	r2, [r3, #32]
}
 8009680:	bf00      	nop
 8009682:	371c      	adds	r7, #28
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	40012c00 	.word	0x40012c00
 8009690:	40014000 	.word	0x40014000
 8009694:	40014400 	.word	0x40014400

08009698 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009698:	b480      	push	{r7}
 800969a:	b087      	sub	sp, #28
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	021b      	lsls	r3, r3, #8
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	4313      	orrs	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	031b      	lsls	r3, r3, #12
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a14      	ldr	r2, [pc, #80]	; (8009748 <TIM_OC4_SetConfig+0xb0>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d007      	beq.n	800970c <TIM_OC4_SetConfig+0x74>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a13      	ldr	r2, [pc, #76]	; (800974c <TIM_OC4_SetConfig+0xb4>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d003      	beq.n	800970c <TIM_OC4_SetConfig+0x74>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a12      	ldr	r2, [pc, #72]	; (8009750 <TIM_OC4_SetConfig+0xb8>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d109      	bne.n	8009720 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009712:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	695b      	ldr	r3, [r3, #20]
 8009718:	019b      	lsls	r3, r3, #6
 800971a:	697a      	ldr	r2, [r7, #20]
 800971c:	4313      	orrs	r3, r2
 800971e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	685a      	ldr	r2, [r3, #4]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	621a      	str	r2, [r3, #32]
}
 800973a:	bf00      	nop
 800973c:	371c      	adds	r7, #28
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	40012c00 	.word	0x40012c00
 800974c:	40014000 	.word	0x40014000
 8009750:	40014400 	.word	0x40014400

08009754 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800977a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	4313      	orrs	r3, r2
 8009790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009798:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	041b      	lsls	r3, r3, #16
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a13      	ldr	r2, [pc, #76]	; (80097f8 <TIM_OC5_SetConfig+0xa4>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d007      	beq.n	80097be <TIM_OC5_SetConfig+0x6a>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a12      	ldr	r2, [pc, #72]	; (80097fc <TIM_OC5_SetConfig+0xa8>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d003      	beq.n	80097be <TIM_OC5_SetConfig+0x6a>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a11      	ldr	r2, [pc, #68]	; (8009800 <TIM_OC5_SetConfig+0xac>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d109      	bne.n	80097d2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	021b      	lsls	r3, r3, #8
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	693a      	ldr	r2, [r7, #16]
 80097ea:	621a      	str	r2, [r3, #32]
}
 80097ec:	bf00      	nop
 80097ee:	371c      	adds	r7, #28
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	40012c00 	.word	0x40012c00
 80097fc:	40014000 	.word	0x40014000
 8009800:	40014400 	.word	0x40014400

08009804 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009804:	b480      	push	{r7}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800982a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	4313      	orrs	r3, r2
 8009842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800984a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	051b      	lsls	r3, r3, #20
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	4313      	orrs	r3, r2
 8009856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a14      	ldr	r2, [pc, #80]	; (80098ac <TIM_OC6_SetConfig+0xa8>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d007      	beq.n	8009870 <TIM_OC6_SetConfig+0x6c>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a13      	ldr	r2, [pc, #76]	; (80098b0 <TIM_OC6_SetConfig+0xac>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d003      	beq.n	8009870 <TIM_OC6_SetConfig+0x6c>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a12      	ldr	r2, [pc, #72]	; (80098b4 <TIM_OC6_SetConfig+0xb0>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d109      	bne.n	8009884 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009876:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	029b      	lsls	r3, r3, #10
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	4313      	orrs	r3, r2
 8009882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	621a      	str	r2, [r3, #32]
}
 800989e:	bf00      	nop
 80098a0:	371c      	adds	r7, #28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	40012c00 	.word	0x40012c00
 80098b0:	40014000 	.word	0x40014000
 80098b4:	40014400 	.word	0x40014400

080098b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b087      	sub	sp, #28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	f023 0201 	bic.w	r2, r3, #1
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	011b      	lsls	r3, r3, #4
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f023 030a 	bic.w	r3, r3, #10
 80098f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	621a      	str	r2, [r3, #32]
}
 800990a:	bf00      	nop
 800990c:	371c      	adds	r7, #28
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009916:	b480      	push	{r7}
 8009918:	b087      	sub	sp, #28
 800991a:	af00      	add	r7, sp, #0
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	f023 0210 	bic.w	r2, r3, #16
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6a1b      	ldr	r3, [r3, #32]
 8009938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	031b      	lsls	r3, r3, #12
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	4313      	orrs	r3, r2
 800994a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009952:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	011b      	lsls	r3, r3, #4
 8009958:	693a      	ldr	r2, [r7, #16]
 800995a:	4313      	orrs	r3, r2
 800995c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	621a      	str	r2, [r3, #32]
}
 800996a:	bf00      	nop
 800996c:	371c      	adds	r7, #28
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009976:	b480      	push	{r7}
 8009978:	b085      	sub	sp, #20
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800998c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	4313      	orrs	r3, r2
 8009994:	f043 0307 	orr.w	r3, r3, #7
 8009998:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	609a      	str	r2, [r3, #8]
}
 80099a0:	bf00      	nop
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	021a      	lsls	r2, r3, #8
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	431a      	orrs	r2, r3
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	609a      	str	r2, [r3, #8]
}
 80099e0:	bf00      	nop
 80099e2:	371c      	adds	r7, #28
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	f003 031f 	and.w	r3, r3, #31
 80099fe:	2201      	movs	r2, #1
 8009a00:	fa02 f303 	lsl.w	r3, r2, r3
 8009a04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6a1a      	ldr	r2, [r3, #32]
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	43db      	mvns	r3, r3
 8009a0e:	401a      	ands	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6a1a      	ldr	r2, [r3, #32]
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	f003 031f 	and.w	r3, r3, #31
 8009a1e:	6879      	ldr	r1, [r7, #4]
 8009a20:	fa01 f303 	lsl.w	r3, r1, r3
 8009a24:	431a      	orrs	r2, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	621a      	str	r2, [r3, #32]
}
 8009a2a:	bf00      	nop
 8009a2c:	371c      	adds	r7, #28
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
	...

08009a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d101      	bne.n	8009a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	e04f      	b.n	8009af0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a21      	ldr	r2, [pc, #132]	; (8009afc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d108      	bne.n	8009a8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a14      	ldr	r2, [pc, #80]	; (8009afc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d009      	beq.n	8009ac4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ab8:	d004      	beq.n	8009ac4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a10      	ldr	r2, [pc, #64]	; (8009b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d10c      	bne.n	8009ade <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	40012c00 	.word	0x40012c00
 8009b00:	40014000 	.word	0x40014000

08009b04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d101      	bne.n	8009b20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	e060      	b.n	8009be2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	695b      	ldr	r3, [r3, #20]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	041b      	lsls	r3, r3, #16
 8009b96:	4313      	orrs	r3, r2
 8009b98:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a14      	ldr	r2, [pc, #80]	; (8009bf0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d115      	bne.n	8009bd0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	051b      	lsls	r3, r3, #20
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3714      	adds	r7, #20
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	40012c00 	.word	0x40012c00

08009bf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bfc:	bf00      	nop
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <arm_correlate_f32>:
 8009c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c34:	b087      	sub	sp, #28
 8009c36:	4299      	cmp	r1, r3
 8009c38:	4684      	mov	ip, r0
 8009c3a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009c3c:	f0c0 80a7 	bcc.w	8009d8e <arm_correlate_f32+0x15e>
 8009c40:	ebc3 0e01 	rsb	lr, r3, r1
 8009c44:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8009c48:	2704      	movs	r7, #4
 8009c4a:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8009c4e:	3101      	adds	r1, #1
 8009c50:	3801      	subs	r0, #1
 8009c52:	1ac9      	subs	r1, r1, r3
 8009c54:	1e5e      	subs	r6, r3, #1
 8009c56:	9100      	str	r1, [sp, #0]
 8009c58:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8009c5c:	d055      	beq.n	8009d0a <arm_correlate_f32+0xda>
 8009c5e:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8009e10 <arm_correlate_f32+0x1e0>
 8009c62:	f1a0 0804 	sub.w	r8, r0, #4
 8009c66:	46f1      	mov	r9, lr
 8009c68:	4664      	mov	r4, ip
 8009c6a:	2501      	movs	r5, #1
 8009c6c:	f015 0103 	ands.w	r1, r5, #3
 8009c70:	d009      	beq.n	8009c86 <arm_correlate_f32+0x56>
 8009c72:	ecf4 6a01 	vldmia	r4!, {s13}
 8009c76:	ecb0 7a01 	vldmia	r0!, {s14}
 8009c7a:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009c7e:	3901      	subs	r1, #1
 8009c80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c84:	d1f5      	bne.n	8009c72 <arm_correlate_f32+0x42>
 8009c86:	3501      	adds	r5, #1
 8009c88:	429d      	cmp	r5, r3
 8009c8a:	edc9 7a00 	vstr	s15, [r9]
 8009c8e:	4640      	mov	r0, r8
 8009c90:	44b9      	add	r9, r7
 8009c92:	d038      	beq.n	8009d06 <arm_correlate_f32+0xd6>
 8009c94:	ea5f 0a95 	movs.w	sl, r5, lsr #2
 8009c98:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8009e10 <arm_correlate_f32+0x1e0>
 8009c9c:	f000 8253 	beq.w	800a146 <arm_correlate_f32+0x516>
 8009ca0:	f10c 0010 	add.w	r0, ip, #16
 8009ca4:	f108 0110 	add.w	r1, r8, #16
 8009ca8:	4654      	mov	r4, sl
 8009caa:	ed51 6a04 	vldr	s13, [r1, #-16]
 8009cae:	ed10 4a04 	vldr	s8, [r0, #-16]
 8009cb2:	ed50 3a03 	vldr	s7, [r0, #-12]
 8009cb6:	ed11 5a03 	vldr	s10, [r1, #-12]
 8009cba:	ed50 4a02 	vldr	s9, [r0, #-8]
 8009cbe:	ed11 6a02 	vldr	s12, [r1, #-8]
 8009cc2:	ed50 5a01 	vldr	s11, [r0, #-4]
 8009cc6:	ed11 7a01 	vldr	s14, [r1, #-4]
 8009cca:	ee24 4a26 	vmul.f32	s8, s8, s13
 8009cce:	ee23 5a85 	vmul.f32	s10, s7, s10
 8009cd2:	ee74 6a27 	vadd.f32	s13, s8, s15
 8009cd6:	ee24 6a86 	vmul.f32	s12, s9, s12
 8009cda:	ee75 6a26 	vadd.f32	s13, s10, s13
 8009cde:	ee25 7a87 	vmul.f32	s14, s11, s14
 8009ce2:	ee76 7a26 	vadd.f32	s15, s12, s13
 8009ce6:	3c01      	subs	r4, #1
 8009ce8:	f100 0010 	add.w	r0, r0, #16
 8009cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cf0:	f101 0110 	add.w	r1, r1, #16
 8009cf4:	d1d9      	bne.n	8009caa <arm_correlate_f32+0x7a>
 8009cf6:	ea4f 100a 	mov.w	r0, sl, lsl #4
 8009cfa:	eb0c 0400 	add.w	r4, ip, r0
 8009cfe:	4440      	add	r0, r8
 8009d00:	f1a8 0804 	sub.w	r8, r8, #4
 8009d04:	e7b2      	b.n	8009c6c <arm_correlate_f32+0x3c>
 8009d06:	fb07 ee06 	mla	lr, r7, r6, lr
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	9900      	ldr	r1, [sp, #0]
 8009d0e:	d84d      	bhi.n	8009dac <arm_correlate_f32+0x17c>
 8009d10:	2900      	cmp	r1, #0
 8009d12:	f000 81d4 	beq.w	800a0be <arm_correlate_f32+0x48e>
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f000 81d6 	beq.w	800a0c8 <arm_correlate_f32+0x498>
 8009d1c:	2e00      	cmp	r6, #0
 8009d1e:	f000 81df 	beq.w	800a0e0 <arm_correlate_f32+0x4b0>
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	9b00      	ldr	r3, [sp, #0]
 8009d26:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009d2a:	f000 81ef 	beq.w	800a10c <arm_correlate_f32+0x4dc>
 8009d2e:	eddf 4a38 	vldr	s9, [pc, #224]	; 8009e10 <arm_correlate_f32+0x1e0>
 8009d32:	eb0c 0503 	add.w	r5, ip, r3
 8009d36:	4664      	mov	r4, ip
 8009d38:	f10c 0004 	add.w	r0, ip, #4
 8009d3c:	4671      	mov	r1, lr
 8009d3e:	ecb4 5a01 	vldmia	r4!, {s10}
 8009d42:	ed92 6a00 	vldr	s12, [r2]
 8009d46:	edd0 7a00 	vldr	s15, [r0]
 8009d4a:	edd2 6a01 	vldr	s13, [r2, #4]
 8009d4e:	edd0 5a01 	vldr	s11, [r0, #4]
 8009d52:	ed92 7a02 	vldr	s14, [r2, #8]
 8009d56:	ee25 6a06 	vmul.f32	s12, s10, s12
 8009d5a:	3004      	adds	r0, #4
 8009d5c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009d60:	ee36 6a24 	vadd.f32	s12, s12, s9
 8009d64:	ee25 7a87 	vmul.f32	s14, s11, s14
 8009d68:	ee76 7a26 	vadd.f32	s15, s12, s13
 8009d6c:	42ac      	cmp	r4, r5
 8009d6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d72:	edc1 7a00 	vstr	s15, [r1]
 8009d76:	4439      	add	r1, r7
 8009d78:	d1e1      	bne.n	8009d3e <arm_correlate_f32+0x10e>
 8009d7a:	9900      	ldr	r1, [sp, #0]
 8009d7c:	449c      	add	ip, r3
 8009d7e:	fb07 ee01 	mla	lr, r7, r1, lr
 8009d82:	2e00      	cmp	r6, #0
 8009d84:	f040 814c 	bne.w	800a020 <arm_correlate_f32+0x3f0>
 8009d88:	b007      	add	sp, #28
 8009d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8e:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8009d92:	3802      	subs	r0, #2
 8009d94:	4666      	mov	r6, ip
 8009d96:	4408      	add	r0, r1
 8009d98:	460d      	mov	r5, r1
 8009d9a:	4694      	mov	ip, r2
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	eb04 0e80 	add.w	lr, r4, r0, lsl #2
 8009da2:	4632      	mov	r2, r6
 8009da4:	f06f 0703 	mvn.w	r7, #3
 8009da8:	462b      	mov	r3, r5
 8009daa:	e74e      	b.n	8009c4a <arm_correlate_f32+0x1a>
 8009dac:	0889      	lsrs	r1, r1, #2
 8009dae:	9101      	str	r1, [sp, #4]
 8009db0:	f000 8187 	beq.w	800a0c2 <arm_correlate_f32+0x492>
 8009db4:	0109      	lsls	r1, r1, #4
 8009db6:	ea4f 0a93 	mov.w	sl, r3, lsr #2
 8009dba:	9102      	str	r1, [sp, #8]
 8009dbc:	ea4f 1b0a 	mov.w	fp, sl, lsl #4
 8009dc0:	310c      	adds	r1, #12
 8009dc2:	4461      	add	r1, ip
 8009dc4:	f003 0903 	and.w	r9, r3, #3
 8009dc8:	eb02 000b 	add.w	r0, r2, fp
 8009dcc:	f102 0410 	add.w	r4, r2, #16
 8009dd0:	f10c 050c 	add.w	r5, ip, #12
 8009dd4:	46f0      	mov	r8, lr
 8009dd6:	f8cd e00c 	str.w	lr, [sp, #12]
 8009dda:	9604      	str	r6, [sp, #16]
 8009ddc:	f8cd c014 	str.w	ip, [sp, #20]
 8009de0:	464e      	mov	r6, r9
 8009de2:	468e      	mov	lr, r1
 8009de4:	4681      	mov	r9, r0
 8009de6:	46a4      	mov	ip, r4
 8009de8:	eddf 5a09 	vldr	s11, [pc, #36]	; 8009e10 <arm_correlate_f32+0x1e0>
 8009dec:	ed55 2a03 	vldr	s5, [r5, #-12]
 8009df0:	ed15 2a02 	vldr	s4, [r5, #-8]
 8009df4:	ed55 1a01 	vldr	s3, [r5, #-4]
 8009df8:	ed95 5a00 	vldr	s10, [r5]
 8009dfc:	eef0 4a65 	vmov.f32	s9, s11
 8009e00:	eef0 3a65 	vmov.f32	s7, s11
 8009e04:	eeb0 1a65 	vmov.f32	s2, s11
 8009e08:	4661      	mov	r1, ip
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	4654      	mov	r4, sl
 8009e0e:	e004      	b.n	8009e1a <arm_correlate_f32+0x1ea>
 8009e10:	00000000 	.word	0x00000000
 8009e14:	3010      	adds	r0, #16
 8009e16:	ed90 5a00 	vldr	s10, [r0]
 8009e1a:	ed11 6a04 	vldr	s12, [r1, #-16]
 8009e1e:	ed51 6a03 	vldr	s13, [r1, #-12]
 8009e22:	ed11 7a02 	vldr	s14, [r1, #-8]
 8009e26:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009e2a:	ee62 0a86 	vmul.f32	s1, s5, s12
 8009e2e:	ee22 3a06 	vmul.f32	s6, s4, s12
 8009e32:	ee21 4a86 	vmul.f32	s8, s3, s12
 8009e36:	edd0 2a01 	vldr	s5, [r0, #4]
 8009e3a:	ee25 6a06 	vmul.f32	s12, s10, s12
 8009e3e:	ee30 1a81 	vadd.f32	s2, s1, s2
 8009e42:	ee73 3a23 	vadd.f32	s7, s6, s7
 8009e46:	ee62 0a26 	vmul.f32	s1, s4, s13
 8009e4a:	ee21 3aa6 	vmul.f32	s6, s3, s13
 8009e4e:	ee74 4a24 	vadd.f32	s9, s8, s9
 8009e52:	ee76 5a25 	vadd.f32	s11, s12, s11
 8009e56:	ed90 2a02 	vldr	s4, [r0, #8]
 8009e5a:	ee25 6a26 	vmul.f32	s12, s10, s13
 8009e5e:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8009e62:	ee30 1a81 	vadd.f32	s2, s1, s2
 8009e66:	ee73 3a23 	vadd.f32	s7, s6, s7
 8009e6a:	ee61 0a87 	vmul.f32	s1, s3, s14
 8009e6e:	ee25 4a07 	vmul.f32	s8, s10, s14
 8009e72:	ee76 4a24 	vadd.f32	s9, s12, s9
 8009e76:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8009e7a:	edd0 1a03 	vldr	s3, [r0, #12]
 8009e7e:	ee62 6a87 	vmul.f32	s13, s5, s14
 8009e82:	ee22 7a07 	vmul.f32	s14, s4, s14
 8009e86:	ee25 5a27 	vmul.f32	s10, s10, s15
 8009e8a:	ee34 6a23 	vadd.f32	s12, s8, s7
 8009e8e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009e92:	ee62 3aa7 	vmul.f32	s7, s5, s15
 8009e96:	ee62 4a27 	vmul.f32	s9, s4, s15
 8009e9a:	ee30 3a81 	vadd.f32	s6, s1, s2
 8009e9e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8009ea2:	ee61 7aa7 	vmul.f32	s15, s3, s15
 8009ea6:	3c01      	subs	r4, #1
 8009ea8:	f101 0110 	add.w	r1, r1, #16
 8009eac:	ee35 1a03 	vadd.f32	s2, s10, s6
 8009eb0:	ee73 3a86 	vadd.f32	s7, s7, s12
 8009eb4:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8009eb8:	ee77 5a87 	vadd.f32	s11, s15, s14
 8009ebc:	d1aa      	bne.n	8009e14 <arm_correlate_f32+0x1e4>
 8009ebe:	eb05 000b 	add.w	r0, r5, fp
 8009ec2:	b1ee      	cbz	r6, 8009f00 <arm_correlate_f32+0x2d0>
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	464c      	mov	r4, r9
 8009ec8:	ecf4 7a01 	vldmia	r4!, {s15}
 8009ecc:	ecb0 7a01 	vldmia	r0!, {s14}
 8009ed0:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8009ed4:	ee22 6a27 	vmul.f32	s12, s4, s15
 8009ed8:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8009edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee0:	3901      	subs	r1, #1
 8009ee2:	ee31 1a22 	vadd.f32	s2, s2, s5
 8009ee6:	ee73 3a86 	vadd.f32	s7, s7, s12
 8009eea:	eef0 2a42 	vmov.f32	s5, s4
 8009eee:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8009ef2:	eeb0 2a61 	vmov.f32	s4, s3
 8009ef6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8009efa:	eef0 1a47 	vmov.f32	s3, s14
 8009efe:	d1e3      	bne.n	8009ec8 <arm_correlate_f32+0x298>
 8009f00:	eb08 0107 	add.w	r1, r8, r7
 8009f04:	19c8      	adds	r0, r1, r7
 8009f06:	3510      	adds	r5, #16
 8009f08:	ed88 1a00 	vstr	s2, [r8]
 8009f0c:	4575      	cmp	r5, lr
 8009f0e:	eb00 0807 	add.w	r8, r0, r7
 8009f12:	edc1 3a00 	vstr	s7, [r1]
 8009f16:	edc0 4a00 	vstr	s9, [r0]
 8009f1a:	edc8 5a00 	vstr	s11, [r8]
 8009f1e:	44b8      	add	r8, r7
 8009f20:	f47f af62 	bne.w	8009de8 <arm_correlate_f32+0x1b8>
 8009f24:	f8dd c014 	ldr.w	ip, [sp, #20]
 8009f28:	9802      	ldr	r0, [sp, #8]
 8009f2a:	9c01      	ldr	r4, [sp, #4]
 8009f2c:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8009f30:	9e04      	ldr	r6, [sp, #16]
 8009f32:	00b9      	lsls	r1, r7, #2
 8009f34:	4460      	add	r0, ip
 8009f36:	4605      	mov	r5, r0
 8009f38:	fb04 ee01 	mla	lr, r4, r1, lr
 8009f3c:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8009f40:	9900      	ldr	r1, [sp, #0]
 8009f42:	f011 0103 	ands.w	r1, r1, #3
 8009f46:	9101      	str	r1, [sp, #4]
 8009f48:	d064      	beq.n	800a014 <arm_correlate_f32+0x3e4>
 8009f4a:	ea4f 0b93 	mov.w	fp, r3, lsr #2
 8009f4e:	3101      	adds	r1, #1
 8009f50:	4441      	add	r1, r8
 8009f52:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8009f56:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8009f5a:	f108 0801 	add.w	r8, r8, #1
 8009f5e:	f003 0003 	and.w	r0, r3, #3
 8009f62:	f102 0410 	add.w	r4, r2, #16
 8009f66:	eb02 030a 	add.w	r3, r2, sl
 8009f6a:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
 8009f6e:	46f1      	mov	r9, lr
 8009f70:	f8cd e008 	str.w	lr, [sp, #8]
 8009f74:	9603      	str	r6, [sp, #12]
 8009f76:	f8cd c010 	str.w	ip, [sp, #16]
 8009f7a:	460e      	mov	r6, r1
 8009f7c:	469c      	mov	ip, r3
 8009f7e:	46a6      	mov	lr, r4
 8009f80:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 8009e10 <arm_correlate_f32+0x1e0>
 8009f84:	f105 0110 	add.w	r1, r5, #16
 8009f88:	4673      	mov	r3, lr
 8009f8a:	465c      	mov	r4, fp
 8009f8c:	ed53 6a04 	vldr	s13, [r3, #-16]
 8009f90:	ed11 4a04 	vldr	s8, [r1, #-16]
 8009f94:	ed51 3a03 	vldr	s7, [r1, #-12]
 8009f98:	ed13 5a03 	vldr	s10, [r3, #-12]
 8009f9c:	ed51 4a02 	vldr	s9, [r1, #-8]
 8009fa0:	ed13 6a02 	vldr	s12, [r3, #-8]
 8009fa4:	ed51 5a01 	vldr	s11, [r1, #-4]
 8009fa8:	ed13 7a01 	vldr	s14, [r3, #-4]
 8009fac:	ee24 4a26 	vmul.f32	s8, s8, s13
 8009fb0:	ee23 5a85 	vmul.f32	s10, s7, s10
 8009fb4:	ee74 6a27 	vadd.f32	s13, s8, s15
 8009fb8:	ee24 6a86 	vmul.f32	s12, s9, s12
 8009fbc:	ee75 6a26 	vadd.f32	s13, s10, s13
 8009fc0:	ee25 7a87 	vmul.f32	s14, s11, s14
 8009fc4:	ee76 7a26 	vadd.f32	s15, s12, s13
 8009fc8:	3c01      	subs	r4, #1
 8009fca:	f101 0110 	add.w	r1, r1, #16
 8009fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fd2:	f103 0310 	add.w	r3, r3, #16
 8009fd6:	d1d9      	bne.n	8009f8c <arm_correlate_f32+0x35c>
 8009fd8:	4455      	add	r5, sl
 8009fda:	b158      	cbz	r0, 8009ff4 <arm_correlate_f32+0x3c4>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	4661      	mov	r1, ip
 8009fe0:	ecf5 6a01 	vldmia	r5!, {s13}
 8009fe4:	ecb1 7a01 	vldmia	r1!, {s14}
 8009fe8:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009fec:	3b01      	subs	r3, #1
 8009fee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ff2:	d1f5      	bne.n	8009fe0 <arm_correlate_f32+0x3b0>
 8009ff4:	4645      	mov	r5, r8
 8009ff6:	f108 0804 	add.w	r8, r8, #4
 8009ffa:	45b0      	cmp	r8, r6
 8009ffc:	edc9 7a00 	vstr	s15, [r9]
 800a000:	44b9      	add	r9, r7
 800a002:	d1bd      	bne.n	8009f80 <arm_correlate_f32+0x350>
 800a004:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a008:	9b01      	ldr	r3, [sp, #4]
 800a00a:	9e03      	ldr	r6, [sp, #12]
 800a00c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800a010:	fb07 ee03 	mla	lr, r7, r3, lr
 800a014:	9b00      	ldr	r3, [sp, #0]
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	449c      	add	ip, r3
 800a01a:	2e00      	cmp	r6, #0
 800a01c:	f43f aeb4 	beq.w	8009d88 <arm_correlate_f32+0x158>
 800a020:	08b4      	lsrs	r4, r6, #2
 800a022:	ed5f 7a85 	vldr	s15, [pc, #-532]	; 8009e10 <arm_correlate_f32+0x1e0>
 800a026:	d047      	beq.n	800a0b8 <arm_correlate_f32+0x488>
 800a028:	f10c 0110 	add.w	r1, ip, #16
 800a02c:	f102 0310 	add.w	r3, r2, #16
 800a030:	4620      	mov	r0, r4
 800a032:	ed53 6a04 	vldr	s13, [r3, #-16]
 800a036:	ed11 4a04 	vldr	s8, [r1, #-16]
 800a03a:	ed51 3a03 	vldr	s7, [r1, #-12]
 800a03e:	ed13 5a03 	vldr	s10, [r3, #-12]
 800a042:	ed51 4a02 	vldr	s9, [r1, #-8]
 800a046:	ed13 6a02 	vldr	s12, [r3, #-8]
 800a04a:	ed51 5a01 	vldr	s11, [r1, #-4]
 800a04e:	ed13 7a01 	vldr	s14, [r3, #-4]
 800a052:	ee24 4a26 	vmul.f32	s8, s8, s13
 800a056:	ee23 5a85 	vmul.f32	s10, s7, s10
 800a05a:	ee74 6a27 	vadd.f32	s13, s8, s15
 800a05e:	ee24 6a86 	vmul.f32	s12, s9, s12
 800a062:	ee75 6a26 	vadd.f32	s13, s10, s13
 800a066:	ee25 7a87 	vmul.f32	s14, s11, s14
 800a06a:	ee76 7a26 	vadd.f32	s15, s12, s13
 800a06e:	3801      	subs	r0, #1
 800a070:	f101 0110 	add.w	r1, r1, #16
 800a074:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a078:	f103 0310 	add.w	r3, r3, #16
 800a07c:	d1d9      	bne.n	800a032 <arm_correlate_f32+0x402>
 800a07e:	0121      	lsls	r1, r4, #4
 800a080:	eb0c 0001 	add.w	r0, ip, r1
 800a084:	4411      	add	r1, r2
 800a086:	f016 0303 	ands.w	r3, r6, #3
 800a08a:	d009      	beq.n	800a0a0 <arm_correlate_f32+0x470>
 800a08c:	ecf0 6a01 	vldmia	r0!, {s13}
 800a090:	ecb1 7a01 	vldmia	r1!, {s14}
 800a094:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a098:	3b01      	subs	r3, #1
 800a09a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a09e:	d1f5      	bne.n	800a08c <arm_correlate_f32+0x45c>
 800a0a0:	3e01      	subs	r6, #1
 800a0a2:	edce 7a00 	vstr	s15, [lr]
 800a0a6:	f10c 0c04 	add.w	ip, ip, #4
 800a0aa:	44be      	add	lr, r7
 800a0ac:	f43f ae6c 	beq.w	8009d88 <arm_correlate_f32+0x158>
 800a0b0:	08b4      	lsrs	r4, r6, #2
 800a0b2:	ed5f 7aa9 	vldr	s15, [pc, #-676]	; 8009e10 <arm_correlate_f32+0x1e0>
 800a0b6:	d1b7      	bne.n	800a028 <arm_correlate_f32+0x3f8>
 800a0b8:	4611      	mov	r1, r2
 800a0ba:	4660      	mov	r0, ip
 800a0bc:	e7e3      	b.n	800a086 <arm_correlate_f32+0x456>
 800a0be:	460b      	mov	r3, r1
 800a0c0:	e7aa      	b.n	800a018 <arm_correlate_f32+0x3e8>
 800a0c2:	4688      	mov	r8, r1
 800a0c4:	4665      	mov	r5, ip
 800a0c6:	e73b      	b.n	8009f40 <arm_correlate_f32+0x310>
 800a0c8:	9900      	ldr	r1, [sp, #0]
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	4673      	mov	r3, lr
 800a0ce:	3901      	subs	r1, #1
 800a0d0:	6018      	str	r0, [r3, #0]
 800a0d2:	443b      	add	r3, r7
 800a0d4:	d1fb      	bne.n	800a0ce <arm_correlate_f32+0x49e>
 800a0d6:	9900      	ldr	r1, [sp, #0]
 800a0d8:	fb07 ee01 	mla	lr, r7, r1, lr
 800a0dc:	008b      	lsls	r3, r1, #2
 800a0de:	e79b      	b.n	800a018 <arm_correlate_f32+0x3e8>
 800a0e0:	9b00      	ldr	r3, [sp, #0]
 800a0e2:	ed5f 6ab5 	vldr	s13, [pc, #-724]	; 8009e10 <arm_correlate_f32+0x1e0>
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	eb0c 0403 	add.w	r4, ip, r3
 800a0ec:	4660      	mov	r0, ip
 800a0ee:	4671      	mov	r1, lr
 800a0f0:	ecb0 7a01 	vldmia	r0!, {s14}
 800a0f4:	edd2 7a00 	vldr	s15, [r2]
 800a0f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0fc:	42a0      	cmp	r0, r4
 800a0fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a102:	edc1 7a00 	vstr	s15, [r1]
 800a106:	4439      	add	r1, r7
 800a108:	d1f2      	bne.n	800a0f0 <arm_correlate_f32+0x4c0>
 800a10a:	e636      	b.n	8009d7a <arm_correlate_f32+0x14a>
 800a10c:	ed5f 5ac0 	vldr	s11, [pc, #-768]	; 8009e10 <arm_correlate_f32+0x1e0>
 800a110:	eb0c 0403 	add.w	r4, ip, r3
 800a114:	4661      	mov	r1, ip
 800a116:	4670      	mov	r0, lr
 800a118:	ed91 6a00 	vldr	s12, [r1]
 800a11c:	ed92 7a00 	vldr	s14, [r2]
 800a120:	edd1 6a01 	vldr	s13, [r1, #4]
 800a124:	edd2 7a01 	vldr	s15, [r2, #4]
 800a128:	3104      	adds	r1, #4
 800a12a:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a12e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a132:	ee37 7a25 	vadd.f32	s14, s14, s11
 800a136:	42a1      	cmp	r1, r4
 800a138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a13c:	edc0 7a00 	vstr	s15, [r0]
 800a140:	4438      	add	r0, r7
 800a142:	d1e9      	bne.n	800a118 <arm_correlate_f32+0x4e8>
 800a144:	e619      	b.n	8009d7a <arm_correlate_f32+0x14a>
 800a146:	4664      	mov	r4, ip
 800a148:	e5da      	b.n	8009d00 <arm_correlate_f32+0xd0>
 800a14a:	bf00      	nop

0800a14c <arm_biquad_cascade_df1_init_f32>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4604      	mov	r4, r0
 800a150:	6082      	str	r2, [r0, #8]
 800a152:	6001      	str	r1, [r0, #0]
 800a154:	461d      	mov	r5, r3
 800a156:	010a      	lsls	r2, r1, #4
 800a158:	4618      	mov	r0, r3
 800a15a:	2100      	movs	r1, #0
 800a15c:	f000 f950 	bl	800a400 <memset>
 800a160:	6065      	str	r5, [r4, #4]
 800a162:	bd38      	pop	{r3, r4, r5, pc}

0800a164 <arm_biquad_cascade_df1_f32>:
 800a164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a168:	ed2d 8b02 	vpush	{d8}
 800a16c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800a170:	6886      	ldr	r6, [r0, #8]
 800a172:	6845      	ldr	r5, [r0, #4]
 800a174:	6807      	ldr	r7, [r0, #0]
 800a176:	4696      	mov	lr, r2
 800a178:	ea4f 180c 	mov.w	r8, ip, lsl #4
 800a17c:	f003 0203 	and.w	r2, r3, #3
 800a180:	eb0e 0908 	add.w	r9, lr, r8
 800a184:	3614      	adds	r6, #20
 800a186:	3510      	adds	r5, #16
 800a188:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800a18c:	ed56 1a04 	vldr	s3, [r6, #-16]
 800a190:	ed16 1a03 	vldr	s2, [r6, #-12]
 800a194:	ed56 0a02 	vldr	s1, [r6, #-8]
 800a198:	ed16 0a01 	vldr	s0, [r6, #-4]
 800a19c:	ed15 8a04 	vldr	s16, [r5, #-16]
 800a1a0:	ed55 8a03 	vldr	s17, [r5, #-12]
 800a1a4:	ed15 7a02 	vldr	s14, [r5, #-8]
 800a1a8:	ed55 7a01 	vldr	s15, [r5, #-4]
 800a1ac:	f1bc 0f00 	cmp.w	ip, #0
 800a1b0:	f000 80a5 	beq.w	800a2fe <arm_biquad_cascade_df1_f32+0x19a>
 800a1b4:	f101 0010 	add.w	r0, r1, #16
 800a1b8:	f10e 0310 	add.w	r3, lr, #16
 800a1bc:	4664      	mov	r4, ip
 800a1be:	ed50 3a04 	vldr	s7, [r0, #-16]
 800a1c2:	ee21 6a88 	vmul.f32	s12, s3, s16
 800a1c6:	ee22 5a23 	vmul.f32	s10, s4, s7
 800a1ca:	ee61 8a28 	vmul.f32	s17, s2, s17
 800a1ce:	ee35 6a06 	vadd.f32	s12, s10, s12
 800a1d2:	ee60 6a87 	vmul.f32	s13, s1, s14
 800a1d6:	ee36 6a28 	vadd.f32	s12, s12, s17
 800a1da:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a1de:	ee76 5a26 	vadd.f32	s11, s12, s13
 800a1e2:	ee61 6aa3 	vmul.f32	s13, s3, s7
 800a1e6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800a1ea:	ee21 8a08 	vmul.f32	s16, s2, s16
 800a1ee:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a1f2:	ed50 2a03 	vldr	s5, [r0, #-12]
 800a1f6:	ee22 6a22 	vmul.f32	s12, s4, s5
 800a1fa:	ee60 5aa7 	vmul.f32	s11, s1, s15
 800a1fe:	ee36 6a26 	vadd.f32	s12, s12, s13
 800a202:	ee20 7a07 	vmul.f32	s14, s0, s14
 800a206:	ee76 6a08 	vadd.f32	s13, s12, s16
 800a20a:	ee21 3aa2 	vmul.f32	s6, s3, s5
 800a20e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a212:	ee21 8a23 	vmul.f32	s16, s2, s7
 800a216:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a21a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a21e:	ed03 7a03 	vstr	s14, [r3, #-12]
 800a222:	ed50 8a02 	vldr	s17, [r0, #-8]
 800a226:	ee62 3a28 	vmul.f32	s7, s4, s17
 800a22a:	ee20 6a87 	vmul.f32	s12, s1, s14
 800a22e:	ee33 3a83 	vadd.f32	s6, s7, s6
 800a232:	ee21 4aa8 	vmul.f32	s8, s3, s17
 800a236:	ee73 6a08 	vadd.f32	s13, s6, s16
 800a23a:	ee61 2a22 	vmul.f32	s5, s2, s5
 800a23e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a242:	ee20 7a07 	vmul.f32	s14, s0, s14
 800a246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a24a:	3c01      	subs	r4, #1
 800a24c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a250:	ed10 8a01 	vldr	s16, [r0, #-4]
 800a254:	ee62 3a08 	vmul.f32	s7, s4, s16
 800a258:	ee60 6aa7 	vmul.f32	s13, s1, s15
 800a25c:	ee73 3a84 	vadd.f32	s7, s7, s8
 800a260:	f100 0010 	add.w	r0, r0, #16
 800a264:	ee33 4aa2 	vadd.f32	s8, s7, s5
 800a268:	f103 0310 	add.w	r3, r3, #16
 800a26c:	ee34 4a26 	vadd.f32	s8, s8, s13
 800a270:	ee34 7a07 	vadd.f32	s14, s8, s14
 800a274:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800a278:	d1a1      	bne.n	800a1be <arm_biquad_cascade_df1_f32+0x5a>
 800a27a:	4441      	add	r1, r8
 800a27c:	4648      	mov	r0, r9
 800a27e:	b3aa      	cbz	r2, 800a2ec <arm_biquad_cascade_df1_f32+0x188>
 800a280:	4613      	mov	r3, r2
 800a282:	e003      	b.n	800a28c <arm_biquad_cascade_df1_f32+0x128>
 800a284:	eeb0 7a45 	vmov.f32	s14, s10
 800a288:	eeb0 8a43 	vmov.f32	s16, s6
 800a28c:	ecb1 3a01 	vldmia	r1!, {s6}
 800a290:	ee21 6a88 	vmul.f32	s12, s3, s16
 800a294:	ee62 3a03 	vmul.f32	s7, s4, s6
 800a298:	ee61 8a28 	vmul.f32	s17, s2, s17
 800a29c:	ee33 4a86 	vadd.f32	s8, s7, s12
 800a2a0:	ee60 4a87 	vmul.f32	s9, s1, s14
 800a2a4:	ee34 6a28 	vadd.f32	s12, s8, s17
 800a2a8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a2ac:	ee76 4a24 	vadd.f32	s9, s12, s9
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800a2b6:	eef0 8a48 	vmov.f32	s17, s16
 800a2ba:	eef0 7a47 	vmov.f32	s15, s14
 800a2be:	eca0 5a01 	vstmia	r0!, {s10}
 800a2c2:	d1df      	bne.n	800a284 <arm_biquad_cascade_df1_f32+0x120>
 800a2c4:	3f01      	subs	r7, #1
 800a2c6:	ed05 3a04 	vstr	s6, [r5, #-16]
 800a2ca:	ed05 8a03 	vstr	s16, [r5, #-12]
 800a2ce:	ed05 5a02 	vstr	s10, [r5, #-8]
 800a2d2:	ed05 7a01 	vstr	s14, [r5, #-4]
 800a2d6:	f106 0614 	add.w	r6, r6, #20
 800a2da:	f105 0510 	add.w	r5, r5, #16
 800a2de:	4671      	mov	r1, lr
 800a2e0:	f47f af52 	bne.w	800a188 <arm_biquad_cascade_df1_f32+0x24>
 800a2e4:	ecbd 8b02 	vpop	{d8}
 800a2e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2ec:	eeb0 5a47 	vmov.f32	s10, s14
 800a2f0:	eeb0 3a48 	vmov.f32	s6, s16
 800a2f4:	eeb0 7a67 	vmov.f32	s14, s15
 800a2f8:	eeb0 8a68 	vmov.f32	s16, s17
 800a2fc:	e7e2      	b.n	800a2c4 <arm_biquad_cascade_df1_f32+0x160>
 800a2fe:	4670      	mov	r0, lr
 800a300:	e7bd      	b.n	800a27e <arm_biquad_cascade_df1_f32+0x11a>
 800a302:	bf00      	nop

0800a304 <arm_mult_f32>:
 800a304:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a306:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800a30a:	d033      	beq.n	800a374 <arm_mult_f32+0x70>
 800a30c:	f100 0610 	add.w	r6, r0, #16
 800a310:	f101 0510 	add.w	r5, r1, #16
 800a314:	f102 0410 	add.w	r4, r2, #16
 800a318:	4677      	mov	r7, lr
 800a31a:	ed16 6a04 	vldr	s12, [r6, #-16]
 800a31e:	ed55 4a04 	vldr	s9, [r5, #-16]
 800a322:	ed56 6a02 	vldr	s13, [r6, #-8]
 800a326:	ed15 5a02 	vldr	s10, [r5, #-8]
 800a32a:	ed16 7a03 	vldr	s14, [r6, #-12]
 800a32e:	ed55 5a03 	vldr	s11, [r5, #-12]
 800a332:	ed56 7a01 	vldr	s15, [r6, #-4]
 800a336:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a33a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a33e:	ed04 6a04 	vstr	s12, [r4, #-16]
 800a342:	ed15 6a01 	vldr	s12, [r5, #-4]
 800a346:	ed44 6a02 	vstr	s13, [r4, #-8]
 800a34a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a34e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a352:	3f01      	subs	r7, #1
 800a354:	ed04 7a03 	vstr	s14, [r4, #-12]
 800a358:	ed44 7a01 	vstr	s15, [r4, #-4]
 800a35c:	f106 0610 	add.w	r6, r6, #16
 800a360:	f105 0510 	add.w	r5, r5, #16
 800a364:	f104 0410 	add.w	r4, r4, #16
 800a368:	d1d7      	bne.n	800a31a <arm_mult_f32+0x16>
 800a36a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800a36e:	4420      	add	r0, r4
 800a370:	4421      	add	r1, r4
 800a372:	4422      	add	r2, r4
 800a374:	f013 0303 	ands.w	r3, r3, #3
 800a378:	d009      	beq.n	800a38e <arm_mult_f32+0x8a>
 800a37a:	ecf0 7a01 	vldmia	r0!, {s15}
 800a37e:	ecb1 7a01 	vldmia	r1!, {s14}
 800a382:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a386:	3b01      	subs	r3, #1
 800a388:	ece2 7a01 	vstmia	r2!, {s15}
 800a38c:	d1f5      	bne.n	800a37a <arm_mult_f32+0x76>
 800a38e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a390 <__errno>:
 800a390:	4b01      	ldr	r3, [pc, #4]	; (800a398 <__errno+0x8>)
 800a392:	6818      	ldr	r0, [r3, #0]
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	2000004c 	.word	0x2000004c

0800a39c <__libc_init_array>:
 800a39c:	b570      	push	{r4, r5, r6, lr}
 800a39e:	4d0d      	ldr	r5, [pc, #52]	; (800a3d4 <__libc_init_array+0x38>)
 800a3a0:	4c0d      	ldr	r4, [pc, #52]	; (800a3d8 <__libc_init_array+0x3c>)
 800a3a2:	1b64      	subs	r4, r4, r5
 800a3a4:	10a4      	asrs	r4, r4, #2
 800a3a6:	2600      	movs	r6, #0
 800a3a8:	42a6      	cmp	r6, r4
 800a3aa:	d109      	bne.n	800a3c0 <__libc_init_array+0x24>
 800a3ac:	4d0b      	ldr	r5, [pc, #44]	; (800a3dc <__libc_init_array+0x40>)
 800a3ae:	4c0c      	ldr	r4, [pc, #48]	; (800a3e0 <__libc_init_array+0x44>)
 800a3b0:	f004 fdf8 	bl	800efa4 <_init>
 800a3b4:	1b64      	subs	r4, r4, r5
 800a3b6:	10a4      	asrs	r4, r4, #2
 800a3b8:	2600      	movs	r6, #0
 800a3ba:	42a6      	cmp	r6, r4
 800a3bc:	d105      	bne.n	800a3ca <__libc_init_array+0x2e>
 800a3be:	bd70      	pop	{r4, r5, r6, pc}
 800a3c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3c4:	4798      	blx	r3
 800a3c6:	3601      	adds	r6, #1
 800a3c8:	e7ee      	b.n	800a3a8 <__libc_init_array+0xc>
 800a3ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ce:	4798      	blx	r3
 800a3d0:	3601      	adds	r6, #1
 800a3d2:	e7f2      	b.n	800a3ba <__libc_init_array+0x1e>
 800a3d4:	08011748 	.word	0x08011748
 800a3d8:	08011748 	.word	0x08011748
 800a3dc:	08011748 	.word	0x08011748
 800a3e0:	0801174c 	.word	0x0801174c

0800a3e4 <memcpy>:
 800a3e4:	440a      	add	r2, r1
 800a3e6:	4291      	cmp	r1, r2
 800a3e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a3ec:	d100      	bne.n	800a3f0 <memcpy+0xc>
 800a3ee:	4770      	bx	lr
 800a3f0:	b510      	push	{r4, lr}
 800a3f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3fa:	4291      	cmp	r1, r2
 800a3fc:	d1f9      	bne.n	800a3f2 <memcpy+0xe>
 800a3fe:	bd10      	pop	{r4, pc}

0800a400 <memset>:
 800a400:	4402      	add	r2, r0
 800a402:	4603      	mov	r3, r0
 800a404:	4293      	cmp	r3, r2
 800a406:	d100      	bne.n	800a40a <memset+0xa>
 800a408:	4770      	bx	lr
 800a40a:	f803 1b01 	strb.w	r1, [r3], #1
 800a40e:	e7f9      	b.n	800a404 <memset+0x4>

0800a410 <__cvt>:
 800a410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a414:	ec55 4b10 	vmov	r4, r5, d0
 800a418:	2d00      	cmp	r5, #0
 800a41a:	460e      	mov	r6, r1
 800a41c:	4619      	mov	r1, r3
 800a41e:	462b      	mov	r3, r5
 800a420:	bfbb      	ittet	lt
 800a422:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a426:	461d      	movlt	r5, r3
 800a428:	2300      	movge	r3, #0
 800a42a:	232d      	movlt	r3, #45	; 0x2d
 800a42c:	700b      	strb	r3, [r1, #0]
 800a42e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a430:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a434:	4691      	mov	r9, r2
 800a436:	f023 0820 	bic.w	r8, r3, #32
 800a43a:	bfbc      	itt	lt
 800a43c:	4622      	movlt	r2, r4
 800a43e:	4614      	movlt	r4, r2
 800a440:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a444:	d005      	beq.n	800a452 <__cvt+0x42>
 800a446:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a44a:	d100      	bne.n	800a44e <__cvt+0x3e>
 800a44c:	3601      	adds	r6, #1
 800a44e:	2102      	movs	r1, #2
 800a450:	e000      	b.n	800a454 <__cvt+0x44>
 800a452:	2103      	movs	r1, #3
 800a454:	ab03      	add	r3, sp, #12
 800a456:	9301      	str	r3, [sp, #4]
 800a458:	ab02      	add	r3, sp, #8
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	ec45 4b10 	vmov	d0, r4, r5
 800a460:	4653      	mov	r3, sl
 800a462:	4632      	mov	r2, r6
 800a464:	f000 fdac 	bl	800afc0 <_dtoa_r>
 800a468:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a46c:	4607      	mov	r7, r0
 800a46e:	d102      	bne.n	800a476 <__cvt+0x66>
 800a470:	f019 0f01 	tst.w	r9, #1
 800a474:	d022      	beq.n	800a4bc <__cvt+0xac>
 800a476:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a47a:	eb07 0906 	add.w	r9, r7, r6
 800a47e:	d110      	bne.n	800a4a2 <__cvt+0x92>
 800a480:	783b      	ldrb	r3, [r7, #0]
 800a482:	2b30      	cmp	r3, #48	; 0x30
 800a484:	d10a      	bne.n	800a49c <__cvt+0x8c>
 800a486:	2200      	movs	r2, #0
 800a488:	2300      	movs	r3, #0
 800a48a:	4620      	mov	r0, r4
 800a48c:	4629      	mov	r1, r5
 800a48e:	f7f6 fb1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a492:	b918      	cbnz	r0, 800a49c <__cvt+0x8c>
 800a494:	f1c6 0601 	rsb	r6, r6, #1
 800a498:	f8ca 6000 	str.w	r6, [sl]
 800a49c:	f8da 3000 	ldr.w	r3, [sl]
 800a4a0:	4499      	add	r9, r3
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	f7f6 fb0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4ae:	b108      	cbz	r0, 800a4b4 <__cvt+0xa4>
 800a4b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4b4:	2230      	movs	r2, #48	; 0x30
 800a4b6:	9b03      	ldr	r3, [sp, #12]
 800a4b8:	454b      	cmp	r3, r9
 800a4ba:	d307      	bcc.n	800a4cc <__cvt+0xbc>
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4c0:	1bdb      	subs	r3, r3, r7
 800a4c2:	4638      	mov	r0, r7
 800a4c4:	6013      	str	r3, [r2, #0]
 800a4c6:	b004      	add	sp, #16
 800a4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4cc:	1c59      	adds	r1, r3, #1
 800a4ce:	9103      	str	r1, [sp, #12]
 800a4d0:	701a      	strb	r2, [r3, #0]
 800a4d2:	e7f0      	b.n	800a4b6 <__cvt+0xa6>

0800a4d4 <__exponent>:
 800a4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2900      	cmp	r1, #0
 800a4da:	bfb8      	it	lt
 800a4dc:	4249      	neglt	r1, r1
 800a4de:	f803 2b02 	strb.w	r2, [r3], #2
 800a4e2:	bfb4      	ite	lt
 800a4e4:	222d      	movlt	r2, #45	; 0x2d
 800a4e6:	222b      	movge	r2, #43	; 0x2b
 800a4e8:	2909      	cmp	r1, #9
 800a4ea:	7042      	strb	r2, [r0, #1]
 800a4ec:	dd2a      	ble.n	800a544 <__exponent+0x70>
 800a4ee:	f10d 0407 	add.w	r4, sp, #7
 800a4f2:	46a4      	mov	ip, r4
 800a4f4:	270a      	movs	r7, #10
 800a4f6:	46a6      	mov	lr, r4
 800a4f8:	460a      	mov	r2, r1
 800a4fa:	fb91 f6f7 	sdiv	r6, r1, r7
 800a4fe:	fb07 1516 	mls	r5, r7, r6, r1
 800a502:	3530      	adds	r5, #48	; 0x30
 800a504:	2a63      	cmp	r2, #99	; 0x63
 800a506:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a50a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a50e:	4631      	mov	r1, r6
 800a510:	dcf1      	bgt.n	800a4f6 <__exponent+0x22>
 800a512:	3130      	adds	r1, #48	; 0x30
 800a514:	f1ae 0502 	sub.w	r5, lr, #2
 800a518:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a51c:	1c44      	adds	r4, r0, #1
 800a51e:	4629      	mov	r1, r5
 800a520:	4561      	cmp	r1, ip
 800a522:	d30a      	bcc.n	800a53a <__exponent+0x66>
 800a524:	f10d 0209 	add.w	r2, sp, #9
 800a528:	eba2 020e 	sub.w	r2, r2, lr
 800a52c:	4565      	cmp	r5, ip
 800a52e:	bf88      	it	hi
 800a530:	2200      	movhi	r2, #0
 800a532:	4413      	add	r3, r2
 800a534:	1a18      	subs	r0, r3, r0
 800a536:	b003      	add	sp, #12
 800a538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a53a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a53e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a542:	e7ed      	b.n	800a520 <__exponent+0x4c>
 800a544:	2330      	movs	r3, #48	; 0x30
 800a546:	3130      	adds	r1, #48	; 0x30
 800a548:	7083      	strb	r3, [r0, #2]
 800a54a:	70c1      	strb	r1, [r0, #3]
 800a54c:	1d03      	adds	r3, r0, #4
 800a54e:	e7f1      	b.n	800a534 <__exponent+0x60>

0800a550 <_printf_float>:
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	ed2d 8b02 	vpush	{d8}
 800a558:	b08d      	sub	sp, #52	; 0x34
 800a55a:	460c      	mov	r4, r1
 800a55c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a560:	4616      	mov	r6, r2
 800a562:	461f      	mov	r7, r3
 800a564:	4605      	mov	r5, r0
 800a566:	f001 fccf 	bl	800bf08 <_localeconv_r>
 800a56a:	f8d0 a000 	ldr.w	sl, [r0]
 800a56e:	4650      	mov	r0, sl
 800a570:	f7f5 fe2e 	bl	80001d0 <strlen>
 800a574:	2300      	movs	r3, #0
 800a576:	930a      	str	r3, [sp, #40]	; 0x28
 800a578:	6823      	ldr	r3, [r4, #0]
 800a57a:	9305      	str	r3, [sp, #20]
 800a57c:	f8d8 3000 	ldr.w	r3, [r8]
 800a580:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a584:	3307      	adds	r3, #7
 800a586:	f023 0307 	bic.w	r3, r3, #7
 800a58a:	f103 0208 	add.w	r2, r3, #8
 800a58e:	f8c8 2000 	str.w	r2, [r8]
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a59a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a59e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5a2:	9307      	str	r3, [sp, #28]
 800a5a4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a5a8:	ee08 0a10 	vmov	s16, r0
 800a5ac:	4b9f      	ldr	r3, [pc, #636]	; (800a82c <_printf_float+0x2dc>)
 800a5ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5b6:	f7f6 fab9 	bl	8000b2c <__aeabi_dcmpun>
 800a5ba:	bb88      	cbnz	r0, 800a620 <_printf_float+0xd0>
 800a5bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5c0:	4b9a      	ldr	r3, [pc, #616]	; (800a82c <_printf_float+0x2dc>)
 800a5c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5c6:	f7f6 fa93 	bl	8000af0 <__aeabi_dcmple>
 800a5ca:	bb48      	cbnz	r0, 800a620 <_printf_float+0xd0>
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	4640      	mov	r0, r8
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	f7f6 fa82 	bl	8000adc <__aeabi_dcmplt>
 800a5d8:	b110      	cbz	r0, 800a5e0 <_printf_float+0x90>
 800a5da:	232d      	movs	r3, #45	; 0x2d
 800a5dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5e0:	4b93      	ldr	r3, [pc, #588]	; (800a830 <_printf_float+0x2e0>)
 800a5e2:	4894      	ldr	r0, [pc, #592]	; (800a834 <_printf_float+0x2e4>)
 800a5e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a5e8:	bf94      	ite	ls
 800a5ea:	4698      	movls	r8, r3
 800a5ec:	4680      	movhi	r8, r0
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	6123      	str	r3, [r4, #16]
 800a5f2:	9b05      	ldr	r3, [sp, #20]
 800a5f4:	f023 0204 	bic.w	r2, r3, #4
 800a5f8:	6022      	str	r2, [r4, #0]
 800a5fa:	f04f 0900 	mov.w	r9, #0
 800a5fe:	9700      	str	r7, [sp, #0]
 800a600:	4633      	mov	r3, r6
 800a602:	aa0b      	add	r2, sp, #44	; 0x2c
 800a604:	4621      	mov	r1, r4
 800a606:	4628      	mov	r0, r5
 800a608:	f000 f9d8 	bl	800a9bc <_printf_common>
 800a60c:	3001      	adds	r0, #1
 800a60e:	f040 8090 	bne.w	800a732 <_printf_float+0x1e2>
 800a612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a616:	b00d      	add	sp, #52	; 0x34
 800a618:	ecbd 8b02 	vpop	{d8}
 800a61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a620:	4642      	mov	r2, r8
 800a622:	464b      	mov	r3, r9
 800a624:	4640      	mov	r0, r8
 800a626:	4649      	mov	r1, r9
 800a628:	f7f6 fa80 	bl	8000b2c <__aeabi_dcmpun>
 800a62c:	b140      	cbz	r0, 800a640 <_printf_float+0xf0>
 800a62e:	464b      	mov	r3, r9
 800a630:	2b00      	cmp	r3, #0
 800a632:	bfbc      	itt	lt
 800a634:	232d      	movlt	r3, #45	; 0x2d
 800a636:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a63a:	487f      	ldr	r0, [pc, #508]	; (800a838 <_printf_float+0x2e8>)
 800a63c:	4b7f      	ldr	r3, [pc, #508]	; (800a83c <_printf_float+0x2ec>)
 800a63e:	e7d1      	b.n	800a5e4 <_printf_float+0x94>
 800a640:	6863      	ldr	r3, [r4, #4]
 800a642:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a646:	9206      	str	r2, [sp, #24]
 800a648:	1c5a      	adds	r2, r3, #1
 800a64a:	d13f      	bne.n	800a6cc <_printf_float+0x17c>
 800a64c:	2306      	movs	r3, #6
 800a64e:	6063      	str	r3, [r4, #4]
 800a650:	9b05      	ldr	r3, [sp, #20]
 800a652:	6861      	ldr	r1, [r4, #4]
 800a654:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a658:	2300      	movs	r3, #0
 800a65a:	9303      	str	r3, [sp, #12]
 800a65c:	ab0a      	add	r3, sp, #40	; 0x28
 800a65e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a662:	ab09      	add	r3, sp, #36	; 0x24
 800a664:	ec49 8b10 	vmov	d0, r8, r9
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	6022      	str	r2, [r4, #0]
 800a66c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a670:	4628      	mov	r0, r5
 800a672:	f7ff fecd 	bl	800a410 <__cvt>
 800a676:	9b06      	ldr	r3, [sp, #24]
 800a678:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a67a:	2b47      	cmp	r3, #71	; 0x47
 800a67c:	4680      	mov	r8, r0
 800a67e:	d108      	bne.n	800a692 <_printf_float+0x142>
 800a680:	1cc8      	adds	r0, r1, #3
 800a682:	db02      	blt.n	800a68a <_printf_float+0x13a>
 800a684:	6863      	ldr	r3, [r4, #4]
 800a686:	4299      	cmp	r1, r3
 800a688:	dd41      	ble.n	800a70e <_printf_float+0x1be>
 800a68a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a68e:	fa5f fb8b 	uxtb.w	fp, fp
 800a692:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a696:	d820      	bhi.n	800a6da <_printf_float+0x18a>
 800a698:	3901      	subs	r1, #1
 800a69a:	465a      	mov	r2, fp
 800a69c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a6a0:	9109      	str	r1, [sp, #36]	; 0x24
 800a6a2:	f7ff ff17 	bl	800a4d4 <__exponent>
 800a6a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6a8:	1813      	adds	r3, r2, r0
 800a6aa:	2a01      	cmp	r2, #1
 800a6ac:	4681      	mov	r9, r0
 800a6ae:	6123      	str	r3, [r4, #16]
 800a6b0:	dc02      	bgt.n	800a6b8 <_printf_float+0x168>
 800a6b2:	6822      	ldr	r2, [r4, #0]
 800a6b4:	07d2      	lsls	r2, r2, #31
 800a6b6:	d501      	bpl.n	800a6bc <_printf_float+0x16c>
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	6123      	str	r3, [r4, #16]
 800a6bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d09c      	beq.n	800a5fe <_printf_float+0xae>
 800a6c4:	232d      	movs	r3, #45	; 0x2d
 800a6c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6ca:	e798      	b.n	800a5fe <_printf_float+0xae>
 800a6cc:	9a06      	ldr	r2, [sp, #24]
 800a6ce:	2a47      	cmp	r2, #71	; 0x47
 800a6d0:	d1be      	bne.n	800a650 <_printf_float+0x100>
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d1bc      	bne.n	800a650 <_printf_float+0x100>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e7b9      	b.n	800a64e <_printf_float+0xfe>
 800a6da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a6de:	d118      	bne.n	800a712 <_printf_float+0x1c2>
 800a6e0:	2900      	cmp	r1, #0
 800a6e2:	6863      	ldr	r3, [r4, #4]
 800a6e4:	dd0b      	ble.n	800a6fe <_printf_float+0x1ae>
 800a6e6:	6121      	str	r1, [r4, #16]
 800a6e8:	b913      	cbnz	r3, 800a6f0 <_printf_float+0x1a0>
 800a6ea:	6822      	ldr	r2, [r4, #0]
 800a6ec:	07d0      	lsls	r0, r2, #31
 800a6ee:	d502      	bpl.n	800a6f6 <_printf_float+0x1a6>
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	440b      	add	r3, r1
 800a6f4:	6123      	str	r3, [r4, #16]
 800a6f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a6f8:	f04f 0900 	mov.w	r9, #0
 800a6fc:	e7de      	b.n	800a6bc <_printf_float+0x16c>
 800a6fe:	b913      	cbnz	r3, 800a706 <_printf_float+0x1b6>
 800a700:	6822      	ldr	r2, [r4, #0]
 800a702:	07d2      	lsls	r2, r2, #31
 800a704:	d501      	bpl.n	800a70a <_printf_float+0x1ba>
 800a706:	3302      	adds	r3, #2
 800a708:	e7f4      	b.n	800a6f4 <_printf_float+0x1a4>
 800a70a:	2301      	movs	r3, #1
 800a70c:	e7f2      	b.n	800a6f4 <_printf_float+0x1a4>
 800a70e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a714:	4299      	cmp	r1, r3
 800a716:	db05      	blt.n	800a724 <_printf_float+0x1d4>
 800a718:	6823      	ldr	r3, [r4, #0]
 800a71a:	6121      	str	r1, [r4, #16]
 800a71c:	07d8      	lsls	r0, r3, #31
 800a71e:	d5ea      	bpl.n	800a6f6 <_printf_float+0x1a6>
 800a720:	1c4b      	adds	r3, r1, #1
 800a722:	e7e7      	b.n	800a6f4 <_printf_float+0x1a4>
 800a724:	2900      	cmp	r1, #0
 800a726:	bfd4      	ite	le
 800a728:	f1c1 0202 	rsble	r2, r1, #2
 800a72c:	2201      	movgt	r2, #1
 800a72e:	4413      	add	r3, r2
 800a730:	e7e0      	b.n	800a6f4 <_printf_float+0x1a4>
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	055a      	lsls	r2, r3, #21
 800a736:	d407      	bmi.n	800a748 <_printf_float+0x1f8>
 800a738:	6923      	ldr	r3, [r4, #16]
 800a73a:	4642      	mov	r2, r8
 800a73c:	4631      	mov	r1, r6
 800a73e:	4628      	mov	r0, r5
 800a740:	47b8      	blx	r7
 800a742:	3001      	adds	r0, #1
 800a744:	d12c      	bne.n	800a7a0 <_printf_float+0x250>
 800a746:	e764      	b.n	800a612 <_printf_float+0xc2>
 800a748:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a74c:	f240 80e0 	bls.w	800a910 <_printf_float+0x3c0>
 800a750:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a754:	2200      	movs	r2, #0
 800a756:	2300      	movs	r3, #0
 800a758:	f7f6 f9b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	d034      	beq.n	800a7ca <_printf_float+0x27a>
 800a760:	4a37      	ldr	r2, [pc, #220]	; (800a840 <_printf_float+0x2f0>)
 800a762:	2301      	movs	r3, #1
 800a764:	4631      	mov	r1, r6
 800a766:	4628      	mov	r0, r5
 800a768:	47b8      	blx	r7
 800a76a:	3001      	adds	r0, #1
 800a76c:	f43f af51 	beq.w	800a612 <_printf_float+0xc2>
 800a770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a774:	429a      	cmp	r2, r3
 800a776:	db02      	blt.n	800a77e <_printf_float+0x22e>
 800a778:	6823      	ldr	r3, [r4, #0]
 800a77a:	07d8      	lsls	r0, r3, #31
 800a77c:	d510      	bpl.n	800a7a0 <_printf_float+0x250>
 800a77e:	ee18 3a10 	vmov	r3, s16
 800a782:	4652      	mov	r2, sl
 800a784:	4631      	mov	r1, r6
 800a786:	4628      	mov	r0, r5
 800a788:	47b8      	blx	r7
 800a78a:	3001      	adds	r0, #1
 800a78c:	f43f af41 	beq.w	800a612 <_printf_float+0xc2>
 800a790:	f04f 0800 	mov.w	r8, #0
 800a794:	f104 091a 	add.w	r9, r4, #26
 800a798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a79a:	3b01      	subs	r3, #1
 800a79c:	4543      	cmp	r3, r8
 800a79e:	dc09      	bgt.n	800a7b4 <_printf_float+0x264>
 800a7a0:	6823      	ldr	r3, [r4, #0]
 800a7a2:	079b      	lsls	r3, r3, #30
 800a7a4:	f100 8105 	bmi.w	800a9b2 <_printf_float+0x462>
 800a7a8:	68e0      	ldr	r0, [r4, #12]
 800a7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7ac:	4298      	cmp	r0, r3
 800a7ae:	bfb8      	it	lt
 800a7b0:	4618      	movlt	r0, r3
 800a7b2:	e730      	b.n	800a616 <_printf_float+0xc6>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	464a      	mov	r2, r9
 800a7b8:	4631      	mov	r1, r6
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	47b8      	blx	r7
 800a7be:	3001      	adds	r0, #1
 800a7c0:	f43f af27 	beq.w	800a612 <_printf_float+0xc2>
 800a7c4:	f108 0801 	add.w	r8, r8, #1
 800a7c8:	e7e6      	b.n	800a798 <_printf_float+0x248>
 800a7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	dc39      	bgt.n	800a844 <_printf_float+0x2f4>
 800a7d0:	4a1b      	ldr	r2, [pc, #108]	; (800a840 <_printf_float+0x2f0>)
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	4631      	mov	r1, r6
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	47b8      	blx	r7
 800a7da:	3001      	adds	r0, #1
 800a7dc:	f43f af19 	beq.w	800a612 <_printf_float+0xc2>
 800a7e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	d102      	bne.n	800a7ee <_printf_float+0x29e>
 800a7e8:	6823      	ldr	r3, [r4, #0]
 800a7ea:	07d9      	lsls	r1, r3, #31
 800a7ec:	d5d8      	bpl.n	800a7a0 <_printf_float+0x250>
 800a7ee:	ee18 3a10 	vmov	r3, s16
 800a7f2:	4652      	mov	r2, sl
 800a7f4:	4631      	mov	r1, r6
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	47b8      	blx	r7
 800a7fa:	3001      	adds	r0, #1
 800a7fc:	f43f af09 	beq.w	800a612 <_printf_float+0xc2>
 800a800:	f04f 0900 	mov.w	r9, #0
 800a804:	f104 0a1a 	add.w	sl, r4, #26
 800a808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80a:	425b      	negs	r3, r3
 800a80c:	454b      	cmp	r3, r9
 800a80e:	dc01      	bgt.n	800a814 <_printf_float+0x2c4>
 800a810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a812:	e792      	b.n	800a73a <_printf_float+0x1ea>
 800a814:	2301      	movs	r3, #1
 800a816:	4652      	mov	r2, sl
 800a818:	4631      	mov	r1, r6
 800a81a:	4628      	mov	r0, r5
 800a81c:	47b8      	blx	r7
 800a81e:	3001      	adds	r0, #1
 800a820:	f43f aef7 	beq.w	800a612 <_printf_float+0xc2>
 800a824:	f109 0901 	add.w	r9, r9, #1
 800a828:	e7ee      	b.n	800a808 <_printf_float+0x2b8>
 800a82a:	bf00      	nop
 800a82c:	7fefffff 	.word	0x7fefffff
 800a830:	08011120 	.word	0x08011120
 800a834:	08011124 	.word	0x08011124
 800a838:	0801112c 	.word	0x0801112c
 800a83c:	08011128 	.word	0x08011128
 800a840:	08011130 	.word	0x08011130
 800a844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a846:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a848:	429a      	cmp	r2, r3
 800a84a:	bfa8      	it	ge
 800a84c:	461a      	movge	r2, r3
 800a84e:	2a00      	cmp	r2, #0
 800a850:	4691      	mov	r9, r2
 800a852:	dc37      	bgt.n	800a8c4 <_printf_float+0x374>
 800a854:	f04f 0b00 	mov.w	fp, #0
 800a858:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a85c:	f104 021a 	add.w	r2, r4, #26
 800a860:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a862:	9305      	str	r3, [sp, #20]
 800a864:	eba3 0309 	sub.w	r3, r3, r9
 800a868:	455b      	cmp	r3, fp
 800a86a:	dc33      	bgt.n	800a8d4 <_printf_float+0x384>
 800a86c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a870:	429a      	cmp	r2, r3
 800a872:	db3b      	blt.n	800a8ec <_printf_float+0x39c>
 800a874:	6823      	ldr	r3, [r4, #0]
 800a876:	07da      	lsls	r2, r3, #31
 800a878:	d438      	bmi.n	800a8ec <_printf_float+0x39c>
 800a87a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a87c:	9b05      	ldr	r3, [sp, #20]
 800a87e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	eba2 0901 	sub.w	r9, r2, r1
 800a886:	4599      	cmp	r9, r3
 800a888:	bfa8      	it	ge
 800a88a:	4699      	movge	r9, r3
 800a88c:	f1b9 0f00 	cmp.w	r9, #0
 800a890:	dc35      	bgt.n	800a8fe <_printf_float+0x3ae>
 800a892:	f04f 0800 	mov.w	r8, #0
 800a896:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a89a:	f104 0a1a 	add.w	sl, r4, #26
 800a89e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8a2:	1a9b      	subs	r3, r3, r2
 800a8a4:	eba3 0309 	sub.w	r3, r3, r9
 800a8a8:	4543      	cmp	r3, r8
 800a8aa:	f77f af79 	ble.w	800a7a0 <_printf_float+0x250>
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	4652      	mov	r2, sl
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	47b8      	blx	r7
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	f43f aeaa 	beq.w	800a612 <_printf_float+0xc2>
 800a8be:	f108 0801 	add.w	r8, r8, #1
 800a8c2:	e7ec      	b.n	800a89e <_printf_float+0x34e>
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	4631      	mov	r1, r6
 800a8c8:	4642      	mov	r2, r8
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	47b8      	blx	r7
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	d1c0      	bne.n	800a854 <_printf_float+0x304>
 800a8d2:	e69e      	b.n	800a612 <_printf_float+0xc2>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	4631      	mov	r1, r6
 800a8d8:	4628      	mov	r0, r5
 800a8da:	9205      	str	r2, [sp, #20]
 800a8dc:	47b8      	blx	r7
 800a8de:	3001      	adds	r0, #1
 800a8e0:	f43f ae97 	beq.w	800a612 <_printf_float+0xc2>
 800a8e4:	9a05      	ldr	r2, [sp, #20]
 800a8e6:	f10b 0b01 	add.w	fp, fp, #1
 800a8ea:	e7b9      	b.n	800a860 <_printf_float+0x310>
 800a8ec:	ee18 3a10 	vmov	r3, s16
 800a8f0:	4652      	mov	r2, sl
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	47b8      	blx	r7
 800a8f8:	3001      	adds	r0, #1
 800a8fa:	d1be      	bne.n	800a87a <_printf_float+0x32a>
 800a8fc:	e689      	b.n	800a612 <_printf_float+0xc2>
 800a8fe:	9a05      	ldr	r2, [sp, #20]
 800a900:	464b      	mov	r3, r9
 800a902:	4442      	add	r2, r8
 800a904:	4631      	mov	r1, r6
 800a906:	4628      	mov	r0, r5
 800a908:	47b8      	blx	r7
 800a90a:	3001      	adds	r0, #1
 800a90c:	d1c1      	bne.n	800a892 <_printf_float+0x342>
 800a90e:	e680      	b.n	800a612 <_printf_float+0xc2>
 800a910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a912:	2a01      	cmp	r2, #1
 800a914:	dc01      	bgt.n	800a91a <_printf_float+0x3ca>
 800a916:	07db      	lsls	r3, r3, #31
 800a918:	d538      	bpl.n	800a98c <_printf_float+0x43c>
 800a91a:	2301      	movs	r3, #1
 800a91c:	4642      	mov	r2, r8
 800a91e:	4631      	mov	r1, r6
 800a920:	4628      	mov	r0, r5
 800a922:	47b8      	blx	r7
 800a924:	3001      	adds	r0, #1
 800a926:	f43f ae74 	beq.w	800a612 <_printf_float+0xc2>
 800a92a:	ee18 3a10 	vmov	r3, s16
 800a92e:	4652      	mov	r2, sl
 800a930:	4631      	mov	r1, r6
 800a932:	4628      	mov	r0, r5
 800a934:	47b8      	blx	r7
 800a936:	3001      	adds	r0, #1
 800a938:	f43f ae6b 	beq.w	800a612 <_printf_float+0xc2>
 800a93c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a940:	2200      	movs	r2, #0
 800a942:	2300      	movs	r3, #0
 800a944:	f7f6 f8c0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a948:	b9d8      	cbnz	r0, 800a982 <_printf_float+0x432>
 800a94a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a94c:	f108 0201 	add.w	r2, r8, #1
 800a950:	3b01      	subs	r3, #1
 800a952:	4631      	mov	r1, r6
 800a954:	4628      	mov	r0, r5
 800a956:	47b8      	blx	r7
 800a958:	3001      	adds	r0, #1
 800a95a:	d10e      	bne.n	800a97a <_printf_float+0x42a>
 800a95c:	e659      	b.n	800a612 <_printf_float+0xc2>
 800a95e:	2301      	movs	r3, #1
 800a960:	4652      	mov	r2, sl
 800a962:	4631      	mov	r1, r6
 800a964:	4628      	mov	r0, r5
 800a966:	47b8      	blx	r7
 800a968:	3001      	adds	r0, #1
 800a96a:	f43f ae52 	beq.w	800a612 <_printf_float+0xc2>
 800a96e:	f108 0801 	add.w	r8, r8, #1
 800a972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a974:	3b01      	subs	r3, #1
 800a976:	4543      	cmp	r3, r8
 800a978:	dcf1      	bgt.n	800a95e <_printf_float+0x40e>
 800a97a:	464b      	mov	r3, r9
 800a97c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a980:	e6dc      	b.n	800a73c <_printf_float+0x1ec>
 800a982:	f04f 0800 	mov.w	r8, #0
 800a986:	f104 0a1a 	add.w	sl, r4, #26
 800a98a:	e7f2      	b.n	800a972 <_printf_float+0x422>
 800a98c:	2301      	movs	r3, #1
 800a98e:	4642      	mov	r2, r8
 800a990:	e7df      	b.n	800a952 <_printf_float+0x402>
 800a992:	2301      	movs	r3, #1
 800a994:	464a      	mov	r2, r9
 800a996:	4631      	mov	r1, r6
 800a998:	4628      	mov	r0, r5
 800a99a:	47b8      	blx	r7
 800a99c:	3001      	adds	r0, #1
 800a99e:	f43f ae38 	beq.w	800a612 <_printf_float+0xc2>
 800a9a2:	f108 0801 	add.w	r8, r8, #1
 800a9a6:	68e3      	ldr	r3, [r4, #12]
 800a9a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9aa:	1a5b      	subs	r3, r3, r1
 800a9ac:	4543      	cmp	r3, r8
 800a9ae:	dcf0      	bgt.n	800a992 <_printf_float+0x442>
 800a9b0:	e6fa      	b.n	800a7a8 <_printf_float+0x258>
 800a9b2:	f04f 0800 	mov.w	r8, #0
 800a9b6:	f104 0919 	add.w	r9, r4, #25
 800a9ba:	e7f4      	b.n	800a9a6 <_printf_float+0x456>

0800a9bc <_printf_common>:
 800a9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c0:	4616      	mov	r6, r2
 800a9c2:	4699      	mov	r9, r3
 800a9c4:	688a      	ldr	r2, [r1, #8]
 800a9c6:	690b      	ldr	r3, [r1, #16]
 800a9c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	bfb8      	it	lt
 800a9d0:	4613      	movlt	r3, r2
 800a9d2:	6033      	str	r3, [r6, #0]
 800a9d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9d8:	4607      	mov	r7, r0
 800a9da:	460c      	mov	r4, r1
 800a9dc:	b10a      	cbz	r2, 800a9e2 <_printf_common+0x26>
 800a9de:	3301      	adds	r3, #1
 800a9e0:	6033      	str	r3, [r6, #0]
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	0699      	lsls	r1, r3, #26
 800a9e6:	bf42      	ittt	mi
 800a9e8:	6833      	ldrmi	r3, [r6, #0]
 800a9ea:	3302      	addmi	r3, #2
 800a9ec:	6033      	strmi	r3, [r6, #0]
 800a9ee:	6825      	ldr	r5, [r4, #0]
 800a9f0:	f015 0506 	ands.w	r5, r5, #6
 800a9f4:	d106      	bne.n	800aa04 <_printf_common+0x48>
 800a9f6:	f104 0a19 	add.w	sl, r4, #25
 800a9fa:	68e3      	ldr	r3, [r4, #12]
 800a9fc:	6832      	ldr	r2, [r6, #0]
 800a9fe:	1a9b      	subs	r3, r3, r2
 800aa00:	42ab      	cmp	r3, r5
 800aa02:	dc26      	bgt.n	800aa52 <_printf_common+0x96>
 800aa04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa08:	1e13      	subs	r3, r2, #0
 800aa0a:	6822      	ldr	r2, [r4, #0]
 800aa0c:	bf18      	it	ne
 800aa0e:	2301      	movne	r3, #1
 800aa10:	0692      	lsls	r2, r2, #26
 800aa12:	d42b      	bmi.n	800aa6c <_printf_common+0xb0>
 800aa14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa18:	4649      	mov	r1, r9
 800aa1a:	4638      	mov	r0, r7
 800aa1c:	47c0      	blx	r8
 800aa1e:	3001      	adds	r0, #1
 800aa20:	d01e      	beq.n	800aa60 <_printf_common+0xa4>
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	68e5      	ldr	r5, [r4, #12]
 800aa26:	6832      	ldr	r2, [r6, #0]
 800aa28:	f003 0306 	and.w	r3, r3, #6
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	bf08      	it	eq
 800aa30:	1aad      	subeq	r5, r5, r2
 800aa32:	68a3      	ldr	r3, [r4, #8]
 800aa34:	6922      	ldr	r2, [r4, #16]
 800aa36:	bf0c      	ite	eq
 800aa38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa3c:	2500      	movne	r5, #0
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	bfc4      	itt	gt
 800aa42:	1a9b      	subgt	r3, r3, r2
 800aa44:	18ed      	addgt	r5, r5, r3
 800aa46:	2600      	movs	r6, #0
 800aa48:	341a      	adds	r4, #26
 800aa4a:	42b5      	cmp	r5, r6
 800aa4c:	d11a      	bne.n	800aa84 <_printf_common+0xc8>
 800aa4e:	2000      	movs	r0, #0
 800aa50:	e008      	b.n	800aa64 <_printf_common+0xa8>
 800aa52:	2301      	movs	r3, #1
 800aa54:	4652      	mov	r2, sl
 800aa56:	4649      	mov	r1, r9
 800aa58:	4638      	mov	r0, r7
 800aa5a:	47c0      	blx	r8
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	d103      	bne.n	800aa68 <_printf_common+0xac>
 800aa60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa68:	3501      	adds	r5, #1
 800aa6a:	e7c6      	b.n	800a9fa <_printf_common+0x3e>
 800aa6c:	18e1      	adds	r1, r4, r3
 800aa6e:	1c5a      	adds	r2, r3, #1
 800aa70:	2030      	movs	r0, #48	; 0x30
 800aa72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa76:	4422      	add	r2, r4
 800aa78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa80:	3302      	adds	r3, #2
 800aa82:	e7c7      	b.n	800aa14 <_printf_common+0x58>
 800aa84:	2301      	movs	r3, #1
 800aa86:	4622      	mov	r2, r4
 800aa88:	4649      	mov	r1, r9
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	47c0      	blx	r8
 800aa8e:	3001      	adds	r0, #1
 800aa90:	d0e6      	beq.n	800aa60 <_printf_common+0xa4>
 800aa92:	3601      	adds	r6, #1
 800aa94:	e7d9      	b.n	800aa4a <_printf_common+0x8e>
	...

0800aa98 <_printf_i>:
 800aa98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa9c:	460c      	mov	r4, r1
 800aa9e:	4691      	mov	r9, r2
 800aaa0:	7e27      	ldrb	r7, [r4, #24]
 800aaa2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aaa4:	2f78      	cmp	r7, #120	; 0x78
 800aaa6:	4680      	mov	r8, r0
 800aaa8:	469a      	mov	sl, r3
 800aaaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aaae:	d807      	bhi.n	800aac0 <_printf_i+0x28>
 800aab0:	2f62      	cmp	r7, #98	; 0x62
 800aab2:	d80a      	bhi.n	800aaca <_printf_i+0x32>
 800aab4:	2f00      	cmp	r7, #0
 800aab6:	f000 80d8 	beq.w	800ac6a <_printf_i+0x1d2>
 800aaba:	2f58      	cmp	r7, #88	; 0x58
 800aabc:	f000 80a3 	beq.w	800ac06 <_printf_i+0x16e>
 800aac0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aac8:	e03a      	b.n	800ab40 <_printf_i+0xa8>
 800aaca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aace:	2b15      	cmp	r3, #21
 800aad0:	d8f6      	bhi.n	800aac0 <_printf_i+0x28>
 800aad2:	a001      	add	r0, pc, #4	; (adr r0, 800aad8 <_printf_i+0x40>)
 800aad4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aad8:	0800ab31 	.word	0x0800ab31
 800aadc:	0800ab45 	.word	0x0800ab45
 800aae0:	0800aac1 	.word	0x0800aac1
 800aae4:	0800aac1 	.word	0x0800aac1
 800aae8:	0800aac1 	.word	0x0800aac1
 800aaec:	0800aac1 	.word	0x0800aac1
 800aaf0:	0800ab45 	.word	0x0800ab45
 800aaf4:	0800aac1 	.word	0x0800aac1
 800aaf8:	0800aac1 	.word	0x0800aac1
 800aafc:	0800aac1 	.word	0x0800aac1
 800ab00:	0800aac1 	.word	0x0800aac1
 800ab04:	0800ac51 	.word	0x0800ac51
 800ab08:	0800ab75 	.word	0x0800ab75
 800ab0c:	0800ac33 	.word	0x0800ac33
 800ab10:	0800aac1 	.word	0x0800aac1
 800ab14:	0800aac1 	.word	0x0800aac1
 800ab18:	0800ac73 	.word	0x0800ac73
 800ab1c:	0800aac1 	.word	0x0800aac1
 800ab20:	0800ab75 	.word	0x0800ab75
 800ab24:	0800aac1 	.word	0x0800aac1
 800ab28:	0800aac1 	.word	0x0800aac1
 800ab2c:	0800ac3b 	.word	0x0800ac3b
 800ab30:	680b      	ldr	r3, [r1, #0]
 800ab32:	1d1a      	adds	r2, r3, #4
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	600a      	str	r2, [r1, #0]
 800ab38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab40:	2301      	movs	r3, #1
 800ab42:	e0a3      	b.n	800ac8c <_printf_i+0x1f4>
 800ab44:	6825      	ldr	r5, [r4, #0]
 800ab46:	6808      	ldr	r0, [r1, #0]
 800ab48:	062e      	lsls	r6, r5, #24
 800ab4a:	f100 0304 	add.w	r3, r0, #4
 800ab4e:	d50a      	bpl.n	800ab66 <_printf_i+0xce>
 800ab50:	6805      	ldr	r5, [r0, #0]
 800ab52:	600b      	str	r3, [r1, #0]
 800ab54:	2d00      	cmp	r5, #0
 800ab56:	da03      	bge.n	800ab60 <_printf_i+0xc8>
 800ab58:	232d      	movs	r3, #45	; 0x2d
 800ab5a:	426d      	negs	r5, r5
 800ab5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab60:	485e      	ldr	r0, [pc, #376]	; (800acdc <_printf_i+0x244>)
 800ab62:	230a      	movs	r3, #10
 800ab64:	e019      	b.n	800ab9a <_printf_i+0x102>
 800ab66:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ab6a:	6805      	ldr	r5, [r0, #0]
 800ab6c:	600b      	str	r3, [r1, #0]
 800ab6e:	bf18      	it	ne
 800ab70:	b22d      	sxthne	r5, r5
 800ab72:	e7ef      	b.n	800ab54 <_printf_i+0xbc>
 800ab74:	680b      	ldr	r3, [r1, #0]
 800ab76:	6825      	ldr	r5, [r4, #0]
 800ab78:	1d18      	adds	r0, r3, #4
 800ab7a:	6008      	str	r0, [r1, #0]
 800ab7c:	0628      	lsls	r0, r5, #24
 800ab7e:	d501      	bpl.n	800ab84 <_printf_i+0xec>
 800ab80:	681d      	ldr	r5, [r3, #0]
 800ab82:	e002      	b.n	800ab8a <_printf_i+0xf2>
 800ab84:	0669      	lsls	r1, r5, #25
 800ab86:	d5fb      	bpl.n	800ab80 <_printf_i+0xe8>
 800ab88:	881d      	ldrh	r5, [r3, #0]
 800ab8a:	4854      	ldr	r0, [pc, #336]	; (800acdc <_printf_i+0x244>)
 800ab8c:	2f6f      	cmp	r7, #111	; 0x6f
 800ab8e:	bf0c      	ite	eq
 800ab90:	2308      	moveq	r3, #8
 800ab92:	230a      	movne	r3, #10
 800ab94:	2100      	movs	r1, #0
 800ab96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab9a:	6866      	ldr	r6, [r4, #4]
 800ab9c:	60a6      	str	r6, [r4, #8]
 800ab9e:	2e00      	cmp	r6, #0
 800aba0:	bfa2      	ittt	ge
 800aba2:	6821      	ldrge	r1, [r4, #0]
 800aba4:	f021 0104 	bicge.w	r1, r1, #4
 800aba8:	6021      	strge	r1, [r4, #0]
 800abaa:	b90d      	cbnz	r5, 800abb0 <_printf_i+0x118>
 800abac:	2e00      	cmp	r6, #0
 800abae:	d04d      	beq.n	800ac4c <_printf_i+0x1b4>
 800abb0:	4616      	mov	r6, r2
 800abb2:	fbb5 f1f3 	udiv	r1, r5, r3
 800abb6:	fb03 5711 	mls	r7, r3, r1, r5
 800abba:	5dc7      	ldrb	r7, [r0, r7]
 800abbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abc0:	462f      	mov	r7, r5
 800abc2:	42bb      	cmp	r3, r7
 800abc4:	460d      	mov	r5, r1
 800abc6:	d9f4      	bls.n	800abb2 <_printf_i+0x11a>
 800abc8:	2b08      	cmp	r3, #8
 800abca:	d10b      	bne.n	800abe4 <_printf_i+0x14c>
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	07df      	lsls	r7, r3, #31
 800abd0:	d508      	bpl.n	800abe4 <_printf_i+0x14c>
 800abd2:	6923      	ldr	r3, [r4, #16]
 800abd4:	6861      	ldr	r1, [r4, #4]
 800abd6:	4299      	cmp	r1, r3
 800abd8:	bfde      	ittt	le
 800abda:	2330      	movle	r3, #48	; 0x30
 800abdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abe0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800abe4:	1b92      	subs	r2, r2, r6
 800abe6:	6122      	str	r2, [r4, #16]
 800abe8:	f8cd a000 	str.w	sl, [sp]
 800abec:	464b      	mov	r3, r9
 800abee:	aa03      	add	r2, sp, #12
 800abf0:	4621      	mov	r1, r4
 800abf2:	4640      	mov	r0, r8
 800abf4:	f7ff fee2 	bl	800a9bc <_printf_common>
 800abf8:	3001      	adds	r0, #1
 800abfa:	d14c      	bne.n	800ac96 <_printf_i+0x1fe>
 800abfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac00:	b004      	add	sp, #16
 800ac02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac06:	4835      	ldr	r0, [pc, #212]	; (800acdc <_printf_i+0x244>)
 800ac08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	680e      	ldr	r6, [r1, #0]
 800ac10:	061f      	lsls	r7, r3, #24
 800ac12:	f856 5b04 	ldr.w	r5, [r6], #4
 800ac16:	600e      	str	r6, [r1, #0]
 800ac18:	d514      	bpl.n	800ac44 <_printf_i+0x1ac>
 800ac1a:	07d9      	lsls	r1, r3, #31
 800ac1c:	bf44      	itt	mi
 800ac1e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac22:	6023      	strmi	r3, [r4, #0]
 800ac24:	b91d      	cbnz	r5, 800ac2e <_printf_i+0x196>
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	f023 0320 	bic.w	r3, r3, #32
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	2310      	movs	r3, #16
 800ac30:	e7b0      	b.n	800ab94 <_printf_i+0xfc>
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	f043 0320 	orr.w	r3, r3, #32
 800ac38:	6023      	str	r3, [r4, #0]
 800ac3a:	2378      	movs	r3, #120	; 0x78
 800ac3c:	4828      	ldr	r0, [pc, #160]	; (800ace0 <_printf_i+0x248>)
 800ac3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac42:	e7e3      	b.n	800ac0c <_printf_i+0x174>
 800ac44:	065e      	lsls	r6, r3, #25
 800ac46:	bf48      	it	mi
 800ac48:	b2ad      	uxthmi	r5, r5
 800ac4a:	e7e6      	b.n	800ac1a <_printf_i+0x182>
 800ac4c:	4616      	mov	r6, r2
 800ac4e:	e7bb      	b.n	800abc8 <_printf_i+0x130>
 800ac50:	680b      	ldr	r3, [r1, #0]
 800ac52:	6826      	ldr	r6, [r4, #0]
 800ac54:	6960      	ldr	r0, [r4, #20]
 800ac56:	1d1d      	adds	r5, r3, #4
 800ac58:	600d      	str	r5, [r1, #0]
 800ac5a:	0635      	lsls	r5, r6, #24
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	d501      	bpl.n	800ac64 <_printf_i+0x1cc>
 800ac60:	6018      	str	r0, [r3, #0]
 800ac62:	e002      	b.n	800ac6a <_printf_i+0x1d2>
 800ac64:	0671      	lsls	r1, r6, #25
 800ac66:	d5fb      	bpl.n	800ac60 <_printf_i+0x1c8>
 800ac68:	8018      	strh	r0, [r3, #0]
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	6123      	str	r3, [r4, #16]
 800ac6e:	4616      	mov	r6, r2
 800ac70:	e7ba      	b.n	800abe8 <_printf_i+0x150>
 800ac72:	680b      	ldr	r3, [r1, #0]
 800ac74:	1d1a      	adds	r2, r3, #4
 800ac76:	600a      	str	r2, [r1, #0]
 800ac78:	681e      	ldr	r6, [r3, #0]
 800ac7a:	6862      	ldr	r2, [r4, #4]
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	4630      	mov	r0, r6
 800ac80:	f7f5 faae 	bl	80001e0 <memchr>
 800ac84:	b108      	cbz	r0, 800ac8a <_printf_i+0x1f2>
 800ac86:	1b80      	subs	r0, r0, r6
 800ac88:	6060      	str	r0, [r4, #4]
 800ac8a:	6863      	ldr	r3, [r4, #4]
 800ac8c:	6123      	str	r3, [r4, #16]
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac94:	e7a8      	b.n	800abe8 <_printf_i+0x150>
 800ac96:	6923      	ldr	r3, [r4, #16]
 800ac98:	4632      	mov	r2, r6
 800ac9a:	4649      	mov	r1, r9
 800ac9c:	4640      	mov	r0, r8
 800ac9e:	47d0      	blx	sl
 800aca0:	3001      	adds	r0, #1
 800aca2:	d0ab      	beq.n	800abfc <_printf_i+0x164>
 800aca4:	6823      	ldr	r3, [r4, #0]
 800aca6:	079b      	lsls	r3, r3, #30
 800aca8:	d413      	bmi.n	800acd2 <_printf_i+0x23a>
 800acaa:	68e0      	ldr	r0, [r4, #12]
 800acac:	9b03      	ldr	r3, [sp, #12]
 800acae:	4298      	cmp	r0, r3
 800acb0:	bfb8      	it	lt
 800acb2:	4618      	movlt	r0, r3
 800acb4:	e7a4      	b.n	800ac00 <_printf_i+0x168>
 800acb6:	2301      	movs	r3, #1
 800acb8:	4632      	mov	r2, r6
 800acba:	4649      	mov	r1, r9
 800acbc:	4640      	mov	r0, r8
 800acbe:	47d0      	blx	sl
 800acc0:	3001      	adds	r0, #1
 800acc2:	d09b      	beq.n	800abfc <_printf_i+0x164>
 800acc4:	3501      	adds	r5, #1
 800acc6:	68e3      	ldr	r3, [r4, #12]
 800acc8:	9903      	ldr	r1, [sp, #12]
 800acca:	1a5b      	subs	r3, r3, r1
 800accc:	42ab      	cmp	r3, r5
 800acce:	dcf2      	bgt.n	800acb6 <_printf_i+0x21e>
 800acd0:	e7eb      	b.n	800acaa <_printf_i+0x212>
 800acd2:	2500      	movs	r5, #0
 800acd4:	f104 0619 	add.w	r6, r4, #25
 800acd8:	e7f5      	b.n	800acc6 <_printf_i+0x22e>
 800acda:	bf00      	nop
 800acdc:	08011132 	.word	0x08011132
 800ace0:	08011143 	.word	0x08011143

0800ace4 <siprintf>:
 800ace4:	b40e      	push	{r1, r2, r3}
 800ace6:	b500      	push	{lr}
 800ace8:	b09c      	sub	sp, #112	; 0x70
 800acea:	ab1d      	add	r3, sp, #116	; 0x74
 800acec:	9002      	str	r0, [sp, #8]
 800acee:	9006      	str	r0, [sp, #24]
 800acf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800acf4:	4809      	ldr	r0, [pc, #36]	; (800ad1c <siprintf+0x38>)
 800acf6:	9107      	str	r1, [sp, #28]
 800acf8:	9104      	str	r1, [sp, #16]
 800acfa:	4909      	ldr	r1, [pc, #36]	; (800ad20 <siprintf+0x3c>)
 800acfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad00:	9105      	str	r1, [sp, #20]
 800ad02:	6800      	ldr	r0, [r0, #0]
 800ad04:	9301      	str	r3, [sp, #4]
 800ad06:	a902      	add	r1, sp, #8
 800ad08:	f001 fe06 	bl	800c918 <_svfiprintf_r>
 800ad0c:	9b02      	ldr	r3, [sp, #8]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	701a      	strb	r2, [r3, #0]
 800ad12:	b01c      	add	sp, #112	; 0x70
 800ad14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad18:	b003      	add	sp, #12
 800ad1a:	4770      	bx	lr
 800ad1c:	2000004c 	.word	0x2000004c
 800ad20:	ffff0208 	.word	0xffff0208

0800ad24 <__swbuf_r>:
 800ad24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad26:	460e      	mov	r6, r1
 800ad28:	4614      	mov	r4, r2
 800ad2a:	4605      	mov	r5, r0
 800ad2c:	b118      	cbz	r0, 800ad36 <__swbuf_r+0x12>
 800ad2e:	6983      	ldr	r3, [r0, #24]
 800ad30:	b90b      	cbnz	r3, 800ad36 <__swbuf_r+0x12>
 800ad32:	f001 f84b 	bl	800bdcc <__sinit>
 800ad36:	4b21      	ldr	r3, [pc, #132]	; (800adbc <__swbuf_r+0x98>)
 800ad38:	429c      	cmp	r4, r3
 800ad3a:	d12b      	bne.n	800ad94 <__swbuf_r+0x70>
 800ad3c:	686c      	ldr	r4, [r5, #4]
 800ad3e:	69a3      	ldr	r3, [r4, #24]
 800ad40:	60a3      	str	r3, [r4, #8]
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	071a      	lsls	r2, r3, #28
 800ad46:	d52f      	bpl.n	800ada8 <__swbuf_r+0x84>
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	b36b      	cbz	r3, 800ada8 <__swbuf_r+0x84>
 800ad4c:	6923      	ldr	r3, [r4, #16]
 800ad4e:	6820      	ldr	r0, [r4, #0]
 800ad50:	1ac0      	subs	r0, r0, r3
 800ad52:	6963      	ldr	r3, [r4, #20]
 800ad54:	b2f6      	uxtb	r6, r6
 800ad56:	4283      	cmp	r3, r0
 800ad58:	4637      	mov	r7, r6
 800ad5a:	dc04      	bgt.n	800ad66 <__swbuf_r+0x42>
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	4628      	mov	r0, r5
 800ad60:	f000 ffa0 	bl	800bca4 <_fflush_r>
 800ad64:	bb30      	cbnz	r0, 800adb4 <__swbuf_r+0x90>
 800ad66:	68a3      	ldr	r3, [r4, #8]
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	60a3      	str	r3, [r4, #8]
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	6022      	str	r2, [r4, #0]
 800ad72:	701e      	strb	r6, [r3, #0]
 800ad74:	6963      	ldr	r3, [r4, #20]
 800ad76:	3001      	adds	r0, #1
 800ad78:	4283      	cmp	r3, r0
 800ad7a:	d004      	beq.n	800ad86 <__swbuf_r+0x62>
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	07db      	lsls	r3, r3, #31
 800ad80:	d506      	bpl.n	800ad90 <__swbuf_r+0x6c>
 800ad82:	2e0a      	cmp	r6, #10
 800ad84:	d104      	bne.n	800ad90 <__swbuf_r+0x6c>
 800ad86:	4621      	mov	r1, r4
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f000 ff8b 	bl	800bca4 <_fflush_r>
 800ad8e:	b988      	cbnz	r0, 800adb4 <__swbuf_r+0x90>
 800ad90:	4638      	mov	r0, r7
 800ad92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad94:	4b0a      	ldr	r3, [pc, #40]	; (800adc0 <__swbuf_r+0x9c>)
 800ad96:	429c      	cmp	r4, r3
 800ad98:	d101      	bne.n	800ad9e <__swbuf_r+0x7a>
 800ad9a:	68ac      	ldr	r4, [r5, #8]
 800ad9c:	e7cf      	b.n	800ad3e <__swbuf_r+0x1a>
 800ad9e:	4b09      	ldr	r3, [pc, #36]	; (800adc4 <__swbuf_r+0xa0>)
 800ada0:	429c      	cmp	r4, r3
 800ada2:	bf08      	it	eq
 800ada4:	68ec      	ldreq	r4, [r5, #12]
 800ada6:	e7ca      	b.n	800ad3e <__swbuf_r+0x1a>
 800ada8:	4621      	mov	r1, r4
 800adaa:	4628      	mov	r0, r5
 800adac:	f000 f80c 	bl	800adc8 <__swsetup_r>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d0cb      	beq.n	800ad4c <__swbuf_r+0x28>
 800adb4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800adb8:	e7ea      	b.n	800ad90 <__swbuf_r+0x6c>
 800adba:	bf00      	nop
 800adbc:	08011208 	.word	0x08011208
 800adc0:	08011228 	.word	0x08011228
 800adc4:	080111e8 	.word	0x080111e8

0800adc8 <__swsetup_r>:
 800adc8:	4b32      	ldr	r3, [pc, #200]	; (800ae94 <__swsetup_r+0xcc>)
 800adca:	b570      	push	{r4, r5, r6, lr}
 800adcc:	681d      	ldr	r5, [r3, #0]
 800adce:	4606      	mov	r6, r0
 800add0:	460c      	mov	r4, r1
 800add2:	b125      	cbz	r5, 800adde <__swsetup_r+0x16>
 800add4:	69ab      	ldr	r3, [r5, #24]
 800add6:	b913      	cbnz	r3, 800adde <__swsetup_r+0x16>
 800add8:	4628      	mov	r0, r5
 800adda:	f000 fff7 	bl	800bdcc <__sinit>
 800adde:	4b2e      	ldr	r3, [pc, #184]	; (800ae98 <__swsetup_r+0xd0>)
 800ade0:	429c      	cmp	r4, r3
 800ade2:	d10f      	bne.n	800ae04 <__swsetup_r+0x3c>
 800ade4:	686c      	ldr	r4, [r5, #4]
 800ade6:	89a3      	ldrh	r3, [r4, #12]
 800ade8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adec:	0719      	lsls	r1, r3, #28
 800adee:	d42c      	bmi.n	800ae4a <__swsetup_r+0x82>
 800adf0:	06dd      	lsls	r5, r3, #27
 800adf2:	d411      	bmi.n	800ae18 <__swsetup_r+0x50>
 800adf4:	2309      	movs	r3, #9
 800adf6:	6033      	str	r3, [r6, #0]
 800adf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800adfc:	81a3      	strh	r3, [r4, #12]
 800adfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae02:	e03e      	b.n	800ae82 <__swsetup_r+0xba>
 800ae04:	4b25      	ldr	r3, [pc, #148]	; (800ae9c <__swsetup_r+0xd4>)
 800ae06:	429c      	cmp	r4, r3
 800ae08:	d101      	bne.n	800ae0e <__swsetup_r+0x46>
 800ae0a:	68ac      	ldr	r4, [r5, #8]
 800ae0c:	e7eb      	b.n	800ade6 <__swsetup_r+0x1e>
 800ae0e:	4b24      	ldr	r3, [pc, #144]	; (800aea0 <__swsetup_r+0xd8>)
 800ae10:	429c      	cmp	r4, r3
 800ae12:	bf08      	it	eq
 800ae14:	68ec      	ldreq	r4, [r5, #12]
 800ae16:	e7e6      	b.n	800ade6 <__swsetup_r+0x1e>
 800ae18:	0758      	lsls	r0, r3, #29
 800ae1a:	d512      	bpl.n	800ae42 <__swsetup_r+0x7a>
 800ae1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae1e:	b141      	cbz	r1, 800ae32 <__swsetup_r+0x6a>
 800ae20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae24:	4299      	cmp	r1, r3
 800ae26:	d002      	beq.n	800ae2e <__swsetup_r+0x66>
 800ae28:	4630      	mov	r0, r6
 800ae2a:	f001 fc6f 	bl	800c70c <_free_r>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	6363      	str	r3, [r4, #52]	; 0x34
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae38:	81a3      	strh	r3, [r4, #12]
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	6063      	str	r3, [r4, #4]
 800ae3e:	6923      	ldr	r3, [r4, #16]
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	f043 0308 	orr.w	r3, r3, #8
 800ae48:	81a3      	strh	r3, [r4, #12]
 800ae4a:	6923      	ldr	r3, [r4, #16]
 800ae4c:	b94b      	cbnz	r3, 800ae62 <__swsetup_r+0x9a>
 800ae4e:	89a3      	ldrh	r3, [r4, #12]
 800ae50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae58:	d003      	beq.n	800ae62 <__swsetup_r+0x9a>
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f001 f87f 	bl	800bf60 <__smakebuf_r>
 800ae62:	89a0      	ldrh	r0, [r4, #12]
 800ae64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae68:	f010 0301 	ands.w	r3, r0, #1
 800ae6c:	d00a      	beq.n	800ae84 <__swsetup_r+0xbc>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	60a3      	str	r3, [r4, #8]
 800ae72:	6963      	ldr	r3, [r4, #20]
 800ae74:	425b      	negs	r3, r3
 800ae76:	61a3      	str	r3, [r4, #24]
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	b943      	cbnz	r3, 800ae8e <__swsetup_r+0xc6>
 800ae7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae80:	d1ba      	bne.n	800adf8 <__swsetup_r+0x30>
 800ae82:	bd70      	pop	{r4, r5, r6, pc}
 800ae84:	0781      	lsls	r1, r0, #30
 800ae86:	bf58      	it	pl
 800ae88:	6963      	ldrpl	r3, [r4, #20]
 800ae8a:	60a3      	str	r3, [r4, #8]
 800ae8c:	e7f4      	b.n	800ae78 <__swsetup_r+0xb0>
 800ae8e:	2000      	movs	r0, #0
 800ae90:	e7f7      	b.n	800ae82 <__swsetup_r+0xba>
 800ae92:	bf00      	nop
 800ae94:	2000004c 	.word	0x2000004c
 800ae98:	08011208 	.word	0x08011208
 800ae9c:	08011228 	.word	0x08011228
 800aea0:	080111e8 	.word	0x080111e8

0800aea4 <quorem>:
 800aea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea8:	6903      	ldr	r3, [r0, #16]
 800aeaa:	690c      	ldr	r4, [r1, #16]
 800aeac:	42a3      	cmp	r3, r4
 800aeae:	4607      	mov	r7, r0
 800aeb0:	f2c0 8081 	blt.w	800afb6 <quorem+0x112>
 800aeb4:	3c01      	subs	r4, #1
 800aeb6:	f101 0814 	add.w	r8, r1, #20
 800aeba:	f100 0514 	add.w	r5, r0, #20
 800aebe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aec2:	9301      	str	r3, [sp, #4]
 800aec4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aec8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aecc:	3301      	adds	r3, #1
 800aece:	429a      	cmp	r2, r3
 800aed0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aed4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aed8:	fbb2 f6f3 	udiv	r6, r2, r3
 800aedc:	d331      	bcc.n	800af42 <quorem+0x9e>
 800aede:	f04f 0e00 	mov.w	lr, #0
 800aee2:	4640      	mov	r0, r8
 800aee4:	46ac      	mov	ip, r5
 800aee6:	46f2      	mov	sl, lr
 800aee8:	f850 2b04 	ldr.w	r2, [r0], #4
 800aeec:	b293      	uxth	r3, r2
 800aeee:	fb06 e303 	mla	r3, r6, r3, lr
 800aef2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	ebaa 0303 	sub.w	r3, sl, r3
 800aefc:	0c12      	lsrs	r2, r2, #16
 800aefe:	f8dc a000 	ldr.w	sl, [ip]
 800af02:	fb06 e202 	mla	r2, r6, r2, lr
 800af06:	fa13 f38a 	uxtah	r3, r3, sl
 800af0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af0e:	fa1f fa82 	uxth.w	sl, r2
 800af12:	f8dc 2000 	ldr.w	r2, [ip]
 800af16:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800af1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af1e:	b29b      	uxth	r3, r3
 800af20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af24:	4581      	cmp	r9, r0
 800af26:	f84c 3b04 	str.w	r3, [ip], #4
 800af2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af2e:	d2db      	bcs.n	800aee8 <quorem+0x44>
 800af30:	f855 300b 	ldr.w	r3, [r5, fp]
 800af34:	b92b      	cbnz	r3, 800af42 <quorem+0x9e>
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	3b04      	subs	r3, #4
 800af3a:	429d      	cmp	r5, r3
 800af3c:	461a      	mov	r2, r3
 800af3e:	d32e      	bcc.n	800af9e <quorem+0xfa>
 800af40:	613c      	str	r4, [r7, #16]
 800af42:	4638      	mov	r0, r7
 800af44:	f001 fad2 	bl	800c4ec <__mcmp>
 800af48:	2800      	cmp	r0, #0
 800af4a:	db24      	blt.n	800af96 <quorem+0xf2>
 800af4c:	3601      	adds	r6, #1
 800af4e:	4628      	mov	r0, r5
 800af50:	f04f 0c00 	mov.w	ip, #0
 800af54:	f858 2b04 	ldr.w	r2, [r8], #4
 800af58:	f8d0 e000 	ldr.w	lr, [r0]
 800af5c:	b293      	uxth	r3, r2
 800af5e:	ebac 0303 	sub.w	r3, ip, r3
 800af62:	0c12      	lsrs	r2, r2, #16
 800af64:	fa13 f38e 	uxtah	r3, r3, lr
 800af68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800af6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af70:	b29b      	uxth	r3, r3
 800af72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af76:	45c1      	cmp	r9, r8
 800af78:	f840 3b04 	str.w	r3, [r0], #4
 800af7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800af80:	d2e8      	bcs.n	800af54 <quorem+0xb0>
 800af82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af8a:	b922      	cbnz	r2, 800af96 <quorem+0xf2>
 800af8c:	3b04      	subs	r3, #4
 800af8e:	429d      	cmp	r5, r3
 800af90:	461a      	mov	r2, r3
 800af92:	d30a      	bcc.n	800afaa <quorem+0x106>
 800af94:	613c      	str	r4, [r7, #16]
 800af96:	4630      	mov	r0, r6
 800af98:	b003      	add	sp, #12
 800af9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af9e:	6812      	ldr	r2, [r2, #0]
 800afa0:	3b04      	subs	r3, #4
 800afa2:	2a00      	cmp	r2, #0
 800afa4:	d1cc      	bne.n	800af40 <quorem+0x9c>
 800afa6:	3c01      	subs	r4, #1
 800afa8:	e7c7      	b.n	800af3a <quorem+0x96>
 800afaa:	6812      	ldr	r2, [r2, #0]
 800afac:	3b04      	subs	r3, #4
 800afae:	2a00      	cmp	r2, #0
 800afb0:	d1f0      	bne.n	800af94 <quorem+0xf0>
 800afb2:	3c01      	subs	r4, #1
 800afb4:	e7eb      	b.n	800af8e <quorem+0xea>
 800afb6:	2000      	movs	r0, #0
 800afb8:	e7ee      	b.n	800af98 <quorem+0xf4>
 800afba:	0000      	movs	r0, r0
 800afbc:	0000      	movs	r0, r0
	...

0800afc0 <_dtoa_r>:
 800afc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc4:	ed2d 8b02 	vpush	{d8}
 800afc8:	ec57 6b10 	vmov	r6, r7, d0
 800afcc:	b095      	sub	sp, #84	; 0x54
 800afce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800afd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800afd4:	9105      	str	r1, [sp, #20]
 800afd6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800afda:	4604      	mov	r4, r0
 800afdc:	9209      	str	r2, [sp, #36]	; 0x24
 800afde:	930f      	str	r3, [sp, #60]	; 0x3c
 800afe0:	b975      	cbnz	r5, 800b000 <_dtoa_r+0x40>
 800afe2:	2010      	movs	r0, #16
 800afe4:	f000 fffc 	bl	800bfe0 <malloc>
 800afe8:	4602      	mov	r2, r0
 800afea:	6260      	str	r0, [r4, #36]	; 0x24
 800afec:	b920      	cbnz	r0, 800aff8 <_dtoa_r+0x38>
 800afee:	4bb2      	ldr	r3, [pc, #712]	; (800b2b8 <_dtoa_r+0x2f8>)
 800aff0:	21ea      	movs	r1, #234	; 0xea
 800aff2:	48b2      	ldr	r0, [pc, #712]	; (800b2bc <_dtoa_r+0x2fc>)
 800aff4:	f001 ff50 	bl	800ce98 <__assert_func>
 800aff8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800affc:	6005      	str	r5, [r0, #0]
 800affe:	60c5      	str	r5, [r0, #12]
 800b000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b002:	6819      	ldr	r1, [r3, #0]
 800b004:	b151      	cbz	r1, 800b01c <_dtoa_r+0x5c>
 800b006:	685a      	ldr	r2, [r3, #4]
 800b008:	604a      	str	r2, [r1, #4]
 800b00a:	2301      	movs	r3, #1
 800b00c:	4093      	lsls	r3, r2
 800b00e:	608b      	str	r3, [r1, #8]
 800b010:	4620      	mov	r0, r4
 800b012:	f001 f82d 	bl	800c070 <_Bfree>
 800b016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]
 800b01c:	1e3b      	subs	r3, r7, #0
 800b01e:	bfb9      	ittee	lt
 800b020:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b024:	9303      	strlt	r3, [sp, #12]
 800b026:	2300      	movge	r3, #0
 800b028:	f8c8 3000 	strge.w	r3, [r8]
 800b02c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b030:	4ba3      	ldr	r3, [pc, #652]	; (800b2c0 <_dtoa_r+0x300>)
 800b032:	bfbc      	itt	lt
 800b034:	2201      	movlt	r2, #1
 800b036:	f8c8 2000 	strlt.w	r2, [r8]
 800b03a:	ea33 0309 	bics.w	r3, r3, r9
 800b03e:	d11b      	bne.n	800b078 <_dtoa_r+0xb8>
 800b040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b042:	f242 730f 	movw	r3, #9999	; 0x270f
 800b046:	6013      	str	r3, [r2, #0]
 800b048:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b04c:	4333      	orrs	r3, r6
 800b04e:	f000 857a 	beq.w	800bb46 <_dtoa_r+0xb86>
 800b052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b054:	b963      	cbnz	r3, 800b070 <_dtoa_r+0xb0>
 800b056:	4b9b      	ldr	r3, [pc, #620]	; (800b2c4 <_dtoa_r+0x304>)
 800b058:	e024      	b.n	800b0a4 <_dtoa_r+0xe4>
 800b05a:	4b9b      	ldr	r3, [pc, #620]	; (800b2c8 <_dtoa_r+0x308>)
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	3308      	adds	r3, #8
 800b060:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	9800      	ldr	r0, [sp, #0]
 800b066:	b015      	add	sp, #84	; 0x54
 800b068:	ecbd 8b02 	vpop	{d8}
 800b06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b070:	4b94      	ldr	r3, [pc, #592]	; (800b2c4 <_dtoa_r+0x304>)
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	3303      	adds	r3, #3
 800b076:	e7f3      	b.n	800b060 <_dtoa_r+0xa0>
 800b078:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b07c:	2200      	movs	r2, #0
 800b07e:	ec51 0b17 	vmov	r0, r1, d7
 800b082:	2300      	movs	r3, #0
 800b084:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b088:	f7f5 fd1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b08c:	4680      	mov	r8, r0
 800b08e:	b158      	cbz	r0, 800b0a8 <_dtoa_r+0xe8>
 800b090:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b092:	2301      	movs	r3, #1
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 8551 	beq.w	800bb40 <_dtoa_r+0xb80>
 800b09e:	488b      	ldr	r0, [pc, #556]	; (800b2cc <_dtoa_r+0x30c>)
 800b0a0:	6018      	str	r0, [r3, #0]
 800b0a2:	1e43      	subs	r3, r0, #1
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	e7dd      	b.n	800b064 <_dtoa_r+0xa4>
 800b0a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b0ac:	aa12      	add	r2, sp, #72	; 0x48
 800b0ae:	a913      	add	r1, sp, #76	; 0x4c
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f001 fabf 	bl	800c634 <__d2b>
 800b0b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b0ba:	4683      	mov	fp, r0
 800b0bc:	2d00      	cmp	r5, #0
 800b0be:	d07c      	beq.n	800b1ba <_dtoa_r+0x1fa>
 800b0c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b0c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b0ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b0d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b0d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b0da:	4b7d      	ldr	r3, [pc, #500]	; (800b2d0 <_dtoa_r+0x310>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	4630      	mov	r0, r6
 800b0e0:	4639      	mov	r1, r7
 800b0e2:	f7f5 f8d1 	bl	8000288 <__aeabi_dsub>
 800b0e6:	a36e      	add	r3, pc, #440	; (adr r3, 800b2a0 <_dtoa_r+0x2e0>)
 800b0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ec:	f7f5 fa84 	bl	80005f8 <__aeabi_dmul>
 800b0f0:	a36d      	add	r3, pc, #436	; (adr r3, 800b2a8 <_dtoa_r+0x2e8>)
 800b0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f6:	f7f5 f8c9 	bl	800028c <__adddf3>
 800b0fa:	4606      	mov	r6, r0
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	460f      	mov	r7, r1
 800b100:	f7f5 fa10 	bl	8000524 <__aeabi_i2d>
 800b104:	a36a      	add	r3, pc, #424	; (adr r3, 800b2b0 <_dtoa_r+0x2f0>)
 800b106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10a:	f7f5 fa75 	bl	80005f8 <__aeabi_dmul>
 800b10e:	4602      	mov	r2, r0
 800b110:	460b      	mov	r3, r1
 800b112:	4630      	mov	r0, r6
 800b114:	4639      	mov	r1, r7
 800b116:	f7f5 f8b9 	bl	800028c <__adddf3>
 800b11a:	4606      	mov	r6, r0
 800b11c:	460f      	mov	r7, r1
 800b11e:	f7f5 fd1b 	bl	8000b58 <__aeabi_d2iz>
 800b122:	2200      	movs	r2, #0
 800b124:	4682      	mov	sl, r0
 800b126:	2300      	movs	r3, #0
 800b128:	4630      	mov	r0, r6
 800b12a:	4639      	mov	r1, r7
 800b12c:	f7f5 fcd6 	bl	8000adc <__aeabi_dcmplt>
 800b130:	b148      	cbz	r0, 800b146 <_dtoa_r+0x186>
 800b132:	4650      	mov	r0, sl
 800b134:	f7f5 f9f6 	bl	8000524 <__aeabi_i2d>
 800b138:	4632      	mov	r2, r6
 800b13a:	463b      	mov	r3, r7
 800b13c:	f7f5 fcc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b140:	b908      	cbnz	r0, 800b146 <_dtoa_r+0x186>
 800b142:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b146:	f1ba 0f16 	cmp.w	sl, #22
 800b14a:	d854      	bhi.n	800b1f6 <_dtoa_r+0x236>
 800b14c:	4b61      	ldr	r3, [pc, #388]	; (800b2d4 <_dtoa_r+0x314>)
 800b14e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b156:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b15a:	f7f5 fcbf 	bl	8000adc <__aeabi_dcmplt>
 800b15e:	2800      	cmp	r0, #0
 800b160:	d04b      	beq.n	800b1fa <_dtoa_r+0x23a>
 800b162:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b166:	2300      	movs	r3, #0
 800b168:	930e      	str	r3, [sp, #56]	; 0x38
 800b16a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b16c:	1b5d      	subs	r5, r3, r5
 800b16e:	1e6b      	subs	r3, r5, #1
 800b170:	9304      	str	r3, [sp, #16]
 800b172:	bf43      	ittte	mi
 800b174:	2300      	movmi	r3, #0
 800b176:	f1c5 0801 	rsbmi	r8, r5, #1
 800b17a:	9304      	strmi	r3, [sp, #16]
 800b17c:	f04f 0800 	movpl.w	r8, #0
 800b180:	f1ba 0f00 	cmp.w	sl, #0
 800b184:	db3b      	blt.n	800b1fe <_dtoa_r+0x23e>
 800b186:	9b04      	ldr	r3, [sp, #16]
 800b188:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b18c:	4453      	add	r3, sl
 800b18e:	9304      	str	r3, [sp, #16]
 800b190:	2300      	movs	r3, #0
 800b192:	9306      	str	r3, [sp, #24]
 800b194:	9b05      	ldr	r3, [sp, #20]
 800b196:	2b09      	cmp	r3, #9
 800b198:	d869      	bhi.n	800b26e <_dtoa_r+0x2ae>
 800b19a:	2b05      	cmp	r3, #5
 800b19c:	bfc4      	itt	gt
 800b19e:	3b04      	subgt	r3, #4
 800b1a0:	9305      	strgt	r3, [sp, #20]
 800b1a2:	9b05      	ldr	r3, [sp, #20]
 800b1a4:	f1a3 0302 	sub.w	r3, r3, #2
 800b1a8:	bfcc      	ite	gt
 800b1aa:	2500      	movgt	r5, #0
 800b1ac:	2501      	movle	r5, #1
 800b1ae:	2b03      	cmp	r3, #3
 800b1b0:	d869      	bhi.n	800b286 <_dtoa_r+0x2c6>
 800b1b2:	e8df f003 	tbb	[pc, r3]
 800b1b6:	4e2c      	.short	0x4e2c
 800b1b8:	5a4c      	.short	0x5a4c
 800b1ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b1be:	441d      	add	r5, r3
 800b1c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b1c4:	2b20      	cmp	r3, #32
 800b1c6:	bfc1      	itttt	gt
 800b1c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b1cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b1d0:	fa09 f303 	lslgt.w	r3, r9, r3
 800b1d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b1d8:	bfda      	itte	le
 800b1da:	f1c3 0320 	rsble	r3, r3, #32
 800b1de:	fa06 f003 	lslle.w	r0, r6, r3
 800b1e2:	4318      	orrgt	r0, r3
 800b1e4:	f7f5 f98e 	bl	8000504 <__aeabi_ui2d>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	4606      	mov	r6, r0
 800b1ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b1f0:	3d01      	subs	r5, #1
 800b1f2:	9310      	str	r3, [sp, #64]	; 0x40
 800b1f4:	e771      	b.n	800b0da <_dtoa_r+0x11a>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e7b6      	b.n	800b168 <_dtoa_r+0x1a8>
 800b1fa:	900e      	str	r0, [sp, #56]	; 0x38
 800b1fc:	e7b5      	b.n	800b16a <_dtoa_r+0x1aa>
 800b1fe:	f1ca 0300 	rsb	r3, sl, #0
 800b202:	9306      	str	r3, [sp, #24]
 800b204:	2300      	movs	r3, #0
 800b206:	eba8 080a 	sub.w	r8, r8, sl
 800b20a:	930d      	str	r3, [sp, #52]	; 0x34
 800b20c:	e7c2      	b.n	800b194 <_dtoa_r+0x1d4>
 800b20e:	2300      	movs	r3, #0
 800b210:	9308      	str	r3, [sp, #32]
 800b212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b214:	2b00      	cmp	r3, #0
 800b216:	dc39      	bgt.n	800b28c <_dtoa_r+0x2cc>
 800b218:	f04f 0901 	mov.w	r9, #1
 800b21c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b220:	464b      	mov	r3, r9
 800b222:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b226:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b228:	2200      	movs	r2, #0
 800b22a:	6042      	str	r2, [r0, #4]
 800b22c:	2204      	movs	r2, #4
 800b22e:	f102 0614 	add.w	r6, r2, #20
 800b232:	429e      	cmp	r6, r3
 800b234:	6841      	ldr	r1, [r0, #4]
 800b236:	d92f      	bls.n	800b298 <_dtoa_r+0x2d8>
 800b238:	4620      	mov	r0, r4
 800b23a:	f000 fed9 	bl	800bff0 <_Balloc>
 800b23e:	9000      	str	r0, [sp, #0]
 800b240:	2800      	cmp	r0, #0
 800b242:	d14b      	bne.n	800b2dc <_dtoa_r+0x31c>
 800b244:	4b24      	ldr	r3, [pc, #144]	; (800b2d8 <_dtoa_r+0x318>)
 800b246:	4602      	mov	r2, r0
 800b248:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b24c:	e6d1      	b.n	800aff2 <_dtoa_r+0x32>
 800b24e:	2301      	movs	r3, #1
 800b250:	e7de      	b.n	800b210 <_dtoa_r+0x250>
 800b252:	2300      	movs	r3, #0
 800b254:	9308      	str	r3, [sp, #32]
 800b256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b258:	eb0a 0903 	add.w	r9, sl, r3
 800b25c:	f109 0301 	add.w	r3, r9, #1
 800b260:	2b01      	cmp	r3, #1
 800b262:	9301      	str	r3, [sp, #4]
 800b264:	bfb8      	it	lt
 800b266:	2301      	movlt	r3, #1
 800b268:	e7dd      	b.n	800b226 <_dtoa_r+0x266>
 800b26a:	2301      	movs	r3, #1
 800b26c:	e7f2      	b.n	800b254 <_dtoa_r+0x294>
 800b26e:	2501      	movs	r5, #1
 800b270:	2300      	movs	r3, #0
 800b272:	9305      	str	r3, [sp, #20]
 800b274:	9508      	str	r5, [sp, #32]
 800b276:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800b27a:	2200      	movs	r2, #0
 800b27c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b280:	2312      	movs	r3, #18
 800b282:	9209      	str	r2, [sp, #36]	; 0x24
 800b284:	e7cf      	b.n	800b226 <_dtoa_r+0x266>
 800b286:	2301      	movs	r3, #1
 800b288:	9308      	str	r3, [sp, #32]
 800b28a:	e7f4      	b.n	800b276 <_dtoa_r+0x2b6>
 800b28c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b290:	f8cd 9004 	str.w	r9, [sp, #4]
 800b294:	464b      	mov	r3, r9
 800b296:	e7c6      	b.n	800b226 <_dtoa_r+0x266>
 800b298:	3101      	adds	r1, #1
 800b29a:	6041      	str	r1, [r0, #4]
 800b29c:	0052      	lsls	r2, r2, #1
 800b29e:	e7c6      	b.n	800b22e <_dtoa_r+0x26e>
 800b2a0:	636f4361 	.word	0x636f4361
 800b2a4:	3fd287a7 	.word	0x3fd287a7
 800b2a8:	8b60c8b3 	.word	0x8b60c8b3
 800b2ac:	3fc68a28 	.word	0x3fc68a28
 800b2b0:	509f79fb 	.word	0x509f79fb
 800b2b4:	3fd34413 	.word	0x3fd34413
 800b2b8:	08011161 	.word	0x08011161
 800b2bc:	08011178 	.word	0x08011178
 800b2c0:	7ff00000 	.word	0x7ff00000
 800b2c4:	0801115d 	.word	0x0801115d
 800b2c8:	08011154 	.word	0x08011154
 800b2cc:	08011131 	.word	0x08011131
 800b2d0:	3ff80000 	.word	0x3ff80000
 800b2d4:	080112d0 	.word	0x080112d0
 800b2d8:	080111d7 	.word	0x080111d7
 800b2dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2de:	9a00      	ldr	r2, [sp, #0]
 800b2e0:	601a      	str	r2, [r3, #0]
 800b2e2:	9b01      	ldr	r3, [sp, #4]
 800b2e4:	2b0e      	cmp	r3, #14
 800b2e6:	f200 80ad 	bhi.w	800b444 <_dtoa_r+0x484>
 800b2ea:	2d00      	cmp	r5, #0
 800b2ec:	f000 80aa 	beq.w	800b444 <_dtoa_r+0x484>
 800b2f0:	f1ba 0f00 	cmp.w	sl, #0
 800b2f4:	dd36      	ble.n	800b364 <_dtoa_r+0x3a4>
 800b2f6:	4ac3      	ldr	r2, [pc, #780]	; (800b604 <_dtoa_r+0x644>)
 800b2f8:	f00a 030f 	and.w	r3, sl, #15
 800b2fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b300:	ed93 7b00 	vldr	d7, [r3]
 800b304:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b308:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b30c:	eeb0 8a47 	vmov.f32	s16, s14
 800b310:	eef0 8a67 	vmov.f32	s17, s15
 800b314:	d016      	beq.n	800b344 <_dtoa_r+0x384>
 800b316:	4bbc      	ldr	r3, [pc, #752]	; (800b608 <_dtoa_r+0x648>)
 800b318:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b31c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b320:	f7f5 fa94 	bl	800084c <__aeabi_ddiv>
 800b324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b328:	f007 070f 	and.w	r7, r7, #15
 800b32c:	2503      	movs	r5, #3
 800b32e:	4eb6      	ldr	r6, [pc, #728]	; (800b608 <_dtoa_r+0x648>)
 800b330:	b957      	cbnz	r7, 800b348 <_dtoa_r+0x388>
 800b332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b336:	ec53 2b18 	vmov	r2, r3, d8
 800b33a:	f7f5 fa87 	bl	800084c <__aeabi_ddiv>
 800b33e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b342:	e029      	b.n	800b398 <_dtoa_r+0x3d8>
 800b344:	2502      	movs	r5, #2
 800b346:	e7f2      	b.n	800b32e <_dtoa_r+0x36e>
 800b348:	07f9      	lsls	r1, r7, #31
 800b34a:	d508      	bpl.n	800b35e <_dtoa_r+0x39e>
 800b34c:	ec51 0b18 	vmov	r0, r1, d8
 800b350:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b354:	f7f5 f950 	bl	80005f8 <__aeabi_dmul>
 800b358:	ec41 0b18 	vmov	d8, r0, r1
 800b35c:	3501      	adds	r5, #1
 800b35e:	107f      	asrs	r7, r7, #1
 800b360:	3608      	adds	r6, #8
 800b362:	e7e5      	b.n	800b330 <_dtoa_r+0x370>
 800b364:	f000 80a6 	beq.w	800b4b4 <_dtoa_r+0x4f4>
 800b368:	f1ca 0600 	rsb	r6, sl, #0
 800b36c:	4ba5      	ldr	r3, [pc, #660]	; (800b604 <_dtoa_r+0x644>)
 800b36e:	4fa6      	ldr	r7, [pc, #664]	; (800b608 <_dtoa_r+0x648>)
 800b370:	f006 020f 	and.w	r2, r6, #15
 800b374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b380:	f7f5 f93a 	bl	80005f8 <__aeabi_dmul>
 800b384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b388:	1136      	asrs	r6, r6, #4
 800b38a:	2300      	movs	r3, #0
 800b38c:	2502      	movs	r5, #2
 800b38e:	2e00      	cmp	r6, #0
 800b390:	f040 8085 	bne.w	800b49e <_dtoa_r+0x4de>
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1d2      	bne.n	800b33e <_dtoa_r+0x37e>
 800b398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f000 808c 	beq.w	800b4b8 <_dtoa_r+0x4f8>
 800b3a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b3a4:	4b99      	ldr	r3, [pc, #612]	; (800b60c <_dtoa_r+0x64c>)
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	f7f5 fb96 	bl	8000adc <__aeabi_dcmplt>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	f000 8081 	beq.w	800b4b8 <_dtoa_r+0x4f8>
 800b3b6:	9b01      	ldr	r3, [sp, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d07d      	beq.n	800b4b8 <_dtoa_r+0x4f8>
 800b3bc:	f1b9 0f00 	cmp.w	r9, #0
 800b3c0:	dd3c      	ble.n	800b43c <_dtoa_r+0x47c>
 800b3c2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b3c6:	9307      	str	r3, [sp, #28]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	4b91      	ldr	r3, [pc, #580]	; (800b610 <_dtoa_r+0x650>)
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	f7f5 f912 	bl	80005f8 <__aeabi_dmul>
 800b3d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3d8:	3501      	adds	r5, #1
 800b3da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b3de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f7f5 f89e 	bl	8000524 <__aeabi_i2d>
 800b3e8:	4632      	mov	r2, r6
 800b3ea:	463b      	mov	r3, r7
 800b3ec:	f7f5 f904 	bl	80005f8 <__aeabi_dmul>
 800b3f0:	4b88      	ldr	r3, [pc, #544]	; (800b614 <_dtoa_r+0x654>)
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f7f4 ff4a 	bl	800028c <__adddf3>
 800b3f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b3fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b400:	9303      	str	r3, [sp, #12]
 800b402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b404:	2b00      	cmp	r3, #0
 800b406:	d15c      	bne.n	800b4c2 <_dtoa_r+0x502>
 800b408:	4b83      	ldr	r3, [pc, #524]	; (800b618 <_dtoa_r+0x658>)
 800b40a:	2200      	movs	r2, #0
 800b40c:	4630      	mov	r0, r6
 800b40e:	4639      	mov	r1, r7
 800b410:	f7f4 ff3a 	bl	8000288 <__aeabi_dsub>
 800b414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b418:	4606      	mov	r6, r0
 800b41a:	460f      	mov	r7, r1
 800b41c:	f7f5 fb7c 	bl	8000b18 <__aeabi_dcmpgt>
 800b420:	2800      	cmp	r0, #0
 800b422:	f040 8296 	bne.w	800b952 <_dtoa_r+0x992>
 800b426:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b42a:	4630      	mov	r0, r6
 800b42c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b430:	4639      	mov	r1, r7
 800b432:	f7f5 fb53 	bl	8000adc <__aeabi_dcmplt>
 800b436:	2800      	cmp	r0, #0
 800b438:	f040 8288 	bne.w	800b94c <_dtoa_r+0x98c>
 800b43c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b440:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b444:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b446:	2b00      	cmp	r3, #0
 800b448:	f2c0 8158 	blt.w	800b6fc <_dtoa_r+0x73c>
 800b44c:	f1ba 0f0e 	cmp.w	sl, #14
 800b450:	f300 8154 	bgt.w	800b6fc <_dtoa_r+0x73c>
 800b454:	4b6b      	ldr	r3, [pc, #428]	; (800b604 <_dtoa_r+0x644>)
 800b456:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b45a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b460:	2b00      	cmp	r3, #0
 800b462:	f280 80e3 	bge.w	800b62c <_dtoa_r+0x66c>
 800b466:	9b01      	ldr	r3, [sp, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f300 80df 	bgt.w	800b62c <_dtoa_r+0x66c>
 800b46e:	f040 826d 	bne.w	800b94c <_dtoa_r+0x98c>
 800b472:	4b69      	ldr	r3, [pc, #420]	; (800b618 <_dtoa_r+0x658>)
 800b474:	2200      	movs	r2, #0
 800b476:	4640      	mov	r0, r8
 800b478:	4649      	mov	r1, r9
 800b47a:	f7f5 f8bd 	bl	80005f8 <__aeabi_dmul>
 800b47e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b482:	f7f5 fb3f 	bl	8000b04 <__aeabi_dcmpge>
 800b486:	9e01      	ldr	r6, [sp, #4]
 800b488:	4637      	mov	r7, r6
 800b48a:	2800      	cmp	r0, #0
 800b48c:	f040 8243 	bne.w	800b916 <_dtoa_r+0x956>
 800b490:	9d00      	ldr	r5, [sp, #0]
 800b492:	2331      	movs	r3, #49	; 0x31
 800b494:	f805 3b01 	strb.w	r3, [r5], #1
 800b498:	f10a 0a01 	add.w	sl, sl, #1
 800b49c:	e23f      	b.n	800b91e <_dtoa_r+0x95e>
 800b49e:	07f2      	lsls	r2, r6, #31
 800b4a0:	d505      	bpl.n	800b4ae <_dtoa_r+0x4ee>
 800b4a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4a6:	f7f5 f8a7 	bl	80005f8 <__aeabi_dmul>
 800b4aa:	3501      	adds	r5, #1
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	1076      	asrs	r6, r6, #1
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	e76c      	b.n	800b38e <_dtoa_r+0x3ce>
 800b4b4:	2502      	movs	r5, #2
 800b4b6:	e76f      	b.n	800b398 <_dtoa_r+0x3d8>
 800b4b8:	9b01      	ldr	r3, [sp, #4]
 800b4ba:	f8cd a01c 	str.w	sl, [sp, #28]
 800b4be:	930c      	str	r3, [sp, #48]	; 0x30
 800b4c0:	e78d      	b.n	800b3de <_dtoa_r+0x41e>
 800b4c2:	9900      	ldr	r1, [sp, #0]
 800b4c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b4c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4c8:	4b4e      	ldr	r3, [pc, #312]	; (800b604 <_dtoa_r+0x644>)
 800b4ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4ce:	4401      	add	r1, r0
 800b4d0:	9102      	str	r1, [sp, #8]
 800b4d2:	9908      	ldr	r1, [sp, #32]
 800b4d4:	eeb0 8a47 	vmov.f32	s16, s14
 800b4d8:	eef0 8a67 	vmov.f32	s17, s15
 800b4dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4e4:	2900      	cmp	r1, #0
 800b4e6:	d045      	beq.n	800b574 <_dtoa_r+0x5b4>
 800b4e8:	494c      	ldr	r1, [pc, #304]	; (800b61c <_dtoa_r+0x65c>)
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	f7f5 f9ae 	bl	800084c <__aeabi_ddiv>
 800b4f0:	ec53 2b18 	vmov	r2, r3, d8
 800b4f4:	f7f4 fec8 	bl	8000288 <__aeabi_dsub>
 800b4f8:	9d00      	ldr	r5, [sp, #0]
 800b4fa:	ec41 0b18 	vmov	d8, r0, r1
 800b4fe:	4639      	mov	r1, r7
 800b500:	4630      	mov	r0, r6
 800b502:	f7f5 fb29 	bl	8000b58 <__aeabi_d2iz>
 800b506:	900c      	str	r0, [sp, #48]	; 0x30
 800b508:	f7f5 f80c 	bl	8000524 <__aeabi_i2d>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	4630      	mov	r0, r6
 800b512:	4639      	mov	r1, r7
 800b514:	f7f4 feb8 	bl	8000288 <__aeabi_dsub>
 800b518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b51a:	3330      	adds	r3, #48	; 0x30
 800b51c:	f805 3b01 	strb.w	r3, [r5], #1
 800b520:	ec53 2b18 	vmov	r2, r3, d8
 800b524:	4606      	mov	r6, r0
 800b526:	460f      	mov	r7, r1
 800b528:	f7f5 fad8 	bl	8000adc <__aeabi_dcmplt>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d165      	bne.n	800b5fc <_dtoa_r+0x63c>
 800b530:	4632      	mov	r2, r6
 800b532:	463b      	mov	r3, r7
 800b534:	4935      	ldr	r1, [pc, #212]	; (800b60c <_dtoa_r+0x64c>)
 800b536:	2000      	movs	r0, #0
 800b538:	f7f4 fea6 	bl	8000288 <__aeabi_dsub>
 800b53c:	ec53 2b18 	vmov	r2, r3, d8
 800b540:	f7f5 facc 	bl	8000adc <__aeabi_dcmplt>
 800b544:	2800      	cmp	r0, #0
 800b546:	f040 80b9 	bne.w	800b6bc <_dtoa_r+0x6fc>
 800b54a:	9b02      	ldr	r3, [sp, #8]
 800b54c:	429d      	cmp	r5, r3
 800b54e:	f43f af75 	beq.w	800b43c <_dtoa_r+0x47c>
 800b552:	4b2f      	ldr	r3, [pc, #188]	; (800b610 <_dtoa_r+0x650>)
 800b554:	ec51 0b18 	vmov	r0, r1, d8
 800b558:	2200      	movs	r2, #0
 800b55a:	f7f5 f84d 	bl	80005f8 <__aeabi_dmul>
 800b55e:	4b2c      	ldr	r3, [pc, #176]	; (800b610 <_dtoa_r+0x650>)
 800b560:	ec41 0b18 	vmov	d8, r0, r1
 800b564:	2200      	movs	r2, #0
 800b566:	4630      	mov	r0, r6
 800b568:	4639      	mov	r1, r7
 800b56a:	f7f5 f845 	bl	80005f8 <__aeabi_dmul>
 800b56e:	4606      	mov	r6, r0
 800b570:	460f      	mov	r7, r1
 800b572:	e7c4      	b.n	800b4fe <_dtoa_r+0x53e>
 800b574:	ec51 0b17 	vmov	r0, r1, d7
 800b578:	f7f5 f83e 	bl	80005f8 <__aeabi_dmul>
 800b57c:	9b02      	ldr	r3, [sp, #8]
 800b57e:	9d00      	ldr	r5, [sp, #0]
 800b580:	930c      	str	r3, [sp, #48]	; 0x30
 800b582:	ec41 0b18 	vmov	d8, r0, r1
 800b586:	4639      	mov	r1, r7
 800b588:	4630      	mov	r0, r6
 800b58a:	f7f5 fae5 	bl	8000b58 <__aeabi_d2iz>
 800b58e:	9011      	str	r0, [sp, #68]	; 0x44
 800b590:	f7f4 ffc8 	bl	8000524 <__aeabi_i2d>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	4630      	mov	r0, r6
 800b59a:	4639      	mov	r1, r7
 800b59c:	f7f4 fe74 	bl	8000288 <__aeabi_dsub>
 800b5a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5a2:	3330      	adds	r3, #48	; 0x30
 800b5a4:	f805 3b01 	strb.w	r3, [r5], #1
 800b5a8:	9b02      	ldr	r3, [sp, #8]
 800b5aa:	429d      	cmp	r5, r3
 800b5ac:	4606      	mov	r6, r0
 800b5ae:	460f      	mov	r7, r1
 800b5b0:	f04f 0200 	mov.w	r2, #0
 800b5b4:	d134      	bne.n	800b620 <_dtoa_r+0x660>
 800b5b6:	4b19      	ldr	r3, [pc, #100]	; (800b61c <_dtoa_r+0x65c>)
 800b5b8:	ec51 0b18 	vmov	r0, r1, d8
 800b5bc:	f7f4 fe66 	bl	800028c <__adddf3>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	4639      	mov	r1, r7
 800b5c8:	f7f5 faa6 	bl	8000b18 <__aeabi_dcmpgt>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d175      	bne.n	800b6bc <_dtoa_r+0x6fc>
 800b5d0:	ec53 2b18 	vmov	r2, r3, d8
 800b5d4:	4911      	ldr	r1, [pc, #68]	; (800b61c <_dtoa_r+0x65c>)
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	f7f4 fe56 	bl	8000288 <__aeabi_dsub>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	4639      	mov	r1, r7
 800b5e4:	f7f5 fa7a 	bl	8000adc <__aeabi_dcmplt>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	f43f af27 	beq.w	800b43c <_dtoa_r+0x47c>
 800b5ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b5f0:	1e6b      	subs	r3, r5, #1
 800b5f2:	930c      	str	r3, [sp, #48]	; 0x30
 800b5f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5f8:	2b30      	cmp	r3, #48	; 0x30
 800b5fa:	d0f8      	beq.n	800b5ee <_dtoa_r+0x62e>
 800b5fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b600:	e04a      	b.n	800b698 <_dtoa_r+0x6d8>
 800b602:	bf00      	nop
 800b604:	080112d0 	.word	0x080112d0
 800b608:	080112a8 	.word	0x080112a8
 800b60c:	3ff00000 	.word	0x3ff00000
 800b610:	40240000 	.word	0x40240000
 800b614:	401c0000 	.word	0x401c0000
 800b618:	40140000 	.word	0x40140000
 800b61c:	3fe00000 	.word	0x3fe00000
 800b620:	4baf      	ldr	r3, [pc, #700]	; (800b8e0 <_dtoa_r+0x920>)
 800b622:	f7f4 ffe9 	bl	80005f8 <__aeabi_dmul>
 800b626:	4606      	mov	r6, r0
 800b628:	460f      	mov	r7, r1
 800b62a:	e7ac      	b.n	800b586 <_dtoa_r+0x5c6>
 800b62c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b630:	9d00      	ldr	r5, [sp, #0]
 800b632:	4642      	mov	r2, r8
 800b634:	464b      	mov	r3, r9
 800b636:	4630      	mov	r0, r6
 800b638:	4639      	mov	r1, r7
 800b63a:	f7f5 f907 	bl	800084c <__aeabi_ddiv>
 800b63e:	f7f5 fa8b 	bl	8000b58 <__aeabi_d2iz>
 800b642:	9002      	str	r0, [sp, #8]
 800b644:	f7f4 ff6e 	bl	8000524 <__aeabi_i2d>
 800b648:	4642      	mov	r2, r8
 800b64a:	464b      	mov	r3, r9
 800b64c:	f7f4 ffd4 	bl	80005f8 <__aeabi_dmul>
 800b650:	4602      	mov	r2, r0
 800b652:	460b      	mov	r3, r1
 800b654:	4630      	mov	r0, r6
 800b656:	4639      	mov	r1, r7
 800b658:	f7f4 fe16 	bl	8000288 <__aeabi_dsub>
 800b65c:	9e02      	ldr	r6, [sp, #8]
 800b65e:	9f01      	ldr	r7, [sp, #4]
 800b660:	3630      	adds	r6, #48	; 0x30
 800b662:	f805 6b01 	strb.w	r6, [r5], #1
 800b666:	9e00      	ldr	r6, [sp, #0]
 800b668:	1bae      	subs	r6, r5, r6
 800b66a:	42b7      	cmp	r7, r6
 800b66c:	4602      	mov	r2, r0
 800b66e:	460b      	mov	r3, r1
 800b670:	d137      	bne.n	800b6e2 <_dtoa_r+0x722>
 800b672:	f7f4 fe0b 	bl	800028c <__adddf3>
 800b676:	4642      	mov	r2, r8
 800b678:	464b      	mov	r3, r9
 800b67a:	4606      	mov	r6, r0
 800b67c:	460f      	mov	r7, r1
 800b67e:	f7f5 fa4b 	bl	8000b18 <__aeabi_dcmpgt>
 800b682:	b9c8      	cbnz	r0, 800b6b8 <_dtoa_r+0x6f8>
 800b684:	4642      	mov	r2, r8
 800b686:	464b      	mov	r3, r9
 800b688:	4630      	mov	r0, r6
 800b68a:	4639      	mov	r1, r7
 800b68c:	f7f5 fa1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b690:	b110      	cbz	r0, 800b698 <_dtoa_r+0x6d8>
 800b692:	9b02      	ldr	r3, [sp, #8]
 800b694:	07d9      	lsls	r1, r3, #31
 800b696:	d40f      	bmi.n	800b6b8 <_dtoa_r+0x6f8>
 800b698:	4620      	mov	r0, r4
 800b69a:	4659      	mov	r1, fp
 800b69c:	f000 fce8 	bl	800c070 <_Bfree>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	702b      	strb	r3, [r5, #0]
 800b6a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6a6:	f10a 0001 	add.w	r0, sl, #1
 800b6aa:	6018      	str	r0, [r3, #0]
 800b6ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f43f acd8 	beq.w	800b064 <_dtoa_r+0xa4>
 800b6b4:	601d      	str	r5, [r3, #0]
 800b6b6:	e4d5      	b.n	800b064 <_dtoa_r+0xa4>
 800b6b8:	f8cd a01c 	str.w	sl, [sp, #28]
 800b6bc:	462b      	mov	r3, r5
 800b6be:	461d      	mov	r5, r3
 800b6c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6c4:	2a39      	cmp	r2, #57	; 0x39
 800b6c6:	d108      	bne.n	800b6da <_dtoa_r+0x71a>
 800b6c8:	9a00      	ldr	r2, [sp, #0]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d1f7      	bne.n	800b6be <_dtoa_r+0x6fe>
 800b6ce:	9a07      	ldr	r2, [sp, #28]
 800b6d0:	9900      	ldr	r1, [sp, #0]
 800b6d2:	3201      	adds	r2, #1
 800b6d4:	9207      	str	r2, [sp, #28]
 800b6d6:	2230      	movs	r2, #48	; 0x30
 800b6d8:	700a      	strb	r2, [r1, #0]
 800b6da:	781a      	ldrb	r2, [r3, #0]
 800b6dc:	3201      	adds	r2, #1
 800b6de:	701a      	strb	r2, [r3, #0]
 800b6e0:	e78c      	b.n	800b5fc <_dtoa_r+0x63c>
 800b6e2:	4b7f      	ldr	r3, [pc, #508]	; (800b8e0 <_dtoa_r+0x920>)
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f7f4 ff87 	bl	80005f8 <__aeabi_dmul>
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	460f      	mov	r7, r1
 800b6f2:	f7f5 f9e9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d09b      	beq.n	800b632 <_dtoa_r+0x672>
 800b6fa:	e7cd      	b.n	800b698 <_dtoa_r+0x6d8>
 800b6fc:	9a08      	ldr	r2, [sp, #32]
 800b6fe:	2a00      	cmp	r2, #0
 800b700:	f000 80c4 	beq.w	800b88c <_dtoa_r+0x8cc>
 800b704:	9a05      	ldr	r2, [sp, #20]
 800b706:	2a01      	cmp	r2, #1
 800b708:	f300 80a8 	bgt.w	800b85c <_dtoa_r+0x89c>
 800b70c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b70e:	2a00      	cmp	r2, #0
 800b710:	f000 80a0 	beq.w	800b854 <_dtoa_r+0x894>
 800b714:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b718:	9e06      	ldr	r6, [sp, #24]
 800b71a:	4645      	mov	r5, r8
 800b71c:	9a04      	ldr	r2, [sp, #16]
 800b71e:	2101      	movs	r1, #1
 800b720:	441a      	add	r2, r3
 800b722:	4620      	mov	r0, r4
 800b724:	4498      	add	r8, r3
 800b726:	9204      	str	r2, [sp, #16]
 800b728:	f000 fd5e 	bl	800c1e8 <__i2b>
 800b72c:	4607      	mov	r7, r0
 800b72e:	2d00      	cmp	r5, #0
 800b730:	dd0b      	ble.n	800b74a <_dtoa_r+0x78a>
 800b732:	9b04      	ldr	r3, [sp, #16]
 800b734:	2b00      	cmp	r3, #0
 800b736:	dd08      	ble.n	800b74a <_dtoa_r+0x78a>
 800b738:	42ab      	cmp	r3, r5
 800b73a:	9a04      	ldr	r2, [sp, #16]
 800b73c:	bfa8      	it	ge
 800b73e:	462b      	movge	r3, r5
 800b740:	eba8 0803 	sub.w	r8, r8, r3
 800b744:	1aed      	subs	r5, r5, r3
 800b746:	1ad3      	subs	r3, r2, r3
 800b748:	9304      	str	r3, [sp, #16]
 800b74a:	9b06      	ldr	r3, [sp, #24]
 800b74c:	b1fb      	cbz	r3, 800b78e <_dtoa_r+0x7ce>
 800b74e:	9b08      	ldr	r3, [sp, #32]
 800b750:	2b00      	cmp	r3, #0
 800b752:	f000 809f 	beq.w	800b894 <_dtoa_r+0x8d4>
 800b756:	2e00      	cmp	r6, #0
 800b758:	dd11      	ble.n	800b77e <_dtoa_r+0x7be>
 800b75a:	4639      	mov	r1, r7
 800b75c:	4632      	mov	r2, r6
 800b75e:	4620      	mov	r0, r4
 800b760:	f000 fdfe 	bl	800c360 <__pow5mult>
 800b764:	465a      	mov	r2, fp
 800b766:	4601      	mov	r1, r0
 800b768:	4607      	mov	r7, r0
 800b76a:	4620      	mov	r0, r4
 800b76c:	f000 fd52 	bl	800c214 <__multiply>
 800b770:	4659      	mov	r1, fp
 800b772:	9007      	str	r0, [sp, #28]
 800b774:	4620      	mov	r0, r4
 800b776:	f000 fc7b 	bl	800c070 <_Bfree>
 800b77a:	9b07      	ldr	r3, [sp, #28]
 800b77c:	469b      	mov	fp, r3
 800b77e:	9b06      	ldr	r3, [sp, #24]
 800b780:	1b9a      	subs	r2, r3, r6
 800b782:	d004      	beq.n	800b78e <_dtoa_r+0x7ce>
 800b784:	4659      	mov	r1, fp
 800b786:	4620      	mov	r0, r4
 800b788:	f000 fdea 	bl	800c360 <__pow5mult>
 800b78c:	4683      	mov	fp, r0
 800b78e:	2101      	movs	r1, #1
 800b790:	4620      	mov	r0, r4
 800b792:	f000 fd29 	bl	800c1e8 <__i2b>
 800b796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b798:	2b00      	cmp	r3, #0
 800b79a:	4606      	mov	r6, r0
 800b79c:	dd7c      	ble.n	800b898 <_dtoa_r+0x8d8>
 800b79e:	461a      	mov	r2, r3
 800b7a0:	4601      	mov	r1, r0
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 fddc 	bl	800c360 <__pow5mult>
 800b7a8:	9b05      	ldr	r3, [sp, #20]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	4606      	mov	r6, r0
 800b7ae:	dd76      	ble.n	800b89e <_dtoa_r+0x8de>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	9306      	str	r3, [sp, #24]
 800b7b4:	6933      	ldr	r3, [r6, #16]
 800b7b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b7ba:	6918      	ldr	r0, [r3, #16]
 800b7bc:	f000 fcc4 	bl	800c148 <__hi0bits>
 800b7c0:	f1c0 0020 	rsb	r0, r0, #32
 800b7c4:	9b04      	ldr	r3, [sp, #16]
 800b7c6:	4418      	add	r0, r3
 800b7c8:	f010 001f 	ands.w	r0, r0, #31
 800b7cc:	f000 8086 	beq.w	800b8dc <_dtoa_r+0x91c>
 800b7d0:	f1c0 0320 	rsb	r3, r0, #32
 800b7d4:	2b04      	cmp	r3, #4
 800b7d6:	dd7f      	ble.n	800b8d8 <_dtoa_r+0x918>
 800b7d8:	f1c0 001c 	rsb	r0, r0, #28
 800b7dc:	9b04      	ldr	r3, [sp, #16]
 800b7de:	4403      	add	r3, r0
 800b7e0:	4480      	add	r8, r0
 800b7e2:	4405      	add	r5, r0
 800b7e4:	9304      	str	r3, [sp, #16]
 800b7e6:	f1b8 0f00 	cmp.w	r8, #0
 800b7ea:	dd05      	ble.n	800b7f8 <_dtoa_r+0x838>
 800b7ec:	4659      	mov	r1, fp
 800b7ee:	4642      	mov	r2, r8
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f000 fe0f 	bl	800c414 <__lshift>
 800b7f6:	4683      	mov	fp, r0
 800b7f8:	9b04      	ldr	r3, [sp, #16]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	dd05      	ble.n	800b80a <_dtoa_r+0x84a>
 800b7fe:	4631      	mov	r1, r6
 800b800:	461a      	mov	r2, r3
 800b802:	4620      	mov	r0, r4
 800b804:	f000 fe06 	bl	800c414 <__lshift>
 800b808:	4606      	mov	r6, r0
 800b80a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d069      	beq.n	800b8e4 <_dtoa_r+0x924>
 800b810:	4631      	mov	r1, r6
 800b812:	4658      	mov	r0, fp
 800b814:	f000 fe6a 	bl	800c4ec <__mcmp>
 800b818:	2800      	cmp	r0, #0
 800b81a:	da63      	bge.n	800b8e4 <_dtoa_r+0x924>
 800b81c:	2300      	movs	r3, #0
 800b81e:	4659      	mov	r1, fp
 800b820:	220a      	movs	r2, #10
 800b822:	4620      	mov	r0, r4
 800b824:	f000 fc46 	bl	800c0b4 <__multadd>
 800b828:	9b08      	ldr	r3, [sp, #32]
 800b82a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b82e:	4683      	mov	fp, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	f000 818f 	beq.w	800bb54 <_dtoa_r+0xb94>
 800b836:	4639      	mov	r1, r7
 800b838:	2300      	movs	r3, #0
 800b83a:	220a      	movs	r2, #10
 800b83c:	4620      	mov	r0, r4
 800b83e:	f000 fc39 	bl	800c0b4 <__multadd>
 800b842:	f1b9 0f00 	cmp.w	r9, #0
 800b846:	4607      	mov	r7, r0
 800b848:	f300 808e 	bgt.w	800b968 <_dtoa_r+0x9a8>
 800b84c:	9b05      	ldr	r3, [sp, #20]
 800b84e:	2b02      	cmp	r3, #2
 800b850:	dc50      	bgt.n	800b8f4 <_dtoa_r+0x934>
 800b852:	e089      	b.n	800b968 <_dtoa_r+0x9a8>
 800b854:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b856:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b85a:	e75d      	b.n	800b718 <_dtoa_r+0x758>
 800b85c:	9b01      	ldr	r3, [sp, #4]
 800b85e:	1e5e      	subs	r6, r3, #1
 800b860:	9b06      	ldr	r3, [sp, #24]
 800b862:	42b3      	cmp	r3, r6
 800b864:	bfbf      	itttt	lt
 800b866:	9b06      	ldrlt	r3, [sp, #24]
 800b868:	9606      	strlt	r6, [sp, #24]
 800b86a:	1af2      	sublt	r2, r6, r3
 800b86c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b86e:	bfb6      	itet	lt
 800b870:	189b      	addlt	r3, r3, r2
 800b872:	1b9e      	subge	r6, r3, r6
 800b874:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b876:	9b01      	ldr	r3, [sp, #4]
 800b878:	bfb8      	it	lt
 800b87a:	2600      	movlt	r6, #0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	bfb5      	itete	lt
 800b880:	eba8 0503 	sublt.w	r5, r8, r3
 800b884:	9b01      	ldrge	r3, [sp, #4]
 800b886:	2300      	movlt	r3, #0
 800b888:	4645      	movge	r5, r8
 800b88a:	e747      	b.n	800b71c <_dtoa_r+0x75c>
 800b88c:	9e06      	ldr	r6, [sp, #24]
 800b88e:	9f08      	ldr	r7, [sp, #32]
 800b890:	4645      	mov	r5, r8
 800b892:	e74c      	b.n	800b72e <_dtoa_r+0x76e>
 800b894:	9a06      	ldr	r2, [sp, #24]
 800b896:	e775      	b.n	800b784 <_dtoa_r+0x7c4>
 800b898:	9b05      	ldr	r3, [sp, #20]
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	dc18      	bgt.n	800b8d0 <_dtoa_r+0x910>
 800b89e:	9b02      	ldr	r3, [sp, #8]
 800b8a0:	b9b3      	cbnz	r3, 800b8d0 <_dtoa_r+0x910>
 800b8a2:	9b03      	ldr	r3, [sp, #12]
 800b8a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8a8:	b9a3      	cbnz	r3, 800b8d4 <_dtoa_r+0x914>
 800b8aa:	9b03      	ldr	r3, [sp, #12]
 800b8ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b8b0:	0d1b      	lsrs	r3, r3, #20
 800b8b2:	051b      	lsls	r3, r3, #20
 800b8b4:	b12b      	cbz	r3, 800b8c2 <_dtoa_r+0x902>
 800b8b6:	9b04      	ldr	r3, [sp, #16]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	9304      	str	r3, [sp, #16]
 800b8bc:	f108 0801 	add.w	r8, r8, #1
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	9306      	str	r3, [sp, #24]
 800b8c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f47f af74 	bne.w	800b7b4 <_dtoa_r+0x7f4>
 800b8cc:	2001      	movs	r0, #1
 800b8ce:	e779      	b.n	800b7c4 <_dtoa_r+0x804>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	e7f6      	b.n	800b8c2 <_dtoa_r+0x902>
 800b8d4:	9b02      	ldr	r3, [sp, #8]
 800b8d6:	e7f4      	b.n	800b8c2 <_dtoa_r+0x902>
 800b8d8:	d085      	beq.n	800b7e6 <_dtoa_r+0x826>
 800b8da:	4618      	mov	r0, r3
 800b8dc:	301c      	adds	r0, #28
 800b8de:	e77d      	b.n	800b7dc <_dtoa_r+0x81c>
 800b8e0:	40240000 	.word	0x40240000
 800b8e4:	9b01      	ldr	r3, [sp, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	dc38      	bgt.n	800b95c <_dtoa_r+0x99c>
 800b8ea:	9b05      	ldr	r3, [sp, #20]
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	dd35      	ble.n	800b95c <_dtoa_r+0x99c>
 800b8f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b8f4:	f1b9 0f00 	cmp.w	r9, #0
 800b8f8:	d10d      	bne.n	800b916 <_dtoa_r+0x956>
 800b8fa:	4631      	mov	r1, r6
 800b8fc:	464b      	mov	r3, r9
 800b8fe:	2205      	movs	r2, #5
 800b900:	4620      	mov	r0, r4
 800b902:	f000 fbd7 	bl	800c0b4 <__multadd>
 800b906:	4601      	mov	r1, r0
 800b908:	4606      	mov	r6, r0
 800b90a:	4658      	mov	r0, fp
 800b90c:	f000 fdee 	bl	800c4ec <__mcmp>
 800b910:	2800      	cmp	r0, #0
 800b912:	f73f adbd 	bgt.w	800b490 <_dtoa_r+0x4d0>
 800b916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b918:	9d00      	ldr	r5, [sp, #0]
 800b91a:	ea6f 0a03 	mvn.w	sl, r3
 800b91e:	f04f 0800 	mov.w	r8, #0
 800b922:	4631      	mov	r1, r6
 800b924:	4620      	mov	r0, r4
 800b926:	f000 fba3 	bl	800c070 <_Bfree>
 800b92a:	2f00      	cmp	r7, #0
 800b92c:	f43f aeb4 	beq.w	800b698 <_dtoa_r+0x6d8>
 800b930:	f1b8 0f00 	cmp.w	r8, #0
 800b934:	d005      	beq.n	800b942 <_dtoa_r+0x982>
 800b936:	45b8      	cmp	r8, r7
 800b938:	d003      	beq.n	800b942 <_dtoa_r+0x982>
 800b93a:	4641      	mov	r1, r8
 800b93c:	4620      	mov	r0, r4
 800b93e:	f000 fb97 	bl	800c070 <_Bfree>
 800b942:	4639      	mov	r1, r7
 800b944:	4620      	mov	r0, r4
 800b946:	f000 fb93 	bl	800c070 <_Bfree>
 800b94a:	e6a5      	b.n	800b698 <_dtoa_r+0x6d8>
 800b94c:	2600      	movs	r6, #0
 800b94e:	4637      	mov	r7, r6
 800b950:	e7e1      	b.n	800b916 <_dtoa_r+0x956>
 800b952:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b954:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b958:	4637      	mov	r7, r6
 800b95a:	e599      	b.n	800b490 <_dtoa_r+0x4d0>
 800b95c:	9b08      	ldr	r3, [sp, #32]
 800b95e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 80fd 	beq.w	800bb62 <_dtoa_r+0xba2>
 800b968:	2d00      	cmp	r5, #0
 800b96a:	dd05      	ble.n	800b978 <_dtoa_r+0x9b8>
 800b96c:	4639      	mov	r1, r7
 800b96e:	462a      	mov	r2, r5
 800b970:	4620      	mov	r0, r4
 800b972:	f000 fd4f 	bl	800c414 <__lshift>
 800b976:	4607      	mov	r7, r0
 800b978:	9b06      	ldr	r3, [sp, #24]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d05c      	beq.n	800ba38 <_dtoa_r+0xa78>
 800b97e:	6879      	ldr	r1, [r7, #4]
 800b980:	4620      	mov	r0, r4
 800b982:	f000 fb35 	bl	800bff0 <_Balloc>
 800b986:	4605      	mov	r5, r0
 800b988:	b928      	cbnz	r0, 800b996 <_dtoa_r+0x9d6>
 800b98a:	4b80      	ldr	r3, [pc, #512]	; (800bb8c <_dtoa_r+0xbcc>)
 800b98c:	4602      	mov	r2, r0
 800b98e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b992:	f7ff bb2e 	b.w	800aff2 <_dtoa_r+0x32>
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	3202      	adds	r2, #2
 800b99a:	0092      	lsls	r2, r2, #2
 800b99c:	f107 010c 	add.w	r1, r7, #12
 800b9a0:	300c      	adds	r0, #12
 800b9a2:	f7fe fd1f 	bl	800a3e4 <memcpy>
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	f000 fd32 	bl	800c414 <__lshift>
 800b9b0:	9b00      	ldr	r3, [sp, #0]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	9301      	str	r3, [sp, #4]
 800b9b6:	9b00      	ldr	r3, [sp, #0]
 800b9b8:	444b      	add	r3, r9
 800b9ba:	9307      	str	r3, [sp, #28]
 800b9bc:	9b02      	ldr	r3, [sp, #8]
 800b9be:	f003 0301 	and.w	r3, r3, #1
 800b9c2:	46b8      	mov	r8, r7
 800b9c4:	9306      	str	r3, [sp, #24]
 800b9c6:	4607      	mov	r7, r0
 800b9c8:	9b01      	ldr	r3, [sp, #4]
 800b9ca:	4631      	mov	r1, r6
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	4658      	mov	r0, fp
 800b9d0:	9302      	str	r3, [sp, #8]
 800b9d2:	f7ff fa67 	bl	800aea4 <quorem>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	3330      	adds	r3, #48	; 0x30
 800b9da:	9004      	str	r0, [sp, #16]
 800b9dc:	4641      	mov	r1, r8
 800b9de:	4658      	mov	r0, fp
 800b9e0:	9308      	str	r3, [sp, #32]
 800b9e2:	f000 fd83 	bl	800c4ec <__mcmp>
 800b9e6:	463a      	mov	r2, r7
 800b9e8:	4681      	mov	r9, r0
 800b9ea:	4631      	mov	r1, r6
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f000 fd99 	bl	800c524 <__mdiff>
 800b9f2:	68c2      	ldr	r2, [r0, #12]
 800b9f4:	9b08      	ldr	r3, [sp, #32]
 800b9f6:	4605      	mov	r5, r0
 800b9f8:	bb02      	cbnz	r2, 800ba3c <_dtoa_r+0xa7c>
 800b9fa:	4601      	mov	r1, r0
 800b9fc:	4658      	mov	r0, fp
 800b9fe:	f000 fd75 	bl	800c4ec <__mcmp>
 800ba02:	9b08      	ldr	r3, [sp, #32]
 800ba04:	4602      	mov	r2, r0
 800ba06:	4629      	mov	r1, r5
 800ba08:	4620      	mov	r0, r4
 800ba0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ba0e:	f000 fb2f 	bl	800c070 <_Bfree>
 800ba12:	9b05      	ldr	r3, [sp, #20]
 800ba14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba16:	9d01      	ldr	r5, [sp, #4]
 800ba18:	ea43 0102 	orr.w	r1, r3, r2
 800ba1c:	9b06      	ldr	r3, [sp, #24]
 800ba1e:	430b      	orrs	r3, r1
 800ba20:	9b08      	ldr	r3, [sp, #32]
 800ba22:	d10d      	bne.n	800ba40 <_dtoa_r+0xa80>
 800ba24:	2b39      	cmp	r3, #57	; 0x39
 800ba26:	d029      	beq.n	800ba7c <_dtoa_r+0xabc>
 800ba28:	f1b9 0f00 	cmp.w	r9, #0
 800ba2c:	dd01      	ble.n	800ba32 <_dtoa_r+0xa72>
 800ba2e:	9b04      	ldr	r3, [sp, #16]
 800ba30:	3331      	adds	r3, #49	; 0x31
 800ba32:	9a02      	ldr	r2, [sp, #8]
 800ba34:	7013      	strb	r3, [r2, #0]
 800ba36:	e774      	b.n	800b922 <_dtoa_r+0x962>
 800ba38:	4638      	mov	r0, r7
 800ba3a:	e7b9      	b.n	800b9b0 <_dtoa_r+0x9f0>
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	e7e2      	b.n	800ba06 <_dtoa_r+0xa46>
 800ba40:	f1b9 0f00 	cmp.w	r9, #0
 800ba44:	db06      	blt.n	800ba54 <_dtoa_r+0xa94>
 800ba46:	9905      	ldr	r1, [sp, #20]
 800ba48:	ea41 0909 	orr.w	r9, r1, r9
 800ba4c:	9906      	ldr	r1, [sp, #24]
 800ba4e:	ea59 0101 	orrs.w	r1, r9, r1
 800ba52:	d120      	bne.n	800ba96 <_dtoa_r+0xad6>
 800ba54:	2a00      	cmp	r2, #0
 800ba56:	ddec      	ble.n	800ba32 <_dtoa_r+0xa72>
 800ba58:	4659      	mov	r1, fp
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	9301      	str	r3, [sp, #4]
 800ba60:	f000 fcd8 	bl	800c414 <__lshift>
 800ba64:	4631      	mov	r1, r6
 800ba66:	4683      	mov	fp, r0
 800ba68:	f000 fd40 	bl	800c4ec <__mcmp>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	9b01      	ldr	r3, [sp, #4]
 800ba70:	dc02      	bgt.n	800ba78 <_dtoa_r+0xab8>
 800ba72:	d1de      	bne.n	800ba32 <_dtoa_r+0xa72>
 800ba74:	07da      	lsls	r2, r3, #31
 800ba76:	d5dc      	bpl.n	800ba32 <_dtoa_r+0xa72>
 800ba78:	2b39      	cmp	r3, #57	; 0x39
 800ba7a:	d1d8      	bne.n	800ba2e <_dtoa_r+0xa6e>
 800ba7c:	9a02      	ldr	r2, [sp, #8]
 800ba7e:	2339      	movs	r3, #57	; 0x39
 800ba80:	7013      	strb	r3, [r2, #0]
 800ba82:	462b      	mov	r3, r5
 800ba84:	461d      	mov	r5, r3
 800ba86:	3b01      	subs	r3, #1
 800ba88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ba8c:	2a39      	cmp	r2, #57	; 0x39
 800ba8e:	d050      	beq.n	800bb32 <_dtoa_r+0xb72>
 800ba90:	3201      	adds	r2, #1
 800ba92:	701a      	strb	r2, [r3, #0]
 800ba94:	e745      	b.n	800b922 <_dtoa_r+0x962>
 800ba96:	2a00      	cmp	r2, #0
 800ba98:	dd03      	ble.n	800baa2 <_dtoa_r+0xae2>
 800ba9a:	2b39      	cmp	r3, #57	; 0x39
 800ba9c:	d0ee      	beq.n	800ba7c <_dtoa_r+0xabc>
 800ba9e:	3301      	adds	r3, #1
 800baa0:	e7c7      	b.n	800ba32 <_dtoa_r+0xa72>
 800baa2:	9a01      	ldr	r2, [sp, #4]
 800baa4:	9907      	ldr	r1, [sp, #28]
 800baa6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800baaa:	428a      	cmp	r2, r1
 800baac:	d02a      	beq.n	800bb04 <_dtoa_r+0xb44>
 800baae:	4659      	mov	r1, fp
 800bab0:	2300      	movs	r3, #0
 800bab2:	220a      	movs	r2, #10
 800bab4:	4620      	mov	r0, r4
 800bab6:	f000 fafd 	bl	800c0b4 <__multadd>
 800baba:	45b8      	cmp	r8, r7
 800babc:	4683      	mov	fp, r0
 800babe:	f04f 0300 	mov.w	r3, #0
 800bac2:	f04f 020a 	mov.w	r2, #10
 800bac6:	4641      	mov	r1, r8
 800bac8:	4620      	mov	r0, r4
 800baca:	d107      	bne.n	800badc <_dtoa_r+0xb1c>
 800bacc:	f000 faf2 	bl	800c0b4 <__multadd>
 800bad0:	4680      	mov	r8, r0
 800bad2:	4607      	mov	r7, r0
 800bad4:	9b01      	ldr	r3, [sp, #4]
 800bad6:	3301      	adds	r3, #1
 800bad8:	9301      	str	r3, [sp, #4]
 800bada:	e775      	b.n	800b9c8 <_dtoa_r+0xa08>
 800badc:	f000 faea 	bl	800c0b4 <__multadd>
 800bae0:	4639      	mov	r1, r7
 800bae2:	4680      	mov	r8, r0
 800bae4:	2300      	movs	r3, #0
 800bae6:	220a      	movs	r2, #10
 800bae8:	4620      	mov	r0, r4
 800baea:	f000 fae3 	bl	800c0b4 <__multadd>
 800baee:	4607      	mov	r7, r0
 800baf0:	e7f0      	b.n	800bad4 <_dtoa_r+0xb14>
 800baf2:	f1b9 0f00 	cmp.w	r9, #0
 800baf6:	9a00      	ldr	r2, [sp, #0]
 800baf8:	bfcc      	ite	gt
 800bafa:	464d      	movgt	r5, r9
 800bafc:	2501      	movle	r5, #1
 800bafe:	4415      	add	r5, r2
 800bb00:	f04f 0800 	mov.w	r8, #0
 800bb04:	4659      	mov	r1, fp
 800bb06:	2201      	movs	r2, #1
 800bb08:	4620      	mov	r0, r4
 800bb0a:	9301      	str	r3, [sp, #4]
 800bb0c:	f000 fc82 	bl	800c414 <__lshift>
 800bb10:	4631      	mov	r1, r6
 800bb12:	4683      	mov	fp, r0
 800bb14:	f000 fcea 	bl	800c4ec <__mcmp>
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	dcb2      	bgt.n	800ba82 <_dtoa_r+0xac2>
 800bb1c:	d102      	bne.n	800bb24 <_dtoa_r+0xb64>
 800bb1e:	9b01      	ldr	r3, [sp, #4]
 800bb20:	07db      	lsls	r3, r3, #31
 800bb22:	d4ae      	bmi.n	800ba82 <_dtoa_r+0xac2>
 800bb24:	462b      	mov	r3, r5
 800bb26:	461d      	mov	r5, r3
 800bb28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb2c:	2a30      	cmp	r2, #48	; 0x30
 800bb2e:	d0fa      	beq.n	800bb26 <_dtoa_r+0xb66>
 800bb30:	e6f7      	b.n	800b922 <_dtoa_r+0x962>
 800bb32:	9a00      	ldr	r2, [sp, #0]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d1a5      	bne.n	800ba84 <_dtoa_r+0xac4>
 800bb38:	f10a 0a01 	add.w	sl, sl, #1
 800bb3c:	2331      	movs	r3, #49	; 0x31
 800bb3e:	e779      	b.n	800ba34 <_dtoa_r+0xa74>
 800bb40:	4b13      	ldr	r3, [pc, #76]	; (800bb90 <_dtoa_r+0xbd0>)
 800bb42:	f7ff baaf 	b.w	800b0a4 <_dtoa_r+0xe4>
 800bb46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f47f aa86 	bne.w	800b05a <_dtoa_r+0x9a>
 800bb4e:	4b11      	ldr	r3, [pc, #68]	; (800bb94 <_dtoa_r+0xbd4>)
 800bb50:	f7ff baa8 	b.w	800b0a4 <_dtoa_r+0xe4>
 800bb54:	f1b9 0f00 	cmp.w	r9, #0
 800bb58:	dc03      	bgt.n	800bb62 <_dtoa_r+0xba2>
 800bb5a:	9b05      	ldr	r3, [sp, #20]
 800bb5c:	2b02      	cmp	r3, #2
 800bb5e:	f73f aec9 	bgt.w	800b8f4 <_dtoa_r+0x934>
 800bb62:	9d00      	ldr	r5, [sp, #0]
 800bb64:	4631      	mov	r1, r6
 800bb66:	4658      	mov	r0, fp
 800bb68:	f7ff f99c 	bl	800aea4 <quorem>
 800bb6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bb70:	f805 3b01 	strb.w	r3, [r5], #1
 800bb74:	9a00      	ldr	r2, [sp, #0]
 800bb76:	1aaa      	subs	r2, r5, r2
 800bb78:	4591      	cmp	r9, r2
 800bb7a:	ddba      	ble.n	800baf2 <_dtoa_r+0xb32>
 800bb7c:	4659      	mov	r1, fp
 800bb7e:	2300      	movs	r3, #0
 800bb80:	220a      	movs	r2, #10
 800bb82:	4620      	mov	r0, r4
 800bb84:	f000 fa96 	bl	800c0b4 <__multadd>
 800bb88:	4683      	mov	fp, r0
 800bb8a:	e7eb      	b.n	800bb64 <_dtoa_r+0xba4>
 800bb8c:	080111d7 	.word	0x080111d7
 800bb90:	08011130 	.word	0x08011130
 800bb94:	08011154 	.word	0x08011154

0800bb98 <__sflush_r>:
 800bb98:	898a      	ldrh	r2, [r1, #12]
 800bb9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb9e:	4605      	mov	r5, r0
 800bba0:	0710      	lsls	r0, r2, #28
 800bba2:	460c      	mov	r4, r1
 800bba4:	d458      	bmi.n	800bc58 <__sflush_r+0xc0>
 800bba6:	684b      	ldr	r3, [r1, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	dc05      	bgt.n	800bbb8 <__sflush_r+0x20>
 800bbac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	dc02      	bgt.n	800bbb8 <__sflush_r+0x20>
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbba:	2e00      	cmp	r6, #0
 800bbbc:	d0f9      	beq.n	800bbb2 <__sflush_r+0x1a>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbc4:	682f      	ldr	r7, [r5, #0]
 800bbc6:	602b      	str	r3, [r5, #0]
 800bbc8:	d032      	beq.n	800bc30 <__sflush_r+0x98>
 800bbca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	075a      	lsls	r2, r3, #29
 800bbd0:	d505      	bpl.n	800bbde <__sflush_r+0x46>
 800bbd2:	6863      	ldr	r3, [r4, #4]
 800bbd4:	1ac0      	subs	r0, r0, r3
 800bbd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbd8:	b10b      	cbz	r3, 800bbde <__sflush_r+0x46>
 800bbda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbdc:	1ac0      	subs	r0, r0, r3
 800bbde:	2300      	movs	r3, #0
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbe4:	6a21      	ldr	r1, [r4, #32]
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	47b0      	blx	r6
 800bbea:	1c43      	adds	r3, r0, #1
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	d106      	bne.n	800bbfe <__sflush_r+0x66>
 800bbf0:	6829      	ldr	r1, [r5, #0]
 800bbf2:	291d      	cmp	r1, #29
 800bbf4:	d82c      	bhi.n	800bc50 <__sflush_r+0xb8>
 800bbf6:	4a2a      	ldr	r2, [pc, #168]	; (800bca0 <__sflush_r+0x108>)
 800bbf8:	40ca      	lsrs	r2, r1
 800bbfa:	07d6      	lsls	r6, r2, #31
 800bbfc:	d528      	bpl.n	800bc50 <__sflush_r+0xb8>
 800bbfe:	2200      	movs	r2, #0
 800bc00:	6062      	str	r2, [r4, #4]
 800bc02:	04d9      	lsls	r1, r3, #19
 800bc04:	6922      	ldr	r2, [r4, #16]
 800bc06:	6022      	str	r2, [r4, #0]
 800bc08:	d504      	bpl.n	800bc14 <__sflush_r+0x7c>
 800bc0a:	1c42      	adds	r2, r0, #1
 800bc0c:	d101      	bne.n	800bc12 <__sflush_r+0x7a>
 800bc0e:	682b      	ldr	r3, [r5, #0]
 800bc10:	b903      	cbnz	r3, 800bc14 <__sflush_r+0x7c>
 800bc12:	6560      	str	r0, [r4, #84]	; 0x54
 800bc14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc16:	602f      	str	r7, [r5, #0]
 800bc18:	2900      	cmp	r1, #0
 800bc1a:	d0ca      	beq.n	800bbb2 <__sflush_r+0x1a>
 800bc1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc20:	4299      	cmp	r1, r3
 800bc22:	d002      	beq.n	800bc2a <__sflush_r+0x92>
 800bc24:	4628      	mov	r0, r5
 800bc26:	f000 fd71 	bl	800c70c <_free_r>
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	6360      	str	r0, [r4, #52]	; 0x34
 800bc2e:	e7c1      	b.n	800bbb4 <__sflush_r+0x1c>
 800bc30:	6a21      	ldr	r1, [r4, #32]
 800bc32:	2301      	movs	r3, #1
 800bc34:	4628      	mov	r0, r5
 800bc36:	47b0      	blx	r6
 800bc38:	1c41      	adds	r1, r0, #1
 800bc3a:	d1c7      	bne.n	800bbcc <__sflush_r+0x34>
 800bc3c:	682b      	ldr	r3, [r5, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d0c4      	beq.n	800bbcc <__sflush_r+0x34>
 800bc42:	2b1d      	cmp	r3, #29
 800bc44:	d001      	beq.n	800bc4a <__sflush_r+0xb2>
 800bc46:	2b16      	cmp	r3, #22
 800bc48:	d101      	bne.n	800bc4e <__sflush_r+0xb6>
 800bc4a:	602f      	str	r7, [r5, #0]
 800bc4c:	e7b1      	b.n	800bbb2 <__sflush_r+0x1a>
 800bc4e:	89a3      	ldrh	r3, [r4, #12]
 800bc50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc54:	81a3      	strh	r3, [r4, #12]
 800bc56:	e7ad      	b.n	800bbb4 <__sflush_r+0x1c>
 800bc58:	690f      	ldr	r7, [r1, #16]
 800bc5a:	2f00      	cmp	r7, #0
 800bc5c:	d0a9      	beq.n	800bbb2 <__sflush_r+0x1a>
 800bc5e:	0793      	lsls	r3, r2, #30
 800bc60:	680e      	ldr	r6, [r1, #0]
 800bc62:	bf08      	it	eq
 800bc64:	694b      	ldreq	r3, [r1, #20]
 800bc66:	600f      	str	r7, [r1, #0]
 800bc68:	bf18      	it	ne
 800bc6a:	2300      	movne	r3, #0
 800bc6c:	eba6 0807 	sub.w	r8, r6, r7
 800bc70:	608b      	str	r3, [r1, #8]
 800bc72:	f1b8 0f00 	cmp.w	r8, #0
 800bc76:	dd9c      	ble.n	800bbb2 <__sflush_r+0x1a>
 800bc78:	6a21      	ldr	r1, [r4, #32]
 800bc7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc7c:	4643      	mov	r3, r8
 800bc7e:	463a      	mov	r2, r7
 800bc80:	4628      	mov	r0, r5
 800bc82:	47b0      	blx	r6
 800bc84:	2800      	cmp	r0, #0
 800bc86:	dc06      	bgt.n	800bc96 <__sflush_r+0xfe>
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc8e:	81a3      	strh	r3, [r4, #12]
 800bc90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc94:	e78e      	b.n	800bbb4 <__sflush_r+0x1c>
 800bc96:	4407      	add	r7, r0
 800bc98:	eba8 0800 	sub.w	r8, r8, r0
 800bc9c:	e7e9      	b.n	800bc72 <__sflush_r+0xda>
 800bc9e:	bf00      	nop
 800bca0:	20400001 	.word	0x20400001

0800bca4 <_fflush_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	690b      	ldr	r3, [r1, #16]
 800bca8:	4605      	mov	r5, r0
 800bcaa:	460c      	mov	r4, r1
 800bcac:	b913      	cbnz	r3, 800bcb4 <_fflush_r+0x10>
 800bcae:	2500      	movs	r5, #0
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	bd38      	pop	{r3, r4, r5, pc}
 800bcb4:	b118      	cbz	r0, 800bcbe <_fflush_r+0x1a>
 800bcb6:	6983      	ldr	r3, [r0, #24]
 800bcb8:	b90b      	cbnz	r3, 800bcbe <_fflush_r+0x1a>
 800bcba:	f000 f887 	bl	800bdcc <__sinit>
 800bcbe:	4b14      	ldr	r3, [pc, #80]	; (800bd10 <_fflush_r+0x6c>)
 800bcc0:	429c      	cmp	r4, r3
 800bcc2:	d11b      	bne.n	800bcfc <_fflush_r+0x58>
 800bcc4:	686c      	ldr	r4, [r5, #4]
 800bcc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d0ef      	beq.n	800bcae <_fflush_r+0xa>
 800bcce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcd0:	07d0      	lsls	r0, r2, #31
 800bcd2:	d404      	bmi.n	800bcde <_fflush_r+0x3a>
 800bcd4:	0599      	lsls	r1, r3, #22
 800bcd6:	d402      	bmi.n	800bcde <_fflush_r+0x3a>
 800bcd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcda:	f000 f91a 	bl	800bf12 <__retarget_lock_acquire_recursive>
 800bcde:	4628      	mov	r0, r5
 800bce0:	4621      	mov	r1, r4
 800bce2:	f7ff ff59 	bl	800bb98 <__sflush_r>
 800bce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bce8:	07da      	lsls	r2, r3, #31
 800bcea:	4605      	mov	r5, r0
 800bcec:	d4e0      	bmi.n	800bcb0 <_fflush_r+0xc>
 800bcee:	89a3      	ldrh	r3, [r4, #12]
 800bcf0:	059b      	lsls	r3, r3, #22
 800bcf2:	d4dd      	bmi.n	800bcb0 <_fflush_r+0xc>
 800bcf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcf6:	f000 f90d 	bl	800bf14 <__retarget_lock_release_recursive>
 800bcfa:	e7d9      	b.n	800bcb0 <_fflush_r+0xc>
 800bcfc:	4b05      	ldr	r3, [pc, #20]	; (800bd14 <_fflush_r+0x70>)
 800bcfe:	429c      	cmp	r4, r3
 800bd00:	d101      	bne.n	800bd06 <_fflush_r+0x62>
 800bd02:	68ac      	ldr	r4, [r5, #8]
 800bd04:	e7df      	b.n	800bcc6 <_fflush_r+0x22>
 800bd06:	4b04      	ldr	r3, [pc, #16]	; (800bd18 <_fflush_r+0x74>)
 800bd08:	429c      	cmp	r4, r3
 800bd0a:	bf08      	it	eq
 800bd0c:	68ec      	ldreq	r4, [r5, #12]
 800bd0e:	e7da      	b.n	800bcc6 <_fflush_r+0x22>
 800bd10:	08011208 	.word	0x08011208
 800bd14:	08011228 	.word	0x08011228
 800bd18:	080111e8 	.word	0x080111e8

0800bd1c <std>:
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	b510      	push	{r4, lr}
 800bd20:	4604      	mov	r4, r0
 800bd22:	e9c0 3300 	strd	r3, r3, [r0]
 800bd26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd2a:	6083      	str	r3, [r0, #8]
 800bd2c:	8181      	strh	r1, [r0, #12]
 800bd2e:	6643      	str	r3, [r0, #100]	; 0x64
 800bd30:	81c2      	strh	r2, [r0, #14]
 800bd32:	6183      	str	r3, [r0, #24]
 800bd34:	4619      	mov	r1, r3
 800bd36:	2208      	movs	r2, #8
 800bd38:	305c      	adds	r0, #92	; 0x5c
 800bd3a:	f7fe fb61 	bl	800a400 <memset>
 800bd3e:	4b05      	ldr	r3, [pc, #20]	; (800bd54 <std+0x38>)
 800bd40:	6263      	str	r3, [r4, #36]	; 0x24
 800bd42:	4b05      	ldr	r3, [pc, #20]	; (800bd58 <std+0x3c>)
 800bd44:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd46:	4b05      	ldr	r3, [pc, #20]	; (800bd5c <std+0x40>)
 800bd48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd4a:	4b05      	ldr	r3, [pc, #20]	; (800bd60 <std+0x44>)
 800bd4c:	6224      	str	r4, [r4, #32]
 800bd4e:	6323      	str	r3, [r4, #48]	; 0x30
 800bd50:	bd10      	pop	{r4, pc}
 800bd52:	bf00      	nop
 800bd54:	0800cded 	.word	0x0800cded
 800bd58:	0800ce0f 	.word	0x0800ce0f
 800bd5c:	0800ce47 	.word	0x0800ce47
 800bd60:	0800ce6b 	.word	0x0800ce6b

0800bd64 <_cleanup_r>:
 800bd64:	4901      	ldr	r1, [pc, #4]	; (800bd6c <_cleanup_r+0x8>)
 800bd66:	f000 b8af 	b.w	800bec8 <_fwalk_reent>
 800bd6a:	bf00      	nop
 800bd6c:	0800bca5 	.word	0x0800bca5

0800bd70 <__sfmoreglue>:
 800bd70:	b570      	push	{r4, r5, r6, lr}
 800bd72:	1e4a      	subs	r2, r1, #1
 800bd74:	2568      	movs	r5, #104	; 0x68
 800bd76:	4355      	muls	r5, r2
 800bd78:	460e      	mov	r6, r1
 800bd7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd7e:	f000 fd15 	bl	800c7ac <_malloc_r>
 800bd82:	4604      	mov	r4, r0
 800bd84:	b140      	cbz	r0, 800bd98 <__sfmoreglue+0x28>
 800bd86:	2100      	movs	r1, #0
 800bd88:	e9c0 1600 	strd	r1, r6, [r0]
 800bd8c:	300c      	adds	r0, #12
 800bd8e:	60a0      	str	r0, [r4, #8]
 800bd90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd94:	f7fe fb34 	bl	800a400 <memset>
 800bd98:	4620      	mov	r0, r4
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}

0800bd9c <__sfp_lock_acquire>:
 800bd9c:	4801      	ldr	r0, [pc, #4]	; (800bda4 <__sfp_lock_acquire+0x8>)
 800bd9e:	f000 b8b8 	b.w	800bf12 <__retarget_lock_acquire_recursive>
 800bda2:	bf00      	nop
 800bda4:	20004aa4 	.word	0x20004aa4

0800bda8 <__sfp_lock_release>:
 800bda8:	4801      	ldr	r0, [pc, #4]	; (800bdb0 <__sfp_lock_release+0x8>)
 800bdaa:	f000 b8b3 	b.w	800bf14 <__retarget_lock_release_recursive>
 800bdae:	bf00      	nop
 800bdb0:	20004aa4 	.word	0x20004aa4

0800bdb4 <__sinit_lock_acquire>:
 800bdb4:	4801      	ldr	r0, [pc, #4]	; (800bdbc <__sinit_lock_acquire+0x8>)
 800bdb6:	f000 b8ac 	b.w	800bf12 <__retarget_lock_acquire_recursive>
 800bdba:	bf00      	nop
 800bdbc:	20004a9f 	.word	0x20004a9f

0800bdc0 <__sinit_lock_release>:
 800bdc0:	4801      	ldr	r0, [pc, #4]	; (800bdc8 <__sinit_lock_release+0x8>)
 800bdc2:	f000 b8a7 	b.w	800bf14 <__retarget_lock_release_recursive>
 800bdc6:	bf00      	nop
 800bdc8:	20004a9f 	.word	0x20004a9f

0800bdcc <__sinit>:
 800bdcc:	b510      	push	{r4, lr}
 800bdce:	4604      	mov	r4, r0
 800bdd0:	f7ff fff0 	bl	800bdb4 <__sinit_lock_acquire>
 800bdd4:	69a3      	ldr	r3, [r4, #24]
 800bdd6:	b11b      	cbz	r3, 800bde0 <__sinit+0x14>
 800bdd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bddc:	f7ff bff0 	b.w	800bdc0 <__sinit_lock_release>
 800bde0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bde4:	6523      	str	r3, [r4, #80]	; 0x50
 800bde6:	4b13      	ldr	r3, [pc, #76]	; (800be34 <__sinit+0x68>)
 800bde8:	4a13      	ldr	r2, [pc, #76]	; (800be38 <__sinit+0x6c>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	62a2      	str	r2, [r4, #40]	; 0x28
 800bdee:	42a3      	cmp	r3, r4
 800bdf0:	bf04      	itt	eq
 800bdf2:	2301      	moveq	r3, #1
 800bdf4:	61a3      	streq	r3, [r4, #24]
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f000 f820 	bl	800be3c <__sfp>
 800bdfc:	6060      	str	r0, [r4, #4]
 800bdfe:	4620      	mov	r0, r4
 800be00:	f000 f81c 	bl	800be3c <__sfp>
 800be04:	60a0      	str	r0, [r4, #8]
 800be06:	4620      	mov	r0, r4
 800be08:	f000 f818 	bl	800be3c <__sfp>
 800be0c:	2200      	movs	r2, #0
 800be0e:	60e0      	str	r0, [r4, #12]
 800be10:	2104      	movs	r1, #4
 800be12:	6860      	ldr	r0, [r4, #4]
 800be14:	f7ff ff82 	bl	800bd1c <std>
 800be18:	68a0      	ldr	r0, [r4, #8]
 800be1a:	2201      	movs	r2, #1
 800be1c:	2109      	movs	r1, #9
 800be1e:	f7ff ff7d 	bl	800bd1c <std>
 800be22:	68e0      	ldr	r0, [r4, #12]
 800be24:	2202      	movs	r2, #2
 800be26:	2112      	movs	r1, #18
 800be28:	f7ff ff78 	bl	800bd1c <std>
 800be2c:	2301      	movs	r3, #1
 800be2e:	61a3      	str	r3, [r4, #24]
 800be30:	e7d2      	b.n	800bdd8 <__sinit+0xc>
 800be32:	bf00      	nop
 800be34:	0801111c 	.word	0x0801111c
 800be38:	0800bd65 	.word	0x0800bd65

0800be3c <__sfp>:
 800be3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3e:	4607      	mov	r7, r0
 800be40:	f7ff ffac 	bl	800bd9c <__sfp_lock_acquire>
 800be44:	4b1e      	ldr	r3, [pc, #120]	; (800bec0 <__sfp+0x84>)
 800be46:	681e      	ldr	r6, [r3, #0]
 800be48:	69b3      	ldr	r3, [r6, #24]
 800be4a:	b913      	cbnz	r3, 800be52 <__sfp+0x16>
 800be4c:	4630      	mov	r0, r6
 800be4e:	f7ff ffbd 	bl	800bdcc <__sinit>
 800be52:	3648      	adds	r6, #72	; 0x48
 800be54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be58:	3b01      	subs	r3, #1
 800be5a:	d503      	bpl.n	800be64 <__sfp+0x28>
 800be5c:	6833      	ldr	r3, [r6, #0]
 800be5e:	b30b      	cbz	r3, 800bea4 <__sfp+0x68>
 800be60:	6836      	ldr	r6, [r6, #0]
 800be62:	e7f7      	b.n	800be54 <__sfp+0x18>
 800be64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be68:	b9d5      	cbnz	r5, 800bea0 <__sfp+0x64>
 800be6a:	4b16      	ldr	r3, [pc, #88]	; (800bec4 <__sfp+0x88>)
 800be6c:	60e3      	str	r3, [r4, #12]
 800be6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be72:	6665      	str	r5, [r4, #100]	; 0x64
 800be74:	f000 f84c 	bl	800bf10 <__retarget_lock_init_recursive>
 800be78:	f7ff ff96 	bl	800bda8 <__sfp_lock_release>
 800be7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be84:	6025      	str	r5, [r4, #0]
 800be86:	61a5      	str	r5, [r4, #24]
 800be88:	2208      	movs	r2, #8
 800be8a:	4629      	mov	r1, r5
 800be8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be90:	f7fe fab6 	bl	800a400 <memset>
 800be94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be9c:	4620      	mov	r0, r4
 800be9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bea0:	3468      	adds	r4, #104	; 0x68
 800bea2:	e7d9      	b.n	800be58 <__sfp+0x1c>
 800bea4:	2104      	movs	r1, #4
 800bea6:	4638      	mov	r0, r7
 800bea8:	f7ff ff62 	bl	800bd70 <__sfmoreglue>
 800beac:	4604      	mov	r4, r0
 800beae:	6030      	str	r0, [r6, #0]
 800beb0:	2800      	cmp	r0, #0
 800beb2:	d1d5      	bne.n	800be60 <__sfp+0x24>
 800beb4:	f7ff ff78 	bl	800bda8 <__sfp_lock_release>
 800beb8:	230c      	movs	r3, #12
 800beba:	603b      	str	r3, [r7, #0]
 800bebc:	e7ee      	b.n	800be9c <__sfp+0x60>
 800bebe:	bf00      	nop
 800bec0:	0801111c 	.word	0x0801111c
 800bec4:	ffff0001 	.word	0xffff0001

0800bec8 <_fwalk_reent>:
 800bec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800becc:	4606      	mov	r6, r0
 800bece:	4688      	mov	r8, r1
 800bed0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bed4:	2700      	movs	r7, #0
 800bed6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800beda:	f1b9 0901 	subs.w	r9, r9, #1
 800bede:	d505      	bpl.n	800beec <_fwalk_reent+0x24>
 800bee0:	6824      	ldr	r4, [r4, #0]
 800bee2:	2c00      	cmp	r4, #0
 800bee4:	d1f7      	bne.n	800bed6 <_fwalk_reent+0xe>
 800bee6:	4638      	mov	r0, r7
 800bee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beec:	89ab      	ldrh	r3, [r5, #12]
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d907      	bls.n	800bf02 <_fwalk_reent+0x3a>
 800bef2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bef6:	3301      	adds	r3, #1
 800bef8:	d003      	beq.n	800bf02 <_fwalk_reent+0x3a>
 800befa:	4629      	mov	r1, r5
 800befc:	4630      	mov	r0, r6
 800befe:	47c0      	blx	r8
 800bf00:	4307      	orrs	r7, r0
 800bf02:	3568      	adds	r5, #104	; 0x68
 800bf04:	e7e9      	b.n	800beda <_fwalk_reent+0x12>
	...

0800bf08 <_localeconv_r>:
 800bf08:	4800      	ldr	r0, [pc, #0]	; (800bf0c <_localeconv_r+0x4>)
 800bf0a:	4770      	bx	lr
 800bf0c:	200001a0 	.word	0x200001a0

0800bf10 <__retarget_lock_init_recursive>:
 800bf10:	4770      	bx	lr

0800bf12 <__retarget_lock_acquire_recursive>:
 800bf12:	4770      	bx	lr

0800bf14 <__retarget_lock_release_recursive>:
 800bf14:	4770      	bx	lr

0800bf16 <__swhatbuf_r>:
 800bf16:	b570      	push	{r4, r5, r6, lr}
 800bf18:	460e      	mov	r6, r1
 800bf1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf1e:	2900      	cmp	r1, #0
 800bf20:	b096      	sub	sp, #88	; 0x58
 800bf22:	4614      	mov	r4, r2
 800bf24:	461d      	mov	r5, r3
 800bf26:	da07      	bge.n	800bf38 <__swhatbuf_r+0x22>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	602b      	str	r3, [r5, #0]
 800bf2c:	89b3      	ldrh	r3, [r6, #12]
 800bf2e:	061a      	lsls	r2, r3, #24
 800bf30:	d410      	bmi.n	800bf54 <__swhatbuf_r+0x3e>
 800bf32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf36:	e00e      	b.n	800bf56 <__swhatbuf_r+0x40>
 800bf38:	466a      	mov	r2, sp
 800bf3a:	f000 ffed 	bl	800cf18 <_fstat_r>
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	dbf2      	blt.n	800bf28 <__swhatbuf_r+0x12>
 800bf42:	9a01      	ldr	r2, [sp, #4]
 800bf44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf4c:	425a      	negs	r2, r3
 800bf4e:	415a      	adcs	r2, r3
 800bf50:	602a      	str	r2, [r5, #0]
 800bf52:	e7ee      	b.n	800bf32 <__swhatbuf_r+0x1c>
 800bf54:	2340      	movs	r3, #64	; 0x40
 800bf56:	2000      	movs	r0, #0
 800bf58:	6023      	str	r3, [r4, #0]
 800bf5a:	b016      	add	sp, #88	; 0x58
 800bf5c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf60 <__smakebuf_r>:
 800bf60:	898b      	ldrh	r3, [r1, #12]
 800bf62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf64:	079d      	lsls	r5, r3, #30
 800bf66:	4606      	mov	r6, r0
 800bf68:	460c      	mov	r4, r1
 800bf6a:	d507      	bpl.n	800bf7c <__smakebuf_r+0x1c>
 800bf6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf70:	6023      	str	r3, [r4, #0]
 800bf72:	6123      	str	r3, [r4, #16]
 800bf74:	2301      	movs	r3, #1
 800bf76:	6163      	str	r3, [r4, #20]
 800bf78:	b002      	add	sp, #8
 800bf7a:	bd70      	pop	{r4, r5, r6, pc}
 800bf7c:	ab01      	add	r3, sp, #4
 800bf7e:	466a      	mov	r2, sp
 800bf80:	f7ff ffc9 	bl	800bf16 <__swhatbuf_r>
 800bf84:	9900      	ldr	r1, [sp, #0]
 800bf86:	4605      	mov	r5, r0
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f000 fc0f 	bl	800c7ac <_malloc_r>
 800bf8e:	b948      	cbnz	r0, 800bfa4 <__smakebuf_r+0x44>
 800bf90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf94:	059a      	lsls	r2, r3, #22
 800bf96:	d4ef      	bmi.n	800bf78 <__smakebuf_r+0x18>
 800bf98:	f023 0303 	bic.w	r3, r3, #3
 800bf9c:	f043 0302 	orr.w	r3, r3, #2
 800bfa0:	81a3      	strh	r3, [r4, #12]
 800bfa2:	e7e3      	b.n	800bf6c <__smakebuf_r+0xc>
 800bfa4:	4b0d      	ldr	r3, [pc, #52]	; (800bfdc <__smakebuf_r+0x7c>)
 800bfa6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfa8:	89a3      	ldrh	r3, [r4, #12]
 800bfaa:	6020      	str	r0, [r4, #0]
 800bfac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfb0:	81a3      	strh	r3, [r4, #12]
 800bfb2:	9b00      	ldr	r3, [sp, #0]
 800bfb4:	6163      	str	r3, [r4, #20]
 800bfb6:	9b01      	ldr	r3, [sp, #4]
 800bfb8:	6120      	str	r0, [r4, #16]
 800bfba:	b15b      	cbz	r3, 800bfd4 <__smakebuf_r+0x74>
 800bfbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	f000 ffbb 	bl	800cf3c <_isatty_r>
 800bfc6:	b128      	cbz	r0, 800bfd4 <__smakebuf_r+0x74>
 800bfc8:	89a3      	ldrh	r3, [r4, #12]
 800bfca:	f023 0303 	bic.w	r3, r3, #3
 800bfce:	f043 0301 	orr.w	r3, r3, #1
 800bfd2:	81a3      	strh	r3, [r4, #12]
 800bfd4:	89a0      	ldrh	r0, [r4, #12]
 800bfd6:	4305      	orrs	r5, r0
 800bfd8:	81a5      	strh	r5, [r4, #12]
 800bfda:	e7cd      	b.n	800bf78 <__smakebuf_r+0x18>
 800bfdc:	0800bd65 	.word	0x0800bd65

0800bfe0 <malloc>:
 800bfe0:	4b02      	ldr	r3, [pc, #8]	; (800bfec <malloc+0xc>)
 800bfe2:	4601      	mov	r1, r0
 800bfe4:	6818      	ldr	r0, [r3, #0]
 800bfe6:	f000 bbe1 	b.w	800c7ac <_malloc_r>
 800bfea:	bf00      	nop
 800bfec:	2000004c 	.word	0x2000004c

0800bff0 <_Balloc>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bff4:	4604      	mov	r4, r0
 800bff6:	460d      	mov	r5, r1
 800bff8:	b976      	cbnz	r6, 800c018 <_Balloc+0x28>
 800bffa:	2010      	movs	r0, #16
 800bffc:	f7ff fff0 	bl	800bfe0 <malloc>
 800c000:	4602      	mov	r2, r0
 800c002:	6260      	str	r0, [r4, #36]	; 0x24
 800c004:	b920      	cbnz	r0, 800c010 <_Balloc+0x20>
 800c006:	4b18      	ldr	r3, [pc, #96]	; (800c068 <_Balloc+0x78>)
 800c008:	4818      	ldr	r0, [pc, #96]	; (800c06c <_Balloc+0x7c>)
 800c00a:	2166      	movs	r1, #102	; 0x66
 800c00c:	f000 ff44 	bl	800ce98 <__assert_func>
 800c010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c014:	6006      	str	r6, [r0, #0]
 800c016:	60c6      	str	r6, [r0, #12]
 800c018:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c01a:	68f3      	ldr	r3, [r6, #12]
 800c01c:	b183      	cbz	r3, 800c040 <_Balloc+0x50>
 800c01e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c026:	b9b8      	cbnz	r0, 800c058 <_Balloc+0x68>
 800c028:	2101      	movs	r1, #1
 800c02a:	fa01 f605 	lsl.w	r6, r1, r5
 800c02e:	1d72      	adds	r2, r6, #5
 800c030:	0092      	lsls	r2, r2, #2
 800c032:	4620      	mov	r0, r4
 800c034:	f000 fb5a 	bl	800c6ec <_calloc_r>
 800c038:	b160      	cbz	r0, 800c054 <_Balloc+0x64>
 800c03a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c03e:	e00e      	b.n	800c05e <_Balloc+0x6e>
 800c040:	2221      	movs	r2, #33	; 0x21
 800c042:	2104      	movs	r1, #4
 800c044:	4620      	mov	r0, r4
 800c046:	f000 fb51 	bl	800c6ec <_calloc_r>
 800c04a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c04c:	60f0      	str	r0, [r6, #12]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1e4      	bne.n	800c01e <_Balloc+0x2e>
 800c054:	2000      	movs	r0, #0
 800c056:	bd70      	pop	{r4, r5, r6, pc}
 800c058:	6802      	ldr	r2, [r0, #0]
 800c05a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c05e:	2300      	movs	r3, #0
 800c060:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c064:	e7f7      	b.n	800c056 <_Balloc+0x66>
 800c066:	bf00      	nop
 800c068:	08011161 	.word	0x08011161
 800c06c:	08011248 	.word	0x08011248

0800c070 <_Bfree>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c074:	4605      	mov	r5, r0
 800c076:	460c      	mov	r4, r1
 800c078:	b976      	cbnz	r6, 800c098 <_Bfree+0x28>
 800c07a:	2010      	movs	r0, #16
 800c07c:	f7ff ffb0 	bl	800bfe0 <malloc>
 800c080:	4602      	mov	r2, r0
 800c082:	6268      	str	r0, [r5, #36]	; 0x24
 800c084:	b920      	cbnz	r0, 800c090 <_Bfree+0x20>
 800c086:	4b09      	ldr	r3, [pc, #36]	; (800c0ac <_Bfree+0x3c>)
 800c088:	4809      	ldr	r0, [pc, #36]	; (800c0b0 <_Bfree+0x40>)
 800c08a:	218a      	movs	r1, #138	; 0x8a
 800c08c:	f000 ff04 	bl	800ce98 <__assert_func>
 800c090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c094:	6006      	str	r6, [r0, #0]
 800c096:	60c6      	str	r6, [r0, #12]
 800c098:	b13c      	cbz	r4, 800c0aa <_Bfree+0x3a>
 800c09a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c09c:	6862      	ldr	r2, [r4, #4]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0a4:	6021      	str	r1, [r4, #0]
 800c0a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0aa:	bd70      	pop	{r4, r5, r6, pc}
 800c0ac:	08011161 	.word	0x08011161
 800c0b0:	08011248 	.word	0x08011248

0800c0b4 <__multadd>:
 800c0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b8:	690e      	ldr	r6, [r1, #16]
 800c0ba:	4607      	mov	r7, r0
 800c0bc:	4698      	mov	r8, r3
 800c0be:	460c      	mov	r4, r1
 800c0c0:	f101 0014 	add.w	r0, r1, #20
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	6805      	ldr	r5, [r0, #0]
 800c0c8:	b2a9      	uxth	r1, r5
 800c0ca:	fb02 8101 	mla	r1, r2, r1, r8
 800c0ce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c0d2:	0c2d      	lsrs	r5, r5, #16
 800c0d4:	fb02 c505 	mla	r5, r2, r5, ip
 800c0d8:	b289      	uxth	r1, r1
 800c0da:	3301      	adds	r3, #1
 800c0dc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c0e0:	429e      	cmp	r6, r3
 800c0e2:	f840 1b04 	str.w	r1, [r0], #4
 800c0e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c0ea:	dcec      	bgt.n	800c0c6 <__multadd+0x12>
 800c0ec:	f1b8 0f00 	cmp.w	r8, #0
 800c0f0:	d022      	beq.n	800c138 <__multadd+0x84>
 800c0f2:	68a3      	ldr	r3, [r4, #8]
 800c0f4:	42b3      	cmp	r3, r6
 800c0f6:	dc19      	bgt.n	800c12c <__multadd+0x78>
 800c0f8:	6861      	ldr	r1, [r4, #4]
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	3101      	adds	r1, #1
 800c0fe:	f7ff ff77 	bl	800bff0 <_Balloc>
 800c102:	4605      	mov	r5, r0
 800c104:	b928      	cbnz	r0, 800c112 <__multadd+0x5e>
 800c106:	4602      	mov	r2, r0
 800c108:	4b0d      	ldr	r3, [pc, #52]	; (800c140 <__multadd+0x8c>)
 800c10a:	480e      	ldr	r0, [pc, #56]	; (800c144 <__multadd+0x90>)
 800c10c:	21b5      	movs	r1, #181	; 0xb5
 800c10e:	f000 fec3 	bl	800ce98 <__assert_func>
 800c112:	6922      	ldr	r2, [r4, #16]
 800c114:	3202      	adds	r2, #2
 800c116:	f104 010c 	add.w	r1, r4, #12
 800c11a:	0092      	lsls	r2, r2, #2
 800c11c:	300c      	adds	r0, #12
 800c11e:	f7fe f961 	bl	800a3e4 <memcpy>
 800c122:	4621      	mov	r1, r4
 800c124:	4638      	mov	r0, r7
 800c126:	f7ff ffa3 	bl	800c070 <_Bfree>
 800c12a:	462c      	mov	r4, r5
 800c12c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c130:	3601      	adds	r6, #1
 800c132:	f8c3 8014 	str.w	r8, [r3, #20]
 800c136:	6126      	str	r6, [r4, #16]
 800c138:	4620      	mov	r0, r4
 800c13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c13e:	bf00      	nop
 800c140:	080111d7 	.word	0x080111d7
 800c144:	08011248 	.word	0x08011248

0800c148 <__hi0bits>:
 800c148:	0c03      	lsrs	r3, r0, #16
 800c14a:	041b      	lsls	r3, r3, #16
 800c14c:	b9d3      	cbnz	r3, 800c184 <__hi0bits+0x3c>
 800c14e:	0400      	lsls	r0, r0, #16
 800c150:	2310      	movs	r3, #16
 800c152:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c156:	bf04      	itt	eq
 800c158:	0200      	lsleq	r0, r0, #8
 800c15a:	3308      	addeq	r3, #8
 800c15c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c160:	bf04      	itt	eq
 800c162:	0100      	lsleq	r0, r0, #4
 800c164:	3304      	addeq	r3, #4
 800c166:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c16a:	bf04      	itt	eq
 800c16c:	0080      	lsleq	r0, r0, #2
 800c16e:	3302      	addeq	r3, #2
 800c170:	2800      	cmp	r0, #0
 800c172:	db05      	blt.n	800c180 <__hi0bits+0x38>
 800c174:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c178:	f103 0301 	add.w	r3, r3, #1
 800c17c:	bf08      	it	eq
 800c17e:	2320      	moveq	r3, #32
 800c180:	4618      	mov	r0, r3
 800c182:	4770      	bx	lr
 800c184:	2300      	movs	r3, #0
 800c186:	e7e4      	b.n	800c152 <__hi0bits+0xa>

0800c188 <__lo0bits>:
 800c188:	6803      	ldr	r3, [r0, #0]
 800c18a:	f013 0207 	ands.w	r2, r3, #7
 800c18e:	4601      	mov	r1, r0
 800c190:	d00b      	beq.n	800c1aa <__lo0bits+0x22>
 800c192:	07da      	lsls	r2, r3, #31
 800c194:	d424      	bmi.n	800c1e0 <__lo0bits+0x58>
 800c196:	0798      	lsls	r0, r3, #30
 800c198:	bf49      	itett	mi
 800c19a:	085b      	lsrmi	r3, r3, #1
 800c19c:	089b      	lsrpl	r3, r3, #2
 800c19e:	2001      	movmi	r0, #1
 800c1a0:	600b      	strmi	r3, [r1, #0]
 800c1a2:	bf5c      	itt	pl
 800c1a4:	600b      	strpl	r3, [r1, #0]
 800c1a6:	2002      	movpl	r0, #2
 800c1a8:	4770      	bx	lr
 800c1aa:	b298      	uxth	r0, r3
 800c1ac:	b9b0      	cbnz	r0, 800c1dc <__lo0bits+0x54>
 800c1ae:	0c1b      	lsrs	r3, r3, #16
 800c1b0:	2010      	movs	r0, #16
 800c1b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c1b6:	bf04      	itt	eq
 800c1b8:	0a1b      	lsreq	r3, r3, #8
 800c1ba:	3008      	addeq	r0, #8
 800c1bc:	071a      	lsls	r2, r3, #28
 800c1be:	bf04      	itt	eq
 800c1c0:	091b      	lsreq	r3, r3, #4
 800c1c2:	3004      	addeq	r0, #4
 800c1c4:	079a      	lsls	r2, r3, #30
 800c1c6:	bf04      	itt	eq
 800c1c8:	089b      	lsreq	r3, r3, #2
 800c1ca:	3002      	addeq	r0, #2
 800c1cc:	07da      	lsls	r2, r3, #31
 800c1ce:	d403      	bmi.n	800c1d8 <__lo0bits+0x50>
 800c1d0:	085b      	lsrs	r3, r3, #1
 800c1d2:	f100 0001 	add.w	r0, r0, #1
 800c1d6:	d005      	beq.n	800c1e4 <__lo0bits+0x5c>
 800c1d8:	600b      	str	r3, [r1, #0]
 800c1da:	4770      	bx	lr
 800c1dc:	4610      	mov	r0, r2
 800c1de:	e7e8      	b.n	800c1b2 <__lo0bits+0x2a>
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	4770      	bx	lr
 800c1e4:	2020      	movs	r0, #32
 800c1e6:	4770      	bx	lr

0800c1e8 <__i2b>:
 800c1e8:	b510      	push	{r4, lr}
 800c1ea:	460c      	mov	r4, r1
 800c1ec:	2101      	movs	r1, #1
 800c1ee:	f7ff feff 	bl	800bff0 <_Balloc>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	b928      	cbnz	r0, 800c202 <__i2b+0x1a>
 800c1f6:	4b05      	ldr	r3, [pc, #20]	; (800c20c <__i2b+0x24>)
 800c1f8:	4805      	ldr	r0, [pc, #20]	; (800c210 <__i2b+0x28>)
 800c1fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c1fe:	f000 fe4b 	bl	800ce98 <__assert_func>
 800c202:	2301      	movs	r3, #1
 800c204:	6144      	str	r4, [r0, #20]
 800c206:	6103      	str	r3, [r0, #16]
 800c208:	bd10      	pop	{r4, pc}
 800c20a:	bf00      	nop
 800c20c:	080111d7 	.word	0x080111d7
 800c210:	08011248 	.word	0x08011248

0800c214 <__multiply>:
 800c214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c218:	4614      	mov	r4, r2
 800c21a:	690a      	ldr	r2, [r1, #16]
 800c21c:	6923      	ldr	r3, [r4, #16]
 800c21e:	429a      	cmp	r2, r3
 800c220:	bfb8      	it	lt
 800c222:	460b      	movlt	r3, r1
 800c224:	460d      	mov	r5, r1
 800c226:	bfbc      	itt	lt
 800c228:	4625      	movlt	r5, r4
 800c22a:	461c      	movlt	r4, r3
 800c22c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c230:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c234:	68ab      	ldr	r3, [r5, #8]
 800c236:	6869      	ldr	r1, [r5, #4]
 800c238:	eb0a 0709 	add.w	r7, sl, r9
 800c23c:	42bb      	cmp	r3, r7
 800c23e:	b085      	sub	sp, #20
 800c240:	bfb8      	it	lt
 800c242:	3101      	addlt	r1, #1
 800c244:	f7ff fed4 	bl	800bff0 <_Balloc>
 800c248:	b930      	cbnz	r0, 800c258 <__multiply+0x44>
 800c24a:	4602      	mov	r2, r0
 800c24c:	4b42      	ldr	r3, [pc, #264]	; (800c358 <__multiply+0x144>)
 800c24e:	4843      	ldr	r0, [pc, #268]	; (800c35c <__multiply+0x148>)
 800c250:	f240 115d 	movw	r1, #349	; 0x15d
 800c254:	f000 fe20 	bl	800ce98 <__assert_func>
 800c258:	f100 0614 	add.w	r6, r0, #20
 800c25c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c260:	4633      	mov	r3, r6
 800c262:	2200      	movs	r2, #0
 800c264:	4543      	cmp	r3, r8
 800c266:	d31e      	bcc.n	800c2a6 <__multiply+0x92>
 800c268:	f105 0c14 	add.w	ip, r5, #20
 800c26c:	f104 0314 	add.w	r3, r4, #20
 800c270:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c274:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c278:	9202      	str	r2, [sp, #8]
 800c27a:	ebac 0205 	sub.w	r2, ip, r5
 800c27e:	3a15      	subs	r2, #21
 800c280:	f022 0203 	bic.w	r2, r2, #3
 800c284:	3204      	adds	r2, #4
 800c286:	f105 0115 	add.w	r1, r5, #21
 800c28a:	458c      	cmp	ip, r1
 800c28c:	bf38      	it	cc
 800c28e:	2204      	movcc	r2, #4
 800c290:	9201      	str	r2, [sp, #4]
 800c292:	9a02      	ldr	r2, [sp, #8]
 800c294:	9303      	str	r3, [sp, #12]
 800c296:	429a      	cmp	r2, r3
 800c298:	d808      	bhi.n	800c2ac <__multiply+0x98>
 800c29a:	2f00      	cmp	r7, #0
 800c29c:	dc55      	bgt.n	800c34a <__multiply+0x136>
 800c29e:	6107      	str	r7, [r0, #16]
 800c2a0:	b005      	add	sp, #20
 800c2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a6:	f843 2b04 	str.w	r2, [r3], #4
 800c2aa:	e7db      	b.n	800c264 <__multiply+0x50>
 800c2ac:	f8b3 a000 	ldrh.w	sl, [r3]
 800c2b0:	f1ba 0f00 	cmp.w	sl, #0
 800c2b4:	d020      	beq.n	800c2f8 <__multiply+0xe4>
 800c2b6:	f105 0e14 	add.w	lr, r5, #20
 800c2ba:	46b1      	mov	r9, r6
 800c2bc:	2200      	movs	r2, #0
 800c2be:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c2c2:	f8d9 b000 	ldr.w	fp, [r9]
 800c2c6:	b2a1      	uxth	r1, r4
 800c2c8:	fa1f fb8b 	uxth.w	fp, fp
 800c2cc:	fb0a b101 	mla	r1, sl, r1, fp
 800c2d0:	4411      	add	r1, r2
 800c2d2:	f8d9 2000 	ldr.w	r2, [r9]
 800c2d6:	0c24      	lsrs	r4, r4, #16
 800c2d8:	0c12      	lsrs	r2, r2, #16
 800c2da:	fb0a 2404 	mla	r4, sl, r4, r2
 800c2de:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c2e2:	b289      	uxth	r1, r1
 800c2e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c2e8:	45f4      	cmp	ip, lr
 800c2ea:	f849 1b04 	str.w	r1, [r9], #4
 800c2ee:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c2f2:	d8e4      	bhi.n	800c2be <__multiply+0xaa>
 800c2f4:	9901      	ldr	r1, [sp, #4]
 800c2f6:	5072      	str	r2, [r6, r1]
 800c2f8:	9a03      	ldr	r2, [sp, #12]
 800c2fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c2fe:	3304      	adds	r3, #4
 800c300:	f1b9 0f00 	cmp.w	r9, #0
 800c304:	d01f      	beq.n	800c346 <__multiply+0x132>
 800c306:	6834      	ldr	r4, [r6, #0]
 800c308:	f105 0114 	add.w	r1, r5, #20
 800c30c:	46b6      	mov	lr, r6
 800c30e:	f04f 0a00 	mov.w	sl, #0
 800c312:	880a      	ldrh	r2, [r1, #0]
 800c314:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c318:	fb09 b202 	mla	r2, r9, r2, fp
 800c31c:	4492      	add	sl, r2
 800c31e:	b2a4      	uxth	r4, r4
 800c320:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c324:	f84e 4b04 	str.w	r4, [lr], #4
 800c328:	f851 4b04 	ldr.w	r4, [r1], #4
 800c32c:	f8be 2000 	ldrh.w	r2, [lr]
 800c330:	0c24      	lsrs	r4, r4, #16
 800c332:	fb09 2404 	mla	r4, r9, r4, r2
 800c336:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c33a:	458c      	cmp	ip, r1
 800c33c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c340:	d8e7      	bhi.n	800c312 <__multiply+0xfe>
 800c342:	9a01      	ldr	r2, [sp, #4]
 800c344:	50b4      	str	r4, [r6, r2]
 800c346:	3604      	adds	r6, #4
 800c348:	e7a3      	b.n	800c292 <__multiply+0x7e>
 800c34a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1a5      	bne.n	800c29e <__multiply+0x8a>
 800c352:	3f01      	subs	r7, #1
 800c354:	e7a1      	b.n	800c29a <__multiply+0x86>
 800c356:	bf00      	nop
 800c358:	080111d7 	.word	0x080111d7
 800c35c:	08011248 	.word	0x08011248

0800c360 <__pow5mult>:
 800c360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c364:	4615      	mov	r5, r2
 800c366:	f012 0203 	ands.w	r2, r2, #3
 800c36a:	4606      	mov	r6, r0
 800c36c:	460f      	mov	r7, r1
 800c36e:	d007      	beq.n	800c380 <__pow5mult+0x20>
 800c370:	4c25      	ldr	r4, [pc, #148]	; (800c408 <__pow5mult+0xa8>)
 800c372:	3a01      	subs	r2, #1
 800c374:	2300      	movs	r3, #0
 800c376:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c37a:	f7ff fe9b 	bl	800c0b4 <__multadd>
 800c37e:	4607      	mov	r7, r0
 800c380:	10ad      	asrs	r5, r5, #2
 800c382:	d03d      	beq.n	800c400 <__pow5mult+0xa0>
 800c384:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c386:	b97c      	cbnz	r4, 800c3a8 <__pow5mult+0x48>
 800c388:	2010      	movs	r0, #16
 800c38a:	f7ff fe29 	bl	800bfe0 <malloc>
 800c38e:	4602      	mov	r2, r0
 800c390:	6270      	str	r0, [r6, #36]	; 0x24
 800c392:	b928      	cbnz	r0, 800c3a0 <__pow5mult+0x40>
 800c394:	4b1d      	ldr	r3, [pc, #116]	; (800c40c <__pow5mult+0xac>)
 800c396:	481e      	ldr	r0, [pc, #120]	; (800c410 <__pow5mult+0xb0>)
 800c398:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c39c:	f000 fd7c 	bl	800ce98 <__assert_func>
 800c3a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3a4:	6004      	str	r4, [r0, #0]
 800c3a6:	60c4      	str	r4, [r0, #12]
 800c3a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c3ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3b0:	b94c      	cbnz	r4, 800c3c6 <__pow5mult+0x66>
 800c3b2:	f240 2171 	movw	r1, #625	; 0x271
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	f7ff ff16 	bl	800c1e8 <__i2b>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	6003      	str	r3, [r0, #0]
 800c3c6:	f04f 0900 	mov.w	r9, #0
 800c3ca:	07eb      	lsls	r3, r5, #31
 800c3cc:	d50a      	bpl.n	800c3e4 <__pow5mult+0x84>
 800c3ce:	4639      	mov	r1, r7
 800c3d0:	4622      	mov	r2, r4
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f7ff ff1e 	bl	800c214 <__multiply>
 800c3d8:	4639      	mov	r1, r7
 800c3da:	4680      	mov	r8, r0
 800c3dc:	4630      	mov	r0, r6
 800c3de:	f7ff fe47 	bl	800c070 <_Bfree>
 800c3e2:	4647      	mov	r7, r8
 800c3e4:	106d      	asrs	r5, r5, #1
 800c3e6:	d00b      	beq.n	800c400 <__pow5mult+0xa0>
 800c3e8:	6820      	ldr	r0, [r4, #0]
 800c3ea:	b938      	cbnz	r0, 800c3fc <__pow5mult+0x9c>
 800c3ec:	4622      	mov	r2, r4
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	f7ff ff0f 	bl	800c214 <__multiply>
 800c3f6:	6020      	str	r0, [r4, #0]
 800c3f8:	f8c0 9000 	str.w	r9, [r0]
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	e7e4      	b.n	800c3ca <__pow5mult+0x6a>
 800c400:	4638      	mov	r0, r7
 800c402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c406:	bf00      	nop
 800c408:	08011398 	.word	0x08011398
 800c40c:	08011161 	.word	0x08011161
 800c410:	08011248 	.word	0x08011248

0800c414 <__lshift>:
 800c414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c418:	460c      	mov	r4, r1
 800c41a:	6849      	ldr	r1, [r1, #4]
 800c41c:	6923      	ldr	r3, [r4, #16]
 800c41e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c422:	68a3      	ldr	r3, [r4, #8]
 800c424:	4607      	mov	r7, r0
 800c426:	4691      	mov	r9, r2
 800c428:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c42c:	f108 0601 	add.w	r6, r8, #1
 800c430:	42b3      	cmp	r3, r6
 800c432:	db0b      	blt.n	800c44c <__lshift+0x38>
 800c434:	4638      	mov	r0, r7
 800c436:	f7ff fddb 	bl	800bff0 <_Balloc>
 800c43a:	4605      	mov	r5, r0
 800c43c:	b948      	cbnz	r0, 800c452 <__lshift+0x3e>
 800c43e:	4602      	mov	r2, r0
 800c440:	4b28      	ldr	r3, [pc, #160]	; (800c4e4 <__lshift+0xd0>)
 800c442:	4829      	ldr	r0, [pc, #164]	; (800c4e8 <__lshift+0xd4>)
 800c444:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c448:	f000 fd26 	bl	800ce98 <__assert_func>
 800c44c:	3101      	adds	r1, #1
 800c44e:	005b      	lsls	r3, r3, #1
 800c450:	e7ee      	b.n	800c430 <__lshift+0x1c>
 800c452:	2300      	movs	r3, #0
 800c454:	f100 0114 	add.w	r1, r0, #20
 800c458:	f100 0210 	add.w	r2, r0, #16
 800c45c:	4618      	mov	r0, r3
 800c45e:	4553      	cmp	r3, sl
 800c460:	db33      	blt.n	800c4ca <__lshift+0xb6>
 800c462:	6920      	ldr	r0, [r4, #16]
 800c464:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c468:	f104 0314 	add.w	r3, r4, #20
 800c46c:	f019 091f 	ands.w	r9, r9, #31
 800c470:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c474:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c478:	d02b      	beq.n	800c4d2 <__lshift+0xbe>
 800c47a:	f1c9 0e20 	rsb	lr, r9, #32
 800c47e:	468a      	mov	sl, r1
 800c480:	2200      	movs	r2, #0
 800c482:	6818      	ldr	r0, [r3, #0]
 800c484:	fa00 f009 	lsl.w	r0, r0, r9
 800c488:	4302      	orrs	r2, r0
 800c48a:	f84a 2b04 	str.w	r2, [sl], #4
 800c48e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c492:	459c      	cmp	ip, r3
 800c494:	fa22 f20e 	lsr.w	r2, r2, lr
 800c498:	d8f3      	bhi.n	800c482 <__lshift+0x6e>
 800c49a:	ebac 0304 	sub.w	r3, ip, r4
 800c49e:	3b15      	subs	r3, #21
 800c4a0:	f023 0303 	bic.w	r3, r3, #3
 800c4a4:	3304      	adds	r3, #4
 800c4a6:	f104 0015 	add.w	r0, r4, #21
 800c4aa:	4584      	cmp	ip, r0
 800c4ac:	bf38      	it	cc
 800c4ae:	2304      	movcc	r3, #4
 800c4b0:	50ca      	str	r2, [r1, r3]
 800c4b2:	b10a      	cbz	r2, 800c4b8 <__lshift+0xa4>
 800c4b4:	f108 0602 	add.w	r6, r8, #2
 800c4b8:	3e01      	subs	r6, #1
 800c4ba:	4638      	mov	r0, r7
 800c4bc:	612e      	str	r6, [r5, #16]
 800c4be:	4621      	mov	r1, r4
 800c4c0:	f7ff fdd6 	bl	800c070 <_Bfree>
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	e7c5      	b.n	800c45e <__lshift+0x4a>
 800c4d2:	3904      	subs	r1, #4
 800c4d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4dc:	459c      	cmp	ip, r3
 800c4de:	d8f9      	bhi.n	800c4d4 <__lshift+0xc0>
 800c4e0:	e7ea      	b.n	800c4b8 <__lshift+0xa4>
 800c4e2:	bf00      	nop
 800c4e4:	080111d7 	.word	0x080111d7
 800c4e8:	08011248 	.word	0x08011248

0800c4ec <__mcmp>:
 800c4ec:	b530      	push	{r4, r5, lr}
 800c4ee:	6902      	ldr	r2, [r0, #16]
 800c4f0:	690c      	ldr	r4, [r1, #16]
 800c4f2:	1b12      	subs	r2, r2, r4
 800c4f4:	d10e      	bne.n	800c514 <__mcmp+0x28>
 800c4f6:	f100 0314 	add.w	r3, r0, #20
 800c4fa:	3114      	adds	r1, #20
 800c4fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c500:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c504:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c508:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c50c:	42a5      	cmp	r5, r4
 800c50e:	d003      	beq.n	800c518 <__mcmp+0x2c>
 800c510:	d305      	bcc.n	800c51e <__mcmp+0x32>
 800c512:	2201      	movs	r2, #1
 800c514:	4610      	mov	r0, r2
 800c516:	bd30      	pop	{r4, r5, pc}
 800c518:	4283      	cmp	r3, r0
 800c51a:	d3f3      	bcc.n	800c504 <__mcmp+0x18>
 800c51c:	e7fa      	b.n	800c514 <__mcmp+0x28>
 800c51e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c522:	e7f7      	b.n	800c514 <__mcmp+0x28>

0800c524 <__mdiff>:
 800c524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c528:	460c      	mov	r4, r1
 800c52a:	4606      	mov	r6, r0
 800c52c:	4611      	mov	r1, r2
 800c52e:	4620      	mov	r0, r4
 800c530:	4617      	mov	r7, r2
 800c532:	f7ff ffdb 	bl	800c4ec <__mcmp>
 800c536:	1e05      	subs	r5, r0, #0
 800c538:	d110      	bne.n	800c55c <__mdiff+0x38>
 800c53a:	4629      	mov	r1, r5
 800c53c:	4630      	mov	r0, r6
 800c53e:	f7ff fd57 	bl	800bff0 <_Balloc>
 800c542:	b930      	cbnz	r0, 800c552 <__mdiff+0x2e>
 800c544:	4b39      	ldr	r3, [pc, #228]	; (800c62c <__mdiff+0x108>)
 800c546:	4602      	mov	r2, r0
 800c548:	f240 2132 	movw	r1, #562	; 0x232
 800c54c:	4838      	ldr	r0, [pc, #224]	; (800c630 <__mdiff+0x10c>)
 800c54e:	f000 fca3 	bl	800ce98 <__assert_func>
 800c552:	2301      	movs	r3, #1
 800c554:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c558:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c55c:	bfa4      	itt	ge
 800c55e:	463b      	movge	r3, r7
 800c560:	4627      	movge	r7, r4
 800c562:	4630      	mov	r0, r6
 800c564:	6879      	ldr	r1, [r7, #4]
 800c566:	bfa6      	itte	ge
 800c568:	461c      	movge	r4, r3
 800c56a:	2500      	movge	r5, #0
 800c56c:	2501      	movlt	r5, #1
 800c56e:	f7ff fd3f 	bl	800bff0 <_Balloc>
 800c572:	b920      	cbnz	r0, 800c57e <__mdiff+0x5a>
 800c574:	4b2d      	ldr	r3, [pc, #180]	; (800c62c <__mdiff+0x108>)
 800c576:	4602      	mov	r2, r0
 800c578:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c57c:	e7e6      	b.n	800c54c <__mdiff+0x28>
 800c57e:	693e      	ldr	r6, [r7, #16]
 800c580:	60c5      	str	r5, [r0, #12]
 800c582:	6925      	ldr	r5, [r4, #16]
 800c584:	f107 0114 	add.w	r1, r7, #20
 800c588:	f104 0914 	add.w	r9, r4, #20
 800c58c:	f100 0e14 	add.w	lr, r0, #20
 800c590:	f107 0210 	add.w	r2, r7, #16
 800c594:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c598:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c59c:	46f2      	mov	sl, lr
 800c59e:	2700      	movs	r7, #0
 800c5a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c5a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c5a8:	fa1f f883 	uxth.w	r8, r3
 800c5ac:	fa17 f78b 	uxtah	r7, r7, fp
 800c5b0:	0c1b      	lsrs	r3, r3, #16
 800c5b2:	eba7 0808 	sub.w	r8, r7, r8
 800c5b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c5ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c5be:	fa1f f888 	uxth.w	r8, r8
 800c5c2:	141f      	asrs	r7, r3, #16
 800c5c4:	454d      	cmp	r5, r9
 800c5c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c5ca:	f84a 3b04 	str.w	r3, [sl], #4
 800c5ce:	d8e7      	bhi.n	800c5a0 <__mdiff+0x7c>
 800c5d0:	1b2b      	subs	r3, r5, r4
 800c5d2:	3b15      	subs	r3, #21
 800c5d4:	f023 0303 	bic.w	r3, r3, #3
 800c5d8:	3304      	adds	r3, #4
 800c5da:	3415      	adds	r4, #21
 800c5dc:	42a5      	cmp	r5, r4
 800c5de:	bf38      	it	cc
 800c5e0:	2304      	movcc	r3, #4
 800c5e2:	4419      	add	r1, r3
 800c5e4:	4473      	add	r3, lr
 800c5e6:	469e      	mov	lr, r3
 800c5e8:	460d      	mov	r5, r1
 800c5ea:	4565      	cmp	r5, ip
 800c5ec:	d30e      	bcc.n	800c60c <__mdiff+0xe8>
 800c5ee:	f10c 0203 	add.w	r2, ip, #3
 800c5f2:	1a52      	subs	r2, r2, r1
 800c5f4:	f022 0203 	bic.w	r2, r2, #3
 800c5f8:	3903      	subs	r1, #3
 800c5fa:	458c      	cmp	ip, r1
 800c5fc:	bf38      	it	cc
 800c5fe:	2200      	movcc	r2, #0
 800c600:	441a      	add	r2, r3
 800c602:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c606:	b17b      	cbz	r3, 800c628 <__mdiff+0x104>
 800c608:	6106      	str	r6, [r0, #16]
 800c60a:	e7a5      	b.n	800c558 <__mdiff+0x34>
 800c60c:	f855 8b04 	ldr.w	r8, [r5], #4
 800c610:	fa17 f488 	uxtah	r4, r7, r8
 800c614:	1422      	asrs	r2, r4, #16
 800c616:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c61a:	b2a4      	uxth	r4, r4
 800c61c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c620:	f84e 4b04 	str.w	r4, [lr], #4
 800c624:	1417      	asrs	r7, r2, #16
 800c626:	e7e0      	b.n	800c5ea <__mdiff+0xc6>
 800c628:	3e01      	subs	r6, #1
 800c62a:	e7ea      	b.n	800c602 <__mdiff+0xde>
 800c62c:	080111d7 	.word	0x080111d7
 800c630:	08011248 	.word	0x08011248

0800c634 <__d2b>:
 800c634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c638:	4689      	mov	r9, r1
 800c63a:	2101      	movs	r1, #1
 800c63c:	ec57 6b10 	vmov	r6, r7, d0
 800c640:	4690      	mov	r8, r2
 800c642:	f7ff fcd5 	bl	800bff0 <_Balloc>
 800c646:	4604      	mov	r4, r0
 800c648:	b930      	cbnz	r0, 800c658 <__d2b+0x24>
 800c64a:	4602      	mov	r2, r0
 800c64c:	4b25      	ldr	r3, [pc, #148]	; (800c6e4 <__d2b+0xb0>)
 800c64e:	4826      	ldr	r0, [pc, #152]	; (800c6e8 <__d2b+0xb4>)
 800c650:	f240 310a 	movw	r1, #778	; 0x30a
 800c654:	f000 fc20 	bl	800ce98 <__assert_func>
 800c658:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c65c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c660:	bb35      	cbnz	r5, 800c6b0 <__d2b+0x7c>
 800c662:	2e00      	cmp	r6, #0
 800c664:	9301      	str	r3, [sp, #4]
 800c666:	d028      	beq.n	800c6ba <__d2b+0x86>
 800c668:	4668      	mov	r0, sp
 800c66a:	9600      	str	r6, [sp, #0]
 800c66c:	f7ff fd8c 	bl	800c188 <__lo0bits>
 800c670:	9900      	ldr	r1, [sp, #0]
 800c672:	b300      	cbz	r0, 800c6b6 <__d2b+0x82>
 800c674:	9a01      	ldr	r2, [sp, #4]
 800c676:	f1c0 0320 	rsb	r3, r0, #32
 800c67a:	fa02 f303 	lsl.w	r3, r2, r3
 800c67e:	430b      	orrs	r3, r1
 800c680:	40c2      	lsrs	r2, r0
 800c682:	6163      	str	r3, [r4, #20]
 800c684:	9201      	str	r2, [sp, #4]
 800c686:	9b01      	ldr	r3, [sp, #4]
 800c688:	61a3      	str	r3, [r4, #24]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	bf14      	ite	ne
 800c68e:	2202      	movne	r2, #2
 800c690:	2201      	moveq	r2, #1
 800c692:	6122      	str	r2, [r4, #16]
 800c694:	b1d5      	cbz	r5, 800c6cc <__d2b+0x98>
 800c696:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c69a:	4405      	add	r5, r0
 800c69c:	f8c9 5000 	str.w	r5, [r9]
 800c6a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c6a4:	f8c8 0000 	str.w	r0, [r8]
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	b003      	add	sp, #12
 800c6ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6b4:	e7d5      	b.n	800c662 <__d2b+0x2e>
 800c6b6:	6161      	str	r1, [r4, #20]
 800c6b8:	e7e5      	b.n	800c686 <__d2b+0x52>
 800c6ba:	a801      	add	r0, sp, #4
 800c6bc:	f7ff fd64 	bl	800c188 <__lo0bits>
 800c6c0:	9b01      	ldr	r3, [sp, #4]
 800c6c2:	6163      	str	r3, [r4, #20]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	6122      	str	r2, [r4, #16]
 800c6c8:	3020      	adds	r0, #32
 800c6ca:	e7e3      	b.n	800c694 <__d2b+0x60>
 800c6cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c6d4:	f8c9 0000 	str.w	r0, [r9]
 800c6d8:	6918      	ldr	r0, [r3, #16]
 800c6da:	f7ff fd35 	bl	800c148 <__hi0bits>
 800c6de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6e2:	e7df      	b.n	800c6a4 <__d2b+0x70>
 800c6e4:	080111d7 	.word	0x080111d7
 800c6e8:	08011248 	.word	0x08011248

0800c6ec <_calloc_r>:
 800c6ec:	b513      	push	{r0, r1, r4, lr}
 800c6ee:	434a      	muls	r2, r1
 800c6f0:	4611      	mov	r1, r2
 800c6f2:	9201      	str	r2, [sp, #4]
 800c6f4:	f000 f85a 	bl	800c7ac <_malloc_r>
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	b118      	cbz	r0, 800c704 <_calloc_r+0x18>
 800c6fc:	9a01      	ldr	r2, [sp, #4]
 800c6fe:	2100      	movs	r1, #0
 800c700:	f7fd fe7e 	bl	800a400 <memset>
 800c704:	4620      	mov	r0, r4
 800c706:	b002      	add	sp, #8
 800c708:	bd10      	pop	{r4, pc}
	...

0800c70c <_free_r>:
 800c70c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c70e:	2900      	cmp	r1, #0
 800c710:	d048      	beq.n	800c7a4 <_free_r+0x98>
 800c712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c716:	9001      	str	r0, [sp, #4]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	f1a1 0404 	sub.w	r4, r1, #4
 800c71e:	bfb8      	it	lt
 800c720:	18e4      	addlt	r4, r4, r3
 800c722:	f000 fc59 	bl	800cfd8 <__malloc_lock>
 800c726:	4a20      	ldr	r2, [pc, #128]	; (800c7a8 <_free_r+0x9c>)
 800c728:	9801      	ldr	r0, [sp, #4]
 800c72a:	6813      	ldr	r3, [r2, #0]
 800c72c:	4615      	mov	r5, r2
 800c72e:	b933      	cbnz	r3, 800c73e <_free_r+0x32>
 800c730:	6063      	str	r3, [r4, #4]
 800c732:	6014      	str	r4, [r2, #0]
 800c734:	b003      	add	sp, #12
 800c736:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c73a:	f000 bc53 	b.w	800cfe4 <__malloc_unlock>
 800c73e:	42a3      	cmp	r3, r4
 800c740:	d90b      	bls.n	800c75a <_free_r+0x4e>
 800c742:	6821      	ldr	r1, [r4, #0]
 800c744:	1862      	adds	r2, r4, r1
 800c746:	4293      	cmp	r3, r2
 800c748:	bf04      	itt	eq
 800c74a:	681a      	ldreq	r2, [r3, #0]
 800c74c:	685b      	ldreq	r3, [r3, #4]
 800c74e:	6063      	str	r3, [r4, #4]
 800c750:	bf04      	itt	eq
 800c752:	1852      	addeq	r2, r2, r1
 800c754:	6022      	streq	r2, [r4, #0]
 800c756:	602c      	str	r4, [r5, #0]
 800c758:	e7ec      	b.n	800c734 <_free_r+0x28>
 800c75a:	461a      	mov	r2, r3
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	b10b      	cbz	r3, 800c764 <_free_r+0x58>
 800c760:	42a3      	cmp	r3, r4
 800c762:	d9fa      	bls.n	800c75a <_free_r+0x4e>
 800c764:	6811      	ldr	r1, [r2, #0]
 800c766:	1855      	adds	r5, r2, r1
 800c768:	42a5      	cmp	r5, r4
 800c76a:	d10b      	bne.n	800c784 <_free_r+0x78>
 800c76c:	6824      	ldr	r4, [r4, #0]
 800c76e:	4421      	add	r1, r4
 800c770:	1854      	adds	r4, r2, r1
 800c772:	42a3      	cmp	r3, r4
 800c774:	6011      	str	r1, [r2, #0]
 800c776:	d1dd      	bne.n	800c734 <_free_r+0x28>
 800c778:	681c      	ldr	r4, [r3, #0]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	6053      	str	r3, [r2, #4]
 800c77e:	4421      	add	r1, r4
 800c780:	6011      	str	r1, [r2, #0]
 800c782:	e7d7      	b.n	800c734 <_free_r+0x28>
 800c784:	d902      	bls.n	800c78c <_free_r+0x80>
 800c786:	230c      	movs	r3, #12
 800c788:	6003      	str	r3, [r0, #0]
 800c78a:	e7d3      	b.n	800c734 <_free_r+0x28>
 800c78c:	6825      	ldr	r5, [r4, #0]
 800c78e:	1961      	adds	r1, r4, r5
 800c790:	428b      	cmp	r3, r1
 800c792:	bf04      	itt	eq
 800c794:	6819      	ldreq	r1, [r3, #0]
 800c796:	685b      	ldreq	r3, [r3, #4]
 800c798:	6063      	str	r3, [r4, #4]
 800c79a:	bf04      	itt	eq
 800c79c:	1949      	addeq	r1, r1, r5
 800c79e:	6021      	streq	r1, [r4, #0]
 800c7a0:	6054      	str	r4, [r2, #4]
 800c7a2:	e7c7      	b.n	800c734 <_free_r+0x28>
 800c7a4:	b003      	add	sp, #12
 800c7a6:	bd30      	pop	{r4, r5, pc}
 800c7a8:	200026dc 	.word	0x200026dc

0800c7ac <_malloc_r>:
 800c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ae:	1ccd      	adds	r5, r1, #3
 800c7b0:	f025 0503 	bic.w	r5, r5, #3
 800c7b4:	3508      	adds	r5, #8
 800c7b6:	2d0c      	cmp	r5, #12
 800c7b8:	bf38      	it	cc
 800c7ba:	250c      	movcc	r5, #12
 800c7bc:	2d00      	cmp	r5, #0
 800c7be:	4606      	mov	r6, r0
 800c7c0:	db01      	blt.n	800c7c6 <_malloc_r+0x1a>
 800c7c2:	42a9      	cmp	r1, r5
 800c7c4:	d903      	bls.n	800c7ce <_malloc_r+0x22>
 800c7c6:	230c      	movs	r3, #12
 800c7c8:	6033      	str	r3, [r6, #0]
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7ce:	f000 fc03 	bl	800cfd8 <__malloc_lock>
 800c7d2:	4921      	ldr	r1, [pc, #132]	; (800c858 <_malloc_r+0xac>)
 800c7d4:	680a      	ldr	r2, [r1, #0]
 800c7d6:	4614      	mov	r4, r2
 800c7d8:	b99c      	cbnz	r4, 800c802 <_malloc_r+0x56>
 800c7da:	4f20      	ldr	r7, [pc, #128]	; (800c85c <_malloc_r+0xb0>)
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	b923      	cbnz	r3, 800c7ea <_malloc_r+0x3e>
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f000 faf2 	bl	800cdcc <_sbrk_r>
 800c7e8:	6038      	str	r0, [r7, #0]
 800c7ea:	4629      	mov	r1, r5
 800c7ec:	4630      	mov	r0, r6
 800c7ee:	f000 faed 	bl	800cdcc <_sbrk_r>
 800c7f2:	1c43      	adds	r3, r0, #1
 800c7f4:	d123      	bne.n	800c83e <_malloc_r+0x92>
 800c7f6:	230c      	movs	r3, #12
 800c7f8:	6033      	str	r3, [r6, #0]
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f000 fbf2 	bl	800cfe4 <__malloc_unlock>
 800c800:	e7e3      	b.n	800c7ca <_malloc_r+0x1e>
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	1b5b      	subs	r3, r3, r5
 800c806:	d417      	bmi.n	800c838 <_malloc_r+0x8c>
 800c808:	2b0b      	cmp	r3, #11
 800c80a:	d903      	bls.n	800c814 <_malloc_r+0x68>
 800c80c:	6023      	str	r3, [r4, #0]
 800c80e:	441c      	add	r4, r3
 800c810:	6025      	str	r5, [r4, #0]
 800c812:	e004      	b.n	800c81e <_malloc_r+0x72>
 800c814:	6863      	ldr	r3, [r4, #4]
 800c816:	42a2      	cmp	r2, r4
 800c818:	bf0c      	ite	eq
 800c81a:	600b      	streq	r3, [r1, #0]
 800c81c:	6053      	strne	r3, [r2, #4]
 800c81e:	4630      	mov	r0, r6
 800c820:	f000 fbe0 	bl	800cfe4 <__malloc_unlock>
 800c824:	f104 000b 	add.w	r0, r4, #11
 800c828:	1d23      	adds	r3, r4, #4
 800c82a:	f020 0007 	bic.w	r0, r0, #7
 800c82e:	1ac2      	subs	r2, r0, r3
 800c830:	d0cc      	beq.n	800c7cc <_malloc_r+0x20>
 800c832:	1a1b      	subs	r3, r3, r0
 800c834:	50a3      	str	r3, [r4, r2]
 800c836:	e7c9      	b.n	800c7cc <_malloc_r+0x20>
 800c838:	4622      	mov	r2, r4
 800c83a:	6864      	ldr	r4, [r4, #4]
 800c83c:	e7cc      	b.n	800c7d8 <_malloc_r+0x2c>
 800c83e:	1cc4      	adds	r4, r0, #3
 800c840:	f024 0403 	bic.w	r4, r4, #3
 800c844:	42a0      	cmp	r0, r4
 800c846:	d0e3      	beq.n	800c810 <_malloc_r+0x64>
 800c848:	1a21      	subs	r1, r4, r0
 800c84a:	4630      	mov	r0, r6
 800c84c:	f000 fabe 	bl	800cdcc <_sbrk_r>
 800c850:	3001      	adds	r0, #1
 800c852:	d1dd      	bne.n	800c810 <_malloc_r+0x64>
 800c854:	e7cf      	b.n	800c7f6 <_malloc_r+0x4a>
 800c856:	bf00      	nop
 800c858:	200026dc 	.word	0x200026dc
 800c85c:	200026e0 	.word	0x200026e0

0800c860 <__ssputs_r>:
 800c860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c864:	688e      	ldr	r6, [r1, #8]
 800c866:	429e      	cmp	r6, r3
 800c868:	4682      	mov	sl, r0
 800c86a:	460c      	mov	r4, r1
 800c86c:	4690      	mov	r8, r2
 800c86e:	461f      	mov	r7, r3
 800c870:	d838      	bhi.n	800c8e4 <__ssputs_r+0x84>
 800c872:	898a      	ldrh	r2, [r1, #12]
 800c874:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c878:	d032      	beq.n	800c8e0 <__ssputs_r+0x80>
 800c87a:	6825      	ldr	r5, [r4, #0]
 800c87c:	6909      	ldr	r1, [r1, #16]
 800c87e:	eba5 0901 	sub.w	r9, r5, r1
 800c882:	6965      	ldr	r5, [r4, #20]
 800c884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c888:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c88c:	3301      	adds	r3, #1
 800c88e:	444b      	add	r3, r9
 800c890:	106d      	asrs	r5, r5, #1
 800c892:	429d      	cmp	r5, r3
 800c894:	bf38      	it	cc
 800c896:	461d      	movcc	r5, r3
 800c898:	0553      	lsls	r3, r2, #21
 800c89a:	d531      	bpl.n	800c900 <__ssputs_r+0xa0>
 800c89c:	4629      	mov	r1, r5
 800c89e:	f7ff ff85 	bl	800c7ac <_malloc_r>
 800c8a2:	4606      	mov	r6, r0
 800c8a4:	b950      	cbnz	r0, 800c8bc <__ssputs_r+0x5c>
 800c8a6:	230c      	movs	r3, #12
 800c8a8:	f8ca 3000 	str.w	r3, [sl]
 800c8ac:	89a3      	ldrh	r3, [r4, #12]
 800c8ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8b2:	81a3      	strh	r3, [r4, #12]
 800c8b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8bc:	6921      	ldr	r1, [r4, #16]
 800c8be:	464a      	mov	r2, r9
 800c8c0:	f7fd fd90 	bl	800a3e4 <memcpy>
 800c8c4:	89a3      	ldrh	r3, [r4, #12]
 800c8c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8ce:	81a3      	strh	r3, [r4, #12]
 800c8d0:	6126      	str	r6, [r4, #16]
 800c8d2:	6165      	str	r5, [r4, #20]
 800c8d4:	444e      	add	r6, r9
 800c8d6:	eba5 0509 	sub.w	r5, r5, r9
 800c8da:	6026      	str	r6, [r4, #0]
 800c8dc:	60a5      	str	r5, [r4, #8]
 800c8de:	463e      	mov	r6, r7
 800c8e0:	42be      	cmp	r6, r7
 800c8e2:	d900      	bls.n	800c8e6 <__ssputs_r+0x86>
 800c8e4:	463e      	mov	r6, r7
 800c8e6:	4632      	mov	r2, r6
 800c8e8:	6820      	ldr	r0, [r4, #0]
 800c8ea:	4641      	mov	r1, r8
 800c8ec:	f000 fb5a 	bl	800cfa4 <memmove>
 800c8f0:	68a3      	ldr	r3, [r4, #8]
 800c8f2:	6822      	ldr	r2, [r4, #0]
 800c8f4:	1b9b      	subs	r3, r3, r6
 800c8f6:	4432      	add	r2, r6
 800c8f8:	60a3      	str	r3, [r4, #8]
 800c8fa:	6022      	str	r2, [r4, #0]
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	e7db      	b.n	800c8b8 <__ssputs_r+0x58>
 800c900:	462a      	mov	r2, r5
 800c902:	f000 fb75 	bl	800cff0 <_realloc_r>
 800c906:	4606      	mov	r6, r0
 800c908:	2800      	cmp	r0, #0
 800c90a:	d1e1      	bne.n	800c8d0 <__ssputs_r+0x70>
 800c90c:	6921      	ldr	r1, [r4, #16]
 800c90e:	4650      	mov	r0, sl
 800c910:	f7ff fefc 	bl	800c70c <_free_r>
 800c914:	e7c7      	b.n	800c8a6 <__ssputs_r+0x46>
	...

0800c918 <_svfiprintf_r>:
 800c918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c91c:	4698      	mov	r8, r3
 800c91e:	898b      	ldrh	r3, [r1, #12]
 800c920:	061b      	lsls	r3, r3, #24
 800c922:	b09d      	sub	sp, #116	; 0x74
 800c924:	4607      	mov	r7, r0
 800c926:	460d      	mov	r5, r1
 800c928:	4614      	mov	r4, r2
 800c92a:	d50e      	bpl.n	800c94a <_svfiprintf_r+0x32>
 800c92c:	690b      	ldr	r3, [r1, #16]
 800c92e:	b963      	cbnz	r3, 800c94a <_svfiprintf_r+0x32>
 800c930:	2140      	movs	r1, #64	; 0x40
 800c932:	f7ff ff3b 	bl	800c7ac <_malloc_r>
 800c936:	6028      	str	r0, [r5, #0]
 800c938:	6128      	str	r0, [r5, #16]
 800c93a:	b920      	cbnz	r0, 800c946 <_svfiprintf_r+0x2e>
 800c93c:	230c      	movs	r3, #12
 800c93e:	603b      	str	r3, [r7, #0]
 800c940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c944:	e0d1      	b.n	800caea <_svfiprintf_r+0x1d2>
 800c946:	2340      	movs	r3, #64	; 0x40
 800c948:	616b      	str	r3, [r5, #20]
 800c94a:	2300      	movs	r3, #0
 800c94c:	9309      	str	r3, [sp, #36]	; 0x24
 800c94e:	2320      	movs	r3, #32
 800c950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c954:	f8cd 800c 	str.w	r8, [sp, #12]
 800c958:	2330      	movs	r3, #48	; 0x30
 800c95a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cb04 <_svfiprintf_r+0x1ec>
 800c95e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c962:	f04f 0901 	mov.w	r9, #1
 800c966:	4623      	mov	r3, r4
 800c968:	469a      	mov	sl, r3
 800c96a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c96e:	b10a      	cbz	r2, 800c974 <_svfiprintf_r+0x5c>
 800c970:	2a25      	cmp	r2, #37	; 0x25
 800c972:	d1f9      	bne.n	800c968 <_svfiprintf_r+0x50>
 800c974:	ebba 0b04 	subs.w	fp, sl, r4
 800c978:	d00b      	beq.n	800c992 <_svfiprintf_r+0x7a>
 800c97a:	465b      	mov	r3, fp
 800c97c:	4622      	mov	r2, r4
 800c97e:	4629      	mov	r1, r5
 800c980:	4638      	mov	r0, r7
 800c982:	f7ff ff6d 	bl	800c860 <__ssputs_r>
 800c986:	3001      	adds	r0, #1
 800c988:	f000 80aa 	beq.w	800cae0 <_svfiprintf_r+0x1c8>
 800c98c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c98e:	445a      	add	r2, fp
 800c990:	9209      	str	r2, [sp, #36]	; 0x24
 800c992:	f89a 3000 	ldrb.w	r3, [sl]
 800c996:	2b00      	cmp	r3, #0
 800c998:	f000 80a2 	beq.w	800cae0 <_svfiprintf_r+0x1c8>
 800c99c:	2300      	movs	r3, #0
 800c99e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9a6:	f10a 0a01 	add.w	sl, sl, #1
 800c9aa:	9304      	str	r3, [sp, #16]
 800c9ac:	9307      	str	r3, [sp, #28]
 800c9ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9b2:	931a      	str	r3, [sp, #104]	; 0x68
 800c9b4:	4654      	mov	r4, sl
 800c9b6:	2205      	movs	r2, #5
 800c9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9bc:	4851      	ldr	r0, [pc, #324]	; (800cb04 <_svfiprintf_r+0x1ec>)
 800c9be:	f7f3 fc0f 	bl	80001e0 <memchr>
 800c9c2:	9a04      	ldr	r2, [sp, #16]
 800c9c4:	b9d8      	cbnz	r0, 800c9fe <_svfiprintf_r+0xe6>
 800c9c6:	06d0      	lsls	r0, r2, #27
 800c9c8:	bf44      	itt	mi
 800c9ca:	2320      	movmi	r3, #32
 800c9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9d0:	0711      	lsls	r1, r2, #28
 800c9d2:	bf44      	itt	mi
 800c9d4:	232b      	movmi	r3, #43	; 0x2b
 800c9d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9da:	f89a 3000 	ldrb.w	r3, [sl]
 800c9de:	2b2a      	cmp	r3, #42	; 0x2a
 800c9e0:	d015      	beq.n	800ca0e <_svfiprintf_r+0xf6>
 800c9e2:	9a07      	ldr	r2, [sp, #28]
 800c9e4:	4654      	mov	r4, sl
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	f04f 0c0a 	mov.w	ip, #10
 800c9ec:	4621      	mov	r1, r4
 800c9ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9f2:	3b30      	subs	r3, #48	; 0x30
 800c9f4:	2b09      	cmp	r3, #9
 800c9f6:	d94e      	bls.n	800ca96 <_svfiprintf_r+0x17e>
 800c9f8:	b1b0      	cbz	r0, 800ca28 <_svfiprintf_r+0x110>
 800c9fa:	9207      	str	r2, [sp, #28]
 800c9fc:	e014      	b.n	800ca28 <_svfiprintf_r+0x110>
 800c9fe:	eba0 0308 	sub.w	r3, r0, r8
 800ca02:	fa09 f303 	lsl.w	r3, r9, r3
 800ca06:	4313      	orrs	r3, r2
 800ca08:	9304      	str	r3, [sp, #16]
 800ca0a:	46a2      	mov	sl, r4
 800ca0c:	e7d2      	b.n	800c9b4 <_svfiprintf_r+0x9c>
 800ca0e:	9b03      	ldr	r3, [sp, #12]
 800ca10:	1d19      	adds	r1, r3, #4
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	9103      	str	r1, [sp, #12]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	bfbb      	ittet	lt
 800ca1a:	425b      	neglt	r3, r3
 800ca1c:	f042 0202 	orrlt.w	r2, r2, #2
 800ca20:	9307      	strge	r3, [sp, #28]
 800ca22:	9307      	strlt	r3, [sp, #28]
 800ca24:	bfb8      	it	lt
 800ca26:	9204      	strlt	r2, [sp, #16]
 800ca28:	7823      	ldrb	r3, [r4, #0]
 800ca2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ca2c:	d10c      	bne.n	800ca48 <_svfiprintf_r+0x130>
 800ca2e:	7863      	ldrb	r3, [r4, #1]
 800ca30:	2b2a      	cmp	r3, #42	; 0x2a
 800ca32:	d135      	bne.n	800caa0 <_svfiprintf_r+0x188>
 800ca34:	9b03      	ldr	r3, [sp, #12]
 800ca36:	1d1a      	adds	r2, r3, #4
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	9203      	str	r2, [sp, #12]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	bfb8      	it	lt
 800ca40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ca44:	3402      	adds	r4, #2
 800ca46:	9305      	str	r3, [sp, #20]
 800ca48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cb14 <_svfiprintf_r+0x1fc>
 800ca4c:	7821      	ldrb	r1, [r4, #0]
 800ca4e:	2203      	movs	r2, #3
 800ca50:	4650      	mov	r0, sl
 800ca52:	f7f3 fbc5 	bl	80001e0 <memchr>
 800ca56:	b140      	cbz	r0, 800ca6a <_svfiprintf_r+0x152>
 800ca58:	2340      	movs	r3, #64	; 0x40
 800ca5a:	eba0 000a 	sub.w	r0, r0, sl
 800ca5e:	fa03 f000 	lsl.w	r0, r3, r0
 800ca62:	9b04      	ldr	r3, [sp, #16]
 800ca64:	4303      	orrs	r3, r0
 800ca66:	3401      	adds	r4, #1
 800ca68:	9304      	str	r3, [sp, #16]
 800ca6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca6e:	4826      	ldr	r0, [pc, #152]	; (800cb08 <_svfiprintf_r+0x1f0>)
 800ca70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca74:	2206      	movs	r2, #6
 800ca76:	f7f3 fbb3 	bl	80001e0 <memchr>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	d038      	beq.n	800caf0 <_svfiprintf_r+0x1d8>
 800ca7e:	4b23      	ldr	r3, [pc, #140]	; (800cb0c <_svfiprintf_r+0x1f4>)
 800ca80:	bb1b      	cbnz	r3, 800caca <_svfiprintf_r+0x1b2>
 800ca82:	9b03      	ldr	r3, [sp, #12]
 800ca84:	3307      	adds	r3, #7
 800ca86:	f023 0307 	bic.w	r3, r3, #7
 800ca8a:	3308      	adds	r3, #8
 800ca8c:	9303      	str	r3, [sp, #12]
 800ca8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca90:	4433      	add	r3, r6
 800ca92:	9309      	str	r3, [sp, #36]	; 0x24
 800ca94:	e767      	b.n	800c966 <_svfiprintf_r+0x4e>
 800ca96:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca9a:	460c      	mov	r4, r1
 800ca9c:	2001      	movs	r0, #1
 800ca9e:	e7a5      	b.n	800c9ec <_svfiprintf_r+0xd4>
 800caa0:	2300      	movs	r3, #0
 800caa2:	3401      	adds	r4, #1
 800caa4:	9305      	str	r3, [sp, #20]
 800caa6:	4619      	mov	r1, r3
 800caa8:	f04f 0c0a 	mov.w	ip, #10
 800caac:	4620      	mov	r0, r4
 800caae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cab2:	3a30      	subs	r2, #48	; 0x30
 800cab4:	2a09      	cmp	r2, #9
 800cab6:	d903      	bls.n	800cac0 <_svfiprintf_r+0x1a8>
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d0c5      	beq.n	800ca48 <_svfiprintf_r+0x130>
 800cabc:	9105      	str	r1, [sp, #20]
 800cabe:	e7c3      	b.n	800ca48 <_svfiprintf_r+0x130>
 800cac0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cac4:	4604      	mov	r4, r0
 800cac6:	2301      	movs	r3, #1
 800cac8:	e7f0      	b.n	800caac <_svfiprintf_r+0x194>
 800caca:	ab03      	add	r3, sp, #12
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	462a      	mov	r2, r5
 800cad0:	4b0f      	ldr	r3, [pc, #60]	; (800cb10 <_svfiprintf_r+0x1f8>)
 800cad2:	a904      	add	r1, sp, #16
 800cad4:	4638      	mov	r0, r7
 800cad6:	f7fd fd3b 	bl	800a550 <_printf_float>
 800cada:	1c42      	adds	r2, r0, #1
 800cadc:	4606      	mov	r6, r0
 800cade:	d1d6      	bne.n	800ca8e <_svfiprintf_r+0x176>
 800cae0:	89ab      	ldrh	r3, [r5, #12]
 800cae2:	065b      	lsls	r3, r3, #25
 800cae4:	f53f af2c 	bmi.w	800c940 <_svfiprintf_r+0x28>
 800cae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800caea:	b01d      	add	sp, #116	; 0x74
 800caec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caf0:	ab03      	add	r3, sp, #12
 800caf2:	9300      	str	r3, [sp, #0]
 800caf4:	462a      	mov	r2, r5
 800caf6:	4b06      	ldr	r3, [pc, #24]	; (800cb10 <_svfiprintf_r+0x1f8>)
 800caf8:	a904      	add	r1, sp, #16
 800cafa:	4638      	mov	r0, r7
 800cafc:	f7fd ffcc 	bl	800aa98 <_printf_i>
 800cb00:	e7eb      	b.n	800cada <_svfiprintf_r+0x1c2>
 800cb02:	bf00      	nop
 800cb04:	080113a4 	.word	0x080113a4
 800cb08:	080113ae 	.word	0x080113ae
 800cb0c:	0800a551 	.word	0x0800a551
 800cb10:	0800c861 	.word	0x0800c861
 800cb14:	080113aa 	.word	0x080113aa

0800cb18 <__sfputc_r>:
 800cb18:	6893      	ldr	r3, [r2, #8]
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	b410      	push	{r4}
 800cb20:	6093      	str	r3, [r2, #8]
 800cb22:	da08      	bge.n	800cb36 <__sfputc_r+0x1e>
 800cb24:	6994      	ldr	r4, [r2, #24]
 800cb26:	42a3      	cmp	r3, r4
 800cb28:	db01      	blt.n	800cb2e <__sfputc_r+0x16>
 800cb2a:	290a      	cmp	r1, #10
 800cb2c:	d103      	bne.n	800cb36 <__sfputc_r+0x1e>
 800cb2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb32:	f7fe b8f7 	b.w	800ad24 <__swbuf_r>
 800cb36:	6813      	ldr	r3, [r2, #0]
 800cb38:	1c58      	adds	r0, r3, #1
 800cb3a:	6010      	str	r0, [r2, #0]
 800cb3c:	7019      	strb	r1, [r3, #0]
 800cb3e:	4608      	mov	r0, r1
 800cb40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb44:	4770      	bx	lr

0800cb46 <__sfputs_r>:
 800cb46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb48:	4606      	mov	r6, r0
 800cb4a:	460f      	mov	r7, r1
 800cb4c:	4614      	mov	r4, r2
 800cb4e:	18d5      	adds	r5, r2, r3
 800cb50:	42ac      	cmp	r4, r5
 800cb52:	d101      	bne.n	800cb58 <__sfputs_r+0x12>
 800cb54:	2000      	movs	r0, #0
 800cb56:	e007      	b.n	800cb68 <__sfputs_r+0x22>
 800cb58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb5c:	463a      	mov	r2, r7
 800cb5e:	4630      	mov	r0, r6
 800cb60:	f7ff ffda 	bl	800cb18 <__sfputc_r>
 800cb64:	1c43      	adds	r3, r0, #1
 800cb66:	d1f3      	bne.n	800cb50 <__sfputs_r+0xa>
 800cb68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cb6c <_vfiprintf_r>:
 800cb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb70:	460d      	mov	r5, r1
 800cb72:	b09d      	sub	sp, #116	; 0x74
 800cb74:	4614      	mov	r4, r2
 800cb76:	4698      	mov	r8, r3
 800cb78:	4606      	mov	r6, r0
 800cb7a:	b118      	cbz	r0, 800cb84 <_vfiprintf_r+0x18>
 800cb7c:	6983      	ldr	r3, [r0, #24]
 800cb7e:	b90b      	cbnz	r3, 800cb84 <_vfiprintf_r+0x18>
 800cb80:	f7ff f924 	bl	800bdcc <__sinit>
 800cb84:	4b89      	ldr	r3, [pc, #548]	; (800cdac <_vfiprintf_r+0x240>)
 800cb86:	429d      	cmp	r5, r3
 800cb88:	d11b      	bne.n	800cbc2 <_vfiprintf_r+0x56>
 800cb8a:	6875      	ldr	r5, [r6, #4]
 800cb8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb8e:	07d9      	lsls	r1, r3, #31
 800cb90:	d405      	bmi.n	800cb9e <_vfiprintf_r+0x32>
 800cb92:	89ab      	ldrh	r3, [r5, #12]
 800cb94:	059a      	lsls	r2, r3, #22
 800cb96:	d402      	bmi.n	800cb9e <_vfiprintf_r+0x32>
 800cb98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb9a:	f7ff f9ba 	bl	800bf12 <__retarget_lock_acquire_recursive>
 800cb9e:	89ab      	ldrh	r3, [r5, #12]
 800cba0:	071b      	lsls	r3, r3, #28
 800cba2:	d501      	bpl.n	800cba8 <_vfiprintf_r+0x3c>
 800cba4:	692b      	ldr	r3, [r5, #16]
 800cba6:	b9eb      	cbnz	r3, 800cbe4 <_vfiprintf_r+0x78>
 800cba8:	4629      	mov	r1, r5
 800cbaa:	4630      	mov	r0, r6
 800cbac:	f7fe f90c 	bl	800adc8 <__swsetup_r>
 800cbb0:	b1c0      	cbz	r0, 800cbe4 <_vfiprintf_r+0x78>
 800cbb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbb4:	07dc      	lsls	r4, r3, #31
 800cbb6:	d50e      	bpl.n	800cbd6 <_vfiprintf_r+0x6a>
 800cbb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbbc:	b01d      	add	sp, #116	; 0x74
 800cbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc2:	4b7b      	ldr	r3, [pc, #492]	; (800cdb0 <_vfiprintf_r+0x244>)
 800cbc4:	429d      	cmp	r5, r3
 800cbc6:	d101      	bne.n	800cbcc <_vfiprintf_r+0x60>
 800cbc8:	68b5      	ldr	r5, [r6, #8]
 800cbca:	e7df      	b.n	800cb8c <_vfiprintf_r+0x20>
 800cbcc:	4b79      	ldr	r3, [pc, #484]	; (800cdb4 <_vfiprintf_r+0x248>)
 800cbce:	429d      	cmp	r5, r3
 800cbd0:	bf08      	it	eq
 800cbd2:	68f5      	ldreq	r5, [r6, #12]
 800cbd4:	e7da      	b.n	800cb8c <_vfiprintf_r+0x20>
 800cbd6:	89ab      	ldrh	r3, [r5, #12]
 800cbd8:	0598      	lsls	r0, r3, #22
 800cbda:	d4ed      	bmi.n	800cbb8 <_vfiprintf_r+0x4c>
 800cbdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbde:	f7ff f999 	bl	800bf14 <__retarget_lock_release_recursive>
 800cbe2:	e7e9      	b.n	800cbb8 <_vfiprintf_r+0x4c>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	9309      	str	r3, [sp, #36]	; 0x24
 800cbe8:	2320      	movs	r3, #32
 800cbea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbee:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbf2:	2330      	movs	r3, #48	; 0x30
 800cbf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cdb8 <_vfiprintf_r+0x24c>
 800cbf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbfc:	f04f 0901 	mov.w	r9, #1
 800cc00:	4623      	mov	r3, r4
 800cc02:	469a      	mov	sl, r3
 800cc04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc08:	b10a      	cbz	r2, 800cc0e <_vfiprintf_r+0xa2>
 800cc0a:	2a25      	cmp	r2, #37	; 0x25
 800cc0c:	d1f9      	bne.n	800cc02 <_vfiprintf_r+0x96>
 800cc0e:	ebba 0b04 	subs.w	fp, sl, r4
 800cc12:	d00b      	beq.n	800cc2c <_vfiprintf_r+0xc0>
 800cc14:	465b      	mov	r3, fp
 800cc16:	4622      	mov	r2, r4
 800cc18:	4629      	mov	r1, r5
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	f7ff ff93 	bl	800cb46 <__sfputs_r>
 800cc20:	3001      	adds	r0, #1
 800cc22:	f000 80aa 	beq.w	800cd7a <_vfiprintf_r+0x20e>
 800cc26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc28:	445a      	add	r2, fp
 800cc2a:	9209      	str	r2, [sp, #36]	; 0x24
 800cc2c:	f89a 3000 	ldrb.w	r3, [sl]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f000 80a2 	beq.w	800cd7a <_vfiprintf_r+0x20e>
 800cc36:	2300      	movs	r3, #0
 800cc38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc40:	f10a 0a01 	add.w	sl, sl, #1
 800cc44:	9304      	str	r3, [sp, #16]
 800cc46:	9307      	str	r3, [sp, #28]
 800cc48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc4c:	931a      	str	r3, [sp, #104]	; 0x68
 800cc4e:	4654      	mov	r4, sl
 800cc50:	2205      	movs	r2, #5
 800cc52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc56:	4858      	ldr	r0, [pc, #352]	; (800cdb8 <_vfiprintf_r+0x24c>)
 800cc58:	f7f3 fac2 	bl	80001e0 <memchr>
 800cc5c:	9a04      	ldr	r2, [sp, #16]
 800cc5e:	b9d8      	cbnz	r0, 800cc98 <_vfiprintf_r+0x12c>
 800cc60:	06d1      	lsls	r1, r2, #27
 800cc62:	bf44      	itt	mi
 800cc64:	2320      	movmi	r3, #32
 800cc66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc6a:	0713      	lsls	r3, r2, #28
 800cc6c:	bf44      	itt	mi
 800cc6e:	232b      	movmi	r3, #43	; 0x2b
 800cc70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc74:	f89a 3000 	ldrb.w	r3, [sl]
 800cc78:	2b2a      	cmp	r3, #42	; 0x2a
 800cc7a:	d015      	beq.n	800cca8 <_vfiprintf_r+0x13c>
 800cc7c:	9a07      	ldr	r2, [sp, #28]
 800cc7e:	4654      	mov	r4, sl
 800cc80:	2000      	movs	r0, #0
 800cc82:	f04f 0c0a 	mov.w	ip, #10
 800cc86:	4621      	mov	r1, r4
 800cc88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc8c:	3b30      	subs	r3, #48	; 0x30
 800cc8e:	2b09      	cmp	r3, #9
 800cc90:	d94e      	bls.n	800cd30 <_vfiprintf_r+0x1c4>
 800cc92:	b1b0      	cbz	r0, 800ccc2 <_vfiprintf_r+0x156>
 800cc94:	9207      	str	r2, [sp, #28]
 800cc96:	e014      	b.n	800ccc2 <_vfiprintf_r+0x156>
 800cc98:	eba0 0308 	sub.w	r3, r0, r8
 800cc9c:	fa09 f303 	lsl.w	r3, r9, r3
 800cca0:	4313      	orrs	r3, r2
 800cca2:	9304      	str	r3, [sp, #16]
 800cca4:	46a2      	mov	sl, r4
 800cca6:	e7d2      	b.n	800cc4e <_vfiprintf_r+0xe2>
 800cca8:	9b03      	ldr	r3, [sp, #12]
 800ccaa:	1d19      	adds	r1, r3, #4
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	9103      	str	r1, [sp, #12]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	bfbb      	ittet	lt
 800ccb4:	425b      	neglt	r3, r3
 800ccb6:	f042 0202 	orrlt.w	r2, r2, #2
 800ccba:	9307      	strge	r3, [sp, #28]
 800ccbc:	9307      	strlt	r3, [sp, #28]
 800ccbe:	bfb8      	it	lt
 800ccc0:	9204      	strlt	r2, [sp, #16]
 800ccc2:	7823      	ldrb	r3, [r4, #0]
 800ccc4:	2b2e      	cmp	r3, #46	; 0x2e
 800ccc6:	d10c      	bne.n	800cce2 <_vfiprintf_r+0x176>
 800ccc8:	7863      	ldrb	r3, [r4, #1]
 800ccca:	2b2a      	cmp	r3, #42	; 0x2a
 800cccc:	d135      	bne.n	800cd3a <_vfiprintf_r+0x1ce>
 800ccce:	9b03      	ldr	r3, [sp, #12]
 800ccd0:	1d1a      	adds	r2, r3, #4
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	9203      	str	r2, [sp, #12]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	bfb8      	it	lt
 800ccda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ccde:	3402      	adds	r4, #2
 800cce0:	9305      	str	r3, [sp, #20]
 800cce2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cdc8 <_vfiprintf_r+0x25c>
 800cce6:	7821      	ldrb	r1, [r4, #0]
 800cce8:	2203      	movs	r2, #3
 800ccea:	4650      	mov	r0, sl
 800ccec:	f7f3 fa78 	bl	80001e0 <memchr>
 800ccf0:	b140      	cbz	r0, 800cd04 <_vfiprintf_r+0x198>
 800ccf2:	2340      	movs	r3, #64	; 0x40
 800ccf4:	eba0 000a 	sub.w	r0, r0, sl
 800ccf8:	fa03 f000 	lsl.w	r0, r3, r0
 800ccfc:	9b04      	ldr	r3, [sp, #16]
 800ccfe:	4303      	orrs	r3, r0
 800cd00:	3401      	adds	r4, #1
 800cd02:	9304      	str	r3, [sp, #16]
 800cd04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd08:	482c      	ldr	r0, [pc, #176]	; (800cdbc <_vfiprintf_r+0x250>)
 800cd0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd0e:	2206      	movs	r2, #6
 800cd10:	f7f3 fa66 	bl	80001e0 <memchr>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d03f      	beq.n	800cd98 <_vfiprintf_r+0x22c>
 800cd18:	4b29      	ldr	r3, [pc, #164]	; (800cdc0 <_vfiprintf_r+0x254>)
 800cd1a:	bb1b      	cbnz	r3, 800cd64 <_vfiprintf_r+0x1f8>
 800cd1c:	9b03      	ldr	r3, [sp, #12]
 800cd1e:	3307      	adds	r3, #7
 800cd20:	f023 0307 	bic.w	r3, r3, #7
 800cd24:	3308      	adds	r3, #8
 800cd26:	9303      	str	r3, [sp, #12]
 800cd28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd2a:	443b      	add	r3, r7
 800cd2c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd2e:	e767      	b.n	800cc00 <_vfiprintf_r+0x94>
 800cd30:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd34:	460c      	mov	r4, r1
 800cd36:	2001      	movs	r0, #1
 800cd38:	e7a5      	b.n	800cc86 <_vfiprintf_r+0x11a>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	3401      	adds	r4, #1
 800cd3e:	9305      	str	r3, [sp, #20]
 800cd40:	4619      	mov	r1, r3
 800cd42:	f04f 0c0a 	mov.w	ip, #10
 800cd46:	4620      	mov	r0, r4
 800cd48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd4c:	3a30      	subs	r2, #48	; 0x30
 800cd4e:	2a09      	cmp	r2, #9
 800cd50:	d903      	bls.n	800cd5a <_vfiprintf_r+0x1ee>
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d0c5      	beq.n	800cce2 <_vfiprintf_r+0x176>
 800cd56:	9105      	str	r1, [sp, #20]
 800cd58:	e7c3      	b.n	800cce2 <_vfiprintf_r+0x176>
 800cd5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd5e:	4604      	mov	r4, r0
 800cd60:	2301      	movs	r3, #1
 800cd62:	e7f0      	b.n	800cd46 <_vfiprintf_r+0x1da>
 800cd64:	ab03      	add	r3, sp, #12
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	462a      	mov	r2, r5
 800cd6a:	4b16      	ldr	r3, [pc, #88]	; (800cdc4 <_vfiprintf_r+0x258>)
 800cd6c:	a904      	add	r1, sp, #16
 800cd6e:	4630      	mov	r0, r6
 800cd70:	f7fd fbee 	bl	800a550 <_printf_float>
 800cd74:	4607      	mov	r7, r0
 800cd76:	1c78      	adds	r0, r7, #1
 800cd78:	d1d6      	bne.n	800cd28 <_vfiprintf_r+0x1bc>
 800cd7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd7c:	07d9      	lsls	r1, r3, #31
 800cd7e:	d405      	bmi.n	800cd8c <_vfiprintf_r+0x220>
 800cd80:	89ab      	ldrh	r3, [r5, #12]
 800cd82:	059a      	lsls	r2, r3, #22
 800cd84:	d402      	bmi.n	800cd8c <_vfiprintf_r+0x220>
 800cd86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd88:	f7ff f8c4 	bl	800bf14 <__retarget_lock_release_recursive>
 800cd8c:	89ab      	ldrh	r3, [r5, #12]
 800cd8e:	065b      	lsls	r3, r3, #25
 800cd90:	f53f af12 	bmi.w	800cbb8 <_vfiprintf_r+0x4c>
 800cd94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd96:	e711      	b.n	800cbbc <_vfiprintf_r+0x50>
 800cd98:	ab03      	add	r3, sp, #12
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	462a      	mov	r2, r5
 800cd9e:	4b09      	ldr	r3, [pc, #36]	; (800cdc4 <_vfiprintf_r+0x258>)
 800cda0:	a904      	add	r1, sp, #16
 800cda2:	4630      	mov	r0, r6
 800cda4:	f7fd fe78 	bl	800aa98 <_printf_i>
 800cda8:	e7e4      	b.n	800cd74 <_vfiprintf_r+0x208>
 800cdaa:	bf00      	nop
 800cdac:	08011208 	.word	0x08011208
 800cdb0:	08011228 	.word	0x08011228
 800cdb4:	080111e8 	.word	0x080111e8
 800cdb8:	080113a4 	.word	0x080113a4
 800cdbc:	080113ae 	.word	0x080113ae
 800cdc0:	0800a551 	.word	0x0800a551
 800cdc4:	0800cb47 	.word	0x0800cb47
 800cdc8:	080113aa 	.word	0x080113aa

0800cdcc <_sbrk_r>:
 800cdcc:	b538      	push	{r3, r4, r5, lr}
 800cdce:	4d06      	ldr	r5, [pc, #24]	; (800cde8 <_sbrk_r+0x1c>)
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	4608      	mov	r0, r1
 800cdd6:	602b      	str	r3, [r5, #0]
 800cdd8:	f7f6 fae0 	bl	800339c <_sbrk>
 800cddc:	1c43      	adds	r3, r0, #1
 800cdde:	d102      	bne.n	800cde6 <_sbrk_r+0x1a>
 800cde0:	682b      	ldr	r3, [r5, #0]
 800cde2:	b103      	cbz	r3, 800cde6 <_sbrk_r+0x1a>
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
 800cde8:	20004aa8 	.word	0x20004aa8

0800cdec <__sread>:
 800cdec:	b510      	push	{r4, lr}
 800cdee:	460c      	mov	r4, r1
 800cdf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf4:	f000 f922 	bl	800d03c <_read_r>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	bfab      	itete	ge
 800cdfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cdfe:	89a3      	ldrhlt	r3, [r4, #12]
 800ce00:	181b      	addge	r3, r3, r0
 800ce02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce06:	bfac      	ite	ge
 800ce08:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce0a:	81a3      	strhlt	r3, [r4, #12]
 800ce0c:	bd10      	pop	{r4, pc}

0800ce0e <__swrite>:
 800ce0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce12:	461f      	mov	r7, r3
 800ce14:	898b      	ldrh	r3, [r1, #12]
 800ce16:	05db      	lsls	r3, r3, #23
 800ce18:	4605      	mov	r5, r0
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	4616      	mov	r6, r2
 800ce1e:	d505      	bpl.n	800ce2c <__swrite+0x1e>
 800ce20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce24:	2302      	movs	r3, #2
 800ce26:	2200      	movs	r2, #0
 800ce28:	f000 f898 	bl	800cf5c <_lseek_r>
 800ce2c:	89a3      	ldrh	r3, [r4, #12]
 800ce2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce36:	81a3      	strh	r3, [r4, #12]
 800ce38:	4632      	mov	r2, r6
 800ce3a:	463b      	mov	r3, r7
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce42:	f000 b817 	b.w	800ce74 <_write_r>

0800ce46 <__sseek>:
 800ce46:	b510      	push	{r4, lr}
 800ce48:	460c      	mov	r4, r1
 800ce4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce4e:	f000 f885 	bl	800cf5c <_lseek_r>
 800ce52:	1c43      	adds	r3, r0, #1
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	bf15      	itete	ne
 800ce58:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce62:	81a3      	strheq	r3, [r4, #12]
 800ce64:	bf18      	it	ne
 800ce66:	81a3      	strhne	r3, [r4, #12]
 800ce68:	bd10      	pop	{r4, pc}

0800ce6a <__sclose>:
 800ce6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce6e:	f000 b831 	b.w	800ced4 <_close_r>
	...

0800ce74 <_write_r>:
 800ce74:	b538      	push	{r3, r4, r5, lr}
 800ce76:	4d07      	ldr	r5, [pc, #28]	; (800ce94 <_write_r+0x20>)
 800ce78:	4604      	mov	r4, r0
 800ce7a:	4608      	mov	r0, r1
 800ce7c:	4611      	mov	r1, r2
 800ce7e:	2200      	movs	r2, #0
 800ce80:	602a      	str	r2, [r5, #0]
 800ce82:	461a      	mov	r2, r3
 800ce84:	f7f6 fa39 	bl	80032fa <_write>
 800ce88:	1c43      	adds	r3, r0, #1
 800ce8a:	d102      	bne.n	800ce92 <_write_r+0x1e>
 800ce8c:	682b      	ldr	r3, [r5, #0]
 800ce8e:	b103      	cbz	r3, 800ce92 <_write_r+0x1e>
 800ce90:	6023      	str	r3, [r4, #0]
 800ce92:	bd38      	pop	{r3, r4, r5, pc}
 800ce94:	20004aa8 	.word	0x20004aa8

0800ce98 <__assert_func>:
 800ce98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce9a:	4614      	mov	r4, r2
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	4b09      	ldr	r3, [pc, #36]	; (800cec4 <__assert_func+0x2c>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4605      	mov	r5, r0
 800cea4:	68d8      	ldr	r0, [r3, #12]
 800cea6:	b14c      	cbz	r4, 800cebc <__assert_func+0x24>
 800cea8:	4b07      	ldr	r3, [pc, #28]	; (800cec8 <__assert_func+0x30>)
 800ceaa:	9100      	str	r1, [sp, #0]
 800ceac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ceb0:	4906      	ldr	r1, [pc, #24]	; (800cecc <__assert_func+0x34>)
 800ceb2:	462b      	mov	r3, r5
 800ceb4:	f000 f81e 	bl	800cef4 <fiprintf>
 800ceb8:	f000 f8df 	bl	800d07a <abort>
 800cebc:	4b04      	ldr	r3, [pc, #16]	; (800ced0 <__assert_func+0x38>)
 800cebe:	461c      	mov	r4, r3
 800cec0:	e7f3      	b.n	800ceaa <__assert_func+0x12>
 800cec2:	bf00      	nop
 800cec4:	2000004c 	.word	0x2000004c
 800cec8:	080113b5 	.word	0x080113b5
 800cecc:	080113c2 	.word	0x080113c2
 800ced0:	080113f0 	.word	0x080113f0

0800ced4 <_close_r>:
 800ced4:	b538      	push	{r3, r4, r5, lr}
 800ced6:	4d06      	ldr	r5, [pc, #24]	; (800cef0 <_close_r+0x1c>)
 800ced8:	2300      	movs	r3, #0
 800ceda:	4604      	mov	r4, r0
 800cedc:	4608      	mov	r0, r1
 800cede:	602b      	str	r3, [r5, #0]
 800cee0:	f7f6 fa27 	bl	8003332 <_close>
 800cee4:	1c43      	adds	r3, r0, #1
 800cee6:	d102      	bne.n	800ceee <_close_r+0x1a>
 800cee8:	682b      	ldr	r3, [r5, #0]
 800ceea:	b103      	cbz	r3, 800ceee <_close_r+0x1a>
 800ceec:	6023      	str	r3, [r4, #0]
 800ceee:	bd38      	pop	{r3, r4, r5, pc}
 800cef0:	20004aa8 	.word	0x20004aa8

0800cef4 <fiprintf>:
 800cef4:	b40e      	push	{r1, r2, r3}
 800cef6:	b503      	push	{r0, r1, lr}
 800cef8:	4601      	mov	r1, r0
 800cefa:	ab03      	add	r3, sp, #12
 800cefc:	4805      	ldr	r0, [pc, #20]	; (800cf14 <fiprintf+0x20>)
 800cefe:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf02:	6800      	ldr	r0, [r0, #0]
 800cf04:	9301      	str	r3, [sp, #4]
 800cf06:	f7ff fe31 	bl	800cb6c <_vfiprintf_r>
 800cf0a:	b002      	add	sp, #8
 800cf0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf10:	b003      	add	sp, #12
 800cf12:	4770      	bx	lr
 800cf14:	2000004c 	.word	0x2000004c

0800cf18 <_fstat_r>:
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	4d07      	ldr	r5, [pc, #28]	; (800cf38 <_fstat_r+0x20>)
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	4604      	mov	r4, r0
 800cf20:	4608      	mov	r0, r1
 800cf22:	4611      	mov	r1, r2
 800cf24:	602b      	str	r3, [r5, #0]
 800cf26:	f7f6 fa10 	bl	800334a <_fstat>
 800cf2a:	1c43      	adds	r3, r0, #1
 800cf2c:	d102      	bne.n	800cf34 <_fstat_r+0x1c>
 800cf2e:	682b      	ldr	r3, [r5, #0]
 800cf30:	b103      	cbz	r3, 800cf34 <_fstat_r+0x1c>
 800cf32:	6023      	str	r3, [r4, #0]
 800cf34:	bd38      	pop	{r3, r4, r5, pc}
 800cf36:	bf00      	nop
 800cf38:	20004aa8 	.word	0x20004aa8

0800cf3c <_isatty_r>:
 800cf3c:	b538      	push	{r3, r4, r5, lr}
 800cf3e:	4d06      	ldr	r5, [pc, #24]	; (800cf58 <_isatty_r+0x1c>)
 800cf40:	2300      	movs	r3, #0
 800cf42:	4604      	mov	r4, r0
 800cf44:	4608      	mov	r0, r1
 800cf46:	602b      	str	r3, [r5, #0]
 800cf48:	f7f6 fa0f 	bl	800336a <_isatty>
 800cf4c:	1c43      	adds	r3, r0, #1
 800cf4e:	d102      	bne.n	800cf56 <_isatty_r+0x1a>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	b103      	cbz	r3, 800cf56 <_isatty_r+0x1a>
 800cf54:	6023      	str	r3, [r4, #0]
 800cf56:	bd38      	pop	{r3, r4, r5, pc}
 800cf58:	20004aa8 	.word	0x20004aa8

0800cf5c <_lseek_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	4d07      	ldr	r5, [pc, #28]	; (800cf7c <_lseek_r+0x20>)
 800cf60:	4604      	mov	r4, r0
 800cf62:	4608      	mov	r0, r1
 800cf64:	4611      	mov	r1, r2
 800cf66:	2200      	movs	r2, #0
 800cf68:	602a      	str	r2, [r5, #0]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	f7f6 fa08 	bl	8003380 <_lseek>
 800cf70:	1c43      	adds	r3, r0, #1
 800cf72:	d102      	bne.n	800cf7a <_lseek_r+0x1e>
 800cf74:	682b      	ldr	r3, [r5, #0]
 800cf76:	b103      	cbz	r3, 800cf7a <_lseek_r+0x1e>
 800cf78:	6023      	str	r3, [r4, #0]
 800cf7a:	bd38      	pop	{r3, r4, r5, pc}
 800cf7c:	20004aa8 	.word	0x20004aa8

0800cf80 <__ascii_mbtowc>:
 800cf80:	b082      	sub	sp, #8
 800cf82:	b901      	cbnz	r1, 800cf86 <__ascii_mbtowc+0x6>
 800cf84:	a901      	add	r1, sp, #4
 800cf86:	b142      	cbz	r2, 800cf9a <__ascii_mbtowc+0x1a>
 800cf88:	b14b      	cbz	r3, 800cf9e <__ascii_mbtowc+0x1e>
 800cf8a:	7813      	ldrb	r3, [r2, #0]
 800cf8c:	600b      	str	r3, [r1, #0]
 800cf8e:	7812      	ldrb	r2, [r2, #0]
 800cf90:	1e10      	subs	r0, r2, #0
 800cf92:	bf18      	it	ne
 800cf94:	2001      	movne	r0, #1
 800cf96:	b002      	add	sp, #8
 800cf98:	4770      	bx	lr
 800cf9a:	4610      	mov	r0, r2
 800cf9c:	e7fb      	b.n	800cf96 <__ascii_mbtowc+0x16>
 800cf9e:	f06f 0001 	mvn.w	r0, #1
 800cfa2:	e7f8      	b.n	800cf96 <__ascii_mbtowc+0x16>

0800cfa4 <memmove>:
 800cfa4:	4288      	cmp	r0, r1
 800cfa6:	b510      	push	{r4, lr}
 800cfa8:	eb01 0402 	add.w	r4, r1, r2
 800cfac:	d902      	bls.n	800cfb4 <memmove+0x10>
 800cfae:	4284      	cmp	r4, r0
 800cfb0:	4623      	mov	r3, r4
 800cfb2:	d807      	bhi.n	800cfc4 <memmove+0x20>
 800cfb4:	1e43      	subs	r3, r0, #1
 800cfb6:	42a1      	cmp	r1, r4
 800cfb8:	d008      	beq.n	800cfcc <memmove+0x28>
 800cfba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfc2:	e7f8      	b.n	800cfb6 <memmove+0x12>
 800cfc4:	4402      	add	r2, r0
 800cfc6:	4601      	mov	r1, r0
 800cfc8:	428a      	cmp	r2, r1
 800cfca:	d100      	bne.n	800cfce <memmove+0x2a>
 800cfcc:	bd10      	pop	{r4, pc}
 800cfce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfd6:	e7f7      	b.n	800cfc8 <memmove+0x24>

0800cfd8 <__malloc_lock>:
 800cfd8:	4801      	ldr	r0, [pc, #4]	; (800cfe0 <__malloc_lock+0x8>)
 800cfda:	f7fe bf9a 	b.w	800bf12 <__retarget_lock_acquire_recursive>
 800cfde:	bf00      	nop
 800cfe0:	20004aa0 	.word	0x20004aa0

0800cfe4 <__malloc_unlock>:
 800cfe4:	4801      	ldr	r0, [pc, #4]	; (800cfec <__malloc_unlock+0x8>)
 800cfe6:	f7fe bf95 	b.w	800bf14 <__retarget_lock_release_recursive>
 800cfea:	bf00      	nop
 800cfec:	20004aa0 	.word	0x20004aa0

0800cff0 <_realloc_r>:
 800cff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cff2:	4607      	mov	r7, r0
 800cff4:	4614      	mov	r4, r2
 800cff6:	460e      	mov	r6, r1
 800cff8:	b921      	cbnz	r1, 800d004 <_realloc_r+0x14>
 800cffa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cffe:	4611      	mov	r1, r2
 800d000:	f7ff bbd4 	b.w	800c7ac <_malloc_r>
 800d004:	b922      	cbnz	r2, 800d010 <_realloc_r+0x20>
 800d006:	f7ff fb81 	bl	800c70c <_free_r>
 800d00a:	4625      	mov	r5, r4
 800d00c:	4628      	mov	r0, r5
 800d00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d010:	f000 f83a 	bl	800d088 <_malloc_usable_size_r>
 800d014:	42a0      	cmp	r0, r4
 800d016:	d20f      	bcs.n	800d038 <_realloc_r+0x48>
 800d018:	4621      	mov	r1, r4
 800d01a:	4638      	mov	r0, r7
 800d01c:	f7ff fbc6 	bl	800c7ac <_malloc_r>
 800d020:	4605      	mov	r5, r0
 800d022:	2800      	cmp	r0, #0
 800d024:	d0f2      	beq.n	800d00c <_realloc_r+0x1c>
 800d026:	4631      	mov	r1, r6
 800d028:	4622      	mov	r2, r4
 800d02a:	f7fd f9db 	bl	800a3e4 <memcpy>
 800d02e:	4631      	mov	r1, r6
 800d030:	4638      	mov	r0, r7
 800d032:	f7ff fb6b 	bl	800c70c <_free_r>
 800d036:	e7e9      	b.n	800d00c <_realloc_r+0x1c>
 800d038:	4635      	mov	r5, r6
 800d03a:	e7e7      	b.n	800d00c <_realloc_r+0x1c>

0800d03c <_read_r>:
 800d03c:	b538      	push	{r3, r4, r5, lr}
 800d03e:	4d07      	ldr	r5, [pc, #28]	; (800d05c <_read_r+0x20>)
 800d040:	4604      	mov	r4, r0
 800d042:	4608      	mov	r0, r1
 800d044:	4611      	mov	r1, r2
 800d046:	2200      	movs	r2, #0
 800d048:	602a      	str	r2, [r5, #0]
 800d04a:	461a      	mov	r2, r3
 800d04c:	f7f6 f938 	bl	80032c0 <_read>
 800d050:	1c43      	adds	r3, r0, #1
 800d052:	d102      	bne.n	800d05a <_read_r+0x1e>
 800d054:	682b      	ldr	r3, [r5, #0]
 800d056:	b103      	cbz	r3, 800d05a <_read_r+0x1e>
 800d058:	6023      	str	r3, [r4, #0]
 800d05a:	bd38      	pop	{r3, r4, r5, pc}
 800d05c:	20004aa8 	.word	0x20004aa8

0800d060 <__ascii_wctomb>:
 800d060:	b149      	cbz	r1, 800d076 <__ascii_wctomb+0x16>
 800d062:	2aff      	cmp	r2, #255	; 0xff
 800d064:	bf85      	ittet	hi
 800d066:	238a      	movhi	r3, #138	; 0x8a
 800d068:	6003      	strhi	r3, [r0, #0]
 800d06a:	700a      	strbls	r2, [r1, #0]
 800d06c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d070:	bf98      	it	ls
 800d072:	2001      	movls	r0, #1
 800d074:	4770      	bx	lr
 800d076:	4608      	mov	r0, r1
 800d078:	4770      	bx	lr

0800d07a <abort>:
 800d07a:	b508      	push	{r3, lr}
 800d07c:	2006      	movs	r0, #6
 800d07e:	f000 f833 	bl	800d0e8 <raise>
 800d082:	2001      	movs	r0, #1
 800d084:	f7f6 f912 	bl	80032ac <_exit>

0800d088 <_malloc_usable_size_r>:
 800d088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d08c:	1f18      	subs	r0, r3, #4
 800d08e:	2b00      	cmp	r3, #0
 800d090:	bfbc      	itt	lt
 800d092:	580b      	ldrlt	r3, [r1, r0]
 800d094:	18c0      	addlt	r0, r0, r3
 800d096:	4770      	bx	lr

0800d098 <_raise_r>:
 800d098:	291f      	cmp	r1, #31
 800d09a:	b538      	push	{r3, r4, r5, lr}
 800d09c:	4604      	mov	r4, r0
 800d09e:	460d      	mov	r5, r1
 800d0a0:	d904      	bls.n	800d0ac <_raise_r+0x14>
 800d0a2:	2316      	movs	r3, #22
 800d0a4:	6003      	str	r3, [r0, #0]
 800d0a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0aa:	bd38      	pop	{r3, r4, r5, pc}
 800d0ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d0ae:	b112      	cbz	r2, 800d0b6 <_raise_r+0x1e>
 800d0b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0b4:	b94b      	cbnz	r3, 800d0ca <_raise_r+0x32>
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f000 f830 	bl	800d11c <_getpid_r>
 800d0bc:	462a      	mov	r2, r5
 800d0be:	4601      	mov	r1, r0
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0c6:	f000 b817 	b.w	800d0f8 <_kill_r>
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d00a      	beq.n	800d0e4 <_raise_r+0x4c>
 800d0ce:	1c59      	adds	r1, r3, #1
 800d0d0:	d103      	bne.n	800d0da <_raise_r+0x42>
 800d0d2:	2316      	movs	r3, #22
 800d0d4:	6003      	str	r3, [r0, #0]
 800d0d6:	2001      	movs	r0, #1
 800d0d8:	e7e7      	b.n	800d0aa <_raise_r+0x12>
 800d0da:	2400      	movs	r4, #0
 800d0dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	4798      	blx	r3
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	e7e0      	b.n	800d0aa <_raise_r+0x12>

0800d0e8 <raise>:
 800d0e8:	4b02      	ldr	r3, [pc, #8]	; (800d0f4 <raise+0xc>)
 800d0ea:	4601      	mov	r1, r0
 800d0ec:	6818      	ldr	r0, [r3, #0]
 800d0ee:	f7ff bfd3 	b.w	800d098 <_raise_r>
 800d0f2:	bf00      	nop
 800d0f4:	2000004c 	.word	0x2000004c

0800d0f8 <_kill_r>:
 800d0f8:	b538      	push	{r3, r4, r5, lr}
 800d0fa:	4d07      	ldr	r5, [pc, #28]	; (800d118 <_kill_r+0x20>)
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	4604      	mov	r4, r0
 800d100:	4608      	mov	r0, r1
 800d102:	4611      	mov	r1, r2
 800d104:	602b      	str	r3, [r5, #0]
 800d106:	f7f6 f8c1 	bl	800328c <_kill>
 800d10a:	1c43      	adds	r3, r0, #1
 800d10c:	d102      	bne.n	800d114 <_kill_r+0x1c>
 800d10e:	682b      	ldr	r3, [r5, #0]
 800d110:	b103      	cbz	r3, 800d114 <_kill_r+0x1c>
 800d112:	6023      	str	r3, [r4, #0]
 800d114:	bd38      	pop	{r3, r4, r5, pc}
 800d116:	bf00      	nop
 800d118:	20004aa8 	.word	0x20004aa8

0800d11c <_getpid_r>:
 800d11c:	f7f6 b8ae 	b.w	800327c <_getpid>

0800d120 <ceill>:
 800d120:	f000 b802 	b.w	800d128 <ceil>
 800d124:	0000      	movs	r0, r0
	...

0800d128 <ceil>:
 800d128:	ec51 0b10 	vmov	r0, r1, d0
 800d12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d130:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d134:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d138:	2e13      	cmp	r6, #19
 800d13a:	ee10 5a10 	vmov	r5, s0
 800d13e:	ee10 8a10 	vmov	r8, s0
 800d142:	460c      	mov	r4, r1
 800d144:	dc30      	bgt.n	800d1a8 <ceil+0x80>
 800d146:	2e00      	cmp	r6, #0
 800d148:	da12      	bge.n	800d170 <ceil+0x48>
 800d14a:	a335      	add	r3, pc, #212	; (adr r3, 800d220 <ceil+0xf8>)
 800d14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d150:	f7f3 f89c 	bl	800028c <__adddf3>
 800d154:	2200      	movs	r2, #0
 800d156:	2300      	movs	r3, #0
 800d158:	f7f3 fcde 	bl	8000b18 <__aeabi_dcmpgt>
 800d15c:	b128      	cbz	r0, 800d16a <ceil+0x42>
 800d15e:	2c00      	cmp	r4, #0
 800d160:	db55      	blt.n	800d20e <ceil+0xe6>
 800d162:	432c      	orrs	r4, r5
 800d164:	d057      	beq.n	800d216 <ceil+0xee>
 800d166:	4c30      	ldr	r4, [pc, #192]	; (800d228 <ceil+0x100>)
 800d168:	2500      	movs	r5, #0
 800d16a:	4621      	mov	r1, r4
 800d16c:	4628      	mov	r0, r5
 800d16e:	e025      	b.n	800d1bc <ceil+0x94>
 800d170:	4f2e      	ldr	r7, [pc, #184]	; (800d22c <ceil+0x104>)
 800d172:	4137      	asrs	r7, r6
 800d174:	ea01 0307 	and.w	r3, r1, r7
 800d178:	4303      	orrs	r3, r0
 800d17a:	d01f      	beq.n	800d1bc <ceil+0x94>
 800d17c:	a328      	add	r3, pc, #160	; (adr r3, 800d220 <ceil+0xf8>)
 800d17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d182:	f7f3 f883 	bl	800028c <__adddf3>
 800d186:	2200      	movs	r2, #0
 800d188:	2300      	movs	r3, #0
 800d18a:	f7f3 fcc5 	bl	8000b18 <__aeabi_dcmpgt>
 800d18e:	2800      	cmp	r0, #0
 800d190:	d0eb      	beq.n	800d16a <ceil+0x42>
 800d192:	2c00      	cmp	r4, #0
 800d194:	bfc2      	ittt	gt
 800d196:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800d19a:	fa43 f606 	asrgt.w	r6, r3, r6
 800d19e:	19a4      	addgt	r4, r4, r6
 800d1a0:	ea24 0407 	bic.w	r4, r4, r7
 800d1a4:	2500      	movs	r5, #0
 800d1a6:	e7e0      	b.n	800d16a <ceil+0x42>
 800d1a8:	2e33      	cmp	r6, #51	; 0x33
 800d1aa:	dd0b      	ble.n	800d1c4 <ceil+0x9c>
 800d1ac:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d1b0:	d104      	bne.n	800d1bc <ceil+0x94>
 800d1b2:	ee10 2a10 	vmov	r2, s0
 800d1b6:	460b      	mov	r3, r1
 800d1b8:	f7f3 f868 	bl	800028c <__adddf3>
 800d1bc:	ec41 0b10 	vmov	d0, r0, r1
 800d1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1c4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d1c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1cc:	fa23 f707 	lsr.w	r7, r3, r7
 800d1d0:	4207      	tst	r7, r0
 800d1d2:	d0f3      	beq.n	800d1bc <ceil+0x94>
 800d1d4:	a312      	add	r3, pc, #72	; (adr r3, 800d220 <ceil+0xf8>)
 800d1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1da:	f7f3 f857 	bl	800028c <__adddf3>
 800d1de:	2200      	movs	r2, #0
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	f7f3 fc99 	bl	8000b18 <__aeabi_dcmpgt>
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	d0bf      	beq.n	800d16a <ceil+0x42>
 800d1ea:	2c00      	cmp	r4, #0
 800d1ec:	dd02      	ble.n	800d1f4 <ceil+0xcc>
 800d1ee:	2e14      	cmp	r6, #20
 800d1f0:	d103      	bne.n	800d1fa <ceil+0xd2>
 800d1f2:	3401      	adds	r4, #1
 800d1f4:	ea25 0507 	bic.w	r5, r5, r7
 800d1f8:	e7b7      	b.n	800d16a <ceil+0x42>
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d200:	fa03 f606 	lsl.w	r6, r3, r6
 800d204:	4435      	add	r5, r6
 800d206:	4545      	cmp	r5, r8
 800d208:	bf38      	it	cc
 800d20a:	18e4      	addcc	r4, r4, r3
 800d20c:	e7f2      	b.n	800d1f4 <ceil+0xcc>
 800d20e:	2500      	movs	r5, #0
 800d210:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d214:	e7a9      	b.n	800d16a <ceil+0x42>
 800d216:	4625      	mov	r5, r4
 800d218:	e7a7      	b.n	800d16a <ceil+0x42>
 800d21a:	bf00      	nop
 800d21c:	f3af 8000 	nop.w
 800d220:	8800759c 	.word	0x8800759c
 800d224:	7e37e43c 	.word	0x7e37e43c
 800d228:	3ff00000 	.word	0x3ff00000
 800d22c:	000fffff 	.word	0x000fffff

0800d230 <round>:
 800d230:	ec51 0b10 	vmov	r0, r1, d0
 800d234:	b570      	push	{r4, r5, r6, lr}
 800d236:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d23a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d23e:	2c13      	cmp	r4, #19
 800d240:	ee10 2a10 	vmov	r2, s0
 800d244:	460b      	mov	r3, r1
 800d246:	dc19      	bgt.n	800d27c <round+0x4c>
 800d248:	2c00      	cmp	r4, #0
 800d24a:	da09      	bge.n	800d260 <round+0x30>
 800d24c:	3401      	adds	r4, #1
 800d24e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d252:	d103      	bne.n	800d25c <round+0x2c>
 800d254:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d258:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d25c:	2100      	movs	r1, #0
 800d25e:	e028      	b.n	800d2b2 <round+0x82>
 800d260:	4d15      	ldr	r5, [pc, #84]	; (800d2b8 <round+0x88>)
 800d262:	4125      	asrs	r5, r4
 800d264:	ea01 0605 	and.w	r6, r1, r5
 800d268:	4332      	orrs	r2, r6
 800d26a:	d00e      	beq.n	800d28a <round+0x5a>
 800d26c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d270:	fa42 f404 	asr.w	r4, r2, r4
 800d274:	4423      	add	r3, r4
 800d276:	ea23 0305 	bic.w	r3, r3, r5
 800d27a:	e7ef      	b.n	800d25c <round+0x2c>
 800d27c:	2c33      	cmp	r4, #51	; 0x33
 800d27e:	dd07      	ble.n	800d290 <round+0x60>
 800d280:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d284:	d101      	bne.n	800d28a <round+0x5a>
 800d286:	f7f3 f801 	bl	800028c <__adddf3>
 800d28a:	ec41 0b10 	vmov	d0, r0, r1
 800d28e:	bd70      	pop	{r4, r5, r6, pc}
 800d290:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d294:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d298:	40f5      	lsrs	r5, r6
 800d29a:	4228      	tst	r0, r5
 800d29c:	d0f5      	beq.n	800d28a <round+0x5a>
 800d29e:	2101      	movs	r1, #1
 800d2a0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d2a4:	fa01 f404 	lsl.w	r4, r1, r4
 800d2a8:	1912      	adds	r2, r2, r4
 800d2aa:	bf28      	it	cs
 800d2ac:	185b      	addcs	r3, r3, r1
 800d2ae:	ea22 0105 	bic.w	r1, r2, r5
 800d2b2:	4608      	mov	r0, r1
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	e7e8      	b.n	800d28a <round+0x5a>
 800d2b8:	000fffff 	.word	0x000fffff
 800d2bc:	00000000 	.word	0x00000000

0800d2c0 <sin>:
 800d2c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2c2:	ec53 2b10 	vmov	r2, r3, d0
 800d2c6:	4826      	ldr	r0, [pc, #152]	; (800d360 <sin+0xa0>)
 800d2c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d2cc:	4281      	cmp	r1, r0
 800d2ce:	dc07      	bgt.n	800d2e0 <sin+0x20>
 800d2d0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d358 <sin+0x98>
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	f001 faeb 	bl	800e8b0 <__kernel_sin>
 800d2da:	ec51 0b10 	vmov	r0, r1, d0
 800d2de:	e007      	b.n	800d2f0 <sin+0x30>
 800d2e0:	4820      	ldr	r0, [pc, #128]	; (800d364 <sin+0xa4>)
 800d2e2:	4281      	cmp	r1, r0
 800d2e4:	dd09      	ble.n	800d2fa <sin+0x3a>
 800d2e6:	ee10 0a10 	vmov	r0, s0
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	f7f2 ffcc 	bl	8000288 <__aeabi_dsub>
 800d2f0:	ec41 0b10 	vmov	d0, r0, r1
 800d2f4:	b005      	add	sp, #20
 800d2f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2fa:	4668      	mov	r0, sp
 800d2fc:	f000 fc10 	bl	800db20 <__ieee754_rem_pio2>
 800d300:	f000 0003 	and.w	r0, r0, #3
 800d304:	2801      	cmp	r0, #1
 800d306:	d008      	beq.n	800d31a <sin+0x5a>
 800d308:	2802      	cmp	r0, #2
 800d30a:	d00d      	beq.n	800d328 <sin+0x68>
 800d30c:	b9d0      	cbnz	r0, 800d344 <sin+0x84>
 800d30e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d312:	ed9d 0b00 	vldr	d0, [sp]
 800d316:	2001      	movs	r0, #1
 800d318:	e7dd      	b.n	800d2d6 <sin+0x16>
 800d31a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d31e:	ed9d 0b00 	vldr	d0, [sp]
 800d322:	f000 febd 	bl	800e0a0 <__kernel_cos>
 800d326:	e7d8      	b.n	800d2da <sin+0x1a>
 800d328:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d32c:	ed9d 0b00 	vldr	d0, [sp]
 800d330:	2001      	movs	r0, #1
 800d332:	f001 fabd 	bl	800e8b0 <__kernel_sin>
 800d336:	ec53 2b10 	vmov	r2, r3, d0
 800d33a:	ee10 0a10 	vmov	r0, s0
 800d33e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d342:	e7d5      	b.n	800d2f0 <sin+0x30>
 800d344:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d348:	ed9d 0b00 	vldr	d0, [sp]
 800d34c:	f000 fea8 	bl	800e0a0 <__kernel_cos>
 800d350:	e7f1      	b.n	800d336 <sin+0x76>
 800d352:	bf00      	nop
 800d354:	f3af 8000 	nop.w
	...
 800d360:	3fe921fb 	.word	0x3fe921fb
 800d364:	7fefffff 	.word	0x7fefffff

0800d368 <atan2>:
 800d368:	f000 b8c6 	b.w	800d4f8 <__ieee754_atan2>
 800d36c:	0000      	movs	r0, r0
	...

0800d370 <log>:
 800d370:	b538      	push	{r3, r4, r5, lr}
 800d372:	ed2d 8b02 	vpush	{d8}
 800d376:	ec55 4b10 	vmov	r4, r5, d0
 800d37a:	f000 f989 	bl	800d690 <__ieee754_log>
 800d37e:	4b1e      	ldr	r3, [pc, #120]	; (800d3f8 <log+0x88>)
 800d380:	eeb0 8a40 	vmov.f32	s16, s0
 800d384:	eef0 8a60 	vmov.f32	s17, s1
 800d388:	f993 3000 	ldrsb.w	r3, [r3]
 800d38c:	3301      	adds	r3, #1
 800d38e:	d01a      	beq.n	800d3c6 <log+0x56>
 800d390:	4622      	mov	r2, r4
 800d392:	462b      	mov	r3, r5
 800d394:	4620      	mov	r0, r4
 800d396:	4629      	mov	r1, r5
 800d398:	f7f3 fbc8 	bl	8000b2c <__aeabi_dcmpun>
 800d39c:	b998      	cbnz	r0, 800d3c6 <log+0x56>
 800d39e:	2200      	movs	r2, #0
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	4629      	mov	r1, r5
 800d3a6:	f7f3 fbb7 	bl	8000b18 <__aeabi_dcmpgt>
 800d3aa:	b960      	cbnz	r0, 800d3c6 <log+0x56>
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	4629      	mov	r1, r5
 800d3b4:	f7f3 fb88 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3b8:	b160      	cbz	r0, 800d3d4 <log+0x64>
 800d3ba:	f7fc ffe9 	bl	800a390 <__errno>
 800d3be:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800d3f0 <log+0x80>
 800d3c2:	2322      	movs	r3, #34	; 0x22
 800d3c4:	6003      	str	r3, [r0, #0]
 800d3c6:	eeb0 0a48 	vmov.f32	s0, s16
 800d3ca:	eef0 0a68 	vmov.f32	s1, s17
 800d3ce:	ecbd 8b02 	vpop	{d8}
 800d3d2:	bd38      	pop	{r3, r4, r5, pc}
 800d3d4:	f7fc ffdc 	bl	800a390 <__errno>
 800d3d8:	ecbd 8b02 	vpop	{d8}
 800d3dc:	2321      	movs	r3, #33	; 0x21
 800d3de:	6003      	str	r3, [r0, #0]
 800d3e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3e4:	4805      	ldr	r0, [pc, #20]	; (800d3fc <log+0x8c>)
 800d3e6:	f001 bd4f 	b.w	800ee88 <nan>
 800d3ea:	bf00      	nop
 800d3ec:	f3af 8000 	nop.w
 800d3f0:	00000000 	.word	0x00000000
 800d3f4:	fff00000 	.word	0xfff00000
 800d3f8:	2000021c 	.word	0x2000021c
 800d3fc:	080113f0 	.word	0x080113f0

0800d400 <log10>:
 800d400:	b538      	push	{r3, r4, r5, lr}
 800d402:	ed2d 8b02 	vpush	{d8}
 800d406:	ec55 4b10 	vmov	r4, r5, d0
 800d40a:	f000 fafd 	bl	800da08 <__ieee754_log10>
 800d40e:	4b1e      	ldr	r3, [pc, #120]	; (800d488 <log10+0x88>)
 800d410:	eeb0 8a40 	vmov.f32	s16, s0
 800d414:	eef0 8a60 	vmov.f32	s17, s1
 800d418:	f993 3000 	ldrsb.w	r3, [r3]
 800d41c:	3301      	adds	r3, #1
 800d41e:	d01a      	beq.n	800d456 <log10+0x56>
 800d420:	4622      	mov	r2, r4
 800d422:	462b      	mov	r3, r5
 800d424:	4620      	mov	r0, r4
 800d426:	4629      	mov	r1, r5
 800d428:	f7f3 fb80 	bl	8000b2c <__aeabi_dcmpun>
 800d42c:	b998      	cbnz	r0, 800d456 <log10+0x56>
 800d42e:	2200      	movs	r2, #0
 800d430:	2300      	movs	r3, #0
 800d432:	4620      	mov	r0, r4
 800d434:	4629      	mov	r1, r5
 800d436:	f7f3 fb5b 	bl	8000af0 <__aeabi_dcmple>
 800d43a:	b160      	cbz	r0, 800d456 <log10+0x56>
 800d43c:	2200      	movs	r2, #0
 800d43e:	2300      	movs	r3, #0
 800d440:	4620      	mov	r0, r4
 800d442:	4629      	mov	r1, r5
 800d444:	f7f3 fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 800d448:	b160      	cbz	r0, 800d464 <log10+0x64>
 800d44a:	f7fc ffa1 	bl	800a390 <__errno>
 800d44e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800d480 <log10+0x80>
 800d452:	2322      	movs	r3, #34	; 0x22
 800d454:	6003      	str	r3, [r0, #0]
 800d456:	eeb0 0a48 	vmov.f32	s0, s16
 800d45a:	eef0 0a68 	vmov.f32	s1, s17
 800d45e:	ecbd 8b02 	vpop	{d8}
 800d462:	bd38      	pop	{r3, r4, r5, pc}
 800d464:	f7fc ff94 	bl	800a390 <__errno>
 800d468:	ecbd 8b02 	vpop	{d8}
 800d46c:	2321      	movs	r3, #33	; 0x21
 800d46e:	6003      	str	r3, [r0, #0]
 800d470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d474:	4805      	ldr	r0, [pc, #20]	; (800d48c <log10+0x8c>)
 800d476:	f001 bd07 	b.w	800ee88 <nan>
 800d47a:	bf00      	nop
 800d47c:	f3af 8000 	nop.w
 800d480:	00000000 	.word	0x00000000
 800d484:	fff00000 	.word	0xfff00000
 800d488:	2000021c 	.word	0x2000021c
 800d48c:	080113f0 	.word	0x080113f0

0800d490 <sqrt>:
 800d490:	b538      	push	{r3, r4, r5, lr}
 800d492:	ed2d 8b02 	vpush	{d8}
 800d496:	ec55 4b10 	vmov	r4, r5, d0
 800d49a:	f000 fd4b 	bl	800df34 <__ieee754_sqrt>
 800d49e:	4b15      	ldr	r3, [pc, #84]	; (800d4f4 <sqrt+0x64>)
 800d4a0:	eeb0 8a40 	vmov.f32	s16, s0
 800d4a4:	eef0 8a60 	vmov.f32	s17, s1
 800d4a8:	f993 3000 	ldrsb.w	r3, [r3]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	d019      	beq.n	800d4e4 <sqrt+0x54>
 800d4b0:	4622      	mov	r2, r4
 800d4b2:	462b      	mov	r3, r5
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	f7f3 fb38 	bl	8000b2c <__aeabi_dcmpun>
 800d4bc:	b990      	cbnz	r0, 800d4e4 <sqrt+0x54>
 800d4be:	2200      	movs	r2, #0
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	f7f3 fb09 	bl	8000adc <__aeabi_dcmplt>
 800d4ca:	b158      	cbz	r0, 800d4e4 <sqrt+0x54>
 800d4cc:	f7fc ff60 	bl	800a390 <__errno>
 800d4d0:	2321      	movs	r3, #33	; 0x21
 800d4d2:	6003      	str	r3, [r0, #0]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	4610      	mov	r0, r2
 800d4da:	4619      	mov	r1, r3
 800d4dc:	f7f3 f9b6 	bl	800084c <__aeabi_ddiv>
 800d4e0:	ec41 0b18 	vmov	d8, r0, r1
 800d4e4:	eeb0 0a48 	vmov.f32	s0, s16
 800d4e8:	eef0 0a68 	vmov.f32	s1, s17
 800d4ec:	ecbd 8b02 	vpop	{d8}
 800d4f0:	bd38      	pop	{r3, r4, r5, pc}
 800d4f2:	bf00      	nop
 800d4f4:	2000021c 	.word	0x2000021c

0800d4f8 <__ieee754_atan2>:
 800d4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4fc:	ec57 6b11 	vmov	r6, r7, d1
 800d500:	4273      	negs	r3, r6
 800d502:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d688 <__ieee754_atan2+0x190>
 800d506:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d50a:	4333      	orrs	r3, r6
 800d50c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d510:	4573      	cmp	r3, lr
 800d512:	ec51 0b10 	vmov	r0, r1, d0
 800d516:	ee11 8a10 	vmov	r8, s2
 800d51a:	d80a      	bhi.n	800d532 <__ieee754_atan2+0x3a>
 800d51c:	4244      	negs	r4, r0
 800d51e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d522:	4304      	orrs	r4, r0
 800d524:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d528:	4574      	cmp	r4, lr
 800d52a:	ee10 9a10 	vmov	r9, s0
 800d52e:	468c      	mov	ip, r1
 800d530:	d907      	bls.n	800d542 <__ieee754_atan2+0x4a>
 800d532:	4632      	mov	r2, r6
 800d534:	463b      	mov	r3, r7
 800d536:	f7f2 fea9 	bl	800028c <__adddf3>
 800d53a:	ec41 0b10 	vmov	d0, r0, r1
 800d53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d542:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d546:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d54a:	4334      	orrs	r4, r6
 800d54c:	d103      	bne.n	800d556 <__ieee754_atan2+0x5e>
 800d54e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d552:	f001 ba6d 	b.w	800ea30 <atan>
 800d556:	17bc      	asrs	r4, r7, #30
 800d558:	f004 0402 	and.w	r4, r4, #2
 800d55c:	ea53 0909 	orrs.w	r9, r3, r9
 800d560:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d564:	d107      	bne.n	800d576 <__ieee754_atan2+0x7e>
 800d566:	2c02      	cmp	r4, #2
 800d568:	d060      	beq.n	800d62c <__ieee754_atan2+0x134>
 800d56a:	2c03      	cmp	r4, #3
 800d56c:	d1e5      	bne.n	800d53a <__ieee754_atan2+0x42>
 800d56e:	a142      	add	r1, pc, #264	; (adr r1, 800d678 <__ieee754_atan2+0x180>)
 800d570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d574:	e7e1      	b.n	800d53a <__ieee754_atan2+0x42>
 800d576:	ea52 0808 	orrs.w	r8, r2, r8
 800d57a:	d106      	bne.n	800d58a <__ieee754_atan2+0x92>
 800d57c:	f1bc 0f00 	cmp.w	ip, #0
 800d580:	da5f      	bge.n	800d642 <__ieee754_atan2+0x14a>
 800d582:	a13f      	add	r1, pc, #252	; (adr r1, 800d680 <__ieee754_atan2+0x188>)
 800d584:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d588:	e7d7      	b.n	800d53a <__ieee754_atan2+0x42>
 800d58a:	4572      	cmp	r2, lr
 800d58c:	d10f      	bne.n	800d5ae <__ieee754_atan2+0xb6>
 800d58e:	4293      	cmp	r3, r2
 800d590:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d594:	d107      	bne.n	800d5a6 <__ieee754_atan2+0xae>
 800d596:	2c02      	cmp	r4, #2
 800d598:	d84c      	bhi.n	800d634 <__ieee754_atan2+0x13c>
 800d59a:	4b35      	ldr	r3, [pc, #212]	; (800d670 <__ieee754_atan2+0x178>)
 800d59c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d5a0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d5a4:	e7c9      	b.n	800d53a <__ieee754_atan2+0x42>
 800d5a6:	2c02      	cmp	r4, #2
 800d5a8:	d848      	bhi.n	800d63c <__ieee754_atan2+0x144>
 800d5aa:	4b32      	ldr	r3, [pc, #200]	; (800d674 <__ieee754_atan2+0x17c>)
 800d5ac:	e7f6      	b.n	800d59c <__ieee754_atan2+0xa4>
 800d5ae:	4573      	cmp	r3, lr
 800d5b0:	d0e4      	beq.n	800d57c <__ieee754_atan2+0x84>
 800d5b2:	1a9b      	subs	r3, r3, r2
 800d5b4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d5b8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d5bc:	da1e      	bge.n	800d5fc <__ieee754_atan2+0x104>
 800d5be:	2f00      	cmp	r7, #0
 800d5c0:	da01      	bge.n	800d5c6 <__ieee754_atan2+0xce>
 800d5c2:	323c      	adds	r2, #60	; 0x3c
 800d5c4:	db1e      	blt.n	800d604 <__ieee754_atan2+0x10c>
 800d5c6:	4632      	mov	r2, r6
 800d5c8:	463b      	mov	r3, r7
 800d5ca:	f7f3 f93f 	bl	800084c <__aeabi_ddiv>
 800d5ce:	ec41 0b10 	vmov	d0, r0, r1
 800d5d2:	f001 fbcd 	bl	800ed70 <fabs>
 800d5d6:	f001 fa2b 	bl	800ea30 <atan>
 800d5da:	ec51 0b10 	vmov	r0, r1, d0
 800d5de:	2c01      	cmp	r4, #1
 800d5e0:	d013      	beq.n	800d60a <__ieee754_atan2+0x112>
 800d5e2:	2c02      	cmp	r4, #2
 800d5e4:	d015      	beq.n	800d612 <__ieee754_atan2+0x11a>
 800d5e6:	2c00      	cmp	r4, #0
 800d5e8:	d0a7      	beq.n	800d53a <__ieee754_atan2+0x42>
 800d5ea:	a319      	add	r3, pc, #100	; (adr r3, 800d650 <__ieee754_atan2+0x158>)
 800d5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f0:	f7f2 fe4a 	bl	8000288 <__aeabi_dsub>
 800d5f4:	a318      	add	r3, pc, #96	; (adr r3, 800d658 <__ieee754_atan2+0x160>)
 800d5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fa:	e014      	b.n	800d626 <__ieee754_atan2+0x12e>
 800d5fc:	a118      	add	r1, pc, #96	; (adr r1, 800d660 <__ieee754_atan2+0x168>)
 800d5fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d602:	e7ec      	b.n	800d5de <__ieee754_atan2+0xe6>
 800d604:	2000      	movs	r0, #0
 800d606:	2100      	movs	r1, #0
 800d608:	e7e9      	b.n	800d5de <__ieee754_atan2+0xe6>
 800d60a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d60e:	4619      	mov	r1, r3
 800d610:	e793      	b.n	800d53a <__ieee754_atan2+0x42>
 800d612:	a30f      	add	r3, pc, #60	; (adr r3, 800d650 <__ieee754_atan2+0x158>)
 800d614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d618:	f7f2 fe36 	bl	8000288 <__aeabi_dsub>
 800d61c:	4602      	mov	r2, r0
 800d61e:	460b      	mov	r3, r1
 800d620:	a10d      	add	r1, pc, #52	; (adr r1, 800d658 <__ieee754_atan2+0x160>)
 800d622:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d626:	f7f2 fe2f 	bl	8000288 <__aeabi_dsub>
 800d62a:	e786      	b.n	800d53a <__ieee754_atan2+0x42>
 800d62c:	a10a      	add	r1, pc, #40	; (adr r1, 800d658 <__ieee754_atan2+0x160>)
 800d62e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d632:	e782      	b.n	800d53a <__ieee754_atan2+0x42>
 800d634:	a10c      	add	r1, pc, #48	; (adr r1, 800d668 <__ieee754_atan2+0x170>)
 800d636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d63a:	e77e      	b.n	800d53a <__ieee754_atan2+0x42>
 800d63c:	2000      	movs	r0, #0
 800d63e:	2100      	movs	r1, #0
 800d640:	e77b      	b.n	800d53a <__ieee754_atan2+0x42>
 800d642:	a107      	add	r1, pc, #28	; (adr r1, 800d660 <__ieee754_atan2+0x168>)
 800d644:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d648:	e777      	b.n	800d53a <__ieee754_atan2+0x42>
 800d64a:	bf00      	nop
 800d64c:	f3af 8000 	nop.w
 800d650:	33145c07 	.word	0x33145c07
 800d654:	3ca1a626 	.word	0x3ca1a626
 800d658:	54442d18 	.word	0x54442d18
 800d65c:	400921fb 	.word	0x400921fb
 800d660:	54442d18 	.word	0x54442d18
 800d664:	3ff921fb 	.word	0x3ff921fb
 800d668:	54442d18 	.word	0x54442d18
 800d66c:	3fe921fb 	.word	0x3fe921fb
 800d670:	08011500 	.word	0x08011500
 800d674:	08011518 	.word	0x08011518
 800d678:	54442d18 	.word	0x54442d18
 800d67c:	c00921fb 	.word	0xc00921fb
 800d680:	54442d18 	.word	0x54442d18
 800d684:	bff921fb 	.word	0xbff921fb
 800d688:	7ff00000 	.word	0x7ff00000
 800d68c:	00000000 	.word	0x00000000

0800d690 <__ieee754_log>:
 800d690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d694:	ec51 0b10 	vmov	r0, r1, d0
 800d698:	ed2d 8b04 	vpush	{d8-d9}
 800d69c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d6a0:	b083      	sub	sp, #12
 800d6a2:	460d      	mov	r5, r1
 800d6a4:	da29      	bge.n	800d6fa <__ieee754_log+0x6a>
 800d6a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d6aa:	4303      	orrs	r3, r0
 800d6ac:	ee10 2a10 	vmov	r2, s0
 800d6b0:	d10c      	bne.n	800d6cc <__ieee754_log+0x3c>
 800d6b2:	49cf      	ldr	r1, [pc, #828]	; (800d9f0 <__ieee754_log+0x360>)
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	f7f3 f8c7 	bl	800084c <__aeabi_ddiv>
 800d6be:	ec41 0b10 	vmov	d0, r0, r1
 800d6c2:	b003      	add	sp, #12
 800d6c4:	ecbd 8b04 	vpop	{d8-d9}
 800d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6cc:	2900      	cmp	r1, #0
 800d6ce:	da05      	bge.n	800d6dc <__ieee754_log+0x4c>
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	f7f2 fdd9 	bl	8000288 <__aeabi_dsub>
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	2300      	movs	r3, #0
 800d6da:	e7ee      	b.n	800d6ba <__ieee754_log+0x2a>
 800d6dc:	4bc5      	ldr	r3, [pc, #788]	; (800d9f4 <__ieee754_log+0x364>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f7f2 ff8a 	bl	80005f8 <__aeabi_dmul>
 800d6e4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800d6e8:	460d      	mov	r5, r1
 800d6ea:	4ac3      	ldr	r2, [pc, #780]	; (800d9f8 <__ieee754_log+0x368>)
 800d6ec:	4295      	cmp	r5, r2
 800d6ee:	dd06      	ble.n	800d6fe <__ieee754_log+0x6e>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	f7f2 fdca 	bl	800028c <__adddf3>
 800d6f8:	e7e1      	b.n	800d6be <__ieee754_log+0x2e>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	e7f5      	b.n	800d6ea <__ieee754_log+0x5a>
 800d6fe:	152c      	asrs	r4, r5, #20
 800d700:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d704:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d708:	441c      	add	r4, r3
 800d70a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800d70e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800d712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d716:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800d71a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800d71e:	ea42 0105 	orr.w	r1, r2, r5
 800d722:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800d726:	2200      	movs	r2, #0
 800d728:	4bb4      	ldr	r3, [pc, #720]	; (800d9fc <__ieee754_log+0x36c>)
 800d72a:	f7f2 fdad 	bl	8000288 <__aeabi_dsub>
 800d72e:	1cab      	adds	r3, r5, #2
 800d730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d734:	2b02      	cmp	r3, #2
 800d736:	4682      	mov	sl, r0
 800d738:	468b      	mov	fp, r1
 800d73a:	f04f 0200 	mov.w	r2, #0
 800d73e:	dc53      	bgt.n	800d7e8 <__ieee754_log+0x158>
 800d740:	2300      	movs	r3, #0
 800d742:	f7f3 f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d746:	b1d0      	cbz	r0, 800d77e <__ieee754_log+0xee>
 800d748:	2c00      	cmp	r4, #0
 800d74a:	f000 8122 	beq.w	800d992 <__ieee754_log+0x302>
 800d74e:	4620      	mov	r0, r4
 800d750:	f7f2 fee8 	bl	8000524 <__aeabi_i2d>
 800d754:	a390      	add	r3, pc, #576	; (adr r3, 800d998 <__ieee754_log+0x308>)
 800d756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75a:	4606      	mov	r6, r0
 800d75c:	460f      	mov	r7, r1
 800d75e:	f7f2 ff4b 	bl	80005f8 <__aeabi_dmul>
 800d762:	a38f      	add	r3, pc, #572	; (adr r3, 800d9a0 <__ieee754_log+0x310>)
 800d764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d768:	4604      	mov	r4, r0
 800d76a:	460d      	mov	r5, r1
 800d76c:	4630      	mov	r0, r6
 800d76e:	4639      	mov	r1, r7
 800d770:	f7f2 ff42 	bl	80005f8 <__aeabi_dmul>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	4620      	mov	r0, r4
 800d77a:	4629      	mov	r1, r5
 800d77c:	e7ba      	b.n	800d6f4 <__ieee754_log+0x64>
 800d77e:	a38a      	add	r3, pc, #552	; (adr r3, 800d9a8 <__ieee754_log+0x318>)
 800d780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d784:	4650      	mov	r0, sl
 800d786:	4659      	mov	r1, fp
 800d788:	f7f2 ff36 	bl	80005f8 <__aeabi_dmul>
 800d78c:	4602      	mov	r2, r0
 800d78e:	460b      	mov	r3, r1
 800d790:	2000      	movs	r0, #0
 800d792:	499b      	ldr	r1, [pc, #620]	; (800da00 <__ieee754_log+0x370>)
 800d794:	f7f2 fd78 	bl	8000288 <__aeabi_dsub>
 800d798:	4652      	mov	r2, sl
 800d79a:	4606      	mov	r6, r0
 800d79c:	460f      	mov	r7, r1
 800d79e:	465b      	mov	r3, fp
 800d7a0:	4650      	mov	r0, sl
 800d7a2:	4659      	mov	r1, fp
 800d7a4:	f7f2 ff28 	bl	80005f8 <__aeabi_dmul>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	4630      	mov	r0, r6
 800d7ae:	4639      	mov	r1, r7
 800d7b0:	f7f2 ff22 	bl	80005f8 <__aeabi_dmul>
 800d7b4:	4606      	mov	r6, r0
 800d7b6:	460f      	mov	r7, r1
 800d7b8:	b914      	cbnz	r4, 800d7c0 <__ieee754_log+0x130>
 800d7ba:	4632      	mov	r2, r6
 800d7bc:	463b      	mov	r3, r7
 800d7be:	e0a2      	b.n	800d906 <__ieee754_log+0x276>
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f7f2 feaf 	bl	8000524 <__aeabi_i2d>
 800d7c6:	a374      	add	r3, pc, #464	; (adr r3, 800d998 <__ieee754_log+0x308>)
 800d7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7cc:	4680      	mov	r8, r0
 800d7ce:	4689      	mov	r9, r1
 800d7d0:	f7f2 ff12 	bl	80005f8 <__aeabi_dmul>
 800d7d4:	a372      	add	r3, pc, #456	; (adr r3, 800d9a0 <__ieee754_log+0x310>)
 800d7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7da:	4604      	mov	r4, r0
 800d7dc:	460d      	mov	r5, r1
 800d7de:	4640      	mov	r0, r8
 800d7e0:	4649      	mov	r1, r9
 800d7e2:	f7f2 ff09 	bl	80005f8 <__aeabi_dmul>
 800d7e6:	e0a7      	b.n	800d938 <__ieee754_log+0x2a8>
 800d7e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7ec:	f7f2 fd4e 	bl	800028c <__adddf3>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	4650      	mov	r0, sl
 800d7f6:	4659      	mov	r1, fp
 800d7f8:	f7f3 f828 	bl	800084c <__aeabi_ddiv>
 800d7fc:	ec41 0b18 	vmov	d8, r0, r1
 800d800:	4620      	mov	r0, r4
 800d802:	f7f2 fe8f 	bl	8000524 <__aeabi_i2d>
 800d806:	ec53 2b18 	vmov	r2, r3, d8
 800d80a:	ec41 0b19 	vmov	d9, r0, r1
 800d80e:	ec51 0b18 	vmov	r0, r1, d8
 800d812:	f7f2 fef1 	bl	80005f8 <__aeabi_dmul>
 800d816:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800d81a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800d81e:	9301      	str	r3, [sp, #4]
 800d820:	4602      	mov	r2, r0
 800d822:	460b      	mov	r3, r1
 800d824:	4680      	mov	r8, r0
 800d826:	4689      	mov	r9, r1
 800d828:	f7f2 fee6 	bl	80005f8 <__aeabi_dmul>
 800d82c:	a360      	add	r3, pc, #384	; (adr r3, 800d9b0 <__ieee754_log+0x320>)
 800d82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d832:	4606      	mov	r6, r0
 800d834:	460f      	mov	r7, r1
 800d836:	f7f2 fedf 	bl	80005f8 <__aeabi_dmul>
 800d83a:	a35f      	add	r3, pc, #380	; (adr r3, 800d9b8 <__ieee754_log+0x328>)
 800d83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d840:	f7f2 fd24 	bl	800028c <__adddf3>
 800d844:	4632      	mov	r2, r6
 800d846:	463b      	mov	r3, r7
 800d848:	f7f2 fed6 	bl	80005f8 <__aeabi_dmul>
 800d84c:	a35c      	add	r3, pc, #368	; (adr r3, 800d9c0 <__ieee754_log+0x330>)
 800d84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d852:	f7f2 fd1b 	bl	800028c <__adddf3>
 800d856:	4632      	mov	r2, r6
 800d858:	463b      	mov	r3, r7
 800d85a:	f7f2 fecd 	bl	80005f8 <__aeabi_dmul>
 800d85e:	a35a      	add	r3, pc, #360	; (adr r3, 800d9c8 <__ieee754_log+0x338>)
 800d860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d864:	f7f2 fd12 	bl	800028c <__adddf3>
 800d868:	4642      	mov	r2, r8
 800d86a:	464b      	mov	r3, r9
 800d86c:	f7f2 fec4 	bl	80005f8 <__aeabi_dmul>
 800d870:	a357      	add	r3, pc, #348	; (adr r3, 800d9d0 <__ieee754_log+0x340>)
 800d872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d876:	4680      	mov	r8, r0
 800d878:	4689      	mov	r9, r1
 800d87a:	4630      	mov	r0, r6
 800d87c:	4639      	mov	r1, r7
 800d87e:	f7f2 febb 	bl	80005f8 <__aeabi_dmul>
 800d882:	a355      	add	r3, pc, #340	; (adr r3, 800d9d8 <__ieee754_log+0x348>)
 800d884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d888:	f7f2 fd00 	bl	800028c <__adddf3>
 800d88c:	4632      	mov	r2, r6
 800d88e:	463b      	mov	r3, r7
 800d890:	f7f2 feb2 	bl	80005f8 <__aeabi_dmul>
 800d894:	a352      	add	r3, pc, #328	; (adr r3, 800d9e0 <__ieee754_log+0x350>)
 800d896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89a:	f7f2 fcf7 	bl	800028c <__adddf3>
 800d89e:	4632      	mov	r2, r6
 800d8a0:	463b      	mov	r3, r7
 800d8a2:	f7f2 fea9 	bl	80005f8 <__aeabi_dmul>
 800d8a6:	460b      	mov	r3, r1
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	4649      	mov	r1, r9
 800d8ac:	4640      	mov	r0, r8
 800d8ae:	f7f2 fced 	bl	800028c <__adddf3>
 800d8b2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800d8b6:	9b01      	ldr	r3, [sp, #4]
 800d8b8:	3551      	adds	r5, #81	; 0x51
 800d8ba:	431d      	orrs	r5, r3
 800d8bc:	2d00      	cmp	r5, #0
 800d8be:	4680      	mov	r8, r0
 800d8c0:	4689      	mov	r9, r1
 800d8c2:	dd48      	ble.n	800d956 <__ieee754_log+0x2c6>
 800d8c4:	4b4e      	ldr	r3, [pc, #312]	; (800da00 <__ieee754_log+0x370>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	4650      	mov	r0, sl
 800d8ca:	4659      	mov	r1, fp
 800d8cc:	f7f2 fe94 	bl	80005f8 <__aeabi_dmul>
 800d8d0:	4652      	mov	r2, sl
 800d8d2:	465b      	mov	r3, fp
 800d8d4:	f7f2 fe90 	bl	80005f8 <__aeabi_dmul>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	460b      	mov	r3, r1
 800d8dc:	4606      	mov	r6, r0
 800d8de:	460f      	mov	r7, r1
 800d8e0:	4640      	mov	r0, r8
 800d8e2:	4649      	mov	r1, r9
 800d8e4:	f7f2 fcd2 	bl	800028c <__adddf3>
 800d8e8:	ec53 2b18 	vmov	r2, r3, d8
 800d8ec:	f7f2 fe84 	bl	80005f8 <__aeabi_dmul>
 800d8f0:	4680      	mov	r8, r0
 800d8f2:	4689      	mov	r9, r1
 800d8f4:	b964      	cbnz	r4, 800d910 <__ieee754_log+0x280>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	4639      	mov	r1, r7
 800d8fe:	f7f2 fcc3 	bl	8000288 <__aeabi_dsub>
 800d902:	4602      	mov	r2, r0
 800d904:	460b      	mov	r3, r1
 800d906:	4650      	mov	r0, sl
 800d908:	4659      	mov	r1, fp
 800d90a:	f7f2 fcbd 	bl	8000288 <__aeabi_dsub>
 800d90e:	e6d6      	b.n	800d6be <__ieee754_log+0x2e>
 800d910:	a321      	add	r3, pc, #132	; (adr r3, 800d998 <__ieee754_log+0x308>)
 800d912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d916:	ec51 0b19 	vmov	r0, r1, d9
 800d91a:	f7f2 fe6d 	bl	80005f8 <__aeabi_dmul>
 800d91e:	a320      	add	r3, pc, #128	; (adr r3, 800d9a0 <__ieee754_log+0x310>)
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	4604      	mov	r4, r0
 800d926:	460d      	mov	r5, r1
 800d928:	ec51 0b19 	vmov	r0, r1, d9
 800d92c:	f7f2 fe64 	bl	80005f8 <__aeabi_dmul>
 800d930:	4642      	mov	r2, r8
 800d932:	464b      	mov	r3, r9
 800d934:	f7f2 fcaa 	bl	800028c <__adddf3>
 800d938:	4602      	mov	r2, r0
 800d93a:	460b      	mov	r3, r1
 800d93c:	4630      	mov	r0, r6
 800d93e:	4639      	mov	r1, r7
 800d940:	f7f2 fca2 	bl	8000288 <__aeabi_dsub>
 800d944:	4652      	mov	r2, sl
 800d946:	465b      	mov	r3, fp
 800d948:	f7f2 fc9e 	bl	8000288 <__aeabi_dsub>
 800d94c:	4602      	mov	r2, r0
 800d94e:	460b      	mov	r3, r1
 800d950:	4620      	mov	r0, r4
 800d952:	4629      	mov	r1, r5
 800d954:	e7d9      	b.n	800d90a <__ieee754_log+0x27a>
 800d956:	4602      	mov	r2, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	4650      	mov	r0, sl
 800d95c:	4659      	mov	r1, fp
 800d95e:	f7f2 fc93 	bl	8000288 <__aeabi_dsub>
 800d962:	ec53 2b18 	vmov	r2, r3, d8
 800d966:	f7f2 fe47 	bl	80005f8 <__aeabi_dmul>
 800d96a:	4606      	mov	r6, r0
 800d96c:	460f      	mov	r7, r1
 800d96e:	2c00      	cmp	r4, #0
 800d970:	f43f af23 	beq.w	800d7ba <__ieee754_log+0x12a>
 800d974:	a308      	add	r3, pc, #32	; (adr r3, 800d998 <__ieee754_log+0x308>)
 800d976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97a:	ec51 0b19 	vmov	r0, r1, d9
 800d97e:	f7f2 fe3b 	bl	80005f8 <__aeabi_dmul>
 800d982:	a307      	add	r3, pc, #28	; (adr r3, 800d9a0 <__ieee754_log+0x310>)
 800d984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d988:	4604      	mov	r4, r0
 800d98a:	460d      	mov	r5, r1
 800d98c:	ec51 0b19 	vmov	r0, r1, d9
 800d990:	e727      	b.n	800d7e2 <__ieee754_log+0x152>
 800d992:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800d9e8 <__ieee754_log+0x358>
 800d996:	e694      	b.n	800d6c2 <__ieee754_log+0x32>
 800d998:	fee00000 	.word	0xfee00000
 800d99c:	3fe62e42 	.word	0x3fe62e42
 800d9a0:	35793c76 	.word	0x35793c76
 800d9a4:	3dea39ef 	.word	0x3dea39ef
 800d9a8:	55555555 	.word	0x55555555
 800d9ac:	3fd55555 	.word	0x3fd55555
 800d9b0:	df3e5244 	.word	0xdf3e5244
 800d9b4:	3fc2f112 	.word	0x3fc2f112
 800d9b8:	96cb03de 	.word	0x96cb03de
 800d9bc:	3fc74664 	.word	0x3fc74664
 800d9c0:	94229359 	.word	0x94229359
 800d9c4:	3fd24924 	.word	0x3fd24924
 800d9c8:	55555593 	.word	0x55555593
 800d9cc:	3fe55555 	.word	0x3fe55555
 800d9d0:	d078c69f 	.word	0xd078c69f
 800d9d4:	3fc39a09 	.word	0x3fc39a09
 800d9d8:	1d8e78af 	.word	0x1d8e78af
 800d9dc:	3fcc71c5 	.word	0x3fcc71c5
 800d9e0:	9997fa04 	.word	0x9997fa04
 800d9e4:	3fd99999 	.word	0x3fd99999
	...
 800d9f0:	c3500000 	.word	0xc3500000
 800d9f4:	43500000 	.word	0x43500000
 800d9f8:	7fefffff 	.word	0x7fefffff
 800d9fc:	3ff00000 	.word	0x3ff00000
 800da00:	3fe00000 	.word	0x3fe00000
 800da04:	00000000 	.word	0x00000000

0800da08 <__ieee754_log10>:
 800da08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da0c:	ec55 4b10 	vmov	r4, r5, d0
 800da10:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800da14:	462b      	mov	r3, r5
 800da16:	da2f      	bge.n	800da78 <__ieee754_log10+0x70>
 800da18:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800da1c:	4322      	orrs	r2, r4
 800da1e:	d109      	bne.n	800da34 <__ieee754_log10+0x2c>
 800da20:	493b      	ldr	r1, [pc, #236]	; (800db10 <__ieee754_log10+0x108>)
 800da22:	2200      	movs	r2, #0
 800da24:	2300      	movs	r3, #0
 800da26:	2000      	movs	r0, #0
 800da28:	f7f2 ff10 	bl	800084c <__aeabi_ddiv>
 800da2c:	ec41 0b10 	vmov	d0, r0, r1
 800da30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da34:	2d00      	cmp	r5, #0
 800da36:	da09      	bge.n	800da4c <__ieee754_log10+0x44>
 800da38:	ee10 2a10 	vmov	r2, s0
 800da3c:	ee10 0a10 	vmov	r0, s0
 800da40:	4629      	mov	r1, r5
 800da42:	f7f2 fc21 	bl	8000288 <__aeabi_dsub>
 800da46:	2200      	movs	r2, #0
 800da48:	2300      	movs	r3, #0
 800da4a:	e7ed      	b.n	800da28 <__ieee754_log10+0x20>
 800da4c:	4b31      	ldr	r3, [pc, #196]	; (800db14 <__ieee754_log10+0x10c>)
 800da4e:	2200      	movs	r2, #0
 800da50:	4629      	mov	r1, r5
 800da52:	ee10 0a10 	vmov	r0, s0
 800da56:	f7f2 fdcf 	bl	80005f8 <__aeabi_dmul>
 800da5a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800da5e:	4604      	mov	r4, r0
 800da60:	460d      	mov	r5, r1
 800da62:	460b      	mov	r3, r1
 800da64:	492c      	ldr	r1, [pc, #176]	; (800db18 <__ieee754_log10+0x110>)
 800da66:	428b      	cmp	r3, r1
 800da68:	dd08      	ble.n	800da7c <__ieee754_log10+0x74>
 800da6a:	4622      	mov	r2, r4
 800da6c:	462b      	mov	r3, r5
 800da6e:	4620      	mov	r0, r4
 800da70:	4629      	mov	r1, r5
 800da72:	f7f2 fc0b 	bl	800028c <__adddf3>
 800da76:	e7d9      	b.n	800da2c <__ieee754_log10+0x24>
 800da78:	2200      	movs	r2, #0
 800da7a:	e7f3      	b.n	800da64 <__ieee754_log10+0x5c>
 800da7c:	1518      	asrs	r0, r3, #20
 800da7e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800da82:	4410      	add	r0, r2
 800da84:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800da88:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800da8c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800da90:	f7f2 fd48 	bl	8000524 <__aeabi_i2d>
 800da94:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800da98:	3303      	adds	r3, #3
 800da9a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800da9e:	ec45 4b10 	vmov	d0, r4, r5
 800daa2:	4606      	mov	r6, r0
 800daa4:	460f      	mov	r7, r1
 800daa6:	f7ff fdf3 	bl	800d690 <__ieee754_log>
 800daaa:	a313      	add	r3, pc, #76	; (adr r3, 800daf8 <__ieee754_log10+0xf0>)
 800daac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab0:	4630      	mov	r0, r6
 800dab2:	4639      	mov	r1, r7
 800dab4:	ec59 8b10 	vmov	r8, r9, d0
 800dab8:	f7f2 fd9e 	bl	80005f8 <__aeabi_dmul>
 800dabc:	a310      	add	r3, pc, #64	; (adr r3, 800db00 <__ieee754_log10+0xf8>)
 800dabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac2:	4604      	mov	r4, r0
 800dac4:	460d      	mov	r5, r1
 800dac6:	4640      	mov	r0, r8
 800dac8:	4649      	mov	r1, r9
 800daca:	f7f2 fd95 	bl	80005f8 <__aeabi_dmul>
 800dace:	4602      	mov	r2, r0
 800dad0:	460b      	mov	r3, r1
 800dad2:	4620      	mov	r0, r4
 800dad4:	4629      	mov	r1, r5
 800dad6:	f7f2 fbd9 	bl	800028c <__adddf3>
 800dada:	a30b      	add	r3, pc, #44	; (adr r3, 800db08 <__ieee754_log10+0x100>)
 800dadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae0:	4604      	mov	r4, r0
 800dae2:	460d      	mov	r5, r1
 800dae4:	4630      	mov	r0, r6
 800dae6:	4639      	mov	r1, r7
 800dae8:	f7f2 fd86 	bl	80005f8 <__aeabi_dmul>
 800daec:	4602      	mov	r2, r0
 800daee:	460b      	mov	r3, r1
 800daf0:	4620      	mov	r0, r4
 800daf2:	4629      	mov	r1, r5
 800daf4:	e7bd      	b.n	800da72 <__ieee754_log10+0x6a>
 800daf6:	bf00      	nop
 800daf8:	11f12b36 	.word	0x11f12b36
 800dafc:	3d59fef3 	.word	0x3d59fef3
 800db00:	1526e50e 	.word	0x1526e50e
 800db04:	3fdbcb7b 	.word	0x3fdbcb7b
 800db08:	509f6000 	.word	0x509f6000
 800db0c:	3fd34413 	.word	0x3fd34413
 800db10:	c3500000 	.word	0xc3500000
 800db14:	43500000 	.word	0x43500000
 800db18:	7fefffff 	.word	0x7fefffff
 800db1c:	00000000 	.word	0x00000000

0800db20 <__ieee754_rem_pio2>:
 800db20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db24:	ed2d 8b02 	vpush	{d8}
 800db28:	ec55 4b10 	vmov	r4, r5, d0
 800db2c:	4bca      	ldr	r3, [pc, #808]	; (800de58 <__ieee754_rem_pio2+0x338>)
 800db2e:	b08b      	sub	sp, #44	; 0x2c
 800db30:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800db34:	4598      	cmp	r8, r3
 800db36:	4682      	mov	sl, r0
 800db38:	9502      	str	r5, [sp, #8]
 800db3a:	dc08      	bgt.n	800db4e <__ieee754_rem_pio2+0x2e>
 800db3c:	2200      	movs	r2, #0
 800db3e:	2300      	movs	r3, #0
 800db40:	ed80 0b00 	vstr	d0, [r0]
 800db44:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800db48:	f04f 0b00 	mov.w	fp, #0
 800db4c:	e028      	b.n	800dba0 <__ieee754_rem_pio2+0x80>
 800db4e:	4bc3      	ldr	r3, [pc, #780]	; (800de5c <__ieee754_rem_pio2+0x33c>)
 800db50:	4598      	cmp	r8, r3
 800db52:	dc78      	bgt.n	800dc46 <__ieee754_rem_pio2+0x126>
 800db54:	9b02      	ldr	r3, [sp, #8]
 800db56:	4ec2      	ldr	r6, [pc, #776]	; (800de60 <__ieee754_rem_pio2+0x340>)
 800db58:	2b00      	cmp	r3, #0
 800db5a:	ee10 0a10 	vmov	r0, s0
 800db5e:	a3b0      	add	r3, pc, #704	; (adr r3, 800de20 <__ieee754_rem_pio2+0x300>)
 800db60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db64:	4629      	mov	r1, r5
 800db66:	dd39      	ble.n	800dbdc <__ieee754_rem_pio2+0xbc>
 800db68:	f7f2 fb8e 	bl	8000288 <__aeabi_dsub>
 800db6c:	45b0      	cmp	r8, r6
 800db6e:	4604      	mov	r4, r0
 800db70:	460d      	mov	r5, r1
 800db72:	d01b      	beq.n	800dbac <__ieee754_rem_pio2+0x8c>
 800db74:	a3ac      	add	r3, pc, #688	; (adr r3, 800de28 <__ieee754_rem_pio2+0x308>)
 800db76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7a:	f7f2 fb85 	bl	8000288 <__aeabi_dsub>
 800db7e:	4602      	mov	r2, r0
 800db80:	460b      	mov	r3, r1
 800db82:	e9ca 2300 	strd	r2, r3, [sl]
 800db86:	4620      	mov	r0, r4
 800db88:	4629      	mov	r1, r5
 800db8a:	f7f2 fb7d 	bl	8000288 <__aeabi_dsub>
 800db8e:	a3a6      	add	r3, pc, #664	; (adr r3, 800de28 <__ieee754_rem_pio2+0x308>)
 800db90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db94:	f7f2 fb78 	bl	8000288 <__aeabi_dsub>
 800db98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800db9c:	f04f 0b01 	mov.w	fp, #1
 800dba0:	4658      	mov	r0, fp
 800dba2:	b00b      	add	sp, #44	; 0x2c
 800dba4:	ecbd 8b02 	vpop	{d8}
 800dba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbac:	a3a0      	add	r3, pc, #640	; (adr r3, 800de30 <__ieee754_rem_pio2+0x310>)
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	f7f2 fb69 	bl	8000288 <__aeabi_dsub>
 800dbb6:	a3a0      	add	r3, pc, #640	; (adr r3, 800de38 <__ieee754_rem_pio2+0x318>)
 800dbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbc:	4604      	mov	r4, r0
 800dbbe:	460d      	mov	r5, r1
 800dbc0:	f7f2 fb62 	bl	8000288 <__aeabi_dsub>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	e9ca 2300 	strd	r2, r3, [sl]
 800dbcc:	4620      	mov	r0, r4
 800dbce:	4629      	mov	r1, r5
 800dbd0:	f7f2 fb5a 	bl	8000288 <__aeabi_dsub>
 800dbd4:	a398      	add	r3, pc, #608	; (adr r3, 800de38 <__ieee754_rem_pio2+0x318>)
 800dbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbda:	e7db      	b.n	800db94 <__ieee754_rem_pio2+0x74>
 800dbdc:	f7f2 fb56 	bl	800028c <__adddf3>
 800dbe0:	45b0      	cmp	r8, r6
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	460d      	mov	r5, r1
 800dbe6:	d016      	beq.n	800dc16 <__ieee754_rem_pio2+0xf6>
 800dbe8:	a38f      	add	r3, pc, #572	; (adr r3, 800de28 <__ieee754_rem_pio2+0x308>)
 800dbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbee:	f7f2 fb4d 	bl	800028c <__adddf3>
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	e9ca 2300 	strd	r2, r3, [sl]
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	4629      	mov	r1, r5
 800dbfe:	f7f2 fb43 	bl	8000288 <__aeabi_dsub>
 800dc02:	a389      	add	r3, pc, #548	; (adr r3, 800de28 <__ieee754_rem_pio2+0x308>)
 800dc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc08:	f7f2 fb40 	bl	800028c <__adddf3>
 800dc0c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800dc10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dc14:	e7c4      	b.n	800dba0 <__ieee754_rem_pio2+0x80>
 800dc16:	a386      	add	r3, pc, #536	; (adr r3, 800de30 <__ieee754_rem_pio2+0x310>)
 800dc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1c:	f7f2 fb36 	bl	800028c <__adddf3>
 800dc20:	a385      	add	r3, pc, #532	; (adr r3, 800de38 <__ieee754_rem_pio2+0x318>)
 800dc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc26:	4604      	mov	r4, r0
 800dc28:	460d      	mov	r5, r1
 800dc2a:	f7f2 fb2f 	bl	800028c <__adddf3>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	460b      	mov	r3, r1
 800dc32:	e9ca 2300 	strd	r2, r3, [sl]
 800dc36:	4620      	mov	r0, r4
 800dc38:	4629      	mov	r1, r5
 800dc3a:	f7f2 fb25 	bl	8000288 <__aeabi_dsub>
 800dc3e:	a37e      	add	r3, pc, #504	; (adr r3, 800de38 <__ieee754_rem_pio2+0x318>)
 800dc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc44:	e7e0      	b.n	800dc08 <__ieee754_rem_pio2+0xe8>
 800dc46:	4b87      	ldr	r3, [pc, #540]	; (800de64 <__ieee754_rem_pio2+0x344>)
 800dc48:	4598      	cmp	r8, r3
 800dc4a:	f300 80d9 	bgt.w	800de00 <__ieee754_rem_pio2+0x2e0>
 800dc4e:	f001 f88f 	bl	800ed70 <fabs>
 800dc52:	ec55 4b10 	vmov	r4, r5, d0
 800dc56:	ee10 0a10 	vmov	r0, s0
 800dc5a:	a379      	add	r3, pc, #484	; (adr r3, 800de40 <__ieee754_rem_pio2+0x320>)
 800dc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc60:	4629      	mov	r1, r5
 800dc62:	f7f2 fcc9 	bl	80005f8 <__aeabi_dmul>
 800dc66:	4b80      	ldr	r3, [pc, #512]	; (800de68 <__ieee754_rem_pio2+0x348>)
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f7f2 fb0f 	bl	800028c <__adddf3>
 800dc6e:	f7f2 ff73 	bl	8000b58 <__aeabi_d2iz>
 800dc72:	4683      	mov	fp, r0
 800dc74:	f7f2 fc56 	bl	8000524 <__aeabi_i2d>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	ec43 2b18 	vmov	d8, r2, r3
 800dc80:	a367      	add	r3, pc, #412	; (adr r3, 800de20 <__ieee754_rem_pio2+0x300>)
 800dc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc86:	f7f2 fcb7 	bl	80005f8 <__aeabi_dmul>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	4620      	mov	r0, r4
 800dc90:	4629      	mov	r1, r5
 800dc92:	f7f2 faf9 	bl	8000288 <__aeabi_dsub>
 800dc96:	a364      	add	r3, pc, #400	; (adr r3, 800de28 <__ieee754_rem_pio2+0x308>)
 800dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9c:	4606      	mov	r6, r0
 800dc9e:	460f      	mov	r7, r1
 800dca0:	ec51 0b18 	vmov	r0, r1, d8
 800dca4:	f7f2 fca8 	bl	80005f8 <__aeabi_dmul>
 800dca8:	f1bb 0f1f 	cmp.w	fp, #31
 800dcac:	4604      	mov	r4, r0
 800dcae:	460d      	mov	r5, r1
 800dcb0:	dc0d      	bgt.n	800dcce <__ieee754_rem_pio2+0x1ae>
 800dcb2:	4b6e      	ldr	r3, [pc, #440]	; (800de6c <__ieee754_rem_pio2+0x34c>)
 800dcb4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800dcb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcbc:	4543      	cmp	r3, r8
 800dcbe:	d006      	beq.n	800dcce <__ieee754_rem_pio2+0x1ae>
 800dcc0:	4622      	mov	r2, r4
 800dcc2:	462b      	mov	r3, r5
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	4639      	mov	r1, r7
 800dcc8:	f7f2 fade 	bl	8000288 <__aeabi_dsub>
 800dccc:	e00f      	b.n	800dcee <__ieee754_rem_pio2+0x1ce>
 800dcce:	462b      	mov	r3, r5
 800dcd0:	4622      	mov	r2, r4
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	4639      	mov	r1, r7
 800dcd6:	f7f2 fad7 	bl	8000288 <__aeabi_dsub>
 800dcda:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dcde:	9303      	str	r3, [sp, #12]
 800dce0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dce4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800dce8:	f1b8 0f10 	cmp.w	r8, #16
 800dcec:	dc02      	bgt.n	800dcf4 <__ieee754_rem_pio2+0x1d4>
 800dcee:	e9ca 0100 	strd	r0, r1, [sl]
 800dcf2:	e039      	b.n	800dd68 <__ieee754_rem_pio2+0x248>
 800dcf4:	a34e      	add	r3, pc, #312	; (adr r3, 800de30 <__ieee754_rem_pio2+0x310>)
 800dcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfa:	ec51 0b18 	vmov	r0, r1, d8
 800dcfe:	f7f2 fc7b 	bl	80005f8 <__aeabi_dmul>
 800dd02:	4604      	mov	r4, r0
 800dd04:	460d      	mov	r5, r1
 800dd06:	4602      	mov	r2, r0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	4639      	mov	r1, r7
 800dd0e:	f7f2 fabb 	bl	8000288 <__aeabi_dsub>
 800dd12:	4602      	mov	r2, r0
 800dd14:	460b      	mov	r3, r1
 800dd16:	4680      	mov	r8, r0
 800dd18:	4689      	mov	r9, r1
 800dd1a:	4630      	mov	r0, r6
 800dd1c:	4639      	mov	r1, r7
 800dd1e:	f7f2 fab3 	bl	8000288 <__aeabi_dsub>
 800dd22:	4622      	mov	r2, r4
 800dd24:	462b      	mov	r3, r5
 800dd26:	f7f2 faaf 	bl	8000288 <__aeabi_dsub>
 800dd2a:	a343      	add	r3, pc, #268	; (adr r3, 800de38 <__ieee754_rem_pio2+0x318>)
 800dd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd30:	4604      	mov	r4, r0
 800dd32:	460d      	mov	r5, r1
 800dd34:	ec51 0b18 	vmov	r0, r1, d8
 800dd38:	f7f2 fc5e 	bl	80005f8 <__aeabi_dmul>
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	462b      	mov	r3, r5
 800dd40:	f7f2 faa2 	bl	8000288 <__aeabi_dsub>
 800dd44:	4602      	mov	r2, r0
 800dd46:	460b      	mov	r3, r1
 800dd48:	4604      	mov	r4, r0
 800dd4a:	460d      	mov	r5, r1
 800dd4c:	4640      	mov	r0, r8
 800dd4e:	4649      	mov	r1, r9
 800dd50:	f7f2 fa9a 	bl	8000288 <__aeabi_dsub>
 800dd54:	9a03      	ldr	r2, [sp, #12]
 800dd56:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dd5a:	1ad3      	subs	r3, r2, r3
 800dd5c:	2b31      	cmp	r3, #49	; 0x31
 800dd5e:	dc24      	bgt.n	800ddaa <__ieee754_rem_pio2+0x28a>
 800dd60:	e9ca 0100 	strd	r0, r1, [sl]
 800dd64:	4646      	mov	r6, r8
 800dd66:	464f      	mov	r7, r9
 800dd68:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd6c:	4630      	mov	r0, r6
 800dd6e:	4642      	mov	r2, r8
 800dd70:	464b      	mov	r3, r9
 800dd72:	4639      	mov	r1, r7
 800dd74:	f7f2 fa88 	bl	8000288 <__aeabi_dsub>
 800dd78:	462b      	mov	r3, r5
 800dd7a:	4622      	mov	r2, r4
 800dd7c:	f7f2 fa84 	bl	8000288 <__aeabi_dsub>
 800dd80:	9b02      	ldr	r3, [sp, #8]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd88:	f6bf af0a 	bge.w	800dba0 <__ieee754_rem_pio2+0x80>
 800dd8c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dd90:	f8ca 3004 	str.w	r3, [sl, #4]
 800dd94:	f8ca 8000 	str.w	r8, [sl]
 800dd98:	f8ca 0008 	str.w	r0, [sl, #8]
 800dd9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dda0:	f8ca 300c 	str.w	r3, [sl, #12]
 800dda4:	f1cb 0b00 	rsb	fp, fp, #0
 800dda8:	e6fa      	b.n	800dba0 <__ieee754_rem_pio2+0x80>
 800ddaa:	a327      	add	r3, pc, #156	; (adr r3, 800de48 <__ieee754_rem_pio2+0x328>)
 800ddac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb0:	ec51 0b18 	vmov	r0, r1, d8
 800ddb4:	f7f2 fc20 	bl	80005f8 <__aeabi_dmul>
 800ddb8:	4604      	mov	r4, r0
 800ddba:	460d      	mov	r5, r1
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	4640      	mov	r0, r8
 800ddc2:	4649      	mov	r1, r9
 800ddc4:	f7f2 fa60 	bl	8000288 <__aeabi_dsub>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	460b      	mov	r3, r1
 800ddcc:	4606      	mov	r6, r0
 800ddce:	460f      	mov	r7, r1
 800ddd0:	4640      	mov	r0, r8
 800ddd2:	4649      	mov	r1, r9
 800ddd4:	f7f2 fa58 	bl	8000288 <__aeabi_dsub>
 800ddd8:	4622      	mov	r2, r4
 800ddda:	462b      	mov	r3, r5
 800dddc:	f7f2 fa54 	bl	8000288 <__aeabi_dsub>
 800dde0:	a31b      	add	r3, pc, #108	; (adr r3, 800de50 <__ieee754_rem_pio2+0x330>)
 800dde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde6:	4604      	mov	r4, r0
 800dde8:	460d      	mov	r5, r1
 800ddea:	ec51 0b18 	vmov	r0, r1, d8
 800ddee:	f7f2 fc03 	bl	80005f8 <__aeabi_dmul>
 800ddf2:	4622      	mov	r2, r4
 800ddf4:	462b      	mov	r3, r5
 800ddf6:	f7f2 fa47 	bl	8000288 <__aeabi_dsub>
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	460d      	mov	r5, r1
 800ddfe:	e75f      	b.n	800dcc0 <__ieee754_rem_pio2+0x1a0>
 800de00:	4b1b      	ldr	r3, [pc, #108]	; (800de70 <__ieee754_rem_pio2+0x350>)
 800de02:	4598      	cmp	r8, r3
 800de04:	dd36      	ble.n	800de74 <__ieee754_rem_pio2+0x354>
 800de06:	ee10 2a10 	vmov	r2, s0
 800de0a:	462b      	mov	r3, r5
 800de0c:	4620      	mov	r0, r4
 800de0e:	4629      	mov	r1, r5
 800de10:	f7f2 fa3a 	bl	8000288 <__aeabi_dsub>
 800de14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800de18:	e9ca 0100 	strd	r0, r1, [sl]
 800de1c:	e694      	b.n	800db48 <__ieee754_rem_pio2+0x28>
 800de1e:	bf00      	nop
 800de20:	54400000 	.word	0x54400000
 800de24:	3ff921fb 	.word	0x3ff921fb
 800de28:	1a626331 	.word	0x1a626331
 800de2c:	3dd0b461 	.word	0x3dd0b461
 800de30:	1a600000 	.word	0x1a600000
 800de34:	3dd0b461 	.word	0x3dd0b461
 800de38:	2e037073 	.word	0x2e037073
 800de3c:	3ba3198a 	.word	0x3ba3198a
 800de40:	6dc9c883 	.word	0x6dc9c883
 800de44:	3fe45f30 	.word	0x3fe45f30
 800de48:	2e000000 	.word	0x2e000000
 800de4c:	3ba3198a 	.word	0x3ba3198a
 800de50:	252049c1 	.word	0x252049c1
 800de54:	397b839a 	.word	0x397b839a
 800de58:	3fe921fb 	.word	0x3fe921fb
 800de5c:	4002d97b 	.word	0x4002d97b
 800de60:	3ff921fb 	.word	0x3ff921fb
 800de64:	413921fb 	.word	0x413921fb
 800de68:	3fe00000 	.word	0x3fe00000
 800de6c:	08011530 	.word	0x08011530
 800de70:	7fefffff 	.word	0x7fefffff
 800de74:	ea4f 5428 	mov.w	r4, r8, asr #20
 800de78:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800de7c:	ee10 0a10 	vmov	r0, s0
 800de80:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800de84:	ee10 6a10 	vmov	r6, s0
 800de88:	460f      	mov	r7, r1
 800de8a:	f7f2 fe65 	bl	8000b58 <__aeabi_d2iz>
 800de8e:	f7f2 fb49 	bl	8000524 <__aeabi_i2d>
 800de92:	4602      	mov	r2, r0
 800de94:	460b      	mov	r3, r1
 800de96:	4630      	mov	r0, r6
 800de98:	4639      	mov	r1, r7
 800de9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de9e:	f7f2 f9f3 	bl	8000288 <__aeabi_dsub>
 800dea2:	4b22      	ldr	r3, [pc, #136]	; (800df2c <__ieee754_rem_pio2+0x40c>)
 800dea4:	2200      	movs	r2, #0
 800dea6:	f7f2 fba7 	bl	80005f8 <__aeabi_dmul>
 800deaa:	460f      	mov	r7, r1
 800deac:	4606      	mov	r6, r0
 800deae:	f7f2 fe53 	bl	8000b58 <__aeabi_d2iz>
 800deb2:	f7f2 fb37 	bl	8000524 <__aeabi_i2d>
 800deb6:	4602      	mov	r2, r0
 800deb8:	460b      	mov	r3, r1
 800deba:	4630      	mov	r0, r6
 800debc:	4639      	mov	r1, r7
 800debe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dec2:	f7f2 f9e1 	bl	8000288 <__aeabi_dsub>
 800dec6:	4b19      	ldr	r3, [pc, #100]	; (800df2c <__ieee754_rem_pio2+0x40c>)
 800dec8:	2200      	movs	r2, #0
 800deca:	f7f2 fb95 	bl	80005f8 <__aeabi_dmul>
 800dece:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ded2:	ad04      	add	r5, sp, #16
 800ded4:	f04f 0803 	mov.w	r8, #3
 800ded8:	46a9      	mov	r9, r5
 800deda:	2600      	movs	r6, #0
 800dedc:	2700      	movs	r7, #0
 800dede:	4632      	mov	r2, r6
 800dee0:	463b      	mov	r3, r7
 800dee2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800dee6:	46c3      	mov	fp, r8
 800dee8:	3d08      	subs	r5, #8
 800deea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800deee:	f7f2 fdeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800def2:	2800      	cmp	r0, #0
 800def4:	d1f3      	bne.n	800dede <__ieee754_rem_pio2+0x3be>
 800def6:	4b0e      	ldr	r3, [pc, #56]	; (800df30 <__ieee754_rem_pio2+0x410>)
 800def8:	9301      	str	r3, [sp, #4]
 800defa:	2302      	movs	r3, #2
 800defc:	9300      	str	r3, [sp, #0]
 800defe:	4622      	mov	r2, r4
 800df00:	465b      	mov	r3, fp
 800df02:	4651      	mov	r1, sl
 800df04:	4648      	mov	r0, r9
 800df06:	f000 f993 	bl	800e230 <__kernel_rem_pio2>
 800df0a:	9b02      	ldr	r3, [sp, #8]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	4683      	mov	fp, r0
 800df10:	f6bf ae46 	bge.w	800dba0 <__ieee754_rem_pio2+0x80>
 800df14:	f8da 3004 	ldr.w	r3, [sl, #4]
 800df18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800df1c:	f8ca 3004 	str.w	r3, [sl, #4]
 800df20:	f8da 300c 	ldr.w	r3, [sl, #12]
 800df24:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800df28:	e73a      	b.n	800dda0 <__ieee754_rem_pio2+0x280>
 800df2a:	bf00      	nop
 800df2c:	41700000 	.word	0x41700000
 800df30:	080115b0 	.word	0x080115b0

0800df34 <__ieee754_sqrt>:
 800df34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df38:	ec55 4b10 	vmov	r4, r5, d0
 800df3c:	4e56      	ldr	r6, [pc, #344]	; (800e098 <__ieee754_sqrt+0x164>)
 800df3e:	43ae      	bics	r6, r5
 800df40:	ee10 0a10 	vmov	r0, s0
 800df44:	ee10 3a10 	vmov	r3, s0
 800df48:	4629      	mov	r1, r5
 800df4a:	462a      	mov	r2, r5
 800df4c:	d110      	bne.n	800df70 <__ieee754_sqrt+0x3c>
 800df4e:	ee10 2a10 	vmov	r2, s0
 800df52:	462b      	mov	r3, r5
 800df54:	f7f2 fb50 	bl	80005f8 <__aeabi_dmul>
 800df58:	4602      	mov	r2, r0
 800df5a:	460b      	mov	r3, r1
 800df5c:	4620      	mov	r0, r4
 800df5e:	4629      	mov	r1, r5
 800df60:	f7f2 f994 	bl	800028c <__adddf3>
 800df64:	4604      	mov	r4, r0
 800df66:	460d      	mov	r5, r1
 800df68:	ec45 4b10 	vmov	d0, r4, r5
 800df6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df70:	2d00      	cmp	r5, #0
 800df72:	dc10      	bgt.n	800df96 <__ieee754_sqrt+0x62>
 800df74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800df78:	4330      	orrs	r0, r6
 800df7a:	d0f5      	beq.n	800df68 <__ieee754_sqrt+0x34>
 800df7c:	b15d      	cbz	r5, 800df96 <__ieee754_sqrt+0x62>
 800df7e:	ee10 2a10 	vmov	r2, s0
 800df82:	462b      	mov	r3, r5
 800df84:	ee10 0a10 	vmov	r0, s0
 800df88:	f7f2 f97e 	bl	8000288 <__aeabi_dsub>
 800df8c:	4602      	mov	r2, r0
 800df8e:	460b      	mov	r3, r1
 800df90:	f7f2 fc5c 	bl	800084c <__aeabi_ddiv>
 800df94:	e7e6      	b.n	800df64 <__ieee754_sqrt+0x30>
 800df96:	1509      	asrs	r1, r1, #20
 800df98:	d076      	beq.n	800e088 <__ieee754_sqrt+0x154>
 800df9a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800df9e:	07ce      	lsls	r6, r1, #31
 800dfa0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800dfa4:	bf5e      	ittt	pl
 800dfa6:	0fda      	lsrpl	r2, r3, #31
 800dfa8:	005b      	lslpl	r3, r3, #1
 800dfaa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800dfae:	0fda      	lsrs	r2, r3, #31
 800dfb0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800dfb4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800dfb8:	2000      	movs	r0, #0
 800dfba:	106d      	asrs	r5, r5, #1
 800dfbc:	005b      	lsls	r3, r3, #1
 800dfbe:	f04f 0e16 	mov.w	lr, #22
 800dfc2:	4684      	mov	ip, r0
 800dfc4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dfc8:	eb0c 0401 	add.w	r4, ip, r1
 800dfcc:	4294      	cmp	r4, r2
 800dfce:	bfde      	ittt	le
 800dfd0:	1b12      	suble	r2, r2, r4
 800dfd2:	eb04 0c01 	addle.w	ip, r4, r1
 800dfd6:	1840      	addle	r0, r0, r1
 800dfd8:	0052      	lsls	r2, r2, #1
 800dfda:	f1be 0e01 	subs.w	lr, lr, #1
 800dfde:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800dfe2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dfe6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dfea:	d1ed      	bne.n	800dfc8 <__ieee754_sqrt+0x94>
 800dfec:	4671      	mov	r1, lr
 800dfee:	2720      	movs	r7, #32
 800dff0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800dff4:	4562      	cmp	r2, ip
 800dff6:	eb04 060e 	add.w	r6, r4, lr
 800dffa:	dc02      	bgt.n	800e002 <__ieee754_sqrt+0xce>
 800dffc:	d113      	bne.n	800e026 <__ieee754_sqrt+0xf2>
 800dffe:	429e      	cmp	r6, r3
 800e000:	d811      	bhi.n	800e026 <__ieee754_sqrt+0xf2>
 800e002:	2e00      	cmp	r6, #0
 800e004:	eb06 0e04 	add.w	lr, r6, r4
 800e008:	da43      	bge.n	800e092 <__ieee754_sqrt+0x15e>
 800e00a:	f1be 0f00 	cmp.w	lr, #0
 800e00e:	db40      	blt.n	800e092 <__ieee754_sqrt+0x15e>
 800e010:	f10c 0801 	add.w	r8, ip, #1
 800e014:	eba2 020c 	sub.w	r2, r2, ip
 800e018:	429e      	cmp	r6, r3
 800e01a:	bf88      	it	hi
 800e01c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800e020:	1b9b      	subs	r3, r3, r6
 800e022:	4421      	add	r1, r4
 800e024:	46c4      	mov	ip, r8
 800e026:	0052      	lsls	r2, r2, #1
 800e028:	3f01      	subs	r7, #1
 800e02a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e02e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e032:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e036:	d1dd      	bne.n	800dff4 <__ieee754_sqrt+0xc0>
 800e038:	4313      	orrs	r3, r2
 800e03a:	d006      	beq.n	800e04a <__ieee754_sqrt+0x116>
 800e03c:	1c4c      	adds	r4, r1, #1
 800e03e:	bf13      	iteet	ne
 800e040:	3101      	addne	r1, #1
 800e042:	3001      	addeq	r0, #1
 800e044:	4639      	moveq	r1, r7
 800e046:	f021 0101 	bicne.w	r1, r1, #1
 800e04a:	1043      	asrs	r3, r0, #1
 800e04c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e050:	0849      	lsrs	r1, r1, #1
 800e052:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e056:	07c2      	lsls	r2, r0, #31
 800e058:	bf48      	it	mi
 800e05a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e05e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800e062:	460c      	mov	r4, r1
 800e064:	463d      	mov	r5, r7
 800e066:	e77f      	b.n	800df68 <__ieee754_sqrt+0x34>
 800e068:	0ada      	lsrs	r2, r3, #11
 800e06a:	3815      	subs	r0, #21
 800e06c:	055b      	lsls	r3, r3, #21
 800e06e:	2a00      	cmp	r2, #0
 800e070:	d0fa      	beq.n	800e068 <__ieee754_sqrt+0x134>
 800e072:	02d7      	lsls	r7, r2, #11
 800e074:	d50a      	bpl.n	800e08c <__ieee754_sqrt+0x158>
 800e076:	f1c1 0420 	rsb	r4, r1, #32
 800e07a:	fa23 f404 	lsr.w	r4, r3, r4
 800e07e:	1e4d      	subs	r5, r1, #1
 800e080:	408b      	lsls	r3, r1
 800e082:	4322      	orrs	r2, r4
 800e084:	1b41      	subs	r1, r0, r5
 800e086:	e788      	b.n	800df9a <__ieee754_sqrt+0x66>
 800e088:	4608      	mov	r0, r1
 800e08a:	e7f0      	b.n	800e06e <__ieee754_sqrt+0x13a>
 800e08c:	0052      	lsls	r2, r2, #1
 800e08e:	3101      	adds	r1, #1
 800e090:	e7ef      	b.n	800e072 <__ieee754_sqrt+0x13e>
 800e092:	46e0      	mov	r8, ip
 800e094:	e7be      	b.n	800e014 <__ieee754_sqrt+0xe0>
 800e096:	bf00      	nop
 800e098:	7ff00000 	.word	0x7ff00000
 800e09c:	00000000 	.word	0x00000000

0800e0a0 <__kernel_cos>:
 800e0a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a4:	ec57 6b10 	vmov	r6, r7, d0
 800e0a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e0ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e0b0:	ed8d 1b00 	vstr	d1, [sp]
 800e0b4:	da07      	bge.n	800e0c6 <__kernel_cos+0x26>
 800e0b6:	ee10 0a10 	vmov	r0, s0
 800e0ba:	4639      	mov	r1, r7
 800e0bc:	f7f2 fd4c 	bl	8000b58 <__aeabi_d2iz>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	f000 8088 	beq.w	800e1d6 <__kernel_cos+0x136>
 800e0c6:	4632      	mov	r2, r6
 800e0c8:	463b      	mov	r3, r7
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	4639      	mov	r1, r7
 800e0ce:	f7f2 fa93 	bl	80005f8 <__aeabi_dmul>
 800e0d2:	4b51      	ldr	r3, [pc, #324]	; (800e218 <__kernel_cos+0x178>)
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	460d      	mov	r5, r1
 800e0da:	f7f2 fa8d 	bl	80005f8 <__aeabi_dmul>
 800e0de:	a340      	add	r3, pc, #256	; (adr r3, 800e1e0 <__kernel_cos+0x140>)
 800e0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e4:	4682      	mov	sl, r0
 800e0e6:	468b      	mov	fp, r1
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	f7f2 fa84 	bl	80005f8 <__aeabi_dmul>
 800e0f0:	a33d      	add	r3, pc, #244	; (adr r3, 800e1e8 <__kernel_cos+0x148>)
 800e0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f6:	f7f2 f8c9 	bl	800028c <__adddf3>
 800e0fa:	4622      	mov	r2, r4
 800e0fc:	462b      	mov	r3, r5
 800e0fe:	f7f2 fa7b 	bl	80005f8 <__aeabi_dmul>
 800e102:	a33b      	add	r3, pc, #236	; (adr r3, 800e1f0 <__kernel_cos+0x150>)
 800e104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e108:	f7f2 f8be 	bl	8000288 <__aeabi_dsub>
 800e10c:	4622      	mov	r2, r4
 800e10e:	462b      	mov	r3, r5
 800e110:	f7f2 fa72 	bl	80005f8 <__aeabi_dmul>
 800e114:	a338      	add	r3, pc, #224	; (adr r3, 800e1f8 <__kernel_cos+0x158>)
 800e116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11a:	f7f2 f8b7 	bl	800028c <__adddf3>
 800e11e:	4622      	mov	r2, r4
 800e120:	462b      	mov	r3, r5
 800e122:	f7f2 fa69 	bl	80005f8 <__aeabi_dmul>
 800e126:	a336      	add	r3, pc, #216	; (adr r3, 800e200 <__kernel_cos+0x160>)
 800e128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12c:	f7f2 f8ac 	bl	8000288 <__aeabi_dsub>
 800e130:	4622      	mov	r2, r4
 800e132:	462b      	mov	r3, r5
 800e134:	f7f2 fa60 	bl	80005f8 <__aeabi_dmul>
 800e138:	a333      	add	r3, pc, #204	; (adr r3, 800e208 <__kernel_cos+0x168>)
 800e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13e:	f7f2 f8a5 	bl	800028c <__adddf3>
 800e142:	4622      	mov	r2, r4
 800e144:	462b      	mov	r3, r5
 800e146:	f7f2 fa57 	bl	80005f8 <__aeabi_dmul>
 800e14a:	4622      	mov	r2, r4
 800e14c:	462b      	mov	r3, r5
 800e14e:	f7f2 fa53 	bl	80005f8 <__aeabi_dmul>
 800e152:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e156:	4604      	mov	r4, r0
 800e158:	460d      	mov	r5, r1
 800e15a:	4630      	mov	r0, r6
 800e15c:	4639      	mov	r1, r7
 800e15e:	f7f2 fa4b 	bl	80005f8 <__aeabi_dmul>
 800e162:	460b      	mov	r3, r1
 800e164:	4602      	mov	r2, r0
 800e166:	4629      	mov	r1, r5
 800e168:	4620      	mov	r0, r4
 800e16a:	f7f2 f88d 	bl	8000288 <__aeabi_dsub>
 800e16e:	4b2b      	ldr	r3, [pc, #172]	; (800e21c <__kernel_cos+0x17c>)
 800e170:	4598      	cmp	r8, r3
 800e172:	4606      	mov	r6, r0
 800e174:	460f      	mov	r7, r1
 800e176:	dc10      	bgt.n	800e19a <__kernel_cos+0xfa>
 800e178:	4602      	mov	r2, r0
 800e17a:	460b      	mov	r3, r1
 800e17c:	4650      	mov	r0, sl
 800e17e:	4659      	mov	r1, fp
 800e180:	f7f2 f882 	bl	8000288 <__aeabi_dsub>
 800e184:	460b      	mov	r3, r1
 800e186:	4926      	ldr	r1, [pc, #152]	; (800e220 <__kernel_cos+0x180>)
 800e188:	4602      	mov	r2, r0
 800e18a:	2000      	movs	r0, #0
 800e18c:	f7f2 f87c 	bl	8000288 <__aeabi_dsub>
 800e190:	ec41 0b10 	vmov	d0, r0, r1
 800e194:	b003      	add	sp, #12
 800e196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19a:	4b22      	ldr	r3, [pc, #136]	; (800e224 <__kernel_cos+0x184>)
 800e19c:	4920      	ldr	r1, [pc, #128]	; (800e220 <__kernel_cos+0x180>)
 800e19e:	4598      	cmp	r8, r3
 800e1a0:	bfcc      	ite	gt
 800e1a2:	4d21      	ldrgt	r5, [pc, #132]	; (800e228 <__kernel_cos+0x188>)
 800e1a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e1a8:	2400      	movs	r4, #0
 800e1aa:	4622      	mov	r2, r4
 800e1ac:	462b      	mov	r3, r5
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	f7f2 f86a 	bl	8000288 <__aeabi_dsub>
 800e1b4:	4622      	mov	r2, r4
 800e1b6:	4680      	mov	r8, r0
 800e1b8:	4689      	mov	r9, r1
 800e1ba:	462b      	mov	r3, r5
 800e1bc:	4650      	mov	r0, sl
 800e1be:	4659      	mov	r1, fp
 800e1c0:	f7f2 f862 	bl	8000288 <__aeabi_dsub>
 800e1c4:	4632      	mov	r2, r6
 800e1c6:	463b      	mov	r3, r7
 800e1c8:	f7f2 f85e 	bl	8000288 <__aeabi_dsub>
 800e1cc:	4602      	mov	r2, r0
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	4640      	mov	r0, r8
 800e1d2:	4649      	mov	r1, r9
 800e1d4:	e7da      	b.n	800e18c <__kernel_cos+0xec>
 800e1d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e210 <__kernel_cos+0x170>
 800e1da:	e7db      	b.n	800e194 <__kernel_cos+0xf4>
 800e1dc:	f3af 8000 	nop.w
 800e1e0:	be8838d4 	.word	0xbe8838d4
 800e1e4:	bda8fae9 	.word	0xbda8fae9
 800e1e8:	bdb4b1c4 	.word	0xbdb4b1c4
 800e1ec:	3e21ee9e 	.word	0x3e21ee9e
 800e1f0:	809c52ad 	.word	0x809c52ad
 800e1f4:	3e927e4f 	.word	0x3e927e4f
 800e1f8:	19cb1590 	.word	0x19cb1590
 800e1fc:	3efa01a0 	.word	0x3efa01a0
 800e200:	16c15177 	.word	0x16c15177
 800e204:	3f56c16c 	.word	0x3f56c16c
 800e208:	5555554c 	.word	0x5555554c
 800e20c:	3fa55555 	.word	0x3fa55555
 800e210:	00000000 	.word	0x00000000
 800e214:	3ff00000 	.word	0x3ff00000
 800e218:	3fe00000 	.word	0x3fe00000
 800e21c:	3fd33332 	.word	0x3fd33332
 800e220:	3ff00000 	.word	0x3ff00000
 800e224:	3fe90000 	.word	0x3fe90000
 800e228:	3fd20000 	.word	0x3fd20000
 800e22c:	00000000 	.word	0x00000000

0800e230 <__kernel_rem_pio2>:
 800e230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e234:	ed2d 8b02 	vpush	{d8}
 800e238:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e23c:	f112 0f14 	cmn.w	r2, #20
 800e240:	9308      	str	r3, [sp, #32]
 800e242:	9101      	str	r1, [sp, #4]
 800e244:	4bc6      	ldr	r3, [pc, #792]	; (800e560 <__kernel_rem_pio2+0x330>)
 800e246:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e248:	9009      	str	r0, [sp, #36]	; 0x24
 800e24a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e24e:	9304      	str	r3, [sp, #16]
 800e250:	9b08      	ldr	r3, [sp, #32]
 800e252:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e256:	bfa8      	it	ge
 800e258:	1ed4      	subge	r4, r2, #3
 800e25a:	9306      	str	r3, [sp, #24]
 800e25c:	bfb2      	itee	lt
 800e25e:	2400      	movlt	r4, #0
 800e260:	2318      	movge	r3, #24
 800e262:	fb94 f4f3 	sdivge	r4, r4, r3
 800e266:	f06f 0317 	mvn.w	r3, #23
 800e26a:	fb04 3303 	mla	r3, r4, r3, r3
 800e26e:	eb03 0a02 	add.w	sl, r3, r2
 800e272:	9b04      	ldr	r3, [sp, #16]
 800e274:	9a06      	ldr	r2, [sp, #24]
 800e276:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800e550 <__kernel_rem_pio2+0x320>
 800e27a:	eb03 0802 	add.w	r8, r3, r2
 800e27e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e280:	1aa7      	subs	r7, r4, r2
 800e282:	ae20      	add	r6, sp, #128	; 0x80
 800e284:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e288:	2500      	movs	r5, #0
 800e28a:	4545      	cmp	r5, r8
 800e28c:	dd18      	ble.n	800e2c0 <__kernel_rem_pio2+0x90>
 800e28e:	9b08      	ldr	r3, [sp, #32]
 800e290:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e294:	aa20      	add	r2, sp, #128	; 0x80
 800e296:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800e550 <__kernel_rem_pio2+0x320>
 800e29a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e29e:	f1c3 0301 	rsb	r3, r3, #1
 800e2a2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e2a6:	9307      	str	r3, [sp, #28]
 800e2a8:	9b07      	ldr	r3, [sp, #28]
 800e2aa:	9a04      	ldr	r2, [sp, #16]
 800e2ac:	4443      	add	r3, r8
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	db2f      	blt.n	800e312 <__kernel_rem_pio2+0xe2>
 800e2b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e2b6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e2ba:	462f      	mov	r7, r5
 800e2bc:	2600      	movs	r6, #0
 800e2be:	e01b      	b.n	800e2f8 <__kernel_rem_pio2+0xc8>
 800e2c0:	42ef      	cmn	r7, r5
 800e2c2:	d407      	bmi.n	800e2d4 <__kernel_rem_pio2+0xa4>
 800e2c4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e2c8:	f7f2 f92c 	bl	8000524 <__aeabi_i2d>
 800e2cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e2d0:	3501      	adds	r5, #1
 800e2d2:	e7da      	b.n	800e28a <__kernel_rem_pio2+0x5a>
 800e2d4:	ec51 0b18 	vmov	r0, r1, d8
 800e2d8:	e7f8      	b.n	800e2cc <__kernel_rem_pio2+0x9c>
 800e2da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2de:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e2e2:	f7f2 f989 	bl	80005f8 <__aeabi_dmul>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2ee:	f7f1 ffcd 	bl	800028c <__adddf3>
 800e2f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2f6:	3601      	adds	r6, #1
 800e2f8:	9b06      	ldr	r3, [sp, #24]
 800e2fa:	429e      	cmp	r6, r3
 800e2fc:	f1a7 0708 	sub.w	r7, r7, #8
 800e300:	ddeb      	ble.n	800e2da <__kernel_rem_pio2+0xaa>
 800e302:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e306:	3508      	adds	r5, #8
 800e308:	ecab 7b02 	vstmia	fp!, {d7}
 800e30c:	f108 0801 	add.w	r8, r8, #1
 800e310:	e7ca      	b.n	800e2a8 <__kernel_rem_pio2+0x78>
 800e312:	9b04      	ldr	r3, [sp, #16]
 800e314:	aa0c      	add	r2, sp, #48	; 0x30
 800e316:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e31a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e31c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e31e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e322:	9c04      	ldr	r4, [sp, #16]
 800e324:	930a      	str	r3, [sp, #40]	; 0x28
 800e326:	ab98      	add	r3, sp, #608	; 0x260
 800e328:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e32c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e330:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800e334:	f8cd b008 	str.w	fp, [sp, #8]
 800e338:	4625      	mov	r5, r4
 800e33a:	2d00      	cmp	r5, #0
 800e33c:	dc78      	bgt.n	800e430 <__kernel_rem_pio2+0x200>
 800e33e:	ec47 6b10 	vmov	d0, r6, r7
 800e342:	4650      	mov	r0, sl
 800e344:	f000 fda8 	bl	800ee98 <scalbn>
 800e348:	ec57 6b10 	vmov	r6, r7, d0
 800e34c:	2200      	movs	r2, #0
 800e34e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e352:	ee10 0a10 	vmov	r0, s0
 800e356:	4639      	mov	r1, r7
 800e358:	f7f2 f94e 	bl	80005f8 <__aeabi_dmul>
 800e35c:	ec41 0b10 	vmov	d0, r0, r1
 800e360:	f000 fd12 	bl	800ed88 <floor>
 800e364:	4b7f      	ldr	r3, [pc, #508]	; (800e564 <__kernel_rem_pio2+0x334>)
 800e366:	ec51 0b10 	vmov	r0, r1, d0
 800e36a:	2200      	movs	r2, #0
 800e36c:	f7f2 f944 	bl	80005f8 <__aeabi_dmul>
 800e370:	4602      	mov	r2, r0
 800e372:	460b      	mov	r3, r1
 800e374:	4630      	mov	r0, r6
 800e376:	4639      	mov	r1, r7
 800e378:	f7f1 ff86 	bl	8000288 <__aeabi_dsub>
 800e37c:	460f      	mov	r7, r1
 800e37e:	4606      	mov	r6, r0
 800e380:	f7f2 fbea 	bl	8000b58 <__aeabi_d2iz>
 800e384:	9007      	str	r0, [sp, #28]
 800e386:	f7f2 f8cd 	bl	8000524 <__aeabi_i2d>
 800e38a:	4602      	mov	r2, r0
 800e38c:	460b      	mov	r3, r1
 800e38e:	4630      	mov	r0, r6
 800e390:	4639      	mov	r1, r7
 800e392:	f7f1 ff79 	bl	8000288 <__aeabi_dsub>
 800e396:	f1ba 0f00 	cmp.w	sl, #0
 800e39a:	4606      	mov	r6, r0
 800e39c:	460f      	mov	r7, r1
 800e39e:	dd70      	ble.n	800e482 <__kernel_rem_pio2+0x252>
 800e3a0:	1e62      	subs	r2, r4, #1
 800e3a2:	ab0c      	add	r3, sp, #48	; 0x30
 800e3a4:	9d07      	ldr	r5, [sp, #28]
 800e3a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e3aa:	f1ca 0118 	rsb	r1, sl, #24
 800e3ae:	fa40 f301 	asr.w	r3, r0, r1
 800e3b2:	441d      	add	r5, r3
 800e3b4:	408b      	lsls	r3, r1
 800e3b6:	1ac0      	subs	r0, r0, r3
 800e3b8:	ab0c      	add	r3, sp, #48	; 0x30
 800e3ba:	9507      	str	r5, [sp, #28]
 800e3bc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e3c0:	f1ca 0317 	rsb	r3, sl, #23
 800e3c4:	fa40 f303 	asr.w	r3, r0, r3
 800e3c8:	9302      	str	r3, [sp, #8]
 800e3ca:	9b02      	ldr	r3, [sp, #8]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	dd66      	ble.n	800e49e <__kernel_rem_pio2+0x26e>
 800e3d0:	9b07      	ldr	r3, [sp, #28]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	9307      	str	r3, [sp, #28]
 800e3d8:	4615      	mov	r5, r2
 800e3da:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e3de:	4294      	cmp	r4, r2
 800e3e0:	f300 8099 	bgt.w	800e516 <__kernel_rem_pio2+0x2e6>
 800e3e4:	f1ba 0f00 	cmp.w	sl, #0
 800e3e8:	dd07      	ble.n	800e3fa <__kernel_rem_pio2+0x1ca>
 800e3ea:	f1ba 0f01 	cmp.w	sl, #1
 800e3ee:	f000 80a5 	beq.w	800e53c <__kernel_rem_pio2+0x30c>
 800e3f2:	f1ba 0f02 	cmp.w	sl, #2
 800e3f6:	f000 80c1 	beq.w	800e57c <__kernel_rem_pio2+0x34c>
 800e3fa:	9b02      	ldr	r3, [sp, #8]
 800e3fc:	2b02      	cmp	r3, #2
 800e3fe:	d14e      	bne.n	800e49e <__kernel_rem_pio2+0x26e>
 800e400:	4632      	mov	r2, r6
 800e402:	463b      	mov	r3, r7
 800e404:	4958      	ldr	r1, [pc, #352]	; (800e568 <__kernel_rem_pio2+0x338>)
 800e406:	2000      	movs	r0, #0
 800e408:	f7f1 ff3e 	bl	8000288 <__aeabi_dsub>
 800e40c:	4606      	mov	r6, r0
 800e40e:	460f      	mov	r7, r1
 800e410:	2d00      	cmp	r5, #0
 800e412:	d044      	beq.n	800e49e <__kernel_rem_pio2+0x26e>
 800e414:	4650      	mov	r0, sl
 800e416:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800e558 <__kernel_rem_pio2+0x328>
 800e41a:	f000 fd3d 	bl	800ee98 <scalbn>
 800e41e:	4630      	mov	r0, r6
 800e420:	4639      	mov	r1, r7
 800e422:	ec53 2b10 	vmov	r2, r3, d0
 800e426:	f7f1 ff2f 	bl	8000288 <__aeabi_dsub>
 800e42a:	4606      	mov	r6, r0
 800e42c:	460f      	mov	r7, r1
 800e42e:	e036      	b.n	800e49e <__kernel_rem_pio2+0x26e>
 800e430:	4b4e      	ldr	r3, [pc, #312]	; (800e56c <__kernel_rem_pio2+0x33c>)
 800e432:	2200      	movs	r2, #0
 800e434:	4630      	mov	r0, r6
 800e436:	4639      	mov	r1, r7
 800e438:	f7f2 f8de 	bl	80005f8 <__aeabi_dmul>
 800e43c:	f7f2 fb8c 	bl	8000b58 <__aeabi_d2iz>
 800e440:	f7f2 f870 	bl	8000524 <__aeabi_i2d>
 800e444:	4b4a      	ldr	r3, [pc, #296]	; (800e570 <__kernel_rem_pio2+0x340>)
 800e446:	2200      	movs	r2, #0
 800e448:	4680      	mov	r8, r0
 800e44a:	4689      	mov	r9, r1
 800e44c:	f7f2 f8d4 	bl	80005f8 <__aeabi_dmul>
 800e450:	4602      	mov	r2, r0
 800e452:	460b      	mov	r3, r1
 800e454:	4630      	mov	r0, r6
 800e456:	4639      	mov	r1, r7
 800e458:	f7f1 ff16 	bl	8000288 <__aeabi_dsub>
 800e45c:	f7f2 fb7c 	bl	8000b58 <__aeabi_d2iz>
 800e460:	9b02      	ldr	r3, [sp, #8]
 800e462:	f843 0b04 	str.w	r0, [r3], #4
 800e466:	3d01      	subs	r5, #1
 800e468:	9302      	str	r3, [sp, #8]
 800e46a:	ab70      	add	r3, sp, #448	; 0x1c0
 800e46c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e474:	4640      	mov	r0, r8
 800e476:	4649      	mov	r1, r9
 800e478:	f7f1 ff08 	bl	800028c <__adddf3>
 800e47c:	4606      	mov	r6, r0
 800e47e:	460f      	mov	r7, r1
 800e480:	e75b      	b.n	800e33a <__kernel_rem_pio2+0x10a>
 800e482:	d105      	bne.n	800e490 <__kernel_rem_pio2+0x260>
 800e484:	1e63      	subs	r3, r4, #1
 800e486:	aa0c      	add	r2, sp, #48	; 0x30
 800e488:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e48c:	15c3      	asrs	r3, r0, #23
 800e48e:	e79b      	b.n	800e3c8 <__kernel_rem_pio2+0x198>
 800e490:	4b38      	ldr	r3, [pc, #224]	; (800e574 <__kernel_rem_pio2+0x344>)
 800e492:	2200      	movs	r2, #0
 800e494:	f7f2 fb36 	bl	8000b04 <__aeabi_dcmpge>
 800e498:	2800      	cmp	r0, #0
 800e49a:	d139      	bne.n	800e510 <__kernel_rem_pio2+0x2e0>
 800e49c:	9002      	str	r0, [sp, #8]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	4639      	mov	r1, r7
 800e4a6:	f7f2 fb0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	f000 80b4 	beq.w	800e618 <__kernel_rem_pio2+0x3e8>
 800e4b0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800e4b4:	465b      	mov	r3, fp
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	9904      	ldr	r1, [sp, #16]
 800e4ba:	428b      	cmp	r3, r1
 800e4bc:	da65      	bge.n	800e58a <__kernel_rem_pio2+0x35a>
 800e4be:	2a00      	cmp	r2, #0
 800e4c0:	d07b      	beq.n	800e5ba <__kernel_rem_pio2+0x38a>
 800e4c2:	ab0c      	add	r3, sp, #48	; 0x30
 800e4c4:	f1aa 0a18 	sub.w	sl, sl, #24
 800e4c8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	f000 80a0 	beq.w	800e612 <__kernel_rem_pio2+0x3e2>
 800e4d2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800e558 <__kernel_rem_pio2+0x328>
 800e4d6:	4650      	mov	r0, sl
 800e4d8:	f000 fcde 	bl	800ee98 <scalbn>
 800e4dc:	4f23      	ldr	r7, [pc, #140]	; (800e56c <__kernel_rem_pio2+0x33c>)
 800e4de:	ec55 4b10 	vmov	r4, r5, d0
 800e4e2:	46d8      	mov	r8, fp
 800e4e4:	2600      	movs	r6, #0
 800e4e6:	f1b8 0f00 	cmp.w	r8, #0
 800e4ea:	f280 80cf 	bge.w	800e68c <__kernel_rem_pio2+0x45c>
 800e4ee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800e550 <__kernel_rem_pio2+0x320>
 800e4f2:	465f      	mov	r7, fp
 800e4f4:	f04f 0800 	mov.w	r8, #0
 800e4f8:	2f00      	cmp	r7, #0
 800e4fa:	f2c0 80fd 	blt.w	800e6f8 <__kernel_rem_pio2+0x4c8>
 800e4fe:	ab70      	add	r3, sp, #448	; 0x1c0
 800e500:	f8df a074 	ldr.w	sl, [pc, #116]	; 800e578 <__kernel_rem_pio2+0x348>
 800e504:	ec55 4b18 	vmov	r4, r5, d8
 800e508:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800e50c:	2600      	movs	r6, #0
 800e50e:	e0e5      	b.n	800e6dc <__kernel_rem_pio2+0x4ac>
 800e510:	2302      	movs	r3, #2
 800e512:	9302      	str	r3, [sp, #8]
 800e514:	e75c      	b.n	800e3d0 <__kernel_rem_pio2+0x1a0>
 800e516:	f8db 3000 	ldr.w	r3, [fp]
 800e51a:	b955      	cbnz	r5, 800e532 <__kernel_rem_pio2+0x302>
 800e51c:	b123      	cbz	r3, 800e528 <__kernel_rem_pio2+0x2f8>
 800e51e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e522:	f8cb 3000 	str.w	r3, [fp]
 800e526:	2301      	movs	r3, #1
 800e528:	3201      	adds	r2, #1
 800e52a:	f10b 0b04 	add.w	fp, fp, #4
 800e52e:	461d      	mov	r5, r3
 800e530:	e755      	b.n	800e3de <__kernel_rem_pio2+0x1ae>
 800e532:	1acb      	subs	r3, r1, r3
 800e534:	f8cb 3000 	str.w	r3, [fp]
 800e538:	462b      	mov	r3, r5
 800e53a:	e7f5      	b.n	800e528 <__kernel_rem_pio2+0x2f8>
 800e53c:	1e62      	subs	r2, r4, #1
 800e53e:	ab0c      	add	r3, sp, #48	; 0x30
 800e540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e544:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e548:	a90c      	add	r1, sp, #48	; 0x30
 800e54a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e54e:	e754      	b.n	800e3fa <__kernel_rem_pio2+0x1ca>
	...
 800e55c:	3ff00000 	.word	0x3ff00000
 800e560:	080116f8 	.word	0x080116f8
 800e564:	40200000 	.word	0x40200000
 800e568:	3ff00000 	.word	0x3ff00000
 800e56c:	3e700000 	.word	0x3e700000
 800e570:	41700000 	.word	0x41700000
 800e574:	3fe00000 	.word	0x3fe00000
 800e578:	080116b8 	.word	0x080116b8
 800e57c:	1e62      	subs	r2, r4, #1
 800e57e:	ab0c      	add	r3, sp, #48	; 0x30
 800e580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e584:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e588:	e7de      	b.n	800e548 <__kernel_rem_pio2+0x318>
 800e58a:	a90c      	add	r1, sp, #48	; 0x30
 800e58c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e590:	3b01      	subs	r3, #1
 800e592:	430a      	orrs	r2, r1
 800e594:	e790      	b.n	800e4b8 <__kernel_rem_pio2+0x288>
 800e596:	3301      	adds	r3, #1
 800e598:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e59c:	2900      	cmp	r1, #0
 800e59e:	d0fa      	beq.n	800e596 <__kernel_rem_pio2+0x366>
 800e5a0:	9a08      	ldr	r2, [sp, #32]
 800e5a2:	18e3      	adds	r3, r4, r3
 800e5a4:	18a6      	adds	r6, r4, r2
 800e5a6:	aa20      	add	r2, sp, #128	; 0x80
 800e5a8:	1c65      	adds	r5, r4, #1
 800e5aa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e5ae:	9302      	str	r3, [sp, #8]
 800e5b0:	9b02      	ldr	r3, [sp, #8]
 800e5b2:	42ab      	cmp	r3, r5
 800e5b4:	da04      	bge.n	800e5c0 <__kernel_rem_pio2+0x390>
 800e5b6:	461c      	mov	r4, r3
 800e5b8:	e6b5      	b.n	800e326 <__kernel_rem_pio2+0xf6>
 800e5ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5bc:	2301      	movs	r3, #1
 800e5be:	e7eb      	b.n	800e598 <__kernel_rem_pio2+0x368>
 800e5c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e5c6:	f7f1 ffad 	bl	8000524 <__aeabi_i2d>
 800e5ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5d0:	46b3      	mov	fp, r6
 800e5d2:	461c      	mov	r4, r3
 800e5d4:	2700      	movs	r7, #0
 800e5d6:	f04f 0800 	mov.w	r8, #0
 800e5da:	f04f 0900 	mov.w	r9, #0
 800e5de:	9b06      	ldr	r3, [sp, #24]
 800e5e0:	429f      	cmp	r7, r3
 800e5e2:	dd06      	ble.n	800e5f2 <__kernel_rem_pio2+0x3c2>
 800e5e4:	ab70      	add	r3, sp, #448	; 0x1c0
 800e5e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e5ea:	e9c3 8900 	strd	r8, r9, [r3]
 800e5ee:	3501      	adds	r5, #1
 800e5f0:	e7de      	b.n	800e5b0 <__kernel_rem_pio2+0x380>
 800e5f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e5f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e5fa:	f7f1 fffd 	bl	80005f8 <__aeabi_dmul>
 800e5fe:	4602      	mov	r2, r0
 800e600:	460b      	mov	r3, r1
 800e602:	4640      	mov	r0, r8
 800e604:	4649      	mov	r1, r9
 800e606:	f7f1 fe41 	bl	800028c <__adddf3>
 800e60a:	3701      	adds	r7, #1
 800e60c:	4680      	mov	r8, r0
 800e60e:	4689      	mov	r9, r1
 800e610:	e7e5      	b.n	800e5de <__kernel_rem_pio2+0x3ae>
 800e612:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e616:	e754      	b.n	800e4c2 <__kernel_rem_pio2+0x292>
 800e618:	ec47 6b10 	vmov	d0, r6, r7
 800e61c:	f1ca 0000 	rsb	r0, sl, #0
 800e620:	f000 fc3a 	bl	800ee98 <scalbn>
 800e624:	ec57 6b10 	vmov	r6, r7, d0
 800e628:	4b9f      	ldr	r3, [pc, #636]	; (800e8a8 <__kernel_rem_pio2+0x678>)
 800e62a:	ee10 0a10 	vmov	r0, s0
 800e62e:	2200      	movs	r2, #0
 800e630:	4639      	mov	r1, r7
 800e632:	f7f2 fa67 	bl	8000b04 <__aeabi_dcmpge>
 800e636:	b300      	cbz	r0, 800e67a <__kernel_rem_pio2+0x44a>
 800e638:	4b9c      	ldr	r3, [pc, #624]	; (800e8ac <__kernel_rem_pio2+0x67c>)
 800e63a:	2200      	movs	r2, #0
 800e63c:	4630      	mov	r0, r6
 800e63e:	4639      	mov	r1, r7
 800e640:	f7f1 ffda 	bl	80005f8 <__aeabi_dmul>
 800e644:	f7f2 fa88 	bl	8000b58 <__aeabi_d2iz>
 800e648:	4605      	mov	r5, r0
 800e64a:	f7f1 ff6b 	bl	8000524 <__aeabi_i2d>
 800e64e:	4b96      	ldr	r3, [pc, #600]	; (800e8a8 <__kernel_rem_pio2+0x678>)
 800e650:	2200      	movs	r2, #0
 800e652:	f7f1 ffd1 	bl	80005f8 <__aeabi_dmul>
 800e656:	460b      	mov	r3, r1
 800e658:	4602      	mov	r2, r0
 800e65a:	4639      	mov	r1, r7
 800e65c:	4630      	mov	r0, r6
 800e65e:	f7f1 fe13 	bl	8000288 <__aeabi_dsub>
 800e662:	f7f2 fa79 	bl	8000b58 <__aeabi_d2iz>
 800e666:	f104 0b01 	add.w	fp, r4, #1
 800e66a:	ab0c      	add	r3, sp, #48	; 0x30
 800e66c:	f10a 0a18 	add.w	sl, sl, #24
 800e670:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e674:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800e678:	e72b      	b.n	800e4d2 <__kernel_rem_pio2+0x2a2>
 800e67a:	4630      	mov	r0, r6
 800e67c:	4639      	mov	r1, r7
 800e67e:	f7f2 fa6b 	bl	8000b58 <__aeabi_d2iz>
 800e682:	ab0c      	add	r3, sp, #48	; 0x30
 800e684:	46a3      	mov	fp, r4
 800e686:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e68a:	e722      	b.n	800e4d2 <__kernel_rem_pio2+0x2a2>
 800e68c:	ab70      	add	r3, sp, #448	; 0x1c0
 800e68e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800e692:	ab0c      	add	r3, sp, #48	; 0x30
 800e694:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e698:	f7f1 ff44 	bl	8000524 <__aeabi_i2d>
 800e69c:	4622      	mov	r2, r4
 800e69e:	462b      	mov	r3, r5
 800e6a0:	f7f1 ffaa 	bl	80005f8 <__aeabi_dmul>
 800e6a4:	4632      	mov	r2, r6
 800e6a6:	e9c9 0100 	strd	r0, r1, [r9]
 800e6aa:	463b      	mov	r3, r7
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	4629      	mov	r1, r5
 800e6b0:	f7f1 ffa2 	bl	80005f8 <__aeabi_dmul>
 800e6b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	460d      	mov	r5, r1
 800e6bc:	e713      	b.n	800e4e6 <__kernel_rem_pio2+0x2b6>
 800e6be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e6c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e6c6:	f7f1 ff97 	bl	80005f8 <__aeabi_dmul>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	4629      	mov	r1, r5
 800e6d2:	f7f1 fddb 	bl	800028c <__adddf3>
 800e6d6:	3601      	adds	r6, #1
 800e6d8:	4604      	mov	r4, r0
 800e6da:	460d      	mov	r5, r1
 800e6dc:	9b04      	ldr	r3, [sp, #16]
 800e6de:	429e      	cmp	r6, r3
 800e6e0:	dc01      	bgt.n	800e6e6 <__kernel_rem_pio2+0x4b6>
 800e6e2:	45b0      	cmp	r8, r6
 800e6e4:	daeb      	bge.n	800e6be <__kernel_rem_pio2+0x48e>
 800e6e6:	ab48      	add	r3, sp, #288	; 0x120
 800e6e8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e6ec:	e9c3 4500 	strd	r4, r5, [r3]
 800e6f0:	3f01      	subs	r7, #1
 800e6f2:	f108 0801 	add.w	r8, r8, #1
 800e6f6:	e6ff      	b.n	800e4f8 <__kernel_rem_pio2+0x2c8>
 800e6f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e6fa:	2b02      	cmp	r3, #2
 800e6fc:	dc0b      	bgt.n	800e716 <__kernel_rem_pio2+0x4e6>
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	dc6e      	bgt.n	800e7e0 <__kernel_rem_pio2+0x5b0>
 800e702:	d045      	beq.n	800e790 <__kernel_rem_pio2+0x560>
 800e704:	9b07      	ldr	r3, [sp, #28]
 800e706:	f003 0007 	and.w	r0, r3, #7
 800e70a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e70e:	ecbd 8b02 	vpop	{d8}
 800e712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e716:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e718:	2b03      	cmp	r3, #3
 800e71a:	d1f3      	bne.n	800e704 <__kernel_rem_pio2+0x4d4>
 800e71c:	ab48      	add	r3, sp, #288	; 0x120
 800e71e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800e722:	46d0      	mov	r8, sl
 800e724:	46d9      	mov	r9, fp
 800e726:	f1b9 0f00 	cmp.w	r9, #0
 800e72a:	f1a8 0808 	sub.w	r8, r8, #8
 800e72e:	dc64      	bgt.n	800e7fa <__kernel_rem_pio2+0x5ca>
 800e730:	465c      	mov	r4, fp
 800e732:	2c01      	cmp	r4, #1
 800e734:	f1aa 0a08 	sub.w	sl, sl, #8
 800e738:	dc7e      	bgt.n	800e838 <__kernel_rem_pio2+0x608>
 800e73a:	2000      	movs	r0, #0
 800e73c:	2100      	movs	r1, #0
 800e73e:	f1bb 0f01 	cmp.w	fp, #1
 800e742:	f300 8097 	bgt.w	800e874 <__kernel_rem_pio2+0x644>
 800e746:	9b02      	ldr	r3, [sp, #8]
 800e748:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800e74c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e750:	2b00      	cmp	r3, #0
 800e752:	f040 8099 	bne.w	800e888 <__kernel_rem_pio2+0x658>
 800e756:	9b01      	ldr	r3, [sp, #4]
 800e758:	e9c3 5600 	strd	r5, r6, [r3]
 800e75c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e760:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e764:	e7ce      	b.n	800e704 <__kernel_rem_pio2+0x4d4>
 800e766:	ab48      	add	r3, sp, #288	; 0x120
 800e768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e770:	f7f1 fd8c 	bl	800028c <__adddf3>
 800e774:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e778:	f1bb 0f00 	cmp.w	fp, #0
 800e77c:	daf3      	bge.n	800e766 <__kernel_rem_pio2+0x536>
 800e77e:	9b02      	ldr	r3, [sp, #8]
 800e780:	b113      	cbz	r3, 800e788 <__kernel_rem_pio2+0x558>
 800e782:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e786:	4619      	mov	r1, r3
 800e788:	9b01      	ldr	r3, [sp, #4]
 800e78a:	e9c3 0100 	strd	r0, r1, [r3]
 800e78e:	e7b9      	b.n	800e704 <__kernel_rem_pio2+0x4d4>
 800e790:	2000      	movs	r0, #0
 800e792:	2100      	movs	r1, #0
 800e794:	e7f0      	b.n	800e778 <__kernel_rem_pio2+0x548>
 800e796:	ab48      	add	r3, sp, #288	; 0x120
 800e798:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a0:	f7f1 fd74 	bl	800028c <__adddf3>
 800e7a4:	3c01      	subs	r4, #1
 800e7a6:	2c00      	cmp	r4, #0
 800e7a8:	daf5      	bge.n	800e796 <__kernel_rem_pio2+0x566>
 800e7aa:	9b02      	ldr	r3, [sp, #8]
 800e7ac:	b1e3      	cbz	r3, 800e7e8 <__kernel_rem_pio2+0x5b8>
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7b4:	9c01      	ldr	r4, [sp, #4]
 800e7b6:	e9c4 2300 	strd	r2, r3, [r4]
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	460b      	mov	r3, r1
 800e7be:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e7c2:	f7f1 fd61 	bl	8000288 <__aeabi_dsub>
 800e7c6:	ad4a      	add	r5, sp, #296	; 0x128
 800e7c8:	2401      	movs	r4, #1
 800e7ca:	45a3      	cmp	fp, r4
 800e7cc:	da0f      	bge.n	800e7ee <__kernel_rem_pio2+0x5be>
 800e7ce:	9b02      	ldr	r3, [sp, #8]
 800e7d0:	b113      	cbz	r3, 800e7d8 <__kernel_rem_pio2+0x5a8>
 800e7d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	9b01      	ldr	r3, [sp, #4]
 800e7da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e7de:	e791      	b.n	800e704 <__kernel_rem_pio2+0x4d4>
 800e7e0:	465c      	mov	r4, fp
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	2100      	movs	r1, #0
 800e7e6:	e7de      	b.n	800e7a6 <__kernel_rem_pio2+0x576>
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	460b      	mov	r3, r1
 800e7ec:	e7e2      	b.n	800e7b4 <__kernel_rem_pio2+0x584>
 800e7ee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e7f2:	f7f1 fd4b 	bl	800028c <__adddf3>
 800e7f6:	3401      	adds	r4, #1
 800e7f8:	e7e7      	b.n	800e7ca <__kernel_rem_pio2+0x59a>
 800e7fa:	e9d8 4500 	ldrd	r4, r5, [r8]
 800e7fe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800e802:	4620      	mov	r0, r4
 800e804:	4632      	mov	r2, r6
 800e806:	463b      	mov	r3, r7
 800e808:	4629      	mov	r1, r5
 800e80a:	f7f1 fd3f 	bl	800028c <__adddf3>
 800e80e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e812:	4602      	mov	r2, r0
 800e814:	460b      	mov	r3, r1
 800e816:	4620      	mov	r0, r4
 800e818:	4629      	mov	r1, r5
 800e81a:	f7f1 fd35 	bl	8000288 <__aeabi_dsub>
 800e81e:	4632      	mov	r2, r6
 800e820:	463b      	mov	r3, r7
 800e822:	f7f1 fd33 	bl	800028c <__adddf3>
 800e826:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e82a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800e82e:	ed88 7b00 	vstr	d7, [r8]
 800e832:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e836:	e776      	b.n	800e726 <__kernel_rem_pio2+0x4f6>
 800e838:	e9da 8900 	ldrd	r8, r9, [sl]
 800e83c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e840:	4640      	mov	r0, r8
 800e842:	4632      	mov	r2, r6
 800e844:	463b      	mov	r3, r7
 800e846:	4649      	mov	r1, r9
 800e848:	f7f1 fd20 	bl	800028c <__adddf3>
 800e84c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e850:	4602      	mov	r2, r0
 800e852:	460b      	mov	r3, r1
 800e854:	4640      	mov	r0, r8
 800e856:	4649      	mov	r1, r9
 800e858:	f7f1 fd16 	bl	8000288 <__aeabi_dsub>
 800e85c:	4632      	mov	r2, r6
 800e85e:	463b      	mov	r3, r7
 800e860:	f7f1 fd14 	bl	800028c <__adddf3>
 800e864:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e868:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e86c:	ed8a 7b00 	vstr	d7, [sl]
 800e870:	3c01      	subs	r4, #1
 800e872:	e75e      	b.n	800e732 <__kernel_rem_pio2+0x502>
 800e874:	ab48      	add	r3, sp, #288	; 0x120
 800e876:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87e:	f7f1 fd05 	bl	800028c <__adddf3>
 800e882:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e886:	e75a      	b.n	800e73e <__kernel_rem_pio2+0x50e>
 800e888:	9b01      	ldr	r3, [sp, #4]
 800e88a:	9a01      	ldr	r2, [sp, #4]
 800e88c:	601d      	str	r5, [r3, #0]
 800e88e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e892:	605c      	str	r4, [r3, #4]
 800e894:	609f      	str	r7, [r3, #8]
 800e896:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e89a:	60d3      	str	r3, [r2, #12]
 800e89c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8a0:	6110      	str	r0, [r2, #16]
 800e8a2:	6153      	str	r3, [r2, #20]
 800e8a4:	e72e      	b.n	800e704 <__kernel_rem_pio2+0x4d4>
 800e8a6:	bf00      	nop
 800e8a8:	41700000 	.word	0x41700000
 800e8ac:	3e700000 	.word	0x3e700000

0800e8b0 <__kernel_sin>:
 800e8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8b4:	ed2d 8b04 	vpush	{d8-d9}
 800e8b8:	eeb0 8a41 	vmov.f32	s16, s2
 800e8bc:	eef0 8a61 	vmov.f32	s17, s3
 800e8c0:	ec55 4b10 	vmov	r4, r5, d0
 800e8c4:	b083      	sub	sp, #12
 800e8c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e8ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e8ce:	9001      	str	r0, [sp, #4]
 800e8d0:	da06      	bge.n	800e8e0 <__kernel_sin+0x30>
 800e8d2:	ee10 0a10 	vmov	r0, s0
 800e8d6:	4629      	mov	r1, r5
 800e8d8:	f7f2 f93e 	bl	8000b58 <__aeabi_d2iz>
 800e8dc:	2800      	cmp	r0, #0
 800e8de:	d051      	beq.n	800e984 <__kernel_sin+0xd4>
 800e8e0:	4622      	mov	r2, r4
 800e8e2:	462b      	mov	r3, r5
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	4629      	mov	r1, r5
 800e8e8:	f7f1 fe86 	bl	80005f8 <__aeabi_dmul>
 800e8ec:	4682      	mov	sl, r0
 800e8ee:	468b      	mov	fp, r1
 800e8f0:	4602      	mov	r2, r0
 800e8f2:	460b      	mov	r3, r1
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	4629      	mov	r1, r5
 800e8f8:	f7f1 fe7e 	bl	80005f8 <__aeabi_dmul>
 800e8fc:	a341      	add	r3, pc, #260	; (adr r3, 800ea04 <__kernel_sin+0x154>)
 800e8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e902:	4680      	mov	r8, r0
 800e904:	4689      	mov	r9, r1
 800e906:	4650      	mov	r0, sl
 800e908:	4659      	mov	r1, fp
 800e90a:	f7f1 fe75 	bl	80005f8 <__aeabi_dmul>
 800e90e:	a33f      	add	r3, pc, #252	; (adr r3, 800ea0c <__kernel_sin+0x15c>)
 800e910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e914:	f7f1 fcb8 	bl	8000288 <__aeabi_dsub>
 800e918:	4652      	mov	r2, sl
 800e91a:	465b      	mov	r3, fp
 800e91c:	f7f1 fe6c 	bl	80005f8 <__aeabi_dmul>
 800e920:	a33c      	add	r3, pc, #240	; (adr r3, 800ea14 <__kernel_sin+0x164>)
 800e922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e926:	f7f1 fcb1 	bl	800028c <__adddf3>
 800e92a:	4652      	mov	r2, sl
 800e92c:	465b      	mov	r3, fp
 800e92e:	f7f1 fe63 	bl	80005f8 <__aeabi_dmul>
 800e932:	a33a      	add	r3, pc, #232	; (adr r3, 800ea1c <__kernel_sin+0x16c>)
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	f7f1 fca6 	bl	8000288 <__aeabi_dsub>
 800e93c:	4652      	mov	r2, sl
 800e93e:	465b      	mov	r3, fp
 800e940:	f7f1 fe5a 	bl	80005f8 <__aeabi_dmul>
 800e944:	a337      	add	r3, pc, #220	; (adr r3, 800ea24 <__kernel_sin+0x174>)
 800e946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94a:	f7f1 fc9f 	bl	800028c <__adddf3>
 800e94e:	9b01      	ldr	r3, [sp, #4]
 800e950:	4606      	mov	r6, r0
 800e952:	460f      	mov	r7, r1
 800e954:	b9eb      	cbnz	r3, 800e992 <__kernel_sin+0xe2>
 800e956:	4602      	mov	r2, r0
 800e958:	460b      	mov	r3, r1
 800e95a:	4650      	mov	r0, sl
 800e95c:	4659      	mov	r1, fp
 800e95e:	f7f1 fe4b 	bl	80005f8 <__aeabi_dmul>
 800e962:	a325      	add	r3, pc, #148	; (adr r3, 800e9f8 <__kernel_sin+0x148>)
 800e964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e968:	f7f1 fc8e 	bl	8000288 <__aeabi_dsub>
 800e96c:	4642      	mov	r2, r8
 800e96e:	464b      	mov	r3, r9
 800e970:	f7f1 fe42 	bl	80005f8 <__aeabi_dmul>
 800e974:	4602      	mov	r2, r0
 800e976:	460b      	mov	r3, r1
 800e978:	4620      	mov	r0, r4
 800e97a:	4629      	mov	r1, r5
 800e97c:	f7f1 fc86 	bl	800028c <__adddf3>
 800e980:	4604      	mov	r4, r0
 800e982:	460d      	mov	r5, r1
 800e984:	ec45 4b10 	vmov	d0, r4, r5
 800e988:	b003      	add	sp, #12
 800e98a:	ecbd 8b04 	vpop	{d8-d9}
 800e98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e992:	4b1b      	ldr	r3, [pc, #108]	; (800ea00 <__kernel_sin+0x150>)
 800e994:	ec51 0b18 	vmov	r0, r1, d8
 800e998:	2200      	movs	r2, #0
 800e99a:	f7f1 fe2d 	bl	80005f8 <__aeabi_dmul>
 800e99e:	4632      	mov	r2, r6
 800e9a0:	ec41 0b19 	vmov	d9, r0, r1
 800e9a4:	463b      	mov	r3, r7
 800e9a6:	4640      	mov	r0, r8
 800e9a8:	4649      	mov	r1, r9
 800e9aa:	f7f1 fe25 	bl	80005f8 <__aeabi_dmul>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	ec51 0b19 	vmov	r0, r1, d9
 800e9b6:	f7f1 fc67 	bl	8000288 <__aeabi_dsub>
 800e9ba:	4652      	mov	r2, sl
 800e9bc:	465b      	mov	r3, fp
 800e9be:	f7f1 fe1b 	bl	80005f8 <__aeabi_dmul>
 800e9c2:	ec53 2b18 	vmov	r2, r3, d8
 800e9c6:	f7f1 fc5f 	bl	8000288 <__aeabi_dsub>
 800e9ca:	a30b      	add	r3, pc, #44	; (adr r3, 800e9f8 <__kernel_sin+0x148>)
 800e9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d0:	4606      	mov	r6, r0
 800e9d2:	460f      	mov	r7, r1
 800e9d4:	4640      	mov	r0, r8
 800e9d6:	4649      	mov	r1, r9
 800e9d8:	f7f1 fe0e 	bl	80005f8 <__aeabi_dmul>
 800e9dc:	4602      	mov	r2, r0
 800e9de:	460b      	mov	r3, r1
 800e9e0:	4630      	mov	r0, r6
 800e9e2:	4639      	mov	r1, r7
 800e9e4:	f7f1 fc52 	bl	800028c <__adddf3>
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	f7f1 fc4a 	bl	8000288 <__aeabi_dsub>
 800e9f4:	e7c4      	b.n	800e980 <__kernel_sin+0xd0>
 800e9f6:	bf00      	nop
 800e9f8:	55555549 	.word	0x55555549
 800e9fc:	3fc55555 	.word	0x3fc55555
 800ea00:	3fe00000 	.word	0x3fe00000
 800ea04:	5acfd57c 	.word	0x5acfd57c
 800ea08:	3de5d93a 	.word	0x3de5d93a
 800ea0c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ea10:	3e5ae5e6 	.word	0x3e5ae5e6
 800ea14:	57b1fe7d 	.word	0x57b1fe7d
 800ea18:	3ec71de3 	.word	0x3ec71de3
 800ea1c:	19c161d5 	.word	0x19c161d5
 800ea20:	3f2a01a0 	.word	0x3f2a01a0
 800ea24:	1110f8a6 	.word	0x1110f8a6
 800ea28:	3f811111 	.word	0x3f811111
 800ea2c:	00000000 	.word	0x00000000

0800ea30 <atan>:
 800ea30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea34:	ec55 4b10 	vmov	r4, r5, d0
 800ea38:	4bc3      	ldr	r3, [pc, #780]	; (800ed48 <atan+0x318>)
 800ea3a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ea3e:	429e      	cmp	r6, r3
 800ea40:	46ab      	mov	fp, r5
 800ea42:	dd18      	ble.n	800ea76 <atan+0x46>
 800ea44:	4bc1      	ldr	r3, [pc, #772]	; (800ed4c <atan+0x31c>)
 800ea46:	429e      	cmp	r6, r3
 800ea48:	dc01      	bgt.n	800ea4e <atan+0x1e>
 800ea4a:	d109      	bne.n	800ea60 <atan+0x30>
 800ea4c:	b144      	cbz	r4, 800ea60 <atan+0x30>
 800ea4e:	4622      	mov	r2, r4
 800ea50:	462b      	mov	r3, r5
 800ea52:	4620      	mov	r0, r4
 800ea54:	4629      	mov	r1, r5
 800ea56:	f7f1 fc19 	bl	800028c <__adddf3>
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	460d      	mov	r5, r1
 800ea5e:	e006      	b.n	800ea6e <atan+0x3e>
 800ea60:	f1bb 0f00 	cmp.w	fp, #0
 800ea64:	f300 8131 	bgt.w	800ecca <atan+0x29a>
 800ea68:	a59b      	add	r5, pc, #620	; (adr r5, 800ecd8 <atan+0x2a8>)
 800ea6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ea6e:	ec45 4b10 	vmov	d0, r4, r5
 800ea72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea76:	4bb6      	ldr	r3, [pc, #728]	; (800ed50 <atan+0x320>)
 800ea78:	429e      	cmp	r6, r3
 800ea7a:	dc14      	bgt.n	800eaa6 <atan+0x76>
 800ea7c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ea80:	429e      	cmp	r6, r3
 800ea82:	dc0d      	bgt.n	800eaa0 <atan+0x70>
 800ea84:	a396      	add	r3, pc, #600	; (adr r3, 800ece0 <atan+0x2b0>)
 800ea86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8a:	ee10 0a10 	vmov	r0, s0
 800ea8e:	4629      	mov	r1, r5
 800ea90:	f7f1 fbfc 	bl	800028c <__adddf3>
 800ea94:	4baf      	ldr	r3, [pc, #700]	; (800ed54 <atan+0x324>)
 800ea96:	2200      	movs	r2, #0
 800ea98:	f7f2 f83e 	bl	8000b18 <__aeabi_dcmpgt>
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	d1e6      	bne.n	800ea6e <atan+0x3e>
 800eaa0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800eaa4:	e02b      	b.n	800eafe <atan+0xce>
 800eaa6:	f000 f963 	bl	800ed70 <fabs>
 800eaaa:	4bab      	ldr	r3, [pc, #684]	; (800ed58 <atan+0x328>)
 800eaac:	429e      	cmp	r6, r3
 800eaae:	ec55 4b10 	vmov	r4, r5, d0
 800eab2:	f300 80bf 	bgt.w	800ec34 <atan+0x204>
 800eab6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800eaba:	429e      	cmp	r6, r3
 800eabc:	f300 80a0 	bgt.w	800ec00 <atan+0x1d0>
 800eac0:	ee10 2a10 	vmov	r2, s0
 800eac4:	ee10 0a10 	vmov	r0, s0
 800eac8:	462b      	mov	r3, r5
 800eaca:	4629      	mov	r1, r5
 800eacc:	f7f1 fbde 	bl	800028c <__adddf3>
 800ead0:	4ba0      	ldr	r3, [pc, #640]	; (800ed54 <atan+0x324>)
 800ead2:	2200      	movs	r2, #0
 800ead4:	f7f1 fbd8 	bl	8000288 <__aeabi_dsub>
 800ead8:	2200      	movs	r2, #0
 800eada:	4606      	mov	r6, r0
 800eadc:	460f      	mov	r7, r1
 800eade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eae2:	4620      	mov	r0, r4
 800eae4:	4629      	mov	r1, r5
 800eae6:	f7f1 fbd1 	bl	800028c <__adddf3>
 800eaea:	4602      	mov	r2, r0
 800eaec:	460b      	mov	r3, r1
 800eaee:	4630      	mov	r0, r6
 800eaf0:	4639      	mov	r1, r7
 800eaf2:	f7f1 feab 	bl	800084c <__aeabi_ddiv>
 800eaf6:	f04f 0a00 	mov.w	sl, #0
 800eafa:	4604      	mov	r4, r0
 800eafc:	460d      	mov	r5, r1
 800eafe:	4622      	mov	r2, r4
 800eb00:	462b      	mov	r3, r5
 800eb02:	4620      	mov	r0, r4
 800eb04:	4629      	mov	r1, r5
 800eb06:	f7f1 fd77 	bl	80005f8 <__aeabi_dmul>
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	4680      	mov	r8, r0
 800eb10:	4689      	mov	r9, r1
 800eb12:	f7f1 fd71 	bl	80005f8 <__aeabi_dmul>
 800eb16:	a374      	add	r3, pc, #464	; (adr r3, 800ece8 <atan+0x2b8>)
 800eb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1c:	4606      	mov	r6, r0
 800eb1e:	460f      	mov	r7, r1
 800eb20:	f7f1 fd6a 	bl	80005f8 <__aeabi_dmul>
 800eb24:	a372      	add	r3, pc, #456	; (adr r3, 800ecf0 <atan+0x2c0>)
 800eb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2a:	f7f1 fbaf 	bl	800028c <__adddf3>
 800eb2e:	4632      	mov	r2, r6
 800eb30:	463b      	mov	r3, r7
 800eb32:	f7f1 fd61 	bl	80005f8 <__aeabi_dmul>
 800eb36:	a370      	add	r3, pc, #448	; (adr r3, 800ecf8 <atan+0x2c8>)
 800eb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3c:	f7f1 fba6 	bl	800028c <__adddf3>
 800eb40:	4632      	mov	r2, r6
 800eb42:	463b      	mov	r3, r7
 800eb44:	f7f1 fd58 	bl	80005f8 <__aeabi_dmul>
 800eb48:	a36d      	add	r3, pc, #436	; (adr r3, 800ed00 <atan+0x2d0>)
 800eb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4e:	f7f1 fb9d 	bl	800028c <__adddf3>
 800eb52:	4632      	mov	r2, r6
 800eb54:	463b      	mov	r3, r7
 800eb56:	f7f1 fd4f 	bl	80005f8 <__aeabi_dmul>
 800eb5a:	a36b      	add	r3, pc, #428	; (adr r3, 800ed08 <atan+0x2d8>)
 800eb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb60:	f7f1 fb94 	bl	800028c <__adddf3>
 800eb64:	4632      	mov	r2, r6
 800eb66:	463b      	mov	r3, r7
 800eb68:	f7f1 fd46 	bl	80005f8 <__aeabi_dmul>
 800eb6c:	a368      	add	r3, pc, #416	; (adr r3, 800ed10 <atan+0x2e0>)
 800eb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb72:	f7f1 fb8b 	bl	800028c <__adddf3>
 800eb76:	4642      	mov	r2, r8
 800eb78:	464b      	mov	r3, r9
 800eb7a:	f7f1 fd3d 	bl	80005f8 <__aeabi_dmul>
 800eb7e:	a366      	add	r3, pc, #408	; (adr r3, 800ed18 <atan+0x2e8>)
 800eb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb84:	4680      	mov	r8, r0
 800eb86:	4689      	mov	r9, r1
 800eb88:	4630      	mov	r0, r6
 800eb8a:	4639      	mov	r1, r7
 800eb8c:	f7f1 fd34 	bl	80005f8 <__aeabi_dmul>
 800eb90:	a363      	add	r3, pc, #396	; (adr r3, 800ed20 <atan+0x2f0>)
 800eb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb96:	f7f1 fb77 	bl	8000288 <__aeabi_dsub>
 800eb9a:	4632      	mov	r2, r6
 800eb9c:	463b      	mov	r3, r7
 800eb9e:	f7f1 fd2b 	bl	80005f8 <__aeabi_dmul>
 800eba2:	a361      	add	r3, pc, #388	; (adr r3, 800ed28 <atan+0x2f8>)
 800eba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba8:	f7f1 fb6e 	bl	8000288 <__aeabi_dsub>
 800ebac:	4632      	mov	r2, r6
 800ebae:	463b      	mov	r3, r7
 800ebb0:	f7f1 fd22 	bl	80005f8 <__aeabi_dmul>
 800ebb4:	a35e      	add	r3, pc, #376	; (adr r3, 800ed30 <atan+0x300>)
 800ebb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebba:	f7f1 fb65 	bl	8000288 <__aeabi_dsub>
 800ebbe:	4632      	mov	r2, r6
 800ebc0:	463b      	mov	r3, r7
 800ebc2:	f7f1 fd19 	bl	80005f8 <__aeabi_dmul>
 800ebc6:	a35c      	add	r3, pc, #368	; (adr r3, 800ed38 <atan+0x308>)
 800ebc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebcc:	f7f1 fb5c 	bl	8000288 <__aeabi_dsub>
 800ebd0:	4632      	mov	r2, r6
 800ebd2:	463b      	mov	r3, r7
 800ebd4:	f7f1 fd10 	bl	80005f8 <__aeabi_dmul>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	460b      	mov	r3, r1
 800ebdc:	4640      	mov	r0, r8
 800ebde:	4649      	mov	r1, r9
 800ebe0:	f7f1 fb54 	bl	800028c <__adddf3>
 800ebe4:	4622      	mov	r2, r4
 800ebe6:	462b      	mov	r3, r5
 800ebe8:	f7f1 fd06 	bl	80005f8 <__aeabi_dmul>
 800ebec:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	d14b      	bne.n	800ec8e <atan+0x25e>
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	4629      	mov	r1, r5
 800ebfa:	f7f1 fb45 	bl	8000288 <__aeabi_dsub>
 800ebfe:	e72c      	b.n	800ea5a <atan+0x2a>
 800ec00:	ee10 0a10 	vmov	r0, s0
 800ec04:	4b53      	ldr	r3, [pc, #332]	; (800ed54 <atan+0x324>)
 800ec06:	2200      	movs	r2, #0
 800ec08:	4629      	mov	r1, r5
 800ec0a:	f7f1 fb3d 	bl	8000288 <__aeabi_dsub>
 800ec0e:	4b51      	ldr	r3, [pc, #324]	; (800ed54 <atan+0x324>)
 800ec10:	4606      	mov	r6, r0
 800ec12:	460f      	mov	r7, r1
 800ec14:	2200      	movs	r2, #0
 800ec16:	4620      	mov	r0, r4
 800ec18:	4629      	mov	r1, r5
 800ec1a:	f7f1 fb37 	bl	800028c <__adddf3>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	460b      	mov	r3, r1
 800ec22:	4630      	mov	r0, r6
 800ec24:	4639      	mov	r1, r7
 800ec26:	f7f1 fe11 	bl	800084c <__aeabi_ddiv>
 800ec2a:	f04f 0a01 	mov.w	sl, #1
 800ec2e:	4604      	mov	r4, r0
 800ec30:	460d      	mov	r5, r1
 800ec32:	e764      	b.n	800eafe <atan+0xce>
 800ec34:	4b49      	ldr	r3, [pc, #292]	; (800ed5c <atan+0x32c>)
 800ec36:	429e      	cmp	r6, r3
 800ec38:	da1d      	bge.n	800ec76 <atan+0x246>
 800ec3a:	ee10 0a10 	vmov	r0, s0
 800ec3e:	4b48      	ldr	r3, [pc, #288]	; (800ed60 <atan+0x330>)
 800ec40:	2200      	movs	r2, #0
 800ec42:	4629      	mov	r1, r5
 800ec44:	f7f1 fb20 	bl	8000288 <__aeabi_dsub>
 800ec48:	4b45      	ldr	r3, [pc, #276]	; (800ed60 <atan+0x330>)
 800ec4a:	4606      	mov	r6, r0
 800ec4c:	460f      	mov	r7, r1
 800ec4e:	2200      	movs	r2, #0
 800ec50:	4620      	mov	r0, r4
 800ec52:	4629      	mov	r1, r5
 800ec54:	f7f1 fcd0 	bl	80005f8 <__aeabi_dmul>
 800ec58:	4b3e      	ldr	r3, [pc, #248]	; (800ed54 <atan+0x324>)
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f7f1 fb16 	bl	800028c <__adddf3>
 800ec60:	4602      	mov	r2, r0
 800ec62:	460b      	mov	r3, r1
 800ec64:	4630      	mov	r0, r6
 800ec66:	4639      	mov	r1, r7
 800ec68:	f7f1 fdf0 	bl	800084c <__aeabi_ddiv>
 800ec6c:	f04f 0a02 	mov.w	sl, #2
 800ec70:	4604      	mov	r4, r0
 800ec72:	460d      	mov	r5, r1
 800ec74:	e743      	b.n	800eafe <atan+0xce>
 800ec76:	462b      	mov	r3, r5
 800ec78:	ee10 2a10 	vmov	r2, s0
 800ec7c:	4939      	ldr	r1, [pc, #228]	; (800ed64 <atan+0x334>)
 800ec7e:	2000      	movs	r0, #0
 800ec80:	f7f1 fde4 	bl	800084c <__aeabi_ddiv>
 800ec84:	f04f 0a03 	mov.w	sl, #3
 800ec88:	4604      	mov	r4, r0
 800ec8a:	460d      	mov	r5, r1
 800ec8c:	e737      	b.n	800eafe <atan+0xce>
 800ec8e:	4b36      	ldr	r3, [pc, #216]	; (800ed68 <atan+0x338>)
 800ec90:	4e36      	ldr	r6, [pc, #216]	; (800ed6c <atan+0x33c>)
 800ec92:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ec96:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ec9a:	e9da 2300 	ldrd	r2, r3, [sl]
 800ec9e:	f7f1 faf3 	bl	8000288 <__aeabi_dsub>
 800eca2:	4622      	mov	r2, r4
 800eca4:	462b      	mov	r3, r5
 800eca6:	f7f1 faef 	bl	8000288 <__aeabi_dsub>
 800ecaa:	4602      	mov	r2, r0
 800ecac:	460b      	mov	r3, r1
 800ecae:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ecb2:	f7f1 fae9 	bl	8000288 <__aeabi_dsub>
 800ecb6:	f1bb 0f00 	cmp.w	fp, #0
 800ecba:	4604      	mov	r4, r0
 800ecbc:	460d      	mov	r5, r1
 800ecbe:	f6bf aed6 	bge.w	800ea6e <atan+0x3e>
 800ecc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecc6:	461d      	mov	r5, r3
 800ecc8:	e6d1      	b.n	800ea6e <atan+0x3e>
 800ecca:	a51d      	add	r5, pc, #116	; (adr r5, 800ed40 <atan+0x310>)
 800eccc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ecd0:	e6cd      	b.n	800ea6e <atan+0x3e>
 800ecd2:	bf00      	nop
 800ecd4:	f3af 8000 	nop.w
 800ecd8:	54442d18 	.word	0x54442d18
 800ecdc:	bff921fb 	.word	0xbff921fb
 800ece0:	8800759c 	.word	0x8800759c
 800ece4:	7e37e43c 	.word	0x7e37e43c
 800ece8:	e322da11 	.word	0xe322da11
 800ecec:	3f90ad3a 	.word	0x3f90ad3a
 800ecf0:	24760deb 	.word	0x24760deb
 800ecf4:	3fa97b4b 	.word	0x3fa97b4b
 800ecf8:	a0d03d51 	.word	0xa0d03d51
 800ecfc:	3fb10d66 	.word	0x3fb10d66
 800ed00:	c54c206e 	.word	0xc54c206e
 800ed04:	3fb745cd 	.word	0x3fb745cd
 800ed08:	920083ff 	.word	0x920083ff
 800ed0c:	3fc24924 	.word	0x3fc24924
 800ed10:	5555550d 	.word	0x5555550d
 800ed14:	3fd55555 	.word	0x3fd55555
 800ed18:	2c6a6c2f 	.word	0x2c6a6c2f
 800ed1c:	bfa2b444 	.word	0xbfa2b444
 800ed20:	52defd9a 	.word	0x52defd9a
 800ed24:	3fadde2d 	.word	0x3fadde2d
 800ed28:	af749a6d 	.word	0xaf749a6d
 800ed2c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ed30:	fe231671 	.word	0xfe231671
 800ed34:	3fbc71c6 	.word	0x3fbc71c6
 800ed38:	9998ebc4 	.word	0x9998ebc4
 800ed3c:	3fc99999 	.word	0x3fc99999
 800ed40:	54442d18 	.word	0x54442d18
 800ed44:	3ff921fb 	.word	0x3ff921fb
 800ed48:	440fffff 	.word	0x440fffff
 800ed4c:	7ff00000 	.word	0x7ff00000
 800ed50:	3fdbffff 	.word	0x3fdbffff
 800ed54:	3ff00000 	.word	0x3ff00000
 800ed58:	3ff2ffff 	.word	0x3ff2ffff
 800ed5c:	40038000 	.word	0x40038000
 800ed60:	3ff80000 	.word	0x3ff80000
 800ed64:	bff00000 	.word	0xbff00000
 800ed68:	08011728 	.word	0x08011728
 800ed6c:	08011708 	.word	0x08011708

0800ed70 <fabs>:
 800ed70:	ec51 0b10 	vmov	r0, r1, d0
 800ed74:	ee10 2a10 	vmov	r2, s0
 800ed78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ed7c:	ec43 2b10 	vmov	d0, r2, r3
 800ed80:	4770      	bx	lr
 800ed82:	0000      	movs	r0, r0
 800ed84:	0000      	movs	r0, r0
	...

0800ed88 <floor>:
 800ed88:	ec51 0b10 	vmov	r0, r1, d0
 800ed8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed90:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ed94:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ed98:	2e13      	cmp	r6, #19
 800ed9a:	ee10 5a10 	vmov	r5, s0
 800ed9e:	ee10 8a10 	vmov	r8, s0
 800eda2:	460c      	mov	r4, r1
 800eda4:	dc32      	bgt.n	800ee0c <floor+0x84>
 800eda6:	2e00      	cmp	r6, #0
 800eda8:	da14      	bge.n	800edd4 <floor+0x4c>
 800edaa:	a333      	add	r3, pc, #204	; (adr r3, 800ee78 <floor+0xf0>)
 800edac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb0:	f7f1 fa6c 	bl	800028c <__adddf3>
 800edb4:	2200      	movs	r2, #0
 800edb6:	2300      	movs	r3, #0
 800edb8:	f7f1 feae 	bl	8000b18 <__aeabi_dcmpgt>
 800edbc:	b138      	cbz	r0, 800edce <floor+0x46>
 800edbe:	2c00      	cmp	r4, #0
 800edc0:	da57      	bge.n	800ee72 <floor+0xea>
 800edc2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800edc6:	431d      	orrs	r5, r3
 800edc8:	d001      	beq.n	800edce <floor+0x46>
 800edca:	4c2d      	ldr	r4, [pc, #180]	; (800ee80 <floor+0xf8>)
 800edcc:	2500      	movs	r5, #0
 800edce:	4621      	mov	r1, r4
 800edd0:	4628      	mov	r0, r5
 800edd2:	e025      	b.n	800ee20 <floor+0x98>
 800edd4:	4f2b      	ldr	r7, [pc, #172]	; (800ee84 <floor+0xfc>)
 800edd6:	4137      	asrs	r7, r6
 800edd8:	ea01 0307 	and.w	r3, r1, r7
 800eddc:	4303      	orrs	r3, r0
 800edde:	d01f      	beq.n	800ee20 <floor+0x98>
 800ede0:	a325      	add	r3, pc, #148	; (adr r3, 800ee78 <floor+0xf0>)
 800ede2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede6:	f7f1 fa51 	bl	800028c <__adddf3>
 800edea:	2200      	movs	r2, #0
 800edec:	2300      	movs	r3, #0
 800edee:	f7f1 fe93 	bl	8000b18 <__aeabi_dcmpgt>
 800edf2:	2800      	cmp	r0, #0
 800edf4:	d0eb      	beq.n	800edce <floor+0x46>
 800edf6:	2c00      	cmp	r4, #0
 800edf8:	bfbe      	ittt	lt
 800edfa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800edfe:	fa43 f606 	asrlt.w	r6, r3, r6
 800ee02:	19a4      	addlt	r4, r4, r6
 800ee04:	ea24 0407 	bic.w	r4, r4, r7
 800ee08:	2500      	movs	r5, #0
 800ee0a:	e7e0      	b.n	800edce <floor+0x46>
 800ee0c:	2e33      	cmp	r6, #51	; 0x33
 800ee0e:	dd0b      	ble.n	800ee28 <floor+0xa0>
 800ee10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ee14:	d104      	bne.n	800ee20 <floor+0x98>
 800ee16:	ee10 2a10 	vmov	r2, s0
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	f7f1 fa36 	bl	800028c <__adddf3>
 800ee20:	ec41 0b10 	vmov	d0, r0, r1
 800ee24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee28:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ee2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee30:	fa23 f707 	lsr.w	r7, r3, r7
 800ee34:	4207      	tst	r7, r0
 800ee36:	d0f3      	beq.n	800ee20 <floor+0x98>
 800ee38:	a30f      	add	r3, pc, #60	; (adr r3, 800ee78 <floor+0xf0>)
 800ee3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3e:	f7f1 fa25 	bl	800028c <__adddf3>
 800ee42:	2200      	movs	r2, #0
 800ee44:	2300      	movs	r3, #0
 800ee46:	f7f1 fe67 	bl	8000b18 <__aeabi_dcmpgt>
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	d0bf      	beq.n	800edce <floor+0x46>
 800ee4e:	2c00      	cmp	r4, #0
 800ee50:	da02      	bge.n	800ee58 <floor+0xd0>
 800ee52:	2e14      	cmp	r6, #20
 800ee54:	d103      	bne.n	800ee5e <floor+0xd6>
 800ee56:	3401      	adds	r4, #1
 800ee58:	ea25 0507 	bic.w	r5, r5, r7
 800ee5c:	e7b7      	b.n	800edce <floor+0x46>
 800ee5e:	2301      	movs	r3, #1
 800ee60:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ee64:	fa03 f606 	lsl.w	r6, r3, r6
 800ee68:	4435      	add	r5, r6
 800ee6a:	4545      	cmp	r5, r8
 800ee6c:	bf38      	it	cc
 800ee6e:	18e4      	addcc	r4, r4, r3
 800ee70:	e7f2      	b.n	800ee58 <floor+0xd0>
 800ee72:	2500      	movs	r5, #0
 800ee74:	462c      	mov	r4, r5
 800ee76:	e7aa      	b.n	800edce <floor+0x46>
 800ee78:	8800759c 	.word	0x8800759c
 800ee7c:	7e37e43c 	.word	0x7e37e43c
 800ee80:	bff00000 	.word	0xbff00000
 800ee84:	000fffff 	.word	0x000fffff

0800ee88 <nan>:
 800ee88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ee90 <nan+0x8>
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop
 800ee90:	00000000 	.word	0x00000000
 800ee94:	7ff80000 	.word	0x7ff80000

0800ee98 <scalbn>:
 800ee98:	b570      	push	{r4, r5, r6, lr}
 800ee9a:	ec55 4b10 	vmov	r4, r5, d0
 800ee9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800eea2:	4606      	mov	r6, r0
 800eea4:	462b      	mov	r3, r5
 800eea6:	b99a      	cbnz	r2, 800eed0 <scalbn+0x38>
 800eea8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800eeac:	4323      	orrs	r3, r4
 800eeae:	d036      	beq.n	800ef1e <scalbn+0x86>
 800eeb0:	4b39      	ldr	r3, [pc, #228]	; (800ef98 <scalbn+0x100>)
 800eeb2:	4629      	mov	r1, r5
 800eeb4:	ee10 0a10 	vmov	r0, s0
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f7f1 fb9d 	bl	80005f8 <__aeabi_dmul>
 800eebe:	4b37      	ldr	r3, [pc, #220]	; (800ef9c <scalbn+0x104>)
 800eec0:	429e      	cmp	r6, r3
 800eec2:	4604      	mov	r4, r0
 800eec4:	460d      	mov	r5, r1
 800eec6:	da10      	bge.n	800eeea <scalbn+0x52>
 800eec8:	a32b      	add	r3, pc, #172	; (adr r3, 800ef78 <scalbn+0xe0>)
 800eeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eece:	e03a      	b.n	800ef46 <scalbn+0xae>
 800eed0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800eed4:	428a      	cmp	r2, r1
 800eed6:	d10c      	bne.n	800eef2 <scalbn+0x5a>
 800eed8:	ee10 2a10 	vmov	r2, s0
 800eedc:	4620      	mov	r0, r4
 800eede:	4629      	mov	r1, r5
 800eee0:	f7f1 f9d4 	bl	800028c <__adddf3>
 800eee4:	4604      	mov	r4, r0
 800eee6:	460d      	mov	r5, r1
 800eee8:	e019      	b.n	800ef1e <scalbn+0x86>
 800eeea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800eeee:	460b      	mov	r3, r1
 800eef0:	3a36      	subs	r2, #54	; 0x36
 800eef2:	4432      	add	r2, r6
 800eef4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800eef8:	428a      	cmp	r2, r1
 800eefa:	dd08      	ble.n	800ef0e <scalbn+0x76>
 800eefc:	2d00      	cmp	r5, #0
 800eefe:	a120      	add	r1, pc, #128	; (adr r1, 800ef80 <scalbn+0xe8>)
 800ef00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef04:	da1c      	bge.n	800ef40 <scalbn+0xa8>
 800ef06:	a120      	add	r1, pc, #128	; (adr r1, 800ef88 <scalbn+0xf0>)
 800ef08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef0c:	e018      	b.n	800ef40 <scalbn+0xa8>
 800ef0e:	2a00      	cmp	r2, #0
 800ef10:	dd08      	ble.n	800ef24 <scalbn+0x8c>
 800ef12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ef1e:	ec45 4b10 	vmov	d0, r4, r5
 800ef22:	bd70      	pop	{r4, r5, r6, pc}
 800ef24:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ef28:	da19      	bge.n	800ef5e <scalbn+0xc6>
 800ef2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ef2e:	429e      	cmp	r6, r3
 800ef30:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ef34:	dd0a      	ble.n	800ef4c <scalbn+0xb4>
 800ef36:	a112      	add	r1, pc, #72	; (adr r1, 800ef80 <scalbn+0xe8>)
 800ef38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d1e2      	bne.n	800ef06 <scalbn+0x6e>
 800ef40:	a30f      	add	r3, pc, #60	; (adr r3, 800ef80 <scalbn+0xe8>)
 800ef42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef46:	f7f1 fb57 	bl	80005f8 <__aeabi_dmul>
 800ef4a:	e7cb      	b.n	800eee4 <scalbn+0x4c>
 800ef4c:	a10a      	add	r1, pc, #40	; (adr r1, 800ef78 <scalbn+0xe0>)
 800ef4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d0b8      	beq.n	800eec8 <scalbn+0x30>
 800ef56:	a10e      	add	r1, pc, #56	; (adr r1, 800ef90 <scalbn+0xf8>)
 800ef58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef5c:	e7b4      	b.n	800eec8 <scalbn+0x30>
 800ef5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef62:	3236      	adds	r2, #54	; 0x36
 800ef64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	4b0c      	ldr	r3, [pc, #48]	; (800efa0 <scalbn+0x108>)
 800ef70:	2200      	movs	r2, #0
 800ef72:	e7e8      	b.n	800ef46 <scalbn+0xae>
 800ef74:	f3af 8000 	nop.w
 800ef78:	c2f8f359 	.word	0xc2f8f359
 800ef7c:	01a56e1f 	.word	0x01a56e1f
 800ef80:	8800759c 	.word	0x8800759c
 800ef84:	7e37e43c 	.word	0x7e37e43c
 800ef88:	8800759c 	.word	0x8800759c
 800ef8c:	fe37e43c 	.word	0xfe37e43c
 800ef90:	c2f8f359 	.word	0xc2f8f359
 800ef94:	81a56e1f 	.word	0x81a56e1f
 800ef98:	43500000 	.word	0x43500000
 800ef9c:	ffff3cb0 	.word	0xffff3cb0
 800efa0:	3c900000 	.word	0x3c900000

0800efa4 <_init>:
 800efa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa6:	bf00      	nop
 800efa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efaa:	bc08      	pop	{r3}
 800efac:	469e      	mov	lr, r3
 800efae:	4770      	bx	lr

0800efb0 <_fini>:
 800efb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efb2:	bf00      	nop
 800efb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efb6:	bc08      	pop	{r3}
 800efb8:	469e      	mov	lr, r3
 800efba:	4770      	bx	lr
