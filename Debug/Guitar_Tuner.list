
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005020  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005298  08005298  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005298  08005298  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005298  08005298  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000213c  20000070  08005310  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021ac  08005310  000221ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001197e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238f  00000000  00000000  00031a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00033db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  00034ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023afb  00000000  00000000  00035b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010314  00000000  00000000  00059613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd0fb  00000000  00000000  00069927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146a22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c8  00000000  00000000  00146a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005198 	.word	0x08005198

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005198 	.word	0x08005198

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <printBuff>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void printBuff()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	if(counter == THRSHLD) return;
 8000276:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <printBuff+0x58>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	2b23      	cmp	r3, #35	; 0x23
 800027c:	d01f      	beq.n	80002be <printBuff+0x4e>
	for(int i = 0; i < ADC_BUFF_LEN; i++)
 800027e:	2300      	movs	r3, #0
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	e012      	b.n	80002aa <printBuff+0x3a>
	{
		printf("0x%04X ", adc_buff[i]);
 8000284:	4a11      	ldr	r2, [pc, #68]	; (80002cc <printBuff+0x5c>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800028c:	4619      	mov	r1, r3
 800028e:	4810      	ldr	r0, [pc, #64]	; (80002d0 <printBuff+0x60>)
 8000290:	f003 ffb6 	bl	8004200 <iprintf>
		if ((i % 16) == 0)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f003 030f 	and.w	r3, r3, #15
 800029a:	2b00      	cmp	r3, #0
 800029c:	d102      	bne.n	80002a4 <printBuff+0x34>
		{
			printf(" ...\n");
 800029e:	480d      	ldr	r0, [pc, #52]	; (80002d4 <printBuff+0x64>)
 80002a0:	f004 f834 	bl	800430c <puts>
	for(int i = 0; i < ADC_BUFF_LEN; i++)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	3301      	adds	r3, #1
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002b0:	dbe8      	blt.n	8000284 <printBuff+0x14>
		}
	}

	counter++;
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <printBuff+0x58>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	3301      	adds	r3, #1
 80002b8:	4a03      	ldr	r2, [pc, #12]	; (80002c8 <printBuff+0x58>)
 80002ba:	6013      	str	r3, [r2, #0]
 80002bc:	e000      	b.n	80002c0 <printBuff+0x50>
	if(counter == THRSHLD) return;
 80002be:	bf00      	nop
}
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	2000008c 	.word	0x2000008c
 80002cc:	20000198 	.word	0x20000198
 80002d0:	080051b0 	.word	0x080051b0
 80002d4:	080051b8 	.word	0x080051b8

080002d8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(hadc1);
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f000 fffd 	bl	80012e0 <HAL_ADC_Stop_DMA>


	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80002e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ee:	f002 fb5d 	bl	80029ac <HAL_GPIO_TogglePin>

	printBuff();
 80002f2:	f7ff ffbd 	bl	8000270 <printBuff>


	HAL_ADC_Start_DMA(hadc1, (uint32_t *)adc_buff, ADC_BUFF_LEN);
 80002f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002fa:	4904      	ldr	r1, [pc, #16]	; (800030c <HAL_ADC_ConvCpltCallback+0x34>)
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f000 ff6b 	bl	80011d8 <HAL_ADC_Start_DMA>

}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000198 	.word	0x20000198

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f000 fb8d 	bl	8000a32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f81c 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031c:	f000 f924 	bl	8000568 <MX_GPIO_Init>
  MX_DMA_Init();
 8000320:	f000 f904 	bl	800052c <MX_DMA_Init>
  MX_ADC1_Init();
 8000324:	f000 f866 	bl	80003f4 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000328:	f000 f8ca 	bl	80004c0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 800032c:	4806      	ldr	r0, [pc, #24]	; (8000348 <main+0x38>)
 800032e:	f003 fd1b 	bl	8003d68 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim6, TIM_CHANNEL_6);
 8000332:	2114      	movs	r1, #20
 8000334:	4804      	ldr	r0, [pc, #16]	; (8000348 <main+0x38>)
 8000336:	f003 fd63 	bl	8003e00 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, ADC_BUFF_LEN);
 800033a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800033e:	4903      	ldr	r1, [pc, #12]	; (800034c <main+0x3c>)
 8000340:	4803      	ldr	r0, [pc, #12]	; (8000350 <main+0x40>)
 8000342:	f000 ff49 	bl	80011d8 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000346:	e7fe      	b.n	8000346 <main+0x36>
 8000348:	2000014c 	.word	0x2000014c
 800034c:	20000198 	.word	0x20000198
 8000350:	200000a0 	.word	0x200000a0

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b096      	sub	sp, #88	; 0x58
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	2244      	movs	r2, #68	; 0x44
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f003 ff44 	bl	80041f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	463b      	mov	r3, r7
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000376:	f44f 7000 	mov.w	r0, #512	; 0x200
 800037a:	f002 fb3f 	bl	80029fc <HAL_PWREx_ControlVoltageScaling>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000384:	f000 f93c 	bl	8000600 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000388:	2301      	movs	r3, #1
 800038a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800038c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000392:	2302      	movs	r3, #2
 8000394:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000396:	2303      	movs	r3, #3
 8000398:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 6;
 800039a:	2306      	movs	r3, #6
 800039c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 80;
 800039e:	2350      	movs	r3, #80	; 0x50
 80003a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003a2:	2307      	movs	r3, #7
 80003a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003a6:	2302      	movs	r3, #2
 80003a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80003aa:	2304      	movs	r3, #4
 80003ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 fb78 	bl	8002aa8 <HAL_RCC_OscConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003be:	f000 f91f 	bl	8000600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	230f      	movs	r3, #15
 80003c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c6:	2303      	movs	r3, #3
 80003c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003d6:	463b      	mov	r3, r7
 80003d8:	2104      	movs	r1, #4
 80003da:	4618      	mov	r0, r3
 80003dc:	f002 ff76 	bl	80032cc <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003e6:	f000 f90b 	bl	8000600 <Error_Handler>
  }
}
 80003ea:	bf00      	nop
 80003ec:	3758      	adds	r7, #88	; 0x58
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fa:	463b      	mov	r3, r7
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
 8000408:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800040a:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <MX_ADC1_Init+0xc0>)
 800040c:	4a2a      	ldr	r2, [pc, #168]	; (80004b8 <MX_ADC1_Init+0xc4>)
 800040e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000410:	4b28      	ldr	r3, [pc, #160]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000412:	2200      	movs	r2, #0
 8000414:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000416:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041c:	4b25      	ldr	r3, [pc, #148]	; (80004b4 <MX_ADC1_Init+0xc0>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000422:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000428:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <MX_ADC1_Init+0xc0>)
 800042a:	2204      	movs	r2, #4
 800042c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800042e:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000430:	2200      	movs	r2, #0
 8000432:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000434:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000436:	2200      	movs	r2, #0
 8000438:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800043a:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <MX_ADC1_Init+0xc0>)
 800043c:	2201      	movs	r2, #1
 800043e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000440:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000442:	2200      	movs	r2, #0
 8000444:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000448:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_ADC1_Init+0xc0>)
 800044a:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000456:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <MX_ADC1_Init+0xc0>)
 800045a:	2201      	movs	r2, #1
 800045c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000462:	2200      	movs	r2, #0
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000468:	2200      	movs	r2, #0
 800046a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800046e:	4811      	ldr	r0, [pc, #68]	; (80004b4 <MX_ADC1_Init+0xc0>)
 8000470:	f000 fd6a 	bl	8000f48 <HAL_ADC_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800047a:	f000 f8c1 	bl	8000600 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <MX_ADC1_Init+0xc8>)
 8000480:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000482:	2306      	movs	r3, #6
 8000484:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800048a:	237f      	movs	r3, #127	; 0x7f
 800048c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800048e:	2304      	movs	r3, #4
 8000490:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000496:	463b      	mov	r3, r7
 8000498:	4619      	mov	r1, r3
 800049a:	4806      	ldr	r0, [pc, #24]	; (80004b4 <MX_ADC1_Init+0xc0>)
 800049c:	f000 ff96 	bl	80013cc <HAL_ADC_ConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80004a6:	f000 f8ab 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	3718      	adds	r7, #24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	200000a0 	.word	0x200000a0
 80004b8:	50040000 	.word	0x50040000
 80004bc:	14f00020 	.word	0x14f00020

080004c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <MX_TIM6_Init+0x64>)
 80004d2:	4a15      	ldr	r2, [pc, #84]	; (8000528 <MX_TIM6_Init+0x68>)
 80004d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <MX_TIM6_Init+0x64>)
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_TIM6_Init+0x64>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000 - 1;
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <MX_TIM6_Init+0x64>)
 80004e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80004e8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_TIM6_Init+0x64>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80004f0:	480c      	ldr	r0, [pc, #48]	; (8000524 <MX_TIM6_Init+0x64>)
 80004f2:	f003 fbe1 	bl	8003cb8 <HAL_TIM_Base_Init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80004fc:	f000 f880 	bl	8000600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000500:	2320      	movs	r3, #32
 8000502:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	4619      	mov	r1, r3
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_TIM6_Init+0x64>)
 800050e:	f003 fddf 	bl	80040d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000518:	f000 f872 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	2000014c 	.word	0x2000014c
 8000528:	40001000 	.word	0x40001000

0800052c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_DMA_Init+0x38>)
 8000534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <MX_DMA_Init+0x38>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6493      	str	r3, [r2, #72]	; 0x48
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_DMA_Init+0x38>)
 8000540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	200b      	movs	r0, #11
 8000550:	f001 fe2d 	bl	80021ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000554:	200b      	movs	r0, #11
 8000556:	f001 fe46 	bl	80021e6 <HAL_NVIC_EnableIRQ>

}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800057e:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <MX_GPIO_Init+0x94>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a1e      	ldr	r2, [pc, #120]	; (80005fc <MX_GPIO_Init+0x94>)
 8000584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <MX_GPIO_Init+0x94>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <MX_GPIO_Init+0x94>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a18      	ldr	r2, [pc, #96]	; (80005fc <MX_GPIO_Init+0x94>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b16      	ldr	r3, [pc, #88]	; (80005fc <MX_GPIO_Init+0x94>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <MX_GPIO_Init+0x94>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a12      	ldr	r2, [pc, #72]	; (80005fc <MX_GPIO_Init+0x94>)
 80005b4:	f043 0302 	orr.w	r3, r3, #2
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <MX_GPIO_Init+0x94>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d0:	f002 f9d4 	bl	800297c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80005d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	4619      	mov	r1, r3
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f002 f84a 	bl	8002688 <HAL_GPIO_Init>

}
 80005f4:	bf00      	nop
 80005f6:	3720      	adds	r7, #32
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000

08000600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000604:	b672      	cpsid	i
}
 8000606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000608:	e7fe      	b.n	8000608 <Error_Handler+0x8>
	...

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_MspInit+0x44>)
 8000614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <HAL_MspInit+0x44>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6613      	str	r3, [r2, #96]	; 0x60
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_MspInit+0x44>)
 8000620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <HAL_MspInit+0x44>)
 800062c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062e:	4a08      	ldr	r2, [pc, #32]	; (8000650 <HAL_MspInit+0x44>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	6593      	str	r3, [r2, #88]	; 0x58
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_MspInit+0x44>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000

08000654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b0a0      	sub	sp, #128	; 0x80
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	225c      	movs	r2, #92	; 0x5c
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f003 fdbb 	bl	80041f0 <memset>
  if(hadc->Instance==ADC1)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a3b      	ldr	r2, [pc, #236]	; (800076c <HAL_ADC_MspInit+0x118>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d16e      	bne.n	8000762 <HAL_ADC_MspInit+0x10e>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000684:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000688:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800068a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800068e:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000690:	2303      	movs	r3, #3
 8000692:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 6;
 8000694:	2306      	movs	r3, #6
 8000696:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 43;
 8000698:	232b      	movs	r3, #43	; 0x2b
 800069a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800069c:	2307      	movs	r3, #7
 800069e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fff6 	bl	80036a4 <HAL_RCCEx_PeriphCLKConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80006be:	f7ff ff9f 	bl	8000600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006c2:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <HAL_ADC_MspInit+0x11c>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a2a      	ldr	r2, [pc, #168]	; (8000770 <HAL_ADC_MspInit+0x11c>)
 80006c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b28      	ldr	r3, [pc, #160]	; (8000770 <HAL_ADC_MspInit+0x11c>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <HAL_ADC_MspInit+0x11c>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a24      	ldr	r2, [pc, #144]	; (8000770 <HAL_ADC_MspInit+0x11c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <HAL_ADC_MspInit+0x11c>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f2:	2301      	movs	r3, #1
 80006f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006f6:	230b      	movs	r3, #11
 80006f8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000702:	4619      	mov	r1, r3
 8000704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000708:	f001 ffbe 	bl	8002688 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <HAL_ADC_MspInit+0x120>)
 800070e:	4a1a      	ldr	r2, [pc, #104]	; (8000778 <HAL_ADC_MspInit+0x124>)
 8000710:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <HAL_ADC_MspInit+0x120>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_ADC_MspInit+0x120>)
 800072c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000730:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000734:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000738:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <HAL_ADC_MspInit+0x120>)
 800073c:	2220      	movs	r2, #32
 800073e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000748:	f001 fd68 	bl	800221c <HAL_DMA_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000752:	f7ff ff55 	bl	8000600 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <HAL_ADC_MspInit+0x120>)
 800075a:	64da      	str	r2, [r3, #76]	; 0x4c
 800075c:	4a05      	ldr	r2, [pc, #20]	; (8000774 <HAL_ADC_MspInit+0x120>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000762:	bf00      	nop
 8000764:	3780      	adds	r7, #128	; 0x80
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	50040000 	.word	0x50040000
 8000770:	40021000 	.word	0x40021000
 8000774:	20000104 	.word	0x20000104
 8000778:	40020008 	.word	0x40020008

0800077c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <HAL_TIM_Base_MspInit+0x38>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d10b      	bne.n	80007a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <HAL_TIM_Base_MspInit+0x3c>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000792:	4a09      	ldr	r2, [pc, #36]	; (80007b8 <HAL_TIM_Base_MspInit+0x3c>)
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	6593      	str	r3, [r2, #88]	; 0x58
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <HAL_TIM_Base_MspInit+0x3c>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079e:	f003 0310 	and.w	r3, r3, #16
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40001000 	.word	0x40001000
 80007b8:	40021000 	.word	0x40021000

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 f968 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <DMA1_Channel1_IRQHandler+0x10>)
 8000816:	f001 fe57 	bl	80024c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000104 	.word	0x20000104

08000824 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <ITM_SendChar+0x48>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <ITM_SendChar+0x48>)
 8000834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000838:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <ITM_SendChar+0x4c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <ITM_SendChar+0x4c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000846:	bf00      	nop
 8000848:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f8      	beq.n	8000848 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000856:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	6013      	str	r3, [r2, #0]
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000edfc 	.word	0xe000edfc
 8000870:	e0000e00 	.word	0xe0000e00

08000874 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	e00a      	b.n	800089c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000886:	f3af 8000 	nop.w
 800088a:	4601      	mov	r1, r0
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	60ba      	str	r2, [r7, #8]
 8000892:	b2ca      	uxtb	r2, r1
 8000894:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	3301      	adds	r3, #1
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	dbf0      	blt.n	8000886 <_read+0x12>
	}

return len;
 80008a4:	687b      	ldr	r3, [r7, #4]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	60f8      	str	r0, [r7, #12]
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	e009      	b.n	80008d4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);   // This sends to the trace
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	60ba      	str	r2, [r7, #8]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ffab 	bl	8000824 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	3301      	adds	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	429a      	cmp	r2, r3
 80008da:	dbf1      	blt.n	80008c0 <_write+0x12>
	}
	return len;
 80008dc:	687b      	ldr	r3, [r7, #4]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_close>:

int _close(int file)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
	return -1;
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800090e:	605a      	str	r2, [r3, #4]
	return 0;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <_isatty>:

int _isatty(int file)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
	return 1;
 8000926:	2301      	movs	r3, #1
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
	return 0;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	; (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f003 fc0c 	bl	800419c <__errno>
 8000984:	4603      	mov	r3, r0
 8000986:	220c      	movs	r2, #12
 8000988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_sbrk+0x64>)
 80009a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20010000 	.word	0x20010000
 80009b0:	00000400 	.word	0x00000400
 80009b4:	20000090 	.word	0x20000090
 80009b8:	200021b0 	.word	0x200021b0

080009bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e4:	f7ff ffea 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80009ea:	490d      	ldr	r1, [pc, #52]	; (8000a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <LoopForever+0xe>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a00:	4c0a      	ldr	r4, [pc, #40]	; (8000a2c <LoopForever+0x16>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f003 fbcb 	bl	80041a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a12:	f7ff fc7d 	bl	8000310 <main>

08000a16 <LoopForever>:

LoopForever:
    b LoopForever
 8000a16:	e7fe      	b.n	8000a16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a24:	080052a0 	.word	0x080052a0
  ldr r2, =_sbss
 8000a28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a2c:	200021ac 	.word	0x200021ac

08000a30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC1_IRQHandler>

08000a32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f001 fbab 	bl	8002198 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a42:	200f      	movs	r0, #15
 8000a44:	f000 f80e 	bl	8000a64 <HAL_InitTick>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	71fb      	strb	r3, [r7, #7]
 8000a52:	e001      	b.n	8000a58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a54:	f7ff fdda 	bl	800060c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a58:	79fb      	ldrb	r3, [r7, #7]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_InitTick+0x6c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d023      	beq.n	8000ac0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <HAL_InitTick+0x70>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_InitTick+0x6c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fbb7 	bl	8002202 <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10f      	bne.n	8000aba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d809      	bhi.n	8000ab4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa8:	f001 fb81 	bl	80021ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_InitTick+0x74>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
 8000ab2:	e007      	b.n	8000ac4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	e004      	b.n	8000ac4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	73fb      	strb	r3, [r7, #15]
 8000abe:	e001      	b.n	8000ac4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x20>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x24>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_IncTick+0x24>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20002198 	.word	0x20002198

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <HAL_GetTick+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20002198 	.word	0x20002198

08000b1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	431a      	orrs	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	609a      	str	r2, [r3, #8]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3360      	adds	r3, #96	; 0x60
 8000b96:	461a      	mov	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <LL_ADC_SetOffset+0x44>)
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000bbc:	bf00      	nop
 8000bbe:	371c      	adds	r7, #28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	03fff000 	.word	0x03fff000

08000bcc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3360      	adds	r3, #96	; 0x60
 8000bda:	461a      	mov	r2, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	3360      	adds	r3, #96	; 0x60
 8000c08:	461a      	mov	r2, r3
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000c22:	bf00      	nop
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c42:	2301      	movs	r3, #1
 8000c44:	e000      	b.n	8000c48 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	3330      	adds	r3, #48	; 0x30
 8000c64:	461a      	mov	r2, r3
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	f003 030c 	and.w	r3, r3, #12
 8000c70:	4413      	add	r3, r2
 8000c72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	f003 031f 	and.w	r3, r3, #31
 8000c7e:	211f      	movs	r1, #31
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	401a      	ands	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	0e9b      	lsrs	r3, r3, #26
 8000c8c:	f003 011f 	and.w	r1, r3, #31
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	f003 031f 	and.w	r3, r3, #31
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ca0:	bf00      	nop
 8000ca2:	371c      	adds	r7, #28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	3314      	adds	r3, #20
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	0e5b      	lsrs	r3, r3, #25
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	4413      	add	r3, r2
 8000cca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	0d1b      	lsrs	r3, r3, #20
 8000cd4:	f003 031f 	and.w	r3, r3, #31
 8000cd8:	2107      	movs	r1, #7
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	0d1b      	lsrs	r3, r3, #20
 8000ce6:	f003 031f 	and.w	r3, r3, #31
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000cf6:	bf00      	nop
 8000cf8:	371c      	adds	r7, #28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	401a      	ands	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0318 	and.w	r3, r3, #24
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d28:	40d9      	lsrs	r1, r3
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	400b      	ands	r3, r1
 8000d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d32:	431a      	orrs	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	0007ffff 	.word	0x0007ffff

08000d4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6093      	str	r3, [r2, #8]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d84:	d101      	bne.n	8000d8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000da8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000dd4:	d101      	bne.n	8000dda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000df8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dfc:	f043 0201 	orr.w	r2, r3, #1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e24:	f043 0202 	orr.w	r2, r3, #2
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d101      	bne.n	8000e50 <LL_ADC_IsEnabled+0x18>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <LL_ADC_IsEnabled+0x1a>
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d101      	bne.n	8000e76 <LL_ADC_IsDisableOngoing+0x18>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <LL_ADC_IsDisableOngoing+0x1a>
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e98:	f043 0204 	orr.w	r2, r3, #4
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ec0:	f043 0210 	orr.w	r2, r3, #16
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	d101      	bne.n	8000eec <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f0e:	f043 0220 	orr.w	r2, r3, #32
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d101      	bne.n	8000f3a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e12c      	b.n	80011bc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d109      	bne.n	8000f84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff fb6f 	bl	8000654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fef1 	bl	8000d70 <LL_ADC_IsDeepPowerDownEnabled>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d004      	beq.n	8000f9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fed7 	bl	8000d4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff0c 	bl	8000dc0 <LL_ADC_IsInternalRegulatorEnabled>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d115      	bne.n	8000fda <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fef0 	bl	8000d98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fb8:	4b82      	ldr	r3, [pc, #520]	; (80011c4 <HAL_ADC_Init+0x27c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	099b      	lsrs	r3, r3, #6
 8000fbe:	4a82      	ldr	r2, [pc, #520]	; (80011c8 <HAL_ADC_Init+0x280>)
 8000fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc4:	099b      	lsrs	r3, r3, #6
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000fcc:	e002      	b.n	8000fd4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f9      	bne.n	8000fce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff feee 	bl	8000dc0 <LL_ADC_IsInternalRegulatorEnabled>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10d      	bne.n	8001006 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fee:	f043 0210 	orr.w	r2, r3, #16
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	f043 0201 	orr.w	r2, r3, #1
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff62 	bl	8000ed4 <LL_ADC_REG_IsConversionOngoing>
 8001010:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	2b00      	cmp	r3, #0
 800101c:	f040 80c5 	bne.w	80011aa <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	2b00      	cmp	r3, #0
 8001024:	f040 80c1 	bne.w	80011aa <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800102c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001030:	f043 0202 	orr.w	r2, r3, #2
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fefb 	bl	8000e38 <LL_ADC_IsEnabled>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10b      	bne.n	8001060 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001048:	4860      	ldr	r0, [pc, #384]	; (80011cc <HAL_ADC_Init+0x284>)
 800104a:	f7ff fef5 	bl	8000e38 <LL_ADC_IsEnabled>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d105      	bne.n	8001060 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	4619      	mov	r1, r3
 800105a:	485d      	ldr	r0, [pc, #372]	; (80011d0 <HAL_ADC_Init+0x288>)
 800105c:	f7ff fd5e 	bl	8000b1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7e5b      	ldrb	r3, [r3, #25]
 8001064:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800106a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001070:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001076:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800107e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 3020 	ldrb.w	r3, [r3, #32]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d106      	bne.n	800109c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	3b01      	subs	r3, #1
 8001094:	045b      	lsls	r3, r3, #17
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d009      	beq.n	80010b8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	4b45      	ldr	r3, [pc, #276]	; (80011d4 <HAL_ADC_Init+0x28c>)
 80010c0:	4013      	ands	r3, r2
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6812      	ldr	r2, [r2, #0]
 80010c6:	69b9      	ldr	r1, [r7, #24]
 80010c8:	430b      	orrs	r3, r1
 80010ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff feff 	bl	8000ed4 <LL_ADC_REG_IsConversionOngoing>
 80010d6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff20 	bl	8000f22 <LL_ADC_INJ_IsConversionOngoing>
 80010e2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d13d      	bne.n	8001166 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d13a      	bne.n	8001166 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80010f4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010fc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800110c:	f023 0302 	bic.w	r3, r3, #2
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	69b9      	ldr	r1, [r7, #24]
 8001116:	430b      	orrs	r3, r1
 8001118:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001120:	2b01      	cmp	r3, #1
 8001122:	d118      	bne.n	8001156 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800112e:	f023 0304 	bic.w	r3, r3, #4
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800113a:	4311      	orrs	r1, r2
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001140:	4311      	orrs	r1, r2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001146:	430a      	orrs	r2, r1
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0201 	orr.w	r2, r2, #1
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	e007      	b.n	8001166 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	691a      	ldr	r2, [r3, #16]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0201 	bic.w	r2, r2, #1
 8001164:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d10c      	bne.n	8001188 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	f023 010f 	bic.w	r1, r3, #15
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	1e5a      	subs	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	430a      	orrs	r2, r1
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
 8001186:	e007      	b.n	8001198 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 020f 	bic.w	r2, r2, #15
 8001196:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119c:	f023 0303 	bic.w	r3, r3, #3
 80011a0:	f043 0201 	orr.w	r2, r3, #1
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	655a      	str	r2, [r3, #84]	; 0x54
 80011a8:	e007      	b.n	80011ba <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ae:	f043 0210 	orr.w	r2, r3, #16
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80011ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	053e2d63 	.word	0x053e2d63
 80011cc:	50040000 	.word	0x50040000
 80011d0:	50040300 	.word	0x50040300
 80011d4:	fff0c007 	.word	0xfff0c007

080011d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fe73 	bl	8000ed4 <LL_ADC_REG_IsConversionOngoing>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d167      	bne.n	80012c4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d101      	bne.n	8001202 <HAL_ADC_Start_DMA+0x2a>
 80011fe:	2302      	movs	r3, #2
 8001200:	e063      	b.n	80012ca <HAL_ADC_Start_DMA+0xf2>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f000 fd7a 	bl	8001d04 <ADC_Enable>
 8001210:	4603      	mov	r3, r0
 8001212:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001214:	7dfb      	ldrb	r3, [r7, #23]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d14f      	bne.n	80012ba <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	f023 0206 	bic.w	r2, r3, #6
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	659a      	str	r2, [r3, #88]	; 0x58
 8001246:	e002      	b.n	800124e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2200      	movs	r2, #0
 800124c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a20      	ldr	r2, [pc, #128]	; (80012d4 <HAL_ADC_Start_DMA+0xfc>)
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a1f      	ldr	r2, [pc, #124]	; (80012d8 <HAL_ADC_Start_DMA+0x100>)
 800125c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <HAL_ADC_Start_DMA+0x104>)
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	221c      	movs	r2, #28
 800126c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 0210 	orr.w	r2, r2, #16
 8001284:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0201 	orr.w	r2, r2, #1
 8001294:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3340      	adds	r3, #64	; 0x40
 80012a0:	4619      	mov	r1, r3
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f001 f871 	bl	800238c <HAL_DMA_Start_IT>
 80012aa:	4603      	mov	r3, r0
 80012ac:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fde6 	bl	8000e84 <LL_ADC_REG_StartConversion>
 80012b8:	e006      	b.n	80012c8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80012c2:	e001      	b.n	80012c8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012c4:	2302      	movs	r3, #2
 80012c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	08001ecf 	.word	0x08001ecf
 80012d8:	08001fa7 	.word	0x08001fa7
 80012dc:	08001fc3 	.word	0x08001fc3

080012e0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_Stop_DMA+0x16>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e051      	b.n	800139a <HAL_ADC_Stop_DMA+0xba>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80012fe:	2103      	movs	r1, #3
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 fc43 	bl	8001b8c <ADC_ConversionStop>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d13f      	bne.n	8001390 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0201 	bic.w	r2, r2, #1
 800131e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001324:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d10f      	bne.n	800134e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	4618      	mov	r0, r3
 8001334:	f001 f88a 	bl	800244c <HAL_DMA_Abort>
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001346:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0210 	bic.w	r2, r2, #16
 800135c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d105      	bne.n	8001370 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 fd53 	bl	8001e10 <ADC_Disable>
 800136a:	4603      	mov	r3, r0
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	e002      	b.n	8001376 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 fd4d 	bl	8001e10 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d109      	bne.n	8001390 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001380:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	f043 0201 	orr.w	r2, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0b6      	sub	sp, #216	; 0xd8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x22>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e3b9      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x796>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fd6a 	bl	8000ed4 <LL_ADC_REG_IsConversionOngoing>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	f040 839e 	bne.w	8001b44 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b05      	cmp	r3, #5
 800140e:	d824      	bhi.n	800145a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	3b02      	subs	r3, #2
 8001416:	2b03      	cmp	r3, #3
 8001418:	d81b      	bhi.n	8001452 <HAL_ADC_ConfigChannel+0x86>
 800141a:	a201      	add	r2, pc, #4	; (adr r2, 8001420 <HAL_ADC_ConfigChannel+0x54>)
 800141c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001420:	08001431 	.word	0x08001431
 8001424:	08001439 	.word	0x08001439
 8001428:	08001441 	.word	0x08001441
 800142c:	08001449 	.word	0x08001449
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	220c      	movs	r2, #12
 8001434:	605a      	str	r2, [r3, #4]
          break;
 8001436:	e011      	b.n	800145c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2212      	movs	r2, #18
 800143c:	605a      	str	r2, [r3, #4]
          break;
 800143e:	e00d      	b.n	800145c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	2218      	movs	r2, #24
 8001444:	605a      	str	r2, [r3, #4]
          break;
 8001446:	e009      	b.n	800145c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800144e:	605a      	str	r2, [r3, #4]
          break;
 8001450:	e004      	b.n	800145c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2206      	movs	r2, #6
 8001456:	605a      	str	r2, [r3, #4]
          break;
 8001458:	e000      	b.n	800145c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800145a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	f7ff fbf3 	bl	8000c54 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fd2e 	bl	8000ed4 <LL_ADC_REG_IsConversionOngoing>
 8001478:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fd4e 	bl	8000f22 <LL_ADC_INJ_IsConversionOngoing>
 8001486:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800148a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800148e:	2b00      	cmp	r3, #0
 8001490:	f040 81a6 	bne.w	80017e0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001494:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001498:	2b00      	cmp	r3, #0
 800149a:	f040 81a1 	bne.w	80017e0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	6819      	ldr	r1, [r3, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	461a      	mov	r2, r3
 80014ac:	f7ff fbfe 	bl	8000cac <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	08db      	lsrs	r3, r3, #3
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d00a      	beq.n	80014e8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	6919      	ldr	r1, [r3, #16]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80014e2:	f7ff fb4f 	bl	8000b84 <LL_ADC_SetOffset>
 80014e6:	e17b      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fb6c 	bl	8000bcc <LL_ADC_GetOffsetChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10a      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x148>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fb61 	bl	8000bcc <LL_ADC_GetOffsetChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	0e9b      	lsrs	r3, r3, #26
 800150e:	f003 021f 	and.w	r2, r3, #31
 8001512:	e01e      	b.n	8001552 <HAL_ADC_ConfigChannel+0x186>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fb56 	bl	8000bcc <LL_ADC_GetOffsetChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001532:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001536:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800153a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001542:	2320      	movs	r3, #32
 8001544:	e004      	b.n	8001550 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001546:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800154a:	fab3 f383 	clz	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800155a:	2b00      	cmp	r3, #0
 800155c:	d105      	bne.n	800156a <HAL_ADC_ConfigChannel+0x19e>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	0e9b      	lsrs	r3, r3, #26
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	e018      	b.n	800159c <HAL_ADC_ConfigChannel+0x1d0>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800157e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001582:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800158e:	2320      	movs	r3, #32
 8001590:	e004      	b.n	800159c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001592:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800159c:	429a      	cmp	r2, r3
 800159e:	d106      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fb25 	bl	8000bf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2101      	movs	r1, #1
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fb09 	bl	8000bcc <LL_ADC_GetOffsetChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10a      	bne.n	80015da <HAL_ADC_ConfigChannel+0x20e>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2101      	movs	r1, #1
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fafe 	bl	8000bcc <LL_ADC_GetOffsetChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	0e9b      	lsrs	r3, r3, #26
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	e01e      	b.n	8001618 <HAL_ADC_ConfigChannel+0x24c>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2101      	movs	r1, #1
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff faf3 	bl	8000bcc <LL_ADC_GetOffsetChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015f0:	fa93 f3a3 	rbit	r3, r3
 80015f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80015f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80015fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001600:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001608:	2320      	movs	r3, #32
 800160a:	e004      	b.n	8001616 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800160c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001610:	fab3 f383 	clz	r3, r3
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x264>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	0e9b      	lsrs	r3, r3, #26
 800162a:	f003 031f 	and.w	r3, r3, #31
 800162e:	e018      	b.n	8001662 <HAL_ADC_ConfigChannel+0x296>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001644:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001648:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800164c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001654:	2320      	movs	r3, #32
 8001656:	e004      	b.n	8001662 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800165c:	fab3 f383 	clz	r3, r3
 8001660:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001662:	429a      	cmp	r2, r3
 8001664:	d106      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2200      	movs	r2, #0
 800166c:	2101      	movs	r1, #1
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fac2 	bl	8000bf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2102      	movs	r1, #2
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff faa6 	bl	8000bcc <LL_ADC_GetOffsetChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10a      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x2d4>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2102      	movs	r1, #2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fa9b 	bl	8000bcc <LL_ADC_GetOffsetChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	0e9b      	lsrs	r3, r3, #26
 800169a:	f003 021f 	and.w	r2, r3, #31
 800169e:	e01e      	b.n	80016de <HAL_ADC_ConfigChannel+0x312>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2102      	movs	r1, #2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fa90 	bl	8000bcc <LL_ADC_GetOffsetChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80016be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80016c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80016ce:	2320      	movs	r3, #32
 80016d0:	e004      	b.n	80016dc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80016d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016d6:	fab3 f383 	clz	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d105      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x32a>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	0e9b      	lsrs	r3, r3, #26
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	e016      	b.n	8001724 <HAL_ADC_ConfigChannel+0x358>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001708:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800170a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800170e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001716:	2320      	movs	r3, #32
 8001718:	e004      	b.n	8001724 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800171a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800171e:	fab3 f383 	clz	r3, r3
 8001722:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001724:	429a      	cmp	r2, r3
 8001726:	d106      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	2102      	movs	r1, #2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fa61 	bl	8000bf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2103      	movs	r1, #3
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fa45 	bl	8000bcc <LL_ADC_GetOffsetChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10a      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x396>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2103      	movs	r1, #3
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fa3a 	bl	8000bcc <LL_ADC_GetOffsetChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	0e9b      	lsrs	r3, r3, #26
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	e017      	b.n	8001792 <HAL_ADC_ConfigChannel+0x3c6>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2103      	movs	r1, #3
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fa2f 	bl	8000bcc <LL_ADC_GetOffsetChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001774:	fa93 f3a3 	rbit	r3, r3
 8001778:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800177a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800177c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800177e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001784:	2320      	movs	r3, #32
 8001786:	e003      	b.n	8001790 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800178a:	fab3 f383 	clz	r3, r3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800179a:	2b00      	cmp	r3, #0
 800179c:	d105      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x3de>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	0e9b      	lsrs	r3, r3, #26
 80017a4:	f003 031f 	and.w	r3, r3, #31
 80017a8:	e011      	b.n	80017ce <HAL_ADC_ConfigChannel+0x402>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80017b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80017bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80017c2:	2320      	movs	r3, #32
 80017c4:	e003      	b.n	80017ce <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80017c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017c8:	fab3 f383 	clz	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d106      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2200      	movs	r2, #0
 80017d8:	2103      	movs	r1, #3
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fa0c 	bl	8000bf8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fb27 	bl	8000e38 <LL_ADC_IsEnabled>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f040 813f 	bne.w	8001a70 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	6819      	ldr	r1, [r3, #0]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	461a      	mov	r2, r3
 8001800:	f7ff fa80 	bl	8000d04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4a8e      	ldr	r2, [pc, #568]	; (8001a44 <HAL_ADC_ConfigChannel+0x678>)
 800180a:	4293      	cmp	r3, r2
 800180c:	f040 8130 	bne.w	8001a70 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10b      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x46c>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0e9b      	lsrs	r3, r3, #26
 8001826:	3301      	adds	r3, #1
 8001828:	f003 031f 	and.w	r3, r3, #31
 800182c:	2b09      	cmp	r3, #9
 800182e:	bf94      	ite	ls
 8001830:	2301      	movls	r3, #1
 8001832:	2300      	movhi	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	e019      	b.n	800186c <HAL_ADC_ConfigChannel+0x4a0>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001840:	fa93 f3a3 	rbit	r3, r3
 8001844:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001848:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800184a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001850:	2320      	movs	r3, #32
 8001852:	e003      	b.n	800185c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001854:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	3301      	adds	r3, #1
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	2b09      	cmp	r3, #9
 8001864:	bf94      	ite	ls
 8001866:	2301      	movls	r3, #1
 8001868:	2300      	movhi	r3, #0
 800186a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800186c:	2b00      	cmp	r3, #0
 800186e:	d079      	beq.n	8001964 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001878:	2b00      	cmp	r3, #0
 800187a:	d107      	bne.n	800188c <HAL_ADC_ConfigChannel+0x4c0>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0e9b      	lsrs	r3, r3, #26
 8001882:	3301      	adds	r3, #1
 8001884:	069b      	lsls	r3, r3, #26
 8001886:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800188a:	e015      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x4ec>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800189a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800189c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800189e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80018a4:	2320      	movs	r3, #32
 80018a6:	e003      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80018a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	3301      	adds	r3, #1
 80018b2:	069b      	lsls	r3, r3, #26
 80018b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d109      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x50c>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	0e9b      	lsrs	r3, r3, #26
 80018ca:	3301      	adds	r3, #1
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	2101      	movs	r1, #1
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	e017      	b.n	8001908 <HAL_ADC_ConfigChannel+0x53c>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80018e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018e8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80018ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80018f0:	2320      	movs	r3, #32
 80018f2:	e003      	b.n	80018fc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80018f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	3301      	adds	r3, #1
 80018fe:	f003 031f 	and.w	r3, r3, #31
 8001902:	2101      	movs	r1, #1
 8001904:	fa01 f303 	lsl.w	r3, r1, r3
 8001908:	ea42 0103 	orr.w	r1, r2, r3
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10a      	bne.n	800192e <HAL_ADC_ConfigChannel+0x562>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0e9b      	lsrs	r3, r3, #26
 800191e:	3301      	adds	r3, #1
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	051b      	lsls	r3, r3, #20
 800192c:	e018      	b.n	8001960 <HAL_ADC_ConfigChannel+0x594>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001936:	fa93 f3a3 	rbit	r3, r3
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001946:	2320      	movs	r3, #32
 8001948:	e003      	b.n	8001952 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800194a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	3301      	adds	r3, #1
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001960:	430b      	orrs	r3, r1
 8001962:	e080      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196c:	2b00      	cmp	r3, #0
 800196e:	d107      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x5b4>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0e9b      	lsrs	r3, r3, #26
 8001976:	3301      	adds	r3, #1
 8001978:	069b      	lsls	r3, r3, #26
 800197a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800197e:	e015      	b.n	80019ac <HAL_ADC_ConfigChannel+0x5e0>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001988:	fa93 f3a3 	rbit	r3, r3
 800198c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800198e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001990:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001998:	2320      	movs	r3, #32
 800199a:	e003      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	3301      	adds	r3, #1
 80019a6:	069b      	lsls	r3, r3, #26
 80019a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d109      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x600>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	0e9b      	lsrs	r3, r3, #26
 80019be:	3301      	adds	r3, #1
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	2101      	movs	r1, #1
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	e017      	b.n	80019fc <HAL_ADC_ConfigChannel+0x630>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	61fb      	str	r3, [r7, #28]
  return result;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80019e4:	2320      	movs	r3, #32
 80019e6:	e003      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	fab3 f383 	clz	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	ea42 0103 	orr.w	r1, r2, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10d      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x65c>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0e9b      	lsrs	r3, r3, #26
 8001a12:	3301      	adds	r3, #1
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3b1e      	subs	r3, #30
 8001a20:	051b      	lsls	r3, r3, #20
 8001a22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a26:	e01d      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x698>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	613b      	str	r3, [r7, #16]
  return result;
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d103      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001a40:	2320      	movs	r3, #32
 8001a42:	e005      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x684>
 8001a44:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	f003 021f 	and.w	r2, r3, #31
 8001a56:	4613      	mov	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3b1e      	subs	r3, #30
 8001a5e:	051b      	lsls	r3, r3, #20
 8001a60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a64:	430b      	orrs	r3, r1
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	6892      	ldr	r2, [r2, #8]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7ff f91e 	bl	8000cac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <HAL_ADC_ConfigChannel+0x7a0>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d06c      	beq.n	8001b56 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a7c:	483c      	ldr	r0, [pc, #240]	; (8001b70 <HAL_ADC_ConfigChannel+0x7a4>)
 8001a7e:	f7ff f873 	bl	8000b68 <LL_ADC_GetCommonPathInternalCh>
 8001a82:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a3a      	ldr	r2, [pc, #232]	; (8001b74 <HAL_ADC_ConfigChannel+0x7a8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d127      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d121      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a35      	ldr	r2, [pc, #212]	; (8001b78 <HAL_ADC_ConfigChannel+0x7ac>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d157      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001aaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001aae:	4619      	mov	r1, r3
 8001ab0:	482f      	ldr	r0, [pc, #188]	; (8001b70 <HAL_ADC_ConfigChannel+0x7a4>)
 8001ab2:	f7ff f846 	bl	8000b42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ab6:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <HAL_ADC_ConfigChannel+0x7b0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	099b      	lsrs	r3, r3, #6
 8001abc:	4a30      	ldr	r2, [pc, #192]	; (8001b80 <HAL_ADC_ConfigChannel+0x7b4>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	099b      	lsrs	r3, r3, #6
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ad0:	e002      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f9      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ade:	e03a      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a27      	ldr	r2, [pc, #156]	; (8001b84 <HAL_ADC_ConfigChannel+0x7b8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d113      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x746>
 8001aea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001aee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10d      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1f      	ldr	r2, [pc, #124]	; (8001b78 <HAL_ADC_ConfigChannel+0x7ac>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d12a      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4819      	ldr	r0, [pc, #100]	; (8001b70 <HAL_ADC_ConfigChannel+0x7a4>)
 8001b0c:	f7ff f819 	bl	8000b42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b10:	e021      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1c      	ldr	r2, [pc, #112]	; (8001b88 <HAL_ADC_ConfigChannel+0x7bc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d11c      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d116      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <HAL_ADC_ConfigChannel+0x7ac>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d111      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480c      	ldr	r0, [pc, #48]	; (8001b70 <HAL_ADC_ConfigChannel+0x7a4>)
 8001b3e:	f7ff f800 	bl	8000b42 <LL_ADC_SetCommonPathInternalCh>
 8001b42:	e008      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b48:	f043 0220 	orr.w	r2, r3, #32
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	37d8      	adds	r7, #216	; 0xd8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	80080000 	.word	0x80080000
 8001b70:	50040300 	.word	0x50040300
 8001b74:	c7520000 	.word	0xc7520000
 8001b78:	50040000 	.word	0x50040000
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	053e2d63 	.word	0x053e2d63
 8001b84:	cb840000 	.word	0xcb840000
 8001b88:	80000001 	.word	0x80000001

08001b8c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f996 	bl	8000ed4 <LL_ADC_REG_IsConversionOngoing>
 8001ba8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f9b7 	bl	8000f22 <LL_ADC_INJ_IsConversionOngoing>
 8001bb4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d103      	bne.n	8001bc4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8098 	beq.w	8001cf4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d02a      	beq.n	8001c28 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	7e5b      	ldrb	r3, [r3, #25]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d126      	bne.n	8001c28 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	7e1b      	ldrb	r3, [r3, #24]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d122      	bne.n	8001c28 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001be6:	e014      	b.n	8001c12 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	4a45      	ldr	r2, [pc, #276]	; (8001d00 <ADC_ConversionStop+0x174>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d90d      	bls.n	8001c0c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf4:	f043 0210 	orr.w	r2, r3, #16
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e074      	b.n	8001cf6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1c:	2b40      	cmp	r3, #64	; 0x40
 8001c1e:	d1e3      	bne.n	8001be8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2240      	movs	r2, #64	; 0x40
 8001c26:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d014      	beq.n	8001c58 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f94e 	bl	8000ed4 <LL_ADC_REG_IsConversionOngoing>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00c      	beq.n	8001c58 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f90b 	bl	8000e5e <LL_ADC_IsDisableOngoing>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d104      	bne.n	8001c58 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f92a 	bl	8000eac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d014      	beq.n	8001c88 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f95d 	bl	8000f22 <LL_ADC_INJ_IsConversionOngoing>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00c      	beq.n	8001c88 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff f8f3 	bl	8000e5e <LL_ADC_IsDisableOngoing>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d104      	bne.n	8001c88 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff f939 	bl	8000efa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d005      	beq.n	8001c9a <ADC_ConversionStop+0x10e>
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d105      	bne.n	8001ca0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001c94:	230c      	movs	r3, #12
 8001c96:	617b      	str	r3, [r7, #20]
        break;
 8001c98:	e005      	b.n	8001ca6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	617b      	str	r3, [r7, #20]
        break;
 8001c9e:	e002      	b.n	8001ca6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	617b      	str	r3, [r7, #20]
        break;
 8001ca4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001ca6:	f7fe ff2d 	bl	8000b04 <HAL_GetTick>
 8001caa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001cac:	e01b      	b.n	8001ce6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001cae:	f7fe ff29 	bl	8000b04 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d914      	bls.n	8001ce6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00d      	beq.n	8001ce6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cce:	f043 0210 	orr.w	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	f043 0201 	orr.w	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e007      	b.n	8001cf6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1dc      	bne.n	8001cae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3720      	adds	r7, #32
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	a33fffff 	.word	0xa33fffff

08001d04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff f88f 	bl	8000e38 <LL_ADC_IsEnabled>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d169      	bne.n	8001df4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <ADC_Enable+0xfc>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00d      	beq.n	8001d4a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d32:	f043 0210 	orr.w	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e055      	b.n	8001df6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f84a 	bl	8000de8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001d54:	482b      	ldr	r0, [pc, #172]	; (8001e04 <ADC_Enable+0x100>)
 8001d56:	f7fe ff07 	bl	8000b68 <LL_ADC_GetCommonPathInternalCh>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d013      	beq.n	8001d8c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d64:	4b28      	ldr	r3, [pc, #160]	; (8001e08 <ADC_Enable+0x104>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	099b      	lsrs	r3, r3, #6
 8001d6a:	4a28      	ldr	r2, [pc, #160]	; (8001e0c <ADC_Enable+0x108>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	099b      	lsrs	r3, r3, #6
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001d7e:	e002      	b.n	8001d86 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f9      	bne.n	8001d80 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001d8c:	f7fe feba 	bl	8000b04 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d92:	e028      	b.n	8001de6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff f84d 	bl	8000e38 <LL_ADC_IsEnabled>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d104      	bne.n	8001dae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff f81d 	bl	8000de8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dae:	f7fe fea9 	bl	8000b04 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d914      	bls.n	8001de6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d00d      	beq.n	8001de6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	f043 0210 	orr.w	r2, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	f043 0201 	orr.w	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e007      	b.n	8001df6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d1cf      	bne.n	8001d94 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	8000003f 	.word	0x8000003f
 8001e04:	50040300 	.word	0x50040300
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	053e2d63 	.word	0x053e2d63

08001e10 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff f81e 	bl	8000e5e <LL_ADC_IsDisableOngoing>
 8001e22:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff f805 	bl	8000e38 <LL_ADC_IsEnabled>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d047      	beq.n	8001ec4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d144      	bne.n	8001ec4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 030d 	and.w	r3, r3, #13
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d10c      	bne.n	8001e62 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe ffdf 	bl	8000e10 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2203      	movs	r2, #3
 8001e58:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e5a:	f7fe fe53 	bl	8000b04 <HAL_GetTick>
 8001e5e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e60:	e029      	b.n	8001eb6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	f043 0210 	orr.w	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	f043 0201 	orr.w	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e023      	b.n	8001ec6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e7e:	f7fe fe41 	bl	8000b04 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d914      	bls.n	8001eb6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00d      	beq.n	8001eb6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	f043 0210 	orr.w	r2, r3, #16
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	f043 0201 	orr.w	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e007      	b.n	8001ec6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1dc      	bne.n	8001e7e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d14b      	bne.n	8001f80 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d021      	beq.n	8001f46 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fe91 	bl	8000c2e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d032      	beq.n	8001f78 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d12b      	bne.n	8001f78 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d11f      	bne.n	8001f78 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
 8001f44:	e018      	b.n	8001f78 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d111      	bne.n	8001f78 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f70:	f043 0201 	orr.w	r2, r3, #1
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f7fe f9ad 	bl	80002d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f7e:	e00e      	b.n	8001f9e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f7ff fa12 	bl	80013b6 <HAL_ADC_ErrorCallback>
}
 8001f92:	e004      	b.n	8001f9e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	4798      	blx	r3
}
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7ff f9f4 	bl	80013a2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	f043 0204 	orr.w	r2, r3, #4
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f7ff f9e4 	bl	80013b6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002014:	4013      	ands	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <__NVIC_GetPriorityGrouping+0x18>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	f003 0307 	and.w	r3, r3, #7
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	2b00      	cmp	r3, #0
 800206c:	db0b      	blt.n	8002086 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4907      	ldr	r1, [pc, #28]	; (8002094 <__NVIC_EnableIRQ+0x38>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2001      	movs	r0, #1
 800207e:	fa00 f202 	lsl.w	r2, r0, r2
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000e100 	.word	0xe000e100

08002098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	db0a      	blt.n	80020c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	490c      	ldr	r1, [pc, #48]	; (80020e4 <__NVIC_SetPriority+0x4c>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	440b      	add	r3, r1
 80020bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c0:	e00a      	b.n	80020d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	; (80020e8 <__NVIC_SetPriority+0x50>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3b04      	subs	r3, #4
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	761a      	strb	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	bf28      	it	cs
 800210a:	2304      	movcs	r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3304      	adds	r3, #4
 8002112:	2b06      	cmp	r3, #6
 8002114:	d902      	bls.n	800211c <NVIC_EncodePriority+0x30>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3b03      	subs	r3, #3
 800211a:	e000      	b.n	800211e <NVIC_EncodePriority+0x32>
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002134:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43d9      	mvns	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	4313      	orrs	r3, r2
         );
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002164:	d301      	bcc.n	800216a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002166:	2301      	movs	r3, #1
 8002168:	e00f      	b.n	800218a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216a:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <SysTick_Config+0x40>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002172:	210f      	movs	r1, #15
 8002174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002178:	f7ff ff8e 	bl	8002098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <SysTick_Config+0x40>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <SysTick_Config+0x40>)
 8002184:	2207      	movs	r2, #7
 8002186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	e000e010 	.word	0xe000e010

08002198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ff29 	bl	8001ff8 <__NVIC_SetPriorityGrouping>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021c0:	f7ff ff3e 	bl	8002040 <__NVIC_GetPriorityGrouping>
 80021c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f7ff ff8e 	bl	80020ec <NVIC_EncodePriority>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff5d 	bl	8002098 <__NVIC_SetPriority>
}
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff31 	bl	800205c <__NVIC_EnableIRQ>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffa2 	bl	8002154 <SysTick_Config>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e098      	b.n	8002360 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	4b4d      	ldr	r3, [pc, #308]	; (800236c <HAL_DMA_Init+0x150>)
 8002236:	429a      	cmp	r2, r3
 8002238:	d80f      	bhi.n	800225a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	4b4b      	ldr	r3, [pc, #300]	; (8002370 <HAL_DMA_Init+0x154>)
 8002242:	4413      	add	r3, r2
 8002244:	4a4b      	ldr	r2, [pc, #300]	; (8002374 <HAL_DMA_Init+0x158>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	009a      	lsls	r2, r3, #2
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a48      	ldr	r2, [pc, #288]	; (8002378 <HAL_DMA_Init+0x15c>)
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
 8002258:	e00e      	b.n	8002278 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	4b46      	ldr	r3, [pc, #280]	; (800237c <HAL_DMA_Init+0x160>)
 8002262:	4413      	add	r3, r2
 8002264:	4a43      	ldr	r2, [pc, #268]	; (8002374 <HAL_DMA_Init+0x158>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	009a      	lsls	r2, r3, #2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a42      	ldr	r2, [pc, #264]	; (8002380 <HAL_DMA_Init+0x164>)
 8002276:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800228e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002292:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800229c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022d2:	d039      	beq.n	8002348 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	4a27      	ldr	r2, [pc, #156]	; (8002378 <HAL_DMA_Init+0x15c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d11a      	bne.n	8002314 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <HAL_DMA_Init+0x168>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f003 031c 	and.w	r3, r3, #28
 80022ea:	210f      	movs	r1, #15
 80022ec:	fa01 f303 	lsl.w	r3, r1, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	4924      	ldr	r1, [pc, #144]	; (8002384 <HAL_DMA_Init+0x168>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022f8:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_DMA_Init+0x168>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	f003 031c 	and.w	r3, r3, #28
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	491d      	ldr	r1, [pc, #116]	; (8002384 <HAL_DMA_Init+0x168>)
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
 8002312:	e019      	b.n	8002348 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002314:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <HAL_DMA_Init+0x16c>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231c:	f003 031c 	and.w	r3, r3, #28
 8002320:	210f      	movs	r1, #15
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	4917      	ldr	r1, [pc, #92]	; (8002388 <HAL_DMA_Init+0x16c>)
 800232a:	4013      	ands	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800232e:	4b16      	ldr	r3, [pc, #88]	; (8002388 <HAL_DMA_Init+0x16c>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6859      	ldr	r1, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f003 031c 	and.w	r3, r3, #28
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	4911      	ldr	r1, [pc, #68]	; (8002388 <HAL_DMA_Init+0x16c>)
 8002344:	4313      	orrs	r3, r2
 8002346:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40020407 	.word	0x40020407
 8002370:	bffdfff8 	.word	0xbffdfff8
 8002374:	cccccccd 	.word	0xcccccccd
 8002378:	40020000 	.word	0x40020000
 800237c:	bffdfbf8 	.word	0xbffdfbf8
 8002380:	40020400 	.word	0x40020400
 8002384:	400200a8 	.word	0x400200a8
 8002388:	400204a8 	.word	0x400204a8

0800238c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_DMA_Start_IT+0x20>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e04b      	b.n	8002444 <HAL_DMA_Start_IT+0xb8>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d13a      	bne.n	8002436 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0201 	bic.w	r2, r2, #1
 80023dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f91e 	bl	8002626 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 020e 	orr.w	r2, r2, #14
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	e00f      	b.n	8002424 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0204 	bic.w	r2, r2, #4
 8002412:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 020a 	orr.w	r2, r2, #10
 8002422:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e005      	b.n	8002442 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800243e:	2302      	movs	r3, #2
 8002440:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002442:	7dfb      	ldrb	r3, [r7, #23]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d008      	beq.n	8002476 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2204      	movs	r2, #4
 8002468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e022      	b.n	80024bc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 020e 	bic.w	r2, r2, #14
 8002484:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0201 	bic.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f003 021c 	and.w	r2, r3, #28
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	2101      	movs	r1, #1
 80024a4:	fa01 f202 	lsl.w	r2, r1, r2
 80024a8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f003 031c 	and.w	r3, r3, #28
 80024e8:	2204      	movs	r2, #4
 80024ea:	409a      	lsls	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d026      	beq.n	8002542 <HAL_DMA_IRQHandler+0x7a>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d021      	beq.n	8002542 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d107      	bne.n	800251c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0204 	bic.w	r2, r2, #4
 800251a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002520:	f003 021c 	and.w	r2, r3, #28
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	2104      	movs	r1, #4
 800252a:	fa01 f202 	lsl.w	r2, r1, r2
 800252e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	2b00      	cmp	r3, #0
 8002536:	d071      	beq.n	800261c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002540:	e06c      	b.n	800261c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f003 031c 	and.w	r3, r3, #28
 800254a:	2202      	movs	r2, #2
 800254c:	409a      	lsls	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d02e      	beq.n	80025b4 <HAL_DMA_IRQHandler+0xec>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d029      	beq.n	80025b4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10b      	bne.n	8002586 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 020a 	bic.w	r2, r2, #10
 800257c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f003 021c 	and.w	r2, r3, #28
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	2102      	movs	r1, #2
 8002594:	fa01 f202 	lsl.w	r2, r1, r2
 8002598:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d038      	beq.n	800261c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025b2:	e033      	b.n	800261c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	f003 031c 	and.w	r3, r3, #28
 80025bc:	2208      	movs	r2, #8
 80025be:	409a      	lsls	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d02a      	beq.n	800261e <HAL_DMA_IRQHandler+0x156>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d025      	beq.n	800261e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 020e 	bic.w	r2, r2, #14
 80025e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f003 021c 	and.w	r2, r3, #28
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f202 	lsl.w	r2, r1, r2
 80025f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002610:	2b00      	cmp	r3, #0
 8002612:	d004      	beq.n	800261e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800261c:	bf00      	nop
 800261e:	bf00      	nop
}
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002638:	f003 021c 	and.w	r2, r3, #28
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f202 	lsl.w	r2, r1, r2
 8002646:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b10      	cmp	r3, #16
 8002656:	d108      	bne.n	800266a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002668:	e007      	b.n	800267a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	60da      	str	r2, [r3, #12]
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002696:	e154      	b.n	8002942 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	fa01 f303 	lsl.w	r3, r1, r3
 80026a4:	4013      	ands	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8146 	beq.w	800293c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d005      	beq.n	80026c8 <HAL_GPIO_Init+0x40>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d130      	bne.n	800272a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026fe:	2201      	movs	r2, #1
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	f003 0201 	and.w	r2, r3, #1
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b03      	cmp	r3, #3
 8002734:	d017      	beq.n	8002766 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d123      	bne.n	80027ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	08da      	lsrs	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3208      	adds	r2, #8
 800277a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	220f      	movs	r2, #15
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	08da      	lsrs	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3208      	adds	r2, #8
 80027b4:	6939      	ldr	r1, [r7, #16]
 80027b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	2203      	movs	r2, #3
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0203 	and.w	r2, r3, #3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80a0 	beq.w	800293c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fc:	4b58      	ldr	r3, [pc, #352]	; (8002960 <HAL_GPIO_Init+0x2d8>)
 80027fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002800:	4a57      	ldr	r2, [pc, #348]	; (8002960 <HAL_GPIO_Init+0x2d8>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6613      	str	r3, [r2, #96]	; 0x60
 8002808:	4b55      	ldr	r3, [pc, #340]	; (8002960 <HAL_GPIO_Init+0x2d8>)
 800280a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002814:	4a53      	ldr	r2, [pc, #332]	; (8002964 <HAL_GPIO_Init+0x2dc>)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3302      	adds	r3, #2
 800281c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	220f      	movs	r2, #15
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800283e:	d019      	beq.n	8002874 <HAL_GPIO_Init+0x1ec>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a49      	ldr	r2, [pc, #292]	; (8002968 <HAL_GPIO_Init+0x2e0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d013      	beq.n	8002870 <HAL_GPIO_Init+0x1e8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a48      	ldr	r2, [pc, #288]	; (800296c <HAL_GPIO_Init+0x2e4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00d      	beq.n	800286c <HAL_GPIO_Init+0x1e4>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a47      	ldr	r2, [pc, #284]	; (8002970 <HAL_GPIO_Init+0x2e8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d007      	beq.n	8002868 <HAL_GPIO_Init+0x1e0>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a46      	ldr	r2, [pc, #280]	; (8002974 <HAL_GPIO_Init+0x2ec>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d101      	bne.n	8002864 <HAL_GPIO_Init+0x1dc>
 8002860:	2304      	movs	r3, #4
 8002862:	e008      	b.n	8002876 <HAL_GPIO_Init+0x1ee>
 8002864:	2307      	movs	r3, #7
 8002866:	e006      	b.n	8002876 <HAL_GPIO_Init+0x1ee>
 8002868:	2303      	movs	r3, #3
 800286a:	e004      	b.n	8002876 <HAL_GPIO_Init+0x1ee>
 800286c:	2302      	movs	r3, #2
 800286e:	e002      	b.n	8002876 <HAL_GPIO_Init+0x1ee>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <HAL_GPIO_Init+0x1ee>
 8002874:	2300      	movs	r3, #0
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	f002 0203 	and.w	r2, r2, #3
 800287c:	0092      	lsls	r2, r2, #2
 800287e:	4093      	lsls	r3, r2
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002886:	4937      	ldr	r1, [pc, #220]	; (8002964 <HAL_GPIO_Init+0x2dc>)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002894:	4b38      	ldr	r3, [pc, #224]	; (8002978 <HAL_GPIO_Init+0x2f0>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	43db      	mvns	r3, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028b8:	4a2f      	ldr	r2, [pc, #188]	; (8002978 <HAL_GPIO_Init+0x2f0>)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028be:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <HAL_GPIO_Init+0x2f0>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4013      	ands	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028e2:	4a25      	ldr	r2, [pc, #148]	; (8002978 <HAL_GPIO_Init+0x2f0>)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028e8:	4b23      	ldr	r3, [pc, #140]	; (8002978 <HAL_GPIO_Init+0x2f0>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800290c:	4a1a      	ldr	r2, [pc, #104]	; (8002978 <HAL_GPIO_Init+0x2f0>)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002912:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_GPIO_Init+0x2f0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43db      	mvns	r3, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4013      	ands	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002936:	4a10      	ldr	r2, [pc, #64]	; (8002978 <HAL_GPIO_Init+0x2f0>)
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	3301      	adds	r3, #1
 8002940:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f aea3 	bne.w	8002698 <HAL_GPIO_Init+0x10>
  }
}
 8002952:	bf00      	nop
 8002954:	bf00      	nop
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40021000 	.word	0x40021000
 8002964:	40010000 	.word	0x40010000
 8002968:	48000400 	.word	0x48000400
 800296c:	48000800 	.word	0x48000800
 8002970:	48000c00 	.word	0x48000c00
 8002974:	48001000 	.word	0x48001000
 8002978:	40010400 	.word	0x40010400

0800297c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	807b      	strh	r3, [r7, #2]
 8002988:	4613      	mov	r3, r2
 800298a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800298c:	787b      	ldrb	r3, [r7, #1]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002992:	887a      	ldrh	r2, [r7, #2]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002998:	e002      	b.n	80029a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800299a:	887a      	ldrh	r2, [r7, #2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029be:	887a      	ldrh	r2, [r7, #2]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4013      	ands	r3, r2
 80029c4:	041a      	lsls	r2, r3, #16
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	43d9      	mvns	r1, r3
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	400b      	ands	r3, r1
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40007000 	.word	0x40007000

080029fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a0a:	d130      	bne.n	8002a6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a0c:	4b23      	ldr	r3, [pc, #140]	; (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a18:	d038      	beq.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a1a:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a22:	4a1e      	ldr	r2, [pc, #120]	; (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2232      	movs	r2, #50	; 0x32
 8002a30:	fb02 f303 	mul.w	r3, r2, r3
 8002a34:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	0c9b      	lsrs	r3, r3, #18
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a40:	e002      	b.n	8002a48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a54:	d102      	bne.n	8002a5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1f2      	bne.n	8002a42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a68:	d110      	bne.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e00f      	b.n	8002a8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7a:	d007      	beq.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a7c:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a84:	4a05      	ldr	r2, [pc, #20]	; (8002a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	431bde83 	.word	0x431bde83

08002aa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e3fe      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aba:	4ba1      	ldr	r3, [pc, #644]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac4:	4b9e      	ldr	r3, [pc, #632]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80e4 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <HAL_RCC_OscConfig+0x4a>
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b0c      	cmp	r3, #12
 8002ae6:	f040 808b 	bne.w	8002c00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	f040 8087 	bne.w	8002c00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002af2:	4b93      	ldr	r3, [pc, #588]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x62>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e3d6      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1a      	ldr	r2, [r3, #32]
 8002b0e:	4b8c      	ldr	r3, [pc, #560]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d004      	beq.n	8002b24 <HAL_RCC_OscConfig+0x7c>
 8002b1a:	4b89      	ldr	r3, [pc, #548]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b22:	e005      	b.n	8002b30 <HAL_RCC_OscConfig+0x88>
 8002b24:	4b86      	ldr	r3, [pc, #536]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d223      	bcs.n	8002b7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fd53 	bl	80035e4 <RCC_SetFlashLatencyFromMSIRange>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e3b7      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b48:	4b7d      	ldr	r3, [pc, #500]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a7c      	ldr	r2, [pc, #496]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002b4e:	f043 0308 	orr.w	r3, r3, #8
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b7a      	ldr	r3, [pc, #488]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4977      	ldr	r1, [pc, #476]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b66:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	4972      	ldr	r1, [pc, #456]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
 8002b7a:	e025      	b.n	8002bc8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b7c:	4b70      	ldr	r3, [pc, #448]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a6f      	ldr	r2, [pc, #444]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002b82:	f043 0308 	orr.w	r3, r3, #8
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b6d      	ldr	r3, [pc, #436]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	496a      	ldr	r1, [pc, #424]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b9a:	4b69      	ldr	r3, [pc, #420]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	4965      	ldr	r1, [pc, #404]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fd13 	bl	80035e4 <RCC_SetFlashLatencyFromMSIRange>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e377      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bc8:	f000 fc80 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b5c      	ldr	r3, [pc, #368]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	495a      	ldr	r1, [pc, #360]	; (8002d44 <HAL_RCC_OscConfig+0x29c>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
 8002be4:	4a58      	ldr	r2, [pc, #352]	; (8002d48 <HAL_RCC_OscConfig+0x2a0>)
 8002be6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002be8:	4b58      	ldr	r3, [pc, #352]	; (8002d4c <HAL_RCC_OscConfig+0x2a4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd ff39 	bl	8000a64 <HAL_InitTick>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d052      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	e35b      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d032      	beq.n	8002c6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c08:	4b4d      	ldr	r3, [pc, #308]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a4c      	ldr	r2, [pc, #304]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c14:	f7fd ff76 	bl	8000b04 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c1c:	f7fd ff72 	bl	8000b04 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e344      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c2e:	4b44      	ldr	r3, [pc, #272]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c3a:	4b41      	ldr	r3, [pc, #260]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a40      	ldr	r2, [pc, #256]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002c40:	f043 0308 	orr.w	r3, r3, #8
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b3e      	ldr	r3, [pc, #248]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	493b      	ldr	r1, [pc, #236]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c58:	4b39      	ldr	r3, [pc, #228]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	4936      	ldr	r1, [pc, #216]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
 8002c6c:	e01a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c6e:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a33      	ldr	r2, [pc, #204]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c7a:	f7fd ff43 	bl	8000b04 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c82:	f7fd ff3f 	bl	8000b04 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e311      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c94:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCC_OscConfig+0x1da>
 8002ca0:	e000      	b.n	8002ca4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ca2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d074      	beq.n	8002d9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d005      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x21a>
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b0c      	cmp	r3, #12
 8002cba:	d10e      	bne.n	8002cda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d10b      	bne.n	8002cda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc2:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d064      	beq.n	8002d98 <HAL_RCC_OscConfig+0x2f0>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d160      	bne.n	8002d98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e2ee      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x24a>
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	e01d      	b.n	8002d2e <HAL_RCC_OscConfig+0x286>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cfa:	d10c      	bne.n	8002d16 <HAL_RCC_OscConfig+0x26e>
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0f      	ldr	r2, [pc, #60]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	e00b      	b.n	8002d2e <HAL_RCC_OscConfig+0x286>
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a06      	ldr	r2, [pc, #24]	; (8002d40 <HAL_RCC_OscConfig+0x298>)
 8002d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01c      	beq.n	8002d70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fd fee5 	bl	8000b04 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d3c:	e011      	b.n	8002d62 <HAL_RCC_OscConfig+0x2ba>
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	080051c0 	.word	0x080051c0
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fd fed8 	bl	8000b04 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e2aa      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d62:	4baf      	ldr	r3, [pc, #700]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x2a8>
 8002d6e:	e014      	b.n	8002d9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fd fec8 	bl	8000b04 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d78:	f7fd fec4 	bl	8000b04 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	; 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e296      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d8a:	4ba5      	ldr	r3, [pc, #660]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x2d0>
 8002d96:	e000      	b.n	8002d9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d060      	beq.n	8002e68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_OscConfig+0x310>
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b0c      	cmp	r3, #12
 8002db0:	d119      	bne.n	8002de6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d116      	bne.n	8002de6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002db8:	4b99      	ldr	r3, [pc, #612]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x328>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e273      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd0:	4b93      	ldr	r3, [pc, #588]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	4990      	ldr	r1, [pc, #576]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de4:	e040      	b.n	8002e68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d023      	beq.n	8002e36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dee:	4b8c      	ldr	r3, [pc, #560]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a8b      	ldr	r2, [pc, #556]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7fd fe83 	bl	8000b04 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e02:	f7fd fe7f 	bl	8000b04 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e251      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e14:	4b82      	ldr	r3, [pc, #520]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e20:	4b7f      	ldr	r3, [pc, #508]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	497c      	ldr	r1, [pc, #496]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
 8002e34:	e018      	b.n	8002e68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e36:	4b7a      	ldr	r3, [pc, #488]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a79      	ldr	r2, [pc, #484]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e42:	f7fd fe5f 	bl	8000b04 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4a:	f7fd fe5b 	bl	8000b04 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e22d      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e5c:	4b70      	ldr	r3, [pc, #448]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f0      	bne.n	8002e4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d03c      	beq.n	8002eee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7c:	4b68      	ldr	r3, [pc, #416]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e82:	4a67      	ldr	r2, [pc, #412]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8c:	f7fd fe3a 	bl	8000b04 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e94:	f7fd fe36 	bl	8000b04 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e208      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ea6:	4b5e      	ldr	r3, [pc, #376]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ef      	beq.n	8002e94 <HAL_RCC_OscConfig+0x3ec>
 8002eb4:	e01b      	b.n	8002eee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb6:	4b5a      	ldr	r3, [pc, #360]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebc:	4a58      	ldr	r2, [pc, #352]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec6:	f7fd fe1d 	bl	8000b04 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ece:	f7fd fe19 	bl	8000b04 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e1eb      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ee0:	4b4f      	ldr	r3, [pc, #316]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1ef      	bne.n	8002ece <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80a6 	beq.w	8003048 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efc:	2300      	movs	r3, #0
 8002efe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f00:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10d      	bne.n	8002f28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0c:	4b44      	ldr	r3, [pc, #272]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	4a43      	ldr	r2, [pc, #268]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f16:	6593      	str	r3, [r2, #88]	; 0x58
 8002f18:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f24:	2301      	movs	r3, #1
 8002f26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f28:	4b3e      	ldr	r3, [pc, #248]	; (8003024 <HAL_RCC_OscConfig+0x57c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d118      	bne.n	8002f66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f34:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <HAL_RCC_OscConfig+0x57c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a3a      	ldr	r2, [pc, #232]	; (8003024 <HAL_RCC_OscConfig+0x57c>)
 8002f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f40:	f7fd fde0 	bl	8000b04 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f48:	f7fd fddc 	bl	8000b04 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e1ae      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5a:	4b32      	ldr	r3, [pc, #200]	; (8003024 <HAL_RCC_OscConfig+0x57c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d108      	bne.n	8002f80 <HAL_RCC_OscConfig+0x4d8>
 8002f6e:	4b2c      	ldr	r3, [pc, #176]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f74:	4a2a      	ldr	r2, [pc, #168]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f7e:	e024      	b.n	8002fca <HAL_RCC_OscConfig+0x522>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d110      	bne.n	8002faa <HAL_RCC_OscConfig+0x502>
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	4a24      	ldr	r2, [pc, #144]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002f90:	f043 0304 	orr.w	r3, r3, #4
 8002f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f98:	4b21      	ldr	r3, [pc, #132]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9e:	4a20      	ldr	r2, [pc, #128]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fa8:	e00f      	b.n	8002fca <HAL_RCC_OscConfig+0x522>
 8002faa:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb0:	4a1b      	ldr	r2, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fba:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc0:	4a17      	ldr	r2, [pc, #92]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002fc2:	f023 0304 	bic.w	r3, r3, #4
 8002fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d016      	beq.n	8003000 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd2:	f7fd fd97 	bl	8000b04 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd8:	e00a      	b.n	8002ff0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fda:	f7fd fd93 	bl	8000b04 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e163      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_OscConfig+0x578>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0ed      	beq.n	8002fda <HAL_RCC_OscConfig+0x532>
 8002ffe:	e01a      	b.n	8003036 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003000:	f7fd fd80 	bl	8000b04 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003006:	e00f      	b.n	8003028 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fd fd7c 	bl	8000b04 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d906      	bls.n	8003028 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e14c      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000
 8003024:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003028:	4ba5      	ldr	r3, [pc, #660]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1e8      	bne.n	8003008 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003036:	7ffb      	ldrb	r3, [r7, #31]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d105      	bne.n	8003048 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303c:	4ba0      	ldr	r3, [pc, #640]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003040:	4a9f      	ldr	r2, [pc, #636]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 8003042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003046:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d03c      	beq.n	80030ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01c      	beq.n	8003096 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800305c:	4b98      	ldr	r3, [pc, #608]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 800305e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003062:	4a97      	ldr	r2, [pc, #604]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7fd fd4a 	bl	8000b04 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003074:	f7fd fd46 	bl	8000b04 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e118      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003086:	4b8e      	ldr	r3, [pc, #568]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 8003088:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0ef      	beq.n	8003074 <HAL_RCC_OscConfig+0x5cc>
 8003094:	e01b      	b.n	80030ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003096:	4b8a      	ldr	r3, [pc, #552]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 8003098:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800309c:	4a88      	ldr	r2, [pc, #544]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a6:	f7fd fd2d 	bl	8000b04 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ae:	f7fd fd29 	bl	8000b04 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e0fb      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030c0:	4b7f      	ldr	r3, [pc, #508]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 80030c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ef      	bne.n	80030ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80ef 	beq.w	80032b6 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	2b02      	cmp	r3, #2
 80030de:	f040 80c5 	bne.w	800326c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80030e2:	4b77      	ldr	r3, [pc, #476]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f003 0203 	and.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d12c      	bne.n	8003150 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	3b01      	subs	r3, #1
 8003102:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d123      	bne.n	8003150 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003112:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d11b      	bne.n	8003150 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003122:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d113      	bne.n	8003150 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	3b01      	subs	r3, #1
 8003136:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d109      	bne.n	8003150 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	085b      	lsrs	r3, r3, #1
 8003148:	3b01      	subs	r3, #1
 800314a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d067      	beq.n	8003220 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b0c      	cmp	r3, #12
 8003154:	d062      	beq.n	800321c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003156:	4b5a      	ldr	r3, [pc, #360]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0a8      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003166:	4b56      	ldr	r3, [pc, #344]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a55      	ldr	r2, [pc, #340]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 800316c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003170:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003172:	f7fd fcc7 	bl	8000b04 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317a:	f7fd fcc3 	bl	8000b04 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e095      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800318c:	4b4c      	ldr	r3, [pc, #304]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1f0      	bne.n	800317a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003198:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	4b49      	ldr	r3, [pc, #292]	; (80032c4 <HAL_RCC_OscConfig+0x81c>)
 800319e:	4013      	ands	r3, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031a8:	3a01      	subs	r2, #1
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	4311      	orrs	r1, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031b2:	0212      	lsls	r2, r2, #8
 80031b4:	4311      	orrs	r1, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031ba:	0852      	lsrs	r2, r2, #1
 80031bc:	3a01      	subs	r2, #1
 80031be:	0552      	lsls	r2, r2, #21
 80031c0:	4311      	orrs	r1, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031c6:	0852      	lsrs	r2, r2, #1
 80031c8:	3a01      	subs	r2, #1
 80031ca:	0652      	lsls	r2, r2, #25
 80031cc:	4311      	orrs	r1, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031d2:	06d2      	lsls	r2, r2, #27
 80031d4:	430a      	orrs	r2, r1
 80031d6:	493a      	ldr	r1, [pc, #232]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031dc:	4b38      	ldr	r3, [pc, #224]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a37      	ldr	r2, [pc, #220]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 80031e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031e8:	4b35      	ldr	r3, [pc, #212]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4a34      	ldr	r2, [pc, #208]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 80031ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031f4:	f7fd fc86 	bl	8000b04 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fd fc82 	bl	8000b04 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e054      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320e:	4b2c      	ldr	r3, [pc, #176]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800321a:	e04c      	b.n	80032b6 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e04b      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003220:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d144      	bne.n	80032b6 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800322c:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a23      	ldr	r2, [pc, #140]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 8003232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003236:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003238:	4b21      	ldr	r3, [pc, #132]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a20      	ldr	r2, [pc, #128]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 800323e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003242:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003244:	f7fd fc5e 	bl	8000b04 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324c:	f7fd fc5a 	bl	8000b04 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e02c      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325e:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0x7a4>
 800326a:	e024      	b.n	80032b6 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d01f      	beq.n	80032b2 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 8003278:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800327c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7fd fc41 	bl	8000b04 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003286:	f7fd fc3d 	bl	8000b04 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e00f      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003298:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f0      	bne.n	8003286 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80032a4:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	4905      	ldr	r1, [pc, #20]	; (80032c0 <HAL_RCC_OscConfig+0x818>)
 80032aa:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <HAL_RCC_OscConfig+0x820>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	60cb      	str	r3, [r1, #12]
 80032b0:	e001      	b.n	80032b6 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3720      	adds	r7, #32
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000
 80032c4:	019d808c 	.word	0x019d808c
 80032c8:	feeefffc 	.word	0xfeeefffc

080032cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0e7      	b.n	80034b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032e0:	4b75      	ldr	r3, [pc, #468]	; (80034b8 <HAL_RCC_ClockConfig+0x1ec>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d910      	bls.n	8003310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ee:	4b72      	ldr	r3, [pc, #456]	; (80034b8 <HAL_RCC_ClockConfig+0x1ec>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 0207 	bic.w	r2, r3, #7
 80032f6:	4970      	ldr	r1, [pc, #448]	; (80034b8 <HAL_RCC_ClockConfig+0x1ec>)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b6e      	ldr	r3, [pc, #440]	; (80034b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0cf      	b.n	80034b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d010      	beq.n	800333e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	4b66      	ldr	r3, [pc, #408]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003328:	429a      	cmp	r2, r3
 800332a:	d908      	bls.n	800333e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800332c:	4b63      	ldr	r3, [pc, #396]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4960      	ldr	r1, [pc, #384]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d04c      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d107      	bne.n	8003362 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003352:	4b5a      	ldr	r3, [pc, #360]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d121      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e0a6      	b.n	80034b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d107      	bne.n	800337a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800336a:	4b54      	ldr	r3, [pc, #336]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d115      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e09a      	b.n	80034b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d107      	bne.n	8003392 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003382:	4b4e      	ldr	r3, [pc, #312]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e08e      	b.n	80034b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003392:	4b4a      	ldr	r3, [pc, #296]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e086      	b.n	80034b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033a2:	4b46      	ldr	r3, [pc, #280]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f023 0203 	bic.w	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4943      	ldr	r1, [pc, #268]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b4:	f7fd fba6 	bl	8000b04 <HAL_GetTick>
 80033b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033bc:	f7fd fba2 	bl	8000b04 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e06e      	b.n	80034b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	4b3a      	ldr	r3, [pc, #232]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 020c 	and.w	r2, r3, #12
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d1eb      	bne.n	80033bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d010      	beq.n	8003412 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	4b31      	ldr	r3, [pc, #196]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d208      	bcs.n	8003412 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003400:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	492b      	ldr	r1, [pc, #172]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003412:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d210      	bcs.n	8003442 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003420:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f023 0207 	bic.w	r2, r3, #7
 8003428:	4923      	ldr	r1, [pc, #140]	; (80034b8 <HAL_RCC_ClockConfig+0x1ec>)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	4313      	orrs	r3, r2
 800342e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003430:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d001      	beq.n	8003442 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e036      	b.n	80034b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800344e:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	4918      	ldr	r1, [pc, #96]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 800345c:	4313      	orrs	r3, r2
 800345e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d009      	beq.n	8003480 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800346c:	4b13      	ldr	r3, [pc, #76]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4910      	ldr	r1, [pc, #64]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 800347c:	4313      	orrs	r3, r2
 800347e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003480:	f000 f824 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 8003484:	4602      	mov	r2, r0
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <HAL_RCC_ClockConfig+0x1f0>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	091b      	lsrs	r3, r3, #4
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	490b      	ldr	r1, [pc, #44]	; (80034c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003492:	5ccb      	ldrb	r3, [r1, r3]
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
 800349c:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <HAL_RCC_ClockConfig+0x1f8>)
 800349e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034a0:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <HAL_RCC_ClockConfig+0x1fc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fd fadd 	bl	8000a64 <HAL_InitTick>
 80034aa:	4603      	mov	r3, r0
 80034ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80034ae:	7afb      	ldrb	r3, [r7, #11]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40022000 	.word	0x40022000
 80034bc:	40021000 	.word	0x40021000
 80034c0:	080051c0 	.word	0x080051c0
 80034c4:	20000000 	.word	0x20000000
 80034c8:	20000004 	.word	0x20000004

080034cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b089      	sub	sp, #36	; 0x24
 80034d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	2300      	movs	r3, #0
 80034d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034da:	4b3e      	ldr	r3, [pc, #248]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e4:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x34>
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	d121      	bne.n	800353e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d11e      	bne.n	800353e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003500:	4b34      	ldr	r3, [pc, #208]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d107      	bne.n	800351c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800350c:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800350e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	e005      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800351c:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003528:	4a2b      	ldr	r2, [pc, #172]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003530:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10d      	bne.n	8003554 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800353c:	e00a      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2b04      	cmp	r3, #4
 8003542:	d102      	bne.n	800354a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003544:	4b25      	ldr	r3, [pc, #148]	; (80035dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	e004      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d101      	bne.n	8003554 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003550:	4b23      	ldr	r3, [pc, #140]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003552:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b0c      	cmp	r3, #12
 8003558:	d134      	bne.n	80035c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800355a:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d003      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0xa6>
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b03      	cmp	r3, #3
 800356e:	d003      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0xac>
 8003570:	e005      	b.n	800357e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003572:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003574:	617b      	str	r3, [r7, #20]
      break;
 8003576:	e005      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003578:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800357a:	617b      	str	r3, [r7, #20]
      break;
 800357c:	e002      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	617b      	str	r3, [r7, #20]
      break;
 8003582:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003584:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	3301      	adds	r3, #1
 8003590:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	fb02 f203 	mul.w	r2, r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035aa:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	0e5b      	lsrs	r3, r3, #25
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	3301      	adds	r3, #1
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035c4:	69bb      	ldr	r3, [r7, #24]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3724      	adds	r7, #36	; 0x24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000
 80035d8:	080051d0 	.word	0x080051d0
 80035dc:	00f42400 	.word	0x00f42400
 80035e0:	016e3600 	.word	0x016e3600

080035e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035ec:	2300      	movs	r3, #0
 80035ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035f0:	4b2a      	ldr	r3, [pc, #168]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035fc:	f7ff f9f0 	bl	80029e0 <HAL_PWREx_GetVoltageRange>
 8003600:	6178      	str	r0, [r7, #20]
 8003602:	e014      	b.n	800362e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003604:	4b25      	ldr	r3, [pc, #148]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003608:	4a24      	ldr	r2, [pc, #144]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360e:	6593      	str	r3, [r2, #88]	; 0x58
 8003610:	4b22      	ldr	r3, [pc, #136]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800361c:	f7ff f9e0 	bl	80029e0 <HAL_PWREx_GetVoltageRange>
 8003620:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003622:	4b1e      	ldr	r3, [pc, #120]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003626:	4a1d      	ldr	r2, [pc, #116]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003634:	d10b      	bne.n	800364e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b80      	cmp	r3, #128	; 0x80
 800363a:	d919      	bls.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2ba0      	cmp	r3, #160	; 0xa0
 8003640:	d902      	bls.n	8003648 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003642:	2302      	movs	r3, #2
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	e013      	b.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003648:	2301      	movs	r3, #1
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	e010      	b.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b80      	cmp	r3, #128	; 0x80
 8003652:	d902      	bls.n	800365a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003654:	2303      	movs	r3, #3
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	e00a      	b.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b80      	cmp	r3, #128	; 0x80
 800365e:	d102      	bne.n	8003666 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003660:	2302      	movs	r3, #2
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	e004      	b.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b70      	cmp	r3, #112	; 0x70
 800366a:	d101      	bne.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800366c:	2301      	movs	r3, #1
 800366e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 0207 	bic.w	r2, r3, #7
 8003678:	4909      	ldr	r1, [pc, #36]	; (80036a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003680:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	429a      	cmp	r2, r3
 800368c:	d001      	beq.n	8003692 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	40022000 	.word	0x40022000

080036a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036ac:	2300      	movs	r3, #0
 80036ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036b0:	2300      	movs	r3, #0
 80036b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d031      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036c8:	d01a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80036ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036ce:	d814      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d009      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036d8:	d10f      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80036da:	4b5d      	ldr	r3, [pc, #372]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	4a5c      	ldr	r2, [pc, #368]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036e6:	e00c      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f9f0 	bl	8003ad4 <RCCEx_PLLSAI1_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036f8:	e003      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	74fb      	strb	r3, [r7, #19]
      break;
 80036fe:	e000      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003700:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003702:	7cfb      	ldrb	r3, [r7, #19]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10b      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003708:	4b51      	ldr	r3, [pc, #324]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	494e      	ldr	r1, [pc, #312]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800371e:	e001      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 809e 	beq.w	800386e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003732:	2300      	movs	r3, #0
 8003734:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003736:	4b46      	ldr	r3, [pc, #280]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003746:	2300      	movs	r3, #0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00d      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374c:	4b40      	ldr	r3, [pc, #256]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	4a3f      	ldr	r2, [pc, #252]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003756:	6593      	str	r3, [r2, #88]	; 0x58
 8003758:	4b3d      	ldr	r3, [pc, #244]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800375a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003764:	2301      	movs	r3, #1
 8003766:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003768:	4b3a      	ldr	r3, [pc, #232]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a39      	ldr	r2, [pc, #228]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800376e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003772:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003774:	f7fd f9c6 	bl	8000b04 <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800377a:	e009      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fd f9c2 	bl	8000b04 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d902      	bls.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	74fb      	strb	r3, [r7, #19]
        break;
 800378e:	e005      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003790:	4b30      	ldr	r3, [pc, #192]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ef      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d15a      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037a2:	4b2b      	ldr	r3, [pc, #172]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01e      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d019      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037ca:	4b21      	ldr	r3, [pc, #132]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d0:	4a1f      	ldr	r2, [pc, #124]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037da:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e0:	4a1b      	ldr	r2, [pc, #108]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037ea:	4a19      	ldr	r2, [pc, #100]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d016      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fd f982 	bl	8000b04 <HAL_GetTick>
 8003800:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003802:	e00b      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003804:	f7fd f97e 	bl	8000b04 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d902      	bls.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	74fb      	strb	r3, [r7, #19]
            break;
 800381a:	e006      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0ec      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10b      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003830:	4b07      	ldr	r3, [pc, #28]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	4904      	ldr	r1, [pc, #16]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003846:	e009      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	74bb      	strb	r3, [r7, #18]
 800384c:	e006      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000
 8003854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003858:	7cfb      	ldrb	r3, [r7, #19]
 800385a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800385c:	7c7b      	ldrb	r3, [r7, #17]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d105      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003862:	4b9b      	ldr	r3, [pc, #620]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	4a9a      	ldr	r2, [pc, #616]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800387a:	4b95      	ldr	r3, [pc, #596]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003880:	f023 0203 	bic.w	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	4991      	ldr	r1, [pc, #580]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800389c:	4b8c      	ldr	r3, [pc, #560]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a2:	f023 020c 	bic.w	r2, r3, #12
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	4989      	ldr	r1, [pc, #548]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038be:	4b84      	ldr	r3, [pc, #528]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	4980      	ldr	r1, [pc, #512]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038e0:	4b7b      	ldr	r3, [pc, #492]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	4978      	ldr	r1, [pc, #480]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003902:	4b73      	ldr	r3, [pc, #460]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	496f      	ldr	r1, [pc, #444]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003924:	4b6a      	ldr	r3, [pc, #424]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	4967      	ldr	r1, [pc, #412]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003946:	4b62      	ldr	r3, [pc, #392]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	495e      	ldr	r1, [pc, #376]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003968:	4b59      	ldr	r3, [pc, #356]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	4956      	ldr	r1, [pc, #344]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800398a:	4b51      	ldr	r3, [pc, #324]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	494d      	ldr	r1, [pc, #308]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d028      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039ac:	4b48      	ldr	r3, [pc, #288]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ba:	4945      	ldr	r1, [pc, #276]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ca:	d106      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039cc:	4b40      	ldr	r3, [pc, #256]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4a3f      	ldr	r2, [pc, #252]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039d6:	60d3      	str	r3, [r2, #12]
 80039d8:	e011      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039e2:	d10c      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3304      	adds	r3, #4
 80039e8:	2101      	movs	r1, #1
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 f872 	bl	8003ad4 <RCCEx_PLLSAI1_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039f4:	7cfb      	ldrb	r3, [r7, #19]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80039fa:	7cfb      	ldrb	r3, [r7, #19]
 80039fc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d028      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a0a:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a18:	492d      	ldr	r1, [pc, #180]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a28:	d106      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a2a:	4b29      	ldr	r3, [pc, #164]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	4a28      	ldr	r2, [pc, #160]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a34:	60d3      	str	r3, [r2, #12]
 8003a36:	e011      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3304      	adds	r3, #4
 8003a46:	2101      	movs	r1, #1
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 f843 	bl	8003ad4 <RCCEx_PLLSAI1_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a52:	7cfb      	ldrb	r3, [r7, #19]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003a58:	7cfb      	ldrb	r3, [r7, #19]
 8003a5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01c      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a76:	4916      	ldr	r1, [pc, #88]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a86:	d10c      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f820 	bl	8003ad4 <RCCEx_PLLSAI1_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003aae:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abc:	4904      	ldr	r1, [pc, #16]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ac4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000

08003ad4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ae2:	4b74      	ldr	r3, [pc, #464]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d018      	beq.n	8003b20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003aee:	4b71      	ldr	r3, [pc, #452]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 0203 	and.w	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d10d      	bne.n	8003b1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
       ||
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b06:	4b6b      	ldr	r3, [pc, #428]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
       ||
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d047      	beq.n	8003baa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
 8003b1e:	e044      	b.n	8003baa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d018      	beq.n	8003b5a <RCCEx_PLLSAI1_Config+0x86>
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d825      	bhi.n	8003b78 <RCCEx_PLLSAI1_Config+0xa4>
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d002      	beq.n	8003b36 <RCCEx_PLLSAI1_Config+0x62>
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d009      	beq.n	8003b48 <RCCEx_PLLSAI1_Config+0x74>
 8003b34:	e020      	b.n	8003b78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b36:	4b5f      	ldr	r3, [pc, #380]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d11d      	bne.n	8003b7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b46:	e01a      	b.n	8003b7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b48:	4b5a      	ldr	r3, [pc, #360]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d116      	bne.n	8003b82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b58:	e013      	b.n	8003b82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b5a:	4b56      	ldr	r3, [pc, #344]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10f      	bne.n	8003b86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b66:	4b53      	ldr	r3, [pc, #332]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b76:	e006      	b.n	8003b86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b7c:	e004      	b.n	8003b88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b7e:	bf00      	nop
 8003b80:	e002      	b.n	8003b88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b82:	bf00      	nop
 8003b84:	e000      	b.n	8003b88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10d      	bne.n	8003baa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b8e:	4b49      	ldr	r3, [pc, #292]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6819      	ldr	r1, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	4943      	ldr	r1, [pc, #268]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d17c      	bne.n	8003caa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bb0:	4b40      	ldr	r3, [pc, #256]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a3f      	ldr	r2, [pc, #252]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bbc:	f7fc ffa2 	bl	8000b04 <HAL_GetTick>
 8003bc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bc2:	e009      	b.n	8003bd8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bc4:	f7fc ff9e 	bl	8000b04 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d902      	bls.n	8003bd8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	73fb      	strb	r3, [r7, #15]
        break;
 8003bd6:	e005      	b.n	8003be4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bd8:	4b36      	ldr	r3, [pc, #216]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1ef      	bne.n	8003bc4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d15f      	bne.n	8003caa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d110      	bne.n	8003c12 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bf0:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003bf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6892      	ldr	r2, [r2, #8]
 8003c00:	0211      	lsls	r1, r2, #8
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	68d2      	ldr	r2, [r2, #12]
 8003c06:	06d2      	lsls	r2, r2, #27
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	492a      	ldr	r1, [pc, #168]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	610b      	str	r3, [r1, #16]
 8003c10:	e027      	b.n	8003c62 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d112      	bne.n	8003c3e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c18:	4b26      	ldr	r3, [pc, #152]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6892      	ldr	r2, [r2, #8]
 8003c28:	0211      	lsls	r1, r2, #8
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6912      	ldr	r2, [r2, #16]
 8003c2e:	0852      	lsrs	r2, r2, #1
 8003c30:	3a01      	subs	r2, #1
 8003c32:	0552      	lsls	r2, r2, #21
 8003c34:	430a      	orrs	r2, r1
 8003c36:	491f      	ldr	r1, [pc, #124]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	610b      	str	r3, [r1, #16]
 8003c3c:	e011      	b.n	8003c62 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c3e:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6892      	ldr	r2, [r2, #8]
 8003c4e:	0211      	lsls	r1, r2, #8
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6952      	ldr	r2, [r2, #20]
 8003c54:	0852      	lsrs	r2, r2, #1
 8003c56:	3a01      	subs	r2, #1
 8003c58:	0652      	lsls	r2, r2, #25
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	4915      	ldr	r1, [pc, #84]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c62:	4b14      	ldr	r3, [pc, #80]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a13      	ldr	r2, [pc, #76]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6e:	f7fc ff49 	bl	8000b04 <HAL_GetTick>
 8003c72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c74:	e009      	b.n	8003c8a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c76:	f7fc ff45 	bl	8000b04 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d902      	bls.n	8003c8a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	73fb      	strb	r3, [r7, #15]
          break;
 8003c88:	e005      	b.n	8003c96 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0ef      	beq.n	8003c76 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d106      	bne.n	8003caa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	4903      	ldr	r1, [pc, #12]	; (8003cb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000

08003cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e049      	b.n	8003d5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fc fd4c 	bl	800077c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	f000 f960 	bl	8003fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d001      	beq.n	8003d80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e033      	b.n	8003de8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <HAL_TIM_Base_Start+0x8c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d009      	beq.n	8003da6 <HAL_TIM_Base_Start+0x3e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9a:	d004      	beq.n	8003da6 <HAL_TIM_Base_Start+0x3e>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <HAL_TIM_Base_Start+0x90>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d115      	bne.n	8003dd2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <HAL_TIM_Base_Start+0x94>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b06      	cmp	r3, #6
 8003db6:	d015      	beq.n	8003de4 <HAL_TIM_Base_Start+0x7c>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dbe:	d011      	beq.n	8003de4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd0:	e008      	b.n	8003de4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0201 	orr.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e000      	b.n	8003de6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	40014000 	.word	0x40014000
 8003dfc:	00010007 	.word	0x00010007

08003e00 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <HAL_TIM_OC_Start+0x24>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	bf14      	ite	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	2300      	moveq	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e03c      	b.n	8003e9e <HAL_TIM_OC_Start+0x9e>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d109      	bne.n	8003e3e <HAL_TIM_OC_Start+0x3e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	bf14      	ite	ne
 8003e36:	2301      	movne	r3, #1
 8003e38:	2300      	moveq	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	e02f      	b.n	8003e9e <HAL_TIM_OC_Start+0x9e>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d109      	bne.n	8003e58 <HAL_TIM_OC_Start+0x58>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	bf14      	ite	ne
 8003e50:	2301      	movne	r3, #1
 8003e52:	2300      	moveq	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	e022      	b.n	8003e9e <HAL_TIM_OC_Start+0x9e>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2b0c      	cmp	r3, #12
 8003e5c:	d109      	bne.n	8003e72 <HAL_TIM_OC_Start+0x72>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	bf14      	ite	ne
 8003e6a:	2301      	movne	r3, #1
 8003e6c:	2300      	moveq	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	e015      	b.n	8003e9e <HAL_TIM_OC_Start+0x9e>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b10      	cmp	r3, #16
 8003e76:	d109      	bne.n	8003e8c <HAL_TIM_OC_Start+0x8c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	bf14      	ite	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	2300      	moveq	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	e008      	b.n	8003e9e <HAL_TIM_OC_Start+0x9e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	bf14      	ite	ne
 8003e98:	2301      	movne	r3, #1
 8003e9a:	2300      	moveq	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e07e      	b.n	8003fa4 <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d104      	bne.n	8003eb6 <HAL_TIM_OC_Start+0xb6>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb4:	e023      	b.n	8003efe <HAL_TIM_OC_Start+0xfe>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d104      	bne.n	8003ec6 <HAL_TIM_OC_Start+0xc6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec4:	e01b      	b.n	8003efe <HAL_TIM_OC_Start+0xfe>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d104      	bne.n	8003ed6 <HAL_TIM_OC_Start+0xd6>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed4:	e013      	b.n	8003efe <HAL_TIM_OC_Start+0xfe>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d104      	bne.n	8003ee6 <HAL_TIM_OC_Start+0xe6>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ee4:	e00b      	b.n	8003efe <HAL_TIM_OC_Start+0xfe>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b10      	cmp	r3, #16
 8003eea:	d104      	bne.n	8003ef6 <HAL_TIM_OC_Start+0xf6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef4:	e003      	b.n	8003efe <HAL_TIM_OC_Start+0xfe>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2201      	movs	r2, #1
 8003f04:	6839      	ldr	r1, [r7, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 f8bc 	bl	8004084 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a26      	ldr	r2, [pc, #152]	; (8003fac <HAL_TIM_OC_Start+0x1ac>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <HAL_TIM_OC_Start+0x12a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a25      	ldr	r2, [pc, #148]	; (8003fb0 <HAL_TIM_OC_Start+0x1b0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <HAL_TIM_OC_Start+0x12a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a23      	ldr	r2, [pc, #140]	; (8003fb4 <HAL_TIM_OC_Start+0x1b4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d101      	bne.n	8003f2e <HAL_TIM_OC_Start+0x12e>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <HAL_TIM_OC_Start+0x130>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a18      	ldr	r2, [pc, #96]	; (8003fac <HAL_TIM_OC_Start+0x1ac>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d009      	beq.n	8003f62 <HAL_TIM_OC_Start+0x162>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f56:	d004      	beq.n	8003f62 <HAL_TIM_OC_Start+0x162>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <HAL_TIM_OC_Start+0x1b0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d115      	bne.n	8003f8e <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <HAL_TIM_OC_Start+0x1b8>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b06      	cmp	r3, #6
 8003f72:	d015      	beq.n	8003fa0 <HAL_TIM_OC_Start+0x1a0>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7a:	d011      	beq.n	8003fa0 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8c:	e008      	b.n	8003fa0 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e000      	b.n	8003fa2 <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	40014000 	.word	0x40014000
 8003fb4:	40014400 	.word	0x40014400
 8003fb8:	00010007 	.word	0x00010007

08003fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a2a      	ldr	r2, [pc, #168]	; (8004078 <TIM_Base_SetConfig+0xbc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d003      	beq.n	8003fdc <TIM_Base_SetConfig+0x20>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fda:	d108      	bne.n	8003fee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a21      	ldr	r2, [pc, #132]	; (8004078 <TIM_Base_SetConfig+0xbc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00b      	beq.n	800400e <TIM_Base_SetConfig+0x52>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffc:	d007      	beq.n	800400e <TIM_Base_SetConfig+0x52>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a1e      	ldr	r2, [pc, #120]	; (800407c <TIM_Base_SetConfig+0xc0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d003      	beq.n	800400e <TIM_Base_SetConfig+0x52>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <TIM_Base_SetConfig+0xc4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d108      	bne.n	8004020 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a0c      	ldr	r2, [pc, #48]	; (8004078 <TIM_Base_SetConfig+0xbc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d007      	beq.n	800405c <TIM_Base_SetConfig+0xa0>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a0b      	ldr	r2, [pc, #44]	; (800407c <TIM_Base_SetConfig+0xc0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_Base_SetConfig+0xa0>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <TIM_Base_SetConfig+0xc4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d103      	bne.n	8004064 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	615a      	str	r2, [r3, #20]
}
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40012c00 	.word	0x40012c00
 800407c:	40014000 	.word	0x40014000
 8004080:	40014400 	.word	0x40014400

08004084 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	2201      	movs	r2, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a1a      	ldr	r2, [r3, #32]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	401a      	ands	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a1a      	ldr	r2, [r3, #32]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	fa01 f303 	lsl.w	r3, r1, r3
 80040bc:	431a      	orrs	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	621a      	str	r2, [r3, #32]
}
 80040c2:	bf00      	nop
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
	...

080040d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e04f      	b.n	8004188 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a21      	ldr	r2, [pc, #132]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d108      	bne.n	8004124 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004118:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a14      	ldr	r2, [pc, #80]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004150:	d004      	beq.n	800415c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a10      	ldr	r2, [pc, #64]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d10c      	bne.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004162:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	4313      	orrs	r3, r2
 800416c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40014000 	.word	0x40014000

0800419c <__errno>:
 800419c:	4b01      	ldr	r3, [pc, #4]	; (80041a4 <__errno+0x8>)
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	2000000c 	.word	0x2000000c

080041a8 <__libc_init_array>:
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	4d0d      	ldr	r5, [pc, #52]	; (80041e0 <__libc_init_array+0x38>)
 80041ac:	4c0d      	ldr	r4, [pc, #52]	; (80041e4 <__libc_init_array+0x3c>)
 80041ae:	1b64      	subs	r4, r4, r5
 80041b0:	10a4      	asrs	r4, r4, #2
 80041b2:	2600      	movs	r6, #0
 80041b4:	42a6      	cmp	r6, r4
 80041b6:	d109      	bne.n	80041cc <__libc_init_array+0x24>
 80041b8:	4d0b      	ldr	r5, [pc, #44]	; (80041e8 <__libc_init_array+0x40>)
 80041ba:	4c0c      	ldr	r4, [pc, #48]	; (80041ec <__libc_init_array+0x44>)
 80041bc:	f000 ffec 	bl	8005198 <_init>
 80041c0:	1b64      	subs	r4, r4, r5
 80041c2:	10a4      	asrs	r4, r4, #2
 80041c4:	2600      	movs	r6, #0
 80041c6:	42a6      	cmp	r6, r4
 80041c8:	d105      	bne.n	80041d6 <__libc_init_array+0x2e>
 80041ca:	bd70      	pop	{r4, r5, r6, pc}
 80041cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d0:	4798      	blx	r3
 80041d2:	3601      	adds	r6, #1
 80041d4:	e7ee      	b.n	80041b4 <__libc_init_array+0xc>
 80041d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041da:	4798      	blx	r3
 80041dc:	3601      	adds	r6, #1
 80041de:	e7f2      	b.n	80041c6 <__libc_init_array+0x1e>
 80041e0:	08005298 	.word	0x08005298
 80041e4:	08005298 	.word	0x08005298
 80041e8:	08005298 	.word	0x08005298
 80041ec:	0800529c 	.word	0x0800529c

080041f0 <memset>:
 80041f0:	4402      	add	r2, r0
 80041f2:	4603      	mov	r3, r0
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d100      	bne.n	80041fa <memset+0xa>
 80041f8:	4770      	bx	lr
 80041fa:	f803 1b01 	strb.w	r1, [r3], #1
 80041fe:	e7f9      	b.n	80041f4 <memset+0x4>

08004200 <iprintf>:
 8004200:	b40f      	push	{r0, r1, r2, r3}
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <iprintf+0x2c>)
 8004204:	b513      	push	{r0, r1, r4, lr}
 8004206:	681c      	ldr	r4, [r3, #0]
 8004208:	b124      	cbz	r4, 8004214 <iprintf+0x14>
 800420a:	69a3      	ldr	r3, [r4, #24]
 800420c:	b913      	cbnz	r3, 8004214 <iprintf+0x14>
 800420e:	4620      	mov	r0, r4
 8004210:	f000 fa5e 	bl	80046d0 <__sinit>
 8004214:	ab05      	add	r3, sp, #20
 8004216:	9a04      	ldr	r2, [sp, #16]
 8004218:	68a1      	ldr	r1, [r4, #8]
 800421a:	9301      	str	r3, [sp, #4]
 800421c:	4620      	mov	r0, r4
 800421e:	f000 fc2f 	bl	8004a80 <_vfiprintf_r>
 8004222:	b002      	add	sp, #8
 8004224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004228:	b004      	add	sp, #16
 800422a:	4770      	bx	lr
 800422c:	2000000c 	.word	0x2000000c

08004230 <_puts_r>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	460e      	mov	r6, r1
 8004234:	4605      	mov	r5, r0
 8004236:	b118      	cbz	r0, 8004240 <_puts_r+0x10>
 8004238:	6983      	ldr	r3, [r0, #24]
 800423a:	b90b      	cbnz	r3, 8004240 <_puts_r+0x10>
 800423c:	f000 fa48 	bl	80046d0 <__sinit>
 8004240:	69ab      	ldr	r3, [r5, #24]
 8004242:	68ac      	ldr	r4, [r5, #8]
 8004244:	b913      	cbnz	r3, 800424c <_puts_r+0x1c>
 8004246:	4628      	mov	r0, r5
 8004248:	f000 fa42 	bl	80046d0 <__sinit>
 800424c:	4b2c      	ldr	r3, [pc, #176]	; (8004300 <_puts_r+0xd0>)
 800424e:	429c      	cmp	r4, r3
 8004250:	d120      	bne.n	8004294 <_puts_r+0x64>
 8004252:	686c      	ldr	r4, [r5, #4]
 8004254:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004256:	07db      	lsls	r3, r3, #31
 8004258:	d405      	bmi.n	8004266 <_puts_r+0x36>
 800425a:	89a3      	ldrh	r3, [r4, #12]
 800425c:	0598      	lsls	r0, r3, #22
 800425e:	d402      	bmi.n	8004266 <_puts_r+0x36>
 8004260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004262:	f000 fad3 	bl	800480c <__retarget_lock_acquire_recursive>
 8004266:	89a3      	ldrh	r3, [r4, #12]
 8004268:	0719      	lsls	r1, r3, #28
 800426a:	d51d      	bpl.n	80042a8 <_puts_r+0x78>
 800426c:	6923      	ldr	r3, [r4, #16]
 800426e:	b1db      	cbz	r3, 80042a8 <_puts_r+0x78>
 8004270:	3e01      	subs	r6, #1
 8004272:	68a3      	ldr	r3, [r4, #8]
 8004274:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004278:	3b01      	subs	r3, #1
 800427a:	60a3      	str	r3, [r4, #8]
 800427c:	bb39      	cbnz	r1, 80042ce <_puts_r+0x9e>
 800427e:	2b00      	cmp	r3, #0
 8004280:	da38      	bge.n	80042f4 <_puts_r+0xc4>
 8004282:	4622      	mov	r2, r4
 8004284:	210a      	movs	r1, #10
 8004286:	4628      	mov	r0, r5
 8004288:	f000 f848 	bl	800431c <__swbuf_r>
 800428c:	3001      	adds	r0, #1
 800428e:	d011      	beq.n	80042b4 <_puts_r+0x84>
 8004290:	250a      	movs	r5, #10
 8004292:	e011      	b.n	80042b8 <_puts_r+0x88>
 8004294:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <_puts_r+0xd4>)
 8004296:	429c      	cmp	r4, r3
 8004298:	d101      	bne.n	800429e <_puts_r+0x6e>
 800429a:	68ac      	ldr	r4, [r5, #8]
 800429c:	e7da      	b.n	8004254 <_puts_r+0x24>
 800429e:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <_puts_r+0xd8>)
 80042a0:	429c      	cmp	r4, r3
 80042a2:	bf08      	it	eq
 80042a4:	68ec      	ldreq	r4, [r5, #12]
 80042a6:	e7d5      	b.n	8004254 <_puts_r+0x24>
 80042a8:	4621      	mov	r1, r4
 80042aa:	4628      	mov	r0, r5
 80042ac:	f000 f888 	bl	80043c0 <__swsetup_r>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d0dd      	beq.n	8004270 <_puts_r+0x40>
 80042b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80042b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042ba:	07da      	lsls	r2, r3, #31
 80042bc:	d405      	bmi.n	80042ca <_puts_r+0x9a>
 80042be:	89a3      	ldrh	r3, [r4, #12]
 80042c0:	059b      	lsls	r3, r3, #22
 80042c2:	d402      	bmi.n	80042ca <_puts_r+0x9a>
 80042c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042c6:	f000 faa2 	bl	800480e <__retarget_lock_release_recursive>
 80042ca:	4628      	mov	r0, r5
 80042cc:	bd70      	pop	{r4, r5, r6, pc}
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	da04      	bge.n	80042dc <_puts_r+0xac>
 80042d2:	69a2      	ldr	r2, [r4, #24]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	dc06      	bgt.n	80042e6 <_puts_r+0xb6>
 80042d8:	290a      	cmp	r1, #10
 80042da:	d004      	beq.n	80042e6 <_puts_r+0xb6>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	6022      	str	r2, [r4, #0]
 80042e2:	7019      	strb	r1, [r3, #0]
 80042e4:	e7c5      	b.n	8004272 <_puts_r+0x42>
 80042e6:	4622      	mov	r2, r4
 80042e8:	4628      	mov	r0, r5
 80042ea:	f000 f817 	bl	800431c <__swbuf_r>
 80042ee:	3001      	adds	r0, #1
 80042f0:	d1bf      	bne.n	8004272 <_puts_r+0x42>
 80042f2:	e7df      	b.n	80042b4 <_puts_r+0x84>
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	250a      	movs	r5, #10
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	6022      	str	r2, [r4, #0]
 80042fc:	701d      	strb	r5, [r3, #0]
 80042fe:	e7db      	b.n	80042b8 <_puts_r+0x88>
 8004300:	08005224 	.word	0x08005224
 8004304:	08005244 	.word	0x08005244
 8004308:	08005204 	.word	0x08005204

0800430c <puts>:
 800430c:	4b02      	ldr	r3, [pc, #8]	; (8004318 <puts+0xc>)
 800430e:	4601      	mov	r1, r0
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	f7ff bf8d 	b.w	8004230 <_puts_r>
 8004316:	bf00      	nop
 8004318:	2000000c 	.word	0x2000000c

0800431c <__swbuf_r>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	460e      	mov	r6, r1
 8004320:	4614      	mov	r4, r2
 8004322:	4605      	mov	r5, r0
 8004324:	b118      	cbz	r0, 800432e <__swbuf_r+0x12>
 8004326:	6983      	ldr	r3, [r0, #24]
 8004328:	b90b      	cbnz	r3, 800432e <__swbuf_r+0x12>
 800432a:	f000 f9d1 	bl	80046d0 <__sinit>
 800432e:	4b21      	ldr	r3, [pc, #132]	; (80043b4 <__swbuf_r+0x98>)
 8004330:	429c      	cmp	r4, r3
 8004332:	d12b      	bne.n	800438c <__swbuf_r+0x70>
 8004334:	686c      	ldr	r4, [r5, #4]
 8004336:	69a3      	ldr	r3, [r4, #24]
 8004338:	60a3      	str	r3, [r4, #8]
 800433a:	89a3      	ldrh	r3, [r4, #12]
 800433c:	071a      	lsls	r2, r3, #28
 800433e:	d52f      	bpl.n	80043a0 <__swbuf_r+0x84>
 8004340:	6923      	ldr	r3, [r4, #16]
 8004342:	b36b      	cbz	r3, 80043a0 <__swbuf_r+0x84>
 8004344:	6923      	ldr	r3, [r4, #16]
 8004346:	6820      	ldr	r0, [r4, #0]
 8004348:	1ac0      	subs	r0, r0, r3
 800434a:	6963      	ldr	r3, [r4, #20]
 800434c:	b2f6      	uxtb	r6, r6
 800434e:	4283      	cmp	r3, r0
 8004350:	4637      	mov	r7, r6
 8004352:	dc04      	bgt.n	800435e <__swbuf_r+0x42>
 8004354:	4621      	mov	r1, r4
 8004356:	4628      	mov	r0, r5
 8004358:	f000 f926 	bl	80045a8 <_fflush_r>
 800435c:	bb30      	cbnz	r0, 80043ac <__swbuf_r+0x90>
 800435e:	68a3      	ldr	r3, [r4, #8]
 8004360:	3b01      	subs	r3, #1
 8004362:	60a3      	str	r3, [r4, #8]
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	6022      	str	r2, [r4, #0]
 800436a:	701e      	strb	r6, [r3, #0]
 800436c:	6963      	ldr	r3, [r4, #20]
 800436e:	3001      	adds	r0, #1
 8004370:	4283      	cmp	r3, r0
 8004372:	d004      	beq.n	800437e <__swbuf_r+0x62>
 8004374:	89a3      	ldrh	r3, [r4, #12]
 8004376:	07db      	lsls	r3, r3, #31
 8004378:	d506      	bpl.n	8004388 <__swbuf_r+0x6c>
 800437a:	2e0a      	cmp	r6, #10
 800437c:	d104      	bne.n	8004388 <__swbuf_r+0x6c>
 800437e:	4621      	mov	r1, r4
 8004380:	4628      	mov	r0, r5
 8004382:	f000 f911 	bl	80045a8 <_fflush_r>
 8004386:	b988      	cbnz	r0, 80043ac <__swbuf_r+0x90>
 8004388:	4638      	mov	r0, r7
 800438a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800438c:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <__swbuf_r+0x9c>)
 800438e:	429c      	cmp	r4, r3
 8004390:	d101      	bne.n	8004396 <__swbuf_r+0x7a>
 8004392:	68ac      	ldr	r4, [r5, #8]
 8004394:	e7cf      	b.n	8004336 <__swbuf_r+0x1a>
 8004396:	4b09      	ldr	r3, [pc, #36]	; (80043bc <__swbuf_r+0xa0>)
 8004398:	429c      	cmp	r4, r3
 800439a:	bf08      	it	eq
 800439c:	68ec      	ldreq	r4, [r5, #12]
 800439e:	e7ca      	b.n	8004336 <__swbuf_r+0x1a>
 80043a0:	4621      	mov	r1, r4
 80043a2:	4628      	mov	r0, r5
 80043a4:	f000 f80c 	bl	80043c0 <__swsetup_r>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	d0cb      	beq.n	8004344 <__swbuf_r+0x28>
 80043ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80043b0:	e7ea      	b.n	8004388 <__swbuf_r+0x6c>
 80043b2:	bf00      	nop
 80043b4:	08005224 	.word	0x08005224
 80043b8:	08005244 	.word	0x08005244
 80043bc:	08005204 	.word	0x08005204

080043c0 <__swsetup_r>:
 80043c0:	4b32      	ldr	r3, [pc, #200]	; (800448c <__swsetup_r+0xcc>)
 80043c2:	b570      	push	{r4, r5, r6, lr}
 80043c4:	681d      	ldr	r5, [r3, #0]
 80043c6:	4606      	mov	r6, r0
 80043c8:	460c      	mov	r4, r1
 80043ca:	b125      	cbz	r5, 80043d6 <__swsetup_r+0x16>
 80043cc:	69ab      	ldr	r3, [r5, #24]
 80043ce:	b913      	cbnz	r3, 80043d6 <__swsetup_r+0x16>
 80043d0:	4628      	mov	r0, r5
 80043d2:	f000 f97d 	bl	80046d0 <__sinit>
 80043d6:	4b2e      	ldr	r3, [pc, #184]	; (8004490 <__swsetup_r+0xd0>)
 80043d8:	429c      	cmp	r4, r3
 80043da:	d10f      	bne.n	80043fc <__swsetup_r+0x3c>
 80043dc:	686c      	ldr	r4, [r5, #4]
 80043de:	89a3      	ldrh	r3, [r4, #12]
 80043e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043e4:	0719      	lsls	r1, r3, #28
 80043e6:	d42c      	bmi.n	8004442 <__swsetup_r+0x82>
 80043e8:	06dd      	lsls	r5, r3, #27
 80043ea:	d411      	bmi.n	8004410 <__swsetup_r+0x50>
 80043ec:	2309      	movs	r3, #9
 80043ee:	6033      	str	r3, [r6, #0]
 80043f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043f4:	81a3      	strh	r3, [r4, #12]
 80043f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043fa:	e03e      	b.n	800447a <__swsetup_r+0xba>
 80043fc:	4b25      	ldr	r3, [pc, #148]	; (8004494 <__swsetup_r+0xd4>)
 80043fe:	429c      	cmp	r4, r3
 8004400:	d101      	bne.n	8004406 <__swsetup_r+0x46>
 8004402:	68ac      	ldr	r4, [r5, #8]
 8004404:	e7eb      	b.n	80043de <__swsetup_r+0x1e>
 8004406:	4b24      	ldr	r3, [pc, #144]	; (8004498 <__swsetup_r+0xd8>)
 8004408:	429c      	cmp	r4, r3
 800440a:	bf08      	it	eq
 800440c:	68ec      	ldreq	r4, [r5, #12]
 800440e:	e7e6      	b.n	80043de <__swsetup_r+0x1e>
 8004410:	0758      	lsls	r0, r3, #29
 8004412:	d512      	bpl.n	800443a <__swsetup_r+0x7a>
 8004414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004416:	b141      	cbz	r1, 800442a <__swsetup_r+0x6a>
 8004418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800441c:	4299      	cmp	r1, r3
 800441e:	d002      	beq.n	8004426 <__swsetup_r+0x66>
 8004420:	4630      	mov	r0, r6
 8004422:	f000 fa59 	bl	80048d8 <_free_r>
 8004426:	2300      	movs	r3, #0
 8004428:	6363      	str	r3, [r4, #52]	; 0x34
 800442a:	89a3      	ldrh	r3, [r4, #12]
 800442c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004430:	81a3      	strh	r3, [r4, #12]
 8004432:	2300      	movs	r3, #0
 8004434:	6063      	str	r3, [r4, #4]
 8004436:	6923      	ldr	r3, [r4, #16]
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	f043 0308 	orr.w	r3, r3, #8
 8004440:	81a3      	strh	r3, [r4, #12]
 8004442:	6923      	ldr	r3, [r4, #16]
 8004444:	b94b      	cbnz	r3, 800445a <__swsetup_r+0x9a>
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800444c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004450:	d003      	beq.n	800445a <__swsetup_r+0x9a>
 8004452:	4621      	mov	r1, r4
 8004454:	4630      	mov	r0, r6
 8004456:	f000 f9ff 	bl	8004858 <__smakebuf_r>
 800445a:	89a0      	ldrh	r0, [r4, #12]
 800445c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004460:	f010 0301 	ands.w	r3, r0, #1
 8004464:	d00a      	beq.n	800447c <__swsetup_r+0xbc>
 8004466:	2300      	movs	r3, #0
 8004468:	60a3      	str	r3, [r4, #8]
 800446a:	6963      	ldr	r3, [r4, #20]
 800446c:	425b      	negs	r3, r3
 800446e:	61a3      	str	r3, [r4, #24]
 8004470:	6923      	ldr	r3, [r4, #16]
 8004472:	b943      	cbnz	r3, 8004486 <__swsetup_r+0xc6>
 8004474:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004478:	d1ba      	bne.n	80043f0 <__swsetup_r+0x30>
 800447a:	bd70      	pop	{r4, r5, r6, pc}
 800447c:	0781      	lsls	r1, r0, #30
 800447e:	bf58      	it	pl
 8004480:	6963      	ldrpl	r3, [r4, #20]
 8004482:	60a3      	str	r3, [r4, #8]
 8004484:	e7f4      	b.n	8004470 <__swsetup_r+0xb0>
 8004486:	2000      	movs	r0, #0
 8004488:	e7f7      	b.n	800447a <__swsetup_r+0xba>
 800448a:	bf00      	nop
 800448c:	2000000c 	.word	0x2000000c
 8004490:	08005224 	.word	0x08005224
 8004494:	08005244 	.word	0x08005244
 8004498:	08005204 	.word	0x08005204

0800449c <__sflush_r>:
 800449c:	898a      	ldrh	r2, [r1, #12]
 800449e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a2:	4605      	mov	r5, r0
 80044a4:	0710      	lsls	r0, r2, #28
 80044a6:	460c      	mov	r4, r1
 80044a8:	d458      	bmi.n	800455c <__sflush_r+0xc0>
 80044aa:	684b      	ldr	r3, [r1, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	dc05      	bgt.n	80044bc <__sflush_r+0x20>
 80044b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	dc02      	bgt.n	80044bc <__sflush_r+0x20>
 80044b6:	2000      	movs	r0, #0
 80044b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044be:	2e00      	cmp	r6, #0
 80044c0:	d0f9      	beq.n	80044b6 <__sflush_r+0x1a>
 80044c2:	2300      	movs	r3, #0
 80044c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044c8:	682f      	ldr	r7, [r5, #0]
 80044ca:	602b      	str	r3, [r5, #0]
 80044cc:	d032      	beq.n	8004534 <__sflush_r+0x98>
 80044ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	075a      	lsls	r2, r3, #29
 80044d4:	d505      	bpl.n	80044e2 <__sflush_r+0x46>
 80044d6:	6863      	ldr	r3, [r4, #4]
 80044d8:	1ac0      	subs	r0, r0, r3
 80044da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044dc:	b10b      	cbz	r3, 80044e2 <__sflush_r+0x46>
 80044de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044e0:	1ac0      	subs	r0, r0, r3
 80044e2:	2300      	movs	r3, #0
 80044e4:	4602      	mov	r2, r0
 80044e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044e8:	6a21      	ldr	r1, [r4, #32]
 80044ea:	4628      	mov	r0, r5
 80044ec:	47b0      	blx	r6
 80044ee:	1c43      	adds	r3, r0, #1
 80044f0:	89a3      	ldrh	r3, [r4, #12]
 80044f2:	d106      	bne.n	8004502 <__sflush_r+0x66>
 80044f4:	6829      	ldr	r1, [r5, #0]
 80044f6:	291d      	cmp	r1, #29
 80044f8:	d82c      	bhi.n	8004554 <__sflush_r+0xb8>
 80044fa:	4a2a      	ldr	r2, [pc, #168]	; (80045a4 <__sflush_r+0x108>)
 80044fc:	40ca      	lsrs	r2, r1
 80044fe:	07d6      	lsls	r6, r2, #31
 8004500:	d528      	bpl.n	8004554 <__sflush_r+0xb8>
 8004502:	2200      	movs	r2, #0
 8004504:	6062      	str	r2, [r4, #4]
 8004506:	04d9      	lsls	r1, r3, #19
 8004508:	6922      	ldr	r2, [r4, #16]
 800450a:	6022      	str	r2, [r4, #0]
 800450c:	d504      	bpl.n	8004518 <__sflush_r+0x7c>
 800450e:	1c42      	adds	r2, r0, #1
 8004510:	d101      	bne.n	8004516 <__sflush_r+0x7a>
 8004512:	682b      	ldr	r3, [r5, #0]
 8004514:	b903      	cbnz	r3, 8004518 <__sflush_r+0x7c>
 8004516:	6560      	str	r0, [r4, #84]	; 0x54
 8004518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800451a:	602f      	str	r7, [r5, #0]
 800451c:	2900      	cmp	r1, #0
 800451e:	d0ca      	beq.n	80044b6 <__sflush_r+0x1a>
 8004520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004524:	4299      	cmp	r1, r3
 8004526:	d002      	beq.n	800452e <__sflush_r+0x92>
 8004528:	4628      	mov	r0, r5
 800452a:	f000 f9d5 	bl	80048d8 <_free_r>
 800452e:	2000      	movs	r0, #0
 8004530:	6360      	str	r0, [r4, #52]	; 0x34
 8004532:	e7c1      	b.n	80044b8 <__sflush_r+0x1c>
 8004534:	6a21      	ldr	r1, [r4, #32]
 8004536:	2301      	movs	r3, #1
 8004538:	4628      	mov	r0, r5
 800453a:	47b0      	blx	r6
 800453c:	1c41      	adds	r1, r0, #1
 800453e:	d1c7      	bne.n	80044d0 <__sflush_r+0x34>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0c4      	beq.n	80044d0 <__sflush_r+0x34>
 8004546:	2b1d      	cmp	r3, #29
 8004548:	d001      	beq.n	800454e <__sflush_r+0xb2>
 800454a:	2b16      	cmp	r3, #22
 800454c:	d101      	bne.n	8004552 <__sflush_r+0xb6>
 800454e:	602f      	str	r7, [r5, #0]
 8004550:	e7b1      	b.n	80044b6 <__sflush_r+0x1a>
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004558:	81a3      	strh	r3, [r4, #12]
 800455a:	e7ad      	b.n	80044b8 <__sflush_r+0x1c>
 800455c:	690f      	ldr	r7, [r1, #16]
 800455e:	2f00      	cmp	r7, #0
 8004560:	d0a9      	beq.n	80044b6 <__sflush_r+0x1a>
 8004562:	0793      	lsls	r3, r2, #30
 8004564:	680e      	ldr	r6, [r1, #0]
 8004566:	bf08      	it	eq
 8004568:	694b      	ldreq	r3, [r1, #20]
 800456a:	600f      	str	r7, [r1, #0]
 800456c:	bf18      	it	ne
 800456e:	2300      	movne	r3, #0
 8004570:	eba6 0807 	sub.w	r8, r6, r7
 8004574:	608b      	str	r3, [r1, #8]
 8004576:	f1b8 0f00 	cmp.w	r8, #0
 800457a:	dd9c      	ble.n	80044b6 <__sflush_r+0x1a>
 800457c:	6a21      	ldr	r1, [r4, #32]
 800457e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004580:	4643      	mov	r3, r8
 8004582:	463a      	mov	r2, r7
 8004584:	4628      	mov	r0, r5
 8004586:	47b0      	blx	r6
 8004588:	2800      	cmp	r0, #0
 800458a:	dc06      	bgt.n	800459a <__sflush_r+0xfe>
 800458c:	89a3      	ldrh	r3, [r4, #12]
 800458e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004592:	81a3      	strh	r3, [r4, #12]
 8004594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004598:	e78e      	b.n	80044b8 <__sflush_r+0x1c>
 800459a:	4407      	add	r7, r0
 800459c:	eba8 0800 	sub.w	r8, r8, r0
 80045a0:	e7e9      	b.n	8004576 <__sflush_r+0xda>
 80045a2:	bf00      	nop
 80045a4:	20400001 	.word	0x20400001

080045a8 <_fflush_r>:
 80045a8:	b538      	push	{r3, r4, r5, lr}
 80045aa:	690b      	ldr	r3, [r1, #16]
 80045ac:	4605      	mov	r5, r0
 80045ae:	460c      	mov	r4, r1
 80045b0:	b913      	cbnz	r3, 80045b8 <_fflush_r+0x10>
 80045b2:	2500      	movs	r5, #0
 80045b4:	4628      	mov	r0, r5
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
 80045b8:	b118      	cbz	r0, 80045c2 <_fflush_r+0x1a>
 80045ba:	6983      	ldr	r3, [r0, #24]
 80045bc:	b90b      	cbnz	r3, 80045c2 <_fflush_r+0x1a>
 80045be:	f000 f887 	bl	80046d0 <__sinit>
 80045c2:	4b14      	ldr	r3, [pc, #80]	; (8004614 <_fflush_r+0x6c>)
 80045c4:	429c      	cmp	r4, r3
 80045c6:	d11b      	bne.n	8004600 <_fflush_r+0x58>
 80045c8:	686c      	ldr	r4, [r5, #4]
 80045ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0ef      	beq.n	80045b2 <_fflush_r+0xa>
 80045d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045d4:	07d0      	lsls	r0, r2, #31
 80045d6:	d404      	bmi.n	80045e2 <_fflush_r+0x3a>
 80045d8:	0599      	lsls	r1, r3, #22
 80045da:	d402      	bmi.n	80045e2 <_fflush_r+0x3a>
 80045dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045de:	f000 f915 	bl	800480c <__retarget_lock_acquire_recursive>
 80045e2:	4628      	mov	r0, r5
 80045e4:	4621      	mov	r1, r4
 80045e6:	f7ff ff59 	bl	800449c <__sflush_r>
 80045ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045ec:	07da      	lsls	r2, r3, #31
 80045ee:	4605      	mov	r5, r0
 80045f0:	d4e0      	bmi.n	80045b4 <_fflush_r+0xc>
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	059b      	lsls	r3, r3, #22
 80045f6:	d4dd      	bmi.n	80045b4 <_fflush_r+0xc>
 80045f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045fa:	f000 f908 	bl	800480e <__retarget_lock_release_recursive>
 80045fe:	e7d9      	b.n	80045b4 <_fflush_r+0xc>
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <_fflush_r+0x70>)
 8004602:	429c      	cmp	r4, r3
 8004604:	d101      	bne.n	800460a <_fflush_r+0x62>
 8004606:	68ac      	ldr	r4, [r5, #8]
 8004608:	e7df      	b.n	80045ca <_fflush_r+0x22>
 800460a:	4b04      	ldr	r3, [pc, #16]	; (800461c <_fflush_r+0x74>)
 800460c:	429c      	cmp	r4, r3
 800460e:	bf08      	it	eq
 8004610:	68ec      	ldreq	r4, [r5, #12]
 8004612:	e7da      	b.n	80045ca <_fflush_r+0x22>
 8004614:	08005224 	.word	0x08005224
 8004618:	08005244 	.word	0x08005244
 800461c:	08005204 	.word	0x08005204

08004620 <std>:
 8004620:	2300      	movs	r3, #0
 8004622:	b510      	push	{r4, lr}
 8004624:	4604      	mov	r4, r0
 8004626:	e9c0 3300 	strd	r3, r3, [r0]
 800462a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800462e:	6083      	str	r3, [r0, #8]
 8004630:	8181      	strh	r1, [r0, #12]
 8004632:	6643      	str	r3, [r0, #100]	; 0x64
 8004634:	81c2      	strh	r2, [r0, #14]
 8004636:	6183      	str	r3, [r0, #24]
 8004638:	4619      	mov	r1, r3
 800463a:	2208      	movs	r2, #8
 800463c:	305c      	adds	r0, #92	; 0x5c
 800463e:	f7ff fdd7 	bl	80041f0 <memset>
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <std+0x38>)
 8004644:	6263      	str	r3, [r4, #36]	; 0x24
 8004646:	4b05      	ldr	r3, [pc, #20]	; (800465c <std+0x3c>)
 8004648:	62a3      	str	r3, [r4, #40]	; 0x28
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <std+0x40>)
 800464c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <std+0x44>)
 8004650:	6224      	str	r4, [r4, #32]
 8004652:	6323      	str	r3, [r4, #48]	; 0x30
 8004654:	bd10      	pop	{r4, pc}
 8004656:	bf00      	nop
 8004658:	08005029 	.word	0x08005029
 800465c:	0800504b 	.word	0x0800504b
 8004660:	08005083 	.word	0x08005083
 8004664:	080050a7 	.word	0x080050a7

08004668 <_cleanup_r>:
 8004668:	4901      	ldr	r1, [pc, #4]	; (8004670 <_cleanup_r+0x8>)
 800466a:	f000 b8af 	b.w	80047cc <_fwalk_reent>
 800466e:	bf00      	nop
 8004670:	080045a9 	.word	0x080045a9

08004674 <__sfmoreglue>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	1e4a      	subs	r2, r1, #1
 8004678:	2568      	movs	r5, #104	; 0x68
 800467a:	4355      	muls	r5, r2
 800467c:	460e      	mov	r6, r1
 800467e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004682:	f000 f979 	bl	8004978 <_malloc_r>
 8004686:	4604      	mov	r4, r0
 8004688:	b140      	cbz	r0, 800469c <__sfmoreglue+0x28>
 800468a:	2100      	movs	r1, #0
 800468c:	e9c0 1600 	strd	r1, r6, [r0]
 8004690:	300c      	adds	r0, #12
 8004692:	60a0      	str	r0, [r4, #8]
 8004694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004698:	f7ff fdaa 	bl	80041f0 <memset>
 800469c:	4620      	mov	r0, r4
 800469e:	bd70      	pop	{r4, r5, r6, pc}

080046a0 <__sfp_lock_acquire>:
 80046a0:	4801      	ldr	r0, [pc, #4]	; (80046a8 <__sfp_lock_acquire+0x8>)
 80046a2:	f000 b8b3 	b.w	800480c <__retarget_lock_acquire_recursive>
 80046a6:	bf00      	nop
 80046a8:	200021a4 	.word	0x200021a4

080046ac <__sfp_lock_release>:
 80046ac:	4801      	ldr	r0, [pc, #4]	; (80046b4 <__sfp_lock_release+0x8>)
 80046ae:	f000 b8ae 	b.w	800480e <__retarget_lock_release_recursive>
 80046b2:	bf00      	nop
 80046b4:	200021a4 	.word	0x200021a4

080046b8 <__sinit_lock_acquire>:
 80046b8:	4801      	ldr	r0, [pc, #4]	; (80046c0 <__sinit_lock_acquire+0x8>)
 80046ba:	f000 b8a7 	b.w	800480c <__retarget_lock_acquire_recursive>
 80046be:	bf00      	nop
 80046c0:	2000219f 	.word	0x2000219f

080046c4 <__sinit_lock_release>:
 80046c4:	4801      	ldr	r0, [pc, #4]	; (80046cc <__sinit_lock_release+0x8>)
 80046c6:	f000 b8a2 	b.w	800480e <__retarget_lock_release_recursive>
 80046ca:	bf00      	nop
 80046cc:	2000219f 	.word	0x2000219f

080046d0 <__sinit>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	4604      	mov	r4, r0
 80046d4:	f7ff fff0 	bl	80046b8 <__sinit_lock_acquire>
 80046d8:	69a3      	ldr	r3, [r4, #24]
 80046da:	b11b      	cbz	r3, 80046e4 <__sinit+0x14>
 80046dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046e0:	f7ff bff0 	b.w	80046c4 <__sinit_lock_release>
 80046e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80046e8:	6523      	str	r3, [r4, #80]	; 0x50
 80046ea:	4b13      	ldr	r3, [pc, #76]	; (8004738 <__sinit+0x68>)
 80046ec:	4a13      	ldr	r2, [pc, #76]	; (800473c <__sinit+0x6c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80046f2:	42a3      	cmp	r3, r4
 80046f4:	bf04      	itt	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	61a3      	streq	r3, [r4, #24]
 80046fa:	4620      	mov	r0, r4
 80046fc:	f000 f820 	bl	8004740 <__sfp>
 8004700:	6060      	str	r0, [r4, #4]
 8004702:	4620      	mov	r0, r4
 8004704:	f000 f81c 	bl	8004740 <__sfp>
 8004708:	60a0      	str	r0, [r4, #8]
 800470a:	4620      	mov	r0, r4
 800470c:	f000 f818 	bl	8004740 <__sfp>
 8004710:	2200      	movs	r2, #0
 8004712:	60e0      	str	r0, [r4, #12]
 8004714:	2104      	movs	r1, #4
 8004716:	6860      	ldr	r0, [r4, #4]
 8004718:	f7ff ff82 	bl	8004620 <std>
 800471c:	68a0      	ldr	r0, [r4, #8]
 800471e:	2201      	movs	r2, #1
 8004720:	2109      	movs	r1, #9
 8004722:	f7ff ff7d 	bl	8004620 <std>
 8004726:	68e0      	ldr	r0, [r4, #12]
 8004728:	2202      	movs	r2, #2
 800472a:	2112      	movs	r1, #18
 800472c:	f7ff ff78 	bl	8004620 <std>
 8004730:	2301      	movs	r3, #1
 8004732:	61a3      	str	r3, [r4, #24]
 8004734:	e7d2      	b.n	80046dc <__sinit+0xc>
 8004736:	bf00      	nop
 8004738:	08005200 	.word	0x08005200
 800473c:	08004669 	.word	0x08004669

08004740 <__sfp>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	4607      	mov	r7, r0
 8004744:	f7ff ffac 	bl	80046a0 <__sfp_lock_acquire>
 8004748:	4b1e      	ldr	r3, [pc, #120]	; (80047c4 <__sfp+0x84>)
 800474a:	681e      	ldr	r6, [r3, #0]
 800474c:	69b3      	ldr	r3, [r6, #24]
 800474e:	b913      	cbnz	r3, 8004756 <__sfp+0x16>
 8004750:	4630      	mov	r0, r6
 8004752:	f7ff ffbd 	bl	80046d0 <__sinit>
 8004756:	3648      	adds	r6, #72	; 0x48
 8004758:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800475c:	3b01      	subs	r3, #1
 800475e:	d503      	bpl.n	8004768 <__sfp+0x28>
 8004760:	6833      	ldr	r3, [r6, #0]
 8004762:	b30b      	cbz	r3, 80047a8 <__sfp+0x68>
 8004764:	6836      	ldr	r6, [r6, #0]
 8004766:	e7f7      	b.n	8004758 <__sfp+0x18>
 8004768:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800476c:	b9d5      	cbnz	r5, 80047a4 <__sfp+0x64>
 800476e:	4b16      	ldr	r3, [pc, #88]	; (80047c8 <__sfp+0x88>)
 8004770:	60e3      	str	r3, [r4, #12]
 8004772:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004776:	6665      	str	r5, [r4, #100]	; 0x64
 8004778:	f000 f847 	bl	800480a <__retarget_lock_init_recursive>
 800477c:	f7ff ff96 	bl	80046ac <__sfp_lock_release>
 8004780:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004784:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004788:	6025      	str	r5, [r4, #0]
 800478a:	61a5      	str	r5, [r4, #24]
 800478c:	2208      	movs	r2, #8
 800478e:	4629      	mov	r1, r5
 8004790:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004794:	f7ff fd2c 	bl	80041f0 <memset>
 8004798:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800479c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047a0:	4620      	mov	r0, r4
 80047a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a4:	3468      	adds	r4, #104	; 0x68
 80047a6:	e7d9      	b.n	800475c <__sfp+0x1c>
 80047a8:	2104      	movs	r1, #4
 80047aa:	4638      	mov	r0, r7
 80047ac:	f7ff ff62 	bl	8004674 <__sfmoreglue>
 80047b0:	4604      	mov	r4, r0
 80047b2:	6030      	str	r0, [r6, #0]
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d1d5      	bne.n	8004764 <__sfp+0x24>
 80047b8:	f7ff ff78 	bl	80046ac <__sfp_lock_release>
 80047bc:	230c      	movs	r3, #12
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	e7ee      	b.n	80047a0 <__sfp+0x60>
 80047c2:	bf00      	nop
 80047c4:	08005200 	.word	0x08005200
 80047c8:	ffff0001 	.word	0xffff0001

080047cc <_fwalk_reent>:
 80047cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047d0:	4606      	mov	r6, r0
 80047d2:	4688      	mov	r8, r1
 80047d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047d8:	2700      	movs	r7, #0
 80047da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047de:	f1b9 0901 	subs.w	r9, r9, #1
 80047e2:	d505      	bpl.n	80047f0 <_fwalk_reent+0x24>
 80047e4:	6824      	ldr	r4, [r4, #0]
 80047e6:	2c00      	cmp	r4, #0
 80047e8:	d1f7      	bne.n	80047da <_fwalk_reent+0xe>
 80047ea:	4638      	mov	r0, r7
 80047ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047f0:	89ab      	ldrh	r3, [r5, #12]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d907      	bls.n	8004806 <_fwalk_reent+0x3a>
 80047f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047fa:	3301      	adds	r3, #1
 80047fc:	d003      	beq.n	8004806 <_fwalk_reent+0x3a>
 80047fe:	4629      	mov	r1, r5
 8004800:	4630      	mov	r0, r6
 8004802:	47c0      	blx	r8
 8004804:	4307      	orrs	r7, r0
 8004806:	3568      	adds	r5, #104	; 0x68
 8004808:	e7e9      	b.n	80047de <_fwalk_reent+0x12>

0800480a <__retarget_lock_init_recursive>:
 800480a:	4770      	bx	lr

0800480c <__retarget_lock_acquire_recursive>:
 800480c:	4770      	bx	lr

0800480e <__retarget_lock_release_recursive>:
 800480e:	4770      	bx	lr

08004810 <__swhatbuf_r>:
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	460e      	mov	r6, r1
 8004814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004818:	2900      	cmp	r1, #0
 800481a:	b096      	sub	sp, #88	; 0x58
 800481c:	4614      	mov	r4, r2
 800481e:	461d      	mov	r5, r3
 8004820:	da07      	bge.n	8004832 <__swhatbuf_r+0x22>
 8004822:	2300      	movs	r3, #0
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	89b3      	ldrh	r3, [r6, #12]
 8004828:	061a      	lsls	r2, r3, #24
 800482a:	d410      	bmi.n	800484e <__swhatbuf_r+0x3e>
 800482c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004830:	e00e      	b.n	8004850 <__swhatbuf_r+0x40>
 8004832:	466a      	mov	r2, sp
 8004834:	f000 fc5e 	bl	80050f4 <_fstat_r>
 8004838:	2800      	cmp	r0, #0
 800483a:	dbf2      	blt.n	8004822 <__swhatbuf_r+0x12>
 800483c:	9a01      	ldr	r2, [sp, #4]
 800483e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004842:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004846:	425a      	negs	r2, r3
 8004848:	415a      	adcs	r2, r3
 800484a:	602a      	str	r2, [r5, #0]
 800484c:	e7ee      	b.n	800482c <__swhatbuf_r+0x1c>
 800484e:	2340      	movs	r3, #64	; 0x40
 8004850:	2000      	movs	r0, #0
 8004852:	6023      	str	r3, [r4, #0]
 8004854:	b016      	add	sp, #88	; 0x58
 8004856:	bd70      	pop	{r4, r5, r6, pc}

08004858 <__smakebuf_r>:
 8004858:	898b      	ldrh	r3, [r1, #12]
 800485a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800485c:	079d      	lsls	r5, r3, #30
 800485e:	4606      	mov	r6, r0
 8004860:	460c      	mov	r4, r1
 8004862:	d507      	bpl.n	8004874 <__smakebuf_r+0x1c>
 8004864:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	6123      	str	r3, [r4, #16]
 800486c:	2301      	movs	r3, #1
 800486e:	6163      	str	r3, [r4, #20]
 8004870:	b002      	add	sp, #8
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	ab01      	add	r3, sp, #4
 8004876:	466a      	mov	r2, sp
 8004878:	f7ff ffca 	bl	8004810 <__swhatbuf_r>
 800487c:	9900      	ldr	r1, [sp, #0]
 800487e:	4605      	mov	r5, r0
 8004880:	4630      	mov	r0, r6
 8004882:	f000 f879 	bl	8004978 <_malloc_r>
 8004886:	b948      	cbnz	r0, 800489c <__smakebuf_r+0x44>
 8004888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800488c:	059a      	lsls	r2, r3, #22
 800488e:	d4ef      	bmi.n	8004870 <__smakebuf_r+0x18>
 8004890:	f023 0303 	bic.w	r3, r3, #3
 8004894:	f043 0302 	orr.w	r3, r3, #2
 8004898:	81a3      	strh	r3, [r4, #12]
 800489a:	e7e3      	b.n	8004864 <__smakebuf_r+0xc>
 800489c:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <__smakebuf_r+0x7c>)
 800489e:	62b3      	str	r3, [r6, #40]	; 0x28
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	6020      	str	r0, [r4, #0]
 80048a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a8:	81a3      	strh	r3, [r4, #12]
 80048aa:	9b00      	ldr	r3, [sp, #0]
 80048ac:	6163      	str	r3, [r4, #20]
 80048ae:	9b01      	ldr	r3, [sp, #4]
 80048b0:	6120      	str	r0, [r4, #16]
 80048b2:	b15b      	cbz	r3, 80048cc <__smakebuf_r+0x74>
 80048b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048b8:	4630      	mov	r0, r6
 80048ba:	f000 fc2d 	bl	8005118 <_isatty_r>
 80048be:	b128      	cbz	r0, 80048cc <__smakebuf_r+0x74>
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	f023 0303 	bic.w	r3, r3, #3
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	81a3      	strh	r3, [r4, #12]
 80048cc:	89a0      	ldrh	r0, [r4, #12]
 80048ce:	4305      	orrs	r5, r0
 80048d0:	81a5      	strh	r5, [r4, #12]
 80048d2:	e7cd      	b.n	8004870 <__smakebuf_r+0x18>
 80048d4:	08004669 	.word	0x08004669

080048d8 <_free_r>:
 80048d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048da:	2900      	cmp	r1, #0
 80048dc:	d048      	beq.n	8004970 <_free_r+0x98>
 80048de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048e2:	9001      	str	r0, [sp, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f1a1 0404 	sub.w	r4, r1, #4
 80048ea:	bfb8      	it	lt
 80048ec:	18e4      	addlt	r4, r4, r3
 80048ee:	f000 fc35 	bl	800515c <__malloc_lock>
 80048f2:	4a20      	ldr	r2, [pc, #128]	; (8004974 <_free_r+0x9c>)
 80048f4:	9801      	ldr	r0, [sp, #4]
 80048f6:	6813      	ldr	r3, [r2, #0]
 80048f8:	4615      	mov	r5, r2
 80048fa:	b933      	cbnz	r3, 800490a <_free_r+0x32>
 80048fc:	6063      	str	r3, [r4, #4]
 80048fe:	6014      	str	r4, [r2, #0]
 8004900:	b003      	add	sp, #12
 8004902:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004906:	f000 bc2f 	b.w	8005168 <__malloc_unlock>
 800490a:	42a3      	cmp	r3, r4
 800490c:	d90b      	bls.n	8004926 <_free_r+0x4e>
 800490e:	6821      	ldr	r1, [r4, #0]
 8004910:	1862      	adds	r2, r4, r1
 8004912:	4293      	cmp	r3, r2
 8004914:	bf04      	itt	eq
 8004916:	681a      	ldreq	r2, [r3, #0]
 8004918:	685b      	ldreq	r3, [r3, #4]
 800491a:	6063      	str	r3, [r4, #4]
 800491c:	bf04      	itt	eq
 800491e:	1852      	addeq	r2, r2, r1
 8004920:	6022      	streq	r2, [r4, #0]
 8004922:	602c      	str	r4, [r5, #0]
 8004924:	e7ec      	b.n	8004900 <_free_r+0x28>
 8004926:	461a      	mov	r2, r3
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	b10b      	cbz	r3, 8004930 <_free_r+0x58>
 800492c:	42a3      	cmp	r3, r4
 800492e:	d9fa      	bls.n	8004926 <_free_r+0x4e>
 8004930:	6811      	ldr	r1, [r2, #0]
 8004932:	1855      	adds	r5, r2, r1
 8004934:	42a5      	cmp	r5, r4
 8004936:	d10b      	bne.n	8004950 <_free_r+0x78>
 8004938:	6824      	ldr	r4, [r4, #0]
 800493a:	4421      	add	r1, r4
 800493c:	1854      	adds	r4, r2, r1
 800493e:	42a3      	cmp	r3, r4
 8004940:	6011      	str	r1, [r2, #0]
 8004942:	d1dd      	bne.n	8004900 <_free_r+0x28>
 8004944:	681c      	ldr	r4, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	6053      	str	r3, [r2, #4]
 800494a:	4421      	add	r1, r4
 800494c:	6011      	str	r1, [r2, #0]
 800494e:	e7d7      	b.n	8004900 <_free_r+0x28>
 8004950:	d902      	bls.n	8004958 <_free_r+0x80>
 8004952:	230c      	movs	r3, #12
 8004954:	6003      	str	r3, [r0, #0]
 8004956:	e7d3      	b.n	8004900 <_free_r+0x28>
 8004958:	6825      	ldr	r5, [r4, #0]
 800495a:	1961      	adds	r1, r4, r5
 800495c:	428b      	cmp	r3, r1
 800495e:	bf04      	itt	eq
 8004960:	6819      	ldreq	r1, [r3, #0]
 8004962:	685b      	ldreq	r3, [r3, #4]
 8004964:	6063      	str	r3, [r4, #4]
 8004966:	bf04      	itt	eq
 8004968:	1949      	addeq	r1, r1, r5
 800496a:	6021      	streq	r1, [r4, #0]
 800496c:	6054      	str	r4, [r2, #4]
 800496e:	e7c7      	b.n	8004900 <_free_r+0x28>
 8004970:	b003      	add	sp, #12
 8004972:	bd30      	pop	{r4, r5, pc}
 8004974:	20000094 	.word	0x20000094

08004978 <_malloc_r>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	1ccd      	adds	r5, r1, #3
 800497c:	f025 0503 	bic.w	r5, r5, #3
 8004980:	3508      	adds	r5, #8
 8004982:	2d0c      	cmp	r5, #12
 8004984:	bf38      	it	cc
 8004986:	250c      	movcc	r5, #12
 8004988:	2d00      	cmp	r5, #0
 800498a:	4606      	mov	r6, r0
 800498c:	db01      	blt.n	8004992 <_malloc_r+0x1a>
 800498e:	42a9      	cmp	r1, r5
 8004990:	d903      	bls.n	800499a <_malloc_r+0x22>
 8004992:	230c      	movs	r3, #12
 8004994:	6033      	str	r3, [r6, #0]
 8004996:	2000      	movs	r0, #0
 8004998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800499a:	f000 fbdf 	bl	800515c <__malloc_lock>
 800499e:	4921      	ldr	r1, [pc, #132]	; (8004a24 <_malloc_r+0xac>)
 80049a0:	680a      	ldr	r2, [r1, #0]
 80049a2:	4614      	mov	r4, r2
 80049a4:	b99c      	cbnz	r4, 80049ce <_malloc_r+0x56>
 80049a6:	4f20      	ldr	r7, [pc, #128]	; (8004a28 <_malloc_r+0xb0>)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	b923      	cbnz	r3, 80049b6 <_malloc_r+0x3e>
 80049ac:	4621      	mov	r1, r4
 80049ae:	4630      	mov	r0, r6
 80049b0:	f000 fb2a 	bl	8005008 <_sbrk_r>
 80049b4:	6038      	str	r0, [r7, #0]
 80049b6:	4629      	mov	r1, r5
 80049b8:	4630      	mov	r0, r6
 80049ba:	f000 fb25 	bl	8005008 <_sbrk_r>
 80049be:	1c43      	adds	r3, r0, #1
 80049c0:	d123      	bne.n	8004a0a <_malloc_r+0x92>
 80049c2:	230c      	movs	r3, #12
 80049c4:	6033      	str	r3, [r6, #0]
 80049c6:	4630      	mov	r0, r6
 80049c8:	f000 fbce 	bl	8005168 <__malloc_unlock>
 80049cc:	e7e3      	b.n	8004996 <_malloc_r+0x1e>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	1b5b      	subs	r3, r3, r5
 80049d2:	d417      	bmi.n	8004a04 <_malloc_r+0x8c>
 80049d4:	2b0b      	cmp	r3, #11
 80049d6:	d903      	bls.n	80049e0 <_malloc_r+0x68>
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	441c      	add	r4, r3
 80049dc:	6025      	str	r5, [r4, #0]
 80049de:	e004      	b.n	80049ea <_malloc_r+0x72>
 80049e0:	6863      	ldr	r3, [r4, #4]
 80049e2:	42a2      	cmp	r2, r4
 80049e4:	bf0c      	ite	eq
 80049e6:	600b      	streq	r3, [r1, #0]
 80049e8:	6053      	strne	r3, [r2, #4]
 80049ea:	4630      	mov	r0, r6
 80049ec:	f000 fbbc 	bl	8005168 <__malloc_unlock>
 80049f0:	f104 000b 	add.w	r0, r4, #11
 80049f4:	1d23      	adds	r3, r4, #4
 80049f6:	f020 0007 	bic.w	r0, r0, #7
 80049fa:	1ac2      	subs	r2, r0, r3
 80049fc:	d0cc      	beq.n	8004998 <_malloc_r+0x20>
 80049fe:	1a1b      	subs	r3, r3, r0
 8004a00:	50a3      	str	r3, [r4, r2]
 8004a02:	e7c9      	b.n	8004998 <_malloc_r+0x20>
 8004a04:	4622      	mov	r2, r4
 8004a06:	6864      	ldr	r4, [r4, #4]
 8004a08:	e7cc      	b.n	80049a4 <_malloc_r+0x2c>
 8004a0a:	1cc4      	adds	r4, r0, #3
 8004a0c:	f024 0403 	bic.w	r4, r4, #3
 8004a10:	42a0      	cmp	r0, r4
 8004a12:	d0e3      	beq.n	80049dc <_malloc_r+0x64>
 8004a14:	1a21      	subs	r1, r4, r0
 8004a16:	4630      	mov	r0, r6
 8004a18:	f000 faf6 	bl	8005008 <_sbrk_r>
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	d1dd      	bne.n	80049dc <_malloc_r+0x64>
 8004a20:	e7cf      	b.n	80049c2 <_malloc_r+0x4a>
 8004a22:	bf00      	nop
 8004a24:	20000094 	.word	0x20000094
 8004a28:	20000098 	.word	0x20000098

08004a2c <__sfputc_r>:
 8004a2c:	6893      	ldr	r3, [r2, #8]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	b410      	push	{r4}
 8004a34:	6093      	str	r3, [r2, #8]
 8004a36:	da08      	bge.n	8004a4a <__sfputc_r+0x1e>
 8004a38:	6994      	ldr	r4, [r2, #24]
 8004a3a:	42a3      	cmp	r3, r4
 8004a3c:	db01      	blt.n	8004a42 <__sfputc_r+0x16>
 8004a3e:	290a      	cmp	r1, #10
 8004a40:	d103      	bne.n	8004a4a <__sfputc_r+0x1e>
 8004a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a46:	f7ff bc69 	b.w	800431c <__swbuf_r>
 8004a4a:	6813      	ldr	r3, [r2, #0]
 8004a4c:	1c58      	adds	r0, r3, #1
 8004a4e:	6010      	str	r0, [r2, #0]
 8004a50:	7019      	strb	r1, [r3, #0]
 8004a52:	4608      	mov	r0, r1
 8004a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <__sfputs_r>:
 8004a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5c:	4606      	mov	r6, r0
 8004a5e:	460f      	mov	r7, r1
 8004a60:	4614      	mov	r4, r2
 8004a62:	18d5      	adds	r5, r2, r3
 8004a64:	42ac      	cmp	r4, r5
 8004a66:	d101      	bne.n	8004a6c <__sfputs_r+0x12>
 8004a68:	2000      	movs	r0, #0
 8004a6a:	e007      	b.n	8004a7c <__sfputs_r+0x22>
 8004a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a70:	463a      	mov	r2, r7
 8004a72:	4630      	mov	r0, r6
 8004a74:	f7ff ffda 	bl	8004a2c <__sfputc_r>
 8004a78:	1c43      	adds	r3, r0, #1
 8004a7a:	d1f3      	bne.n	8004a64 <__sfputs_r+0xa>
 8004a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a80 <_vfiprintf_r>:
 8004a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a84:	460d      	mov	r5, r1
 8004a86:	b09d      	sub	sp, #116	; 0x74
 8004a88:	4614      	mov	r4, r2
 8004a8a:	4698      	mov	r8, r3
 8004a8c:	4606      	mov	r6, r0
 8004a8e:	b118      	cbz	r0, 8004a98 <_vfiprintf_r+0x18>
 8004a90:	6983      	ldr	r3, [r0, #24]
 8004a92:	b90b      	cbnz	r3, 8004a98 <_vfiprintf_r+0x18>
 8004a94:	f7ff fe1c 	bl	80046d0 <__sinit>
 8004a98:	4b89      	ldr	r3, [pc, #548]	; (8004cc0 <_vfiprintf_r+0x240>)
 8004a9a:	429d      	cmp	r5, r3
 8004a9c:	d11b      	bne.n	8004ad6 <_vfiprintf_r+0x56>
 8004a9e:	6875      	ldr	r5, [r6, #4]
 8004aa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004aa2:	07d9      	lsls	r1, r3, #31
 8004aa4:	d405      	bmi.n	8004ab2 <_vfiprintf_r+0x32>
 8004aa6:	89ab      	ldrh	r3, [r5, #12]
 8004aa8:	059a      	lsls	r2, r3, #22
 8004aaa:	d402      	bmi.n	8004ab2 <_vfiprintf_r+0x32>
 8004aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004aae:	f7ff fead 	bl	800480c <__retarget_lock_acquire_recursive>
 8004ab2:	89ab      	ldrh	r3, [r5, #12]
 8004ab4:	071b      	lsls	r3, r3, #28
 8004ab6:	d501      	bpl.n	8004abc <_vfiprintf_r+0x3c>
 8004ab8:	692b      	ldr	r3, [r5, #16]
 8004aba:	b9eb      	cbnz	r3, 8004af8 <_vfiprintf_r+0x78>
 8004abc:	4629      	mov	r1, r5
 8004abe:	4630      	mov	r0, r6
 8004ac0:	f7ff fc7e 	bl	80043c0 <__swsetup_r>
 8004ac4:	b1c0      	cbz	r0, 8004af8 <_vfiprintf_r+0x78>
 8004ac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ac8:	07dc      	lsls	r4, r3, #31
 8004aca:	d50e      	bpl.n	8004aea <_vfiprintf_r+0x6a>
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ad0:	b01d      	add	sp, #116	; 0x74
 8004ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad6:	4b7b      	ldr	r3, [pc, #492]	; (8004cc4 <_vfiprintf_r+0x244>)
 8004ad8:	429d      	cmp	r5, r3
 8004ada:	d101      	bne.n	8004ae0 <_vfiprintf_r+0x60>
 8004adc:	68b5      	ldr	r5, [r6, #8]
 8004ade:	e7df      	b.n	8004aa0 <_vfiprintf_r+0x20>
 8004ae0:	4b79      	ldr	r3, [pc, #484]	; (8004cc8 <_vfiprintf_r+0x248>)
 8004ae2:	429d      	cmp	r5, r3
 8004ae4:	bf08      	it	eq
 8004ae6:	68f5      	ldreq	r5, [r6, #12]
 8004ae8:	e7da      	b.n	8004aa0 <_vfiprintf_r+0x20>
 8004aea:	89ab      	ldrh	r3, [r5, #12]
 8004aec:	0598      	lsls	r0, r3, #22
 8004aee:	d4ed      	bmi.n	8004acc <_vfiprintf_r+0x4c>
 8004af0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004af2:	f7ff fe8c 	bl	800480e <__retarget_lock_release_recursive>
 8004af6:	e7e9      	b.n	8004acc <_vfiprintf_r+0x4c>
 8004af8:	2300      	movs	r3, #0
 8004afa:	9309      	str	r3, [sp, #36]	; 0x24
 8004afc:	2320      	movs	r3, #32
 8004afe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b02:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b06:	2330      	movs	r3, #48	; 0x30
 8004b08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004ccc <_vfiprintf_r+0x24c>
 8004b0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b10:	f04f 0901 	mov.w	r9, #1
 8004b14:	4623      	mov	r3, r4
 8004b16:	469a      	mov	sl, r3
 8004b18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b1c:	b10a      	cbz	r2, 8004b22 <_vfiprintf_r+0xa2>
 8004b1e:	2a25      	cmp	r2, #37	; 0x25
 8004b20:	d1f9      	bne.n	8004b16 <_vfiprintf_r+0x96>
 8004b22:	ebba 0b04 	subs.w	fp, sl, r4
 8004b26:	d00b      	beq.n	8004b40 <_vfiprintf_r+0xc0>
 8004b28:	465b      	mov	r3, fp
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	4630      	mov	r0, r6
 8004b30:	f7ff ff93 	bl	8004a5a <__sfputs_r>
 8004b34:	3001      	adds	r0, #1
 8004b36:	f000 80aa 	beq.w	8004c8e <_vfiprintf_r+0x20e>
 8004b3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b3c:	445a      	add	r2, fp
 8004b3e:	9209      	str	r2, [sp, #36]	; 0x24
 8004b40:	f89a 3000 	ldrb.w	r3, [sl]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 80a2 	beq.w	8004c8e <_vfiprintf_r+0x20e>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b54:	f10a 0a01 	add.w	sl, sl, #1
 8004b58:	9304      	str	r3, [sp, #16]
 8004b5a:	9307      	str	r3, [sp, #28]
 8004b5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b60:	931a      	str	r3, [sp, #104]	; 0x68
 8004b62:	4654      	mov	r4, sl
 8004b64:	2205      	movs	r2, #5
 8004b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b6a:	4858      	ldr	r0, [pc, #352]	; (8004ccc <_vfiprintf_r+0x24c>)
 8004b6c:	f7fb fb30 	bl	80001d0 <memchr>
 8004b70:	9a04      	ldr	r2, [sp, #16]
 8004b72:	b9d8      	cbnz	r0, 8004bac <_vfiprintf_r+0x12c>
 8004b74:	06d1      	lsls	r1, r2, #27
 8004b76:	bf44      	itt	mi
 8004b78:	2320      	movmi	r3, #32
 8004b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b7e:	0713      	lsls	r3, r2, #28
 8004b80:	bf44      	itt	mi
 8004b82:	232b      	movmi	r3, #43	; 0x2b
 8004b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b88:	f89a 3000 	ldrb.w	r3, [sl]
 8004b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b8e:	d015      	beq.n	8004bbc <_vfiprintf_r+0x13c>
 8004b90:	9a07      	ldr	r2, [sp, #28]
 8004b92:	4654      	mov	r4, sl
 8004b94:	2000      	movs	r0, #0
 8004b96:	f04f 0c0a 	mov.w	ip, #10
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ba0:	3b30      	subs	r3, #48	; 0x30
 8004ba2:	2b09      	cmp	r3, #9
 8004ba4:	d94e      	bls.n	8004c44 <_vfiprintf_r+0x1c4>
 8004ba6:	b1b0      	cbz	r0, 8004bd6 <_vfiprintf_r+0x156>
 8004ba8:	9207      	str	r2, [sp, #28]
 8004baa:	e014      	b.n	8004bd6 <_vfiprintf_r+0x156>
 8004bac:	eba0 0308 	sub.w	r3, r0, r8
 8004bb0:	fa09 f303 	lsl.w	r3, r9, r3
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	9304      	str	r3, [sp, #16]
 8004bb8:	46a2      	mov	sl, r4
 8004bba:	e7d2      	b.n	8004b62 <_vfiprintf_r+0xe2>
 8004bbc:	9b03      	ldr	r3, [sp, #12]
 8004bbe:	1d19      	adds	r1, r3, #4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	9103      	str	r1, [sp, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bfbb      	ittet	lt
 8004bc8:	425b      	neglt	r3, r3
 8004bca:	f042 0202 	orrlt.w	r2, r2, #2
 8004bce:	9307      	strge	r3, [sp, #28]
 8004bd0:	9307      	strlt	r3, [sp, #28]
 8004bd2:	bfb8      	it	lt
 8004bd4:	9204      	strlt	r2, [sp, #16]
 8004bd6:	7823      	ldrb	r3, [r4, #0]
 8004bd8:	2b2e      	cmp	r3, #46	; 0x2e
 8004bda:	d10c      	bne.n	8004bf6 <_vfiprintf_r+0x176>
 8004bdc:	7863      	ldrb	r3, [r4, #1]
 8004bde:	2b2a      	cmp	r3, #42	; 0x2a
 8004be0:	d135      	bne.n	8004c4e <_vfiprintf_r+0x1ce>
 8004be2:	9b03      	ldr	r3, [sp, #12]
 8004be4:	1d1a      	adds	r2, r3, #4
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	9203      	str	r2, [sp, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	bfb8      	it	lt
 8004bee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004bf2:	3402      	adds	r4, #2
 8004bf4:	9305      	str	r3, [sp, #20]
 8004bf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004cdc <_vfiprintf_r+0x25c>
 8004bfa:	7821      	ldrb	r1, [r4, #0]
 8004bfc:	2203      	movs	r2, #3
 8004bfe:	4650      	mov	r0, sl
 8004c00:	f7fb fae6 	bl	80001d0 <memchr>
 8004c04:	b140      	cbz	r0, 8004c18 <_vfiprintf_r+0x198>
 8004c06:	2340      	movs	r3, #64	; 0x40
 8004c08:	eba0 000a 	sub.w	r0, r0, sl
 8004c0c:	fa03 f000 	lsl.w	r0, r3, r0
 8004c10:	9b04      	ldr	r3, [sp, #16]
 8004c12:	4303      	orrs	r3, r0
 8004c14:	3401      	adds	r4, #1
 8004c16:	9304      	str	r3, [sp, #16]
 8004c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c1c:	482c      	ldr	r0, [pc, #176]	; (8004cd0 <_vfiprintf_r+0x250>)
 8004c1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c22:	2206      	movs	r2, #6
 8004c24:	f7fb fad4 	bl	80001d0 <memchr>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	d03f      	beq.n	8004cac <_vfiprintf_r+0x22c>
 8004c2c:	4b29      	ldr	r3, [pc, #164]	; (8004cd4 <_vfiprintf_r+0x254>)
 8004c2e:	bb1b      	cbnz	r3, 8004c78 <_vfiprintf_r+0x1f8>
 8004c30:	9b03      	ldr	r3, [sp, #12]
 8004c32:	3307      	adds	r3, #7
 8004c34:	f023 0307 	bic.w	r3, r3, #7
 8004c38:	3308      	adds	r3, #8
 8004c3a:	9303      	str	r3, [sp, #12]
 8004c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c3e:	443b      	add	r3, r7
 8004c40:	9309      	str	r3, [sp, #36]	; 0x24
 8004c42:	e767      	b.n	8004b14 <_vfiprintf_r+0x94>
 8004c44:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c48:	460c      	mov	r4, r1
 8004c4a:	2001      	movs	r0, #1
 8004c4c:	e7a5      	b.n	8004b9a <_vfiprintf_r+0x11a>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	3401      	adds	r4, #1
 8004c52:	9305      	str	r3, [sp, #20]
 8004c54:	4619      	mov	r1, r3
 8004c56:	f04f 0c0a 	mov.w	ip, #10
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c60:	3a30      	subs	r2, #48	; 0x30
 8004c62:	2a09      	cmp	r2, #9
 8004c64:	d903      	bls.n	8004c6e <_vfiprintf_r+0x1ee>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0c5      	beq.n	8004bf6 <_vfiprintf_r+0x176>
 8004c6a:	9105      	str	r1, [sp, #20]
 8004c6c:	e7c3      	b.n	8004bf6 <_vfiprintf_r+0x176>
 8004c6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c72:	4604      	mov	r4, r0
 8004c74:	2301      	movs	r3, #1
 8004c76:	e7f0      	b.n	8004c5a <_vfiprintf_r+0x1da>
 8004c78:	ab03      	add	r3, sp, #12
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	462a      	mov	r2, r5
 8004c7e:	4b16      	ldr	r3, [pc, #88]	; (8004cd8 <_vfiprintf_r+0x258>)
 8004c80:	a904      	add	r1, sp, #16
 8004c82:	4630      	mov	r0, r6
 8004c84:	f3af 8000 	nop.w
 8004c88:	4607      	mov	r7, r0
 8004c8a:	1c78      	adds	r0, r7, #1
 8004c8c:	d1d6      	bne.n	8004c3c <_vfiprintf_r+0x1bc>
 8004c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c90:	07d9      	lsls	r1, r3, #31
 8004c92:	d405      	bmi.n	8004ca0 <_vfiprintf_r+0x220>
 8004c94:	89ab      	ldrh	r3, [r5, #12]
 8004c96:	059a      	lsls	r2, r3, #22
 8004c98:	d402      	bmi.n	8004ca0 <_vfiprintf_r+0x220>
 8004c9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c9c:	f7ff fdb7 	bl	800480e <__retarget_lock_release_recursive>
 8004ca0:	89ab      	ldrh	r3, [r5, #12]
 8004ca2:	065b      	lsls	r3, r3, #25
 8004ca4:	f53f af12 	bmi.w	8004acc <_vfiprintf_r+0x4c>
 8004ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004caa:	e711      	b.n	8004ad0 <_vfiprintf_r+0x50>
 8004cac:	ab03      	add	r3, sp, #12
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	462a      	mov	r2, r5
 8004cb2:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <_vfiprintf_r+0x258>)
 8004cb4:	a904      	add	r1, sp, #16
 8004cb6:	4630      	mov	r0, r6
 8004cb8:	f000 f880 	bl	8004dbc <_printf_i>
 8004cbc:	e7e4      	b.n	8004c88 <_vfiprintf_r+0x208>
 8004cbe:	bf00      	nop
 8004cc0:	08005224 	.word	0x08005224
 8004cc4:	08005244 	.word	0x08005244
 8004cc8:	08005204 	.word	0x08005204
 8004ccc:	08005264 	.word	0x08005264
 8004cd0:	0800526e 	.word	0x0800526e
 8004cd4:	00000000 	.word	0x00000000
 8004cd8:	08004a5b 	.word	0x08004a5b
 8004cdc:	0800526a 	.word	0x0800526a

08004ce0 <_printf_common>:
 8004ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce4:	4616      	mov	r6, r2
 8004ce6:	4699      	mov	r9, r3
 8004ce8:	688a      	ldr	r2, [r1, #8]
 8004cea:	690b      	ldr	r3, [r1, #16]
 8004cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	bfb8      	it	lt
 8004cf4:	4613      	movlt	r3, r2
 8004cf6:	6033      	str	r3, [r6, #0]
 8004cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cfc:	4607      	mov	r7, r0
 8004cfe:	460c      	mov	r4, r1
 8004d00:	b10a      	cbz	r2, 8004d06 <_printf_common+0x26>
 8004d02:	3301      	adds	r3, #1
 8004d04:	6033      	str	r3, [r6, #0]
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	0699      	lsls	r1, r3, #26
 8004d0a:	bf42      	ittt	mi
 8004d0c:	6833      	ldrmi	r3, [r6, #0]
 8004d0e:	3302      	addmi	r3, #2
 8004d10:	6033      	strmi	r3, [r6, #0]
 8004d12:	6825      	ldr	r5, [r4, #0]
 8004d14:	f015 0506 	ands.w	r5, r5, #6
 8004d18:	d106      	bne.n	8004d28 <_printf_common+0x48>
 8004d1a:	f104 0a19 	add.w	sl, r4, #25
 8004d1e:	68e3      	ldr	r3, [r4, #12]
 8004d20:	6832      	ldr	r2, [r6, #0]
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	42ab      	cmp	r3, r5
 8004d26:	dc26      	bgt.n	8004d76 <_printf_common+0x96>
 8004d28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d2c:	1e13      	subs	r3, r2, #0
 8004d2e:	6822      	ldr	r2, [r4, #0]
 8004d30:	bf18      	it	ne
 8004d32:	2301      	movne	r3, #1
 8004d34:	0692      	lsls	r2, r2, #26
 8004d36:	d42b      	bmi.n	8004d90 <_printf_common+0xb0>
 8004d38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	4638      	mov	r0, r7
 8004d40:	47c0      	blx	r8
 8004d42:	3001      	adds	r0, #1
 8004d44:	d01e      	beq.n	8004d84 <_printf_common+0xa4>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	68e5      	ldr	r5, [r4, #12]
 8004d4a:	6832      	ldr	r2, [r6, #0]
 8004d4c:	f003 0306 	and.w	r3, r3, #6
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	bf08      	it	eq
 8004d54:	1aad      	subeq	r5, r5, r2
 8004d56:	68a3      	ldr	r3, [r4, #8]
 8004d58:	6922      	ldr	r2, [r4, #16]
 8004d5a:	bf0c      	ite	eq
 8004d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d60:	2500      	movne	r5, #0
 8004d62:	4293      	cmp	r3, r2
 8004d64:	bfc4      	itt	gt
 8004d66:	1a9b      	subgt	r3, r3, r2
 8004d68:	18ed      	addgt	r5, r5, r3
 8004d6a:	2600      	movs	r6, #0
 8004d6c:	341a      	adds	r4, #26
 8004d6e:	42b5      	cmp	r5, r6
 8004d70:	d11a      	bne.n	8004da8 <_printf_common+0xc8>
 8004d72:	2000      	movs	r0, #0
 8004d74:	e008      	b.n	8004d88 <_printf_common+0xa8>
 8004d76:	2301      	movs	r3, #1
 8004d78:	4652      	mov	r2, sl
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	4638      	mov	r0, r7
 8004d7e:	47c0      	blx	r8
 8004d80:	3001      	adds	r0, #1
 8004d82:	d103      	bne.n	8004d8c <_printf_common+0xac>
 8004d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8c:	3501      	adds	r5, #1
 8004d8e:	e7c6      	b.n	8004d1e <_printf_common+0x3e>
 8004d90:	18e1      	adds	r1, r4, r3
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	2030      	movs	r0, #48	; 0x30
 8004d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d9a:	4422      	add	r2, r4
 8004d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004da4:	3302      	adds	r3, #2
 8004da6:	e7c7      	b.n	8004d38 <_printf_common+0x58>
 8004da8:	2301      	movs	r3, #1
 8004daa:	4622      	mov	r2, r4
 8004dac:	4649      	mov	r1, r9
 8004dae:	4638      	mov	r0, r7
 8004db0:	47c0      	blx	r8
 8004db2:	3001      	adds	r0, #1
 8004db4:	d0e6      	beq.n	8004d84 <_printf_common+0xa4>
 8004db6:	3601      	adds	r6, #1
 8004db8:	e7d9      	b.n	8004d6e <_printf_common+0x8e>
	...

08004dbc <_printf_i>:
 8004dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	4691      	mov	r9, r2
 8004dc4:	7e27      	ldrb	r7, [r4, #24]
 8004dc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004dc8:	2f78      	cmp	r7, #120	; 0x78
 8004dca:	4680      	mov	r8, r0
 8004dcc:	469a      	mov	sl, r3
 8004dce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dd2:	d807      	bhi.n	8004de4 <_printf_i+0x28>
 8004dd4:	2f62      	cmp	r7, #98	; 0x62
 8004dd6:	d80a      	bhi.n	8004dee <_printf_i+0x32>
 8004dd8:	2f00      	cmp	r7, #0
 8004dda:	f000 80d8 	beq.w	8004f8e <_printf_i+0x1d2>
 8004dde:	2f58      	cmp	r7, #88	; 0x58
 8004de0:	f000 80a3 	beq.w	8004f2a <_printf_i+0x16e>
 8004de4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dec:	e03a      	b.n	8004e64 <_printf_i+0xa8>
 8004dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004df2:	2b15      	cmp	r3, #21
 8004df4:	d8f6      	bhi.n	8004de4 <_printf_i+0x28>
 8004df6:	a001      	add	r0, pc, #4	; (adr r0, 8004dfc <_printf_i+0x40>)
 8004df8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004dfc:	08004e55 	.word	0x08004e55
 8004e00:	08004e69 	.word	0x08004e69
 8004e04:	08004de5 	.word	0x08004de5
 8004e08:	08004de5 	.word	0x08004de5
 8004e0c:	08004de5 	.word	0x08004de5
 8004e10:	08004de5 	.word	0x08004de5
 8004e14:	08004e69 	.word	0x08004e69
 8004e18:	08004de5 	.word	0x08004de5
 8004e1c:	08004de5 	.word	0x08004de5
 8004e20:	08004de5 	.word	0x08004de5
 8004e24:	08004de5 	.word	0x08004de5
 8004e28:	08004f75 	.word	0x08004f75
 8004e2c:	08004e99 	.word	0x08004e99
 8004e30:	08004f57 	.word	0x08004f57
 8004e34:	08004de5 	.word	0x08004de5
 8004e38:	08004de5 	.word	0x08004de5
 8004e3c:	08004f97 	.word	0x08004f97
 8004e40:	08004de5 	.word	0x08004de5
 8004e44:	08004e99 	.word	0x08004e99
 8004e48:	08004de5 	.word	0x08004de5
 8004e4c:	08004de5 	.word	0x08004de5
 8004e50:	08004f5f 	.word	0x08004f5f
 8004e54:	680b      	ldr	r3, [r1, #0]
 8004e56:	1d1a      	adds	r2, r3, #4
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	600a      	str	r2, [r1, #0]
 8004e5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0a3      	b.n	8004fb0 <_printf_i+0x1f4>
 8004e68:	6825      	ldr	r5, [r4, #0]
 8004e6a:	6808      	ldr	r0, [r1, #0]
 8004e6c:	062e      	lsls	r6, r5, #24
 8004e6e:	f100 0304 	add.w	r3, r0, #4
 8004e72:	d50a      	bpl.n	8004e8a <_printf_i+0xce>
 8004e74:	6805      	ldr	r5, [r0, #0]
 8004e76:	600b      	str	r3, [r1, #0]
 8004e78:	2d00      	cmp	r5, #0
 8004e7a:	da03      	bge.n	8004e84 <_printf_i+0xc8>
 8004e7c:	232d      	movs	r3, #45	; 0x2d
 8004e7e:	426d      	negs	r5, r5
 8004e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e84:	485e      	ldr	r0, [pc, #376]	; (8005000 <_printf_i+0x244>)
 8004e86:	230a      	movs	r3, #10
 8004e88:	e019      	b.n	8004ebe <_printf_i+0x102>
 8004e8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e8e:	6805      	ldr	r5, [r0, #0]
 8004e90:	600b      	str	r3, [r1, #0]
 8004e92:	bf18      	it	ne
 8004e94:	b22d      	sxthne	r5, r5
 8004e96:	e7ef      	b.n	8004e78 <_printf_i+0xbc>
 8004e98:	680b      	ldr	r3, [r1, #0]
 8004e9a:	6825      	ldr	r5, [r4, #0]
 8004e9c:	1d18      	adds	r0, r3, #4
 8004e9e:	6008      	str	r0, [r1, #0]
 8004ea0:	0628      	lsls	r0, r5, #24
 8004ea2:	d501      	bpl.n	8004ea8 <_printf_i+0xec>
 8004ea4:	681d      	ldr	r5, [r3, #0]
 8004ea6:	e002      	b.n	8004eae <_printf_i+0xf2>
 8004ea8:	0669      	lsls	r1, r5, #25
 8004eaa:	d5fb      	bpl.n	8004ea4 <_printf_i+0xe8>
 8004eac:	881d      	ldrh	r5, [r3, #0]
 8004eae:	4854      	ldr	r0, [pc, #336]	; (8005000 <_printf_i+0x244>)
 8004eb0:	2f6f      	cmp	r7, #111	; 0x6f
 8004eb2:	bf0c      	ite	eq
 8004eb4:	2308      	moveq	r3, #8
 8004eb6:	230a      	movne	r3, #10
 8004eb8:	2100      	movs	r1, #0
 8004eba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ebe:	6866      	ldr	r6, [r4, #4]
 8004ec0:	60a6      	str	r6, [r4, #8]
 8004ec2:	2e00      	cmp	r6, #0
 8004ec4:	bfa2      	ittt	ge
 8004ec6:	6821      	ldrge	r1, [r4, #0]
 8004ec8:	f021 0104 	bicge.w	r1, r1, #4
 8004ecc:	6021      	strge	r1, [r4, #0]
 8004ece:	b90d      	cbnz	r5, 8004ed4 <_printf_i+0x118>
 8004ed0:	2e00      	cmp	r6, #0
 8004ed2:	d04d      	beq.n	8004f70 <_printf_i+0x1b4>
 8004ed4:	4616      	mov	r6, r2
 8004ed6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004eda:	fb03 5711 	mls	r7, r3, r1, r5
 8004ede:	5dc7      	ldrb	r7, [r0, r7]
 8004ee0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ee4:	462f      	mov	r7, r5
 8004ee6:	42bb      	cmp	r3, r7
 8004ee8:	460d      	mov	r5, r1
 8004eea:	d9f4      	bls.n	8004ed6 <_printf_i+0x11a>
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d10b      	bne.n	8004f08 <_printf_i+0x14c>
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	07df      	lsls	r7, r3, #31
 8004ef4:	d508      	bpl.n	8004f08 <_printf_i+0x14c>
 8004ef6:	6923      	ldr	r3, [r4, #16]
 8004ef8:	6861      	ldr	r1, [r4, #4]
 8004efa:	4299      	cmp	r1, r3
 8004efc:	bfde      	ittt	le
 8004efe:	2330      	movle	r3, #48	; 0x30
 8004f00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f04:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004f08:	1b92      	subs	r2, r2, r6
 8004f0a:	6122      	str	r2, [r4, #16]
 8004f0c:	f8cd a000 	str.w	sl, [sp]
 8004f10:	464b      	mov	r3, r9
 8004f12:	aa03      	add	r2, sp, #12
 8004f14:	4621      	mov	r1, r4
 8004f16:	4640      	mov	r0, r8
 8004f18:	f7ff fee2 	bl	8004ce0 <_printf_common>
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d14c      	bne.n	8004fba <_printf_i+0x1fe>
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f24:	b004      	add	sp, #16
 8004f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2a:	4835      	ldr	r0, [pc, #212]	; (8005000 <_printf_i+0x244>)
 8004f2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	680e      	ldr	r6, [r1, #0]
 8004f34:	061f      	lsls	r7, r3, #24
 8004f36:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f3a:	600e      	str	r6, [r1, #0]
 8004f3c:	d514      	bpl.n	8004f68 <_printf_i+0x1ac>
 8004f3e:	07d9      	lsls	r1, r3, #31
 8004f40:	bf44      	itt	mi
 8004f42:	f043 0320 	orrmi.w	r3, r3, #32
 8004f46:	6023      	strmi	r3, [r4, #0]
 8004f48:	b91d      	cbnz	r5, 8004f52 <_printf_i+0x196>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	f023 0320 	bic.w	r3, r3, #32
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	2310      	movs	r3, #16
 8004f54:	e7b0      	b.n	8004eb8 <_printf_i+0xfc>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	f043 0320 	orr.w	r3, r3, #32
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	2378      	movs	r3, #120	; 0x78
 8004f60:	4828      	ldr	r0, [pc, #160]	; (8005004 <_printf_i+0x248>)
 8004f62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f66:	e7e3      	b.n	8004f30 <_printf_i+0x174>
 8004f68:	065e      	lsls	r6, r3, #25
 8004f6a:	bf48      	it	mi
 8004f6c:	b2ad      	uxthmi	r5, r5
 8004f6e:	e7e6      	b.n	8004f3e <_printf_i+0x182>
 8004f70:	4616      	mov	r6, r2
 8004f72:	e7bb      	b.n	8004eec <_printf_i+0x130>
 8004f74:	680b      	ldr	r3, [r1, #0]
 8004f76:	6826      	ldr	r6, [r4, #0]
 8004f78:	6960      	ldr	r0, [r4, #20]
 8004f7a:	1d1d      	adds	r5, r3, #4
 8004f7c:	600d      	str	r5, [r1, #0]
 8004f7e:	0635      	lsls	r5, r6, #24
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	d501      	bpl.n	8004f88 <_printf_i+0x1cc>
 8004f84:	6018      	str	r0, [r3, #0]
 8004f86:	e002      	b.n	8004f8e <_printf_i+0x1d2>
 8004f88:	0671      	lsls	r1, r6, #25
 8004f8a:	d5fb      	bpl.n	8004f84 <_printf_i+0x1c8>
 8004f8c:	8018      	strh	r0, [r3, #0]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	6123      	str	r3, [r4, #16]
 8004f92:	4616      	mov	r6, r2
 8004f94:	e7ba      	b.n	8004f0c <_printf_i+0x150>
 8004f96:	680b      	ldr	r3, [r1, #0]
 8004f98:	1d1a      	adds	r2, r3, #4
 8004f9a:	600a      	str	r2, [r1, #0]
 8004f9c:	681e      	ldr	r6, [r3, #0]
 8004f9e:	6862      	ldr	r2, [r4, #4]
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f7fb f914 	bl	80001d0 <memchr>
 8004fa8:	b108      	cbz	r0, 8004fae <_printf_i+0x1f2>
 8004faa:	1b80      	subs	r0, r0, r6
 8004fac:	6060      	str	r0, [r4, #4]
 8004fae:	6863      	ldr	r3, [r4, #4]
 8004fb0:	6123      	str	r3, [r4, #16]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb8:	e7a8      	b.n	8004f0c <_printf_i+0x150>
 8004fba:	6923      	ldr	r3, [r4, #16]
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	47d0      	blx	sl
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d0ab      	beq.n	8004f20 <_printf_i+0x164>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	079b      	lsls	r3, r3, #30
 8004fcc:	d413      	bmi.n	8004ff6 <_printf_i+0x23a>
 8004fce:	68e0      	ldr	r0, [r4, #12]
 8004fd0:	9b03      	ldr	r3, [sp, #12]
 8004fd2:	4298      	cmp	r0, r3
 8004fd4:	bfb8      	it	lt
 8004fd6:	4618      	movlt	r0, r3
 8004fd8:	e7a4      	b.n	8004f24 <_printf_i+0x168>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4632      	mov	r2, r6
 8004fde:	4649      	mov	r1, r9
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	47d0      	blx	sl
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d09b      	beq.n	8004f20 <_printf_i+0x164>
 8004fe8:	3501      	adds	r5, #1
 8004fea:	68e3      	ldr	r3, [r4, #12]
 8004fec:	9903      	ldr	r1, [sp, #12]
 8004fee:	1a5b      	subs	r3, r3, r1
 8004ff0:	42ab      	cmp	r3, r5
 8004ff2:	dcf2      	bgt.n	8004fda <_printf_i+0x21e>
 8004ff4:	e7eb      	b.n	8004fce <_printf_i+0x212>
 8004ff6:	2500      	movs	r5, #0
 8004ff8:	f104 0619 	add.w	r6, r4, #25
 8004ffc:	e7f5      	b.n	8004fea <_printf_i+0x22e>
 8004ffe:	bf00      	nop
 8005000:	08005275 	.word	0x08005275
 8005004:	08005286 	.word	0x08005286

08005008 <_sbrk_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4d06      	ldr	r5, [pc, #24]	; (8005024 <_sbrk_r+0x1c>)
 800500c:	2300      	movs	r3, #0
 800500e:	4604      	mov	r4, r0
 8005010:	4608      	mov	r0, r1
 8005012:	602b      	str	r3, [r5, #0]
 8005014:	f7fb fc9c 	bl	8000950 <_sbrk>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d102      	bne.n	8005022 <_sbrk_r+0x1a>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	b103      	cbz	r3, 8005022 <_sbrk_r+0x1a>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	200021a8 	.word	0x200021a8

08005028 <__sread>:
 8005028:	b510      	push	{r4, lr}
 800502a:	460c      	mov	r4, r1
 800502c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005030:	f000 f8a0 	bl	8005174 <_read_r>
 8005034:	2800      	cmp	r0, #0
 8005036:	bfab      	itete	ge
 8005038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800503a:	89a3      	ldrhlt	r3, [r4, #12]
 800503c:	181b      	addge	r3, r3, r0
 800503e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005042:	bfac      	ite	ge
 8005044:	6563      	strge	r3, [r4, #84]	; 0x54
 8005046:	81a3      	strhlt	r3, [r4, #12]
 8005048:	bd10      	pop	{r4, pc}

0800504a <__swrite>:
 800504a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800504e:	461f      	mov	r7, r3
 8005050:	898b      	ldrh	r3, [r1, #12]
 8005052:	05db      	lsls	r3, r3, #23
 8005054:	4605      	mov	r5, r0
 8005056:	460c      	mov	r4, r1
 8005058:	4616      	mov	r6, r2
 800505a:	d505      	bpl.n	8005068 <__swrite+0x1e>
 800505c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005060:	2302      	movs	r3, #2
 8005062:	2200      	movs	r2, #0
 8005064:	f000 f868 	bl	8005138 <_lseek_r>
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800506e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005072:	81a3      	strh	r3, [r4, #12]
 8005074:	4632      	mov	r2, r6
 8005076:	463b      	mov	r3, r7
 8005078:	4628      	mov	r0, r5
 800507a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800507e:	f000 b817 	b.w	80050b0 <_write_r>

08005082 <__sseek>:
 8005082:	b510      	push	{r4, lr}
 8005084:	460c      	mov	r4, r1
 8005086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508a:	f000 f855 	bl	8005138 <_lseek_r>
 800508e:	1c43      	adds	r3, r0, #1
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	bf15      	itete	ne
 8005094:	6560      	strne	r0, [r4, #84]	; 0x54
 8005096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800509a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800509e:	81a3      	strheq	r3, [r4, #12]
 80050a0:	bf18      	it	ne
 80050a2:	81a3      	strhne	r3, [r4, #12]
 80050a4:	bd10      	pop	{r4, pc}

080050a6 <__sclose>:
 80050a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050aa:	f000 b813 	b.w	80050d4 <_close_r>
	...

080050b0 <_write_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	4d07      	ldr	r5, [pc, #28]	; (80050d0 <_write_r+0x20>)
 80050b4:	4604      	mov	r4, r0
 80050b6:	4608      	mov	r0, r1
 80050b8:	4611      	mov	r1, r2
 80050ba:	2200      	movs	r2, #0
 80050bc:	602a      	str	r2, [r5, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	f7fb fbf5 	bl	80008ae <_write>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	d102      	bne.n	80050ce <_write_r+0x1e>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	b103      	cbz	r3, 80050ce <_write_r+0x1e>
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
 80050d0:	200021a8 	.word	0x200021a8

080050d4 <_close_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4d06      	ldr	r5, [pc, #24]	; (80050f0 <_close_r+0x1c>)
 80050d8:	2300      	movs	r3, #0
 80050da:	4604      	mov	r4, r0
 80050dc:	4608      	mov	r0, r1
 80050de:	602b      	str	r3, [r5, #0]
 80050e0:	f7fb fc01 	bl	80008e6 <_close>
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	d102      	bne.n	80050ee <_close_r+0x1a>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	b103      	cbz	r3, 80050ee <_close_r+0x1a>
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	200021a8 	.word	0x200021a8

080050f4 <_fstat_r>:
 80050f4:	b538      	push	{r3, r4, r5, lr}
 80050f6:	4d07      	ldr	r5, [pc, #28]	; (8005114 <_fstat_r+0x20>)
 80050f8:	2300      	movs	r3, #0
 80050fa:	4604      	mov	r4, r0
 80050fc:	4608      	mov	r0, r1
 80050fe:	4611      	mov	r1, r2
 8005100:	602b      	str	r3, [r5, #0]
 8005102:	f7fb fbfc 	bl	80008fe <_fstat>
 8005106:	1c43      	adds	r3, r0, #1
 8005108:	d102      	bne.n	8005110 <_fstat_r+0x1c>
 800510a:	682b      	ldr	r3, [r5, #0]
 800510c:	b103      	cbz	r3, 8005110 <_fstat_r+0x1c>
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	bd38      	pop	{r3, r4, r5, pc}
 8005112:	bf00      	nop
 8005114:	200021a8 	.word	0x200021a8

08005118 <_isatty_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4d06      	ldr	r5, [pc, #24]	; (8005134 <_isatty_r+0x1c>)
 800511c:	2300      	movs	r3, #0
 800511e:	4604      	mov	r4, r0
 8005120:	4608      	mov	r0, r1
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	f7fb fbfb 	bl	800091e <_isatty>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d102      	bne.n	8005132 <_isatty_r+0x1a>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	b103      	cbz	r3, 8005132 <_isatty_r+0x1a>
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	200021a8 	.word	0x200021a8

08005138 <_lseek_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	4d07      	ldr	r5, [pc, #28]	; (8005158 <_lseek_r+0x20>)
 800513c:	4604      	mov	r4, r0
 800513e:	4608      	mov	r0, r1
 8005140:	4611      	mov	r1, r2
 8005142:	2200      	movs	r2, #0
 8005144:	602a      	str	r2, [r5, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	f7fb fbf4 	bl	8000934 <_lseek>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d102      	bne.n	8005156 <_lseek_r+0x1e>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	b103      	cbz	r3, 8005156 <_lseek_r+0x1e>
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	bd38      	pop	{r3, r4, r5, pc}
 8005158:	200021a8 	.word	0x200021a8

0800515c <__malloc_lock>:
 800515c:	4801      	ldr	r0, [pc, #4]	; (8005164 <__malloc_lock+0x8>)
 800515e:	f7ff bb55 	b.w	800480c <__retarget_lock_acquire_recursive>
 8005162:	bf00      	nop
 8005164:	200021a0 	.word	0x200021a0

08005168 <__malloc_unlock>:
 8005168:	4801      	ldr	r0, [pc, #4]	; (8005170 <__malloc_unlock+0x8>)
 800516a:	f7ff bb50 	b.w	800480e <__retarget_lock_release_recursive>
 800516e:	bf00      	nop
 8005170:	200021a0 	.word	0x200021a0

08005174 <_read_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	4d07      	ldr	r5, [pc, #28]	; (8005194 <_read_r+0x20>)
 8005178:	4604      	mov	r4, r0
 800517a:	4608      	mov	r0, r1
 800517c:	4611      	mov	r1, r2
 800517e:	2200      	movs	r2, #0
 8005180:	602a      	str	r2, [r5, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	f7fb fb76 	bl	8000874 <_read>
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	d102      	bne.n	8005192 <_read_r+0x1e>
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	b103      	cbz	r3, 8005192 <_read_r+0x1e>
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	200021a8 	.word	0x200021a8

08005198 <_init>:
 8005198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519a:	bf00      	nop
 800519c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519e:	bc08      	pop	{r3}
 80051a0:	469e      	mov	lr, r3
 80051a2:	4770      	bx	lr

080051a4 <_fini>:
 80051a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a6:	bf00      	nop
 80051a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051aa:	bc08      	pop	{r3}
 80051ac:	469e      	mov	lr, r3
 80051ae:	4770      	bx	lr
