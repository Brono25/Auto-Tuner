
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007df4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08007f88  08007f88  00017f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083bc  080083bc  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  080083bc  080083bc  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083bc  080083bc  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083bc  080083bc  000183bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083c0  080083c0  000183c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  080083c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c1fc  20000230  080085f4  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c42c  080085f4  0002c42c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013df0  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a9  00000000  00000000  00034050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00036a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00037af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024760  00000000  00000000  00038a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012298  00000000  00000000  0005d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e036c  00000000  00000000  0006f490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  0014f7fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057ac  00000000  00000000  0014f8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001229  00000000  00000000  0015506c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f6c 	.word	0x08007f6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	08007f6c 	.word	0x08007f6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <print_output>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_output(float32_t *buff, int length)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
	if (print_flag == 1) return;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <print_output+0x60>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d022      	beq.n	8000c00 <print_output+0x58>

	for (int i = 0; i < length; i++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e017      	b.n	8000bf0 <print_output+0x48>
	{
		//printf("0x%04x " , buff[i]);
		printf("%lf " , buff[i]);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fcbc 	bl	8000548 <__aeabi_f2d>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <print_output+0x64>)
 8000bd6:	f005 f8d3 	bl	8005d80 <iprintf>
		if( (i % 16) == 0)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f003 030f 	and.w	r3, r3, #15
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <print_output+0x42>
		{
			printf("... \n");
 8000be4:	480a      	ldr	r0, [pc, #40]	; (8000c10 <print_output+0x68>)
 8000be6:	f005 f951 	bl	8005e8c <puts>
	for (int i = 0; i < length; i++)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	3301      	adds	r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbe3      	blt.n	8000bc0 <print_output+0x18>
		}
	}
	print_flag = 1;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <print_output+0x60>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	e000      	b.n	8000c02 <print_output+0x5a>
	if (print_flag == 1) return;
 8000c00:	bf00      	nop
}
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000024c 	.word	0x2000024c
 8000c0c:	08007f88 	.word	0x08007f88
 8000c10:	08007f90 	.word	0x08007f90

08000c14 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  in_ptr = &adc_buff[0];
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000c20:	601a      	str	r2, [r3, #0]
  out_ptr = &adc_buff[HLF_BUFFER_LEN];
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000c26:	601a      	str	r2, [r3, #0]
  callback_state = 1;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f002 fd99 	bl	800376c <HAL_GPIO_TogglePin>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20008380 	.word	0x20008380
 8000c48:	20008418 	.word	0x20008418
 8000c4c:	20000260 	.word	0x20000260
 8000c50:	2000a418 	.word	0x2000a418
 8000c54:	20000250 	.word	0x20000250

08000c58 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  in_ptr = &adc_buff[HLF_BUFFER_LEN];
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_ADC_ConvCpltCallback+0x30>)
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_ADC_ConvCpltCallback+0x34>)
 8000c64:	601a      	str	r2, [r3, #0]
  out_ptr = &adc_buff[0];
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_ADC_ConvCpltCallback+0x38>)
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000c6a:	601a      	str	r2, [r3, #0]
  callback_state = 1;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_ADC_ConvCpltCallback+0x40>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	601a      	str	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000c72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7a:	f002 fd77 	bl	800376c <HAL_GPIO_TogglePin>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20008380 	.word	0x20008380
 8000c8c:	2000a418 	.word	0x2000a418
 8000c90:	20000260 	.word	0x20000260
 8000c94:	20008418 	.word	0x20008418
 8000c98:	20000250 	.word	0x20000250

08000c9c <process_dsp>:



void process_dsp()
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0

	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	e016      	b.n	8000cd6 <process_dsp+0x3a>
	{
		dsp_buff[i] = (float32_t) in_ptr[i] - DC_BIAS;
 8000ca8:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <process_dsp+0x98>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	ee07 3a90 	vmov	s15, r3
 8000cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cbc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000d38 <process_dsp+0x9c>
 8000cc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	; (8000d3c <process_dsp+0xa0>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cdc:	dbe4      	blt.n	8000ca8 <process_dsp+0xc>
	}

	arm_fir_f32(&fir_settings, dsp_buff, dsp_buff, BLOCK_SIZE_FLOAT);
 8000cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce2:	4a16      	ldr	r2, [pc, #88]	; (8000d3c <process_dsp+0xa0>)
 8000ce4:	4915      	ldr	r1, [pc, #84]	; (8000d3c <process_dsp+0xa0>)
 8000ce6:	4816      	ldr	r0, [pc, #88]	; (8000d40 <process_dsp+0xa4>)
 8000ce8:	f004 f94a 	bl	8004f80 <arm_fir_f32>


	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	e016      	b.n	8000d20 <process_dsp+0x84>
	{
		out_ptr[i] = (uint16_t) dsp_buff[i] + DC_BIAS;
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <process_dsp+0xa0>)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	edd3 7a00 	vldr	s15, [r3]
 8000cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d02:	ee17 3a90 	vmov	r3, s15
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <process_dsp+0xa8>)
 8000d0a:	6819      	ldr	r1, [r3, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	440b      	add	r3, r1
 8000d12:	f602 0298 	addw	r2, r2, #2200	; 0x898
 8000d16:	b292      	uxth	r2, r2
 8000d18:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d26:	dbe4      	blt.n	8000cf2 <process_dsp+0x56>
	}

}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20008380 	.word	0x20008380
 8000d38:	45098000 	.word	0x45098000
 8000d3c:	20000264 	.word	0x20000264
 8000d40:	20004278 	.word	0x20004278
 8000d44:	20000260 	.word	0x20000260

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4e:	f000 fc90 	bl	8001672 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d52:	f000 f84b 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d56:	f000 f98d 	bl	8001074 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d5a:	f000 f965 	bl	8001028 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d5e:	f000 f895 	bl	8000e8c <MX_ADC1_Init>
  MX_TIM6_Init();
 8000d62:	f000 f92b 	bl	8000fbc <MX_TIM6_Init>
  MX_DAC1_Init();
 8000d66:	f000 f8f7 	bl	8000f58 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000d6a:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <main+0x80>)
 8000d6c:	f003 fedc 	bl	8004b28 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim6, TIM_CHANNEL_6);
 8000d70:	2114      	movs	r1, #20
 8000d72:	4815      	ldr	r0, [pc, #84]	; (8000dc8 <main+0x80>)
 8000d74:	f003 ff24 	bl	8004bc0 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, FULL_BUFFER_LEN);
 8000d78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d7c:	4913      	ldr	r1, [pc, #76]	; (8000dcc <main+0x84>)
 8000d7e:	4814      	ldr	r0, [pc, #80]	; (8000dd0 <main+0x88>)
 8000d80:	f001 f820 	bl	8001dc4 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)adc_buff,  FULL_BUFFER_LEN, DAC_ALIGN_12B_R);
 8000d84:	2300      	movs	r3, #0
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8c:	4a0f      	ldr	r2, [pc, #60]	; (8000dcc <main+0x84>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4810      	ldr	r0, [pc, #64]	; (8000dd4 <main+0x8c>)
 8000d92:	f001 fed3 	bl	8002b3c <HAL_DAC_Start_DMA>

  arm_fir_init_f32(&fir_settings, NUMBER_TAPS, &fir_taps[0], &fir_state[0], BLOCK_SIZE_FLOAT);
 8000d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <main+0x90>)
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <main+0x94>)
 8000da0:	2115      	movs	r1, #21
 8000da2:	480f      	ldr	r0, [pc, #60]	; (8000de0 <main+0x98>)
 8000da4:	f004 f8da 	bl	8004f5c <arm_fir_init_f32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (callback_state == 1)
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <main+0x9c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d1fb      	bne.n	8000da8 <main+0x60>
	  {

		  process_dsp();
 8000db0:	f7ff ff74 	bl	8000c9c <process_dsp>

		  callback_state = 0;
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <main+0x9c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
		  print_output(&dsp_buff[0], HLF_BUFFER_LEN);
 8000dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dbe:	480a      	ldr	r0, [pc, #40]	; (8000de8 <main+0xa0>)
 8000dc0:	f7ff fef2 	bl	8000ba8 <print_output>
	  if (callback_state == 1)
 8000dc4:	e7f0      	b.n	8000da8 <main+0x60>
 8000dc6:	bf00      	nop
 8000dc8:	200083cc 	.word	0x200083cc
 8000dcc:	20008418 	.word	0x20008418
 8000dd0:	200042cc 	.word	0x200042cc
 8000dd4:	20004264 	.word	0x20004264
 8000dd8:	20004330 	.word	0x20004330
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20004278 	.word	0x20004278
 8000de4:	20000250 	.word	0x20000250
 8000de8:	20000264 	.word	0x20000264

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b096      	sub	sp, #88	; 0x58
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	2244      	movs	r2, #68	; 0x44
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f004 fb4e 	bl	800549c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	463b      	mov	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e12:	f002 fcd3 	bl	80037bc <HAL_PWREx_ControlVoltageScaling>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e1c:	f000 f976 	bl	800110c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e20:	2301      	movs	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000e32:	2306      	movs	r3, #6
 8000e34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000e36:	2350      	movs	r3, #80	; 0x50
 8000e38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000e42:	2304      	movs	r3, #4
 8000e44:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f002 fd0c 	bl	8003868 <HAL_RCC_OscConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e56:	f000 f959 	bl	800110c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2104      	movs	r1, #4
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 f90a 	bl	800408c <HAL_RCC_ClockConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e7e:	f000 f945 	bl	800110c <Error_Handler>
  }
}
 8000e82:	bf00      	nop
 8000e84:	3758      	adds	r7, #88	; 0x58
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000ea4:	4a2a      	ldr	r2, [pc, #168]	; (8000f50 <MX_ADC1_Init+0xc4>)
 8000ea6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ea8:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eae:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eba:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ec6:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000ee2:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000f08:	f000 fe14 	bl	8001b34 <HAL_ADC_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000f12:	f000 f8fb 	bl	800110c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_ADC1_Init+0xc8>)
 8000f18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f22:	237f      	movs	r3, #127	; 0x7f
 8000f24:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f26:	2304      	movs	r3, #4
 8000f28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	463b      	mov	r3, r7
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <MX_ADC1_Init+0xc0>)
 8000f34:	f000 ffd4 	bl	8001ee0 <HAL_ADC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000f3e:	f000 f8e5 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200042cc 	.word	0x200042cc
 8000f50:	50040000 	.word	0x50040000
 8000f54:	14f00020 	.word	0x14f00020

08000f58 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2224      	movs	r2, #36	; 0x24
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f004 fa99 	bl	800549c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_DAC1_Init+0x5c>)
 8000f6c:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <MX_DAC1_Init+0x60>)
 8000f6e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f70:	4810      	ldr	r0, [pc, #64]	; (8000fb4 <MX_DAC1_Init+0x5c>)
 8000f72:	f001 fdc0 	bl	8002af6 <HAL_DAC_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f7c:	f000 f8c6 	bl	800110c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000f84:	2304      	movs	r3, #4
 8000f86:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2200      	movs	r2, #0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <MX_DAC1_Init+0x5c>)
 8000f9c:	f001 feb8 	bl	8002d10 <HAL_DAC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000fa6:	f000 f8b1 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20004264 	.word	0x20004264
 8000fb8:	40007400 	.word	0x40007400

08000fbc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_TIM6_Init+0x64>)
 8000fce:	4a15      	ldr	r2, [pc, #84]	; (8001024 <MX_TIM6_Init+0x68>)
 8000fd0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_TIM6_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_TIM6_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000 - 1;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <MX_TIM6_Init+0x64>)
 8000fe0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000fe4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_TIM6_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <MX_TIM6_Init+0x64>)
 8000fee:	f003 fd43 	bl	8004a78 <HAL_TIM_Base_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ff8:	f000 f888 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ffc:	2320      	movs	r3, #32
 8000ffe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_TIM6_Init+0x64>)
 800100a:	f003 ff41 	bl	8004e90 <HAL_TIMEx_MasterConfigSynchronization>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001014:	f000 f87a 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200083cc 	.word	0x200083cc
 8001024:	40001000 	.word	0x40001000

08001028 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_DMA_Init+0x48>)
 8001030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001032:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <MX_DMA_Init+0x48>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6493      	str	r3, [r2, #72]	; 0x48
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <MX_DMA_Init+0x48>)
 800103c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	200b      	movs	r0, #11
 800104c:	f001 fd1d 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001050:	200b      	movs	r0, #11
 8001052:	f001 fd36 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	200d      	movs	r0, #13
 800105c:	f001 fd15 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001060:	200d      	movs	r0, #13
 8001062:	f001 fd2e 	bl	8002ac2 <HAL_NVIC_EnableIRQ>

}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_GPIO_Init+0x94>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <MX_GPIO_Init+0x94>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_GPIO_Init+0x94>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_GPIO_Init+0x94>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4a18      	ldr	r2, [pc, #96]	; (8001108 <MX_GPIO_Init+0x94>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <MX_GPIO_Init+0x94>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_GPIO_Init+0x94>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <MX_GPIO_Init+0x94>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_GPIO_Init+0x94>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f002 fb2e 	bl	800373c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80010e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fc:	f002 f9a4 	bl	8003448 <HAL_GPIO_Init>

}
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40021000 	.word	0x40021000

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_MspInit+0x44>)
 8001120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_MspInit+0x44>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6613      	str	r3, [r2, #96]	; 0x60
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_MspInit+0x44>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_MspInit+0x44>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	4a08      	ldr	r2, [pc, #32]	; (800115c <HAL_MspInit+0x44>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	6593      	str	r3, [r2, #88]	; 0x58
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_MspInit+0x44>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40021000 	.word	0x40021000

08001160 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0a0      	sub	sp, #128	; 0x80
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	225c      	movs	r2, #92	; 0x5c
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f004 f98b 	bl	800549c <memset>
  if(hadc->Instance==ADC1)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a3b      	ldr	r2, [pc, #236]	; (8001278 <HAL_ADC_MspInit+0x118>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d16f      	bne.n	8001270 <HAL_ADC_MspInit+0x110>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001190:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001194:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001196:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800119a:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800119c:	2303      	movs	r3, #3
 800119e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 6;
 80011a0:	2306      	movs	r3, #6
 80011a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 43;
 80011a4:	232b      	movs	r3, #43	; 0x2b
 80011a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011a8:	2307      	movs	r3, #7
 80011aa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80011b0:	2304      	movs	r3, #4
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 f950 	bl	8004464 <HAL_RCCEx_PeriphCLKConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80011ca:	f7ff ff9f 	bl	800110c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011ce:	4b2b      	ldr	r3, [pc, #172]	; (800127c <HAL_ADC_MspInit+0x11c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	4a2a      	ldr	r2, [pc, #168]	; (800127c <HAL_ADC_MspInit+0x11c>)
 80011d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011da:	4b28      	ldr	r3, [pc, #160]	; (800127c <HAL_ADC_MspInit+0x11c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <HAL_ADC_MspInit+0x11c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	4a24      	ldr	r2, [pc, #144]	; (800127c <HAL_ADC_MspInit+0x11c>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <HAL_ADC_MspInit+0x11c>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011fe:	2301      	movs	r3, #1
 8001200:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001202:	230b      	movs	r3, #11
 8001204:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001214:	f002 f918 	bl	8003448 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_ADC_MspInit+0x120>)
 800121a:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <HAL_ADC_MspInit+0x124>)
 800121c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <HAL_ADC_MspInit+0x120>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <HAL_ADC_MspInit+0x120>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_ADC_MspInit+0x120>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_ADC_MspInit+0x120>)
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_ADC_MspInit+0x120>)
 8001238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800123c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_ADC_MspInit+0x120>)
 8001240:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001244:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_ADC_MspInit+0x120>)
 8001248:	2220      	movs	r2, #32
 800124a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <HAL_ADC_MspInit+0x120>)
 800124e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001252:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001254:	480a      	ldr	r0, [pc, #40]	; (8001280 <HAL_ADC_MspInit+0x120>)
 8001256:	f001 feff 	bl	8003058 <HAL_DMA_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8001260:	f7ff ff54 	bl	800110c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_ADC_MspInit+0x120>)
 8001268:	64da      	str	r2, [r3, #76]	; 0x4c
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <HAL_ADC_MspInit+0x120>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001270:	bf00      	nop
 8001272:	3780      	adds	r7, #128	; 0x80
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	50040000 	.word	0x50040000
 800127c:	40021000 	.word	0x40021000
 8001280:	20008384 	.word	0x20008384
 8001284:	40020008 	.word	0x40020008

08001288 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a2b      	ldr	r2, [pc, #172]	; (8001354 <HAL_DAC_MspInit+0xcc>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d14f      	bne.n	800134a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <HAL_DAC_MspInit+0xd0>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ae:	4a2a      	ldr	r2, [pc, #168]	; (8001358 <HAL_DAC_MspInit+0xd0>)
 80012b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012b4:	6593      	str	r3, [r2, #88]	; 0x58
 80012b6:	4b28      	ldr	r3, [pc, #160]	; (8001358 <HAL_DAC_MspInit+0xd0>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <HAL_DAC_MspInit+0xd0>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a24      	ldr	r2, [pc, #144]	; (8001358 <HAL_DAC_MspInit+0xd0>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b22      	ldr	r3, [pc, #136]	; (8001358 <HAL_DAC_MspInit+0xd0>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012da:	2310      	movs	r3, #16
 80012dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012de:	2303      	movs	r3, #3
 80012e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f0:	f002 f8aa 	bl	8003448 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_DAC_MspInit+0xd4>)
 80012f6:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <HAL_DAC_MspInit+0xd8>)
 80012f8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_DAC_MspInit+0xd4>)
 80012fc:	2206      	movs	r2, #6
 80012fe:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <HAL_DAC_MspInit+0xd4>)
 8001302:	2210      	movs	r2, #16
 8001304:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_DAC_MspInit+0xd4>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <HAL_DAC_MspInit+0xd4>)
 800130e:	2280      	movs	r2, #128	; 0x80
 8001310:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_DAC_MspInit+0xd4>)
 8001314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001318:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_DAC_MspInit+0xd4>)
 800131c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001320:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_DAC_MspInit+0xd4>)
 8001324:	2220      	movs	r2, #32
 8001326:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <HAL_DAC_MspInit+0xd4>)
 800132a:	2200      	movs	r2, #0
 800132c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800132e:	480b      	ldr	r0, [pc, #44]	; (800135c <HAL_DAC_MspInit+0xd4>)
 8001330:	f001 fe92 	bl	8003058 <HAL_DMA_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800133a:	f7ff fee7 	bl	800110c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <HAL_DAC_MspInit+0xd4>)
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	4a05      	ldr	r2, [pc, #20]	; (800135c <HAL_DAC_MspInit+0xd4>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40007400 	.word	0x40007400
 8001358:	40021000 	.word	0x40021000
 800135c:	20004284 	.word	0x20004284
 8001360:	40020030 	.word	0x40020030

08001364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0a      	ldr	r2, [pc, #40]	; (800139c <HAL_TIM_Base_MspInit+0x38>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d10b      	bne.n	800138e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <HAL_TIM_Base_MspInit+0x3c>)
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	6593      	str	r3, [r2, #88]	; 0x58
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40001000 	.word	0x40001000
 80013a0:	40021000 	.word	0x40021000

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f0:	f000 f994 	bl	800171c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <DMA1_Channel1_IRQHandler+0x10>)
 80013fe:	f001 ff43 	bl	8003288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20008384 	.word	0x20008384

0800140c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <DMA1_Channel3_IRQHandler+0x10>)
 8001412:	f001 ff39 	bl	8003288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20004284 	.word	0x20004284

08001420 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <ITM_SendChar+0x48>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <ITM_SendChar+0x48>)
 8001430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001434:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <ITM_SendChar+0x4c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a0c      	ldr	r2, [pc, #48]	; (800146c <ITM_SendChar+0x4c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001442:	bf00      	nop
 8001444:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f8      	beq.n	8001444 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001452:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	6013      	str	r3, [r2, #0]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000edfc 	.word	0xe000edfc
 800146c:	e0000e00 	.word	0xe0000e00

08001470 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	return 1;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_kill>:

int _kill(int pid, int sig)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800148a:	f003 ffdd 	bl	8005448 <__errno>
 800148e:	4603      	mov	r3, r0
 8001490:	2216      	movs	r2, #22
 8001492:	601a      	str	r2, [r3, #0]
	return -1;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_exit>:

void _exit (int status)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ffe7 	bl	8001480 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014b2:	e7fe      	b.n	80014b2 <_exit+0x12>

080014b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e00a      	b.n	80014dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014c6:	f3af 8000 	nop.w
 80014ca:	4601      	mov	r1, r0
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	60ba      	str	r2, [r7, #8]
 80014d2:	b2ca      	uxtb	r2, r1
 80014d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dbf0      	blt.n	80014c6 <_read+0x12>
	}

return len;
 80014e4:	687b      	ldr	r3, [r7, #4]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e009      	b.n	8001514 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);   // This sends to the trace
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff89 	bl	8001420 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf1      	blt.n	8001500 <_write+0x12>
	}
	return len;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_close>:

int _close(int file)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
	return -1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154e:	605a      	str	r2, [r3, #4]
	return 0;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <_isatty>:

int _isatty(int file)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
	return 1;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
	return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <_sbrk+0x5c>)
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <_sbrk+0x60>)
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <_sbrk+0x64>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <_sbrk+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d207      	bcs.n	80015d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c0:	f003 ff42 	bl	8005448 <__errno>
 80015c4:	4603      	mov	r3, r0
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ce:	e009      	b.n	80015e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <_sbrk+0x64>)
 80015e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20010000 	.word	0x20010000
 80015f0:	00000400 	.word	0x00000400
 80015f4:	20000254 	.word	0x20000254
 80015f8:	2000c430 	.word	0x2000c430

080015fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <SystemInit+0x20>)
 8001602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <SystemInit+0x20>)
 8001608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800160c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001658 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001624:	f7ff ffea 	bl	80015fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <LoopForever+0x6>)
  ldr r1, =_edata
 800162a:	490d      	ldr	r1, [pc, #52]	; (8001660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800162c:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <LoopForever+0xe>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001640:	4c0a      	ldr	r4, [pc, #40]	; (800166c <LoopForever+0x16>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164e:	f003 ff01 	bl	8005454 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001652:	f7ff fb79 	bl	8000d48 <main>

08001656 <LoopForever>:

LoopForever:
    b LoopForever
 8001656:	e7fe      	b.n	8001656 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001658:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8001664:	080083c4 	.word	0x080083c4
  ldr r2, =_sbss
 8001668:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 800166c:	2000c42c 	.word	0x2000c42c

08001670 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC1_IRQHandler>

08001672 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f001 f9f9 	bl	8002a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001682:	200f      	movs	r0, #15
 8001684:	f000 f80e 	bl	80016a4 <HAL_InitTick>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	e001      	b.n	8001698 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001694:	f7ff fd40 	bl	8001118 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001698:	79fb      	ldrb	r3, [r7, #7]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_InitTick+0x6c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d023      	beq.n	8001700 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016b8:	4b16      	ldr	r3, [pc, #88]	; (8001714 <HAL_InitTick+0x70>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_InitTick+0x6c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fa05 	bl	8002ade <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10f      	bne.n	80016fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d809      	bhi.n	80016f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016e8:	f001 f9cf 	bl	8002a8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_InitTick+0x74>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e007      	b.n	8001704 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e004      	b.n	8001704 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
 80016fe:	e001      	b.n	8001704 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000005c 	.word	0x2000005c
 8001714:	20000054 	.word	0x20000054
 8001718:	20000058 	.word	0x20000058

0800171c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x20>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x24>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_IncTick+0x24>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	2000005c 	.word	0x2000005c
 8001740:	2000c418 	.word	0x2000c418

08001744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_GetTick+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	2000c418 	.word	0x2000c418

0800175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff ffee 	bl	8001744 <HAL_GetTick>
 8001768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001774:	d005      	beq.n	8001782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_Delay+0x44>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001782:	bf00      	nop
 8001784:	f7ff ffde 	bl	8001744 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	429a      	cmp	r2, r3
 8001792:	d8f7      	bhi.n	8001784 <HAL_Delay+0x28>
  {
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	2000005c 	.word	0x2000005c

080017a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	609a      	str	r2, [r3, #8]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	609a      	str	r2, [r3, #8]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3360      	adds	r3, #96	; 0x60
 800181e:	461a      	mov	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <LL_ADC_SetOffset+0x44>)
 800182e:	4013      	ands	r3, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	4313      	orrs	r3, r2
 800183c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001844:	bf00      	nop
 8001846:	371c      	adds	r7, #28
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	03fff000 	.word	0x03fff000

08001854 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3360      	adds	r3, #96	; 0x60
 8001862:	461a      	mov	r2, r3
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3360      	adds	r3, #96	; 0x60
 8001890:	461a      	mov	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018aa:	bf00      	nop
 80018ac:	371c      	adds	r7, #28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3330      	adds	r3, #48	; 0x30
 80018ec:	461a      	mov	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	4413      	add	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f003 031f 	and.w	r3, r3, #31
 8001906:	211f      	movs	r1, #31
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	0e9b      	lsrs	r3, r3, #26
 8001914:	f003 011f 	and.w	r1, r3, #31
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	431a      	orrs	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001928:	bf00      	nop
 800192a:	371c      	adds	r7, #28
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3314      	adds	r3, #20
 8001944:	461a      	mov	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	0e5b      	lsrs	r3, r3, #25
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	4413      	add	r3, r2
 8001952:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	0d1b      	lsrs	r3, r3, #20
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	2107      	movs	r1, #7
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	401a      	ands	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	0d1b      	lsrs	r3, r3, #20
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a4:	43db      	mvns	r3, r3
 80019a6:	401a      	ands	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0318 	and.w	r3, r3, #24
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019b0:	40d9      	lsrs	r1, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	400b      	ands	r3, r1
 80019b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ba:	431a      	orrs	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	0007ffff 	.word	0x0007ffff

080019d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6093      	str	r3, [r2, #8]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a0c:	d101      	bne.n	8001a12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a5c:	d101      	bne.n	8001a62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <LL_ADC_IsEnabled+0x18>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <LL_ADC_IsEnabled+0x1a>
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ace:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ad2:	f043 0204 	orr.w	r2, r3, #4
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d101      	bne.n	8001afe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d101      	bne.n	8001b24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e12c      	b.n	8001da8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d109      	bne.n	8001b70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff faff 	bl	8001160 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff3f 	bl	80019f8 <LL_ADC_IsDeepPowerDownEnabled>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d004      	beq.n	8001b8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff25 	bl	80019d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ff5a 	bl	8001a48 <LL_ADC_IsInternalRegulatorEnabled>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d115      	bne.n	8001bc6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff3e 	bl	8001a20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ba4:	4b82      	ldr	r3, [pc, #520]	; (8001db0 <HAL_ADC_Init+0x27c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	099b      	lsrs	r3, r3, #6
 8001baa:	4a82      	ldr	r2, [pc, #520]	; (8001db4 <HAL_ADC_Init+0x280>)
 8001bac:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb0:	099b      	lsrs	r3, r3, #6
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bb8:	e002      	b.n	8001bc0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f9      	bne.n	8001bba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff3c 	bl	8001a48 <LL_ADC_IsInternalRegulatorEnabled>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10d      	bne.n	8001bf2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bda:	f043 0210 	orr.w	r2, r3, #16
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	f043 0201 	orr.w	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff75 	bl	8001ae6 <LL_ADC_REG_IsConversionOngoing>
 8001bfc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f040 80c5 	bne.w	8001d96 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f040 80c1 	bne.w	8001d96 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c1c:	f043 0202 	orr.w	r2, r3, #2
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff35 	bl	8001a98 <LL_ADC_IsEnabled>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10b      	bne.n	8001c4c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c34:	4860      	ldr	r0, [pc, #384]	; (8001db8 <HAL_ADC_Init+0x284>)
 8001c36:	f7ff ff2f 	bl	8001a98 <LL_ADC_IsEnabled>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d105      	bne.n	8001c4c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4619      	mov	r1, r3
 8001c46:	485d      	ldr	r0, [pc, #372]	; (8001dbc <HAL_ADC_Init+0x288>)
 8001c48:	f7ff fdac 	bl	80017a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7e5b      	ldrb	r3, [r3, #25]
 8001c50:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c56:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c5c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c62:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c6a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d106      	bne.n	8001c88 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	045b      	lsls	r3, r3, #17
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d009      	beq.n	8001ca4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	4b45      	ldr	r3, [pc, #276]	; (8001dc0 <HAL_ADC_Init+0x28c>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	69b9      	ldr	r1, [r7, #24]
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff12 	bl	8001ae6 <LL_ADC_REG_IsConversionOngoing>
 8001cc2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff1f 	bl	8001b0c <LL_ADC_INJ_IsConversionOngoing>
 8001cce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d13d      	bne.n	8001d52 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d13a      	bne.n	8001d52 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ce0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ce8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cf8:	f023 0302 	bic.w	r3, r3, #2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	69b9      	ldr	r1, [r7, #24]
 8001d02:	430b      	orrs	r3, r1
 8001d04:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d118      	bne.n	8001d42 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d1a:	f023 0304 	bic.w	r3, r3, #4
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d26:	4311      	orrs	r1, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d32:	430a      	orrs	r2, r1
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	611a      	str	r2, [r3, #16]
 8001d40:	e007      	b.n	8001d52 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0201 	bic.w	r2, r2, #1
 8001d50:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d10c      	bne.n	8001d74 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	f023 010f 	bic.w	r1, r3, #15
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	1e5a      	subs	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	631a      	str	r2, [r3, #48]	; 0x30
 8001d72:	e007      	b.n	8001d84 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 020f 	bic.w	r2, r2, #15
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	f023 0303 	bic.w	r3, r3, #3
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	655a      	str	r2, [r3, #84]	; 0x54
 8001d94:	e007      	b.n	8001da6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	f043 0210 	orr.w	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001da6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000054 	.word	0x20000054
 8001db4:	053e2d63 	.word	0x053e2d63
 8001db8:	50040000 	.word	0x50040000
 8001dbc:	50040300 	.word	0x50040300
 8001dc0:	fff0c007 	.word	0xfff0c007

08001dc4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fe86 	bl	8001ae6 <LL_ADC_REG_IsConversionOngoing>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d167      	bne.n	8001eb0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_Start_DMA+0x2a>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e063      	b.n	8001eb6 <HAL_ADC_Start_DMA+0xf2>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 fc52 	bl	80026a0 <ADC_Enable>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d14f      	bne.n	8001ea6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e0e:	f023 0301 	bic.w	r3, r3, #1
 8001e12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d006      	beq.n	8001e34 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	f023 0206 	bic.w	r2, r3, #6
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	659a      	str	r2, [r3, #88]	; 0x58
 8001e32:	e002      	b.n	8001e3a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	4a20      	ldr	r2, [pc, #128]	; (8001ec0 <HAL_ADC_Start_DMA+0xfc>)
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	4a1f      	ldr	r2, [pc, #124]	; (8001ec4 <HAL_ADC_Start_DMA+0x100>)
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	4a1e      	ldr	r2, [pc, #120]	; (8001ec8 <HAL_ADC_Start_DMA+0x104>)
 8001e50:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	221c      	movs	r2, #28
 8001e58:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0210 	orr.w	r2, r2, #16
 8001e70:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3340      	adds	r3, #64	; 0x40
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f001 f999 	bl	80031c8 <HAL_DMA_Start_IT>
 8001e96:	4603      	mov	r3, r0
 8001e98:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fe0d 	bl	8001abe <LL_ADC_REG_StartConversion>
 8001ea4:	e006      	b.n	8001eb4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001eae:	e001      	b.n	8001eb4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	080027ad 	.word	0x080027ad
 8001ec4:	08002885 	.word	0x08002885
 8001ec8:	080028a1 	.word	0x080028a1

08001ecc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b0b6      	sub	sp, #216	; 0xd8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x22>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e3b9      	b.n	8002676 <HAL_ADC_ConfigChannel+0x796>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fde9 	bl	8001ae6 <LL_ADC_REG_IsConversionOngoing>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 839e 	bne.w	8002658 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d824      	bhi.n	8001f6e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	3b02      	subs	r3, #2
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d81b      	bhi.n	8001f66 <HAL_ADC_ConfigChannel+0x86>
 8001f2e:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <HAL_ADC_ConfigChannel+0x54>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001f45 	.word	0x08001f45
 8001f38:	08001f4d 	.word	0x08001f4d
 8001f3c:	08001f55 	.word	0x08001f55
 8001f40:	08001f5d 	.word	0x08001f5d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	220c      	movs	r2, #12
 8001f48:	605a      	str	r2, [r3, #4]
          break;
 8001f4a:	e011      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2212      	movs	r2, #18
 8001f50:	605a      	str	r2, [r3, #4]
          break;
 8001f52:	e00d      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2218      	movs	r2, #24
 8001f58:	605a      	str	r2, [r3, #4]
          break;
 8001f5a:	e009      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f62:	605a      	str	r2, [r3, #4]
          break;
 8001f64:	e004      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2206      	movs	r2, #6
 8001f6a:	605a      	str	r2, [r3, #4]
          break;
 8001f6c:	e000      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001f6e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f7ff fcad 	bl	80018dc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fdad 	bl	8001ae6 <LL_ADC_REG_IsConversionOngoing>
 8001f8c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fdb9 	bl	8001b0c <LL_ADC_INJ_IsConversionOngoing>
 8001f9a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f040 81a6 	bne.w	80022f4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f040 81a1 	bne.w	80022f4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	6819      	ldr	r1, [r3, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f7ff fcb8 	bl	8001934 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	08db      	lsrs	r3, r3, #3
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d00a      	beq.n	8001ffc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6919      	ldr	r1, [r3, #16]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ff6:	f7ff fc09 	bl	800180c <LL_ADC_SetOffset>
 8001ffa:	e17b      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fc26 	bl	8001854 <LL_ADC_GetOffsetChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10a      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x148>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fc1b 	bl	8001854 <LL_ADC_GetOffsetChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	0e9b      	lsrs	r3, r3, #26
 8002022:	f003 021f 	and.w	r2, r3, #31
 8002026:	e01e      	b.n	8002066 <HAL_ADC_ConfigChannel+0x186>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fc10 	bl	8001854 <LL_ADC_GetOffsetChannel>
 8002034:	4603      	mov	r3, r0
 8002036:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002046:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800204a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800204e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002056:	2320      	movs	r3, #32
 8002058:	e004      	b.n	8002064 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800205a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <HAL_ADC_ConfigChannel+0x19e>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0e9b      	lsrs	r3, r3, #26
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	e018      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x1d0>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002096:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800209a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80020a2:	2320      	movs	r3, #32
 80020a4:	e004      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80020a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d106      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fbdf 	bl	8001880 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2101      	movs	r1, #1
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fbc3 	bl	8001854 <LL_ADC_GetOffsetChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x20e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fbb8 	bl	8001854 <LL_ADC_GetOffsetChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	0e9b      	lsrs	r3, r3, #26
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	e01e      	b.n	800212c <HAL_ADC_ConfigChannel+0x24c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2101      	movs	r1, #1
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fbad 	bl	8001854 <LL_ADC_GetOffsetChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800210c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002110:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800211c:	2320      	movs	r3, #32
 800211e:	e004      	b.n	800212a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002134:	2b00      	cmp	r3, #0
 8002136:	d105      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x264>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0e9b      	lsrs	r3, r3, #26
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	e018      	b.n	8002176 <HAL_ADC_ConfigChannel+0x296>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002158:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800215c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002168:	2320      	movs	r3, #32
 800216a:	e004      	b.n	8002176 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800216c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002176:	429a      	cmp	r2, r3
 8002178:	d106      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2200      	movs	r2, #0
 8002180:	2101      	movs	r1, #1
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fb7c 	bl	8001880 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2102      	movs	r1, #2
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fb60 	bl	8001854 <LL_ADC_GetOffsetChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10a      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x2d4>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2102      	movs	r1, #2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fb55 	bl	8001854 <LL_ADC_GetOffsetChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	0e9b      	lsrs	r3, r3, #26
 80021ae:	f003 021f 	and.w	r2, r3, #31
 80021b2:	e01e      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x312>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2102      	movs	r1, #2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fb4a 	bl	8001854 <LL_ADC_GetOffsetChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80021d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80021da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80021e2:	2320      	movs	r3, #32
 80021e4:	e004      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80021e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d105      	bne.n	800220a <HAL_ADC_ConfigChannel+0x32a>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0e9b      	lsrs	r3, r3, #26
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	e016      	b.n	8002238 <HAL_ADC_ConfigChannel+0x358>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800221c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800221e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002222:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800222a:	2320      	movs	r3, #32
 800222c:	e004      	b.n	8002238 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800222e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002238:	429a      	cmp	r2, r3
 800223a:	d106      	bne.n	800224a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2200      	movs	r2, #0
 8002242:	2102      	movs	r1, #2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fb1b 	bl	8001880 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2103      	movs	r1, #3
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff faff 	bl	8001854 <LL_ADC_GetOffsetChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x396>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2103      	movs	r1, #3
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff faf4 	bl	8001854 <LL_ADC_GetOffsetChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	0e9b      	lsrs	r3, r3, #26
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	e017      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x3c6>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2103      	movs	r1, #3
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fae9 	bl	8001854 <LL_ADC_GetOffsetChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800228e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002290:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e003      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800229c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <HAL_ADC_ConfigChannel+0x3de>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0e9b      	lsrs	r3, r3, #26
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	e011      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x402>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80022cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80022d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80022d6:	2320      	movs	r3, #32
 80022d8:	e003      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80022da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d106      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2200      	movs	r2, #0
 80022ec:	2103      	movs	r1, #3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fac6 	bl	8001880 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fbcd 	bl	8001a98 <LL_ADC_IsEnabled>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	f040 813f 	bne.w	8002584 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6819      	ldr	r1, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	461a      	mov	r2, r3
 8002314:	f7ff fb3a 	bl	800198c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a8e      	ldr	r2, [pc, #568]	; (8002558 <HAL_ADC_ConfigChannel+0x678>)
 800231e:	4293      	cmp	r3, r2
 8002320:	f040 8130 	bne.w	8002584 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10b      	bne.n	800234c <HAL_ADC_ConfigChannel+0x46c>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	3301      	adds	r3, #1
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	2b09      	cmp	r3, #9
 8002342:	bf94      	ite	ls
 8002344:	2301      	movls	r3, #1
 8002346:	2300      	movhi	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	e019      	b.n	8002380 <HAL_ADC_ConfigChannel+0x4a0>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800235a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800235c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800235e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e003      	b.n	8002370 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	2b09      	cmp	r3, #9
 8002378:	bf94      	ite	ls
 800237a:	2301      	movls	r3, #1
 800237c:	2300      	movhi	r3, #0
 800237e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002380:	2b00      	cmp	r3, #0
 8002382:	d079      	beq.n	8002478 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x4c0>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	3301      	adds	r3, #1
 8002398:	069b      	lsls	r3, r3, #26
 800239a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239e:	e015      	b.n	80023cc <HAL_ADC_ConfigChannel+0x4ec>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80023b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80023b8:	2320      	movs	r3, #32
 80023ba:	e003      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80023bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	3301      	adds	r3, #1
 80023c6:	069b      	lsls	r3, r3, #26
 80023c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x50c>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	e017      	b.n	800241c <HAL_ADC_ConfigChannel+0x53c>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80023fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80023fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002404:	2320      	movs	r3, #32
 8002406:	e003      	b.n	8002410 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3301      	adds	r3, #1
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	2101      	movs	r1, #1
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	ea42 0103 	orr.w	r1, r2, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x562>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0e9b      	lsrs	r3, r3, #26
 8002432:	3301      	adds	r3, #1
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	051b      	lsls	r3, r3, #20
 8002440:	e018      	b.n	8002474 <HAL_ADC_ConfigChannel+0x594>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800245a:	2320      	movs	r3, #32
 800245c:	e003      	b.n	8002466 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800245e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	3301      	adds	r3, #1
 8002468:	f003 021f 	and.w	r2, r3, #31
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002474:	430b      	orrs	r3, r1
 8002476:	e080      	b.n	800257a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x5b4>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	3301      	adds	r3, #1
 800248c:	069b      	lsls	r3, r3, #26
 800248e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002492:	e015      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x5e0>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80024ac:	2320      	movs	r3, #32
 80024ae:	e003      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	069b      	lsls	r3, r3, #26
 80024bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d109      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x600>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	3301      	adds	r3, #1
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	2101      	movs	r1, #1
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	e017      	b.n	8002510 <HAL_ADC_ConfigChannel+0x630>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	61fb      	str	r3, [r7, #28]
  return result;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80024f8:	2320      	movs	r3, #32
 80024fa:	e003      	b.n	8002504 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2101      	movs	r1, #1
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	ea42 0103 	orr.w	r1, r2, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10d      	bne.n	800253c <HAL_ADC_ConfigChannel+0x65c>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0e9b      	lsrs	r3, r3, #26
 8002526:	3301      	adds	r3, #1
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	3b1e      	subs	r3, #30
 8002534:	051b      	lsls	r3, r3, #20
 8002536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800253a:	e01d      	b.n	8002578 <HAL_ADC_ConfigChannel+0x698>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	613b      	str	r3, [r7, #16]
  return result;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d103      	bne.n	800255c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002554:	2320      	movs	r3, #32
 8002556:	e005      	b.n	8002564 <HAL_ADC_ConfigChannel+0x684>
 8002558:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	3301      	adds	r3, #1
 8002566:	f003 021f 	and.w	r2, r3, #31
 800256a:	4613      	mov	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	3b1e      	subs	r3, #30
 8002572:	051b      	lsls	r3, r3, #20
 8002574:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002578:	430b      	orrs	r3, r1
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	6892      	ldr	r2, [r2, #8]
 800257e:	4619      	mov	r1, r3
 8002580:	f7ff f9d8 	bl	8001934 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <HAL_ADC_ConfigChannel+0x7a0>)
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d06c      	beq.n	800266a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002590:	483c      	ldr	r0, [pc, #240]	; (8002684 <HAL_ADC_ConfigChannel+0x7a4>)
 8002592:	f7ff f92d 	bl	80017f0 <LL_ADC_GetCommonPathInternalCh>
 8002596:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a3a      	ldr	r2, [pc, #232]	; (8002688 <HAL_ADC_ConfigChannel+0x7a8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d127      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d121      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a35      	ldr	r2, [pc, #212]	; (800268c <HAL_ADC_ConfigChannel+0x7ac>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d157      	bne.n	800266a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025c2:	4619      	mov	r1, r3
 80025c4:	482f      	ldr	r0, [pc, #188]	; (8002684 <HAL_ADC_ConfigChannel+0x7a4>)
 80025c6:	f7ff f900 	bl	80017ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025ca:	4b31      	ldr	r3, [pc, #196]	; (8002690 <HAL_ADC_ConfigChannel+0x7b0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	099b      	lsrs	r3, r3, #6
 80025d0:	4a30      	ldr	r2, [pc, #192]	; (8002694 <HAL_ADC_ConfigChannel+0x7b4>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025e4:	e002      	b.n	80025ec <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f9      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025f2:	e03a      	b.n	800266a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a27      	ldr	r2, [pc, #156]	; (8002698 <HAL_ADC_ConfigChannel+0x7b8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d113      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x746>
 80025fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10d      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1f      	ldr	r2, [pc, #124]	; (800268c <HAL_ADC_ConfigChannel+0x7ac>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d12a      	bne.n	800266a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002618:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800261c:	4619      	mov	r1, r3
 800261e:	4819      	ldr	r0, [pc, #100]	; (8002684 <HAL_ADC_ConfigChannel+0x7a4>)
 8002620:	f7ff f8d3 	bl	80017ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002624:	e021      	b.n	800266a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a1c      	ldr	r2, [pc, #112]	; (800269c <HAL_ADC_ConfigChannel+0x7bc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d11c      	bne.n	800266a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d116      	bne.n	800266a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a12      	ldr	r2, [pc, #72]	; (800268c <HAL_ADC_ConfigChannel+0x7ac>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d111      	bne.n	800266a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002646:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800264a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800264e:	4619      	mov	r1, r3
 8002650:	480c      	ldr	r0, [pc, #48]	; (8002684 <HAL_ADC_ConfigChannel+0x7a4>)
 8002652:	f7ff f8ba 	bl	80017ca <LL_ADC_SetCommonPathInternalCh>
 8002656:	e008      	b.n	800266a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	f043 0220 	orr.w	r2, r3, #32
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002672:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002676:	4618      	mov	r0, r3
 8002678:	37d8      	adds	r7, #216	; 0xd8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	80080000 	.word	0x80080000
 8002684:	50040300 	.word	0x50040300
 8002688:	c7520000 	.word	0xc7520000
 800268c:	50040000 	.word	0x50040000
 8002690:	20000054 	.word	0x20000054
 8002694:	053e2d63 	.word	0x053e2d63
 8002698:	cb840000 	.word	0xcb840000
 800269c:	80000001 	.word	0x80000001

080026a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff f9f1 	bl	8001a98 <LL_ADC_IsEnabled>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d169      	bne.n	8002790 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	4b36      	ldr	r3, [pc, #216]	; (800279c <ADC_Enable+0xfc>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00d      	beq.n	80026e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e055      	b.n	8002792 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff f9c0 	bl	8001a70 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80026f0:	482b      	ldr	r0, [pc, #172]	; (80027a0 <ADC_Enable+0x100>)
 80026f2:	f7ff f87d 	bl	80017f0 <LL_ADC_GetCommonPathInternalCh>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002700:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <ADC_Enable+0x104>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	099b      	lsrs	r3, r3, #6
 8002706:	4a28      	ldr	r2, [pc, #160]	; (80027a8 <ADC_Enable+0x108>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	099b      	lsrs	r3, r3, #6
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800271a:	e002      	b.n	8002722 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	3b01      	subs	r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f9      	bne.n	800271c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002728:	f7ff f80c 	bl	8001744 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800272e:	e028      	b.n	8002782 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff f9af 	bl	8001a98 <LL_ADC_IsEnabled>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff f993 	bl	8001a70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800274a:	f7fe fffb 	bl	8001744 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d914      	bls.n	8002782 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d00d      	beq.n	8002782 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	f043 0210 	orr.w	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	f043 0201 	orr.w	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e007      	b.n	8002792 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d1cf      	bne.n	8002730 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	8000003f 	.word	0x8000003f
 80027a0:	50040300 	.word	0x50040300
 80027a4:	20000054 	.word	0x20000054
 80027a8:	053e2d63 	.word	0x053e2d63

080027ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d14b      	bne.n	800285e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d021      	beq.n	8002824 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff f866 	bl	80018b6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d032      	beq.n	8002856 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d12b      	bne.n	8002856 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d11f      	bne.n	8002856 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281a:	f043 0201 	orr.w	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	655a      	str	r2, [r3, #84]	; 0x54
 8002822:	e018      	b.n	8002856 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d111      	bne.n	8002856 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d105      	bne.n	8002856 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	f043 0201 	orr.w	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f7fe f9fe 	bl	8000c58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800285c:	e00e      	b.n	800287c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f7ff fb2e 	bl	8001ecc <HAL_ADC_ErrorCallback>
}
 8002870:	e004      	b.n	800287c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7fe f9be 	bl	8000c14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002898:	bf00      	nop
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	f043 0204 	orr.w	r2, r3, #4
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff fb00 	bl	8001ecc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002906:	4a04      	ldr	r2, [pc, #16]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	60d3      	str	r3, [r2, #12]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <__NVIC_GetPriorityGrouping+0x18>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	f003 0307 	and.w	r3, r3, #7
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	2b00      	cmp	r3, #0
 8002948:	db0b      	blt.n	8002962 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	4907      	ldr	r1, [pc, #28]	; (8002970 <__NVIC_EnableIRQ+0x38>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2001      	movs	r0, #1
 800295a:	fa00 f202 	lsl.w	r2, r0, r2
 800295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000e100 	.word	0xe000e100

08002974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0a      	blt.n	800299e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	490c      	ldr	r1, [pc, #48]	; (80029c0 <__NVIC_SetPriority+0x4c>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	440b      	add	r3, r1
 8002998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800299c:	e00a      	b.n	80029b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4908      	ldr	r1, [pc, #32]	; (80029c4 <__NVIC_SetPriority+0x50>)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	3b04      	subs	r3, #4
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	440b      	add	r3, r1
 80029b2:	761a      	strb	r2, [r3, #24]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000e100 	.word	0xe000e100
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	; 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f1c3 0307 	rsb	r3, r3, #7
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	bf28      	it	cs
 80029e6:	2304      	movcs	r3, #4
 80029e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d902      	bls.n	80029f8 <NVIC_EncodePriority+0x30>
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3b03      	subs	r3, #3
 80029f6:	e000      	b.n	80029fa <NVIC_EncodePriority+0x32>
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	4313      	orrs	r3, r2
         );
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	; 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a40:	d301      	bcc.n	8002a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a42:	2301      	movs	r3, #1
 8002a44:	e00f      	b.n	8002a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <SysTick_Config+0x40>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4e:	210f      	movs	r1, #15
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a54:	f7ff ff8e 	bl	8002974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <SysTick_Config+0x40>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5e:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <SysTick_Config+0x40>)
 8002a60:	2207      	movs	r2, #7
 8002a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	e000e010 	.word	0xe000e010

08002a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff29 	bl	80028d4 <__NVIC_SetPriorityGrouping>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9c:	f7ff ff3e 	bl	800291c <__NVIC_GetPriorityGrouping>
 8002aa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f7ff ff8e 	bl	80029c8 <NVIC_EncodePriority>
 8002aac:	4602      	mov	r2, r0
 8002aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff5d 	bl	8002974 <__NVIC_SetPriority>
}
 8002aba:	bf00      	nop
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff31 	bl	8002938 <__NVIC_EnableIRQ>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff ffa2 	bl	8002a30 <SysTick_Config>
 8002aec:	4603      	mov	r3, r0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e014      	b.n	8002b32 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	791b      	ldrb	r3, [r3, #4]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d105      	bne.n	8002b1e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7fe fbb5 	bl	8001288 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	795b      	ldrb	r3, [r3, #5]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_DAC_Start_DMA+0x1e>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e0ab      	b.n	8002cb2 <HAL_DAC_Start_DMA+0x176>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2202      	movs	r2, #2
 8002b64:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d12f      	bne.n	8002bcc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_DAC_Start_DMA+0x180>)
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a51      	ldr	r2, [pc, #324]	; (8002cc0 <HAL_DAC_Start_DMA+0x184>)
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4a50      	ldr	r2, [pc, #320]	; (8002cc4 <HAL_DAC_Start_DMA+0x188>)
 8002b82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b92:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d013      	beq.n	8002bc2 <HAL_DAC_Start_DMA+0x86>
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d845      	bhi.n	8002c2c <HAL_DAC_Start_DMA+0xf0>
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_DAC_Start_DMA+0x72>
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d005      	beq.n	8002bb8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002bac:	e03e      	b.n	8002c2c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	613b      	str	r3, [r7, #16]
        break;
 8002bb6:	e03c      	b.n	8002c32 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	613b      	str	r3, [r7, #16]
        break;
 8002bc0:	e037      	b.n	8002c32 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3310      	adds	r3, #16
 8002bc8:	613b      	str	r3, [r7, #16]
        break;
 8002bca:	e032      	b.n	8002c32 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4a3d      	ldr	r2, [pc, #244]	; (8002cc8 <HAL_DAC_Start_DMA+0x18c>)
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a3c      	ldr	r2, [pc, #240]	; (8002ccc <HAL_DAC_Start_DMA+0x190>)
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a3b      	ldr	r2, [pc, #236]	; (8002cd0 <HAL_DAC_Start_DMA+0x194>)
 8002be2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bf2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d013      	beq.n	8002c22 <HAL_DAC_Start_DMA+0xe6>
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d817      	bhi.n	8002c30 <HAL_DAC_Start_DMA+0xf4>
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_DAC_Start_DMA+0xd2>
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d005      	beq.n	8002c18 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002c0c:	e010      	b.n	8002c30 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3314      	adds	r3, #20
 8002c14:	613b      	str	r3, [r7, #16]
        break;
 8002c16:	e00c      	b.n	8002c32 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3318      	adds	r3, #24
 8002c1e:	613b      	str	r3, [r7, #16]
        break;
 8002c20:	e007      	b.n	8002c32 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	331c      	adds	r3, #28
 8002c28:	613b      	str	r3, [r7, #16]
        break;
 8002c2a:	e002      	b.n	8002c32 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002c2c:	bf00      	nop
 8002c2e:	e000      	b.n	8002c32 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002c30:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d111      	bne.n	8002c5c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c46:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6898      	ldr	r0, [r3, #8]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	f000 fab9 	bl	80031c8 <HAL_DMA_Start_IT>
 8002c56:	4603      	mov	r3, r0
 8002c58:	75fb      	strb	r3, [r7, #23]
 8002c5a:	e010      	b.n	8002c7e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	68d8      	ldr	r0, [r3, #12]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	f000 faa7 	bl	80031c8 <HAL_DMA_Start_IT>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10c      	bne.n	8002ca4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6819      	ldr	r1, [r3, #0]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2201      	movs	r2, #1
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e005      	b.n	8002cb0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f043 0204 	orr.w	r2, r3, #4
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	08002f45 	.word	0x08002f45
 8002cc0:	08002f67 	.word	0x08002f67
 8002cc4:	08002f83 	.word	0x08002f83
 8002cc8:	08002fed 	.word	0x08002fed
 8002ccc:	0800300f 	.word	0x0800300f
 8002cd0:	0800302b 	.word	0x0800302b

08002cd4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	795b      	ldrb	r3, [r3, #5]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_DAC_ConfigChannel+0x1c>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e107      	b.n	8002f3c <HAL_DAC_ConfigChannel+0x22c>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2202      	movs	r2, #2
 8002d36:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d174      	bne.n	8002e2a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002d40:	f7fe fd00 	bl	8001744 <HAL_GetTick>
 8002d44:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d134      	bne.n	8002db6 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d4c:	e011      	b.n	8002d72 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d4e:	f7fe fcf9 	bl	8001744 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d90a      	bls.n	8002d72 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f043 0208 	orr.w	r2, r3, #8
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e0e4      	b.n	8002f3c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e6      	bne.n	8002d4e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002d80:	2001      	movs	r0, #1
 8002d82:	f7fe fceb 	bl	800175c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	6992      	ldr	r2, [r2, #24]
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d90:	e01e      	b.n	8002dd0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d92:	f7fe fcd7 	bl	8001744 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d90a      	bls.n	8002db6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f043 0208 	orr.w	r2, r3, #8
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2203      	movs	r2, #3
 8002db0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e0c2      	b.n	8002f3c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	dbe8      	blt.n	8002d92 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	f7fe fccb 	bl	800175c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	6992      	ldr	r2, [r2, #24]
 8002dce:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	ea02 0103 	and.w	r1, r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	409a      	lsls	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	21ff      	movs	r1, #255	; 0xff
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	ea02 0103 	and.w	r1, r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	6a1a      	ldr	r2, [r3, #32]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	409a      	lsls	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d11d      	bne.n	8002e6e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	221f      	movs	r2, #31
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2207      	movs	r2, #7
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6819      	ldr	r1, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	400a      	ands	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6819      	ldr	r1, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	22c0      	movs	r2, #192	; 0xc0
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43da      	mvns	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3720      	adds	r7, #32
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff febe 	bl	8002cd4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	711a      	strb	r2, [r3, #4]
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff feb7 	bl	8002ce8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f043 0204 	orr.w	r2, r3, #4
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f7ff fead 	bl	8002cfc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	711a      	strb	r2, [r3, #4]
}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f7ff ffd8 	bl	8002fb0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	711a      	strb	r2, [r3, #4]
}
 8003006:	bf00      	nop
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7ff ffd1 	bl	8002fc4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f043 0204 	orr.w	r2, r3, #4
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff ffc7 	bl	8002fd8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	711a      	strb	r2, [r3, #4]
}
 8003050:	bf00      	nop
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e098      	b.n	800319c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	4b4d      	ldr	r3, [pc, #308]	; (80031a8 <HAL_DMA_Init+0x150>)
 8003072:	429a      	cmp	r2, r3
 8003074:	d80f      	bhi.n	8003096 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	4b4b      	ldr	r3, [pc, #300]	; (80031ac <HAL_DMA_Init+0x154>)
 800307e:	4413      	add	r3, r2
 8003080:	4a4b      	ldr	r2, [pc, #300]	; (80031b0 <HAL_DMA_Init+0x158>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	009a      	lsls	r2, r3, #2
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a48      	ldr	r2, [pc, #288]	; (80031b4 <HAL_DMA_Init+0x15c>)
 8003092:	641a      	str	r2, [r3, #64]	; 0x40
 8003094:	e00e      	b.n	80030b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	4b46      	ldr	r3, [pc, #280]	; (80031b8 <HAL_DMA_Init+0x160>)
 800309e:	4413      	add	r3, r2
 80030a0:	4a43      	ldr	r2, [pc, #268]	; (80031b0 <HAL_DMA_Init+0x158>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	009a      	lsls	r2, r3, #2
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a42      	ldr	r2, [pc, #264]	; (80031bc <HAL_DMA_Init+0x164>)
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80030ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800310e:	d039      	beq.n	8003184 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	4a27      	ldr	r2, [pc, #156]	; (80031b4 <HAL_DMA_Init+0x15c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d11a      	bne.n	8003150 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800311a:	4b29      	ldr	r3, [pc, #164]	; (80031c0 <HAL_DMA_Init+0x168>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f003 031c 	and.w	r3, r3, #28
 8003126:	210f      	movs	r1, #15
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	4924      	ldr	r1, [pc, #144]	; (80031c0 <HAL_DMA_Init+0x168>)
 8003130:	4013      	ands	r3, r2
 8003132:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003134:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <HAL_DMA_Init+0x168>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	f003 031c 	and.w	r3, r3, #28
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	491d      	ldr	r1, [pc, #116]	; (80031c0 <HAL_DMA_Init+0x168>)
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
 800314e:	e019      	b.n	8003184 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003150:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <HAL_DMA_Init+0x16c>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	f003 031c 	and.w	r3, r3, #28
 800315c:	210f      	movs	r1, #15
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	4917      	ldr	r1, [pc, #92]	; (80031c4 <HAL_DMA_Init+0x16c>)
 8003166:	4013      	ands	r3, r2
 8003168:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800316a:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <HAL_DMA_Init+0x16c>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6859      	ldr	r1, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	f003 031c 	and.w	r3, r3, #28
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	4911      	ldr	r1, [pc, #68]	; (80031c4 <HAL_DMA_Init+0x16c>)
 8003180:	4313      	orrs	r3, r2
 8003182:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40020407 	.word	0x40020407
 80031ac:	bffdfff8 	.word	0xbffdfff8
 80031b0:	cccccccd 	.word	0xcccccccd
 80031b4:	40020000 	.word	0x40020000
 80031b8:	bffdfbf8 	.word	0xbffdfbf8
 80031bc:	40020400 	.word	0x40020400
 80031c0:	400200a8 	.word	0x400200a8
 80031c4:	400204a8 	.word	0x400204a8

080031c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_DMA_Start_IT+0x20>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e04b      	b.n	8003280 <HAL_DMA_Start_IT+0xb8>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d13a      	bne.n	8003272 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f8e0 	bl	80033e6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	2b00      	cmp	r3, #0
 800322c:	d008      	beq.n	8003240 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 020e 	orr.w	r2, r2, #14
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	e00f      	b.n	8003260 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0204 	bic.w	r2, r2, #4
 800324e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 020a 	orr.w	r2, r2, #10
 800325e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	e005      	b.n	800327e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800327a:	2302      	movs	r3, #2
 800327c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800327e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	f003 031c 	and.w	r3, r3, #28
 80032a8:	2204      	movs	r2, #4
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d026      	beq.n	8003302 <HAL_DMA_IRQHandler+0x7a>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d021      	beq.n	8003302 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d107      	bne.n	80032dc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0204 	bic.w	r2, r2, #4
 80032da:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	f003 021c 	and.w	r2, r3, #28
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	2104      	movs	r1, #4
 80032ea:	fa01 f202 	lsl.w	r2, r1, r2
 80032ee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d071      	beq.n	80033dc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003300:	e06c      	b.n	80033dc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	f003 031c 	and.w	r3, r3, #28
 800330a:	2202      	movs	r2, #2
 800330c:	409a      	lsls	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d02e      	beq.n	8003374 <HAL_DMA_IRQHandler+0xec>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d029      	beq.n	8003374 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10b      	bne.n	8003346 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 020a 	bic.w	r2, r2, #10
 800333c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	f003 021c 	and.w	r2, r3, #28
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	2102      	movs	r1, #2
 8003354:	fa01 f202 	lsl.w	r2, r1, r2
 8003358:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	2b00      	cmp	r3, #0
 8003368:	d038      	beq.n	80033dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003372:	e033      	b.n	80033dc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f003 031c 	and.w	r3, r3, #28
 800337c:	2208      	movs	r2, #8
 800337e:	409a      	lsls	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02a      	beq.n	80033de <HAL_DMA_IRQHandler+0x156>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d025      	beq.n	80033de <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 020e 	bic.w	r2, r2, #14
 80033a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f003 021c 	and.w	r2, r3, #28
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	2101      	movs	r1, #1
 80033b0:	fa01 f202 	lsl.w	r2, r1, r2
 80033b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d004      	beq.n	80033de <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
}
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b085      	sub	sp, #20
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	f003 021c 	and.w	r2, r3, #28
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	2101      	movs	r1, #1
 8003402:	fa01 f202 	lsl.w	r2, r1, r2
 8003406:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b10      	cmp	r3, #16
 8003416:	d108      	bne.n	800342a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003428:	e007      	b.n	800343a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	60da      	str	r2, [r3, #12]
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003456:	e154      	b.n	8003702 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	2101      	movs	r1, #1
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	fa01 f303 	lsl.w	r3, r1, r3
 8003464:	4013      	ands	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 8146 	beq.w	80036fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d005      	beq.n	8003488 <HAL_GPIO_Init+0x40>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d130      	bne.n	80034ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	2203      	movs	r2, #3
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4013      	ands	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034be:	2201      	movs	r2, #1
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 0201 	and.w	r2, r3, #1
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d017      	beq.n	8003526 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	2203      	movs	r2, #3
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d123      	bne.n	800357a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	08da      	lsrs	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3208      	adds	r2, #8
 800353a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800353e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	220f      	movs	r2, #15
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	08da      	lsrs	r2, r3, #3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3208      	adds	r2, #8
 8003574:	6939      	ldr	r1, [r7, #16]
 8003576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	2203      	movs	r2, #3
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 0203 	and.w	r2, r3, #3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80a0 	beq.w	80036fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035bc:	4b58      	ldr	r3, [pc, #352]	; (8003720 <HAL_GPIO_Init+0x2d8>)
 80035be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c0:	4a57      	ldr	r2, [pc, #348]	; (8003720 <HAL_GPIO_Init+0x2d8>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6613      	str	r3, [r2, #96]	; 0x60
 80035c8:	4b55      	ldr	r3, [pc, #340]	; (8003720 <HAL_GPIO_Init+0x2d8>)
 80035ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035d4:	4a53      	ldr	r2, [pc, #332]	; (8003724 <HAL_GPIO_Init+0x2dc>)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	3302      	adds	r3, #2
 80035dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	220f      	movs	r2, #15
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035fe:	d019      	beq.n	8003634 <HAL_GPIO_Init+0x1ec>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a49      	ldr	r2, [pc, #292]	; (8003728 <HAL_GPIO_Init+0x2e0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d013      	beq.n	8003630 <HAL_GPIO_Init+0x1e8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a48      	ldr	r2, [pc, #288]	; (800372c <HAL_GPIO_Init+0x2e4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00d      	beq.n	800362c <HAL_GPIO_Init+0x1e4>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a47      	ldr	r2, [pc, #284]	; (8003730 <HAL_GPIO_Init+0x2e8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d007      	beq.n	8003628 <HAL_GPIO_Init+0x1e0>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a46      	ldr	r2, [pc, #280]	; (8003734 <HAL_GPIO_Init+0x2ec>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d101      	bne.n	8003624 <HAL_GPIO_Init+0x1dc>
 8003620:	2304      	movs	r3, #4
 8003622:	e008      	b.n	8003636 <HAL_GPIO_Init+0x1ee>
 8003624:	2307      	movs	r3, #7
 8003626:	e006      	b.n	8003636 <HAL_GPIO_Init+0x1ee>
 8003628:	2303      	movs	r3, #3
 800362a:	e004      	b.n	8003636 <HAL_GPIO_Init+0x1ee>
 800362c:	2302      	movs	r3, #2
 800362e:	e002      	b.n	8003636 <HAL_GPIO_Init+0x1ee>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <HAL_GPIO_Init+0x1ee>
 8003634:	2300      	movs	r3, #0
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	f002 0203 	and.w	r2, r2, #3
 800363c:	0092      	lsls	r2, r2, #2
 800363e:	4093      	lsls	r3, r2
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003646:	4937      	ldr	r1, [pc, #220]	; (8003724 <HAL_GPIO_Init+0x2dc>)
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	089b      	lsrs	r3, r3, #2
 800364c:	3302      	adds	r3, #2
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003654:	4b38      	ldr	r3, [pc, #224]	; (8003738 <HAL_GPIO_Init+0x2f0>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	43db      	mvns	r3, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4013      	ands	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003678:	4a2f      	ldr	r2, [pc, #188]	; (8003738 <HAL_GPIO_Init+0x2f0>)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800367e:	4b2e      	ldr	r3, [pc, #184]	; (8003738 <HAL_GPIO_Init+0x2f0>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	43db      	mvns	r3, r3
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4013      	ands	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036a2:	4a25      	ldr	r2, [pc, #148]	; (8003738 <HAL_GPIO_Init+0x2f0>)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036a8:	4b23      	ldr	r3, [pc, #140]	; (8003738 <HAL_GPIO_Init+0x2f0>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4013      	ands	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036cc:	4a1a      	ldr	r2, [pc, #104]	; (8003738 <HAL_GPIO_Init+0x2f0>)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036d2:	4b19      	ldr	r3, [pc, #100]	; (8003738 <HAL_GPIO_Init+0x2f0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036f6:	4a10      	ldr	r2, [pc, #64]	; (8003738 <HAL_GPIO_Init+0x2f0>)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	3301      	adds	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	f47f aea3 	bne.w	8003458 <HAL_GPIO_Init+0x10>
  }
}
 8003712:	bf00      	nop
 8003714:	bf00      	nop
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	40021000 	.word	0x40021000
 8003724:	40010000 	.word	0x40010000
 8003728:	48000400 	.word	0x48000400
 800372c:	48000800 	.word	0x48000800
 8003730:	48000c00 	.word	0x48000c00
 8003734:	48001000 	.word	0x48001000
 8003738:	40010400 	.word	0x40010400

0800373c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	807b      	strh	r3, [r7, #2]
 8003748:	4613      	mov	r3, r2
 800374a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800374c:	787b      	ldrb	r3, [r7, #1]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003752:	887a      	ldrh	r2, [r7, #2]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003758:	e002      	b.n	8003760 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4013      	ands	r3, r2
 8003784:	041a      	lsls	r2, r3, #16
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	43d9      	mvns	r1, r3
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	400b      	ands	r3, r1
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	619a      	str	r2, [r3, #24]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40007000 	.word	0x40007000

080037bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ca:	d130      	bne.n	800382e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037cc:	4b23      	ldr	r3, [pc, #140]	; (800385c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d8:	d038      	beq.n	800384c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037e2:	4a1e      	ldr	r2, [pc, #120]	; (800385c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037ea:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2232      	movs	r2, #50	; 0x32
 80037f0:	fb02 f303 	mul.w	r3, r2, r3
 80037f4:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	0c9b      	lsrs	r3, r3, #18
 80037fc:	3301      	adds	r3, #1
 80037fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003800:	e002      	b.n	8003808 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	3b01      	subs	r3, #1
 8003806:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003808:	4b14      	ldr	r3, [pc, #80]	; (800385c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003814:	d102      	bne.n	800381c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1f2      	bne.n	8003802 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003828:	d110      	bne.n	800384c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e00f      	b.n	800384e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800382e:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383a:	d007      	beq.n	800384c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800383c:	4b07      	ldr	r3, [pc, #28]	; (800385c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003844:	4a05      	ldr	r2, [pc, #20]	; (800385c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800384a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40007000 	.word	0x40007000
 8003860:	20000054 	.word	0x20000054
 8003864:	431bde83 	.word	0x431bde83

08003868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e3fe      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800387a:	4ba1      	ldr	r3, [pc, #644]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003884:	4b9e      	ldr	r3, [pc, #632]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80e4 	beq.w	8003a64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <HAL_RCC_OscConfig+0x4a>
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b0c      	cmp	r3, #12
 80038a6:	f040 808b 	bne.w	80039c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	f040 8087 	bne.w	80039c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038b2:	4b93      	ldr	r3, [pc, #588]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_RCC_OscConfig+0x62>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e3d6      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1a      	ldr	r2, [r3, #32]
 80038ce:	4b8c      	ldr	r3, [pc, #560]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d004      	beq.n	80038e4 <HAL_RCC_OscConfig+0x7c>
 80038da:	4b89      	ldr	r3, [pc, #548]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e2:	e005      	b.n	80038f0 <HAL_RCC_OscConfig+0x88>
 80038e4:	4b86      	ldr	r3, [pc, #536]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 80038e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ea:	091b      	lsrs	r3, r3, #4
 80038ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d223      	bcs.n	800393c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fd53 	bl	80043a4 <RCC_SetFlashLatencyFromMSIRange>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e3b7      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003908:	4b7d      	ldr	r3, [pc, #500]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a7c      	ldr	r2, [pc, #496]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 800390e:	f043 0308 	orr.w	r3, r3, #8
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	4b7a      	ldr	r3, [pc, #488]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	4977      	ldr	r1, [pc, #476]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003926:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	4972      	ldr	r1, [pc, #456]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
 800393a:	e025      	b.n	8003988 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800393c:	4b70      	ldr	r3, [pc, #448]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a6f      	ldr	r2, [pc, #444]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003942:	f043 0308 	orr.w	r3, r3, #8
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b6d      	ldr	r3, [pc, #436]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	496a      	ldr	r1, [pc, #424]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800395a:	4b69      	ldr	r3, [pc, #420]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	4965      	ldr	r1, [pc, #404]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 800396a:	4313      	orrs	r3, r2
 800396c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d109      	bne.n	8003988 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fd13 	bl	80043a4 <RCC_SetFlashLatencyFromMSIRange>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e377      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003988:	f000 fc80 	bl	800428c <HAL_RCC_GetSysClockFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	4b5c      	ldr	r3, [pc, #368]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	f003 030f 	and.w	r3, r3, #15
 8003998:	495a      	ldr	r1, [pc, #360]	; (8003b04 <HAL_RCC_OscConfig+0x29c>)
 800399a:	5ccb      	ldrb	r3, [r1, r3]
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
 80039a4:	4a58      	ldr	r2, [pc, #352]	; (8003b08 <HAL_RCC_OscConfig+0x2a0>)
 80039a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039a8:	4b58      	ldr	r3, [pc, #352]	; (8003b0c <HAL_RCC_OscConfig+0x2a4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fd fe79 	bl	80016a4 <HAL_InitTick>
 80039b2:	4603      	mov	r3, r0
 80039b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d052      	beq.n	8003a62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	e35b      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d032      	beq.n	8003a2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039c8:	4b4d      	ldr	r3, [pc, #308]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a4c      	ldr	r2, [pc, #304]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039d4:	f7fd feb6 	bl	8001744 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039dc:	f7fd feb2 	bl	8001744 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e344      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ee:	4b44      	ldr	r3, [pc, #272]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039fa:	4b41      	ldr	r3, [pc, #260]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a40      	ldr	r2, [pc, #256]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003a00:	f043 0308 	orr.w	r3, r3, #8
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	4b3e      	ldr	r3, [pc, #248]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	493b      	ldr	r1, [pc, #236]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a18:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	4936      	ldr	r1, [pc, #216]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
 8003a2c:	e01a      	b.n	8003a64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a2e:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a33      	ldr	r2, [pc, #204]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a3a:	f7fd fe83 	bl	8001744 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a42:	f7fd fe7f 	bl	8001744 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e311      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a54:	4b2a      	ldr	r3, [pc, #168]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f0      	bne.n	8003a42 <HAL_RCC_OscConfig+0x1da>
 8003a60:	e000      	b.n	8003a64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d074      	beq.n	8003b5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d005      	beq.n	8003a82 <HAL_RCC_OscConfig+0x21a>
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b0c      	cmp	r3, #12
 8003a7a:	d10e      	bne.n	8003a9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d10b      	bne.n	8003a9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a82:	4b1f      	ldr	r3, [pc, #124]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d064      	beq.n	8003b58 <HAL_RCC_OscConfig+0x2f0>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d160      	bne.n	8003b58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e2ee      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa2:	d106      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x24a>
 8003aa4:	4b16      	ldr	r3, [pc, #88]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	e01d      	b.n	8003aee <HAL_RCC_OscConfig+0x286>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aba:	d10c      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x26e>
 8003abc:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0f      	ldr	r2, [pc, #60]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003ac2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a0c      	ldr	r2, [pc, #48]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	e00b      	b.n	8003aee <HAL_RCC_OscConfig+0x286>
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a06      	ldr	r2, [pc, #24]	; (8003b00 <HAL_RCC_OscConfig+0x298>)
 8003ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d01c      	beq.n	8003b30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fd fe25 	bl	8001744 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003afc:	e011      	b.n	8003b22 <HAL_RCC_OscConfig+0x2ba>
 8003afe:	bf00      	nop
 8003b00:	40021000 	.word	0x40021000
 8003b04:	08007f98 	.word	0x08007f98
 8003b08:	20000054 	.word	0x20000054
 8003b0c:	20000058 	.word	0x20000058
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b10:	f7fd fe18 	bl	8001744 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	; 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e2aa      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b22:	4baf      	ldr	r3, [pc, #700]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x2a8>
 8003b2e:	e014      	b.n	8003b5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fd fe08 	bl	8001744 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b38:	f7fd fe04 	bl	8001744 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	; 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e296      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b4a:	4ba5      	ldr	r3, [pc, #660]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x2d0>
 8003b56:	e000      	b.n	8003b5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d060      	beq.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_OscConfig+0x310>
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	d119      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d116      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b78:	4b99      	ldr	r3, [pc, #612]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_RCC_OscConfig+0x328>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e273      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b90:	4b93      	ldr	r3, [pc, #588]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	061b      	lsls	r3, r3, #24
 8003b9e:	4990      	ldr	r1, [pc, #576]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba4:	e040      	b.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d023      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bae:	4b8c      	ldr	r3, [pc, #560]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a8b      	ldr	r2, [pc, #556]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fd fdc3 	bl	8001744 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc2:	f7fd fdbf 	bl	8001744 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e251      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd4:	4b82      	ldr	r3, [pc, #520]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be0:	4b7f      	ldr	r3, [pc, #508]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	061b      	lsls	r3, r3, #24
 8003bee:	497c      	ldr	r1, [pc, #496]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]
 8003bf4:	e018      	b.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf6:	4b7a      	ldr	r3, [pc, #488]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a79      	ldr	r2, [pc, #484]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c02:	f7fd fd9f 	bl	8001744 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c0a:	f7fd fd9b 	bl	8001744 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e22d      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c1c:	4b70      	ldr	r3, [pc, #448]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1f0      	bne.n	8003c0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d03c      	beq.n	8003cae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01c      	beq.n	8003c76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c3c:	4b68      	ldr	r3, [pc, #416]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c42:	4a67      	ldr	r2, [pc, #412]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4c:	f7fd fd7a 	bl	8001744 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c54:	f7fd fd76 	bl	8001744 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e208      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c66:	4b5e      	ldr	r3, [pc, #376]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0ef      	beq.n	8003c54 <HAL_RCC_OscConfig+0x3ec>
 8003c74:	e01b      	b.n	8003cae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c76:	4b5a      	ldr	r3, [pc, #360]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7c:	4a58      	ldr	r2, [pc, #352]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c86:	f7fd fd5d 	bl	8001744 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8e:	f7fd fd59 	bl	8001744 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e1eb      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ca0:	4b4f      	ldr	r3, [pc, #316]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1ef      	bne.n	8003c8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 80a6 	beq.w	8003e08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cc0:	4b47      	ldr	r3, [pc, #284]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10d      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ccc:	4b44      	ldr	r3, [pc, #272]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	4a43      	ldr	r2, [pc, #268]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cd8:	4b41      	ldr	r3, [pc, #260]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce8:	4b3e      	ldr	r3, [pc, #248]	; (8003de4 <HAL_RCC_OscConfig+0x57c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d118      	bne.n	8003d26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf4:	4b3b      	ldr	r3, [pc, #236]	; (8003de4 <HAL_RCC_OscConfig+0x57c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a3a      	ldr	r2, [pc, #232]	; (8003de4 <HAL_RCC_OscConfig+0x57c>)
 8003cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d00:	f7fd fd20 	bl	8001744 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d08:	f7fd fd1c 	bl	8001744 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e1ae      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d1a:	4b32      	ldr	r3, [pc, #200]	; (8003de4 <HAL_RCC_OscConfig+0x57c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d108      	bne.n	8003d40 <HAL_RCC_OscConfig+0x4d8>
 8003d2e:	4b2c      	ldr	r3, [pc, #176]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d34:	4a2a      	ldr	r2, [pc, #168]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d3e:	e024      	b.n	8003d8a <HAL_RCC_OscConfig+0x522>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b05      	cmp	r3, #5
 8003d46:	d110      	bne.n	8003d6a <HAL_RCC_OscConfig+0x502>
 8003d48:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	4a24      	ldr	r2, [pc, #144]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003d50:	f043 0304 	orr.w	r3, r3, #4
 8003d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d58:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5e:	4a20      	ldr	r2, [pc, #128]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d68:	e00f      	b.n	8003d8a <HAL_RCC_OscConfig+0x522>
 8003d6a:	4b1d      	ldr	r3, [pc, #116]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	4a1b      	ldr	r2, [pc, #108]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d7a:	4b19      	ldr	r3, [pc, #100]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d80:	4a17      	ldr	r2, [pc, #92]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003d82:	f023 0304 	bic.w	r3, r3, #4
 8003d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d016      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d92:	f7fd fcd7 	bl	8001744 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d98:	e00a      	b.n	8003db0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9a:	f7fd fcd3 	bl	8001744 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e163      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <HAL_RCC_OscConfig+0x578>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0ed      	beq.n	8003d9a <HAL_RCC_OscConfig+0x532>
 8003dbe:	e01a      	b.n	8003df6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7fd fcc0 	bl	8001744 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dc6:	e00f      	b.n	8003de8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc8:	f7fd fcbc 	bl	8001744 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d906      	bls.n	8003de8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e14c      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
 8003dde:	bf00      	nop
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003de8:	4ba5      	ldr	r3, [pc, #660]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1e8      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003df6:	7ffb      	ldrb	r3, [r7, #31]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d105      	bne.n	8003e08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfc:	4ba0      	ldr	r3, [pc, #640]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e00:	4a9f      	ldr	r2, [pc, #636]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d03c      	beq.n	8003e8e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01c      	beq.n	8003e56 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e1c:	4b98      	ldr	r3, [pc, #608]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e22:	4a97      	ldr	r2, [pc, #604]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2c:	f7fd fc8a 	bl	8001744 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e34:	f7fd fc86 	bl	8001744 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e118      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e46:	4b8e      	ldr	r3, [pc, #568]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003e48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ef      	beq.n	8003e34 <HAL_RCC_OscConfig+0x5cc>
 8003e54:	e01b      	b.n	8003e8e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e56:	4b8a      	ldr	r3, [pc, #552]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e5c:	4a88      	ldr	r2, [pc, #544]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003e5e:	f023 0301 	bic.w	r3, r3, #1
 8003e62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e66:	f7fd fc6d 	bl	8001744 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e6e:	f7fd fc69 	bl	8001744 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e0fb      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e80:	4b7f      	ldr	r3, [pc, #508]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1ef      	bne.n	8003e6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80ef 	beq.w	8004076 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	f040 80c5 	bne.w	800402c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ea2:	4b77      	ldr	r3, [pc, #476]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f003 0203 	and.w	r2, r3, #3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d12c      	bne.n	8003f10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d123      	bne.n	8003f10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d11b      	bne.n	8003f10 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d113      	bne.n	8003f10 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	085b      	lsrs	r3, r3, #1
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d109      	bne.n	8003f10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d067      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2b0c      	cmp	r3, #12
 8003f14:	d062      	beq.n	8003fdc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f16:	4b5a      	ldr	r3, [pc, #360]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e0a8      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f26:	4b56      	ldr	r3, [pc, #344]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a55      	ldr	r2, [pc, #340]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f32:	f7fd fc07 	bl	8001744 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3a:	f7fd fc03 	bl	8001744 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e095      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4c:	4b4c      	ldr	r3, [pc, #304]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f0      	bne.n	8003f3a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f58:	4b49      	ldr	r3, [pc, #292]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	4b49      	ldr	r3, [pc, #292]	; (8004084 <HAL_RCC_OscConfig+0x81c>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f68:	3a01      	subs	r2, #1
 8003f6a:	0112      	lsls	r2, r2, #4
 8003f6c:	4311      	orrs	r1, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f72:	0212      	lsls	r2, r2, #8
 8003f74:	4311      	orrs	r1, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f7a:	0852      	lsrs	r2, r2, #1
 8003f7c:	3a01      	subs	r2, #1
 8003f7e:	0552      	lsls	r2, r2, #21
 8003f80:	4311      	orrs	r1, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f86:	0852      	lsrs	r2, r2, #1
 8003f88:	3a01      	subs	r2, #1
 8003f8a:	0652      	lsls	r2, r2, #25
 8003f8c:	4311      	orrs	r1, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f92:	06d2      	lsls	r2, r2, #27
 8003f94:	430a      	orrs	r2, r1
 8003f96:	493a      	ldr	r1, [pc, #232]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b38      	ldr	r3, [pc, #224]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a37      	ldr	r2, [pc, #220]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fa8:	4b35      	ldr	r3, [pc, #212]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a34      	ldr	r2, [pc, #208]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fb4:	f7fd fbc6 	bl	8001744 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fd fbc2 	bl	8001744 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e054      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fce:	4b2c      	ldr	r3, [pc, #176]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fda:	e04c      	b.n	8004076 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e04b      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe0:	4b27      	ldr	r3, [pc, #156]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d144      	bne.n	8004076 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fec:	4b24      	ldr	r3, [pc, #144]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a23      	ldr	r2, [pc, #140]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ff8:	4b21      	ldr	r3, [pc, #132]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4a20      	ldr	r2, [pc, #128]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8003ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004002:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004004:	f7fd fb9e 	bl	8001744 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400c:	f7fd fb9a 	bl	8001744 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e02c      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401e:	4b18      	ldr	r3, [pc, #96]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0x7a4>
 800402a:	e024      	b.n	8004076 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b0c      	cmp	r3, #12
 8004030:	d01f      	beq.n	8004072 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004032:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a12      	ldr	r2, [pc, #72]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8004038:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800403c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fd fb81 	bl	8001744 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004046:	f7fd fb7d 	bl	8001744 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e00f      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f0      	bne.n	8004046 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	4905      	ldr	r1, [pc, #20]	; (8004080 <HAL_RCC_OscConfig+0x818>)
 800406a:	4b07      	ldr	r3, [pc, #28]	; (8004088 <HAL_RCC_OscConfig+0x820>)
 800406c:	4013      	ands	r3, r2
 800406e:	60cb      	str	r3, [r1, #12]
 8004070:	e001      	b.n	8004076 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3720      	adds	r7, #32
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40021000 	.word	0x40021000
 8004084:	019d808c 	.word	0x019d808c
 8004088:	feeefffc 	.word	0xfeeefffc

0800408c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0e7      	b.n	8004270 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a0:	4b75      	ldr	r3, [pc, #468]	; (8004278 <HAL_RCC_ClockConfig+0x1ec>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d910      	bls.n	80040d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ae:	4b72      	ldr	r3, [pc, #456]	; (8004278 <HAL_RCC_ClockConfig+0x1ec>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 0207 	bic.w	r2, r3, #7
 80040b6:	4970      	ldr	r1, [pc, #448]	; (8004278 <HAL_RCC_ClockConfig+0x1ec>)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040be:	4b6e      	ldr	r3, [pc, #440]	; (8004278 <HAL_RCC_ClockConfig+0x1ec>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0cf      	b.n	8004270 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d010      	beq.n	80040fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	4b66      	ldr	r3, [pc, #408]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d908      	bls.n	80040fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ec:	4b63      	ldr	r3, [pc, #396]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4960      	ldr	r1, [pc, #384]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d04c      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b03      	cmp	r3, #3
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004112:	4b5a      	ldr	r3, [pc, #360]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d121      	bne.n	8004162 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e0a6      	b.n	8004270 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d107      	bne.n	800413a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800412a:	4b54      	ldr	r3, [pc, #336]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d115      	bne.n	8004162 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e09a      	b.n	8004270 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004142:	4b4e      	ldr	r3, [pc, #312]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e08e      	b.n	8004270 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004152:	4b4a      	ldr	r3, [pc, #296]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e086      	b.n	8004270 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004162:	4b46      	ldr	r3, [pc, #280]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f023 0203 	bic.w	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4943      	ldr	r1, [pc, #268]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004174:	f7fd fae6 	bl	8001744 <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	e00a      	b.n	8004192 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417c:	f7fd fae2 	bl	8001744 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	; 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e06e      	b.n	8004270 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	4b3a      	ldr	r3, [pc, #232]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 020c 	and.w	r2, r3, #12
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d1eb      	bne.n	800417c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d010      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	4b31      	ldr	r3, [pc, #196]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041bc:	429a      	cmp	r2, r3
 80041be:	d208      	bcs.n	80041d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c0:	4b2e      	ldr	r3, [pc, #184]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	492b      	ldr	r1, [pc, #172]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d2:	4b29      	ldr	r3, [pc, #164]	; (8004278 <HAL_RCC_ClockConfig+0x1ec>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d210      	bcs.n	8004202 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e0:	4b25      	ldr	r3, [pc, #148]	; (8004278 <HAL_RCC_ClockConfig+0x1ec>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f023 0207 	bic.w	r2, r3, #7
 80041e8:	4923      	ldr	r1, [pc, #140]	; (8004278 <HAL_RCC_ClockConfig+0x1ec>)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f0:	4b21      	ldr	r3, [pc, #132]	; (8004278 <HAL_RCC_ClockConfig+0x1ec>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d001      	beq.n	8004202 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e036      	b.n	8004270 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800420e:	4b1b      	ldr	r3, [pc, #108]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	4918      	ldr	r1, [pc, #96]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d009      	beq.n	8004240 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800422c:	4b13      	ldr	r3, [pc, #76]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4910      	ldr	r1, [pc, #64]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004240:	f000 f824 	bl	800428c <HAL_RCC_GetSysClockFreq>
 8004244:	4602      	mov	r2, r0
 8004246:	4b0d      	ldr	r3, [pc, #52]	; (800427c <HAL_RCC_ClockConfig+0x1f0>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	490b      	ldr	r1, [pc, #44]	; (8004280 <HAL_RCC_ClockConfig+0x1f4>)
 8004252:	5ccb      	ldrb	r3, [r1, r3]
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
 800425c:	4a09      	ldr	r2, [pc, #36]	; (8004284 <HAL_RCC_ClockConfig+0x1f8>)
 800425e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004260:	4b09      	ldr	r3, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1fc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f7fd fa1d 	bl	80016a4 <HAL_InitTick>
 800426a:	4603      	mov	r3, r0
 800426c:	72fb      	strb	r3, [r7, #11]

  return status;
 800426e:	7afb      	ldrb	r3, [r7, #11]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40022000 	.word	0x40022000
 800427c:	40021000 	.word	0x40021000
 8004280:	08007f98 	.word	0x08007f98
 8004284:	20000054 	.word	0x20000054
 8004288:	20000058 	.word	0x20000058

0800428c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800428c:	b480      	push	{r7}
 800428e:	b089      	sub	sp, #36	; 0x24
 8004290:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	2300      	movs	r3, #0
 8004298:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800429a:	4b3e      	ldr	r3, [pc, #248]	; (8004394 <HAL_RCC_GetSysClockFreq+0x108>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042a4:	4b3b      	ldr	r3, [pc, #236]	; (8004394 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0x34>
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	2b0c      	cmp	r3, #12
 80042b8:	d121      	bne.n	80042fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d11e      	bne.n	80042fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042c0:	4b34      	ldr	r3, [pc, #208]	; (8004394 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d107      	bne.n	80042dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042cc:	4b31      	ldr	r3, [pc, #196]	; (8004394 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	61fb      	str	r3, [r7, #28]
 80042da:	e005      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042dc:	4b2d      	ldr	r3, [pc, #180]	; (8004394 <HAL_RCC_GetSysClockFreq+0x108>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042e8:	4a2b      	ldr	r2, [pc, #172]	; (8004398 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10d      	bne.n	8004314 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042fc:	e00a      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	2b04      	cmp	r3, #4
 8004302:	d102      	bne.n	800430a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004304:	4b25      	ldr	r3, [pc, #148]	; (800439c <HAL_RCC_GetSysClockFreq+0x110>)
 8004306:	61bb      	str	r3, [r7, #24]
 8004308:	e004      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b08      	cmp	r3, #8
 800430e:	d101      	bne.n	8004314 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004310:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004312:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b0c      	cmp	r3, #12
 8004318:	d134      	bne.n	8004384 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800431a:	4b1e      	ldr	r3, [pc, #120]	; (8004394 <HAL_RCC_GetSysClockFreq+0x108>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d003      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0xa6>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b03      	cmp	r3, #3
 800432e:	d003      	beq.n	8004338 <HAL_RCC_GetSysClockFreq+0xac>
 8004330:	e005      	b.n	800433e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004332:	4b1a      	ldr	r3, [pc, #104]	; (800439c <HAL_RCC_GetSysClockFreq+0x110>)
 8004334:	617b      	str	r3, [r7, #20]
      break;
 8004336:	e005      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004338:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800433a:	617b      	str	r3, [r7, #20]
      break;
 800433c:	e002      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	617b      	str	r3, [r7, #20]
      break;
 8004342:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004344:	4b13      	ldr	r3, [pc, #76]	; (8004394 <HAL_RCC_GetSysClockFreq+0x108>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	091b      	lsrs	r3, r3, #4
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	3301      	adds	r3, #1
 8004350:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004352:	4b10      	ldr	r3, [pc, #64]	; (8004394 <HAL_RCC_GetSysClockFreq+0x108>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	0a1b      	lsrs	r3, r3, #8
 8004358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	fb02 f203 	mul.w	r2, r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	fbb2 f3f3 	udiv	r3, r2, r3
 8004368:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <HAL_RCC_GetSysClockFreq+0x108>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	0e5b      	lsrs	r3, r3, #25
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	3301      	adds	r3, #1
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004382:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004384:	69bb      	ldr	r3, [r7, #24]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3724      	adds	r7, #36	; 0x24
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40021000 	.word	0x40021000
 8004398:	08007fa8 	.word	0x08007fa8
 800439c:	00f42400 	.word	0x00f42400
 80043a0:	016e3600 	.word	0x016e3600

080043a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043ac:	2300      	movs	r3, #0
 80043ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043b0:	4b2a      	ldr	r3, [pc, #168]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043bc:	f7ff f9f0 	bl	80037a0 <HAL_PWREx_GetVoltageRange>
 80043c0:	6178      	str	r0, [r7, #20]
 80043c2:	e014      	b.n	80043ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	4b25      	ldr	r3, [pc, #148]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	4a24      	ldr	r2, [pc, #144]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ce:	6593      	str	r3, [r2, #88]	; 0x58
 80043d0:	4b22      	ldr	r3, [pc, #136]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043dc:	f7ff f9e0 	bl	80037a0 <HAL_PWREx_GetVoltageRange>
 80043e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043e2:	4b1e      	ldr	r3, [pc, #120]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	4a1d      	ldr	r2, [pc, #116]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f4:	d10b      	bne.n	800440e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b80      	cmp	r3, #128	; 0x80
 80043fa:	d919      	bls.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2ba0      	cmp	r3, #160	; 0xa0
 8004400:	d902      	bls.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004402:	2302      	movs	r3, #2
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	e013      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004408:	2301      	movs	r3, #1
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	e010      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b80      	cmp	r3, #128	; 0x80
 8004412:	d902      	bls.n	800441a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004414:	2303      	movs	r3, #3
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	e00a      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b80      	cmp	r3, #128	; 0x80
 800441e:	d102      	bne.n	8004426 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004420:	2302      	movs	r3, #2
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	e004      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b70      	cmp	r3, #112	; 0x70
 800442a:	d101      	bne.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800442c:	2301      	movs	r3, #1
 800442e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f023 0207 	bic.w	r2, r3, #7
 8004438:	4909      	ldr	r1, [pc, #36]	; (8004460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	429a      	cmp	r2, r3
 800444c:	d001      	beq.n	8004452 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000
 8004460:	40022000 	.word	0x40022000

08004464 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800446c:	2300      	movs	r3, #0
 800446e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004470:	2300      	movs	r3, #0
 8004472:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800447c:	2b00      	cmp	r3, #0
 800447e:	d031      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004488:	d01a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800448a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800448e:	d814      	bhi.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d009      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004494:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004498:	d10f      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800449a:	4b5d      	ldr	r3, [pc, #372]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	4a5c      	ldr	r2, [pc, #368]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044a6:	e00c      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	2100      	movs	r1, #0
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f9f0 	bl	8004894 <RCCEx_PLLSAI1_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044b8:	e003      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	74fb      	strb	r3, [r7, #19]
      break;
 80044be:	e000      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80044c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044c2:	7cfb      	ldrb	r3, [r7, #19]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10b      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044c8:	4b51      	ldr	r3, [pc, #324]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	494e      	ldr	r1, [pc, #312]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044de:	e001      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e0:	7cfb      	ldrb	r3, [r7, #19]
 80044e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 809e 	beq.w	800462e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044f6:	4b46      	ldr	r3, [pc, #280]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004506:	2300      	movs	r3, #0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00d      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450c:	4b40      	ldr	r3, [pc, #256]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800450e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004510:	4a3f      	ldr	r2, [pc, #252]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004516:	6593      	str	r3, [r2, #88]	; 0x58
 8004518:	4b3d      	ldr	r3, [pc, #244]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004524:	2301      	movs	r3, #1
 8004526:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004528:	4b3a      	ldr	r3, [pc, #232]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a39      	ldr	r2, [pc, #228]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800452e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004532:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004534:	f7fd f906 	bl	8001744 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800453a:	e009      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453c:	f7fd f902 	bl	8001744 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d902      	bls.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	74fb      	strb	r3, [r7, #19]
        break;
 800454e:	e005      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004550:	4b30      	ldr	r3, [pc, #192]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0ef      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800455c:	7cfb      	ldrb	r3, [r7, #19]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d15a      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004562:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01e      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	429a      	cmp	r2, r3
 800457c:	d019      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800457e:	4b24      	ldr	r3, [pc, #144]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004588:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800458a:	4b21      	ldr	r3, [pc, #132]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800459a:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045aa:	4a19      	ldr	r2, [pc, #100]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d016      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fd f8c2 	bl	8001744 <HAL_GetTick>
 80045c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c2:	e00b      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c4:	f7fd f8be 	bl	8001744 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d902      	bls.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	74fb      	strb	r3, [r7, #19]
            break;
 80045da:	e006      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0ec      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10b      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fe:	4904      	ldr	r1, [pc, #16]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004606:	e009      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	74bb      	strb	r3, [r7, #18]
 800460c:	e006      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800460e:	bf00      	nop
 8004610:	40021000 	.word	0x40021000
 8004614:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004618:	7cfb      	ldrb	r3, [r7, #19]
 800461a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800461c:	7c7b      	ldrb	r3, [r7, #17]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d105      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004622:	4b9b      	ldr	r3, [pc, #620]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	4a9a      	ldr	r2, [pc, #616]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800462c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800463a:	4b95      	ldr	r3, [pc, #596]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	f023 0203 	bic.w	r2, r3, #3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4991      	ldr	r1, [pc, #580]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800465c:	4b8c      	ldr	r3, [pc, #560]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f023 020c 	bic.w	r2, r3, #12
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	4989      	ldr	r1, [pc, #548]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800467e:	4b84      	ldr	r3, [pc, #528]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	4980      	ldr	r1, [pc, #512]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046a0:	4b7b      	ldr	r3, [pc, #492]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	4978      	ldr	r1, [pc, #480]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046c2:	4b73      	ldr	r3, [pc, #460]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	496f      	ldr	r1, [pc, #444]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046e4:	4b6a      	ldr	r3, [pc, #424]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	4967      	ldr	r1, [pc, #412]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004706:	4b62      	ldr	r3, [pc, #392]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	495e      	ldr	r1, [pc, #376]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004728:	4b59      	ldr	r3, [pc, #356]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004736:	4956      	ldr	r1, [pc, #344]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800474a:	4b51      	ldr	r3, [pc, #324]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	494d      	ldr	r1, [pc, #308]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d028      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800476c:	4b48      	ldr	r3, [pc, #288]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477a:	4945      	ldr	r1, [pc, #276]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800478a:	d106      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800478c:	4b40      	ldr	r3, [pc, #256]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4a3f      	ldr	r2, [pc, #252]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004796:	60d3      	str	r3, [r2, #12]
 8004798:	e011      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047a2:	d10c      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	2101      	movs	r1, #1
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f872 	bl	8004894 <RCCEx_PLLSAI1_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047b4:	7cfb      	ldrb	r3, [r7, #19]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80047ba:	7cfb      	ldrb	r3, [r7, #19]
 80047bc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d028      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047ca:	4b31      	ldr	r3, [pc, #196]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d8:	492d      	ldr	r1, [pc, #180]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e8:	d106      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ea:	4b29      	ldr	r3, [pc, #164]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	4a28      	ldr	r2, [pc, #160]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047f4:	60d3      	str	r3, [r2, #12]
 80047f6:	e011      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004800:	d10c      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3304      	adds	r3, #4
 8004806:	2101      	movs	r1, #1
 8004808:	4618      	mov	r0, r3
 800480a:	f000 f843 	bl	8004894 <RCCEx_PLLSAI1_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004812:	7cfb      	ldrb	r3, [r7, #19]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004818:	7cfb      	ldrb	r3, [r7, #19]
 800481a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01c      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004828:	4b19      	ldr	r3, [pc, #100]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004836:	4916      	ldr	r1, [pc, #88]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004846:	d10c      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3304      	adds	r3, #4
 800484c:	2102      	movs	r1, #2
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f820 	bl	8004894 <RCCEx_PLLSAI1_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004858:	7cfb      	ldrb	r3, [r7, #19]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800485e:	7cfb      	ldrb	r3, [r7, #19]
 8004860:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800486e:	4b08      	ldr	r3, [pc, #32]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487c:	4904      	ldr	r1, [pc, #16]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004884:	7cbb      	ldrb	r3, [r7, #18]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000

08004894 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048a2:	4b74      	ldr	r3, [pc, #464]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d018      	beq.n	80048e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048ae:	4b71      	ldr	r3, [pc, #452]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f003 0203 	and.w	r2, r3, #3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d10d      	bne.n	80048da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
       ||
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048c6:	4b6b      	ldr	r3, [pc, #428]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	091b      	lsrs	r3, r3, #4
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
       ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d047      	beq.n	800496a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
 80048de:	e044      	b.n	800496a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d018      	beq.n	800491a <RCCEx_PLLSAI1_Config+0x86>
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d825      	bhi.n	8004938 <RCCEx_PLLSAI1_Config+0xa4>
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d002      	beq.n	80048f6 <RCCEx_PLLSAI1_Config+0x62>
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d009      	beq.n	8004908 <RCCEx_PLLSAI1_Config+0x74>
 80048f4:	e020      	b.n	8004938 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048f6:	4b5f      	ldr	r3, [pc, #380]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d11d      	bne.n	800493e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004906:	e01a      	b.n	800493e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004908:	4b5a      	ldr	r3, [pc, #360]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004910:	2b00      	cmp	r3, #0
 8004912:	d116      	bne.n	8004942 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004918:	e013      	b.n	8004942 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800491a:	4b56      	ldr	r3, [pc, #344]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10f      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004926:	4b53      	ldr	r3, [pc, #332]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004936:	e006      	b.n	8004946 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
      break;
 800493c:	e004      	b.n	8004948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800493e:	bf00      	nop
 8004940:	e002      	b.n	8004948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004942:	bf00      	nop
 8004944:	e000      	b.n	8004948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004946:	bf00      	nop
    }

    if(status == HAL_OK)
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10d      	bne.n	800496a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800494e:	4b49      	ldr	r3, [pc, #292]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6819      	ldr	r1, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	3b01      	subs	r3, #1
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	430b      	orrs	r3, r1
 8004964:	4943      	ldr	r1, [pc, #268]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004966:	4313      	orrs	r3, r2
 8004968:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d17c      	bne.n	8004a6a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004970:	4b40      	ldr	r3, [pc, #256]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a3f      	ldr	r2, [pc, #252]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004976:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800497a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800497c:	f7fc fee2 	bl	8001744 <HAL_GetTick>
 8004980:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004982:	e009      	b.n	8004998 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004984:	f7fc fede 	bl	8001744 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d902      	bls.n	8004998 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	73fb      	strb	r3, [r7, #15]
        break;
 8004996:	e005      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004998:	4b36      	ldr	r3, [pc, #216]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1ef      	bne.n	8004984 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d15f      	bne.n	8004a6a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d110      	bne.n	80049d2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049b0:	4b30      	ldr	r3, [pc, #192]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80049b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6892      	ldr	r2, [r2, #8]
 80049c0:	0211      	lsls	r1, r2, #8
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68d2      	ldr	r2, [r2, #12]
 80049c6:	06d2      	lsls	r2, r2, #27
 80049c8:	430a      	orrs	r2, r1
 80049ca:	492a      	ldr	r1, [pc, #168]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	610b      	str	r3, [r1, #16]
 80049d0:	e027      	b.n	8004a22 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d112      	bne.n	80049fe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049d8:	4b26      	ldr	r3, [pc, #152]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6892      	ldr	r2, [r2, #8]
 80049e8:	0211      	lsls	r1, r2, #8
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6912      	ldr	r2, [r2, #16]
 80049ee:	0852      	lsrs	r2, r2, #1
 80049f0:	3a01      	subs	r2, #1
 80049f2:	0552      	lsls	r2, r2, #21
 80049f4:	430a      	orrs	r2, r1
 80049f6:	491f      	ldr	r1, [pc, #124]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	610b      	str	r3, [r1, #16]
 80049fc:	e011      	b.n	8004a22 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049fe:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6892      	ldr	r2, [r2, #8]
 8004a0e:	0211      	lsls	r1, r2, #8
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6952      	ldr	r2, [r2, #20]
 8004a14:	0852      	lsrs	r2, r2, #1
 8004a16:	3a01      	subs	r2, #1
 8004a18:	0652      	lsls	r2, r2, #25
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	4915      	ldr	r1, [pc, #84]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a22:	4b14      	ldr	r3, [pc, #80]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a13      	ldr	r2, [pc, #76]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a2c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2e:	f7fc fe89 	bl	8001744 <HAL_GetTick>
 8004a32:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a34:	e009      	b.n	8004a4a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a36:	f7fc fe85 	bl	8001744 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d902      	bls.n	8004a4a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	73fb      	strb	r3, [r7, #15]
          break;
 8004a48:	e005      	b.n	8004a56 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0ef      	beq.n	8004a36 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d106      	bne.n	8004a6a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	4903      	ldr	r1, [pc, #12]	; (8004a74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40021000 	.word	0x40021000

08004a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e049      	b.n	8004b1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fc fc60 	bl	8001364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	f000 f960 	bl	8004d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d001      	beq.n	8004b40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e033      	b.n	8004ba8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <HAL_TIM_Base_Start+0x8c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d009      	beq.n	8004b66 <HAL_TIM_Base_Start+0x3e>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5a:	d004      	beq.n	8004b66 <HAL_TIM_Base_Start+0x3e>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a15      	ldr	r2, [pc, #84]	; (8004bb8 <HAL_TIM_Base_Start+0x90>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d115      	bne.n	8004b92 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <HAL_TIM_Base_Start+0x94>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b06      	cmp	r3, #6
 8004b76:	d015      	beq.n	8004ba4 <HAL_TIM_Base_Start+0x7c>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7e:	d011      	beq.n	8004ba4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b90:	e008      	b.n	8004ba4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0201 	orr.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	e000      	b.n	8004ba6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	40014000 	.word	0x40014000
 8004bbc:	00010007 	.word	0x00010007

08004bc0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d109      	bne.n	8004be4 <HAL_TIM_OC_Start+0x24>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	bf14      	ite	ne
 8004bdc:	2301      	movne	r3, #1
 8004bde:	2300      	moveq	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	e03c      	b.n	8004c5e <HAL_TIM_OC_Start+0x9e>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d109      	bne.n	8004bfe <HAL_TIM_OC_Start+0x3e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	bf14      	ite	ne
 8004bf6:	2301      	movne	r3, #1
 8004bf8:	2300      	moveq	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	e02f      	b.n	8004c5e <HAL_TIM_OC_Start+0x9e>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d109      	bne.n	8004c18 <HAL_TIM_OC_Start+0x58>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	e022      	b.n	8004c5e <HAL_TIM_OC_Start+0x9e>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2b0c      	cmp	r3, #12
 8004c1c:	d109      	bne.n	8004c32 <HAL_TIM_OC_Start+0x72>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	bf14      	ite	ne
 8004c2a:	2301      	movne	r3, #1
 8004c2c:	2300      	moveq	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	e015      	b.n	8004c5e <HAL_TIM_OC_Start+0x9e>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d109      	bne.n	8004c4c <HAL_TIM_OC_Start+0x8c>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	bf14      	ite	ne
 8004c44:	2301      	movne	r3, #1
 8004c46:	2300      	moveq	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	e008      	b.n	8004c5e <HAL_TIM_OC_Start+0x9e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	bf14      	ite	ne
 8004c58:	2301      	movne	r3, #1
 8004c5a:	2300      	moveq	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e07e      	b.n	8004d64 <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d104      	bne.n	8004c76 <HAL_TIM_OC_Start+0xb6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c74:	e023      	b.n	8004cbe <HAL_TIM_OC_Start+0xfe>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d104      	bne.n	8004c86 <HAL_TIM_OC_Start+0xc6>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c84:	e01b      	b.n	8004cbe <HAL_TIM_OC_Start+0xfe>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d104      	bne.n	8004c96 <HAL_TIM_OC_Start+0xd6>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c94:	e013      	b.n	8004cbe <HAL_TIM_OC_Start+0xfe>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b0c      	cmp	r3, #12
 8004c9a:	d104      	bne.n	8004ca6 <HAL_TIM_OC_Start+0xe6>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ca4:	e00b      	b.n	8004cbe <HAL_TIM_OC_Start+0xfe>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d104      	bne.n	8004cb6 <HAL_TIM_OC_Start+0xf6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb4:	e003      	b.n	8004cbe <HAL_TIM_OC_Start+0xfe>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2202      	movs	r2, #2
 8004cba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	6839      	ldr	r1, [r7, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f8bc 	bl	8004e44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a26      	ldr	r2, [pc, #152]	; (8004d6c <HAL_TIM_OC_Start+0x1ac>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d009      	beq.n	8004cea <HAL_TIM_OC_Start+0x12a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a25      	ldr	r2, [pc, #148]	; (8004d70 <HAL_TIM_OC_Start+0x1b0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d004      	beq.n	8004cea <HAL_TIM_OC_Start+0x12a>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a23      	ldr	r2, [pc, #140]	; (8004d74 <HAL_TIM_OC_Start+0x1b4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d101      	bne.n	8004cee <HAL_TIM_OC_Start+0x12e>
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <HAL_TIM_OC_Start+0x130>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <HAL_TIM_OC_Start+0x1ac>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d009      	beq.n	8004d22 <HAL_TIM_OC_Start+0x162>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d16:	d004      	beq.n	8004d22 <HAL_TIM_OC_Start+0x162>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a14      	ldr	r2, [pc, #80]	; (8004d70 <HAL_TIM_OC_Start+0x1b0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d115      	bne.n	8004d4e <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <HAL_TIM_OC_Start+0x1b8>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b06      	cmp	r3, #6
 8004d32:	d015      	beq.n	8004d60 <HAL_TIM_OC_Start+0x1a0>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3a:	d011      	beq.n	8004d60 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4c:	e008      	b.n	8004d60 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	e000      	b.n	8004d62 <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40014400 	.word	0x40014400
 8004d78:	00010007 	.word	0x00010007

08004d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a2a      	ldr	r2, [pc, #168]	; (8004e38 <TIM_Base_SetConfig+0xbc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_Base_SetConfig+0x20>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9a:	d108      	bne.n	8004dae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a21      	ldr	r2, [pc, #132]	; (8004e38 <TIM_Base_SetConfig+0xbc>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00b      	beq.n	8004dce <TIM_Base_SetConfig+0x52>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbc:	d007      	beq.n	8004dce <TIM_Base_SetConfig+0x52>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1e      	ldr	r2, [pc, #120]	; (8004e3c <TIM_Base_SetConfig+0xc0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d003      	beq.n	8004dce <TIM_Base_SetConfig+0x52>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <TIM_Base_SetConfig+0xc4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d108      	bne.n	8004de0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a0c      	ldr	r2, [pc, #48]	; (8004e38 <TIM_Base_SetConfig+0xbc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d007      	beq.n	8004e1c <TIM_Base_SetConfig+0xa0>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a0b      	ldr	r2, [pc, #44]	; (8004e3c <TIM_Base_SetConfig+0xc0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_Base_SetConfig+0xa0>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a0a      	ldr	r2, [pc, #40]	; (8004e40 <TIM_Base_SetConfig+0xc4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d103      	bne.n	8004e24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	615a      	str	r2, [r3, #20]
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40014000 	.word	0x40014000
 8004e40:	40014400 	.word	0x40014400

08004e44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f003 031f 	and.w	r3, r3, #31
 8004e56:	2201      	movs	r2, #1
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a1a      	ldr	r2, [r3, #32]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	43db      	mvns	r3, r3
 8004e66:	401a      	ands	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1a      	ldr	r2, [r3, #32]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	621a      	str	r2, [r3, #32]
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
	...

08004e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e04f      	b.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a21      	ldr	r2, [pc, #132]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d108      	bne.n	8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ed8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a14      	ldr	r2, [pc, #80]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d009      	beq.n	8004f1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f10:	d004      	beq.n	8004f1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a10      	ldr	r2, [pc, #64]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d10c      	bne.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40014000 	.word	0x40014000

08004f5c <arm_fir_init_f32>:
 8004f5c:	b570      	push	{r4, r5, r6, lr}
 8004f5e:	9c04      	ldr	r4, [sp, #16]
 8004f60:	6082      	str	r2, [r0, #8]
 8004f62:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004f66:	3c01      	subs	r4, #1
 8004f68:	4605      	mov	r5, r0
 8004f6a:	440c      	add	r4, r1
 8004f6c:	8001      	strh	r1, [r0, #0]
 8004f6e:	461e      	mov	r6, r3
 8004f70:	00a2      	lsls	r2, r4, #2
 8004f72:	4618      	mov	r0, r3
 8004f74:	2100      	movs	r1, #0
 8004f76:	f000 fa91 	bl	800549c <memset>
 8004f7a:	606e      	str	r6, [r5, #4]
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
 8004f7e:	bf00      	nop

08004f80 <arm_fir_f32>:
 8004f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f84:	ed2d 8b10 	vpush	{d8-d15}
 8004f88:	b089      	sub	sp, #36	; 0x24
 8004f8a:	4605      	mov	r5, r0
 8004f8c:	9003      	str	r0, [sp, #12]
 8004f8e:	8800      	ldrh	r0, [r0, #0]
 8004f90:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8004f94:	9304      	str	r3, [sp, #16]
 8004f96:	461e      	mov	r6, r3
 8004f98:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8004fa2:	08f3      	lsrs	r3, r6, #3
 8004fa4:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8004fa8:	9001      	str	r0, [sp, #4]
 8004faa:	4625      	mov	r5, r4
 8004fac:	9400      	str	r4, [sp, #0]
 8004fae:	9302      	str	r3, [sp, #8]
 8004fb0:	f000 81ee 	beq.w	8005390 <arm_fir_f32+0x410>
 8004fb4:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8004fb8:	469e      	mov	lr, r3
 8004fba:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8004fbe:	1f1e      	subs	r6, r3, #4
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	9605      	str	r6, [sp, #20]
 8004fc4:	eb08 0003 	add.w	r0, r8, r3
 8004fc8:	f004 0a07 	and.w	sl, r4, #7
 8004fcc:	4613      	mov	r3, r2
 8004fce:	f10c 0420 	add.w	r4, ip, #32
 8004fd2:	f8cd c018 	str.w	ip, [sp, #24]
 8004fd6:	4684      	mov	ip, r0
 8004fd8:	4648      	mov	r0, r9
 8004fda:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004fde:	9107      	str	r1, [sp, #28]
 8004fe0:	f105 0720 	add.w	r7, r5, #32
 8004fe4:	f101 0620 	add.w	r6, r1, #32
 8004fe8:	f102 0520 	add.w	r5, r2, #32
 8004fec:	4652      	mov	r2, sl
 8004fee:	469a      	mov	sl, r3
 8004ff0:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8004ff4:	f847 3c20 	str.w	r3, [r7, #-32]
 8004ff8:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8004ffc:	f847 3c1c 	str.w	r3, [r7, #-28]
 8005000:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8005004:	f847 3c18 	str.w	r3, [r7, #-24]
 8005008:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800500c:	f847 3c14 	str.w	r3, [r7, #-20]
 8005010:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8005014:	f847 3c10 	str.w	r3, [r7, #-16]
 8005018:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800501c:	f847 3c0c 	str.w	r3, [r7, #-12]
 8005020:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005024:	f847 3c08 	str.w	r3, [r7, #-8]
 8005028:	eddf 3af1 	vldr	s7, [pc, #964]	; 80053f0 <arm_fir_f32+0x470>
 800502c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005030:	f847 3c04 	str.w	r3, [r7, #-4]
 8005034:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 8005038:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800503c:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8005040:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8005044:	ed14 1a04 	vldr	s2, [r4, #-16]
 8005048:	ed54 0a03 	vldr	s1, [r4, #-12]
 800504c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005050:	1f21      	subs	r1, r4, #4
 8005052:	eef0 8a63 	vmov.f32	s17, s7
 8005056:	eef0 9a63 	vmov.f32	s19, s7
 800505a:	eef0 aa63 	vmov.f32	s21, s7
 800505e:	eef0 ba63 	vmov.f32	s23, s7
 8005062:	eeb0 ca63 	vmov.f32	s24, s7
 8005066:	eef0 ca63 	vmov.f32	s25, s7
 800506a:	eeb0 da63 	vmov.f32	s26, s7
 800506e:	2800      	cmp	r0, #0
 8005070:	f000 81e8 	beq.w	8005444 <arm_fir_f32+0x4c4>
 8005074:	f108 0120 	add.w	r1, r8, #32
 8005078:	f104 031c 	add.w	r3, r4, #28
 800507c:	4683      	mov	fp, r0
 800507e:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8005082:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 8005086:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 800508a:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 800508e:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 8005092:	ed11 6a04 	vldr	s12, [r1, #-16]
 8005096:	ed51 6a03 	vldr	s13, [r1, #-12]
 800509a:	ed11 7a02 	vldr	s14, [r1, #-8]
 800509e:	ed51 7a01 	vldr	s15, [r1, #-4]
 80050a2:	ee23 fa04 	vmul.f32	s30, s6, s8
 80050a6:	ee62 ea84 	vmul.f32	s29, s5, s8
 80050aa:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 80050ae:	ee22 ea04 	vmul.f32	s28, s4, s8
 80050b2:	ee61 da84 	vmul.f32	s27, s3, s8
 80050b6:	ee21 ba04 	vmul.f32	s22, s2, s8
 80050ba:	ee20 aa84 	vmul.f32	s20, s1, s8
 80050be:	ee20 9a04 	vmul.f32	s18, s0, s8
 80050c2:	ee28 4a04 	vmul.f32	s8, s16, s8
 80050c6:	ee62 fa24 	vmul.f32	s31, s4, s9
 80050ca:	ee3c ca0e 	vadd.f32	s24, s24, s28
 80050ce:	ee7b baad 	vadd.f32	s23, s23, s27
 80050d2:	ee21 eaa4 	vmul.f32	s28, s3, s9
 80050d6:	ee61 da24 	vmul.f32	s27, s2, s9
 80050da:	ee7a aa8b 	vadd.f32	s21, s21, s22
 80050de:	ee79 9a8a 	vadd.f32	s19, s19, s20
 80050e2:	ee20 baa4 	vmul.f32	s22, s1, s9
 80050e6:	ee20 aa24 	vmul.f32	s20, s0, s9
 80050ea:	ee3d da0f 	vadd.f32	s26, s26, s30
 80050ee:	ee7c caae 	vadd.f32	s25, s25, s29
 80050f2:	ee22 faa4 	vmul.f32	s30, s5, s9
 80050f6:	ee78 8a89 	vadd.f32	s17, s17, s18
 80050fa:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 80050fe:	ee28 9a24 	vmul.f32	s18, s16, s9
 8005102:	ee73 3a84 	vadd.f32	s7, s7, s8
 8005106:	ee63 4a24 	vmul.f32	s9, s6, s9
 800510a:	ee22 4a05 	vmul.f32	s8, s4, s10
 800510e:	ee61 ea05 	vmul.f32	s29, s2, s10
 8005112:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8005116:	ee3d da0f 	vadd.f32	s26, s26, s30
 800511a:	ee7c caaf 	vadd.f32	s25, s25, s31
 800511e:	ee20 fa85 	vmul.f32	s30, s1, s10
 8005122:	ee61 fa85 	vmul.f32	s31, s3, s10
 8005126:	ee3c ea0e 	vadd.f32	s28, s24, s28
 800512a:	ee7b daad 	vadd.f32	s27, s23, s27
 800512e:	ee3a ba8b 	vadd.f32	s22, s21, s22
 8005132:	ee60 ba05 	vmul.f32	s23, s0, s10
 8005136:	ee68 aa05 	vmul.f32	s21, s16, s10
 800513a:	ee39 aa8a 	vadd.f32	s20, s19, s20
 800513e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005142:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8005146:	ee63 4a05 	vmul.f32	s9, s6, s10
 800514a:	ee22 5a85 	vmul.f32	s10, s5, s10
 800514e:	ee21 9a25 	vmul.f32	s18, s2, s11
 8005152:	ee20 ca25 	vmul.f32	s24, s0, s11
 8005156:	ee3d da04 	vadd.f32	s26, s26, s8
 800515a:	ee7c caaf 	vadd.f32	s25, s25, s31
 800515e:	ee21 4aa5 	vmul.f32	s8, s3, s11
 8005162:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8005166:	ed53 1a04 	vldr	s3, [r3, #-16]
 800516a:	ee60 eaa5 	vmul.f32	s29, s1, s11
 800516e:	ee7d da8f 	vadd.f32	s27, s27, s30
 8005172:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8005176:	ee3a aa2a 	vadd.f32	s20, s20, s21
 800517a:	ee68 ba25 	vmul.f32	s23, s16, s11
 800517e:	ee63 aa25 	vmul.f32	s21, s6, s11
 8005182:	ee78 8aa4 	vadd.f32	s17, s17, s9
 8005186:	ee73 3a85 	vadd.f32	s7, s7, s10
 800518a:	ee22 5aa5 	vmul.f32	s10, s5, s11
 800518e:	ee62 5a25 	vmul.f32	s11, s4, s11
 8005192:	ee61 4a06 	vmul.f32	s9, s2, s12
 8005196:	ee60 9a86 	vmul.f32	s19, s1, s12
 800519a:	ee60 fa06 	vmul.f32	s31, s0, s12
 800519e:	ed13 1a03 	vldr	s2, [r3, #-12]
 80051a2:	ee23 fa06 	vmul.f32	s30, s6, s12
 80051a6:	ee3d da04 	vadd.f32	s26, s26, s8
 80051aa:	ee7c ca89 	vadd.f32	s25, s25, s18
 80051ae:	ee3e ea2e 	vadd.f32	s28, s28, s29
 80051b2:	ee28 9a06 	vmul.f32	s18, s16, s12
 80051b6:	ee7d da8c 	vadd.f32	s27, s27, s24
 80051ba:	ee3b ba2b 	vadd.f32	s22, s22, s23
 80051be:	ee22 ca86 	vmul.f32	s24, s5, s12
 80051c2:	ee3a aa2a 	vadd.f32	s20, s20, s21
 80051c6:	ee78 8a85 	vadd.f32	s17, s17, s10
 80051ca:	ee73 3aa5 	vadd.f32	s7, s7, s11
 80051ce:	ee62 5a06 	vmul.f32	s11, s4, s12
 80051d2:	ee21 6a86 	vmul.f32	s12, s3, s12
 80051d6:	ee20 4a26 	vmul.f32	s8, s0, s13
 80051da:	ee63 ea26 	vmul.f32	s29, s6, s13
 80051de:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80051e2:	ee22 5a26 	vmul.f32	s10, s4, s13
 80051e6:	ee3d da24 	vadd.f32	s26, s26, s9
 80051ea:	ee7c caa9 	vadd.f32	s25, s25, s19
 80051ee:	ee60 4aa6 	vmul.f32	s9, s1, s13
 80051f2:	ee3e ea2f 	vadd.f32	s28, s28, s31
 80051f6:	ed53 0a02 	vldr	s1, [r3, #-8]
 80051fa:	ee68 fa26 	vmul.f32	s31, s16, s13
 80051fe:	ee7d da89 	vadd.f32	s27, s27, s18
 8005202:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8005206:	ee78 8aa5 	vadd.f32	s17, s17, s11
 800520a:	ee22 faa6 	vmul.f32	s30, s5, s13
 800520e:	ee73 3a86 	vadd.f32	s7, s7, s12
 8005212:	ee21 6aa6 	vmul.f32	s12, s3, s13
 8005216:	ee61 6a26 	vmul.f32	s13, s2, s13
 800521a:	ee60 aa07 	vmul.f32	s21, s0, s14
 800521e:	ee28 ca07 	vmul.f32	s24, s16, s14
 8005222:	ee63 ba07 	vmul.f32	s23, s6, s14
 8005226:	ee7a 9a05 	vadd.f32	s19, s20, s10
 800522a:	ee78 8a86 	vadd.f32	s17, s17, s12
 800522e:	ee3d da24 	vadd.f32	s26, s26, s9
 8005232:	ee7c ca84 	vadd.f32	s25, s25, s8
 8005236:	ee7d daae 	vadd.f32	s27, s27, s29
 800523a:	ee22 9a07 	vmul.f32	s18, s4, s14
 800523e:	ee62 ea87 	vmul.f32	s29, s5, s14
 8005242:	ee61 5a87 	vmul.f32	s11, s3, s14
 8005246:	ee73 3aa6 	vadd.f32	s7, s7, s13
 800524a:	ed13 0a01 	vldr	s0, [r3, #-4]
 800524e:	ee61 6a07 	vmul.f32	s13, s2, s14
 8005252:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8005256:	ee3b ba0f 	vadd.f32	s22, s22, s30
 800525a:	ee20 7a87 	vmul.f32	s14, s1, s14
 800525e:	ee68 4a27 	vmul.f32	s9, s16, s15
 8005262:	ee3d da2a 	vadd.f32	s26, s26, s21
 8005266:	ee7c ca8c 	vadd.f32	s25, s25, s24
 800526a:	ee23 8a27 	vmul.f32	s16, s6, s15
 800526e:	ee3e ea2b 	vadd.f32	s28, s28, s23
 8005272:	ee22 4aa7 	vmul.f32	s8, s5, s15
 8005276:	ee22 aa27 	vmul.f32	s20, s4, s15
 800527a:	ee21 5aa7 	vmul.f32	s10, s3, s15
 800527e:	ee21 6a27 	vmul.f32	s12, s2, s15
 8005282:	ee78 6aa6 	vadd.f32	s13, s17, s13
 8005286:	ee7d daae 	vadd.f32	s27, s27, s29
 800528a:	ee60 8aa7 	vmul.f32	s17, s1, s15
 800528e:	ee3b ba09 	vadd.f32	s22, s22, s18
 8005292:	ee79 9aa5 	vadd.f32	s19, s19, s11
 8005296:	ee73 3a87 	vadd.f32	s7, s7, s14
 800529a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800529e:	f1bb 0b01 	subs.w	fp, fp, #1
 80052a2:	f101 0120 	add.w	r1, r1, #32
 80052a6:	ee3d da24 	vadd.f32	s26, s26, s9
 80052aa:	ee7c ca88 	vadd.f32	s25, s25, s16
 80052ae:	ee3e ca04 	vadd.f32	s24, s28, s8
 80052b2:	ee7d ba8a 	vadd.f32	s23, s27, s20
 80052b6:	ee7b aa05 	vadd.f32	s21, s22, s10
 80052ba:	ee79 9a86 	vadd.f32	s19, s19, s12
 80052be:	ee76 8aa8 	vadd.f32	s17, s13, s17
 80052c2:	ee73 3aa7 	vadd.f32	s7, s7, s15
 80052c6:	f103 0320 	add.w	r3, r3, #32
 80052ca:	f47f aed8 	bne.w	800507e <arm_fir_f32+0xfe>
 80052ce:	eb09 0104 	add.w	r1, r9, r4
 80052d2:	46e3      	mov	fp, ip
 80052d4:	b3a2      	cbz	r2, 8005340 <arm_fir_f32+0x3c0>
 80052d6:	4613      	mov	r3, r2
 80052d8:	ecbb 6a01 	vldmia	fp!, {s12}
 80052dc:	ecf1 7a01 	vldmia	r1!, {s15}
 80052e0:	ee23 3a06 	vmul.f32	s6, s6, s12
 80052e4:	ee22 4a86 	vmul.f32	s8, s5, s12
 80052e8:	ee62 4a06 	vmul.f32	s9, s4, s12
 80052ec:	ee21 5a86 	vmul.f32	s10, s3, s12
 80052f0:	ee61 5a06 	vmul.f32	s11, s2, s12
 80052f4:	ee60 6a86 	vmul.f32	s13, s1, s12
 80052f8:	ee20 7a06 	vmul.f32	s14, s0, s12
 80052fc:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005300:	3b01      	subs	r3, #1
 8005302:	ee3d da03 	vadd.f32	s26, s26, s6
 8005306:	ee7c ca84 	vadd.f32	s25, s25, s8
 800530a:	eeb0 3a62 	vmov.f32	s6, s5
 800530e:	ee3c ca24 	vadd.f32	s24, s24, s9
 8005312:	eef0 2a42 	vmov.f32	s5, s4
 8005316:	ee7b ba85 	vadd.f32	s23, s23, s10
 800531a:	eeb0 2a61 	vmov.f32	s4, s3
 800531e:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8005322:	eef0 1a41 	vmov.f32	s3, s2
 8005326:	ee79 9aa6 	vadd.f32	s19, s19, s13
 800532a:	eeb0 1a60 	vmov.f32	s2, s1
 800532e:	ee78 8a87 	vadd.f32	s17, s17, s14
 8005332:	eef0 0a40 	vmov.f32	s1, s0
 8005336:	ee73 3a86 	vadd.f32	s7, s7, s12
 800533a:	eeb0 0a67 	vmov.f32	s0, s15
 800533e:	d1cb      	bne.n	80052d8 <arm_fir_f32+0x358>
 8005340:	f1be 0e01 	subs.w	lr, lr, #1
 8005344:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 8005348:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 800534c:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8005350:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8005354:	ed45 aa04 	vstr	s21, [r5, #-16]
 8005358:	ed45 9a03 	vstr	s19, [r5, #-12]
 800535c:	ed45 8a02 	vstr	s17, [r5, #-8]
 8005360:	ed45 3a01 	vstr	s7, [r5, #-4]
 8005364:	f107 0720 	add.w	r7, r7, #32
 8005368:	f106 0620 	add.w	r6, r6, #32
 800536c:	f104 0420 	add.w	r4, r4, #32
 8005370:	f105 0520 	add.w	r5, r5, #32
 8005374:	f47f ae3c 	bne.w	8004ff0 <arm_fir_f32+0x70>
 8005378:	9b02      	ldr	r3, [sp, #8]
 800537a:	9800      	ldr	r0, [sp, #0]
 800537c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005380:	9907      	ldr	r1, [sp, #28]
 8005382:	015b      	lsls	r3, r3, #5
 8005384:	4652      	mov	r2, sl
 8005386:	4418      	add	r0, r3
 8005388:	9000      	str	r0, [sp, #0]
 800538a:	4419      	add	r1, r3
 800538c:	449c      	add	ip, r3
 800538e:	441a      	add	r2, r3
 8005390:	9b04      	ldr	r3, [sp, #16]
 8005392:	f013 0e07 	ands.w	lr, r3, #7
 8005396:	d01f      	beq.n	80053d8 <arm_fir_f32+0x458>
 8005398:	9f00      	ldr	r7, [sp, #0]
 800539a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800539e:	4676      	mov	r6, lr
 80053a0:	4665      	mov	r5, ip
 80053a2:	f851 3b04 	ldr.w	r3, [r1], #4
 80053a6:	eddf 6a12 	vldr	s13, [pc, #72]	; 80053f0 <arm_fir_f32+0x470>
 80053aa:	f847 3b04 	str.w	r3, [r7], #4
 80053ae:	4644      	mov	r4, r8
 80053b0:	464b      	mov	r3, r9
 80053b2:	4628      	mov	r0, r5
 80053b4:	ecb0 7a01 	vldmia	r0!, {s14}
 80053b8:	ecf4 7a01 	vldmia	r4!, {s15}
 80053bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c0:	3b01      	subs	r3, #1
 80053c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80053c6:	d1f5      	bne.n	80053b4 <arm_fir_f32+0x434>
 80053c8:	3e01      	subs	r6, #1
 80053ca:	ece2 6a01 	vstmia	r2!, {s13}
 80053ce:	f105 0504 	add.w	r5, r5, #4
 80053d2:	d1e6      	bne.n	80053a2 <arm_fir_f32+0x422>
 80053d4:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 80053d8:	9b01      	ldr	r3, [sp, #4]
 80053da:	1e59      	subs	r1, r3, #1
 80053dc:	9b03      	ldr	r3, [sp, #12]
 80053de:	088e      	lsrs	r6, r1, #2
 80053e0:	685c      	ldr	r4, [r3, #4]
 80053e2:	d020      	beq.n	8005426 <arm_fir_f32+0x4a6>
 80053e4:	f104 0210 	add.w	r2, r4, #16
 80053e8:	f10c 0310 	add.w	r3, ip, #16
 80053ec:	4630      	mov	r0, r6
 80053ee:	e001      	b.n	80053f4 <arm_fir_f32+0x474>
 80053f0:	00000000 	.word	0x00000000
 80053f4:	f853 5c10 	ldr.w	r5, [r3, #-16]
 80053f8:	f842 5c10 	str.w	r5, [r2, #-16]
 80053fc:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8005400:	f842 5c0c 	str.w	r5, [r2, #-12]
 8005404:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8005408:	f842 5c08 	str.w	r5, [r2, #-8]
 800540c:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8005410:	f842 5c04 	str.w	r5, [r2, #-4]
 8005414:	3801      	subs	r0, #1
 8005416:	f103 0310 	add.w	r3, r3, #16
 800541a:	f102 0210 	add.w	r2, r2, #16
 800541e:	d1e9      	bne.n	80053f4 <arm_fir_f32+0x474>
 8005420:	0133      	lsls	r3, r6, #4
 8005422:	441c      	add	r4, r3
 8005424:	449c      	add	ip, r3
 8005426:	f011 0303 	ands.w	r3, r1, #3
 800542a:	d006      	beq.n	800543a <arm_fir_f32+0x4ba>
 800542c:	4622      	mov	r2, r4
 800542e:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005432:	f842 1b04 	str.w	r1, [r2], #4
 8005436:	3b01      	subs	r3, #1
 8005438:	d1f9      	bne.n	800542e <arm_fir_f32+0x4ae>
 800543a:	b009      	add	sp, #36	; 0x24
 800543c:	ecbd 8b10 	vpop	{d8-d15}
 8005440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005444:	46c3      	mov	fp, r8
 8005446:	e745      	b.n	80052d4 <arm_fir_f32+0x354>

08005448 <__errno>:
 8005448:	4b01      	ldr	r3, [pc, #4]	; (8005450 <__errno+0x8>)
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	20000060 	.word	0x20000060

08005454 <__libc_init_array>:
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	4d0d      	ldr	r5, [pc, #52]	; (800548c <__libc_init_array+0x38>)
 8005458:	4c0d      	ldr	r4, [pc, #52]	; (8005490 <__libc_init_array+0x3c>)
 800545a:	1b64      	subs	r4, r4, r5
 800545c:	10a4      	asrs	r4, r4, #2
 800545e:	2600      	movs	r6, #0
 8005460:	42a6      	cmp	r6, r4
 8005462:	d109      	bne.n	8005478 <__libc_init_array+0x24>
 8005464:	4d0b      	ldr	r5, [pc, #44]	; (8005494 <__libc_init_array+0x40>)
 8005466:	4c0c      	ldr	r4, [pc, #48]	; (8005498 <__libc_init_array+0x44>)
 8005468:	f002 fd80 	bl	8007f6c <_init>
 800546c:	1b64      	subs	r4, r4, r5
 800546e:	10a4      	asrs	r4, r4, #2
 8005470:	2600      	movs	r6, #0
 8005472:	42a6      	cmp	r6, r4
 8005474:	d105      	bne.n	8005482 <__libc_init_array+0x2e>
 8005476:	bd70      	pop	{r4, r5, r6, pc}
 8005478:	f855 3b04 	ldr.w	r3, [r5], #4
 800547c:	4798      	blx	r3
 800547e:	3601      	adds	r6, #1
 8005480:	e7ee      	b.n	8005460 <__libc_init_array+0xc>
 8005482:	f855 3b04 	ldr.w	r3, [r5], #4
 8005486:	4798      	blx	r3
 8005488:	3601      	adds	r6, #1
 800548a:	e7f2      	b.n	8005472 <__libc_init_array+0x1e>
 800548c:	080083bc 	.word	0x080083bc
 8005490:	080083bc 	.word	0x080083bc
 8005494:	080083bc 	.word	0x080083bc
 8005498:	080083c0 	.word	0x080083c0

0800549c <memset>:
 800549c:	4402      	add	r2, r0
 800549e:	4603      	mov	r3, r0
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d100      	bne.n	80054a6 <memset+0xa>
 80054a4:	4770      	bx	lr
 80054a6:	f803 1b01 	strb.w	r1, [r3], #1
 80054aa:	e7f9      	b.n	80054a0 <memset+0x4>

080054ac <__cvt>:
 80054ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054b0:	ec55 4b10 	vmov	r4, r5, d0
 80054b4:	2d00      	cmp	r5, #0
 80054b6:	460e      	mov	r6, r1
 80054b8:	4619      	mov	r1, r3
 80054ba:	462b      	mov	r3, r5
 80054bc:	bfbb      	ittet	lt
 80054be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80054c2:	461d      	movlt	r5, r3
 80054c4:	2300      	movge	r3, #0
 80054c6:	232d      	movlt	r3, #45	; 0x2d
 80054c8:	700b      	strb	r3, [r1, #0]
 80054ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80054d0:	4691      	mov	r9, r2
 80054d2:	f023 0820 	bic.w	r8, r3, #32
 80054d6:	bfbc      	itt	lt
 80054d8:	4622      	movlt	r2, r4
 80054da:	4614      	movlt	r4, r2
 80054dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054e0:	d005      	beq.n	80054ee <__cvt+0x42>
 80054e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80054e6:	d100      	bne.n	80054ea <__cvt+0x3e>
 80054e8:	3601      	adds	r6, #1
 80054ea:	2102      	movs	r1, #2
 80054ec:	e000      	b.n	80054f0 <__cvt+0x44>
 80054ee:	2103      	movs	r1, #3
 80054f0:	ab03      	add	r3, sp, #12
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	ab02      	add	r3, sp, #8
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	ec45 4b10 	vmov	d0, r4, r5
 80054fc:	4653      	mov	r3, sl
 80054fe:	4632      	mov	r2, r6
 8005500:	f000 fe1a 	bl	8006138 <_dtoa_r>
 8005504:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005508:	4607      	mov	r7, r0
 800550a:	d102      	bne.n	8005512 <__cvt+0x66>
 800550c:	f019 0f01 	tst.w	r9, #1
 8005510:	d022      	beq.n	8005558 <__cvt+0xac>
 8005512:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005516:	eb07 0906 	add.w	r9, r7, r6
 800551a:	d110      	bne.n	800553e <__cvt+0x92>
 800551c:	783b      	ldrb	r3, [r7, #0]
 800551e:	2b30      	cmp	r3, #48	; 0x30
 8005520:	d10a      	bne.n	8005538 <__cvt+0x8c>
 8005522:	2200      	movs	r2, #0
 8005524:	2300      	movs	r3, #0
 8005526:	4620      	mov	r0, r4
 8005528:	4629      	mov	r1, r5
 800552a:	f7fb facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800552e:	b918      	cbnz	r0, 8005538 <__cvt+0x8c>
 8005530:	f1c6 0601 	rsb	r6, r6, #1
 8005534:	f8ca 6000 	str.w	r6, [sl]
 8005538:	f8da 3000 	ldr.w	r3, [sl]
 800553c:	4499      	add	r9, r3
 800553e:	2200      	movs	r2, #0
 8005540:	2300      	movs	r3, #0
 8005542:	4620      	mov	r0, r4
 8005544:	4629      	mov	r1, r5
 8005546:	f7fb fabf 	bl	8000ac8 <__aeabi_dcmpeq>
 800554a:	b108      	cbz	r0, 8005550 <__cvt+0xa4>
 800554c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005550:	2230      	movs	r2, #48	; 0x30
 8005552:	9b03      	ldr	r3, [sp, #12]
 8005554:	454b      	cmp	r3, r9
 8005556:	d307      	bcc.n	8005568 <__cvt+0xbc>
 8005558:	9b03      	ldr	r3, [sp, #12]
 800555a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800555c:	1bdb      	subs	r3, r3, r7
 800555e:	4638      	mov	r0, r7
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	b004      	add	sp, #16
 8005564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005568:	1c59      	adds	r1, r3, #1
 800556a:	9103      	str	r1, [sp, #12]
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	e7f0      	b.n	8005552 <__cvt+0xa6>

08005570 <__exponent>:
 8005570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005572:	4603      	mov	r3, r0
 8005574:	2900      	cmp	r1, #0
 8005576:	bfb8      	it	lt
 8005578:	4249      	neglt	r1, r1
 800557a:	f803 2b02 	strb.w	r2, [r3], #2
 800557e:	bfb4      	ite	lt
 8005580:	222d      	movlt	r2, #45	; 0x2d
 8005582:	222b      	movge	r2, #43	; 0x2b
 8005584:	2909      	cmp	r1, #9
 8005586:	7042      	strb	r2, [r0, #1]
 8005588:	dd2a      	ble.n	80055e0 <__exponent+0x70>
 800558a:	f10d 0407 	add.w	r4, sp, #7
 800558e:	46a4      	mov	ip, r4
 8005590:	270a      	movs	r7, #10
 8005592:	46a6      	mov	lr, r4
 8005594:	460a      	mov	r2, r1
 8005596:	fb91 f6f7 	sdiv	r6, r1, r7
 800559a:	fb07 1516 	mls	r5, r7, r6, r1
 800559e:	3530      	adds	r5, #48	; 0x30
 80055a0:	2a63      	cmp	r2, #99	; 0x63
 80055a2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80055a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80055aa:	4631      	mov	r1, r6
 80055ac:	dcf1      	bgt.n	8005592 <__exponent+0x22>
 80055ae:	3130      	adds	r1, #48	; 0x30
 80055b0:	f1ae 0502 	sub.w	r5, lr, #2
 80055b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80055b8:	1c44      	adds	r4, r0, #1
 80055ba:	4629      	mov	r1, r5
 80055bc:	4561      	cmp	r1, ip
 80055be:	d30a      	bcc.n	80055d6 <__exponent+0x66>
 80055c0:	f10d 0209 	add.w	r2, sp, #9
 80055c4:	eba2 020e 	sub.w	r2, r2, lr
 80055c8:	4565      	cmp	r5, ip
 80055ca:	bf88      	it	hi
 80055cc:	2200      	movhi	r2, #0
 80055ce:	4413      	add	r3, r2
 80055d0:	1a18      	subs	r0, r3, r0
 80055d2:	b003      	add	sp, #12
 80055d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80055de:	e7ed      	b.n	80055bc <__exponent+0x4c>
 80055e0:	2330      	movs	r3, #48	; 0x30
 80055e2:	3130      	adds	r1, #48	; 0x30
 80055e4:	7083      	strb	r3, [r0, #2]
 80055e6:	70c1      	strb	r1, [r0, #3]
 80055e8:	1d03      	adds	r3, r0, #4
 80055ea:	e7f1      	b.n	80055d0 <__exponent+0x60>

080055ec <_printf_float>:
 80055ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f0:	ed2d 8b02 	vpush	{d8}
 80055f4:	b08d      	sub	sp, #52	; 0x34
 80055f6:	460c      	mov	r4, r1
 80055f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80055fc:	4616      	mov	r6, r2
 80055fe:	461f      	mov	r7, r3
 8005600:	4605      	mov	r5, r0
 8005602:	f001 fd3d 	bl	8007080 <_localeconv_r>
 8005606:	f8d0 a000 	ldr.w	sl, [r0]
 800560a:	4650      	mov	r0, sl
 800560c:	f7fa fde0 	bl	80001d0 <strlen>
 8005610:	2300      	movs	r3, #0
 8005612:	930a      	str	r3, [sp, #40]	; 0x28
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	9305      	str	r3, [sp, #20]
 8005618:	f8d8 3000 	ldr.w	r3, [r8]
 800561c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005620:	3307      	adds	r3, #7
 8005622:	f023 0307 	bic.w	r3, r3, #7
 8005626:	f103 0208 	add.w	r2, r3, #8
 800562a:	f8c8 2000 	str.w	r2, [r8]
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005636:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800563a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800563e:	9307      	str	r3, [sp, #28]
 8005640:	f8cd 8018 	str.w	r8, [sp, #24]
 8005644:	ee08 0a10 	vmov	s16, r0
 8005648:	4b9f      	ldr	r3, [pc, #636]	; (80058c8 <_printf_float+0x2dc>)
 800564a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800564e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005652:	f7fb fa6b 	bl	8000b2c <__aeabi_dcmpun>
 8005656:	bb88      	cbnz	r0, 80056bc <_printf_float+0xd0>
 8005658:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800565c:	4b9a      	ldr	r3, [pc, #616]	; (80058c8 <_printf_float+0x2dc>)
 800565e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005662:	f7fb fa45 	bl	8000af0 <__aeabi_dcmple>
 8005666:	bb48      	cbnz	r0, 80056bc <_printf_float+0xd0>
 8005668:	2200      	movs	r2, #0
 800566a:	2300      	movs	r3, #0
 800566c:	4640      	mov	r0, r8
 800566e:	4649      	mov	r1, r9
 8005670:	f7fb fa34 	bl	8000adc <__aeabi_dcmplt>
 8005674:	b110      	cbz	r0, 800567c <_printf_float+0x90>
 8005676:	232d      	movs	r3, #45	; 0x2d
 8005678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800567c:	4b93      	ldr	r3, [pc, #588]	; (80058cc <_printf_float+0x2e0>)
 800567e:	4894      	ldr	r0, [pc, #592]	; (80058d0 <_printf_float+0x2e4>)
 8005680:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005684:	bf94      	ite	ls
 8005686:	4698      	movls	r8, r3
 8005688:	4680      	movhi	r8, r0
 800568a:	2303      	movs	r3, #3
 800568c:	6123      	str	r3, [r4, #16]
 800568e:	9b05      	ldr	r3, [sp, #20]
 8005690:	f023 0204 	bic.w	r2, r3, #4
 8005694:	6022      	str	r2, [r4, #0]
 8005696:	f04f 0900 	mov.w	r9, #0
 800569a:	9700      	str	r7, [sp, #0]
 800569c:	4633      	mov	r3, r6
 800569e:	aa0b      	add	r2, sp, #44	; 0x2c
 80056a0:	4621      	mov	r1, r4
 80056a2:	4628      	mov	r0, r5
 80056a4:	f000 f9d8 	bl	8005a58 <_printf_common>
 80056a8:	3001      	adds	r0, #1
 80056aa:	f040 8090 	bne.w	80057ce <_printf_float+0x1e2>
 80056ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056b2:	b00d      	add	sp, #52	; 0x34
 80056b4:	ecbd 8b02 	vpop	{d8}
 80056b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056bc:	4642      	mov	r2, r8
 80056be:	464b      	mov	r3, r9
 80056c0:	4640      	mov	r0, r8
 80056c2:	4649      	mov	r1, r9
 80056c4:	f7fb fa32 	bl	8000b2c <__aeabi_dcmpun>
 80056c8:	b140      	cbz	r0, 80056dc <_printf_float+0xf0>
 80056ca:	464b      	mov	r3, r9
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	bfbc      	itt	lt
 80056d0:	232d      	movlt	r3, #45	; 0x2d
 80056d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80056d6:	487f      	ldr	r0, [pc, #508]	; (80058d4 <_printf_float+0x2e8>)
 80056d8:	4b7f      	ldr	r3, [pc, #508]	; (80058d8 <_printf_float+0x2ec>)
 80056da:	e7d1      	b.n	8005680 <_printf_float+0x94>
 80056dc:	6863      	ldr	r3, [r4, #4]
 80056de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80056e2:	9206      	str	r2, [sp, #24]
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	d13f      	bne.n	8005768 <_printf_float+0x17c>
 80056e8:	2306      	movs	r3, #6
 80056ea:	6063      	str	r3, [r4, #4]
 80056ec:	9b05      	ldr	r3, [sp, #20]
 80056ee:	6861      	ldr	r1, [r4, #4]
 80056f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80056f4:	2300      	movs	r3, #0
 80056f6:	9303      	str	r3, [sp, #12]
 80056f8:	ab0a      	add	r3, sp, #40	; 0x28
 80056fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80056fe:	ab09      	add	r3, sp, #36	; 0x24
 8005700:	ec49 8b10 	vmov	d0, r8, r9
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	6022      	str	r2, [r4, #0]
 8005708:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800570c:	4628      	mov	r0, r5
 800570e:	f7ff fecd 	bl	80054ac <__cvt>
 8005712:	9b06      	ldr	r3, [sp, #24]
 8005714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005716:	2b47      	cmp	r3, #71	; 0x47
 8005718:	4680      	mov	r8, r0
 800571a:	d108      	bne.n	800572e <_printf_float+0x142>
 800571c:	1cc8      	adds	r0, r1, #3
 800571e:	db02      	blt.n	8005726 <_printf_float+0x13a>
 8005720:	6863      	ldr	r3, [r4, #4]
 8005722:	4299      	cmp	r1, r3
 8005724:	dd41      	ble.n	80057aa <_printf_float+0x1be>
 8005726:	f1ab 0b02 	sub.w	fp, fp, #2
 800572a:	fa5f fb8b 	uxtb.w	fp, fp
 800572e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005732:	d820      	bhi.n	8005776 <_printf_float+0x18a>
 8005734:	3901      	subs	r1, #1
 8005736:	465a      	mov	r2, fp
 8005738:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800573c:	9109      	str	r1, [sp, #36]	; 0x24
 800573e:	f7ff ff17 	bl	8005570 <__exponent>
 8005742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005744:	1813      	adds	r3, r2, r0
 8005746:	2a01      	cmp	r2, #1
 8005748:	4681      	mov	r9, r0
 800574a:	6123      	str	r3, [r4, #16]
 800574c:	dc02      	bgt.n	8005754 <_printf_float+0x168>
 800574e:	6822      	ldr	r2, [r4, #0]
 8005750:	07d2      	lsls	r2, r2, #31
 8005752:	d501      	bpl.n	8005758 <_printf_float+0x16c>
 8005754:	3301      	adds	r3, #1
 8005756:	6123      	str	r3, [r4, #16]
 8005758:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800575c:	2b00      	cmp	r3, #0
 800575e:	d09c      	beq.n	800569a <_printf_float+0xae>
 8005760:	232d      	movs	r3, #45	; 0x2d
 8005762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005766:	e798      	b.n	800569a <_printf_float+0xae>
 8005768:	9a06      	ldr	r2, [sp, #24]
 800576a:	2a47      	cmp	r2, #71	; 0x47
 800576c:	d1be      	bne.n	80056ec <_printf_float+0x100>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1bc      	bne.n	80056ec <_printf_float+0x100>
 8005772:	2301      	movs	r3, #1
 8005774:	e7b9      	b.n	80056ea <_printf_float+0xfe>
 8005776:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800577a:	d118      	bne.n	80057ae <_printf_float+0x1c2>
 800577c:	2900      	cmp	r1, #0
 800577e:	6863      	ldr	r3, [r4, #4]
 8005780:	dd0b      	ble.n	800579a <_printf_float+0x1ae>
 8005782:	6121      	str	r1, [r4, #16]
 8005784:	b913      	cbnz	r3, 800578c <_printf_float+0x1a0>
 8005786:	6822      	ldr	r2, [r4, #0]
 8005788:	07d0      	lsls	r0, r2, #31
 800578a:	d502      	bpl.n	8005792 <_printf_float+0x1a6>
 800578c:	3301      	adds	r3, #1
 800578e:	440b      	add	r3, r1
 8005790:	6123      	str	r3, [r4, #16]
 8005792:	65a1      	str	r1, [r4, #88]	; 0x58
 8005794:	f04f 0900 	mov.w	r9, #0
 8005798:	e7de      	b.n	8005758 <_printf_float+0x16c>
 800579a:	b913      	cbnz	r3, 80057a2 <_printf_float+0x1b6>
 800579c:	6822      	ldr	r2, [r4, #0]
 800579e:	07d2      	lsls	r2, r2, #31
 80057a0:	d501      	bpl.n	80057a6 <_printf_float+0x1ba>
 80057a2:	3302      	adds	r3, #2
 80057a4:	e7f4      	b.n	8005790 <_printf_float+0x1a4>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e7f2      	b.n	8005790 <_printf_float+0x1a4>
 80057aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80057ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057b0:	4299      	cmp	r1, r3
 80057b2:	db05      	blt.n	80057c0 <_printf_float+0x1d4>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	6121      	str	r1, [r4, #16]
 80057b8:	07d8      	lsls	r0, r3, #31
 80057ba:	d5ea      	bpl.n	8005792 <_printf_float+0x1a6>
 80057bc:	1c4b      	adds	r3, r1, #1
 80057be:	e7e7      	b.n	8005790 <_printf_float+0x1a4>
 80057c0:	2900      	cmp	r1, #0
 80057c2:	bfd4      	ite	le
 80057c4:	f1c1 0202 	rsble	r2, r1, #2
 80057c8:	2201      	movgt	r2, #1
 80057ca:	4413      	add	r3, r2
 80057cc:	e7e0      	b.n	8005790 <_printf_float+0x1a4>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	055a      	lsls	r2, r3, #21
 80057d2:	d407      	bmi.n	80057e4 <_printf_float+0x1f8>
 80057d4:	6923      	ldr	r3, [r4, #16]
 80057d6:	4642      	mov	r2, r8
 80057d8:	4631      	mov	r1, r6
 80057da:	4628      	mov	r0, r5
 80057dc:	47b8      	blx	r7
 80057de:	3001      	adds	r0, #1
 80057e0:	d12c      	bne.n	800583c <_printf_float+0x250>
 80057e2:	e764      	b.n	80056ae <_printf_float+0xc2>
 80057e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057e8:	f240 80e0 	bls.w	80059ac <_printf_float+0x3c0>
 80057ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057f0:	2200      	movs	r2, #0
 80057f2:	2300      	movs	r3, #0
 80057f4:	f7fb f968 	bl	8000ac8 <__aeabi_dcmpeq>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d034      	beq.n	8005866 <_printf_float+0x27a>
 80057fc:	4a37      	ldr	r2, [pc, #220]	; (80058dc <_printf_float+0x2f0>)
 80057fe:	2301      	movs	r3, #1
 8005800:	4631      	mov	r1, r6
 8005802:	4628      	mov	r0, r5
 8005804:	47b8      	blx	r7
 8005806:	3001      	adds	r0, #1
 8005808:	f43f af51 	beq.w	80056ae <_printf_float+0xc2>
 800580c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005810:	429a      	cmp	r2, r3
 8005812:	db02      	blt.n	800581a <_printf_float+0x22e>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	07d8      	lsls	r0, r3, #31
 8005818:	d510      	bpl.n	800583c <_printf_float+0x250>
 800581a:	ee18 3a10 	vmov	r3, s16
 800581e:	4652      	mov	r2, sl
 8005820:	4631      	mov	r1, r6
 8005822:	4628      	mov	r0, r5
 8005824:	47b8      	blx	r7
 8005826:	3001      	adds	r0, #1
 8005828:	f43f af41 	beq.w	80056ae <_printf_float+0xc2>
 800582c:	f04f 0800 	mov.w	r8, #0
 8005830:	f104 091a 	add.w	r9, r4, #26
 8005834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005836:	3b01      	subs	r3, #1
 8005838:	4543      	cmp	r3, r8
 800583a:	dc09      	bgt.n	8005850 <_printf_float+0x264>
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	079b      	lsls	r3, r3, #30
 8005840:	f100 8105 	bmi.w	8005a4e <_printf_float+0x462>
 8005844:	68e0      	ldr	r0, [r4, #12]
 8005846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005848:	4298      	cmp	r0, r3
 800584a:	bfb8      	it	lt
 800584c:	4618      	movlt	r0, r3
 800584e:	e730      	b.n	80056b2 <_printf_float+0xc6>
 8005850:	2301      	movs	r3, #1
 8005852:	464a      	mov	r2, r9
 8005854:	4631      	mov	r1, r6
 8005856:	4628      	mov	r0, r5
 8005858:	47b8      	blx	r7
 800585a:	3001      	adds	r0, #1
 800585c:	f43f af27 	beq.w	80056ae <_printf_float+0xc2>
 8005860:	f108 0801 	add.w	r8, r8, #1
 8005864:	e7e6      	b.n	8005834 <_printf_float+0x248>
 8005866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005868:	2b00      	cmp	r3, #0
 800586a:	dc39      	bgt.n	80058e0 <_printf_float+0x2f4>
 800586c:	4a1b      	ldr	r2, [pc, #108]	; (80058dc <_printf_float+0x2f0>)
 800586e:	2301      	movs	r3, #1
 8005870:	4631      	mov	r1, r6
 8005872:	4628      	mov	r0, r5
 8005874:	47b8      	blx	r7
 8005876:	3001      	adds	r0, #1
 8005878:	f43f af19 	beq.w	80056ae <_printf_float+0xc2>
 800587c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005880:	4313      	orrs	r3, r2
 8005882:	d102      	bne.n	800588a <_printf_float+0x29e>
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	07d9      	lsls	r1, r3, #31
 8005888:	d5d8      	bpl.n	800583c <_printf_float+0x250>
 800588a:	ee18 3a10 	vmov	r3, s16
 800588e:	4652      	mov	r2, sl
 8005890:	4631      	mov	r1, r6
 8005892:	4628      	mov	r0, r5
 8005894:	47b8      	blx	r7
 8005896:	3001      	adds	r0, #1
 8005898:	f43f af09 	beq.w	80056ae <_printf_float+0xc2>
 800589c:	f04f 0900 	mov.w	r9, #0
 80058a0:	f104 0a1a 	add.w	sl, r4, #26
 80058a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a6:	425b      	negs	r3, r3
 80058a8:	454b      	cmp	r3, r9
 80058aa:	dc01      	bgt.n	80058b0 <_printf_float+0x2c4>
 80058ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ae:	e792      	b.n	80057d6 <_printf_float+0x1ea>
 80058b0:	2301      	movs	r3, #1
 80058b2:	4652      	mov	r2, sl
 80058b4:	4631      	mov	r1, r6
 80058b6:	4628      	mov	r0, r5
 80058b8:	47b8      	blx	r7
 80058ba:	3001      	adds	r0, #1
 80058bc:	f43f aef7 	beq.w	80056ae <_printf_float+0xc2>
 80058c0:	f109 0901 	add.w	r9, r9, #1
 80058c4:	e7ee      	b.n	80058a4 <_printf_float+0x2b8>
 80058c6:	bf00      	nop
 80058c8:	7fefffff 	.word	0x7fefffff
 80058cc:	08007fdc 	.word	0x08007fdc
 80058d0:	08007fe0 	.word	0x08007fe0
 80058d4:	08007fe8 	.word	0x08007fe8
 80058d8:	08007fe4 	.word	0x08007fe4
 80058dc:	08007fec 	.word	0x08007fec
 80058e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058e4:	429a      	cmp	r2, r3
 80058e6:	bfa8      	it	ge
 80058e8:	461a      	movge	r2, r3
 80058ea:	2a00      	cmp	r2, #0
 80058ec:	4691      	mov	r9, r2
 80058ee:	dc37      	bgt.n	8005960 <_printf_float+0x374>
 80058f0:	f04f 0b00 	mov.w	fp, #0
 80058f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058f8:	f104 021a 	add.w	r2, r4, #26
 80058fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058fe:	9305      	str	r3, [sp, #20]
 8005900:	eba3 0309 	sub.w	r3, r3, r9
 8005904:	455b      	cmp	r3, fp
 8005906:	dc33      	bgt.n	8005970 <_printf_float+0x384>
 8005908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800590c:	429a      	cmp	r2, r3
 800590e:	db3b      	blt.n	8005988 <_printf_float+0x39c>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	07da      	lsls	r2, r3, #31
 8005914:	d438      	bmi.n	8005988 <_printf_float+0x39c>
 8005916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005918:	9b05      	ldr	r3, [sp, #20]
 800591a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	eba2 0901 	sub.w	r9, r2, r1
 8005922:	4599      	cmp	r9, r3
 8005924:	bfa8      	it	ge
 8005926:	4699      	movge	r9, r3
 8005928:	f1b9 0f00 	cmp.w	r9, #0
 800592c:	dc35      	bgt.n	800599a <_printf_float+0x3ae>
 800592e:	f04f 0800 	mov.w	r8, #0
 8005932:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005936:	f104 0a1a 	add.w	sl, r4, #26
 800593a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800593e:	1a9b      	subs	r3, r3, r2
 8005940:	eba3 0309 	sub.w	r3, r3, r9
 8005944:	4543      	cmp	r3, r8
 8005946:	f77f af79 	ble.w	800583c <_printf_float+0x250>
 800594a:	2301      	movs	r3, #1
 800594c:	4652      	mov	r2, sl
 800594e:	4631      	mov	r1, r6
 8005950:	4628      	mov	r0, r5
 8005952:	47b8      	blx	r7
 8005954:	3001      	adds	r0, #1
 8005956:	f43f aeaa 	beq.w	80056ae <_printf_float+0xc2>
 800595a:	f108 0801 	add.w	r8, r8, #1
 800595e:	e7ec      	b.n	800593a <_printf_float+0x34e>
 8005960:	4613      	mov	r3, r2
 8005962:	4631      	mov	r1, r6
 8005964:	4642      	mov	r2, r8
 8005966:	4628      	mov	r0, r5
 8005968:	47b8      	blx	r7
 800596a:	3001      	adds	r0, #1
 800596c:	d1c0      	bne.n	80058f0 <_printf_float+0x304>
 800596e:	e69e      	b.n	80056ae <_printf_float+0xc2>
 8005970:	2301      	movs	r3, #1
 8005972:	4631      	mov	r1, r6
 8005974:	4628      	mov	r0, r5
 8005976:	9205      	str	r2, [sp, #20]
 8005978:	47b8      	blx	r7
 800597a:	3001      	adds	r0, #1
 800597c:	f43f ae97 	beq.w	80056ae <_printf_float+0xc2>
 8005980:	9a05      	ldr	r2, [sp, #20]
 8005982:	f10b 0b01 	add.w	fp, fp, #1
 8005986:	e7b9      	b.n	80058fc <_printf_float+0x310>
 8005988:	ee18 3a10 	vmov	r3, s16
 800598c:	4652      	mov	r2, sl
 800598e:	4631      	mov	r1, r6
 8005990:	4628      	mov	r0, r5
 8005992:	47b8      	blx	r7
 8005994:	3001      	adds	r0, #1
 8005996:	d1be      	bne.n	8005916 <_printf_float+0x32a>
 8005998:	e689      	b.n	80056ae <_printf_float+0xc2>
 800599a:	9a05      	ldr	r2, [sp, #20]
 800599c:	464b      	mov	r3, r9
 800599e:	4442      	add	r2, r8
 80059a0:	4631      	mov	r1, r6
 80059a2:	4628      	mov	r0, r5
 80059a4:	47b8      	blx	r7
 80059a6:	3001      	adds	r0, #1
 80059a8:	d1c1      	bne.n	800592e <_printf_float+0x342>
 80059aa:	e680      	b.n	80056ae <_printf_float+0xc2>
 80059ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ae:	2a01      	cmp	r2, #1
 80059b0:	dc01      	bgt.n	80059b6 <_printf_float+0x3ca>
 80059b2:	07db      	lsls	r3, r3, #31
 80059b4:	d538      	bpl.n	8005a28 <_printf_float+0x43c>
 80059b6:	2301      	movs	r3, #1
 80059b8:	4642      	mov	r2, r8
 80059ba:	4631      	mov	r1, r6
 80059bc:	4628      	mov	r0, r5
 80059be:	47b8      	blx	r7
 80059c0:	3001      	adds	r0, #1
 80059c2:	f43f ae74 	beq.w	80056ae <_printf_float+0xc2>
 80059c6:	ee18 3a10 	vmov	r3, s16
 80059ca:	4652      	mov	r2, sl
 80059cc:	4631      	mov	r1, r6
 80059ce:	4628      	mov	r0, r5
 80059d0:	47b8      	blx	r7
 80059d2:	3001      	adds	r0, #1
 80059d4:	f43f ae6b 	beq.w	80056ae <_printf_float+0xc2>
 80059d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059dc:	2200      	movs	r2, #0
 80059de:	2300      	movs	r3, #0
 80059e0:	f7fb f872 	bl	8000ac8 <__aeabi_dcmpeq>
 80059e4:	b9d8      	cbnz	r0, 8005a1e <_printf_float+0x432>
 80059e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059e8:	f108 0201 	add.w	r2, r8, #1
 80059ec:	3b01      	subs	r3, #1
 80059ee:	4631      	mov	r1, r6
 80059f0:	4628      	mov	r0, r5
 80059f2:	47b8      	blx	r7
 80059f4:	3001      	adds	r0, #1
 80059f6:	d10e      	bne.n	8005a16 <_printf_float+0x42a>
 80059f8:	e659      	b.n	80056ae <_printf_float+0xc2>
 80059fa:	2301      	movs	r3, #1
 80059fc:	4652      	mov	r2, sl
 80059fe:	4631      	mov	r1, r6
 8005a00:	4628      	mov	r0, r5
 8005a02:	47b8      	blx	r7
 8005a04:	3001      	adds	r0, #1
 8005a06:	f43f ae52 	beq.w	80056ae <_printf_float+0xc2>
 8005a0a:	f108 0801 	add.w	r8, r8, #1
 8005a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a10:	3b01      	subs	r3, #1
 8005a12:	4543      	cmp	r3, r8
 8005a14:	dcf1      	bgt.n	80059fa <_printf_float+0x40e>
 8005a16:	464b      	mov	r3, r9
 8005a18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a1c:	e6dc      	b.n	80057d8 <_printf_float+0x1ec>
 8005a1e:	f04f 0800 	mov.w	r8, #0
 8005a22:	f104 0a1a 	add.w	sl, r4, #26
 8005a26:	e7f2      	b.n	8005a0e <_printf_float+0x422>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	4642      	mov	r2, r8
 8005a2c:	e7df      	b.n	80059ee <_printf_float+0x402>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	464a      	mov	r2, r9
 8005a32:	4631      	mov	r1, r6
 8005a34:	4628      	mov	r0, r5
 8005a36:	47b8      	blx	r7
 8005a38:	3001      	adds	r0, #1
 8005a3a:	f43f ae38 	beq.w	80056ae <_printf_float+0xc2>
 8005a3e:	f108 0801 	add.w	r8, r8, #1
 8005a42:	68e3      	ldr	r3, [r4, #12]
 8005a44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a46:	1a5b      	subs	r3, r3, r1
 8005a48:	4543      	cmp	r3, r8
 8005a4a:	dcf0      	bgt.n	8005a2e <_printf_float+0x442>
 8005a4c:	e6fa      	b.n	8005844 <_printf_float+0x258>
 8005a4e:	f04f 0800 	mov.w	r8, #0
 8005a52:	f104 0919 	add.w	r9, r4, #25
 8005a56:	e7f4      	b.n	8005a42 <_printf_float+0x456>

08005a58 <_printf_common>:
 8005a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a5c:	4616      	mov	r6, r2
 8005a5e:	4699      	mov	r9, r3
 8005a60:	688a      	ldr	r2, [r1, #8]
 8005a62:	690b      	ldr	r3, [r1, #16]
 8005a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	bfb8      	it	lt
 8005a6c:	4613      	movlt	r3, r2
 8005a6e:	6033      	str	r3, [r6, #0]
 8005a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a74:	4607      	mov	r7, r0
 8005a76:	460c      	mov	r4, r1
 8005a78:	b10a      	cbz	r2, 8005a7e <_printf_common+0x26>
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	6033      	str	r3, [r6, #0]
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	0699      	lsls	r1, r3, #26
 8005a82:	bf42      	ittt	mi
 8005a84:	6833      	ldrmi	r3, [r6, #0]
 8005a86:	3302      	addmi	r3, #2
 8005a88:	6033      	strmi	r3, [r6, #0]
 8005a8a:	6825      	ldr	r5, [r4, #0]
 8005a8c:	f015 0506 	ands.w	r5, r5, #6
 8005a90:	d106      	bne.n	8005aa0 <_printf_common+0x48>
 8005a92:	f104 0a19 	add.w	sl, r4, #25
 8005a96:	68e3      	ldr	r3, [r4, #12]
 8005a98:	6832      	ldr	r2, [r6, #0]
 8005a9a:	1a9b      	subs	r3, r3, r2
 8005a9c:	42ab      	cmp	r3, r5
 8005a9e:	dc26      	bgt.n	8005aee <_printf_common+0x96>
 8005aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005aa4:	1e13      	subs	r3, r2, #0
 8005aa6:	6822      	ldr	r2, [r4, #0]
 8005aa8:	bf18      	it	ne
 8005aaa:	2301      	movne	r3, #1
 8005aac:	0692      	lsls	r2, r2, #26
 8005aae:	d42b      	bmi.n	8005b08 <_printf_common+0xb0>
 8005ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	47c0      	blx	r8
 8005aba:	3001      	adds	r0, #1
 8005abc:	d01e      	beq.n	8005afc <_printf_common+0xa4>
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	68e5      	ldr	r5, [r4, #12]
 8005ac2:	6832      	ldr	r2, [r6, #0]
 8005ac4:	f003 0306 	and.w	r3, r3, #6
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	bf08      	it	eq
 8005acc:	1aad      	subeq	r5, r5, r2
 8005ace:	68a3      	ldr	r3, [r4, #8]
 8005ad0:	6922      	ldr	r2, [r4, #16]
 8005ad2:	bf0c      	ite	eq
 8005ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ad8:	2500      	movne	r5, #0
 8005ada:	4293      	cmp	r3, r2
 8005adc:	bfc4      	itt	gt
 8005ade:	1a9b      	subgt	r3, r3, r2
 8005ae0:	18ed      	addgt	r5, r5, r3
 8005ae2:	2600      	movs	r6, #0
 8005ae4:	341a      	adds	r4, #26
 8005ae6:	42b5      	cmp	r5, r6
 8005ae8:	d11a      	bne.n	8005b20 <_printf_common+0xc8>
 8005aea:	2000      	movs	r0, #0
 8005aec:	e008      	b.n	8005b00 <_printf_common+0xa8>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4652      	mov	r2, sl
 8005af2:	4649      	mov	r1, r9
 8005af4:	4638      	mov	r0, r7
 8005af6:	47c0      	blx	r8
 8005af8:	3001      	adds	r0, #1
 8005afa:	d103      	bne.n	8005b04 <_printf_common+0xac>
 8005afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b04:	3501      	adds	r5, #1
 8005b06:	e7c6      	b.n	8005a96 <_printf_common+0x3e>
 8005b08:	18e1      	adds	r1, r4, r3
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	2030      	movs	r0, #48	; 0x30
 8005b0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b12:	4422      	add	r2, r4
 8005b14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b1c:	3302      	adds	r3, #2
 8005b1e:	e7c7      	b.n	8005ab0 <_printf_common+0x58>
 8005b20:	2301      	movs	r3, #1
 8005b22:	4622      	mov	r2, r4
 8005b24:	4649      	mov	r1, r9
 8005b26:	4638      	mov	r0, r7
 8005b28:	47c0      	blx	r8
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d0e6      	beq.n	8005afc <_printf_common+0xa4>
 8005b2e:	3601      	adds	r6, #1
 8005b30:	e7d9      	b.n	8005ae6 <_printf_common+0x8e>
	...

08005b34 <_printf_i>:
 8005b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b38:	460c      	mov	r4, r1
 8005b3a:	4691      	mov	r9, r2
 8005b3c:	7e27      	ldrb	r7, [r4, #24]
 8005b3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b40:	2f78      	cmp	r7, #120	; 0x78
 8005b42:	4680      	mov	r8, r0
 8005b44:	469a      	mov	sl, r3
 8005b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b4a:	d807      	bhi.n	8005b5c <_printf_i+0x28>
 8005b4c:	2f62      	cmp	r7, #98	; 0x62
 8005b4e:	d80a      	bhi.n	8005b66 <_printf_i+0x32>
 8005b50:	2f00      	cmp	r7, #0
 8005b52:	f000 80d8 	beq.w	8005d06 <_printf_i+0x1d2>
 8005b56:	2f58      	cmp	r7, #88	; 0x58
 8005b58:	f000 80a3 	beq.w	8005ca2 <_printf_i+0x16e>
 8005b5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b64:	e03a      	b.n	8005bdc <_printf_i+0xa8>
 8005b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b6a:	2b15      	cmp	r3, #21
 8005b6c:	d8f6      	bhi.n	8005b5c <_printf_i+0x28>
 8005b6e:	a001      	add	r0, pc, #4	; (adr r0, 8005b74 <_printf_i+0x40>)
 8005b70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b74:	08005bcd 	.word	0x08005bcd
 8005b78:	08005be1 	.word	0x08005be1
 8005b7c:	08005b5d 	.word	0x08005b5d
 8005b80:	08005b5d 	.word	0x08005b5d
 8005b84:	08005b5d 	.word	0x08005b5d
 8005b88:	08005b5d 	.word	0x08005b5d
 8005b8c:	08005be1 	.word	0x08005be1
 8005b90:	08005b5d 	.word	0x08005b5d
 8005b94:	08005b5d 	.word	0x08005b5d
 8005b98:	08005b5d 	.word	0x08005b5d
 8005b9c:	08005b5d 	.word	0x08005b5d
 8005ba0:	08005ced 	.word	0x08005ced
 8005ba4:	08005c11 	.word	0x08005c11
 8005ba8:	08005ccf 	.word	0x08005ccf
 8005bac:	08005b5d 	.word	0x08005b5d
 8005bb0:	08005b5d 	.word	0x08005b5d
 8005bb4:	08005d0f 	.word	0x08005d0f
 8005bb8:	08005b5d 	.word	0x08005b5d
 8005bbc:	08005c11 	.word	0x08005c11
 8005bc0:	08005b5d 	.word	0x08005b5d
 8005bc4:	08005b5d 	.word	0x08005b5d
 8005bc8:	08005cd7 	.word	0x08005cd7
 8005bcc:	680b      	ldr	r3, [r1, #0]
 8005bce:	1d1a      	adds	r2, r3, #4
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	600a      	str	r2, [r1, #0]
 8005bd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0a3      	b.n	8005d28 <_printf_i+0x1f4>
 8005be0:	6825      	ldr	r5, [r4, #0]
 8005be2:	6808      	ldr	r0, [r1, #0]
 8005be4:	062e      	lsls	r6, r5, #24
 8005be6:	f100 0304 	add.w	r3, r0, #4
 8005bea:	d50a      	bpl.n	8005c02 <_printf_i+0xce>
 8005bec:	6805      	ldr	r5, [r0, #0]
 8005bee:	600b      	str	r3, [r1, #0]
 8005bf0:	2d00      	cmp	r5, #0
 8005bf2:	da03      	bge.n	8005bfc <_printf_i+0xc8>
 8005bf4:	232d      	movs	r3, #45	; 0x2d
 8005bf6:	426d      	negs	r5, r5
 8005bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bfc:	485e      	ldr	r0, [pc, #376]	; (8005d78 <_printf_i+0x244>)
 8005bfe:	230a      	movs	r3, #10
 8005c00:	e019      	b.n	8005c36 <_printf_i+0x102>
 8005c02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c06:	6805      	ldr	r5, [r0, #0]
 8005c08:	600b      	str	r3, [r1, #0]
 8005c0a:	bf18      	it	ne
 8005c0c:	b22d      	sxthne	r5, r5
 8005c0e:	e7ef      	b.n	8005bf0 <_printf_i+0xbc>
 8005c10:	680b      	ldr	r3, [r1, #0]
 8005c12:	6825      	ldr	r5, [r4, #0]
 8005c14:	1d18      	adds	r0, r3, #4
 8005c16:	6008      	str	r0, [r1, #0]
 8005c18:	0628      	lsls	r0, r5, #24
 8005c1a:	d501      	bpl.n	8005c20 <_printf_i+0xec>
 8005c1c:	681d      	ldr	r5, [r3, #0]
 8005c1e:	e002      	b.n	8005c26 <_printf_i+0xf2>
 8005c20:	0669      	lsls	r1, r5, #25
 8005c22:	d5fb      	bpl.n	8005c1c <_printf_i+0xe8>
 8005c24:	881d      	ldrh	r5, [r3, #0]
 8005c26:	4854      	ldr	r0, [pc, #336]	; (8005d78 <_printf_i+0x244>)
 8005c28:	2f6f      	cmp	r7, #111	; 0x6f
 8005c2a:	bf0c      	ite	eq
 8005c2c:	2308      	moveq	r3, #8
 8005c2e:	230a      	movne	r3, #10
 8005c30:	2100      	movs	r1, #0
 8005c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c36:	6866      	ldr	r6, [r4, #4]
 8005c38:	60a6      	str	r6, [r4, #8]
 8005c3a:	2e00      	cmp	r6, #0
 8005c3c:	bfa2      	ittt	ge
 8005c3e:	6821      	ldrge	r1, [r4, #0]
 8005c40:	f021 0104 	bicge.w	r1, r1, #4
 8005c44:	6021      	strge	r1, [r4, #0]
 8005c46:	b90d      	cbnz	r5, 8005c4c <_printf_i+0x118>
 8005c48:	2e00      	cmp	r6, #0
 8005c4a:	d04d      	beq.n	8005ce8 <_printf_i+0x1b4>
 8005c4c:	4616      	mov	r6, r2
 8005c4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c52:	fb03 5711 	mls	r7, r3, r1, r5
 8005c56:	5dc7      	ldrb	r7, [r0, r7]
 8005c58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c5c:	462f      	mov	r7, r5
 8005c5e:	42bb      	cmp	r3, r7
 8005c60:	460d      	mov	r5, r1
 8005c62:	d9f4      	bls.n	8005c4e <_printf_i+0x11a>
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d10b      	bne.n	8005c80 <_printf_i+0x14c>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	07df      	lsls	r7, r3, #31
 8005c6c:	d508      	bpl.n	8005c80 <_printf_i+0x14c>
 8005c6e:	6923      	ldr	r3, [r4, #16]
 8005c70:	6861      	ldr	r1, [r4, #4]
 8005c72:	4299      	cmp	r1, r3
 8005c74:	bfde      	ittt	le
 8005c76:	2330      	movle	r3, #48	; 0x30
 8005c78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c7c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005c80:	1b92      	subs	r2, r2, r6
 8005c82:	6122      	str	r2, [r4, #16]
 8005c84:	f8cd a000 	str.w	sl, [sp]
 8005c88:	464b      	mov	r3, r9
 8005c8a:	aa03      	add	r2, sp, #12
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	4640      	mov	r0, r8
 8005c90:	f7ff fee2 	bl	8005a58 <_printf_common>
 8005c94:	3001      	adds	r0, #1
 8005c96:	d14c      	bne.n	8005d32 <_printf_i+0x1fe>
 8005c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c9c:	b004      	add	sp, #16
 8005c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca2:	4835      	ldr	r0, [pc, #212]	; (8005d78 <_printf_i+0x244>)
 8005ca4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	680e      	ldr	r6, [r1, #0]
 8005cac:	061f      	lsls	r7, r3, #24
 8005cae:	f856 5b04 	ldr.w	r5, [r6], #4
 8005cb2:	600e      	str	r6, [r1, #0]
 8005cb4:	d514      	bpl.n	8005ce0 <_printf_i+0x1ac>
 8005cb6:	07d9      	lsls	r1, r3, #31
 8005cb8:	bf44      	itt	mi
 8005cba:	f043 0320 	orrmi.w	r3, r3, #32
 8005cbe:	6023      	strmi	r3, [r4, #0]
 8005cc0:	b91d      	cbnz	r5, 8005cca <_printf_i+0x196>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	f023 0320 	bic.w	r3, r3, #32
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	2310      	movs	r3, #16
 8005ccc:	e7b0      	b.n	8005c30 <_printf_i+0xfc>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	f043 0320 	orr.w	r3, r3, #32
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	2378      	movs	r3, #120	; 0x78
 8005cd8:	4828      	ldr	r0, [pc, #160]	; (8005d7c <_printf_i+0x248>)
 8005cda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cde:	e7e3      	b.n	8005ca8 <_printf_i+0x174>
 8005ce0:	065e      	lsls	r6, r3, #25
 8005ce2:	bf48      	it	mi
 8005ce4:	b2ad      	uxthmi	r5, r5
 8005ce6:	e7e6      	b.n	8005cb6 <_printf_i+0x182>
 8005ce8:	4616      	mov	r6, r2
 8005cea:	e7bb      	b.n	8005c64 <_printf_i+0x130>
 8005cec:	680b      	ldr	r3, [r1, #0]
 8005cee:	6826      	ldr	r6, [r4, #0]
 8005cf0:	6960      	ldr	r0, [r4, #20]
 8005cf2:	1d1d      	adds	r5, r3, #4
 8005cf4:	600d      	str	r5, [r1, #0]
 8005cf6:	0635      	lsls	r5, r6, #24
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	d501      	bpl.n	8005d00 <_printf_i+0x1cc>
 8005cfc:	6018      	str	r0, [r3, #0]
 8005cfe:	e002      	b.n	8005d06 <_printf_i+0x1d2>
 8005d00:	0671      	lsls	r1, r6, #25
 8005d02:	d5fb      	bpl.n	8005cfc <_printf_i+0x1c8>
 8005d04:	8018      	strh	r0, [r3, #0]
 8005d06:	2300      	movs	r3, #0
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	4616      	mov	r6, r2
 8005d0c:	e7ba      	b.n	8005c84 <_printf_i+0x150>
 8005d0e:	680b      	ldr	r3, [r1, #0]
 8005d10:	1d1a      	adds	r2, r3, #4
 8005d12:	600a      	str	r2, [r1, #0]
 8005d14:	681e      	ldr	r6, [r3, #0]
 8005d16:	6862      	ldr	r2, [r4, #4]
 8005d18:	2100      	movs	r1, #0
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f7fa fa60 	bl	80001e0 <memchr>
 8005d20:	b108      	cbz	r0, 8005d26 <_printf_i+0x1f2>
 8005d22:	1b80      	subs	r0, r0, r6
 8005d24:	6060      	str	r0, [r4, #4]
 8005d26:	6863      	ldr	r3, [r4, #4]
 8005d28:	6123      	str	r3, [r4, #16]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d30:	e7a8      	b.n	8005c84 <_printf_i+0x150>
 8005d32:	6923      	ldr	r3, [r4, #16]
 8005d34:	4632      	mov	r2, r6
 8005d36:	4649      	mov	r1, r9
 8005d38:	4640      	mov	r0, r8
 8005d3a:	47d0      	blx	sl
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d0ab      	beq.n	8005c98 <_printf_i+0x164>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	079b      	lsls	r3, r3, #30
 8005d44:	d413      	bmi.n	8005d6e <_printf_i+0x23a>
 8005d46:	68e0      	ldr	r0, [r4, #12]
 8005d48:	9b03      	ldr	r3, [sp, #12]
 8005d4a:	4298      	cmp	r0, r3
 8005d4c:	bfb8      	it	lt
 8005d4e:	4618      	movlt	r0, r3
 8005d50:	e7a4      	b.n	8005c9c <_printf_i+0x168>
 8005d52:	2301      	movs	r3, #1
 8005d54:	4632      	mov	r2, r6
 8005d56:	4649      	mov	r1, r9
 8005d58:	4640      	mov	r0, r8
 8005d5a:	47d0      	blx	sl
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d09b      	beq.n	8005c98 <_printf_i+0x164>
 8005d60:	3501      	adds	r5, #1
 8005d62:	68e3      	ldr	r3, [r4, #12]
 8005d64:	9903      	ldr	r1, [sp, #12]
 8005d66:	1a5b      	subs	r3, r3, r1
 8005d68:	42ab      	cmp	r3, r5
 8005d6a:	dcf2      	bgt.n	8005d52 <_printf_i+0x21e>
 8005d6c:	e7eb      	b.n	8005d46 <_printf_i+0x212>
 8005d6e:	2500      	movs	r5, #0
 8005d70:	f104 0619 	add.w	r6, r4, #25
 8005d74:	e7f5      	b.n	8005d62 <_printf_i+0x22e>
 8005d76:	bf00      	nop
 8005d78:	08007fee 	.word	0x08007fee
 8005d7c:	08007fff 	.word	0x08007fff

08005d80 <iprintf>:
 8005d80:	b40f      	push	{r0, r1, r2, r3}
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <iprintf+0x2c>)
 8005d84:	b513      	push	{r0, r1, r4, lr}
 8005d86:	681c      	ldr	r4, [r3, #0]
 8005d88:	b124      	cbz	r4, 8005d94 <iprintf+0x14>
 8005d8a:	69a3      	ldr	r3, [r4, #24]
 8005d8c:	b913      	cbnz	r3, 8005d94 <iprintf+0x14>
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f001 f8d8 	bl	8006f44 <__sinit>
 8005d94:	ab05      	add	r3, sp, #20
 8005d96:	9a04      	ldr	r2, [sp, #16]
 8005d98:	68a1      	ldr	r1, [r4, #8]
 8005d9a:	9301      	str	r3, [sp, #4]
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f001 fe53 	bl	8007a48 <_vfiprintf_r>
 8005da2:	b002      	add	sp, #8
 8005da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da8:	b004      	add	sp, #16
 8005daa:	4770      	bx	lr
 8005dac:	20000060 	.word	0x20000060

08005db0 <_puts_r>:
 8005db0:	b570      	push	{r4, r5, r6, lr}
 8005db2:	460e      	mov	r6, r1
 8005db4:	4605      	mov	r5, r0
 8005db6:	b118      	cbz	r0, 8005dc0 <_puts_r+0x10>
 8005db8:	6983      	ldr	r3, [r0, #24]
 8005dba:	b90b      	cbnz	r3, 8005dc0 <_puts_r+0x10>
 8005dbc:	f001 f8c2 	bl	8006f44 <__sinit>
 8005dc0:	69ab      	ldr	r3, [r5, #24]
 8005dc2:	68ac      	ldr	r4, [r5, #8]
 8005dc4:	b913      	cbnz	r3, 8005dcc <_puts_r+0x1c>
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f001 f8bc 	bl	8006f44 <__sinit>
 8005dcc:	4b2c      	ldr	r3, [pc, #176]	; (8005e80 <_puts_r+0xd0>)
 8005dce:	429c      	cmp	r4, r3
 8005dd0:	d120      	bne.n	8005e14 <_puts_r+0x64>
 8005dd2:	686c      	ldr	r4, [r5, #4]
 8005dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dd6:	07db      	lsls	r3, r3, #31
 8005dd8:	d405      	bmi.n	8005de6 <_puts_r+0x36>
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	0598      	lsls	r0, r3, #22
 8005dde:	d402      	bmi.n	8005de6 <_puts_r+0x36>
 8005de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005de2:	f001 f952 	bl	800708a <__retarget_lock_acquire_recursive>
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	0719      	lsls	r1, r3, #28
 8005dea:	d51d      	bpl.n	8005e28 <_puts_r+0x78>
 8005dec:	6923      	ldr	r3, [r4, #16]
 8005dee:	b1db      	cbz	r3, 8005e28 <_puts_r+0x78>
 8005df0:	3e01      	subs	r6, #1
 8005df2:	68a3      	ldr	r3, [r4, #8]
 8005df4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	60a3      	str	r3, [r4, #8]
 8005dfc:	bb39      	cbnz	r1, 8005e4e <_puts_r+0x9e>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	da38      	bge.n	8005e74 <_puts_r+0xc4>
 8005e02:	4622      	mov	r2, r4
 8005e04:	210a      	movs	r1, #10
 8005e06:	4628      	mov	r0, r5
 8005e08:	f000 f848 	bl	8005e9c <__swbuf_r>
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d011      	beq.n	8005e34 <_puts_r+0x84>
 8005e10:	250a      	movs	r5, #10
 8005e12:	e011      	b.n	8005e38 <_puts_r+0x88>
 8005e14:	4b1b      	ldr	r3, [pc, #108]	; (8005e84 <_puts_r+0xd4>)
 8005e16:	429c      	cmp	r4, r3
 8005e18:	d101      	bne.n	8005e1e <_puts_r+0x6e>
 8005e1a:	68ac      	ldr	r4, [r5, #8]
 8005e1c:	e7da      	b.n	8005dd4 <_puts_r+0x24>
 8005e1e:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <_puts_r+0xd8>)
 8005e20:	429c      	cmp	r4, r3
 8005e22:	bf08      	it	eq
 8005e24:	68ec      	ldreq	r4, [r5, #12]
 8005e26:	e7d5      	b.n	8005dd4 <_puts_r+0x24>
 8005e28:	4621      	mov	r1, r4
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	f000 f888 	bl	8005f40 <__swsetup_r>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	d0dd      	beq.n	8005df0 <_puts_r+0x40>
 8005e34:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005e38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e3a:	07da      	lsls	r2, r3, #31
 8005e3c:	d405      	bmi.n	8005e4a <_puts_r+0x9a>
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	059b      	lsls	r3, r3, #22
 8005e42:	d402      	bmi.n	8005e4a <_puts_r+0x9a>
 8005e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e46:	f001 f921 	bl	800708c <__retarget_lock_release_recursive>
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	bd70      	pop	{r4, r5, r6, pc}
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	da04      	bge.n	8005e5c <_puts_r+0xac>
 8005e52:	69a2      	ldr	r2, [r4, #24]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	dc06      	bgt.n	8005e66 <_puts_r+0xb6>
 8005e58:	290a      	cmp	r1, #10
 8005e5a:	d004      	beq.n	8005e66 <_puts_r+0xb6>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	6022      	str	r2, [r4, #0]
 8005e62:	7019      	strb	r1, [r3, #0]
 8005e64:	e7c5      	b.n	8005df2 <_puts_r+0x42>
 8005e66:	4622      	mov	r2, r4
 8005e68:	4628      	mov	r0, r5
 8005e6a:	f000 f817 	bl	8005e9c <__swbuf_r>
 8005e6e:	3001      	adds	r0, #1
 8005e70:	d1bf      	bne.n	8005df2 <_puts_r+0x42>
 8005e72:	e7df      	b.n	8005e34 <_puts_r+0x84>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	250a      	movs	r5, #10
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	6022      	str	r2, [r4, #0]
 8005e7c:	701d      	strb	r5, [r3, #0]
 8005e7e:	e7db      	b.n	8005e38 <_puts_r+0x88>
 8005e80:	080080c4 	.word	0x080080c4
 8005e84:	080080e4 	.word	0x080080e4
 8005e88:	080080a4 	.word	0x080080a4

08005e8c <puts>:
 8005e8c:	4b02      	ldr	r3, [pc, #8]	; (8005e98 <puts+0xc>)
 8005e8e:	4601      	mov	r1, r0
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	f7ff bf8d 	b.w	8005db0 <_puts_r>
 8005e96:	bf00      	nop
 8005e98:	20000060 	.word	0x20000060

08005e9c <__swbuf_r>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	460e      	mov	r6, r1
 8005ea0:	4614      	mov	r4, r2
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	b118      	cbz	r0, 8005eae <__swbuf_r+0x12>
 8005ea6:	6983      	ldr	r3, [r0, #24]
 8005ea8:	b90b      	cbnz	r3, 8005eae <__swbuf_r+0x12>
 8005eaa:	f001 f84b 	bl	8006f44 <__sinit>
 8005eae:	4b21      	ldr	r3, [pc, #132]	; (8005f34 <__swbuf_r+0x98>)
 8005eb0:	429c      	cmp	r4, r3
 8005eb2:	d12b      	bne.n	8005f0c <__swbuf_r+0x70>
 8005eb4:	686c      	ldr	r4, [r5, #4]
 8005eb6:	69a3      	ldr	r3, [r4, #24]
 8005eb8:	60a3      	str	r3, [r4, #8]
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	071a      	lsls	r2, r3, #28
 8005ebe:	d52f      	bpl.n	8005f20 <__swbuf_r+0x84>
 8005ec0:	6923      	ldr	r3, [r4, #16]
 8005ec2:	b36b      	cbz	r3, 8005f20 <__swbuf_r+0x84>
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	6820      	ldr	r0, [r4, #0]
 8005ec8:	1ac0      	subs	r0, r0, r3
 8005eca:	6963      	ldr	r3, [r4, #20]
 8005ecc:	b2f6      	uxtb	r6, r6
 8005ece:	4283      	cmp	r3, r0
 8005ed0:	4637      	mov	r7, r6
 8005ed2:	dc04      	bgt.n	8005ede <__swbuf_r+0x42>
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 ffa0 	bl	8006e1c <_fflush_r>
 8005edc:	bb30      	cbnz	r0, 8005f2c <__swbuf_r+0x90>
 8005ede:	68a3      	ldr	r3, [r4, #8]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	60a3      	str	r3, [r4, #8]
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	6022      	str	r2, [r4, #0]
 8005eea:	701e      	strb	r6, [r3, #0]
 8005eec:	6963      	ldr	r3, [r4, #20]
 8005eee:	3001      	adds	r0, #1
 8005ef0:	4283      	cmp	r3, r0
 8005ef2:	d004      	beq.n	8005efe <__swbuf_r+0x62>
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	07db      	lsls	r3, r3, #31
 8005ef8:	d506      	bpl.n	8005f08 <__swbuf_r+0x6c>
 8005efa:	2e0a      	cmp	r6, #10
 8005efc:	d104      	bne.n	8005f08 <__swbuf_r+0x6c>
 8005efe:	4621      	mov	r1, r4
 8005f00:	4628      	mov	r0, r5
 8005f02:	f000 ff8b 	bl	8006e1c <_fflush_r>
 8005f06:	b988      	cbnz	r0, 8005f2c <__swbuf_r+0x90>
 8005f08:	4638      	mov	r0, r7
 8005f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f0c:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <__swbuf_r+0x9c>)
 8005f0e:	429c      	cmp	r4, r3
 8005f10:	d101      	bne.n	8005f16 <__swbuf_r+0x7a>
 8005f12:	68ac      	ldr	r4, [r5, #8]
 8005f14:	e7cf      	b.n	8005eb6 <__swbuf_r+0x1a>
 8005f16:	4b09      	ldr	r3, [pc, #36]	; (8005f3c <__swbuf_r+0xa0>)
 8005f18:	429c      	cmp	r4, r3
 8005f1a:	bf08      	it	eq
 8005f1c:	68ec      	ldreq	r4, [r5, #12]
 8005f1e:	e7ca      	b.n	8005eb6 <__swbuf_r+0x1a>
 8005f20:	4621      	mov	r1, r4
 8005f22:	4628      	mov	r0, r5
 8005f24:	f000 f80c 	bl	8005f40 <__swsetup_r>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d0cb      	beq.n	8005ec4 <__swbuf_r+0x28>
 8005f2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f30:	e7ea      	b.n	8005f08 <__swbuf_r+0x6c>
 8005f32:	bf00      	nop
 8005f34:	080080c4 	.word	0x080080c4
 8005f38:	080080e4 	.word	0x080080e4
 8005f3c:	080080a4 	.word	0x080080a4

08005f40 <__swsetup_r>:
 8005f40:	4b32      	ldr	r3, [pc, #200]	; (800600c <__swsetup_r+0xcc>)
 8005f42:	b570      	push	{r4, r5, r6, lr}
 8005f44:	681d      	ldr	r5, [r3, #0]
 8005f46:	4606      	mov	r6, r0
 8005f48:	460c      	mov	r4, r1
 8005f4a:	b125      	cbz	r5, 8005f56 <__swsetup_r+0x16>
 8005f4c:	69ab      	ldr	r3, [r5, #24]
 8005f4e:	b913      	cbnz	r3, 8005f56 <__swsetup_r+0x16>
 8005f50:	4628      	mov	r0, r5
 8005f52:	f000 fff7 	bl	8006f44 <__sinit>
 8005f56:	4b2e      	ldr	r3, [pc, #184]	; (8006010 <__swsetup_r+0xd0>)
 8005f58:	429c      	cmp	r4, r3
 8005f5a:	d10f      	bne.n	8005f7c <__swsetup_r+0x3c>
 8005f5c:	686c      	ldr	r4, [r5, #4]
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f64:	0719      	lsls	r1, r3, #28
 8005f66:	d42c      	bmi.n	8005fc2 <__swsetup_r+0x82>
 8005f68:	06dd      	lsls	r5, r3, #27
 8005f6a:	d411      	bmi.n	8005f90 <__swsetup_r+0x50>
 8005f6c:	2309      	movs	r3, #9
 8005f6e:	6033      	str	r3, [r6, #0]
 8005f70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f74:	81a3      	strh	r3, [r4, #12]
 8005f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f7a:	e03e      	b.n	8005ffa <__swsetup_r+0xba>
 8005f7c:	4b25      	ldr	r3, [pc, #148]	; (8006014 <__swsetup_r+0xd4>)
 8005f7e:	429c      	cmp	r4, r3
 8005f80:	d101      	bne.n	8005f86 <__swsetup_r+0x46>
 8005f82:	68ac      	ldr	r4, [r5, #8]
 8005f84:	e7eb      	b.n	8005f5e <__swsetup_r+0x1e>
 8005f86:	4b24      	ldr	r3, [pc, #144]	; (8006018 <__swsetup_r+0xd8>)
 8005f88:	429c      	cmp	r4, r3
 8005f8a:	bf08      	it	eq
 8005f8c:	68ec      	ldreq	r4, [r5, #12]
 8005f8e:	e7e6      	b.n	8005f5e <__swsetup_r+0x1e>
 8005f90:	0758      	lsls	r0, r3, #29
 8005f92:	d512      	bpl.n	8005fba <__swsetup_r+0x7a>
 8005f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f96:	b141      	cbz	r1, 8005faa <__swsetup_r+0x6a>
 8005f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f9c:	4299      	cmp	r1, r3
 8005f9e:	d002      	beq.n	8005fa6 <__swsetup_r+0x66>
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f001 fc7d 	bl	80078a0 <_free_r>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8005faa:	89a3      	ldrh	r3, [r4, #12]
 8005fac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fb0:	81a3      	strh	r3, [r4, #12]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6063      	str	r3, [r4, #4]
 8005fb6:	6923      	ldr	r3, [r4, #16]
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	f043 0308 	orr.w	r3, r3, #8
 8005fc0:	81a3      	strh	r3, [r4, #12]
 8005fc2:	6923      	ldr	r3, [r4, #16]
 8005fc4:	b94b      	cbnz	r3, 8005fda <__swsetup_r+0x9a>
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fd0:	d003      	beq.n	8005fda <__swsetup_r+0x9a>
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f001 f87f 	bl	80070d8 <__smakebuf_r>
 8005fda:	89a0      	ldrh	r0, [r4, #12]
 8005fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fe0:	f010 0301 	ands.w	r3, r0, #1
 8005fe4:	d00a      	beq.n	8005ffc <__swsetup_r+0xbc>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60a3      	str	r3, [r4, #8]
 8005fea:	6963      	ldr	r3, [r4, #20]
 8005fec:	425b      	negs	r3, r3
 8005fee:	61a3      	str	r3, [r4, #24]
 8005ff0:	6923      	ldr	r3, [r4, #16]
 8005ff2:	b943      	cbnz	r3, 8006006 <__swsetup_r+0xc6>
 8005ff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ff8:	d1ba      	bne.n	8005f70 <__swsetup_r+0x30>
 8005ffa:	bd70      	pop	{r4, r5, r6, pc}
 8005ffc:	0781      	lsls	r1, r0, #30
 8005ffe:	bf58      	it	pl
 8006000:	6963      	ldrpl	r3, [r4, #20]
 8006002:	60a3      	str	r3, [r4, #8]
 8006004:	e7f4      	b.n	8005ff0 <__swsetup_r+0xb0>
 8006006:	2000      	movs	r0, #0
 8006008:	e7f7      	b.n	8005ffa <__swsetup_r+0xba>
 800600a:	bf00      	nop
 800600c:	20000060 	.word	0x20000060
 8006010:	080080c4 	.word	0x080080c4
 8006014:	080080e4 	.word	0x080080e4
 8006018:	080080a4 	.word	0x080080a4

0800601c <quorem>:
 800601c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006020:	6903      	ldr	r3, [r0, #16]
 8006022:	690c      	ldr	r4, [r1, #16]
 8006024:	42a3      	cmp	r3, r4
 8006026:	4607      	mov	r7, r0
 8006028:	f2c0 8081 	blt.w	800612e <quorem+0x112>
 800602c:	3c01      	subs	r4, #1
 800602e:	f101 0814 	add.w	r8, r1, #20
 8006032:	f100 0514 	add.w	r5, r0, #20
 8006036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006040:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006044:	3301      	adds	r3, #1
 8006046:	429a      	cmp	r2, r3
 8006048:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800604c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006050:	fbb2 f6f3 	udiv	r6, r2, r3
 8006054:	d331      	bcc.n	80060ba <quorem+0x9e>
 8006056:	f04f 0e00 	mov.w	lr, #0
 800605a:	4640      	mov	r0, r8
 800605c:	46ac      	mov	ip, r5
 800605e:	46f2      	mov	sl, lr
 8006060:	f850 2b04 	ldr.w	r2, [r0], #4
 8006064:	b293      	uxth	r3, r2
 8006066:	fb06 e303 	mla	r3, r6, r3, lr
 800606a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800606e:	b29b      	uxth	r3, r3
 8006070:	ebaa 0303 	sub.w	r3, sl, r3
 8006074:	0c12      	lsrs	r2, r2, #16
 8006076:	f8dc a000 	ldr.w	sl, [ip]
 800607a:	fb06 e202 	mla	r2, r6, r2, lr
 800607e:	fa13 f38a 	uxtah	r3, r3, sl
 8006082:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006086:	fa1f fa82 	uxth.w	sl, r2
 800608a:	f8dc 2000 	ldr.w	r2, [ip]
 800608e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006092:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006096:	b29b      	uxth	r3, r3
 8006098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800609c:	4581      	cmp	r9, r0
 800609e:	f84c 3b04 	str.w	r3, [ip], #4
 80060a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060a6:	d2db      	bcs.n	8006060 <quorem+0x44>
 80060a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80060ac:	b92b      	cbnz	r3, 80060ba <quorem+0x9e>
 80060ae:	9b01      	ldr	r3, [sp, #4]
 80060b0:	3b04      	subs	r3, #4
 80060b2:	429d      	cmp	r5, r3
 80060b4:	461a      	mov	r2, r3
 80060b6:	d32e      	bcc.n	8006116 <quorem+0xfa>
 80060b8:	613c      	str	r4, [r7, #16]
 80060ba:	4638      	mov	r0, r7
 80060bc:	f001 fae0 	bl	8007680 <__mcmp>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	db24      	blt.n	800610e <quorem+0xf2>
 80060c4:	3601      	adds	r6, #1
 80060c6:	4628      	mov	r0, r5
 80060c8:	f04f 0c00 	mov.w	ip, #0
 80060cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80060d0:	f8d0 e000 	ldr.w	lr, [r0]
 80060d4:	b293      	uxth	r3, r2
 80060d6:	ebac 0303 	sub.w	r3, ip, r3
 80060da:	0c12      	lsrs	r2, r2, #16
 80060dc:	fa13 f38e 	uxtah	r3, r3, lr
 80060e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060ee:	45c1      	cmp	r9, r8
 80060f0:	f840 3b04 	str.w	r3, [r0], #4
 80060f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060f8:	d2e8      	bcs.n	80060cc <quorem+0xb0>
 80060fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006102:	b922      	cbnz	r2, 800610e <quorem+0xf2>
 8006104:	3b04      	subs	r3, #4
 8006106:	429d      	cmp	r5, r3
 8006108:	461a      	mov	r2, r3
 800610a:	d30a      	bcc.n	8006122 <quorem+0x106>
 800610c:	613c      	str	r4, [r7, #16]
 800610e:	4630      	mov	r0, r6
 8006110:	b003      	add	sp, #12
 8006112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	3b04      	subs	r3, #4
 800611a:	2a00      	cmp	r2, #0
 800611c:	d1cc      	bne.n	80060b8 <quorem+0x9c>
 800611e:	3c01      	subs	r4, #1
 8006120:	e7c7      	b.n	80060b2 <quorem+0x96>
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	3b04      	subs	r3, #4
 8006126:	2a00      	cmp	r2, #0
 8006128:	d1f0      	bne.n	800610c <quorem+0xf0>
 800612a:	3c01      	subs	r4, #1
 800612c:	e7eb      	b.n	8006106 <quorem+0xea>
 800612e:	2000      	movs	r0, #0
 8006130:	e7ee      	b.n	8006110 <quorem+0xf4>
 8006132:	0000      	movs	r0, r0
 8006134:	0000      	movs	r0, r0
	...

08006138 <_dtoa_r>:
 8006138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613c:	ed2d 8b02 	vpush	{d8}
 8006140:	ec57 6b10 	vmov	r6, r7, d0
 8006144:	b095      	sub	sp, #84	; 0x54
 8006146:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006148:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800614c:	9105      	str	r1, [sp, #20]
 800614e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006152:	4604      	mov	r4, r0
 8006154:	9209      	str	r2, [sp, #36]	; 0x24
 8006156:	930f      	str	r3, [sp, #60]	; 0x3c
 8006158:	b975      	cbnz	r5, 8006178 <_dtoa_r+0x40>
 800615a:	2010      	movs	r0, #16
 800615c:	f000 fffc 	bl	8007158 <malloc>
 8006160:	4602      	mov	r2, r0
 8006162:	6260      	str	r0, [r4, #36]	; 0x24
 8006164:	b920      	cbnz	r0, 8006170 <_dtoa_r+0x38>
 8006166:	4bb2      	ldr	r3, [pc, #712]	; (8006430 <_dtoa_r+0x2f8>)
 8006168:	21ea      	movs	r1, #234	; 0xea
 800616a:	48b2      	ldr	r0, [pc, #712]	; (8006434 <_dtoa_r+0x2fc>)
 800616c:	f001 fe02 	bl	8007d74 <__assert_func>
 8006170:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006174:	6005      	str	r5, [r0, #0]
 8006176:	60c5      	str	r5, [r0, #12]
 8006178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800617a:	6819      	ldr	r1, [r3, #0]
 800617c:	b151      	cbz	r1, 8006194 <_dtoa_r+0x5c>
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	604a      	str	r2, [r1, #4]
 8006182:	2301      	movs	r3, #1
 8006184:	4093      	lsls	r3, r2
 8006186:	608b      	str	r3, [r1, #8]
 8006188:	4620      	mov	r0, r4
 800618a:	f001 f83b 	bl	8007204 <_Bfree>
 800618e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	1e3b      	subs	r3, r7, #0
 8006196:	bfb9      	ittee	lt
 8006198:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800619c:	9303      	strlt	r3, [sp, #12]
 800619e:	2300      	movge	r3, #0
 80061a0:	f8c8 3000 	strge.w	r3, [r8]
 80061a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80061a8:	4ba3      	ldr	r3, [pc, #652]	; (8006438 <_dtoa_r+0x300>)
 80061aa:	bfbc      	itt	lt
 80061ac:	2201      	movlt	r2, #1
 80061ae:	f8c8 2000 	strlt.w	r2, [r8]
 80061b2:	ea33 0309 	bics.w	r3, r3, r9
 80061b6:	d11b      	bne.n	80061f0 <_dtoa_r+0xb8>
 80061b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061c4:	4333      	orrs	r3, r6
 80061c6:	f000 857a 	beq.w	8006cbe <_dtoa_r+0xb86>
 80061ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061cc:	b963      	cbnz	r3, 80061e8 <_dtoa_r+0xb0>
 80061ce:	4b9b      	ldr	r3, [pc, #620]	; (800643c <_dtoa_r+0x304>)
 80061d0:	e024      	b.n	800621c <_dtoa_r+0xe4>
 80061d2:	4b9b      	ldr	r3, [pc, #620]	; (8006440 <_dtoa_r+0x308>)
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	3308      	adds	r3, #8
 80061d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061da:	6013      	str	r3, [r2, #0]
 80061dc:	9800      	ldr	r0, [sp, #0]
 80061de:	b015      	add	sp, #84	; 0x54
 80061e0:	ecbd 8b02 	vpop	{d8}
 80061e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e8:	4b94      	ldr	r3, [pc, #592]	; (800643c <_dtoa_r+0x304>)
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	3303      	adds	r3, #3
 80061ee:	e7f3      	b.n	80061d8 <_dtoa_r+0xa0>
 80061f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061f4:	2200      	movs	r2, #0
 80061f6:	ec51 0b17 	vmov	r0, r1, d7
 80061fa:	2300      	movs	r3, #0
 80061fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006200:	f7fa fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 8006204:	4680      	mov	r8, r0
 8006206:	b158      	cbz	r0, 8006220 <_dtoa_r+0xe8>
 8006208:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800620a:	2301      	movs	r3, #1
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8551 	beq.w	8006cb8 <_dtoa_r+0xb80>
 8006216:	488b      	ldr	r0, [pc, #556]	; (8006444 <_dtoa_r+0x30c>)
 8006218:	6018      	str	r0, [r3, #0]
 800621a:	1e43      	subs	r3, r0, #1
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	e7dd      	b.n	80061dc <_dtoa_r+0xa4>
 8006220:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006224:	aa12      	add	r2, sp, #72	; 0x48
 8006226:	a913      	add	r1, sp, #76	; 0x4c
 8006228:	4620      	mov	r0, r4
 800622a:	f001 facd 	bl	80077c8 <__d2b>
 800622e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006232:	4683      	mov	fp, r0
 8006234:	2d00      	cmp	r5, #0
 8006236:	d07c      	beq.n	8006332 <_dtoa_r+0x1fa>
 8006238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800623a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800623e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006242:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006246:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800624a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800624e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006252:	4b7d      	ldr	r3, [pc, #500]	; (8006448 <_dtoa_r+0x310>)
 8006254:	2200      	movs	r2, #0
 8006256:	4630      	mov	r0, r6
 8006258:	4639      	mov	r1, r7
 800625a:	f7fa f815 	bl	8000288 <__aeabi_dsub>
 800625e:	a36e      	add	r3, pc, #440	; (adr r3, 8006418 <_dtoa_r+0x2e0>)
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f7fa f9c8 	bl	80005f8 <__aeabi_dmul>
 8006268:	a36d      	add	r3, pc, #436	; (adr r3, 8006420 <_dtoa_r+0x2e8>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f7fa f80d 	bl	800028c <__adddf3>
 8006272:	4606      	mov	r6, r0
 8006274:	4628      	mov	r0, r5
 8006276:	460f      	mov	r7, r1
 8006278:	f7fa f954 	bl	8000524 <__aeabi_i2d>
 800627c:	a36a      	add	r3, pc, #424	; (adr r3, 8006428 <_dtoa_r+0x2f0>)
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	f7fa f9b9 	bl	80005f8 <__aeabi_dmul>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4630      	mov	r0, r6
 800628c:	4639      	mov	r1, r7
 800628e:	f7f9 fffd 	bl	800028c <__adddf3>
 8006292:	4606      	mov	r6, r0
 8006294:	460f      	mov	r7, r1
 8006296:	f7fa fc5f 	bl	8000b58 <__aeabi_d2iz>
 800629a:	2200      	movs	r2, #0
 800629c:	4682      	mov	sl, r0
 800629e:	2300      	movs	r3, #0
 80062a0:	4630      	mov	r0, r6
 80062a2:	4639      	mov	r1, r7
 80062a4:	f7fa fc1a 	bl	8000adc <__aeabi_dcmplt>
 80062a8:	b148      	cbz	r0, 80062be <_dtoa_r+0x186>
 80062aa:	4650      	mov	r0, sl
 80062ac:	f7fa f93a 	bl	8000524 <__aeabi_i2d>
 80062b0:	4632      	mov	r2, r6
 80062b2:	463b      	mov	r3, r7
 80062b4:	f7fa fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 80062b8:	b908      	cbnz	r0, 80062be <_dtoa_r+0x186>
 80062ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80062be:	f1ba 0f16 	cmp.w	sl, #22
 80062c2:	d854      	bhi.n	800636e <_dtoa_r+0x236>
 80062c4:	4b61      	ldr	r3, [pc, #388]	; (800644c <_dtoa_r+0x314>)
 80062c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062d2:	f7fa fc03 	bl	8000adc <__aeabi_dcmplt>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d04b      	beq.n	8006372 <_dtoa_r+0x23a>
 80062da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80062de:	2300      	movs	r3, #0
 80062e0:	930e      	str	r3, [sp, #56]	; 0x38
 80062e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062e4:	1b5d      	subs	r5, r3, r5
 80062e6:	1e6b      	subs	r3, r5, #1
 80062e8:	9304      	str	r3, [sp, #16]
 80062ea:	bf43      	ittte	mi
 80062ec:	2300      	movmi	r3, #0
 80062ee:	f1c5 0801 	rsbmi	r8, r5, #1
 80062f2:	9304      	strmi	r3, [sp, #16]
 80062f4:	f04f 0800 	movpl.w	r8, #0
 80062f8:	f1ba 0f00 	cmp.w	sl, #0
 80062fc:	db3b      	blt.n	8006376 <_dtoa_r+0x23e>
 80062fe:	9b04      	ldr	r3, [sp, #16]
 8006300:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006304:	4453      	add	r3, sl
 8006306:	9304      	str	r3, [sp, #16]
 8006308:	2300      	movs	r3, #0
 800630a:	9306      	str	r3, [sp, #24]
 800630c:	9b05      	ldr	r3, [sp, #20]
 800630e:	2b09      	cmp	r3, #9
 8006310:	d869      	bhi.n	80063e6 <_dtoa_r+0x2ae>
 8006312:	2b05      	cmp	r3, #5
 8006314:	bfc4      	itt	gt
 8006316:	3b04      	subgt	r3, #4
 8006318:	9305      	strgt	r3, [sp, #20]
 800631a:	9b05      	ldr	r3, [sp, #20]
 800631c:	f1a3 0302 	sub.w	r3, r3, #2
 8006320:	bfcc      	ite	gt
 8006322:	2500      	movgt	r5, #0
 8006324:	2501      	movle	r5, #1
 8006326:	2b03      	cmp	r3, #3
 8006328:	d869      	bhi.n	80063fe <_dtoa_r+0x2c6>
 800632a:	e8df f003 	tbb	[pc, r3]
 800632e:	4e2c      	.short	0x4e2c
 8006330:	5a4c      	.short	0x5a4c
 8006332:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006336:	441d      	add	r5, r3
 8006338:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800633c:	2b20      	cmp	r3, #32
 800633e:	bfc1      	itttt	gt
 8006340:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006344:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006348:	fa09 f303 	lslgt.w	r3, r9, r3
 800634c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006350:	bfda      	itte	le
 8006352:	f1c3 0320 	rsble	r3, r3, #32
 8006356:	fa06 f003 	lslle.w	r0, r6, r3
 800635a:	4318      	orrgt	r0, r3
 800635c:	f7fa f8d2 	bl	8000504 <__aeabi_ui2d>
 8006360:	2301      	movs	r3, #1
 8006362:	4606      	mov	r6, r0
 8006364:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006368:	3d01      	subs	r5, #1
 800636a:	9310      	str	r3, [sp, #64]	; 0x40
 800636c:	e771      	b.n	8006252 <_dtoa_r+0x11a>
 800636e:	2301      	movs	r3, #1
 8006370:	e7b6      	b.n	80062e0 <_dtoa_r+0x1a8>
 8006372:	900e      	str	r0, [sp, #56]	; 0x38
 8006374:	e7b5      	b.n	80062e2 <_dtoa_r+0x1aa>
 8006376:	f1ca 0300 	rsb	r3, sl, #0
 800637a:	9306      	str	r3, [sp, #24]
 800637c:	2300      	movs	r3, #0
 800637e:	eba8 080a 	sub.w	r8, r8, sl
 8006382:	930d      	str	r3, [sp, #52]	; 0x34
 8006384:	e7c2      	b.n	800630c <_dtoa_r+0x1d4>
 8006386:	2300      	movs	r3, #0
 8006388:	9308      	str	r3, [sp, #32]
 800638a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638c:	2b00      	cmp	r3, #0
 800638e:	dc39      	bgt.n	8006404 <_dtoa_r+0x2cc>
 8006390:	f04f 0901 	mov.w	r9, #1
 8006394:	f8cd 9004 	str.w	r9, [sp, #4]
 8006398:	464b      	mov	r3, r9
 800639a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800639e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063a0:	2200      	movs	r2, #0
 80063a2:	6042      	str	r2, [r0, #4]
 80063a4:	2204      	movs	r2, #4
 80063a6:	f102 0614 	add.w	r6, r2, #20
 80063aa:	429e      	cmp	r6, r3
 80063ac:	6841      	ldr	r1, [r0, #4]
 80063ae:	d92f      	bls.n	8006410 <_dtoa_r+0x2d8>
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fee7 	bl	8007184 <_Balloc>
 80063b6:	9000      	str	r0, [sp, #0]
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d14b      	bne.n	8006454 <_dtoa_r+0x31c>
 80063bc:	4b24      	ldr	r3, [pc, #144]	; (8006450 <_dtoa_r+0x318>)
 80063be:	4602      	mov	r2, r0
 80063c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063c4:	e6d1      	b.n	800616a <_dtoa_r+0x32>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e7de      	b.n	8006388 <_dtoa_r+0x250>
 80063ca:	2300      	movs	r3, #0
 80063cc:	9308      	str	r3, [sp, #32]
 80063ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d0:	eb0a 0903 	add.w	r9, sl, r3
 80063d4:	f109 0301 	add.w	r3, r9, #1
 80063d8:	2b01      	cmp	r3, #1
 80063da:	9301      	str	r3, [sp, #4]
 80063dc:	bfb8      	it	lt
 80063de:	2301      	movlt	r3, #1
 80063e0:	e7dd      	b.n	800639e <_dtoa_r+0x266>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e7f2      	b.n	80063cc <_dtoa_r+0x294>
 80063e6:	2501      	movs	r5, #1
 80063e8:	2300      	movs	r3, #0
 80063ea:	9305      	str	r3, [sp, #20]
 80063ec:	9508      	str	r5, [sp, #32]
 80063ee:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80063f8:	2312      	movs	r3, #18
 80063fa:	9209      	str	r2, [sp, #36]	; 0x24
 80063fc:	e7cf      	b.n	800639e <_dtoa_r+0x266>
 80063fe:	2301      	movs	r3, #1
 8006400:	9308      	str	r3, [sp, #32]
 8006402:	e7f4      	b.n	80063ee <_dtoa_r+0x2b6>
 8006404:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006408:	f8cd 9004 	str.w	r9, [sp, #4]
 800640c:	464b      	mov	r3, r9
 800640e:	e7c6      	b.n	800639e <_dtoa_r+0x266>
 8006410:	3101      	adds	r1, #1
 8006412:	6041      	str	r1, [r0, #4]
 8006414:	0052      	lsls	r2, r2, #1
 8006416:	e7c6      	b.n	80063a6 <_dtoa_r+0x26e>
 8006418:	636f4361 	.word	0x636f4361
 800641c:	3fd287a7 	.word	0x3fd287a7
 8006420:	8b60c8b3 	.word	0x8b60c8b3
 8006424:	3fc68a28 	.word	0x3fc68a28
 8006428:	509f79fb 	.word	0x509f79fb
 800642c:	3fd34413 	.word	0x3fd34413
 8006430:	0800801d 	.word	0x0800801d
 8006434:	08008034 	.word	0x08008034
 8006438:	7ff00000 	.word	0x7ff00000
 800643c:	08008019 	.word	0x08008019
 8006440:	08008010 	.word	0x08008010
 8006444:	08007fed 	.word	0x08007fed
 8006448:	3ff80000 	.word	0x3ff80000
 800644c:	08008190 	.word	0x08008190
 8006450:	08008093 	.word	0x08008093
 8006454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006456:	9a00      	ldr	r2, [sp, #0]
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	9b01      	ldr	r3, [sp, #4]
 800645c:	2b0e      	cmp	r3, #14
 800645e:	f200 80ad 	bhi.w	80065bc <_dtoa_r+0x484>
 8006462:	2d00      	cmp	r5, #0
 8006464:	f000 80aa 	beq.w	80065bc <_dtoa_r+0x484>
 8006468:	f1ba 0f00 	cmp.w	sl, #0
 800646c:	dd36      	ble.n	80064dc <_dtoa_r+0x3a4>
 800646e:	4ac3      	ldr	r2, [pc, #780]	; (800677c <_dtoa_r+0x644>)
 8006470:	f00a 030f 	and.w	r3, sl, #15
 8006474:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006478:	ed93 7b00 	vldr	d7, [r3]
 800647c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006480:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006484:	eeb0 8a47 	vmov.f32	s16, s14
 8006488:	eef0 8a67 	vmov.f32	s17, s15
 800648c:	d016      	beq.n	80064bc <_dtoa_r+0x384>
 800648e:	4bbc      	ldr	r3, [pc, #752]	; (8006780 <_dtoa_r+0x648>)
 8006490:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006494:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006498:	f7fa f9d8 	bl	800084c <__aeabi_ddiv>
 800649c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a0:	f007 070f 	and.w	r7, r7, #15
 80064a4:	2503      	movs	r5, #3
 80064a6:	4eb6      	ldr	r6, [pc, #728]	; (8006780 <_dtoa_r+0x648>)
 80064a8:	b957      	cbnz	r7, 80064c0 <_dtoa_r+0x388>
 80064aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ae:	ec53 2b18 	vmov	r2, r3, d8
 80064b2:	f7fa f9cb 	bl	800084c <__aeabi_ddiv>
 80064b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ba:	e029      	b.n	8006510 <_dtoa_r+0x3d8>
 80064bc:	2502      	movs	r5, #2
 80064be:	e7f2      	b.n	80064a6 <_dtoa_r+0x36e>
 80064c0:	07f9      	lsls	r1, r7, #31
 80064c2:	d508      	bpl.n	80064d6 <_dtoa_r+0x39e>
 80064c4:	ec51 0b18 	vmov	r0, r1, d8
 80064c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064cc:	f7fa f894 	bl	80005f8 <__aeabi_dmul>
 80064d0:	ec41 0b18 	vmov	d8, r0, r1
 80064d4:	3501      	adds	r5, #1
 80064d6:	107f      	asrs	r7, r7, #1
 80064d8:	3608      	adds	r6, #8
 80064da:	e7e5      	b.n	80064a8 <_dtoa_r+0x370>
 80064dc:	f000 80a6 	beq.w	800662c <_dtoa_r+0x4f4>
 80064e0:	f1ca 0600 	rsb	r6, sl, #0
 80064e4:	4ba5      	ldr	r3, [pc, #660]	; (800677c <_dtoa_r+0x644>)
 80064e6:	4fa6      	ldr	r7, [pc, #664]	; (8006780 <_dtoa_r+0x648>)
 80064e8:	f006 020f 	and.w	r2, r6, #15
 80064ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064f8:	f7fa f87e 	bl	80005f8 <__aeabi_dmul>
 80064fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006500:	1136      	asrs	r6, r6, #4
 8006502:	2300      	movs	r3, #0
 8006504:	2502      	movs	r5, #2
 8006506:	2e00      	cmp	r6, #0
 8006508:	f040 8085 	bne.w	8006616 <_dtoa_r+0x4de>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1d2      	bne.n	80064b6 <_dtoa_r+0x37e>
 8006510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 808c 	beq.w	8006630 <_dtoa_r+0x4f8>
 8006518:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800651c:	4b99      	ldr	r3, [pc, #612]	; (8006784 <_dtoa_r+0x64c>)
 800651e:	2200      	movs	r2, #0
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	f7fa fada 	bl	8000adc <__aeabi_dcmplt>
 8006528:	2800      	cmp	r0, #0
 800652a:	f000 8081 	beq.w	8006630 <_dtoa_r+0x4f8>
 800652e:	9b01      	ldr	r3, [sp, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d07d      	beq.n	8006630 <_dtoa_r+0x4f8>
 8006534:	f1b9 0f00 	cmp.w	r9, #0
 8006538:	dd3c      	ble.n	80065b4 <_dtoa_r+0x47c>
 800653a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800653e:	9307      	str	r3, [sp, #28]
 8006540:	2200      	movs	r2, #0
 8006542:	4b91      	ldr	r3, [pc, #580]	; (8006788 <_dtoa_r+0x650>)
 8006544:	4630      	mov	r0, r6
 8006546:	4639      	mov	r1, r7
 8006548:	f7fa f856 	bl	80005f8 <__aeabi_dmul>
 800654c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006550:	3501      	adds	r5, #1
 8006552:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006556:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800655a:	4628      	mov	r0, r5
 800655c:	f7f9 ffe2 	bl	8000524 <__aeabi_i2d>
 8006560:	4632      	mov	r2, r6
 8006562:	463b      	mov	r3, r7
 8006564:	f7fa f848 	bl	80005f8 <__aeabi_dmul>
 8006568:	4b88      	ldr	r3, [pc, #544]	; (800678c <_dtoa_r+0x654>)
 800656a:	2200      	movs	r2, #0
 800656c:	f7f9 fe8e 	bl	800028c <__adddf3>
 8006570:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006578:	9303      	str	r3, [sp, #12]
 800657a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800657c:	2b00      	cmp	r3, #0
 800657e:	d15c      	bne.n	800663a <_dtoa_r+0x502>
 8006580:	4b83      	ldr	r3, [pc, #524]	; (8006790 <_dtoa_r+0x658>)
 8006582:	2200      	movs	r2, #0
 8006584:	4630      	mov	r0, r6
 8006586:	4639      	mov	r1, r7
 8006588:	f7f9 fe7e 	bl	8000288 <__aeabi_dsub>
 800658c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006590:	4606      	mov	r6, r0
 8006592:	460f      	mov	r7, r1
 8006594:	f7fa fac0 	bl	8000b18 <__aeabi_dcmpgt>
 8006598:	2800      	cmp	r0, #0
 800659a:	f040 8296 	bne.w	8006aca <_dtoa_r+0x992>
 800659e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80065a2:	4630      	mov	r0, r6
 80065a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065a8:	4639      	mov	r1, r7
 80065aa:	f7fa fa97 	bl	8000adc <__aeabi_dcmplt>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	f040 8288 	bne.w	8006ac4 <_dtoa_r+0x98c>
 80065b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f2c0 8158 	blt.w	8006874 <_dtoa_r+0x73c>
 80065c4:	f1ba 0f0e 	cmp.w	sl, #14
 80065c8:	f300 8154 	bgt.w	8006874 <_dtoa_r+0x73c>
 80065cc:	4b6b      	ldr	r3, [pc, #428]	; (800677c <_dtoa_r+0x644>)
 80065ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80065d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f280 80e3 	bge.w	80067a4 <_dtoa_r+0x66c>
 80065de:	9b01      	ldr	r3, [sp, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f300 80df 	bgt.w	80067a4 <_dtoa_r+0x66c>
 80065e6:	f040 826d 	bne.w	8006ac4 <_dtoa_r+0x98c>
 80065ea:	4b69      	ldr	r3, [pc, #420]	; (8006790 <_dtoa_r+0x658>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	4640      	mov	r0, r8
 80065f0:	4649      	mov	r1, r9
 80065f2:	f7fa f801 	bl	80005f8 <__aeabi_dmul>
 80065f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065fa:	f7fa fa83 	bl	8000b04 <__aeabi_dcmpge>
 80065fe:	9e01      	ldr	r6, [sp, #4]
 8006600:	4637      	mov	r7, r6
 8006602:	2800      	cmp	r0, #0
 8006604:	f040 8243 	bne.w	8006a8e <_dtoa_r+0x956>
 8006608:	9d00      	ldr	r5, [sp, #0]
 800660a:	2331      	movs	r3, #49	; 0x31
 800660c:	f805 3b01 	strb.w	r3, [r5], #1
 8006610:	f10a 0a01 	add.w	sl, sl, #1
 8006614:	e23f      	b.n	8006a96 <_dtoa_r+0x95e>
 8006616:	07f2      	lsls	r2, r6, #31
 8006618:	d505      	bpl.n	8006626 <_dtoa_r+0x4ee>
 800661a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800661e:	f7f9 ffeb 	bl	80005f8 <__aeabi_dmul>
 8006622:	3501      	adds	r5, #1
 8006624:	2301      	movs	r3, #1
 8006626:	1076      	asrs	r6, r6, #1
 8006628:	3708      	adds	r7, #8
 800662a:	e76c      	b.n	8006506 <_dtoa_r+0x3ce>
 800662c:	2502      	movs	r5, #2
 800662e:	e76f      	b.n	8006510 <_dtoa_r+0x3d8>
 8006630:	9b01      	ldr	r3, [sp, #4]
 8006632:	f8cd a01c 	str.w	sl, [sp, #28]
 8006636:	930c      	str	r3, [sp, #48]	; 0x30
 8006638:	e78d      	b.n	8006556 <_dtoa_r+0x41e>
 800663a:	9900      	ldr	r1, [sp, #0]
 800663c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800663e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006640:	4b4e      	ldr	r3, [pc, #312]	; (800677c <_dtoa_r+0x644>)
 8006642:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006646:	4401      	add	r1, r0
 8006648:	9102      	str	r1, [sp, #8]
 800664a:	9908      	ldr	r1, [sp, #32]
 800664c:	eeb0 8a47 	vmov.f32	s16, s14
 8006650:	eef0 8a67 	vmov.f32	s17, s15
 8006654:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006658:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800665c:	2900      	cmp	r1, #0
 800665e:	d045      	beq.n	80066ec <_dtoa_r+0x5b4>
 8006660:	494c      	ldr	r1, [pc, #304]	; (8006794 <_dtoa_r+0x65c>)
 8006662:	2000      	movs	r0, #0
 8006664:	f7fa f8f2 	bl	800084c <__aeabi_ddiv>
 8006668:	ec53 2b18 	vmov	r2, r3, d8
 800666c:	f7f9 fe0c 	bl	8000288 <__aeabi_dsub>
 8006670:	9d00      	ldr	r5, [sp, #0]
 8006672:	ec41 0b18 	vmov	d8, r0, r1
 8006676:	4639      	mov	r1, r7
 8006678:	4630      	mov	r0, r6
 800667a:	f7fa fa6d 	bl	8000b58 <__aeabi_d2iz>
 800667e:	900c      	str	r0, [sp, #48]	; 0x30
 8006680:	f7f9 ff50 	bl	8000524 <__aeabi_i2d>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4630      	mov	r0, r6
 800668a:	4639      	mov	r1, r7
 800668c:	f7f9 fdfc 	bl	8000288 <__aeabi_dsub>
 8006690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006692:	3330      	adds	r3, #48	; 0x30
 8006694:	f805 3b01 	strb.w	r3, [r5], #1
 8006698:	ec53 2b18 	vmov	r2, r3, d8
 800669c:	4606      	mov	r6, r0
 800669e:	460f      	mov	r7, r1
 80066a0:	f7fa fa1c 	bl	8000adc <__aeabi_dcmplt>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d165      	bne.n	8006774 <_dtoa_r+0x63c>
 80066a8:	4632      	mov	r2, r6
 80066aa:	463b      	mov	r3, r7
 80066ac:	4935      	ldr	r1, [pc, #212]	; (8006784 <_dtoa_r+0x64c>)
 80066ae:	2000      	movs	r0, #0
 80066b0:	f7f9 fdea 	bl	8000288 <__aeabi_dsub>
 80066b4:	ec53 2b18 	vmov	r2, r3, d8
 80066b8:	f7fa fa10 	bl	8000adc <__aeabi_dcmplt>
 80066bc:	2800      	cmp	r0, #0
 80066be:	f040 80b9 	bne.w	8006834 <_dtoa_r+0x6fc>
 80066c2:	9b02      	ldr	r3, [sp, #8]
 80066c4:	429d      	cmp	r5, r3
 80066c6:	f43f af75 	beq.w	80065b4 <_dtoa_r+0x47c>
 80066ca:	4b2f      	ldr	r3, [pc, #188]	; (8006788 <_dtoa_r+0x650>)
 80066cc:	ec51 0b18 	vmov	r0, r1, d8
 80066d0:	2200      	movs	r2, #0
 80066d2:	f7f9 ff91 	bl	80005f8 <__aeabi_dmul>
 80066d6:	4b2c      	ldr	r3, [pc, #176]	; (8006788 <_dtoa_r+0x650>)
 80066d8:	ec41 0b18 	vmov	d8, r0, r1
 80066dc:	2200      	movs	r2, #0
 80066de:	4630      	mov	r0, r6
 80066e0:	4639      	mov	r1, r7
 80066e2:	f7f9 ff89 	bl	80005f8 <__aeabi_dmul>
 80066e6:	4606      	mov	r6, r0
 80066e8:	460f      	mov	r7, r1
 80066ea:	e7c4      	b.n	8006676 <_dtoa_r+0x53e>
 80066ec:	ec51 0b17 	vmov	r0, r1, d7
 80066f0:	f7f9 ff82 	bl	80005f8 <__aeabi_dmul>
 80066f4:	9b02      	ldr	r3, [sp, #8]
 80066f6:	9d00      	ldr	r5, [sp, #0]
 80066f8:	930c      	str	r3, [sp, #48]	; 0x30
 80066fa:	ec41 0b18 	vmov	d8, r0, r1
 80066fe:	4639      	mov	r1, r7
 8006700:	4630      	mov	r0, r6
 8006702:	f7fa fa29 	bl	8000b58 <__aeabi_d2iz>
 8006706:	9011      	str	r0, [sp, #68]	; 0x44
 8006708:	f7f9 ff0c 	bl	8000524 <__aeabi_i2d>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4630      	mov	r0, r6
 8006712:	4639      	mov	r1, r7
 8006714:	f7f9 fdb8 	bl	8000288 <__aeabi_dsub>
 8006718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800671a:	3330      	adds	r3, #48	; 0x30
 800671c:	f805 3b01 	strb.w	r3, [r5], #1
 8006720:	9b02      	ldr	r3, [sp, #8]
 8006722:	429d      	cmp	r5, r3
 8006724:	4606      	mov	r6, r0
 8006726:	460f      	mov	r7, r1
 8006728:	f04f 0200 	mov.w	r2, #0
 800672c:	d134      	bne.n	8006798 <_dtoa_r+0x660>
 800672e:	4b19      	ldr	r3, [pc, #100]	; (8006794 <_dtoa_r+0x65c>)
 8006730:	ec51 0b18 	vmov	r0, r1, d8
 8006734:	f7f9 fdaa 	bl	800028c <__adddf3>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4630      	mov	r0, r6
 800673e:	4639      	mov	r1, r7
 8006740:	f7fa f9ea 	bl	8000b18 <__aeabi_dcmpgt>
 8006744:	2800      	cmp	r0, #0
 8006746:	d175      	bne.n	8006834 <_dtoa_r+0x6fc>
 8006748:	ec53 2b18 	vmov	r2, r3, d8
 800674c:	4911      	ldr	r1, [pc, #68]	; (8006794 <_dtoa_r+0x65c>)
 800674e:	2000      	movs	r0, #0
 8006750:	f7f9 fd9a 	bl	8000288 <__aeabi_dsub>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4630      	mov	r0, r6
 800675a:	4639      	mov	r1, r7
 800675c:	f7fa f9be 	bl	8000adc <__aeabi_dcmplt>
 8006760:	2800      	cmp	r0, #0
 8006762:	f43f af27 	beq.w	80065b4 <_dtoa_r+0x47c>
 8006766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006768:	1e6b      	subs	r3, r5, #1
 800676a:	930c      	str	r3, [sp, #48]	; 0x30
 800676c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006770:	2b30      	cmp	r3, #48	; 0x30
 8006772:	d0f8      	beq.n	8006766 <_dtoa_r+0x62e>
 8006774:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006778:	e04a      	b.n	8006810 <_dtoa_r+0x6d8>
 800677a:	bf00      	nop
 800677c:	08008190 	.word	0x08008190
 8006780:	08008168 	.word	0x08008168
 8006784:	3ff00000 	.word	0x3ff00000
 8006788:	40240000 	.word	0x40240000
 800678c:	401c0000 	.word	0x401c0000
 8006790:	40140000 	.word	0x40140000
 8006794:	3fe00000 	.word	0x3fe00000
 8006798:	4baf      	ldr	r3, [pc, #700]	; (8006a58 <_dtoa_r+0x920>)
 800679a:	f7f9 ff2d 	bl	80005f8 <__aeabi_dmul>
 800679e:	4606      	mov	r6, r0
 80067a0:	460f      	mov	r7, r1
 80067a2:	e7ac      	b.n	80066fe <_dtoa_r+0x5c6>
 80067a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067a8:	9d00      	ldr	r5, [sp, #0]
 80067aa:	4642      	mov	r2, r8
 80067ac:	464b      	mov	r3, r9
 80067ae:	4630      	mov	r0, r6
 80067b0:	4639      	mov	r1, r7
 80067b2:	f7fa f84b 	bl	800084c <__aeabi_ddiv>
 80067b6:	f7fa f9cf 	bl	8000b58 <__aeabi_d2iz>
 80067ba:	9002      	str	r0, [sp, #8]
 80067bc:	f7f9 feb2 	bl	8000524 <__aeabi_i2d>
 80067c0:	4642      	mov	r2, r8
 80067c2:	464b      	mov	r3, r9
 80067c4:	f7f9 ff18 	bl	80005f8 <__aeabi_dmul>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4630      	mov	r0, r6
 80067ce:	4639      	mov	r1, r7
 80067d0:	f7f9 fd5a 	bl	8000288 <__aeabi_dsub>
 80067d4:	9e02      	ldr	r6, [sp, #8]
 80067d6:	9f01      	ldr	r7, [sp, #4]
 80067d8:	3630      	adds	r6, #48	; 0x30
 80067da:	f805 6b01 	strb.w	r6, [r5], #1
 80067de:	9e00      	ldr	r6, [sp, #0]
 80067e0:	1bae      	subs	r6, r5, r6
 80067e2:	42b7      	cmp	r7, r6
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	d137      	bne.n	800685a <_dtoa_r+0x722>
 80067ea:	f7f9 fd4f 	bl	800028c <__adddf3>
 80067ee:	4642      	mov	r2, r8
 80067f0:	464b      	mov	r3, r9
 80067f2:	4606      	mov	r6, r0
 80067f4:	460f      	mov	r7, r1
 80067f6:	f7fa f98f 	bl	8000b18 <__aeabi_dcmpgt>
 80067fa:	b9c8      	cbnz	r0, 8006830 <_dtoa_r+0x6f8>
 80067fc:	4642      	mov	r2, r8
 80067fe:	464b      	mov	r3, r9
 8006800:	4630      	mov	r0, r6
 8006802:	4639      	mov	r1, r7
 8006804:	f7fa f960 	bl	8000ac8 <__aeabi_dcmpeq>
 8006808:	b110      	cbz	r0, 8006810 <_dtoa_r+0x6d8>
 800680a:	9b02      	ldr	r3, [sp, #8]
 800680c:	07d9      	lsls	r1, r3, #31
 800680e:	d40f      	bmi.n	8006830 <_dtoa_r+0x6f8>
 8006810:	4620      	mov	r0, r4
 8006812:	4659      	mov	r1, fp
 8006814:	f000 fcf6 	bl	8007204 <_Bfree>
 8006818:	2300      	movs	r3, #0
 800681a:	702b      	strb	r3, [r5, #0]
 800681c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800681e:	f10a 0001 	add.w	r0, sl, #1
 8006822:	6018      	str	r0, [r3, #0]
 8006824:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006826:	2b00      	cmp	r3, #0
 8006828:	f43f acd8 	beq.w	80061dc <_dtoa_r+0xa4>
 800682c:	601d      	str	r5, [r3, #0]
 800682e:	e4d5      	b.n	80061dc <_dtoa_r+0xa4>
 8006830:	f8cd a01c 	str.w	sl, [sp, #28]
 8006834:	462b      	mov	r3, r5
 8006836:	461d      	mov	r5, r3
 8006838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800683c:	2a39      	cmp	r2, #57	; 0x39
 800683e:	d108      	bne.n	8006852 <_dtoa_r+0x71a>
 8006840:	9a00      	ldr	r2, [sp, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d1f7      	bne.n	8006836 <_dtoa_r+0x6fe>
 8006846:	9a07      	ldr	r2, [sp, #28]
 8006848:	9900      	ldr	r1, [sp, #0]
 800684a:	3201      	adds	r2, #1
 800684c:	9207      	str	r2, [sp, #28]
 800684e:	2230      	movs	r2, #48	; 0x30
 8006850:	700a      	strb	r2, [r1, #0]
 8006852:	781a      	ldrb	r2, [r3, #0]
 8006854:	3201      	adds	r2, #1
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	e78c      	b.n	8006774 <_dtoa_r+0x63c>
 800685a:	4b7f      	ldr	r3, [pc, #508]	; (8006a58 <_dtoa_r+0x920>)
 800685c:	2200      	movs	r2, #0
 800685e:	f7f9 fecb 	bl	80005f8 <__aeabi_dmul>
 8006862:	2200      	movs	r2, #0
 8006864:	2300      	movs	r3, #0
 8006866:	4606      	mov	r6, r0
 8006868:	460f      	mov	r7, r1
 800686a:	f7fa f92d 	bl	8000ac8 <__aeabi_dcmpeq>
 800686e:	2800      	cmp	r0, #0
 8006870:	d09b      	beq.n	80067aa <_dtoa_r+0x672>
 8006872:	e7cd      	b.n	8006810 <_dtoa_r+0x6d8>
 8006874:	9a08      	ldr	r2, [sp, #32]
 8006876:	2a00      	cmp	r2, #0
 8006878:	f000 80c4 	beq.w	8006a04 <_dtoa_r+0x8cc>
 800687c:	9a05      	ldr	r2, [sp, #20]
 800687e:	2a01      	cmp	r2, #1
 8006880:	f300 80a8 	bgt.w	80069d4 <_dtoa_r+0x89c>
 8006884:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006886:	2a00      	cmp	r2, #0
 8006888:	f000 80a0 	beq.w	80069cc <_dtoa_r+0x894>
 800688c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006890:	9e06      	ldr	r6, [sp, #24]
 8006892:	4645      	mov	r5, r8
 8006894:	9a04      	ldr	r2, [sp, #16]
 8006896:	2101      	movs	r1, #1
 8006898:	441a      	add	r2, r3
 800689a:	4620      	mov	r0, r4
 800689c:	4498      	add	r8, r3
 800689e:	9204      	str	r2, [sp, #16]
 80068a0:	f000 fd6c 	bl	800737c <__i2b>
 80068a4:	4607      	mov	r7, r0
 80068a6:	2d00      	cmp	r5, #0
 80068a8:	dd0b      	ble.n	80068c2 <_dtoa_r+0x78a>
 80068aa:	9b04      	ldr	r3, [sp, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	dd08      	ble.n	80068c2 <_dtoa_r+0x78a>
 80068b0:	42ab      	cmp	r3, r5
 80068b2:	9a04      	ldr	r2, [sp, #16]
 80068b4:	bfa8      	it	ge
 80068b6:	462b      	movge	r3, r5
 80068b8:	eba8 0803 	sub.w	r8, r8, r3
 80068bc:	1aed      	subs	r5, r5, r3
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	9304      	str	r3, [sp, #16]
 80068c2:	9b06      	ldr	r3, [sp, #24]
 80068c4:	b1fb      	cbz	r3, 8006906 <_dtoa_r+0x7ce>
 80068c6:	9b08      	ldr	r3, [sp, #32]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 809f 	beq.w	8006a0c <_dtoa_r+0x8d4>
 80068ce:	2e00      	cmp	r6, #0
 80068d0:	dd11      	ble.n	80068f6 <_dtoa_r+0x7be>
 80068d2:	4639      	mov	r1, r7
 80068d4:	4632      	mov	r2, r6
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 fe0c 	bl	80074f4 <__pow5mult>
 80068dc:	465a      	mov	r2, fp
 80068de:	4601      	mov	r1, r0
 80068e0:	4607      	mov	r7, r0
 80068e2:	4620      	mov	r0, r4
 80068e4:	f000 fd60 	bl	80073a8 <__multiply>
 80068e8:	4659      	mov	r1, fp
 80068ea:	9007      	str	r0, [sp, #28]
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 fc89 	bl	8007204 <_Bfree>
 80068f2:	9b07      	ldr	r3, [sp, #28]
 80068f4:	469b      	mov	fp, r3
 80068f6:	9b06      	ldr	r3, [sp, #24]
 80068f8:	1b9a      	subs	r2, r3, r6
 80068fa:	d004      	beq.n	8006906 <_dtoa_r+0x7ce>
 80068fc:	4659      	mov	r1, fp
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 fdf8 	bl	80074f4 <__pow5mult>
 8006904:	4683      	mov	fp, r0
 8006906:	2101      	movs	r1, #1
 8006908:	4620      	mov	r0, r4
 800690a:	f000 fd37 	bl	800737c <__i2b>
 800690e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006910:	2b00      	cmp	r3, #0
 8006912:	4606      	mov	r6, r0
 8006914:	dd7c      	ble.n	8006a10 <_dtoa_r+0x8d8>
 8006916:	461a      	mov	r2, r3
 8006918:	4601      	mov	r1, r0
 800691a:	4620      	mov	r0, r4
 800691c:	f000 fdea 	bl	80074f4 <__pow5mult>
 8006920:	9b05      	ldr	r3, [sp, #20]
 8006922:	2b01      	cmp	r3, #1
 8006924:	4606      	mov	r6, r0
 8006926:	dd76      	ble.n	8006a16 <_dtoa_r+0x8de>
 8006928:	2300      	movs	r3, #0
 800692a:	9306      	str	r3, [sp, #24]
 800692c:	6933      	ldr	r3, [r6, #16]
 800692e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006932:	6918      	ldr	r0, [r3, #16]
 8006934:	f000 fcd2 	bl	80072dc <__hi0bits>
 8006938:	f1c0 0020 	rsb	r0, r0, #32
 800693c:	9b04      	ldr	r3, [sp, #16]
 800693e:	4418      	add	r0, r3
 8006940:	f010 001f 	ands.w	r0, r0, #31
 8006944:	f000 8086 	beq.w	8006a54 <_dtoa_r+0x91c>
 8006948:	f1c0 0320 	rsb	r3, r0, #32
 800694c:	2b04      	cmp	r3, #4
 800694e:	dd7f      	ble.n	8006a50 <_dtoa_r+0x918>
 8006950:	f1c0 001c 	rsb	r0, r0, #28
 8006954:	9b04      	ldr	r3, [sp, #16]
 8006956:	4403      	add	r3, r0
 8006958:	4480      	add	r8, r0
 800695a:	4405      	add	r5, r0
 800695c:	9304      	str	r3, [sp, #16]
 800695e:	f1b8 0f00 	cmp.w	r8, #0
 8006962:	dd05      	ble.n	8006970 <_dtoa_r+0x838>
 8006964:	4659      	mov	r1, fp
 8006966:	4642      	mov	r2, r8
 8006968:	4620      	mov	r0, r4
 800696a:	f000 fe1d 	bl	80075a8 <__lshift>
 800696e:	4683      	mov	fp, r0
 8006970:	9b04      	ldr	r3, [sp, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	dd05      	ble.n	8006982 <_dtoa_r+0x84a>
 8006976:	4631      	mov	r1, r6
 8006978:	461a      	mov	r2, r3
 800697a:	4620      	mov	r0, r4
 800697c:	f000 fe14 	bl	80075a8 <__lshift>
 8006980:	4606      	mov	r6, r0
 8006982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	d069      	beq.n	8006a5c <_dtoa_r+0x924>
 8006988:	4631      	mov	r1, r6
 800698a:	4658      	mov	r0, fp
 800698c:	f000 fe78 	bl	8007680 <__mcmp>
 8006990:	2800      	cmp	r0, #0
 8006992:	da63      	bge.n	8006a5c <_dtoa_r+0x924>
 8006994:	2300      	movs	r3, #0
 8006996:	4659      	mov	r1, fp
 8006998:	220a      	movs	r2, #10
 800699a:	4620      	mov	r0, r4
 800699c:	f000 fc54 	bl	8007248 <__multadd>
 80069a0:	9b08      	ldr	r3, [sp, #32]
 80069a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80069a6:	4683      	mov	fp, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 818f 	beq.w	8006ccc <_dtoa_r+0xb94>
 80069ae:	4639      	mov	r1, r7
 80069b0:	2300      	movs	r3, #0
 80069b2:	220a      	movs	r2, #10
 80069b4:	4620      	mov	r0, r4
 80069b6:	f000 fc47 	bl	8007248 <__multadd>
 80069ba:	f1b9 0f00 	cmp.w	r9, #0
 80069be:	4607      	mov	r7, r0
 80069c0:	f300 808e 	bgt.w	8006ae0 <_dtoa_r+0x9a8>
 80069c4:	9b05      	ldr	r3, [sp, #20]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	dc50      	bgt.n	8006a6c <_dtoa_r+0x934>
 80069ca:	e089      	b.n	8006ae0 <_dtoa_r+0x9a8>
 80069cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069d2:	e75d      	b.n	8006890 <_dtoa_r+0x758>
 80069d4:	9b01      	ldr	r3, [sp, #4]
 80069d6:	1e5e      	subs	r6, r3, #1
 80069d8:	9b06      	ldr	r3, [sp, #24]
 80069da:	42b3      	cmp	r3, r6
 80069dc:	bfbf      	itttt	lt
 80069de:	9b06      	ldrlt	r3, [sp, #24]
 80069e0:	9606      	strlt	r6, [sp, #24]
 80069e2:	1af2      	sublt	r2, r6, r3
 80069e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80069e6:	bfb6      	itet	lt
 80069e8:	189b      	addlt	r3, r3, r2
 80069ea:	1b9e      	subge	r6, r3, r6
 80069ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80069ee:	9b01      	ldr	r3, [sp, #4]
 80069f0:	bfb8      	it	lt
 80069f2:	2600      	movlt	r6, #0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	bfb5      	itete	lt
 80069f8:	eba8 0503 	sublt.w	r5, r8, r3
 80069fc:	9b01      	ldrge	r3, [sp, #4]
 80069fe:	2300      	movlt	r3, #0
 8006a00:	4645      	movge	r5, r8
 8006a02:	e747      	b.n	8006894 <_dtoa_r+0x75c>
 8006a04:	9e06      	ldr	r6, [sp, #24]
 8006a06:	9f08      	ldr	r7, [sp, #32]
 8006a08:	4645      	mov	r5, r8
 8006a0a:	e74c      	b.n	80068a6 <_dtoa_r+0x76e>
 8006a0c:	9a06      	ldr	r2, [sp, #24]
 8006a0e:	e775      	b.n	80068fc <_dtoa_r+0x7c4>
 8006a10:	9b05      	ldr	r3, [sp, #20]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	dc18      	bgt.n	8006a48 <_dtoa_r+0x910>
 8006a16:	9b02      	ldr	r3, [sp, #8]
 8006a18:	b9b3      	cbnz	r3, 8006a48 <_dtoa_r+0x910>
 8006a1a:	9b03      	ldr	r3, [sp, #12]
 8006a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a20:	b9a3      	cbnz	r3, 8006a4c <_dtoa_r+0x914>
 8006a22:	9b03      	ldr	r3, [sp, #12]
 8006a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a28:	0d1b      	lsrs	r3, r3, #20
 8006a2a:	051b      	lsls	r3, r3, #20
 8006a2c:	b12b      	cbz	r3, 8006a3a <_dtoa_r+0x902>
 8006a2e:	9b04      	ldr	r3, [sp, #16]
 8006a30:	3301      	adds	r3, #1
 8006a32:	9304      	str	r3, [sp, #16]
 8006a34:	f108 0801 	add.w	r8, r8, #1
 8006a38:	2301      	movs	r3, #1
 8006a3a:	9306      	str	r3, [sp, #24]
 8006a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f47f af74 	bne.w	800692c <_dtoa_r+0x7f4>
 8006a44:	2001      	movs	r0, #1
 8006a46:	e779      	b.n	800693c <_dtoa_r+0x804>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e7f6      	b.n	8006a3a <_dtoa_r+0x902>
 8006a4c:	9b02      	ldr	r3, [sp, #8]
 8006a4e:	e7f4      	b.n	8006a3a <_dtoa_r+0x902>
 8006a50:	d085      	beq.n	800695e <_dtoa_r+0x826>
 8006a52:	4618      	mov	r0, r3
 8006a54:	301c      	adds	r0, #28
 8006a56:	e77d      	b.n	8006954 <_dtoa_r+0x81c>
 8006a58:	40240000 	.word	0x40240000
 8006a5c:	9b01      	ldr	r3, [sp, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	dc38      	bgt.n	8006ad4 <_dtoa_r+0x99c>
 8006a62:	9b05      	ldr	r3, [sp, #20]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	dd35      	ble.n	8006ad4 <_dtoa_r+0x99c>
 8006a68:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006a6c:	f1b9 0f00 	cmp.w	r9, #0
 8006a70:	d10d      	bne.n	8006a8e <_dtoa_r+0x956>
 8006a72:	4631      	mov	r1, r6
 8006a74:	464b      	mov	r3, r9
 8006a76:	2205      	movs	r2, #5
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f000 fbe5 	bl	8007248 <__multadd>
 8006a7e:	4601      	mov	r1, r0
 8006a80:	4606      	mov	r6, r0
 8006a82:	4658      	mov	r0, fp
 8006a84:	f000 fdfc 	bl	8007680 <__mcmp>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	f73f adbd 	bgt.w	8006608 <_dtoa_r+0x4d0>
 8006a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a90:	9d00      	ldr	r5, [sp, #0]
 8006a92:	ea6f 0a03 	mvn.w	sl, r3
 8006a96:	f04f 0800 	mov.w	r8, #0
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f000 fbb1 	bl	8007204 <_Bfree>
 8006aa2:	2f00      	cmp	r7, #0
 8006aa4:	f43f aeb4 	beq.w	8006810 <_dtoa_r+0x6d8>
 8006aa8:	f1b8 0f00 	cmp.w	r8, #0
 8006aac:	d005      	beq.n	8006aba <_dtoa_r+0x982>
 8006aae:	45b8      	cmp	r8, r7
 8006ab0:	d003      	beq.n	8006aba <_dtoa_r+0x982>
 8006ab2:	4641      	mov	r1, r8
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f000 fba5 	bl	8007204 <_Bfree>
 8006aba:	4639      	mov	r1, r7
 8006abc:	4620      	mov	r0, r4
 8006abe:	f000 fba1 	bl	8007204 <_Bfree>
 8006ac2:	e6a5      	b.n	8006810 <_dtoa_r+0x6d8>
 8006ac4:	2600      	movs	r6, #0
 8006ac6:	4637      	mov	r7, r6
 8006ac8:	e7e1      	b.n	8006a8e <_dtoa_r+0x956>
 8006aca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006acc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006ad0:	4637      	mov	r7, r6
 8006ad2:	e599      	b.n	8006608 <_dtoa_r+0x4d0>
 8006ad4:	9b08      	ldr	r3, [sp, #32]
 8006ad6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 80fd 	beq.w	8006cda <_dtoa_r+0xba2>
 8006ae0:	2d00      	cmp	r5, #0
 8006ae2:	dd05      	ble.n	8006af0 <_dtoa_r+0x9b8>
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	462a      	mov	r2, r5
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 fd5d 	bl	80075a8 <__lshift>
 8006aee:	4607      	mov	r7, r0
 8006af0:	9b06      	ldr	r3, [sp, #24]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d05c      	beq.n	8006bb0 <_dtoa_r+0xa78>
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	4620      	mov	r0, r4
 8006afa:	f000 fb43 	bl	8007184 <_Balloc>
 8006afe:	4605      	mov	r5, r0
 8006b00:	b928      	cbnz	r0, 8006b0e <_dtoa_r+0x9d6>
 8006b02:	4b80      	ldr	r3, [pc, #512]	; (8006d04 <_dtoa_r+0xbcc>)
 8006b04:	4602      	mov	r2, r0
 8006b06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b0a:	f7ff bb2e 	b.w	800616a <_dtoa_r+0x32>
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	3202      	adds	r2, #2
 8006b12:	0092      	lsls	r2, r2, #2
 8006b14:	f107 010c 	add.w	r1, r7, #12
 8006b18:	300c      	adds	r0, #12
 8006b1a:	f000 fb25 	bl	8007168 <memcpy>
 8006b1e:	2201      	movs	r2, #1
 8006b20:	4629      	mov	r1, r5
 8006b22:	4620      	mov	r0, r4
 8006b24:	f000 fd40 	bl	80075a8 <__lshift>
 8006b28:	9b00      	ldr	r3, [sp, #0]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	9b00      	ldr	r3, [sp, #0]
 8006b30:	444b      	add	r3, r9
 8006b32:	9307      	str	r3, [sp, #28]
 8006b34:	9b02      	ldr	r3, [sp, #8]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	46b8      	mov	r8, r7
 8006b3c:	9306      	str	r3, [sp, #24]
 8006b3e:	4607      	mov	r7, r0
 8006b40:	9b01      	ldr	r3, [sp, #4]
 8006b42:	4631      	mov	r1, r6
 8006b44:	3b01      	subs	r3, #1
 8006b46:	4658      	mov	r0, fp
 8006b48:	9302      	str	r3, [sp, #8]
 8006b4a:	f7ff fa67 	bl	800601c <quorem>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	3330      	adds	r3, #48	; 0x30
 8006b52:	9004      	str	r0, [sp, #16]
 8006b54:	4641      	mov	r1, r8
 8006b56:	4658      	mov	r0, fp
 8006b58:	9308      	str	r3, [sp, #32]
 8006b5a:	f000 fd91 	bl	8007680 <__mcmp>
 8006b5e:	463a      	mov	r2, r7
 8006b60:	4681      	mov	r9, r0
 8006b62:	4631      	mov	r1, r6
 8006b64:	4620      	mov	r0, r4
 8006b66:	f000 fda7 	bl	80076b8 <__mdiff>
 8006b6a:	68c2      	ldr	r2, [r0, #12]
 8006b6c:	9b08      	ldr	r3, [sp, #32]
 8006b6e:	4605      	mov	r5, r0
 8006b70:	bb02      	cbnz	r2, 8006bb4 <_dtoa_r+0xa7c>
 8006b72:	4601      	mov	r1, r0
 8006b74:	4658      	mov	r0, fp
 8006b76:	f000 fd83 	bl	8007680 <__mcmp>
 8006b7a:	9b08      	ldr	r3, [sp, #32]
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	4629      	mov	r1, r5
 8006b80:	4620      	mov	r0, r4
 8006b82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006b86:	f000 fb3d 	bl	8007204 <_Bfree>
 8006b8a:	9b05      	ldr	r3, [sp, #20]
 8006b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b8e:	9d01      	ldr	r5, [sp, #4]
 8006b90:	ea43 0102 	orr.w	r1, r3, r2
 8006b94:	9b06      	ldr	r3, [sp, #24]
 8006b96:	430b      	orrs	r3, r1
 8006b98:	9b08      	ldr	r3, [sp, #32]
 8006b9a:	d10d      	bne.n	8006bb8 <_dtoa_r+0xa80>
 8006b9c:	2b39      	cmp	r3, #57	; 0x39
 8006b9e:	d029      	beq.n	8006bf4 <_dtoa_r+0xabc>
 8006ba0:	f1b9 0f00 	cmp.w	r9, #0
 8006ba4:	dd01      	ble.n	8006baa <_dtoa_r+0xa72>
 8006ba6:	9b04      	ldr	r3, [sp, #16]
 8006ba8:	3331      	adds	r3, #49	; 0x31
 8006baa:	9a02      	ldr	r2, [sp, #8]
 8006bac:	7013      	strb	r3, [r2, #0]
 8006bae:	e774      	b.n	8006a9a <_dtoa_r+0x962>
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	e7b9      	b.n	8006b28 <_dtoa_r+0x9f0>
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	e7e2      	b.n	8006b7e <_dtoa_r+0xa46>
 8006bb8:	f1b9 0f00 	cmp.w	r9, #0
 8006bbc:	db06      	blt.n	8006bcc <_dtoa_r+0xa94>
 8006bbe:	9905      	ldr	r1, [sp, #20]
 8006bc0:	ea41 0909 	orr.w	r9, r1, r9
 8006bc4:	9906      	ldr	r1, [sp, #24]
 8006bc6:	ea59 0101 	orrs.w	r1, r9, r1
 8006bca:	d120      	bne.n	8006c0e <_dtoa_r+0xad6>
 8006bcc:	2a00      	cmp	r2, #0
 8006bce:	ddec      	ble.n	8006baa <_dtoa_r+0xa72>
 8006bd0:	4659      	mov	r1, fp
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	f000 fce6 	bl	80075a8 <__lshift>
 8006bdc:	4631      	mov	r1, r6
 8006bde:	4683      	mov	fp, r0
 8006be0:	f000 fd4e 	bl	8007680 <__mcmp>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	9b01      	ldr	r3, [sp, #4]
 8006be8:	dc02      	bgt.n	8006bf0 <_dtoa_r+0xab8>
 8006bea:	d1de      	bne.n	8006baa <_dtoa_r+0xa72>
 8006bec:	07da      	lsls	r2, r3, #31
 8006bee:	d5dc      	bpl.n	8006baa <_dtoa_r+0xa72>
 8006bf0:	2b39      	cmp	r3, #57	; 0x39
 8006bf2:	d1d8      	bne.n	8006ba6 <_dtoa_r+0xa6e>
 8006bf4:	9a02      	ldr	r2, [sp, #8]
 8006bf6:	2339      	movs	r3, #57	; 0x39
 8006bf8:	7013      	strb	r3, [r2, #0]
 8006bfa:	462b      	mov	r3, r5
 8006bfc:	461d      	mov	r5, r3
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c04:	2a39      	cmp	r2, #57	; 0x39
 8006c06:	d050      	beq.n	8006caa <_dtoa_r+0xb72>
 8006c08:	3201      	adds	r2, #1
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	e745      	b.n	8006a9a <_dtoa_r+0x962>
 8006c0e:	2a00      	cmp	r2, #0
 8006c10:	dd03      	ble.n	8006c1a <_dtoa_r+0xae2>
 8006c12:	2b39      	cmp	r3, #57	; 0x39
 8006c14:	d0ee      	beq.n	8006bf4 <_dtoa_r+0xabc>
 8006c16:	3301      	adds	r3, #1
 8006c18:	e7c7      	b.n	8006baa <_dtoa_r+0xa72>
 8006c1a:	9a01      	ldr	r2, [sp, #4]
 8006c1c:	9907      	ldr	r1, [sp, #28]
 8006c1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c22:	428a      	cmp	r2, r1
 8006c24:	d02a      	beq.n	8006c7c <_dtoa_r+0xb44>
 8006c26:	4659      	mov	r1, fp
 8006c28:	2300      	movs	r3, #0
 8006c2a:	220a      	movs	r2, #10
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f000 fb0b 	bl	8007248 <__multadd>
 8006c32:	45b8      	cmp	r8, r7
 8006c34:	4683      	mov	fp, r0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	f04f 020a 	mov.w	r2, #10
 8006c3e:	4641      	mov	r1, r8
 8006c40:	4620      	mov	r0, r4
 8006c42:	d107      	bne.n	8006c54 <_dtoa_r+0xb1c>
 8006c44:	f000 fb00 	bl	8007248 <__multadd>
 8006c48:	4680      	mov	r8, r0
 8006c4a:	4607      	mov	r7, r0
 8006c4c:	9b01      	ldr	r3, [sp, #4]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	e775      	b.n	8006b40 <_dtoa_r+0xa08>
 8006c54:	f000 faf8 	bl	8007248 <__multadd>
 8006c58:	4639      	mov	r1, r7
 8006c5a:	4680      	mov	r8, r0
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	220a      	movs	r2, #10
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 faf1 	bl	8007248 <__multadd>
 8006c66:	4607      	mov	r7, r0
 8006c68:	e7f0      	b.n	8006c4c <_dtoa_r+0xb14>
 8006c6a:	f1b9 0f00 	cmp.w	r9, #0
 8006c6e:	9a00      	ldr	r2, [sp, #0]
 8006c70:	bfcc      	ite	gt
 8006c72:	464d      	movgt	r5, r9
 8006c74:	2501      	movle	r5, #1
 8006c76:	4415      	add	r5, r2
 8006c78:	f04f 0800 	mov.w	r8, #0
 8006c7c:	4659      	mov	r1, fp
 8006c7e:	2201      	movs	r2, #1
 8006c80:	4620      	mov	r0, r4
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	f000 fc90 	bl	80075a8 <__lshift>
 8006c88:	4631      	mov	r1, r6
 8006c8a:	4683      	mov	fp, r0
 8006c8c:	f000 fcf8 	bl	8007680 <__mcmp>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	dcb2      	bgt.n	8006bfa <_dtoa_r+0xac2>
 8006c94:	d102      	bne.n	8006c9c <_dtoa_r+0xb64>
 8006c96:	9b01      	ldr	r3, [sp, #4]
 8006c98:	07db      	lsls	r3, r3, #31
 8006c9a:	d4ae      	bmi.n	8006bfa <_dtoa_r+0xac2>
 8006c9c:	462b      	mov	r3, r5
 8006c9e:	461d      	mov	r5, r3
 8006ca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ca4:	2a30      	cmp	r2, #48	; 0x30
 8006ca6:	d0fa      	beq.n	8006c9e <_dtoa_r+0xb66>
 8006ca8:	e6f7      	b.n	8006a9a <_dtoa_r+0x962>
 8006caa:	9a00      	ldr	r2, [sp, #0]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d1a5      	bne.n	8006bfc <_dtoa_r+0xac4>
 8006cb0:	f10a 0a01 	add.w	sl, sl, #1
 8006cb4:	2331      	movs	r3, #49	; 0x31
 8006cb6:	e779      	b.n	8006bac <_dtoa_r+0xa74>
 8006cb8:	4b13      	ldr	r3, [pc, #76]	; (8006d08 <_dtoa_r+0xbd0>)
 8006cba:	f7ff baaf 	b.w	800621c <_dtoa_r+0xe4>
 8006cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f47f aa86 	bne.w	80061d2 <_dtoa_r+0x9a>
 8006cc6:	4b11      	ldr	r3, [pc, #68]	; (8006d0c <_dtoa_r+0xbd4>)
 8006cc8:	f7ff baa8 	b.w	800621c <_dtoa_r+0xe4>
 8006ccc:	f1b9 0f00 	cmp.w	r9, #0
 8006cd0:	dc03      	bgt.n	8006cda <_dtoa_r+0xba2>
 8006cd2:	9b05      	ldr	r3, [sp, #20]
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	f73f aec9 	bgt.w	8006a6c <_dtoa_r+0x934>
 8006cda:	9d00      	ldr	r5, [sp, #0]
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4658      	mov	r0, fp
 8006ce0:	f7ff f99c 	bl	800601c <quorem>
 8006ce4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006ce8:	f805 3b01 	strb.w	r3, [r5], #1
 8006cec:	9a00      	ldr	r2, [sp, #0]
 8006cee:	1aaa      	subs	r2, r5, r2
 8006cf0:	4591      	cmp	r9, r2
 8006cf2:	ddba      	ble.n	8006c6a <_dtoa_r+0xb32>
 8006cf4:	4659      	mov	r1, fp
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	220a      	movs	r2, #10
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f000 faa4 	bl	8007248 <__multadd>
 8006d00:	4683      	mov	fp, r0
 8006d02:	e7eb      	b.n	8006cdc <_dtoa_r+0xba4>
 8006d04:	08008093 	.word	0x08008093
 8006d08:	08007fec 	.word	0x08007fec
 8006d0c:	08008010 	.word	0x08008010

08006d10 <__sflush_r>:
 8006d10:	898a      	ldrh	r2, [r1, #12]
 8006d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d16:	4605      	mov	r5, r0
 8006d18:	0710      	lsls	r0, r2, #28
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	d458      	bmi.n	8006dd0 <__sflush_r+0xc0>
 8006d1e:	684b      	ldr	r3, [r1, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	dc05      	bgt.n	8006d30 <__sflush_r+0x20>
 8006d24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	dc02      	bgt.n	8006d30 <__sflush_r+0x20>
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d32:	2e00      	cmp	r6, #0
 8006d34:	d0f9      	beq.n	8006d2a <__sflush_r+0x1a>
 8006d36:	2300      	movs	r3, #0
 8006d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d3c:	682f      	ldr	r7, [r5, #0]
 8006d3e:	602b      	str	r3, [r5, #0]
 8006d40:	d032      	beq.n	8006da8 <__sflush_r+0x98>
 8006d42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	075a      	lsls	r2, r3, #29
 8006d48:	d505      	bpl.n	8006d56 <__sflush_r+0x46>
 8006d4a:	6863      	ldr	r3, [r4, #4]
 8006d4c:	1ac0      	subs	r0, r0, r3
 8006d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d50:	b10b      	cbz	r3, 8006d56 <__sflush_r+0x46>
 8006d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d54:	1ac0      	subs	r0, r0, r3
 8006d56:	2300      	movs	r3, #0
 8006d58:	4602      	mov	r2, r0
 8006d5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d5c:	6a21      	ldr	r1, [r4, #32]
 8006d5e:	4628      	mov	r0, r5
 8006d60:	47b0      	blx	r6
 8006d62:	1c43      	adds	r3, r0, #1
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	d106      	bne.n	8006d76 <__sflush_r+0x66>
 8006d68:	6829      	ldr	r1, [r5, #0]
 8006d6a:	291d      	cmp	r1, #29
 8006d6c:	d82c      	bhi.n	8006dc8 <__sflush_r+0xb8>
 8006d6e:	4a2a      	ldr	r2, [pc, #168]	; (8006e18 <__sflush_r+0x108>)
 8006d70:	40ca      	lsrs	r2, r1
 8006d72:	07d6      	lsls	r6, r2, #31
 8006d74:	d528      	bpl.n	8006dc8 <__sflush_r+0xb8>
 8006d76:	2200      	movs	r2, #0
 8006d78:	6062      	str	r2, [r4, #4]
 8006d7a:	04d9      	lsls	r1, r3, #19
 8006d7c:	6922      	ldr	r2, [r4, #16]
 8006d7e:	6022      	str	r2, [r4, #0]
 8006d80:	d504      	bpl.n	8006d8c <__sflush_r+0x7c>
 8006d82:	1c42      	adds	r2, r0, #1
 8006d84:	d101      	bne.n	8006d8a <__sflush_r+0x7a>
 8006d86:	682b      	ldr	r3, [r5, #0]
 8006d88:	b903      	cbnz	r3, 8006d8c <__sflush_r+0x7c>
 8006d8a:	6560      	str	r0, [r4, #84]	; 0x54
 8006d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d8e:	602f      	str	r7, [r5, #0]
 8006d90:	2900      	cmp	r1, #0
 8006d92:	d0ca      	beq.n	8006d2a <__sflush_r+0x1a>
 8006d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d98:	4299      	cmp	r1, r3
 8006d9a:	d002      	beq.n	8006da2 <__sflush_r+0x92>
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	f000 fd7f 	bl	80078a0 <_free_r>
 8006da2:	2000      	movs	r0, #0
 8006da4:	6360      	str	r0, [r4, #52]	; 0x34
 8006da6:	e7c1      	b.n	8006d2c <__sflush_r+0x1c>
 8006da8:	6a21      	ldr	r1, [r4, #32]
 8006daa:	2301      	movs	r3, #1
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b0      	blx	r6
 8006db0:	1c41      	adds	r1, r0, #1
 8006db2:	d1c7      	bne.n	8006d44 <__sflush_r+0x34>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0c4      	beq.n	8006d44 <__sflush_r+0x34>
 8006dba:	2b1d      	cmp	r3, #29
 8006dbc:	d001      	beq.n	8006dc2 <__sflush_r+0xb2>
 8006dbe:	2b16      	cmp	r3, #22
 8006dc0:	d101      	bne.n	8006dc6 <__sflush_r+0xb6>
 8006dc2:	602f      	str	r7, [r5, #0]
 8006dc4:	e7b1      	b.n	8006d2a <__sflush_r+0x1a>
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dcc:	81a3      	strh	r3, [r4, #12]
 8006dce:	e7ad      	b.n	8006d2c <__sflush_r+0x1c>
 8006dd0:	690f      	ldr	r7, [r1, #16]
 8006dd2:	2f00      	cmp	r7, #0
 8006dd4:	d0a9      	beq.n	8006d2a <__sflush_r+0x1a>
 8006dd6:	0793      	lsls	r3, r2, #30
 8006dd8:	680e      	ldr	r6, [r1, #0]
 8006dda:	bf08      	it	eq
 8006ddc:	694b      	ldreq	r3, [r1, #20]
 8006dde:	600f      	str	r7, [r1, #0]
 8006de0:	bf18      	it	ne
 8006de2:	2300      	movne	r3, #0
 8006de4:	eba6 0807 	sub.w	r8, r6, r7
 8006de8:	608b      	str	r3, [r1, #8]
 8006dea:	f1b8 0f00 	cmp.w	r8, #0
 8006dee:	dd9c      	ble.n	8006d2a <__sflush_r+0x1a>
 8006df0:	6a21      	ldr	r1, [r4, #32]
 8006df2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006df4:	4643      	mov	r3, r8
 8006df6:	463a      	mov	r2, r7
 8006df8:	4628      	mov	r0, r5
 8006dfa:	47b0      	blx	r6
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	dc06      	bgt.n	8006e0e <__sflush_r+0xfe>
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e06:	81a3      	strh	r3, [r4, #12]
 8006e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e0c:	e78e      	b.n	8006d2c <__sflush_r+0x1c>
 8006e0e:	4407      	add	r7, r0
 8006e10:	eba8 0800 	sub.w	r8, r8, r0
 8006e14:	e7e9      	b.n	8006dea <__sflush_r+0xda>
 8006e16:	bf00      	nop
 8006e18:	20400001 	.word	0x20400001

08006e1c <_fflush_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	690b      	ldr	r3, [r1, #16]
 8006e20:	4605      	mov	r5, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	b913      	cbnz	r3, 8006e2c <_fflush_r+0x10>
 8006e26:	2500      	movs	r5, #0
 8006e28:	4628      	mov	r0, r5
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}
 8006e2c:	b118      	cbz	r0, 8006e36 <_fflush_r+0x1a>
 8006e2e:	6983      	ldr	r3, [r0, #24]
 8006e30:	b90b      	cbnz	r3, 8006e36 <_fflush_r+0x1a>
 8006e32:	f000 f887 	bl	8006f44 <__sinit>
 8006e36:	4b14      	ldr	r3, [pc, #80]	; (8006e88 <_fflush_r+0x6c>)
 8006e38:	429c      	cmp	r4, r3
 8006e3a:	d11b      	bne.n	8006e74 <_fflush_r+0x58>
 8006e3c:	686c      	ldr	r4, [r5, #4]
 8006e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0ef      	beq.n	8006e26 <_fflush_r+0xa>
 8006e46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e48:	07d0      	lsls	r0, r2, #31
 8006e4a:	d404      	bmi.n	8006e56 <_fflush_r+0x3a>
 8006e4c:	0599      	lsls	r1, r3, #22
 8006e4e:	d402      	bmi.n	8006e56 <_fflush_r+0x3a>
 8006e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e52:	f000 f91a 	bl	800708a <__retarget_lock_acquire_recursive>
 8006e56:	4628      	mov	r0, r5
 8006e58:	4621      	mov	r1, r4
 8006e5a:	f7ff ff59 	bl	8006d10 <__sflush_r>
 8006e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e60:	07da      	lsls	r2, r3, #31
 8006e62:	4605      	mov	r5, r0
 8006e64:	d4e0      	bmi.n	8006e28 <_fflush_r+0xc>
 8006e66:	89a3      	ldrh	r3, [r4, #12]
 8006e68:	059b      	lsls	r3, r3, #22
 8006e6a:	d4dd      	bmi.n	8006e28 <_fflush_r+0xc>
 8006e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e6e:	f000 f90d 	bl	800708c <__retarget_lock_release_recursive>
 8006e72:	e7d9      	b.n	8006e28 <_fflush_r+0xc>
 8006e74:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <_fflush_r+0x70>)
 8006e76:	429c      	cmp	r4, r3
 8006e78:	d101      	bne.n	8006e7e <_fflush_r+0x62>
 8006e7a:	68ac      	ldr	r4, [r5, #8]
 8006e7c:	e7df      	b.n	8006e3e <_fflush_r+0x22>
 8006e7e:	4b04      	ldr	r3, [pc, #16]	; (8006e90 <_fflush_r+0x74>)
 8006e80:	429c      	cmp	r4, r3
 8006e82:	bf08      	it	eq
 8006e84:	68ec      	ldreq	r4, [r5, #12]
 8006e86:	e7da      	b.n	8006e3e <_fflush_r+0x22>
 8006e88:	080080c4 	.word	0x080080c4
 8006e8c:	080080e4 	.word	0x080080e4
 8006e90:	080080a4 	.word	0x080080a4

08006e94 <std>:
 8006e94:	2300      	movs	r3, #0
 8006e96:	b510      	push	{r4, lr}
 8006e98:	4604      	mov	r4, r0
 8006e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ea2:	6083      	str	r3, [r0, #8]
 8006ea4:	8181      	strh	r1, [r0, #12]
 8006ea6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ea8:	81c2      	strh	r2, [r0, #14]
 8006eaa:	6183      	str	r3, [r0, #24]
 8006eac:	4619      	mov	r1, r3
 8006eae:	2208      	movs	r2, #8
 8006eb0:	305c      	adds	r0, #92	; 0x5c
 8006eb2:	f7fe faf3 	bl	800549c <memset>
 8006eb6:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <std+0x38>)
 8006eb8:	6263      	str	r3, [r4, #36]	; 0x24
 8006eba:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <std+0x3c>)
 8006ebc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ebe:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <std+0x40>)
 8006ec0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ec2:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <std+0x44>)
 8006ec4:	6224      	str	r4, [r4, #32]
 8006ec6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ec8:	bd10      	pop	{r4, pc}
 8006eca:	bf00      	nop
 8006ecc:	08007cc9 	.word	0x08007cc9
 8006ed0:	08007ceb 	.word	0x08007ceb
 8006ed4:	08007d23 	.word	0x08007d23
 8006ed8:	08007d47 	.word	0x08007d47

08006edc <_cleanup_r>:
 8006edc:	4901      	ldr	r1, [pc, #4]	; (8006ee4 <_cleanup_r+0x8>)
 8006ede:	f000 b8af 	b.w	8007040 <_fwalk_reent>
 8006ee2:	bf00      	nop
 8006ee4:	08006e1d 	.word	0x08006e1d

08006ee8 <__sfmoreglue>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	1e4a      	subs	r2, r1, #1
 8006eec:	2568      	movs	r5, #104	; 0x68
 8006eee:	4355      	muls	r5, r2
 8006ef0:	460e      	mov	r6, r1
 8006ef2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ef6:	f000 fd23 	bl	8007940 <_malloc_r>
 8006efa:	4604      	mov	r4, r0
 8006efc:	b140      	cbz	r0, 8006f10 <__sfmoreglue+0x28>
 8006efe:	2100      	movs	r1, #0
 8006f00:	e9c0 1600 	strd	r1, r6, [r0]
 8006f04:	300c      	adds	r0, #12
 8006f06:	60a0      	str	r0, [r4, #8]
 8006f08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f0c:	f7fe fac6 	bl	800549c <memset>
 8006f10:	4620      	mov	r0, r4
 8006f12:	bd70      	pop	{r4, r5, r6, pc}

08006f14 <__sfp_lock_acquire>:
 8006f14:	4801      	ldr	r0, [pc, #4]	; (8006f1c <__sfp_lock_acquire+0x8>)
 8006f16:	f000 b8b8 	b.w	800708a <__retarget_lock_acquire_recursive>
 8006f1a:	bf00      	nop
 8006f1c:	2000c424 	.word	0x2000c424

08006f20 <__sfp_lock_release>:
 8006f20:	4801      	ldr	r0, [pc, #4]	; (8006f28 <__sfp_lock_release+0x8>)
 8006f22:	f000 b8b3 	b.w	800708c <__retarget_lock_release_recursive>
 8006f26:	bf00      	nop
 8006f28:	2000c424 	.word	0x2000c424

08006f2c <__sinit_lock_acquire>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	; (8006f34 <__sinit_lock_acquire+0x8>)
 8006f2e:	f000 b8ac 	b.w	800708a <__retarget_lock_acquire_recursive>
 8006f32:	bf00      	nop
 8006f34:	2000c41f 	.word	0x2000c41f

08006f38 <__sinit_lock_release>:
 8006f38:	4801      	ldr	r0, [pc, #4]	; (8006f40 <__sinit_lock_release+0x8>)
 8006f3a:	f000 b8a7 	b.w	800708c <__retarget_lock_release_recursive>
 8006f3e:	bf00      	nop
 8006f40:	2000c41f 	.word	0x2000c41f

08006f44 <__sinit>:
 8006f44:	b510      	push	{r4, lr}
 8006f46:	4604      	mov	r4, r0
 8006f48:	f7ff fff0 	bl	8006f2c <__sinit_lock_acquire>
 8006f4c:	69a3      	ldr	r3, [r4, #24]
 8006f4e:	b11b      	cbz	r3, 8006f58 <__sinit+0x14>
 8006f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f54:	f7ff bff0 	b.w	8006f38 <__sinit_lock_release>
 8006f58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f5c:	6523      	str	r3, [r4, #80]	; 0x50
 8006f5e:	4b13      	ldr	r3, [pc, #76]	; (8006fac <__sinit+0x68>)
 8006f60:	4a13      	ldr	r2, [pc, #76]	; (8006fb0 <__sinit+0x6c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f66:	42a3      	cmp	r3, r4
 8006f68:	bf04      	itt	eq
 8006f6a:	2301      	moveq	r3, #1
 8006f6c:	61a3      	streq	r3, [r4, #24]
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 f820 	bl	8006fb4 <__sfp>
 8006f74:	6060      	str	r0, [r4, #4]
 8006f76:	4620      	mov	r0, r4
 8006f78:	f000 f81c 	bl	8006fb4 <__sfp>
 8006f7c:	60a0      	str	r0, [r4, #8]
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 f818 	bl	8006fb4 <__sfp>
 8006f84:	2200      	movs	r2, #0
 8006f86:	60e0      	str	r0, [r4, #12]
 8006f88:	2104      	movs	r1, #4
 8006f8a:	6860      	ldr	r0, [r4, #4]
 8006f8c:	f7ff ff82 	bl	8006e94 <std>
 8006f90:	68a0      	ldr	r0, [r4, #8]
 8006f92:	2201      	movs	r2, #1
 8006f94:	2109      	movs	r1, #9
 8006f96:	f7ff ff7d 	bl	8006e94 <std>
 8006f9a:	68e0      	ldr	r0, [r4, #12]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	2112      	movs	r1, #18
 8006fa0:	f7ff ff78 	bl	8006e94 <std>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	61a3      	str	r3, [r4, #24]
 8006fa8:	e7d2      	b.n	8006f50 <__sinit+0xc>
 8006faa:	bf00      	nop
 8006fac:	08007fd8 	.word	0x08007fd8
 8006fb0:	08006edd 	.word	0x08006edd

08006fb4 <__sfp>:
 8006fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb6:	4607      	mov	r7, r0
 8006fb8:	f7ff ffac 	bl	8006f14 <__sfp_lock_acquire>
 8006fbc:	4b1e      	ldr	r3, [pc, #120]	; (8007038 <__sfp+0x84>)
 8006fbe:	681e      	ldr	r6, [r3, #0]
 8006fc0:	69b3      	ldr	r3, [r6, #24]
 8006fc2:	b913      	cbnz	r3, 8006fca <__sfp+0x16>
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	f7ff ffbd 	bl	8006f44 <__sinit>
 8006fca:	3648      	adds	r6, #72	; 0x48
 8006fcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	d503      	bpl.n	8006fdc <__sfp+0x28>
 8006fd4:	6833      	ldr	r3, [r6, #0]
 8006fd6:	b30b      	cbz	r3, 800701c <__sfp+0x68>
 8006fd8:	6836      	ldr	r6, [r6, #0]
 8006fda:	e7f7      	b.n	8006fcc <__sfp+0x18>
 8006fdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fe0:	b9d5      	cbnz	r5, 8007018 <__sfp+0x64>
 8006fe2:	4b16      	ldr	r3, [pc, #88]	; (800703c <__sfp+0x88>)
 8006fe4:	60e3      	str	r3, [r4, #12]
 8006fe6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fea:	6665      	str	r5, [r4, #100]	; 0x64
 8006fec:	f000 f84c 	bl	8007088 <__retarget_lock_init_recursive>
 8006ff0:	f7ff ff96 	bl	8006f20 <__sfp_lock_release>
 8006ff4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ff8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ffc:	6025      	str	r5, [r4, #0]
 8006ffe:	61a5      	str	r5, [r4, #24]
 8007000:	2208      	movs	r2, #8
 8007002:	4629      	mov	r1, r5
 8007004:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007008:	f7fe fa48 	bl	800549c <memset>
 800700c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007010:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007014:	4620      	mov	r0, r4
 8007016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007018:	3468      	adds	r4, #104	; 0x68
 800701a:	e7d9      	b.n	8006fd0 <__sfp+0x1c>
 800701c:	2104      	movs	r1, #4
 800701e:	4638      	mov	r0, r7
 8007020:	f7ff ff62 	bl	8006ee8 <__sfmoreglue>
 8007024:	4604      	mov	r4, r0
 8007026:	6030      	str	r0, [r6, #0]
 8007028:	2800      	cmp	r0, #0
 800702a:	d1d5      	bne.n	8006fd8 <__sfp+0x24>
 800702c:	f7ff ff78 	bl	8006f20 <__sfp_lock_release>
 8007030:	230c      	movs	r3, #12
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	e7ee      	b.n	8007014 <__sfp+0x60>
 8007036:	bf00      	nop
 8007038:	08007fd8 	.word	0x08007fd8
 800703c:	ffff0001 	.word	0xffff0001

08007040 <_fwalk_reent>:
 8007040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007044:	4606      	mov	r6, r0
 8007046:	4688      	mov	r8, r1
 8007048:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800704c:	2700      	movs	r7, #0
 800704e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007052:	f1b9 0901 	subs.w	r9, r9, #1
 8007056:	d505      	bpl.n	8007064 <_fwalk_reent+0x24>
 8007058:	6824      	ldr	r4, [r4, #0]
 800705a:	2c00      	cmp	r4, #0
 800705c:	d1f7      	bne.n	800704e <_fwalk_reent+0xe>
 800705e:	4638      	mov	r0, r7
 8007060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007064:	89ab      	ldrh	r3, [r5, #12]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d907      	bls.n	800707a <_fwalk_reent+0x3a>
 800706a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800706e:	3301      	adds	r3, #1
 8007070:	d003      	beq.n	800707a <_fwalk_reent+0x3a>
 8007072:	4629      	mov	r1, r5
 8007074:	4630      	mov	r0, r6
 8007076:	47c0      	blx	r8
 8007078:	4307      	orrs	r7, r0
 800707a:	3568      	adds	r5, #104	; 0x68
 800707c:	e7e9      	b.n	8007052 <_fwalk_reent+0x12>
	...

08007080 <_localeconv_r>:
 8007080:	4800      	ldr	r0, [pc, #0]	; (8007084 <_localeconv_r+0x4>)
 8007082:	4770      	bx	lr
 8007084:	200001b4 	.word	0x200001b4

08007088 <__retarget_lock_init_recursive>:
 8007088:	4770      	bx	lr

0800708a <__retarget_lock_acquire_recursive>:
 800708a:	4770      	bx	lr

0800708c <__retarget_lock_release_recursive>:
 800708c:	4770      	bx	lr

0800708e <__swhatbuf_r>:
 800708e:	b570      	push	{r4, r5, r6, lr}
 8007090:	460e      	mov	r6, r1
 8007092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007096:	2900      	cmp	r1, #0
 8007098:	b096      	sub	sp, #88	; 0x58
 800709a:	4614      	mov	r4, r2
 800709c:	461d      	mov	r5, r3
 800709e:	da07      	bge.n	80070b0 <__swhatbuf_r+0x22>
 80070a0:	2300      	movs	r3, #0
 80070a2:	602b      	str	r3, [r5, #0]
 80070a4:	89b3      	ldrh	r3, [r6, #12]
 80070a6:	061a      	lsls	r2, r3, #24
 80070a8:	d410      	bmi.n	80070cc <__swhatbuf_r+0x3e>
 80070aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070ae:	e00e      	b.n	80070ce <__swhatbuf_r+0x40>
 80070b0:	466a      	mov	r2, sp
 80070b2:	f000 fe9f 	bl	8007df4 <_fstat_r>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	dbf2      	blt.n	80070a0 <__swhatbuf_r+0x12>
 80070ba:	9a01      	ldr	r2, [sp, #4]
 80070bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070c4:	425a      	negs	r2, r3
 80070c6:	415a      	adcs	r2, r3
 80070c8:	602a      	str	r2, [r5, #0]
 80070ca:	e7ee      	b.n	80070aa <__swhatbuf_r+0x1c>
 80070cc:	2340      	movs	r3, #64	; 0x40
 80070ce:	2000      	movs	r0, #0
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	b016      	add	sp, #88	; 0x58
 80070d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080070d8 <__smakebuf_r>:
 80070d8:	898b      	ldrh	r3, [r1, #12]
 80070da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070dc:	079d      	lsls	r5, r3, #30
 80070de:	4606      	mov	r6, r0
 80070e0:	460c      	mov	r4, r1
 80070e2:	d507      	bpl.n	80070f4 <__smakebuf_r+0x1c>
 80070e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070e8:	6023      	str	r3, [r4, #0]
 80070ea:	6123      	str	r3, [r4, #16]
 80070ec:	2301      	movs	r3, #1
 80070ee:	6163      	str	r3, [r4, #20]
 80070f0:	b002      	add	sp, #8
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
 80070f4:	ab01      	add	r3, sp, #4
 80070f6:	466a      	mov	r2, sp
 80070f8:	f7ff ffc9 	bl	800708e <__swhatbuf_r>
 80070fc:	9900      	ldr	r1, [sp, #0]
 80070fe:	4605      	mov	r5, r0
 8007100:	4630      	mov	r0, r6
 8007102:	f000 fc1d 	bl	8007940 <_malloc_r>
 8007106:	b948      	cbnz	r0, 800711c <__smakebuf_r+0x44>
 8007108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800710c:	059a      	lsls	r2, r3, #22
 800710e:	d4ef      	bmi.n	80070f0 <__smakebuf_r+0x18>
 8007110:	f023 0303 	bic.w	r3, r3, #3
 8007114:	f043 0302 	orr.w	r3, r3, #2
 8007118:	81a3      	strh	r3, [r4, #12]
 800711a:	e7e3      	b.n	80070e4 <__smakebuf_r+0xc>
 800711c:	4b0d      	ldr	r3, [pc, #52]	; (8007154 <__smakebuf_r+0x7c>)
 800711e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	6020      	str	r0, [r4, #0]
 8007124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007128:	81a3      	strh	r3, [r4, #12]
 800712a:	9b00      	ldr	r3, [sp, #0]
 800712c:	6163      	str	r3, [r4, #20]
 800712e:	9b01      	ldr	r3, [sp, #4]
 8007130:	6120      	str	r0, [r4, #16]
 8007132:	b15b      	cbz	r3, 800714c <__smakebuf_r+0x74>
 8007134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007138:	4630      	mov	r0, r6
 800713a:	f000 fe6d 	bl	8007e18 <_isatty_r>
 800713e:	b128      	cbz	r0, 800714c <__smakebuf_r+0x74>
 8007140:	89a3      	ldrh	r3, [r4, #12]
 8007142:	f023 0303 	bic.w	r3, r3, #3
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	81a3      	strh	r3, [r4, #12]
 800714c:	89a0      	ldrh	r0, [r4, #12]
 800714e:	4305      	orrs	r5, r0
 8007150:	81a5      	strh	r5, [r4, #12]
 8007152:	e7cd      	b.n	80070f0 <__smakebuf_r+0x18>
 8007154:	08006edd 	.word	0x08006edd

08007158 <malloc>:
 8007158:	4b02      	ldr	r3, [pc, #8]	; (8007164 <malloc+0xc>)
 800715a:	4601      	mov	r1, r0
 800715c:	6818      	ldr	r0, [r3, #0]
 800715e:	f000 bbef 	b.w	8007940 <_malloc_r>
 8007162:	bf00      	nop
 8007164:	20000060 	.word	0x20000060

08007168 <memcpy>:
 8007168:	440a      	add	r2, r1
 800716a:	4291      	cmp	r1, r2
 800716c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007170:	d100      	bne.n	8007174 <memcpy+0xc>
 8007172:	4770      	bx	lr
 8007174:	b510      	push	{r4, lr}
 8007176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800717a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800717e:	4291      	cmp	r1, r2
 8007180:	d1f9      	bne.n	8007176 <memcpy+0xe>
 8007182:	bd10      	pop	{r4, pc}

08007184 <_Balloc>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007188:	4604      	mov	r4, r0
 800718a:	460d      	mov	r5, r1
 800718c:	b976      	cbnz	r6, 80071ac <_Balloc+0x28>
 800718e:	2010      	movs	r0, #16
 8007190:	f7ff ffe2 	bl	8007158 <malloc>
 8007194:	4602      	mov	r2, r0
 8007196:	6260      	str	r0, [r4, #36]	; 0x24
 8007198:	b920      	cbnz	r0, 80071a4 <_Balloc+0x20>
 800719a:	4b18      	ldr	r3, [pc, #96]	; (80071fc <_Balloc+0x78>)
 800719c:	4818      	ldr	r0, [pc, #96]	; (8007200 <_Balloc+0x7c>)
 800719e:	2166      	movs	r1, #102	; 0x66
 80071a0:	f000 fde8 	bl	8007d74 <__assert_func>
 80071a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071a8:	6006      	str	r6, [r0, #0]
 80071aa:	60c6      	str	r6, [r0, #12]
 80071ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071ae:	68f3      	ldr	r3, [r6, #12]
 80071b0:	b183      	cbz	r3, 80071d4 <_Balloc+0x50>
 80071b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071ba:	b9b8      	cbnz	r0, 80071ec <_Balloc+0x68>
 80071bc:	2101      	movs	r1, #1
 80071be:	fa01 f605 	lsl.w	r6, r1, r5
 80071c2:	1d72      	adds	r2, r6, #5
 80071c4:	0092      	lsls	r2, r2, #2
 80071c6:	4620      	mov	r0, r4
 80071c8:	f000 fb5a 	bl	8007880 <_calloc_r>
 80071cc:	b160      	cbz	r0, 80071e8 <_Balloc+0x64>
 80071ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071d2:	e00e      	b.n	80071f2 <_Balloc+0x6e>
 80071d4:	2221      	movs	r2, #33	; 0x21
 80071d6:	2104      	movs	r1, #4
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 fb51 	bl	8007880 <_calloc_r>
 80071de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071e0:	60f0      	str	r0, [r6, #12]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e4      	bne.n	80071b2 <_Balloc+0x2e>
 80071e8:	2000      	movs	r0, #0
 80071ea:	bd70      	pop	{r4, r5, r6, pc}
 80071ec:	6802      	ldr	r2, [r0, #0]
 80071ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071f2:	2300      	movs	r3, #0
 80071f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071f8:	e7f7      	b.n	80071ea <_Balloc+0x66>
 80071fa:	bf00      	nop
 80071fc:	0800801d 	.word	0x0800801d
 8007200:	08008104 	.word	0x08008104

08007204 <_Bfree>:
 8007204:	b570      	push	{r4, r5, r6, lr}
 8007206:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007208:	4605      	mov	r5, r0
 800720a:	460c      	mov	r4, r1
 800720c:	b976      	cbnz	r6, 800722c <_Bfree+0x28>
 800720e:	2010      	movs	r0, #16
 8007210:	f7ff ffa2 	bl	8007158 <malloc>
 8007214:	4602      	mov	r2, r0
 8007216:	6268      	str	r0, [r5, #36]	; 0x24
 8007218:	b920      	cbnz	r0, 8007224 <_Bfree+0x20>
 800721a:	4b09      	ldr	r3, [pc, #36]	; (8007240 <_Bfree+0x3c>)
 800721c:	4809      	ldr	r0, [pc, #36]	; (8007244 <_Bfree+0x40>)
 800721e:	218a      	movs	r1, #138	; 0x8a
 8007220:	f000 fda8 	bl	8007d74 <__assert_func>
 8007224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007228:	6006      	str	r6, [r0, #0]
 800722a:	60c6      	str	r6, [r0, #12]
 800722c:	b13c      	cbz	r4, 800723e <_Bfree+0x3a>
 800722e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007230:	6862      	ldr	r2, [r4, #4]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007238:	6021      	str	r1, [r4, #0]
 800723a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	0800801d 	.word	0x0800801d
 8007244:	08008104 	.word	0x08008104

08007248 <__multadd>:
 8007248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800724c:	690e      	ldr	r6, [r1, #16]
 800724e:	4607      	mov	r7, r0
 8007250:	4698      	mov	r8, r3
 8007252:	460c      	mov	r4, r1
 8007254:	f101 0014 	add.w	r0, r1, #20
 8007258:	2300      	movs	r3, #0
 800725a:	6805      	ldr	r5, [r0, #0]
 800725c:	b2a9      	uxth	r1, r5
 800725e:	fb02 8101 	mla	r1, r2, r1, r8
 8007262:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007266:	0c2d      	lsrs	r5, r5, #16
 8007268:	fb02 c505 	mla	r5, r2, r5, ip
 800726c:	b289      	uxth	r1, r1
 800726e:	3301      	adds	r3, #1
 8007270:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007274:	429e      	cmp	r6, r3
 8007276:	f840 1b04 	str.w	r1, [r0], #4
 800727a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800727e:	dcec      	bgt.n	800725a <__multadd+0x12>
 8007280:	f1b8 0f00 	cmp.w	r8, #0
 8007284:	d022      	beq.n	80072cc <__multadd+0x84>
 8007286:	68a3      	ldr	r3, [r4, #8]
 8007288:	42b3      	cmp	r3, r6
 800728a:	dc19      	bgt.n	80072c0 <__multadd+0x78>
 800728c:	6861      	ldr	r1, [r4, #4]
 800728e:	4638      	mov	r0, r7
 8007290:	3101      	adds	r1, #1
 8007292:	f7ff ff77 	bl	8007184 <_Balloc>
 8007296:	4605      	mov	r5, r0
 8007298:	b928      	cbnz	r0, 80072a6 <__multadd+0x5e>
 800729a:	4602      	mov	r2, r0
 800729c:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <__multadd+0x8c>)
 800729e:	480e      	ldr	r0, [pc, #56]	; (80072d8 <__multadd+0x90>)
 80072a0:	21b5      	movs	r1, #181	; 0xb5
 80072a2:	f000 fd67 	bl	8007d74 <__assert_func>
 80072a6:	6922      	ldr	r2, [r4, #16]
 80072a8:	3202      	adds	r2, #2
 80072aa:	f104 010c 	add.w	r1, r4, #12
 80072ae:	0092      	lsls	r2, r2, #2
 80072b0:	300c      	adds	r0, #12
 80072b2:	f7ff ff59 	bl	8007168 <memcpy>
 80072b6:	4621      	mov	r1, r4
 80072b8:	4638      	mov	r0, r7
 80072ba:	f7ff ffa3 	bl	8007204 <_Bfree>
 80072be:	462c      	mov	r4, r5
 80072c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80072c4:	3601      	adds	r6, #1
 80072c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80072ca:	6126      	str	r6, [r4, #16]
 80072cc:	4620      	mov	r0, r4
 80072ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072d2:	bf00      	nop
 80072d4:	08008093 	.word	0x08008093
 80072d8:	08008104 	.word	0x08008104

080072dc <__hi0bits>:
 80072dc:	0c03      	lsrs	r3, r0, #16
 80072de:	041b      	lsls	r3, r3, #16
 80072e0:	b9d3      	cbnz	r3, 8007318 <__hi0bits+0x3c>
 80072e2:	0400      	lsls	r0, r0, #16
 80072e4:	2310      	movs	r3, #16
 80072e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80072ea:	bf04      	itt	eq
 80072ec:	0200      	lsleq	r0, r0, #8
 80072ee:	3308      	addeq	r3, #8
 80072f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80072f4:	bf04      	itt	eq
 80072f6:	0100      	lsleq	r0, r0, #4
 80072f8:	3304      	addeq	r3, #4
 80072fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80072fe:	bf04      	itt	eq
 8007300:	0080      	lsleq	r0, r0, #2
 8007302:	3302      	addeq	r3, #2
 8007304:	2800      	cmp	r0, #0
 8007306:	db05      	blt.n	8007314 <__hi0bits+0x38>
 8007308:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800730c:	f103 0301 	add.w	r3, r3, #1
 8007310:	bf08      	it	eq
 8007312:	2320      	moveq	r3, #32
 8007314:	4618      	mov	r0, r3
 8007316:	4770      	bx	lr
 8007318:	2300      	movs	r3, #0
 800731a:	e7e4      	b.n	80072e6 <__hi0bits+0xa>

0800731c <__lo0bits>:
 800731c:	6803      	ldr	r3, [r0, #0]
 800731e:	f013 0207 	ands.w	r2, r3, #7
 8007322:	4601      	mov	r1, r0
 8007324:	d00b      	beq.n	800733e <__lo0bits+0x22>
 8007326:	07da      	lsls	r2, r3, #31
 8007328:	d424      	bmi.n	8007374 <__lo0bits+0x58>
 800732a:	0798      	lsls	r0, r3, #30
 800732c:	bf49      	itett	mi
 800732e:	085b      	lsrmi	r3, r3, #1
 8007330:	089b      	lsrpl	r3, r3, #2
 8007332:	2001      	movmi	r0, #1
 8007334:	600b      	strmi	r3, [r1, #0]
 8007336:	bf5c      	itt	pl
 8007338:	600b      	strpl	r3, [r1, #0]
 800733a:	2002      	movpl	r0, #2
 800733c:	4770      	bx	lr
 800733e:	b298      	uxth	r0, r3
 8007340:	b9b0      	cbnz	r0, 8007370 <__lo0bits+0x54>
 8007342:	0c1b      	lsrs	r3, r3, #16
 8007344:	2010      	movs	r0, #16
 8007346:	f013 0fff 	tst.w	r3, #255	; 0xff
 800734a:	bf04      	itt	eq
 800734c:	0a1b      	lsreq	r3, r3, #8
 800734e:	3008      	addeq	r0, #8
 8007350:	071a      	lsls	r2, r3, #28
 8007352:	bf04      	itt	eq
 8007354:	091b      	lsreq	r3, r3, #4
 8007356:	3004      	addeq	r0, #4
 8007358:	079a      	lsls	r2, r3, #30
 800735a:	bf04      	itt	eq
 800735c:	089b      	lsreq	r3, r3, #2
 800735e:	3002      	addeq	r0, #2
 8007360:	07da      	lsls	r2, r3, #31
 8007362:	d403      	bmi.n	800736c <__lo0bits+0x50>
 8007364:	085b      	lsrs	r3, r3, #1
 8007366:	f100 0001 	add.w	r0, r0, #1
 800736a:	d005      	beq.n	8007378 <__lo0bits+0x5c>
 800736c:	600b      	str	r3, [r1, #0]
 800736e:	4770      	bx	lr
 8007370:	4610      	mov	r0, r2
 8007372:	e7e8      	b.n	8007346 <__lo0bits+0x2a>
 8007374:	2000      	movs	r0, #0
 8007376:	4770      	bx	lr
 8007378:	2020      	movs	r0, #32
 800737a:	4770      	bx	lr

0800737c <__i2b>:
 800737c:	b510      	push	{r4, lr}
 800737e:	460c      	mov	r4, r1
 8007380:	2101      	movs	r1, #1
 8007382:	f7ff feff 	bl	8007184 <_Balloc>
 8007386:	4602      	mov	r2, r0
 8007388:	b928      	cbnz	r0, 8007396 <__i2b+0x1a>
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <__i2b+0x24>)
 800738c:	4805      	ldr	r0, [pc, #20]	; (80073a4 <__i2b+0x28>)
 800738e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007392:	f000 fcef 	bl	8007d74 <__assert_func>
 8007396:	2301      	movs	r3, #1
 8007398:	6144      	str	r4, [r0, #20]
 800739a:	6103      	str	r3, [r0, #16]
 800739c:	bd10      	pop	{r4, pc}
 800739e:	bf00      	nop
 80073a0:	08008093 	.word	0x08008093
 80073a4:	08008104 	.word	0x08008104

080073a8 <__multiply>:
 80073a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ac:	4614      	mov	r4, r2
 80073ae:	690a      	ldr	r2, [r1, #16]
 80073b0:	6923      	ldr	r3, [r4, #16]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	bfb8      	it	lt
 80073b6:	460b      	movlt	r3, r1
 80073b8:	460d      	mov	r5, r1
 80073ba:	bfbc      	itt	lt
 80073bc:	4625      	movlt	r5, r4
 80073be:	461c      	movlt	r4, r3
 80073c0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80073c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80073c8:	68ab      	ldr	r3, [r5, #8]
 80073ca:	6869      	ldr	r1, [r5, #4]
 80073cc:	eb0a 0709 	add.w	r7, sl, r9
 80073d0:	42bb      	cmp	r3, r7
 80073d2:	b085      	sub	sp, #20
 80073d4:	bfb8      	it	lt
 80073d6:	3101      	addlt	r1, #1
 80073d8:	f7ff fed4 	bl	8007184 <_Balloc>
 80073dc:	b930      	cbnz	r0, 80073ec <__multiply+0x44>
 80073de:	4602      	mov	r2, r0
 80073e0:	4b42      	ldr	r3, [pc, #264]	; (80074ec <__multiply+0x144>)
 80073e2:	4843      	ldr	r0, [pc, #268]	; (80074f0 <__multiply+0x148>)
 80073e4:	f240 115d 	movw	r1, #349	; 0x15d
 80073e8:	f000 fcc4 	bl	8007d74 <__assert_func>
 80073ec:	f100 0614 	add.w	r6, r0, #20
 80073f0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80073f4:	4633      	mov	r3, r6
 80073f6:	2200      	movs	r2, #0
 80073f8:	4543      	cmp	r3, r8
 80073fa:	d31e      	bcc.n	800743a <__multiply+0x92>
 80073fc:	f105 0c14 	add.w	ip, r5, #20
 8007400:	f104 0314 	add.w	r3, r4, #20
 8007404:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007408:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800740c:	9202      	str	r2, [sp, #8]
 800740e:	ebac 0205 	sub.w	r2, ip, r5
 8007412:	3a15      	subs	r2, #21
 8007414:	f022 0203 	bic.w	r2, r2, #3
 8007418:	3204      	adds	r2, #4
 800741a:	f105 0115 	add.w	r1, r5, #21
 800741e:	458c      	cmp	ip, r1
 8007420:	bf38      	it	cc
 8007422:	2204      	movcc	r2, #4
 8007424:	9201      	str	r2, [sp, #4]
 8007426:	9a02      	ldr	r2, [sp, #8]
 8007428:	9303      	str	r3, [sp, #12]
 800742a:	429a      	cmp	r2, r3
 800742c:	d808      	bhi.n	8007440 <__multiply+0x98>
 800742e:	2f00      	cmp	r7, #0
 8007430:	dc55      	bgt.n	80074de <__multiply+0x136>
 8007432:	6107      	str	r7, [r0, #16]
 8007434:	b005      	add	sp, #20
 8007436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743a:	f843 2b04 	str.w	r2, [r3], #4
 800743e:	e7db      	b.n	80073f8 <__multiply+0x50>
 8007440:	f8b3 a000 	ldrh.w	sl, [r3]
 8007444:	f1ba 0f00 	cmp.w	sl, #0
 8007448:	d020      	beq.n	800748c <__multiply+0xe4>
 800744a:	f105 0e14 	add.w	lr, r5, #20
 800744e:	46b1      	mov	r9, r6
 8007450:	2200      	movs	r2, #0
 8007452:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007456:	f8d9 b000 	ldr.w	fp, [r9]
 800745a:	b2a1      	uxth	r1, r4
 800745c:	fa1f fb8b 	uxth.w	fp, fp
 8007460:	fb0a b101 	mla	r1, sl, r1, fp
 8007464:	4411      	add	r1, r2
 8007466:	f8d9 2000 	ldr.w	r2, [r9]
 800746a:	0c24      	lsrs	r4, r4, #16
 800746c:	0c12      	lsrs	r2, r2, #16
 800746e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007472:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007476:	b289      	uxth	r1, r1
 8007478:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800747c:	45f4      	cmp	ip, lr
 800747e:	f849 1b04 	str.w	r1, [r9], #4
 8007482:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007486:	d8e4      	bhi.n	8007452 <__multiply+0xaa>
 8007488:	9901      	ldr	r1, [sp, #4]
 800748a:	5072      	str	r2, [r6, r1]
 800748c:	9a03      	ldr	r2, [sp, #12]
 800748e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007492:	3304      	adds	r3, #4
 8007494:	f1b9 0f00 	cmp.w	r9, #0
 8007498:	d01f      	beq.n	80074da <__multiply+0x132>
 800749a:	6834      	ldr	r4, [r6, #0]
 800749c:	f105 0114 	add.w	r1, r5, #20
 80074a0:	46b6      	mov	lr, r6
 80074a2:	f04f 0a00 	mov.w	sl, #0
 80074a6:	880a      	ldrh	r2, [r1, #0]
 80074a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80074ac:	fb09 b202 	mla	r2, r9, r2, fp
 80074b0:	4492      	add	sl, r2
 80074b2:	b2a4      	uxth	r4, r4
 80074b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80074b8:	f84e 4b04 	str.w	r4, [lr], #4
 80074bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80074c0:	f8be 2000 	ldrh.w	r2, [lr]
 80074c4:	0c24      	lsrs	r4, r4, #16
 80074c6:	fb09 2404 	mla	r4, r9, r4, r2
 80074ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80074ce:	458c      	cmp	ip, r1
 80074d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80074d4:	d8e7      	bhi.n	80074a6 <__multiply+0xfe>
 80074d6:	9a01      	ldr	r2, [sp, #4]
 80074d8:	50b4      	str	r4, [r6, r2]
 80074da:	3604      	adds	r6, #4
 80074dc:	e7a3      	b.n	8007426 <__multiply+0x7e>
 80074de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1a5      	bne.n	8007432 <__multiply+0x8a>
 80074e6:	3f01      	subs	r7, #1
 80074e8:	e7a1      	b.n	800742e <__multiply+0x86>
 80074ea:	bf00      	nop
 80074ec:	08008093 	.word	0x08008093
 80074f0:	08008104 	.word	0x08008104

080074f4 <__pow5mult>:
 80074f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f8:	4615      	mov	r5, r2
 80074fa:	f012 0203 	ands.w	r2, r2, #3
 80074fe:	4606      	mov	r6, r0
 8007500:	460f      	mov	r7, r1
 8007502:	d007      	beq.n	8007514 <__pow5mult+0x20>
 8007504:	4c25      	ldr	r4, [pc, #148]	; (800759c <__pow5mult+0xa8>)
 8007506:	3a01      	subs	r2, #1
 8007508:	2300      	movs	r3, #0
 800750a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800750e:	f7ff fe9b 	bl	8007248 <__multadd>
 8007512:	4607      	mov	r7, r0
 8007514:	10ad      	asrs	r5, r5, #2
 8007516:	d03d      	beq.n	8007594 <__pow5mult+0xa0>
 8007518:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800751a:	b97c      	cbnz	r4, 800753c <__pow5mult+0x48>
 800751c:	2010      	movs	r0, #16
 800751e:	f7ff fe1b 	bl	8007158 <malloc>
 8007522:	4602      	mov	r2, r0
 8007524:	6270      	str	r0, [r6, #36]	; 0x24
 8007526:	b928      	cbnz	r0, 8007534 <__pow5mult+0x40>
 8007528:	4b1d      	ldr	r3, [pc, #116]	; (80075a0 <__pow5mult+0xac>)
 800752a:	481e      	ldr	r0, [pc, #120]	; (80075a4 <__pow5mult+0xb0>)
 800752c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007530:	f000 fc20 	bl	8007d74 <__assert_func>
 8007534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007538:	6004      	str	r4, [r0, #0]
 800753a:	60c4      	str	r4, [r0, #12]
 800753c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007544:	b94c      	cbnz	r4, 800755a <__pow5mult+0x66>
 8007546:	f240 2171 	movw	r1, #625	; 0x271
 800754a:	4630      	mov	r0, r6
 800754c:	f7ff ff16 	bl	800737c <__i2b>
 8007550:	2300      	movs	r3, #0
 8007552:	f8c8 0008 	str.w	r0, [r8, #8]
 8007556:	4604      	mov	r4, r0
 8007558:	6003      	str	r3, [r0, #0]
 800755a:	f04f 0900 	mov.w	r9, #0
 800755e:	07eb      	lsls	r3, r5, #31
 8007560:	d50a      	bpl.n	8007578 <__pow5mult+0x84>
 8007562:	4639      	mov	r1, r7
 8007564:	4622      	mov	r2, r4
 8007566:	4630      	mov	r0, r6
 8007568:	f7ff ff1e 	bl	80073a8 <__multiply>
 800756c:	4639      	mov	r1, r7
 800756e:	4680      	mov	r8, r0
 8007570:	4630      	mov	r0, r6
 8007572:	f7ff fe47 	bl	8007204 <_Bfree>
 8007576:	4647      	mov	r7, r8
 8007578:	106d      	asrs	r5, r5, #1
 800757a:	d00b      	beq.n	8007594 <__pow5mult+0xa0>
 800757c:	6820      	ldr	r0, [r4, #0]
 800757e:	b938      	cbnz	r0, 8007590 <__pow5mult+0x9c>
 8007580:	4622      	mov	r2, r4
 8007582:	4621      	mov	r1, r4
 8007584:	4630      	mov	r0, r6
 8007586:	f7ff ff0f 	bl	80073a8 <__multiply>
 800758a:	6020      	str	r0, [r4, #0]
 800758c:	f8c0 9000 	str.w	r9, [r0]
 8007590:	4604      	mov	r4, r0
 8007592:	e7e4      	b.n	800755e <__pow5mult+0x6a>
 8007594:	4638      	mov	r0, r7
 8007596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800759a:	bf00      	nop
 800759c:	08008258 	.word	0x08008258
 80075a0:	0800801d 	.word	0x0800801d
 80075a4:	08008104 	.word	0x08008104

080075a8 <__lshift>:
 80075a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ac:	460c      	mov	r4, r1
 80075ae:	6849      	ldr	r1, [r1, #4]
 80075b0:	6923      	ldr	r3, [r4, #16]
 80075b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075b6:	68a3      	ldr	r3, [r4, #8]
 80075b8:	4607      	mov	r7, r0
 80075ba:	4691      	mov	r9, r2
 80075bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075c0:	f108 0601 	add.w	r6, r8, #1
 80075c4:	42b3      	cmp	r3, r6
 80075c6:	db0b      	blt.n	80075e0 <__lshift+0x38>
 80075c8:	4638      	mov	r0, r7
 80075ca:	f7ff fddb 	bl	8007184 <_Balloc>
 80075ce:	4605      	mov	r5, r0
 80075d0:	b948      	cbnz	r0, 80075e6 <__lshift+0x3e>
 80075d2:	4602      	mov	r2, r0
 80075d4:	4b28      	ldr	r3, [pc, #160]	; (8007678 <__lshift+0xd0>)
 80075d6:	4829      	ldr	r0, [pc, #164]	; (800767c <__lshift+0xd4>)
 80075d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075dc:	f000 fbca 	bl	8007d74 <__assert_func>
 80075e0:	3101      	adds	r1, #1
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	e7ee      	b.n	80075c4 <__lshift+0x1c>
 80075e6:	2300      	movs	r3, #0
 80075e8:	f100 0114 	add.w	r1, r0, #20
 80075ec:	f100 0210 	add.w	r2, r0, #16
 80075f0:	4618      	mov	r0, r3
 80075f2:	4553      	cmp	r3, sl
 80075f4:	db33      	blt.n	800765e <__lshift+0xb6>
 80075f6:	6920      	ldr	r0, [r4, #16]
 80075f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075fc:	f104 0314 	add.w	r3, r4, #20
 8007600:	f019 091f 	ands.w	r9, r9, #31
 8007604:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007608:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800760c:	d02b      	beq.n	8007666 <__lshift+0xbe>
 800760e:	f1c9 0e20 	rsb	lr, r9, #32
 8007612:	468a      	mov	sl, r1
 8007614:	2200      	movs	r2, #0
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	fa00 f009 	lsl.w	r0, r0, r9
 800761c:	4302      	orrs	r2, r0
 800761e:	f84a 2b04 	str.w	r2, [sl], #4
 8007622:	f853 2b04 	ldr.w	r2, [r3], #4
 8007626:	459c      	cmp	ip, r3
 8007628:	fa22 f20e 	lsr.w	r2, r2, lr
 800762c:	d8f3      	bhi.n	8007616 <__lshift+0x6e>
 800762e:	ebac 0304 	sub.w	r3, ip, r4
 8007632:	3b15      	subs	r3, #21
 8007634:	f023 0303 	bic.w	r3, r3, #3
 8007638:	3304      	adds	r3, #4
 800763a:	f104 0015 	add.w	r0, r4, #21
 800763e:	4584      	cmp	ip, r0
 8007640:	bf38      	it	cc
 8007642:	2304      	movcc	r3, #4
 8007644:	50ca      	str	r2, [r1, r3]
 8007646:	b10a      	cbz	r2, 800764c <__lshift+0xa4>
 8007648:	f108 0602 	add.w	r6, r8, #2
 800764c:	3e01      	subs	r6, #1
 800764e:	4638      	mov	r0, r7
 8007650:	612e      	str	r6, [r5, #16]
 8007652:	4621      	mov	r1, r4
 8007654:	f7ff fdd6 	bl	8007204 <_Bfree>
 8007658:	4628      	mov	r0, r5
 800765a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007662:	3301      	adds	r3, #1
 8007664:	e7c5      	b.n	80075f2 <__lshift+0x4a>
 8007666:	3904      	subs	r1, #4
 8007668:	f853 2b04 	ldr.w	r2, [r3], #4
 800766c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007670:	459c      	cmp	ip, r3
 8007672:	d8f9      	bhi.n	8007668 <__lshift+0xc0>
 8007674:	e7ea      	b.n	800764c <__lshift+0xa4>
 8007676:	bf00      	nop
 8007678:	08008093 	.word	0x08008093
 800767c:	08008104 	.word	0x08008104

08007680 <__mcmp>:
 8007680:	b530      	push	{r4, r5, lr}
 8007682:	6902      	ldr	r2, [r0, #16]
 8007684:	690c      	ldr	r4, [r1, #16]
 8007686:	1b12      	subs	r2, r2, r4
 8007688:	d10e      	bne.n	80076a8 <__mcmp+0x28>
 800768a:	f100 0314 	add.w	r3, r0, #20
 800768e:	3114      	adds	r1, #20
 8007690:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007694:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007698:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800769c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076a0:	42a5      	cmp	r5, r4
 80076a2:	d003      	beq.n	80076ac <__mcmp+0x2c>
 80076a4:	d305      	bcc.n	80076b2 <__mcmp+0x32>
 80076a6:	2201      	movs	r2, #1
 80076a8:	4610      	mov	r0, r2
 80076aa:	bd30      	pop	{r4, r5, pc}
 80076ac:	4283      	cmp	r3, r0
 80076ae:	d3f3      	bcc.n	8007698 <__mcmp+0x18>
 80076b0:	e7fa      	b.n	80076a8 <__mcmp+0x28>
 80076b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076b6:	e7f7      	b.n	80076a8 <__mcmp+0x28>

080076b8 <__mdiff>:
 80076b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	460c      	mov	r4, r1
 80076be:	4606      	mov	r6, r0
 80076c0:	4611      	mov	r1, r2
 80076c2:	4620      	mov	r0, r4
 80076c4:	4617      	mov	r7, r2
 80076c6:	f7ff ffdb 	bl	8007680 <__mcmp>
 80076ca:	1e05      	subs	r5, r0, #0
 80076cc:	d110      	bne.n	80076f0 <__mdiff+0x38>
 80076ce:	4629      	mov	r1, r5
 80076d0:	4630      	mov	r0, r6
 80076d2:	f7ff fd57 	bl	8007184 <_Balloc>
 80076d6:	b930      	cbnz	r0, 80076e6 <__mdiff+0x2e>
 80076d8:	4b39      	ldr	r3, [pc, #228]	; (80077c0 <__mdiff+0x108>)
 80076da:	4602      	mov	r2, r0
 80076dc:	f240 2132 	movw	r1, #562	; 0x232
 80076e0:	4838      	ldr	r0, [pc, #224]	; (80077c4 <__mdiff+0x10c>)
 80076e2:	f000 fb47 	bl	8007d74 <__assert_func>
 80076e6:	2301      	movs	r3, #1
 80076e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f0:	bfa4      	itt	ge
 80076f2:	463b      	movge	r3, r7
 80076f4:	4627      	movge	r7, r4
 80076f6:	4630      	mov	r0, r6
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	bfa6      	itte	ge
 80076fc:	461c      	movge	r4, r3
 80076fe:	2500      	movge	r5, #0
 8007700:	2501      	movlt	r5, #1
 8007702:	f7ff fd3f 	bl	8007184 <_Balloc>
 8007706:	b920      	cbnz	r0, 8007712 <__mdiff+0x5a>
 8007708:	4b2d      	ldr	r3, [pc, #180]	; (80077c0 <__mdiff+0x108>)
 800770a:	4602      	mov	r2, r0
 800770c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007710:	e7e6      	b.n	80076e0 <__mdiff+0x28>
 8007712:	693e      	ldr	r6, [r7, #16]
 8007714:	60c5      	str	r5, [r0, #12]
 8007716:	6925      	ldr	r5, [r4, #16]
 8007718:	f107 0114 	add.w	r1, r7, #20
 800771c:	f104 0914 	add.w	r9, r4, #20
 8007720:	f100 0e14 	add.w	lr, r0, #20
 8007724:	f107 0210 	add.w	r2, r7, #16
 8007728:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800772c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007730:	46f2      	mov	sl, lr
 8007732:	2700      	movs	r7, #0
 8007734:	f859 3b04 	ldr.w	r3, [r9], #4
 8007738:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800773c:	fa1f f883 	uxth.w	r8, r3
 8007740:	fa17 f78b 	uxtah	r7, r7, fp
 8007744:	0c1b      	lsrs	r3, r3, #16
 8007746:	eba7 0808 	sub.w	r8, r7, r8
 800774a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800774e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007752:	fa1f f888 	uxth.w	r8, r8
 8007756:	141f      	asrs	r7, r3, #16
 8007758:	454d      	cmp	r5, r9
 800775a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800775e:	f84a 3b04 	str.w	r3, [sl], #4
 8007762:	d8e7      	bhi.n	8007734 <__mdiff+0x7c>
 8007764:	1b2b      	subs	r3, r5, r4
 8007766:	3b15      	subs	r3, #21
 8007768:	f023 0303 	bic.w	r3, r3, #3
 800776c:	3304      	adds	r3, #4
 800776e:	3415      	adds	r4, #21
 8007770:	42a5      	cmp	r5, r4
 8007772:	bf38      	it	cc
 8007774:	2304      	movcc	r3, #4
 8007776:	4419      	add	r1, r3
 8007778:	4473      	add	r3, lr
 800777a:	469e      	mov	lr, r3
 800777c:	460d      	mov	r5, r1
 800777e:	4565      	cmp	r5, ip
 8007780:	d30e      	bcc.n	80077a0 <__mdiff+0xe8>
 8007782:	f10c 0203 	add.w	r2, ip, #3
 8007786:	1a52      	subs	r2, r2, r1
 8007788:	f022 0203 	bic.w	r2, r2, #3
 800778c:	3903      	subs	r1, #3
 800778e:	458c      	cmp	ip, r1
 8007790:	bf38      	it	cc
 8007792:	2200      	movcc	r2, #0
 8007794:	441a      	add	r2, r3
 8007796:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800779a:	b17b      	cbz	r3, 80077bc <__mdiff+0x104>
 800779c:	6106      	str	r6, [r0, #16]
 800779e:	e7a5      	b.n	80076ec <__mdiff+0x34>
 80077a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80077a4:	fa17 f488 	uxtah	r4, r7, r8
 80077a8:	1422      	asrs	r2, r4, #16
 80077aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80077ae:	b2a4      	uxth	r4, r4
 80077b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80077b4:	f84e 4b04 	str.w	r4, [lr], #4
 80077b8:	1417      	asrs	r7, r2, #16
 80077ba:	e7e0      	b.n	800777e <__mdiff+0xc6>
 80077bc:	3e01      	subs	r6, #1
 80077be:	e7ea      	b.n	8007796 <__mdiff+0xde>
 80077c0:	08008093 	.word	0x08008093
 80077c4:	08008104 	.word	0x08008104

080077c8 <__d2b>:
 80077c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077cc:	4689      	mov	r9, r1
 80077ce:	2101      	movs	r1, #1
 80077d0:	ec57 6b10 	vmov	r6, r7, d0
 80077d4:	4690      	mov	r8, r2
 80077d6:	f7ff fcd5 	bl	8007184 <_Balloc>
 80077da:	4604      	mov	r4, r0
 80077dc:	b930      	cbnz	r0, 80077ec <__d2b+0x24>
 80077de:	4602      	mov	r2, r0
 80077e0:	4b25      	ldr	r3, [pc, #148]	; (8007878 <__d2b+0xb0>)
 80077e2:	4826      	ldr	r0, [pc, #152]	; (800787c <__d2b+0xb4>)
 80077e4:	f240 310a 	movw	r1, #778	; 0x30a
 80077e8:	f000 fac4 	bl	8007d74 <__assert_func>
 80077ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80077f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077f4:	bb35      	cbnz	r5, 8007844 <__d2b+0x7c>
 80077f6:	2e00      	cmp	r6, #0
 80077f8:	9301      	str	r3, [sp, #4]
 80077fa:	d028      	beq.n	800784e <__d2b+0x86>
 80077fc:	4668      	mov	r0, sp
 80077fe:	9600      	str	r6, [sp, #0]
 8007800:	f7ff fd8c 	bl	800731c <__lo0bits>
 8007804:	9900      	ldr	r1, [sp, #0]
 8007806:	b300      	cbz	r0, 800784a <__d2b+0x82>
 8007808:	9a01      	ldr	r2, [sp, #4]
 800780a:	f1c0 0320 	rsb	r3, r0, #32
 800780e:	fa02 f303 	lsl.w	r3, r2, r3
 8007812:	430b      	orrs	r3, r1
 8007814:	40c2      	lsrs	r2, r0
 8007816:	6163      	str	r3, [r4, #20]
 8007818:	9201      	str	r2, [sp, #4]
 800781a:	9b01      	ldr	r3, [sp, #4]
 800781c:	61a3      	str	r3, [r4, #24]
 800781e:	2b00      	cmp	r3, #0
 8007820:	bf14      	ite	ne
 8007822:	2202      	movne	r2, #2
 8007824:	2201      	moveq	r2, #1
 8007826:	6122      	str	r2, [r4, #16]
 8007828:	b1d5      	cbz	r5, 8007860 <__d2b+0x98>
 800782a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800782e:	4405      	add	r5, r0
 8007830:	f8c9 5000 	str.w	r5, [r9]
 8007834:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007838:	f8c8 0000 	str.w	r0, [r8]
 800783c:	4620      	mov	r0, r4
 800783e:	b003      	add	sp, #12
 8007840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007844:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007848:	e7d5      	b.n	80077f6 <__d2b+0x2e>
 800784a:	6161      	str	r1, [r4, #20]
 800784c:	e7e5      	b.n	800781a <__d2b+0x52>
 800784e:	a801      	add	r0, sp, #4
 8007850:	f7ff fd64 	bl	800731c <__lo0bits>
 8007854:	9b01      	ldr	r3, [sp, #4]
 8007856:	6163      	str	r3, [r4, #20]
 8007858:	2201      	movs	r2, #1
 800785a:	6122      	str	r2, [r4, #16]
 800785c:	3020      	adds	r0, #32
 800785e:	e7e3      	b.n	8007828 <__d2b+0x60>
 8007860:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007864:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007868:	f8c9 0000 	str.w	r0, [r9]
 800786c:	6918      	ldr	r0, [r3, #16]
 800786e:	f7ff fd35 	bl	80072dc <__hi0bits>
 8007872:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007876:	e7df      	b.n	8007838 <__d2b+0x70>
 8007878:	08008093 	.word	0x08008093
 800787c:	08008104 	.word	0x08008104

08007880 <_calloc_r>:
 8007880:	b513      	push	{r0, r1, r4, lr}
 8007882:	434a      	muls	r2, r1
 8007884:	4611      	mov	r1, r2
 8007886:	9201      	str	r2, [sp, #4]
 8007888:	f000 f85a 	bl	8007940 <_malloc_r>
 800788c:	4604      	mov	r4, r0
 800788e:	b118      	cbz	r0, 8007898 <_calloc_r+0x18>
 8007890:	9a01      	ldr	r2, [sp, #4]
 8007892:	2100      	movs	r1, #0
 8007894:	f7fd fe02 	bl	800549c <memset>
 8007898:	4620      	mov	r0, r4
 800789a:	b002      	add	sp, #8
 800789c:	bd10      	pop	{r4, pc}
	...

080078a0 <_free_r>:
 80078a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078a2:	2900      	cmp	r1, #0
 80078a4:	d048      	beq.n	8007938 <_free_r+0x98>
 80078a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078aa:	9001      	str	r0, [sp, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f1a1 0404 	sub.w	r4, r1, #4
 80078b2:	bfb8      	it	lt
 80078b4:	18e4      	addlt	r4, r4, r3
 80078b6:	f000 fae3 	bl	8007e80 <__malloc_lock>
 80078ba:	4a20      	ldr	r2, [pc, #128]	; (800793c <_free_r+0x9c>)
 80078bc:	9801      	ldr	r0, [sp, #4]
 80078be:	6813      	ldr	r3, [r2, #0]
 80078c0:	4615      	mov	r5, r2
 80078c2:	b933      	cbnz	r3, 80078d2 <_free_r+0x32>
 80078c4:	6063      	str	r3, [r4, #4]
 80078c6:	6014      	str	r4, [r2, #0]
 80078c8:	b003      	add	sp, #12
 80078ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078ce:	f000 badd 	b.w	8007e8c <__malloc_unlock>
 80078d2:	42a3      	cmp	r3, r4
 80078d4:	d90b      	bls.n	80078ee <_free_r+0x4e>
 80078d6:	6821      	ldr	r1, [r4, #0]
 80078d8:	1862      	adds	r2, r4, r1
 80078da:	4293      	cmp	r3, r2
 80078dc:	bf04      	itt	eq
 80078de:	681a      	ldreq	r2, [r3, #0]
 80078e0:	685b      	ldreq	r3, [r3, #4]
 80078e2:	6063      	str	r3, [r4, #4]
 80078e4:	bf04      	itt	eq
 80078e6:	1852      	addeq	r2, r2, r1
 80078e8:	6022      	streq	r2, [r4, #0]
 80078ea:	602c      	str	r4, [r5, #0]
 80078ec:	e7ec      	b.n	80078c8 <_free_r+0x28>
 80078ee:	461a      	mov	r2, r3
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	b10b      	cbz	r3, 80078f8 <_free_r+0x58>
 80078f4:	42a3      	cmp	r3, r4
 80078f6:	d9fa      	bls.n	80078ee <_free_r+0x4e>
 80078f8:	6811      	ldr	r1, [r2, #0]
 80078fa:	1855      	adds	r5, r2, r1
 80078fc:	42a5      	cmp	r5, r4
 80078fe:	d10b      	bne.n	8007918 <_free_r+0x78>
 8007900:	6824      	ldr	r4, [r4, #0]
 8007902:	4421      	add	r1, r4
 8007904:	1854      	adds	r4, r2, r1
 8007906:	42a3      	cmp	r3, r4
 8007908:	6011      	str	r1, [r2, #0]
 800790a:	d1dd      	bne.n	80078c8 <_free_r+0x28>
 800790c:	681c      	ldr	r4, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	6053      	str	r3, [r2, #4]
 8007912:	4421      	add	r1, r4
 8007914:	6011      	str	r1, [r2, #0]
 8007916:	e7d7      	b.n	80078c8 <_free_r+0x28>
 8007918:	d902      	bls.n	8007920 <_free_r+0x80>
 800791a:	230c      	movs	r3, #12
 800791c:	6003      	str	r3, [r0, #0]
 800791e:	e7d3      	b.n	80078c8 <_free_r+0x28>
 8007920:	6825      	ldr	r5, [r4, #0]
 8007922:	1961      	adds	r1, r4, r5
 8007924:	428b      	cmp	r3, r1
 8007926:	bf04      	itt	eq
 8007928:	6819      	ldreq	r1, [r3, #0]
 800792a:	685b      	ldreq	r3, [r3, #4]
 800792c:	6063      	str	r3, [r4, #4]
 800792e:	bf04      	itt	eq
 8007930:	1949      	addeq	r1, r1, r5
 8007932:	6021      	streq	r1, [r4, #0]
 8007934:	6054      	str	r4, [r2, #4]
 8007936:	e7c7      	b.n	80078c8 <_free_r+0x28>
 8007938:	b003      	add	sp, #12
 800793a:	bd30      	pop	{r4, r5, pc}
 800793c:	20000258 	.word	0x20000258

08007940 <_malloc_r>:
 8007940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007942:	1ccd      	adds	r5, r1, #3
 8007944:	f025 0503 	bic.w	r5, r5, #3
 8007948:	3508      	adds	r5, #8
 800794a:	2d0c      	cmp	r5, #12
 800794c:	bf38      	it	cc
 800794e:	250c      	movcc	r5, #12
 8007950:	2d00      	cmp	r5, #0
 8007952:	4606      	mov	r6, r0
 8007954:	db01      	blt.n	800795a <_malloc_r+0x1a>
 8007956:	42a9      	cmp	r1, r5
 8007958:	d903      	bls.n	8007962 <_malloc_r+0x22>
 800795a:	230c      	movs	r3, #12
 800795c:	6033      	str	r3, [r6, #0]
 800795e:	2000      	movs	r0, #0
 8007960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007962:	f000 fa8d 	bl	8007e80 <__malloc_lock>
 8007966:	4921      	ldr	r1, [pc, #132]	; (80079ec <_malloc_r+0xac>)
 8007968:	680a      	ldr	r2, [r1, #0]
 800796a:	4614      	mov	r4, r2
 800796c:	b99c      	cbnz	r4, 8007996 <_malloc_r+0x56>
 800796e:	4f20      	ldr	r7, [pc, #128]	; (80079f0 <_malloc_r+0xb0>)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	b923      	cbnz	r3, 800797e <_malloc_r+0x3e>
 8007974:	4621      	mov	r1, r4
 8007976:	4630      	mov	r0, r6
 8007978:	f000 f996 	bl	8007ca8 <_sbrk_r>
 800797c:	6038      	str	r0, [r7, #0]
 800797e:	4629      	mov	r1, r5
 8007980:	4630      	mov	r0, r6
 8007982:	f000 f991 	bl	8007ca8 <_sbrk_r>
 8007986:	1c43      	adds	r3, r0, #1
 8007988:	d123      	bne.n	80079d2 <_malloc_r+0x92>
 800798a:	230c      	movs	r3, #12
 800798c:	6033      	str	r3, [r6, #0]
 800798e:	4630      	mov	r0, r6
 8007990:	f000 fa7c 	bl	8007e8c <__malloc_unlock>
 8007994:	e7e3      	b.n	800795e <_malloc_r+0x1e>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	1b5b      	subs	r3, r3, r5
 800799a:	d417      	bmi.n	80079cc <_malloc_r+0x8c>
 800799c:	2b0b      	cmp	r3, #11
 800799e:	d903      	bls.n	80079a8 <_malloc_r+0x68>
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	441c      	add	r4, r3
 80079a4:	6025      	str	r5, [r4, #0]
 80079a6:	e004      	b.n	80079b2 <_malloc_r+0x72>
 80079a8:	6863      	ldr	r3, [r4, #4]
 80079aa:	42a2      	cmp	r2, r4
 80079ac:	bf0c      	ite	eq
 80079ae:	600b      	streq	r3, [r1, #0]
 80079b0:	6053      	strne	r3, [r2, #4]
 80079b2:	4630      	mov	r0, r6
 80079b4:	f000 fa6a 	bl	8007e8c <__malloc_unlock>
 80079b8:	f104 000b 	add.w	r0, r4, #11
 80079bc:	1d23      	adds	r3, r4, #4
 80079be:	f020 0007 	bic.w	r0, r0, #7
 80079c2:	1ac2      	subs	r2, r0, r3
 80079c4:	d0cc      	beq.n	8007960 <_malloc_r+0x20>
 80079c6:	1a1b      	subs	r3, r3, r0
 80079c8:	50a3      	str	r3, [r4, r2]
 80079ca:	e7c9      	b.n	8007960 <_malloc_r+0x20>
 80079cc:	4622      	mov	r2, r4
 80079ce:	6864      	ldr	r4, [r4, #4]
 80079d0:	e7cc      	b.n	800796c <_malloc_r+0x2c>
 80079d2:	1cc4      	adds	r4, r0, #3
 80079d4:	f024 0403 	bic.w	r4, r4, #3
 80079d8:	42a0      	cmp	r0, r4
 80079da:	d0e3      	beq.n	80079a4 <_malloc_r+0x64>
 80079dc:	1a21      	subs	r1, r4, r0
 80079de:	4630      	mov	r0, r6
 80079e0:	f000 f962 	bl	8007ca8 <_sbrk_r>
 80079e4:	3001      	adds	r0, #1
 80079e6:	d1dd      	bne.n	80079a4 <_malloc_r+0x64>
 80079e8:	e7cf      	b.n	800798a <_malloc_r+0x4a>
 80079ea:	bf00      	nop
 80079ec:	20000258 	.word	0x20000258
 80079f0:	2000025c 	.word	0x2000025c

080079f4 <__sfputc_r>:
 80079f4:	6893      	ldr	r3, [r2, #8]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	b410      	push	{r4}
 80079fc:	6093      	str	r3, [r2, #8]
 80079fe:	da08      	bge.n	8007a12 <__sfputc_r+0x1e>
 8007a00:	6994      	ldr	r4, [r2, #24]
 8007a02:	42a3      	cmp	r3, r4
 8007a04:	db01      	blt.n	8007a0a <__sfputc_r+0x16>
 8007a06:	290a      	cmp	r1, #10
 8007a08:	d103      	bne.n	8007a12 <__sfputc_r+0x1e>
 8007a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a0e:	f7fe ba45 	b.w	8005e9c <__swbuf_r>
 8007a12:	6813      	ldr	r3, [r2, #0]
 8007a14:	1c58      	adds	r0, r3, #1
 8007a16:	6010      	str	r0, [r2, #0]
 8007a18:	7019      	strb	r1, [r3, #0]
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <__sfputs_r>:
 8007a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a24:	4606      	mov	r6, r0
 8007a26:	460f      	mov	r7, r1
 8007a28:	4614      	mov	r4, r2
 8007a2a:	18d5      	adds	r5, r2, r3
 8007a2c:	42ac      	cmp	r4, r5
 8007a2e:	d101      	bne.n	8007a34 <__sfputs_r+0x12>
 8007a30:	2000      	movs	r0, #0
 8007a32:	e007      	b.n	8007a44 <__sfputs_r+0x22>
 8007a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a38:	463a      	mov	r2, r7
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f7ff ffda 	bl	80079f4 <__sfputc_r>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d1f3      	bne.n	8007a2c <__sfputs_r+0xa>
 8007a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a48 <_vfiprintf_r>:
 8007a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4c:	460d      	mov	r5, r1
 8007a4e:	b09d      	sub	sp, #116	; 0x74
 8007a50:	4614      	mov	r4, r2
 8007a52:	4698      	mov	r8, r3
 8007a54:	4606      	mov	r6, r0
 8007a56:	b118      	cbz	r0, 8007a60 <_vfiprintf_r+0x18>
 8007a58:	6983      	ldr	r3, [r0, #24]
 8007a5a:	b90b      	cbnz	r3, 8007a60 <_vfiprintf_r+0x18>
 8007a5c:	f7ff fa72 	bl	8006f44 <__sinit>
 8007a60:	4b89      	ldr	r3, [pc, #548]	; (8007c88 <_vfiprintf_r+0x240>)
 8007a62:	429d      	cmp	r5, r3
 8007a64:	d11b      	bne.n	8007a9e <_vfiprintf_r+0x56>
 8007a66:	6875      	ldr	r5, [r6, #4]
 8007a68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a6a:	07d9      	lsls	r1, r3, #31
 8007a6c:	d405      	bmi.n	8007a7a <_vfiprintf_r+0x32>
 8007a6e:	89ab      	ldrh	r3, [r5, #12]
 8007a70:	059a      	lsls	r2, r3, #22
 8007a72:	d402      	bmi.n	8007a7a <_vfiprintf_r+0x32>
 8007a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a76:	f7ff fb08 	bl	800708a <__retarget_lock_acquire_recursive>
 8007a7a:	89ab      	ldrh	r3, [r5, #12]
 8007a7c:	071b      	lsls	r3, r3, #28
 8007a7e:	d501      	bpl.n	8007a84 <_vfiprintf_r+0x3c>
 8007a80:	692b      	ldr	r3, [r5, #16]
 8007a82:	b9eb      	cbnz	r3, 8007ac0 <_vfiprintf_r+0x78>
 8007a84:	4629      	mov	r1, r5
 8007a86:	4630      	mov	r0, r6
 8007a88:	f7fe fa5a 	bl	8005f40 <__swsetup_r>
 8007a8c:	b1c0      	cbz	r0, 8007ac0 <_vfiprintf_r+0x78>
 8007a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a90:	07dc      	lsls	r4, r3, #31
 8007a92:	d50e      	bpl.n	8007ab2 <_vfiprintf_r+0x6a>
 8007a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a98:	b01d      	add	sp, #116	; 0x74
 8007a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9e:	4b7b      	ldr	r3, [pc, #492]	; (8007c8c <_vfiprintf_r+0x244>)
 8007aa0:	429d      	cmp	r5, r3
 8007aa2:	d101      	bne.n	8007aa8 <_vfiprintf_r+0x60>
 8007aa4:	68b5      	ldr	r5, [r6, #8]
 8007aa6:	e7df      	b.n	8007a68 <_vfiprintf_r+0x20>
 8007aa8:	4b79      	ldr	r3, [pc, #484]	; (8007c90 <_vfiprintf_r+0x248>)
 8007aaa:	429d      	cmp	r5, r3
 8007aac:	bf08      	it	eq
 8007aae:	68f5      	ldreq	r5, [r6, #12]
 8007ab0:	e7da      	b.n	8007a68 <_vfiprintf_r+0x20>
 8007ab2:	89ab      	ldrh	r3, [r5, #12]
 8007ab4:	0598      	lsls	r0, r3, #22
 8007ab6:	d4ed      	bmi.n	8007a94 <_vfiprintf_r+0x4c>
 8007ab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aba:	f7ff fae7 	bl	800708c <__retarget_lock_release_recursive>
 8007abe:	e7e9      	b.n	8007a94 <_vfiprintf_r+0x4c>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac4:	2320      	movs	r3, #32
 8007ac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aca:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ace:	2330      	movs	r3, #48	; 0x30
 8007ad0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c94 <_vfiprintf_r+0x24c>
 8007ad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ad8:	f04f 0901 	mov.w	r9, #1
 8007adc:	4623      	mov	r3, r4
 8007ade:	469a      	mov	sl, r3
 8007ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ae4:	b10a      	cbz	r2, 8007aea <_vfiprintf_r+0xa2>
 8007ae6:	2a25      	cmp	r2, #37	; 0x25
 8007ae8:	d1f9      	bne.n	8007ade <_vfiprintf_r+0x96>
 8007aea:	ebba 0b04 	subs.w	fp, sl, r4
 8007aee:	d00b      	beq.n	8007b08 <_vfiprintf_r+0xc0>
 8007af0:	465b      	mov	r3, fp
 8007af2:	4622      	mov	r2, r4
 8007af4:	4629      	mov	r1, r5
 8007af6:	4630      	mov	r0, r6
 8007af8:	f7ff ff93 	bl	8007a22 <__sfputs_r>
 8007afc:	3001      	adds	r0, #1
 8007afe:	f000 80aa 	beq.w	8007c56 <_vfiprintf_r+0x20e>
 8007b02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b04:	445a      	add	r2, fp
 8007b06:	9209      	str	r2, [sp, #36]	; 0x24
 8007b08:	f89a 3000 	ldrb.w	r3, [sl]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 80a2 	beq.w	8007c56 <_vfiprintf_r+0x20e>
 8007b12:	2300      	movs	r3, #0
 8007b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b1c:	f10a 0a01 	add.w	sl, sl, #1
 8007b20:	9304      	str	r3, [sp, #16]
 8007b22:	9307      	str	r3, [sp, #28]
 8007b24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b28:	931a      	str	r3, [sp, #104]	; 0x68
 8007b2a:	4654      	mov	r4, sl
 8007b2c:	2205      	movs	r2, #5
 8007b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b32:	4858      	ldr	r0, [pc, #352]	; (8007c94 <_vfiprintf_r+0x24c>)
 8007b34:	f7f8 fb54 	bl	80001e0 <memchr>
 8007b38:	9a04      	ldr	r2, [sp, #16]
 8007b3a:	b9d8      	cbnz	r0, 8007b74 <_vfiprintf_r+0x12c>
 8007b3c:	06d1      	lsls	r1, r2, #27
 8007b3e:	bf44      	itt	mi
 8007b40:	2320      	movmi	r3, #32
 8007b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b46:	0713      	lsls	r3, r2, #28
 8007b48:	bf44      	itt	mi
 8007b4a:	232b      	movmi	r3, #43	; 0x2b
 8007b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b50:	f89a 3000 	ldrb.w	r3, [sl]
 8007b54:	2b2a      	cmp	r3, #42	; 0x2a
 8007b56:	d015      	beq.n	8007b84 <_vfiprintf_r+0x13c>
 8007b58:	9a07      	ldr	r2, [sp, #28]
 8007b5a:	4654      	mov	r4, sl
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	f04f 0c0a 	mov.w	ip, #10
 8007b62:	4621      	mov	r1, r4
 8007b64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b68:	3b30      	subs	r3, #48	; 0x30
 8007b6a:	2b09      	cmp	r3, #9
 8007b6c:	d94e      	bls.n	8007c0c <_vfiprintf_r+0x1c4>
 8007b6e:	b1b0      	cbz	r0, 8007b9e <_vfiprintf_r+0x156>
 8007b70:	9207      	str	r2, [sp, #28]
 8007b72:	e014      	b.n	8007b9e <_vfiprintf_r+0x156>
 8007b74:	eba0 0308 	sub.w	r3, r0, r8
 8007b78:	fa09 f303 	lsl.w	r3, r9, r3
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	9304      	str	r3, [sp, #16]
 8007b80:	46a2      	mov	sl, r4
 8007b82:	e7d2      	b.n	8007b2a <_vfiprintf_r+0xe2>
 8007b84:	9b03      	ldr	r3, [sp, #12]
 8007b86:	1d19      	adds	r1, r3, #4
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	9103      	str	r1, [sp, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bfbb      	ittet	lt
 8007b90:	425b      	neglt	r3, r3
 8007b92:	f042 0202 	orrlt.w	r2, r2, #2
 8007b96:	9307      	strge	r3, [sp, #28]
 8007b98:	9307      	strlt	r3, [sp, #28]
 8007b9a:	bfb8      	it	lt
 8007b9c:	9204      	strlt	r2, [sp, #16]
 8007b9e:	7823      	ldrb	r3, [r4, #0]
 8007ba0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ba2:	d10c      	bne.n	8007bbe <_vfiprintf_r+0x176>
 8007ba4:	7863      	ldrb	r3, [r4, #1]
 8007ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba8:	d135      	bne.n	8007c16 <_vfiprintf_r+0x1ce>
 8007baa:	9b03      	ldr	r3, [sp, #12]
 8007bac:	1d1a      	adds	r2, r3, #4
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	9203      	str	r2, [sp, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bfb8      	it	lt
 8007bb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007bba:	3402      	adds	r4, #2
 8007bbc:	9305      	str	r3, [sp, #20]
 8007bbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ca4 <_vfiprintf_r+0x25c>
 8007bc2:	7821      	ldrb	r1, [r4, #0]
 8007bc4:	2203      	movs	r2, #3
 8007bc6:	4650      	mov	r0, sl
 8007bc8:	f7f8 fb0a 	bl	80001e0 <memchr>
 8007bcc:	b140      	cbz	r0, 8007be0 <_vfiprintf_r+0x198>
 8007bce:	2340      	movs	r3, #64	; 0x40
 8007bd0:	eba0 000a 	sub.w	r0, r0, sl
 8007bd4:	fa03 f000 	lsl.w	r0, r3, r0
 8007bd8:	9b04      	ldr	r3, [sp, #16]
 8007bda:	4303      	orrs	r3, r0
 8007bdc:	3401      	adds	r4, #1
 8007bde:	9304      	str	r3, [sp, #16]
 8007be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be4:	482c      	ldr	r0, [pc, #176]	; (8007c98 <_vfiprintf_r+0x250>)
 8007be6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bea:	2206      	movs	r2, #6
 8007bec:	f7f8 faf8 	bl	80001e0 <memchr>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d03f      	beq.n	8007c74 <_vfiprintf_r+0x22c>
 8007bf4:	4b29      	ldr	r3, [pc, #164]	; (8007c9c <_vfiprintf_r+0x254>)
 8007bf6:	bb1b      	cbnz	r3, 8007c40 <_vfiprintf_r+0x1f8>
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	3307      	adds	r3, #7
 8007bfc:	f023 0307 	bic.w	r3, r3, #7
 8007c00:	3308      	adds	r3, #8
 8007c02:	9303      	str	r3, [sp, #12]
 8007c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c06:	443b      	add	r3, r7
 8007c08:	9309      	str	r3, [sp, #36]	; 0x24
 8007c0a:	e767      	b.n	8007adc <_vfiprintf_r+0x94>
 8007c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c10:	460c      	mov	r4, r1
 8007c12:	2001      	movs	r0, #1
 8007c14:	e7a5      	b.n	8007b62 <_vfiprintf_r+0x11a>
 8007c16:	2300      	movs	r3, #0
 8007c18:	3401      	adds	r4, #1
 8007c1a:	9305      	str	r3, [sp, #20]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	f04f 0c0a 	mov.w	ip, #10
 8007c22:	4620      	mov	r0, r4
 8007c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c28:	3a30      	subs	r2, #48	; 0x30
 8007c2a:	2a09      	cmp	r2, #9
 8007c2c:	d903      	bls.n	8007c36 <_vfiprintf_r+0x1ee>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0c5      	beq.n	8007bbe <_vfiprintf_r+0x176>
 8007c32:	9105      	str	r1, [sp, #20]
 8007c34:	e7c3      	b.n	8007bbe <_vfiprintf_r+0x176>
 8007c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c3a:	4604      	mov	r4, r0
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e7f0      	b.n	8007c22 <_vfiprintf_r+0x1da>
 8007c40:	ab03      	add	r3, sp, #12
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	462a      	mov	r2, r5
 8007c46:	4b16      	ldr	r3, [pc, #88]	; (8007ca0 <_vfiprintf_r+0x258>)
 8007c48:	a904      	add	r1, sp, #16
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7fd fcce 	bl	80055ec <_printf_float>
 8007c50:	4607      	mov	r7, r0
 8007c52:	1c78      	adds	r0, r7, #1
 8007c54:	d1d6      	bne.n	8007c04 <_vfiprintf_r+0x1bc>
 8007c56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c58:	07d9      	lsls	r1, r3, #31
 8007c5a:	d405      	bmi.n	8007c68 <_vfiprintf_r+0x220>
 8007c5c:	89ab      	ldrh	r3, [r5, #12]
 8007c5e:	059a      	lsls	r2, r3, #22
 8007c60:	d402      	bmi.n	8007c68 <_vfiprintf_r+0x220>
 8007c62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c64:	f7ff fa12 	bl	800708c <__retarget_lock_release_recursive>
 8007c68:	89ab      	ldrh	r3, [r5, #12]
 8007c6a:	065b      	lsls	r3, r3, #25
 8007c6c:	f53f af12 	bmi.w	8007a94 <_vfiprintf_r+0x4c>
 8007c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c72:	e711      	b.n	8007a98 <_vfiprintf_r+0x50>
 8007c74:	ab03      	add	r3, sp, #12
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	462a      	mov	r2, r5
 8007c7a:	4b09      	ldr	r3, [pc, #36]	; (8007ca0 <_vfiprintf_r+0x258>)
 8007c7c:	a904      	add	r1, sp, #16
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f7fd ff58 	bl	8005b34 <_printf_i>
 8007c84:	e7e4      	b.n	8007c50 <_vfiprintf_r+0x208>
 8007c86:	bf00      	nop
 8007c88:	080080c4 	.word	0x080080c4
 8007c8c:	080080e4 	.word	0x080080e4
 8007c90:	080080a4 	.word	0x080080a4
 8007c94:	08008264 	.word	0x08008264
 8007c98:	0800826e 	.word	0x0800826e
 8007c9c:	080055ed 	.word	0x080055ed
 8007ca0:	08007a23 	.word	0x08007a23
 8007ca4:	0800826a 	.word	0x0800826a

08007ca8 <_sbrk_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4d06      	ldr	r5, [pc, #24]	; (8007cc4 <_sbrk_r+0x1c>)
 8007cac:	2300      	movs	r3, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4608      	mov	r0, r1
 8007cb2:	602b      	str	r3, [r5, #0]
 8007cb4:	f7f9 fc6c 	bl	8001590 <_sbrk>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d102      	bne.n	8007cc2 <_sbrk_r+0x1a>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	b103      	cbz	r3, 8007cc2 <_sbrk_r+0x1a>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	2000c428 	.word	0x2000c428

08007cc8 <__sread>:
 8007cc8:	b510      	push	{r4, lr}
 8007cca:	460c      	mov	r4, r1
 8007ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd0:	f000 f8e2 	bl	8007e98 <_read_r>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	bfab      	itete	ge
 8007cd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cda:	89a3      	ldrhlt	r3, [r4, #12]
 8007cdc:	181b      	addge	r3, r3, r0
 8007cde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ce2:	bfac      	ite	ge
 8007ce4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ce6:	81a3      	strhlt	r3, [r4, #12]
 8007ce8:	bd10      	pop	{r4, pc}

08007cea <__swrite>:
 8007cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cee:	461f      	mov	r7, r3
 8007cf0:	898b      	ldrh	r3, [r1, #12]
 8007cf2:	05db      	lsls	r3, r3, #23
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	4616      	mov	r6, r2
 8007cfa:	d505      	bpl.n	8007d08 <__swrite+0x1e>
 8007cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d00:	2302      	movs	r3, #2
 8007d02:	2200      	movs	r2, #0
 8007d04:	f000 f898 	bl	8007e38 <_lseek_r>
 8007d08:	89a3      	ldrh	r3, [r4, #12]
 8007d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d12:	81a3      	strh	r3, [r4, #12]
 8007d14:	4632      	mov	r2, r6
 8007d16:	463b      	mov	r3, r7
 8007d18:	4628      	mov	r0, r5
 8007d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1e:	f000 b817 	b.w	8007d50 <_write_r>

08007d22 <__sseek>:
 8007d22:	b510      	push	{r4, lr}
 8007d24:	460c      	mov	r4, r1
 8007d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d2a:	f000 f885 	bl	8007e38 <_lseek_r>
 8007d2e:	1c43      	adds	r3, r0, #1
 8007d30:	89a3      	ldrh	r3, [r4, #12]
 8007d32:	bf15      	itete	ne
 8007d34:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d3e:	81a3      	strheq	r3, [r4, #12]
 8007d40:	bf18      	it	ne
 8007d42:	81a3      	strhne	r3, [r4, #12]
 8007d44:	bd10      	pop	{r4, pc}

08007d46 <__sclose>:
 8007d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d4a:	f000 b831 	b.w	8007db0 <_close_r>
	...

08007d50 <_write_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d07      	ldr	r5, [pc, #28]	; (8007d70 <_write_r+0x20>)
 8007d54:	4604      	mov	r4, r0
 8007d56:	4608      	mov	r0, r1
 8007d58:	4611      	mov	r1, r2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	602a      	str	r2, [r5, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f7f9 fbc5 	bl	80014ee <_write>
 8007d64:	1c43      	adds	r3, r0, #1
 8007d66:	d102      	bne.n	8007d6e <_write_r+0x1e>
 8007d68:	682b      	ldr	r3, [r5, #0]
 8007d6a:	b103      	cbz	r3, 8007d6e <_write_r+0x1e>
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}
 8007d70:	2000c428 	.word	0x2000c428

08007d74 <__assert_func>:
 8007d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d76:	4614      	mov	r4, r2
 8007d78:	461a      	mov	r2, r3
 8007d7a:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <__assert_func+0x2c>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4605      	mov	r5, r0
 8007d80:	68d8      	ldr	r0, [r3, #12]
 8007d82:	b14c      	cbz	r4, 8007d98 <__assert_func+0x24>
 8007d84:	4b07      	ldr	r3, [pc, #28]	; (8007da4 <__assert_func+0x30>)
 8007d86:	9100      	str	r1, [sp, #0]
 8007d88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d8c:	4906      	ldr	r1, [pc, #24]	; (8007da8 <__assert_func+0x34>)
 8007d8e:	462b      	mov	r3, r5
 8007d90:	f000 f81e 	bl	8007dd0 <fiprintf>
 8007d94:	f000 f89f 	bl	8007ed6 <abort>
 8007d98:	4b04      	ldr	r3, [pc, #16]	; (8007dac <__assert_func+0x38>)
 8007d9a:	461c      	mov	r4, r3
 8007d9c:	e7f3      	b.n	8007d86 <__assert_func+0x12>
 8007d9e:	bf00      	nop
 8007da0:	20000060 	.word	0x20000060
 8007da4:	08008275 	.word	0x08008275
 8007da8:	08008282 	.word	0x08008282
 8007dac:	080082b0 	.word	0x080082b0

08007db0 <_close_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4d06      	ldr	r5, [pc, #24]	; (8007dcc <_close_r+0x1c>)
 8007db4:	2300      	movs	r3, #0
 8007db6:	4604      	mov	r4, r0
 8007db8:	4608      	mov	r0, r1
 8007dba:	602b      	str	r3, [r5, #0]
 8007dbc:	f7f9 fbb3 	bl	8001526 <_close>
 8007dc0:	1c43      	adds	r3, r0, #1
 8007dc2:	d102      	bne.n	8007dca <_close_r+0x1a>
 8007dc4:	682b      	ldr	r3, [r5, #0]
 8007dc6:	b103      	cbz	r3, 8007dca <_close_r+0x1a>
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	bd38      	pop	{r3, r4, r5, pc}
 8007dcc:	2000c428 	.word	0x2000c428

08007dd0 <fiprintf>:
 8007dd0:	b40e      	push	{r1, r2, r3}
 8007dd2:	b503      	push	{r0, r1, lr}
 8007dd4:	4601      	mov	r1, r0
 8007dd6:	ab03      	add	r3, sp, #12
 8007dd8:	4805      	ldr	r0, [pc, #20]	; (8007df0 <fiprintf+0x20>)
 8007dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dde:	6800      	ldr	r0, [r0, #0]
 8007de0:	9301      	str	r3, [sp, #4]
 8007de2:	f7ff fe31 	bl	8007a48 <_vfiprintf_r>
 8007de6:	b002      	add	sp, #8
 8007de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dec:	b003      	add	sp, #12
 8007dee:	4770      	bx	lr
 8007df0:	20000060 	.word	0x20000060

08007df4 <_fstat_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4d07      	ldr	r5, [pc, #28]	; (8007e14 <_fstat_r+0x20>)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	4611      	mov	r1, r2
 8007e00:	602b      	str	r3, [r5, #0]
 8007e02:	f7f9 fb9c 	bl	800153e <_fstat>
 8007e06:	1c43      	adds	r3, r0, #1
 8007e08:	d102      	bne.n	8007e10 <_fstat_r+0x1c>
 8007e0a:	682b      	ldr	r3, [r5, #0]
 8007e0c:	b103      	cbz	r3, 8007e10 <_fstat_r+0x1c>
 8007e0e:	6023      	str	r3, [r4, #0]
 8007e10:	bd38      	pop	{r3, r4, r5, pc}
 8007e12:	bf00      	nop
 8007e14:	2000c428 	.word	0x2000c428

08007e18 <_isatty_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4d06      	ldr	r5, [pc, #24]	; (8007e34 <_isatty_r+0x1c>)
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	4604      	mov	r4, r0
 8007e20:	4608      	mov	r0, r1
 8007e22:	602b      	str	r3, [r5, #0]
 8007e24:	f7f9 fb9b 	bl	800155e <_isatty>
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d102      	bne.n	8007e32 <_isatty_r+0x1a>
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	b103      	cbz	r3, 8007e32 <_isatty_r+0x1a>
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
 8007e34:	2000c428 	.word	0x2000c428

08007e38 <_lseek_r>:
 8007e38:	b538      	push	{r3, r4, r5, lr}
 8007e3a:	4d07      	ldr	r5, [pc, #28]	; (8007e58 <_lseek_r+0x20>)
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	4608      	mov	r0, r1
 8007e40:	4611      	mov	r1, r2
 8007e42:	2200      	movs	r2, #0
 8007e44:	602a      	str	r2, [r5, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	f7f9 fb94 	bl	8001574 <_lseek>
 8007e4c:	1c43      	adds	r3, r0, #1
 8007e4e:	d102      	bne.n	8007e56 <_lseek_r+0x1e>
 8007e50:	682b      	ldr	r3, [r5, #0]
 8007e52:	b103      	cbz	r3, 8007e56 <_lseek_r+0x1e>
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	bd38      	pop	{r3, r4, r5, pc}
 8007e58:	2000c428 	.word	0x2000c428

08007e5c <__ascii_mbtowc>:
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	b901      	cbnz	r1, 8007e62 <__ascii_mbtowc+0x6>
 8007e60:	a901      	add	r1, sp, #4
 8007e62:	b142      	cbz	r2, 8007e76 <__ascii_mbtowc+0x1a>
 8007e64:	b14b      	cbz	r3, 8007e7a <__ascii_mbtowc+0x1e>
 8007e66:	7813      	ldrb	r3, [r2, #0]
 8007e68:	600b      	str	r3, [r1, #0]
 8007e6a:	7812      	ldrb	r2, [r2, #0]
 8007e6c:	1e10      	subs	r0, r2, #0
 8007e6e:	bf18      	it	ne
 8007e70:	2001      	movne	r0, #1
 8007e72:	b002      	add	sp, #8
 8007e74:	4770      	bx	lr
 8007e76:	4610      	mov	r0, r2
 8007e78:	e7fb      	b.n	8007e72 <__ascii_mbtowc+0x16>
 8007e7a:	f06f 0001 	mvn.w	r0, #1
 8007e7e:	e7f8      	b.n	8007e72 <__ascii_mbtowc+0x16>

08007e80 <__malloc_lock>:
 8007e80:	4801      	ldr	r0, [pc, #4]	; (8007e88 <__malloc_lock+0x8>)
 8007e82:	f7ff b902 	b.w	800708a <__retarget_lock_acquire_recursive>
 8007e86:	bf00      	nop
 8007e88:	2000c420 	.word	0x2000c420

08007e8c <__malloc_unlock>:
 8007e8c:	4801      	ldr	r0, [pc, #4]	; (8007e94 <__malloc_unlock+0x8>)
 8007e8e:	f7ff b8fd 	b.w	800708c <__retarget_lock_release_recursive>
 8007e92:	bf00      	nop
 8007e94:	2000c420 	.word	0x2000c420

08007e98 <_read_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4d07      	ldr	r5, [pc, #28]	; (8007eb8 <_read_r+0x20>)
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	4608      	mov	r0, r1
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	602a      	str	r2, [r5, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f7f9 fb04 	bl	80014b4 <_read>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	d102      	bne.n	8007eb6 <_read_r+0x1e>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	b103      	cbz	r3, 8007eb6 <_read_r+0x1e>
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	2000c428 	.word	0x2000c428

08007ebc <__ascii_wctomb>:
 8007ebc:	b149      	cbz	r1, 8007ed2 <__ascii_wctomb+0x16>
 8007ebe:	2aff      	cmp	r2, #255	; 0xff
 8007ec0:	bf85      	ittet	hi
 8007ec2:	238a      	movhi	r3, #138	; 0x8a
 8007ec4:	6003      	strhi	r3, [r0, #0]
 8007ec6:	700a      	strbls	r2, [r1, #0]
 8007ec8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007ecc:	bf98      	it	ls
 8007ece:	2001      	movls	r0, #1
 8007ed0:	4770      	bx	lr
 8007ed2:	4608      	mov	r0, r1
 8007ed4:	4770      	bx	lr

08007ed6 <abort>:
 8007ed6:	b508      	push	{r3, lr}
 8007ed8:	2006      	movs	r0, #6
 8007eda:	f000 f82b 	bl	8007f34 <raise>
 8007ede:	2001      	movs	r0, #1
 8007ee0:	f7f9 fade 	bl	80014a0 <_exit>

08007ee4 <_raise_r>:
 8007ee4:	291f      	cmp	r1, #31
 8007ee6:	b538      	push	{r3, r4, r5, lr}
 8007ee8:	4604      	mov	r4, r0
 8007eea:	460d      	mov	r5, r1
 8007eec:	d904      	bls.n	8007ef8 <_raise_r+0x14>
 8007eee:	2316      	movs	r3, #22
 8007ef0:	6003      	str	r3, [r0, #0]
 8007ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ef6:	bd38      	pop	{r3, r4, r5, pc}
 8007ef8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007efa:	b112      	cbz	r2, 8007f02 <_raise_r+0x1e>
 8007efc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f00:	b94b      	cbnz	r3, 8007f16 <_raise_r+0x32>
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 f830 	bl	8007f68 <_getpid_r>
 8007f08:	462a      	mov	r2, r5
 8007f0a:	4601      	mov	r1, r0
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f12:	f000 b817 	b.w	8007f44 <_kill_r>
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d00a      	beq.n	8007f30 <_raise_r+0x4c>
 8007f1a:	1c59      	adds	r1, r3, #1
 8007f1c:	d103      	bne.n	8007f26 <_raise_r+0x42>
 8007f1e:	2316      	movs	r3, #22
 8007f20:	6003      	str	r3, [r0, #0]
 8007f22:	2001      	movs	r0, #1
 8007f24:	e7e7      	b.n	8007ef6 <_raise_r+0x12>
 8007f26:	2400      	movs	r4, #0
 8007f28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	4798      	blx	r3
 8007f30:	2000      	movs	r0, #0
 8007f32:	e7e0      	b.n	8007ef6 <_raise_r+0x12>

08007f34 <raise>:
 8007f34:	4b02      	ldr	r3, [pc, #8]	; (8007f40 <raise+0xc>)
 8007f36:	4601      	mov	r1, r0
 8007f38:	6818      	ldr	r0, [r3, #0]
 8007f3a:	f7ff bfd3 	b.w	8007ee4 <_raise_r>
 8007f3e:	bf00      	nop
 8007f40:	20000060 	.word	0x20000060

08007f44 <_kill_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4d07      	ldr	r5, [pc, #28]	; (8007f64 <_kill_r+0x20>)
 8007f48:	2300      	movs	r3, #0
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	4608      	mov	r0, r1
 8007f4e:	4611      	mov	r1, r2
 8007f50:	602b      	str	r3, [r5, #0]
 8007f52:	f7f9 fa95 	bl	8001480 <_kill>
 8007f56:	1c43      	adds	r3, r0, #1
 8007f58:	d102      	bne.n	8007f60 <_kill_r+0x1c>
 8007f5a:	682b      	ldr	r3, [r5, #0]
 8007f5c:	b103      	cbz	r3, 8007f60 <_kill_r+0x1c>
 8007f5e:	6023      	str	r3, [r4, #0]
 8007f60:	bd38      	pop	{r3, r4, r5, pc}
 8007f62:	bf00      	nop
 8007f64:	2000c428 	.word	0x2000c428

08007f68 <_getpid_r>:
 8007f68:	f7f9 ba82 	b.w	8001470 <_getpid>

08007f6c <_init>:
 8007f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6e:	bf00      	nop
 8007f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f72:	bc08      	pop	{r3}
 8007f74:	469e      	mov	lr, r3
 8007f76:	4770      	bx	lr

08007f78 <_fini>:
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7a:	bf00      	nop
 8007f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7e:	bc08      	pop	{r3}
 8007f80:	469e      	mov	lr, r3
 8007f82:	4770      	bx	lr
