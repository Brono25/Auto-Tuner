
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d648  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002588  0800d7d8  0800d7d8  0001d7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd60  0800fd60  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  0800fd60  0800fd60  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fd60  0800fd60  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd60  0800fd60  0001fd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd64  0800fd64  0001fd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800fd68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004840  20000208  0800ff70  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a48  0800ff70  00024a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f523  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db3  00000000  00000000  0003f75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00043510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d0  00000000  00000000  00044da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263b9  00000000  00000000  00046470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bbe8  00000000  00000000  0006c829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3b03  00000000  00000000  00088411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  0016bf14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007af8  00000000  00000000  0016bfd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000017de  00000000  00000000  00173ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d7c0 	.word	0x0800d7c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800d7c0 	.word	0x0800d7c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8000c50:	2254      	movs	r2, #84	; 0x54
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <MPU6050_Init+0x1c>)
 8000c56:	f009 f805 	bl	8009c64 <memcpy>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000224 	.word	0x20000224

08000c68 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	4613      	mov	r3, r2
 8000c76:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8000c78:	23d0      	movs	r3, #208	; 0xd0
 8000c7a:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	b299      	uxth	r1, r3
 8000c84:	f107 020c 	add.w	r2, r7, #12
 8000c88:	230a      	movs	r3, #10
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <I2C_Read+0x48>)
 8000c90:	f004 fefa 	bl	8005a88 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	b299      	uxth	r1, r3
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	2264      	movs	r2, #100	; 0x64
 8000c9e:	9200      	str	r2, [sp, #0]
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <I2C_Read+0x48>)
 8000ca4:	f004 ffe4 	bl	8005c70 <HAL_I2C_Master_Receive>
}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000224 	.word	0x20000224

08000cb4 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	4603      	mov	r3, r0
 8000cbc:	460a      	mov	r2, r1
 8000cbe:	71fb      	strb	r3, [r7, #7]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8000cc8:	79bb      	ldrb	r3, [r7, #6]
 8000cca:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8000ccc:	23d0      	movs	r3, #208	; 0xd0
 8000cce:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	b299      	uxth	r1, r3
 8000cd4:	f107 020c 	add.w	r2, r7, #12
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2302      	movs	r3, #2
 8000cde:	4803      	ldr	r0, [pc, #12]	; (8000cec <I2C_Write8+0x38>)
 8000ce0:	f004 fed2 	bl	8005a88 <HAL_I2C_Master_Transmit>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000224 	.word	0x20000224

08000cf0 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]
	//Clock Source
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	206b      	movs	r0, #107	; 0x6b
 8000d00:	f7ff ffd8 	bl	8000cb4 <I2C_Write8>
	HAL_Delay(100);
 8000d04:	2064      	movs	r0, #100	; 0x64
 8000d06:	f002 fe59 	bl	80039bc <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	791b      	ldrb	r3, [r3, #4]
 8000d18:	019b      	lsls	r3, r3, #6
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d20:	b25a      	sxtb	r2, r3
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	b25b      	sxtb	r3, r3
 8000d2a:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	206b      	movs	r0, #107	; 0x6b
 8000d32:	f7ff ffbf 	bl	8000cb4 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8000d36:	2064      	movs	r0, #100	; 0x64
 8000d38:	f002 fe40 	bl	80039bc <HAL_Delay>

	//Set the Digital Low Pass Filter
	Buffer = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	78db      	ldrb	r3, [r3, #3]
 8000d44:	f003 0307 	and.w	r3, r3, #7
 8000d48:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	201a      	movs	r0, #26
 8000d50:	f7ff ffb0 	bl	8000cb4 <I2C_Write8>

	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	785b      	ldrb	r3, [r3, #1]
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f003 0318 	and.w	r3, r3, #24
 8000d64:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	201b      	movs	r0, #27
 8000d6c:	f7ff ffa2 	bl	8000cb4 <I2C_Write8>

	//Select the Accelerometer Full Scale Range
	Buffer = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	789b      	ldrb	r3, [r3, #2]
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	f003 0318 	and.w	r3, r3, #24
 8000d80:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	4619      	mov	r1, r3
 8000d86:	201c      	movs	r0, #28
 8000d88:	f7ff ff94 	bl	8000cb4 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8000d8c:	2004      	movs	r0, #4
 8000d8e:	f000 f857 	bl	8000e40 <MPU6050_Set_SMPRT_DIV>


	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	789b      	ldrb	r3, [r3, #2]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d81a      	bhi.n	8000dd0 <MPU6050_Config+0xe0>
 8000d9a:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <MPU6050_Config+0xb0>)
 8000d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da0:	08000db1 	.word	0x08000db1
 8000da4:	08000db9 	.word	0x08000db9
 8000da8:	08000dc1 	.word	0x08000dc1
 8000dac:	08000dc9 	.word	0x08000dc9
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MPU6050_Config+0x12c>)
 8000db2:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <MPU6050_Config+0x130>)
 8000db4:	601a      	str	r2, [r3, #0]
			break;
 8000db6:	e00c      	b.n	8000dd2 <MPU6050_Config+0xe2>

		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MPU6050_Config+0x12c>)
 8000dba:	4a1a      	ldr	r2, [pc, #104]	; (8000e24 <MPU6050_Config+0x134>)
 8000dbc:	601a      	str	r2, [r3, #0]
				break;
 8000dbe:	e008      	b.n	8000dd2 <MPU6050_Config+0xe2>

		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MPU6050_Config+0x12c>)
 8000dc2:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <MPU6050_Config+0x138>)
 8000dc4:	601a      	str	r2, [r3, #0]
			break;
 8000dc6:	e004      	b.n	8000dd2 <MPU6050_Config+0xe2>

		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MPU6050_Config+0x12c>)
 8000dca:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <MPU6050_Config+0x13c>)
 8000dcc:	601a      	str	r2, [r3, #0]
			break;
 8000dce:	e000      	b.n	8000dd2 <MPU6050_Config+0xe2>

		default:
			break;
 8000dd0:	bf00      	nop
	}
	//Gyroscope Scaling Factor
	switch (config->Gyro_Full_Scale)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	785b      	ldrb	r3, [r3, #1]
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d81a      	bhi.n	8000e10 <MPU6050_Config+0x120>
 8000dda:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <MPU6050_Config+0xf0>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000df1 	.word	0x08000df1
 8000de4:	08000df9 	.word	0x08000df9
 8000de8:	08000e01 	.word	0x08000e01
 8000dec:	08000e09 	.word	0x08000e09
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MPU6050_Config+0x140>)
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <MPU6050_Config+0x144>)
 8000df4:	601a      	str	r2, [r3, #0]
			break;
 8000df6:	e00c      	b.n	8000e12 <MPU6050_Config+0x122>

		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <MPU6050_Config+0x140>)
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <MPU6050_Config+0x148>)
 8000dfc:	601a      	str	r2, [r3, #0]
				break;
 8000dfe:	e008      	b.n	8000e12 <MPU6050_Config+0x122>

		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MPU6050_Config+0x140>)
 8000e02:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <MPU6050_Config+0x14c>)
 8000e04:	601a      	str	r2, [r3, #0]
			break;
 8000e06:	e004      	b.n	8000e12 <MPU6050_Config+0x122>

		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MPU6050_Config+0x140>)
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <MPU6050_Config+0x130>)
 8000e0c:	601a      	str	r2, [r3, #0]
			break;
 8000e0e:	e000      	b.n	8000e12 <MPU6050_Config+0x122>

		default:
			break;
 8000e10:	bf00      	nop
	}

}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000278 	.word	0x20000278
 8000e20:	3d7a0000 	.word	0x3d7a0000
 8000e24:	3dfa0000 	.word	0x3dfa0000
 8000e28:	3e7a0000 	.word	0x3e7a0000
 8000e2c:	3efa0000 	.word	0x3efa0000
 8000e30:	2000027c 	.word	0x2000027c
 8000e34:	3bfa0000 	.word	0x3bfa0000
 8000e38:	3c7a0000 	.word	0x3c7a0000
 8000e3c:	3cfa0000 	.word	0x3cfa0000

08000e40 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	2019      	movs	r0, #25
 8000e50:	f7ff ff30 	bl	8000cb4 <I2C_Write8>
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <MPU6050_Get_Accel_RawData>:

}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	3301      	adds	r3, #1
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	203a      	movs	r0, #58	; 0x3a
 8000e70:	f7ff fefa 	bl	8000c68 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8000e74:	7f7b      	ldrb	r3, [r7, #29]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d04f      	beq.n	8000f1a <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	2206      	movs	r2, #6
 8000e80:	4619      	mov	r1, r3
 8000e82:	203b      	movs	r0, #59	; 0x3b
 8000e84:	f7ff fef0 	bl	8000c68 <I2C_Read>

		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8000e88:	7d3b      	ldrb	r3, [r7, #20]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	7d7b      	ldrb	r3, [r7, #21]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	4413      	add	r3, r2
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8000e9e:	7dbb      	ldrb	r3, [r7, #22]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	4413      	add	r3, r2
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8000eb4:	7e3b      	ldrb	r3, [r7, #24]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	7e7b      	ldrb	r3, [r7, #25]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	4413      	add	r3, r2
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	2206      	movs	r2, #6
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	2043      	movs	r0, #67	; 0x43
 8000ed4:	f7ff fec8 	bl	8000c68 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8000ed8:	7b3b      	ldrb	r3, [r7, #12]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	7b7b      	ldrb	r3, [r7, #13]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MPU6050_Get_Accel_RawData+0xc8>)
 8000eec:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 8000eee:	7bbb      	ldrb	r3, [r7, #14]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MPU6050_Get_Accel_RawData+0xc8>)
 8000f02:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 8000f04:	7c3b      	ldrb	r3, [r7, #16]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	7c7b      	ldrb	r3, [r7, #17]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4413      	add	r3, r2
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <MPU6050_Get_Accel_RawData+0xc8>)
 8000f18:	809a      	strh	r2, [r3, #4]
	}
}
 8000f1a:	bf00      	nop
 8000f1c:	3720      	adds	r7, #32
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000280 	.word	0x20000280

08000f28 <MPU6050_Get_Accel_Scale>:

//10- Get Accel scaled data (g unit of gravity, 1g = 9.81m/s2)
void MPU6050_Get_Accel_Scale(ScaledData_Def *scaledDef)
{
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

	RawData_Def AccelRData;
	MPU6050_Get_Accel_RawData(&AccelRData);
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff91 	bl	8000e5c <MPU6050_Get_Accel_RawData>

	scaledDef->x = atan2(AccelRData.y, AccelRData.z) * 57.3;
 8000f3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff faf0 	bl	8000524 <__aeabi_i2d>
 8000f44:	4604      	mov	r4, r0
 8000f46:	460d      	mov	r5, r1
 8000f48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fae9 	bl	8000524 <__aeabi_i2d>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	ec43 2b11 	vmov	d1, r2, r3
 8000f5a:	ec45 4b10 	vmov	d0, r4, r5
 8000f5e:	f00b fded 	bl	800cb3c <atan2>
 8000f62:	ec51 0b10 	vmov	r0, r1, d0
 8000f66:	a328      	add	r3, pc, #160	; (adr r3, 8001008 <MPU6050_Get_Accel_Scale+0xe0>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	f7ff fb44 	bl	80005f8 <__aeabi_dmul>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fe16 	bl	8000ba8 <__aeabi_d2f>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	601a      	str	r2, [r3, #0]
	scaledDef->y = atan2(-AccelRData.x,sqrt((AccelRData.y)^2 + (AccelRData.z)^2)) * 57.3;
 8000f82:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f86:	425b      	negs	r3, r3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff facb 	bl	8000524 <__aeabi_i2d>
 8000f8e:	4604      	mov	r4, r0
 8000f90:	460d      	mov	r5, r1
 8000f92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f96:	461a      	mov	r2, r3
 8000f98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	4053      	eors	r3, r2
 8000fa0:	f083 0302 	eor.w	r3, r3, #2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fabd 	bl	8000524 <__aeabi_i2d>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	ec43 2b10 	vmov	d0, r2, r3
 8000fb2:	f00b fe55 	bl	800cc60 <sqrt>
 8000fb6:	eeb0 7a40 	vmov.f32	s14, s0
 8000fba:	eef0 7a60 	vmov.f32	s15, s1
 8000fbe:	eeb0 1a47 	vmov.f32	s2, s14
 8000fc2:	eef0 1a67 	vmov.f32	s3, s15
 8000fc6:	ec45 4b10 	vmov	d0, r4, r5
 8000fca:	f00b fdb7 	bl	800cb3c <atan2>
 8000fce:	ec51 0b10 	vmov	r0, r1, d0
 8000fd2:	a30d      	add	r3, pc, #52	; (adr r3, 8001008 <MPU6050_Get_Accel_Scale+0xe0>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff fb0e 	bl	80005f8 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fde0 	bl	8000ba8 <__aeabi_d2f>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	605a      	str	r2, [r3, #4]
	scaledDef->z = (AccelRData.z);
 8000fee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	edc3 7a02 	vstr	s15, [r3, #8]

	//Accel Scale data
//	scaledDef->x = ((AccelRData.x+0.0f)*accelScalingFactor);
//	scaledDef->y = ((AccelRData.y+0.0f)*accelScalingFactor);
//	scaledDef->z = ((AccelRData.z+0.0f)*accelScalingFactor);
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bdb0      	pop	{r4, r5, r7, pc}
 8001008:	66666666 	.word	0x66666666
 800100c:	404ca666 	.word	0x404ca666

08001010 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <MPU6050_Get_Gyro_RawData+0x34>)
 800101a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <MPU6050_Get_Gyro_RawData+0x34>)
 8001024:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <MPU6050_Get_Gyro_RawData+0x34>)
 800102e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	809a      	strh	r2, [r3, #4]

}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000280 	.word	0x20000280

08001048 <MPU6050_Get_Gyro_Scale>:

//13- Get Gyro scaled data
void MPU6050_Get_Gyro_Scale(ScaledData_Def *scaledDef)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	RawData_Def myGyroRaw;
	MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ffdb 	bl	8001010 <MPU6050_Get_Gyro_RawData>

	//Gyro Scale data
	scaledDef->x = (myGyroRaw.x)*gyroScalingFactor; // x-Axis
 800105a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MPU6050_Get_Gyro_Scale+0x70>)
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = (myGyroRaw.y)*gyroScalingFactor; // y-Axis
 8001076:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <MPU6050_Get_Gyro_Scale+0x70>)
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = (myGyroRaw.z)*gyroScalingFactor; // z-Axis
 8001092:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MPU6050_Get_Gyro_Scale+0x70>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000027c 	.word	0x2000027c

080010bc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM16)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a22      	ldr	r2, [pc, #136]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d12a      	bne.n	8001124 <HAL_TIM_PeriodElapsedCallback+0x68>
	{
		MPU6050_Get_Accel_Scale(&myAccelScaled);
 80010ce:	4822      	ldr	r0, [pc, #136]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80010d0:	f7ff ff2a 	bl	8000f28 <MPU6050_Get_Accel_Scale>
		MPU6050_Get_Gyro_Scale(&myGyroScaled);
 80010d4:	4821      	ldr	r0, [pc, #132]	; (800115c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80010d6:	f7ff ffb7 	bl	8001048 <MPU6050_Get_Gyro_Scale>
		if (myAccelScaled.x > 0 && screenflip == 0)
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e8:	dd09      	ble.n	80010fe <HAL_TIM_PeriodElapsedCallback+0x42>
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d105      	bne.n	80010fe <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			ssd1306_Init1();
 80010f2:	f002 fb1f 	bl	8003734 <ssd1306_Init1>
			screenflip = 1;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
		HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
	}
}
 80010fc:	e026      	b.n	800114c <HAL_TIM_PeriodElapsedCallback+0x90>
		} else if (myAccelScaled.x < 0 && screenflip == 1)
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110c:	d400      	bmi.n	8001110 <HAL_TIM_PeriodElapsedCallback+0x54>
}
 800110e:	e01d      	b.n	800114c <HAL_TIM_PeriodElapsedCallback+0x90>
		} else if (myAccelScaled.x < 0 && screenflip == 1)
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d119      	bne.n	800114c <HAL_TIM_PeriodElapsedCallback+0x90>
			ssd1306_Init2();
 8001118:	f002 fb74 	bl	8003804 <ssd1306_Init2>
			screenflip = 0;
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
}
 8001122:	e013      	b.n	800114c <HAL_TIM_PeriodElapsedCallback+0x90>
	} else if (htim->Instance == TIM2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800112c:	d10e      	bne.n	800114c <HAL_TIM_PeriodElapsedCallback+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2102      	movs	r1, #2
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001136:	f004 fbe7 	bl	8005908 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800113a:	2064      	movs	r0, #100	; 0x64
 800113c:	f002 fc3e 	bl	80039bc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2102      	movs	r1, #2
 8001144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001148:	f004 fbde 	bl	8005908 <HAL_GPIO_WritePin>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40014400 	.word	0x40014400
 8001158:	20002884 	.word	0x20002884
 800115c:	20004a18 	.word	0x20004a18
 8001160:	200002b4 	.word	0x200002b4

08001164 <init_tunings>:


/*  HAL_TIM_SET_PRESCALER(&htim2,newValue); */

void init_tunings()
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
	curr_target_string[0] = E2;
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <init_tunings+0x34>)
 800116a:	4a0c      	ldr	r2, [pc, #48]	; (800119c <init_tunings+0x38>)
 800116c:	601a      	str	r2, [r3, #0]
	curr_target_string[1] = A2;
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <init_tunings+0x34>)
 8001170:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <init_tunings+0x3c>)
 8001172:	605a      	str	r2, [r3, #4]
	curr_target_string[2] = D3;
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <init_tunings+0x34>)
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <init_tunings+0x40>)
 8001178:	609a      	str	r2, [r3, #8]
	curr_target_string[3] = G3;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <init_tunings+0x34>)
 800117c:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <init_tunings+0x44>)
 800117e:	60da      	str	r2, [r3, #12]
	curr_target_string[4] = B3;
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <init_tunings+0x34>)
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <init_tunings+0x48>)
 8001184:	611a      	str	r2, [r3, #16]
	curr_target_string[5] = E4;
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <init_tunings+0x34>)
 8001188:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <init_tunings+0x4c>)
 800118a:	615a      	str	r2, [r3, #20]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20002788 	.word	0x20002788
 800119c:	42a4d1ec 	.word	0x42a4d1ec
 80011a0:	42dc0000 	.word	0x42dc0000
 80011a4:	4312d47b 	.word	0x4312d47b
 80011a8:	43440000 	.word	0x43440000
 80011ac:	4376f0a4 	.word	0x4376f0a4
 80011b0:	43a4d0a4 	.word	0x43a4d0a4

080011b4 <adc_to_guitar_signal>:


void adc_to_guitar_signal(uint16_t *src, float32_t *guitar_signal)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < BLOCK_SIZE; i++)
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e015      	b.n	80011f0 <adc_to_guitar_signal+0x3c>
	{
		guitar_signal[i] = (float32_t) src[i] - DC_BIAS;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	4413      	add	r3, r2
 80011de:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001210 <adc_to_guitar_signal+0x5c>
 80011e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011e6:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < BLOCK_SIZE; i++)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3301      	adds	r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f6:	dbe5      	blt.n	80011c4 <adc_to_guitar_signal+0x10>
	}
	arm_biquad_cascade_df1_f32(&iir_settings, guitar_signal, guitar_signal, BLOCK_SIZE);
 80011f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <adc_to_guitar_signal+0x60>)
 8001202:	f008 fbef 	bl	80099e4 <arm_biquad_cascade_df1_f32>
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	450e8000 	.word	0x450e8000
 8001214:	200049c0 	.word	0x200049c0

08001218 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	in_ptr = &adc_buff[0];
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001222:	4a15      	ldr	r2, [pc, #84]	; (8001278 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8001224:	601a      	str	r2, [r3, #0]
	adc_to_guitar_signal(in_ptr, &guitar_signal[0]);
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4914      	ldr	r1, [pc, #80]	; (800127c <HAL_ADC_ConvHalfCpltCallback+0x64>)
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ffc1 	bl	80011b4 <adc_to_guitar_signal>

	float32_t *p  = &guitar_signal[0];
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8001234:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < BLOCK_SIZE; i++)
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	e013      	b.n	8001264 <HAL_ADC_ConvHalfCpltCallback+0x4c>
	{
		if(*p > THRESHOLD)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001280 <HAL_ADC_ConvHalfCpltCallback+0x68>
 8001246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	dd03      	ble.n	8001258 <HAL_ADC_ConvHalfCpltCallback+0x40>
		{
			callback_state = 1;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]
			return;
 8001256:	e009      	b.n	800126c <HAL_ADC_ConvHalfCpltCallback+0x54>
		}
		p++;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3304      	adds	r3, #4
 800125c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < BLOCK_SIZE; i++)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	3301      	adds	r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800126a:	dbe7      	blt.n	800123c <HAL_ADC_ConvHalfCpltCallback+0x24>
	}
}
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20002890 	.word	0x20002890
 8001278:	20003974 	.word	0x20003974
 800127c:	200028dc 	.word	0x200028dc
 8001280:	44160000 	.word	0x44160000
 8001284:	2000028c 	.word	0x2000028c

08001288 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	in_ptr = &adc_buff[BLOCK_SIZE];
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001292:	4a15      	ldr	r2, [pc, #84]	; (80012e8 <HAL_ADC_ConvCpltCallback+0x60>)
 8001294:	601a      	str	r2, [r3, #0]
	adc_to_guitar_signal(in_ptr, &guitar_signal[0]);
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4914      	ldr	r1, [pc, #80]	; (80012ec <HAL_ADC_ConvCpltCallback+0x64>)
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff89 	bl	80011b4 <adc_to_guitar_signal>

	float32_t *p  = &guitar_signal[0];
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_ADC_ConvCpltCallback+0x64>)
 80012a4:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < BLOCK_SIZE; i++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	e013      	b.n	80012d4 <HAL_ADC_ConvCpltCallback+0x4c>
	{
		if(*p > THRESHOLD)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80012f0 <HAL_ADC_ConvCpltCallback+0x68>
 80012b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012be:	dd03      	ble.n	80012c8 <HAL_ADC_ConvCpltCallback+0x40>
		{
			callback_state = 1;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_ADC_ConvCpltCallback+0x6c>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
			return;
 80012c6:	e009      	b.n	80012dc <HAL_ADC_ConvCpltCallback+0x54>
		}
		p++;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3304      	adds	r3, #4
 80012cc:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < BLOCK_SIZE; i++)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3301      	adds	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012da:	dbe7      	blt.n	80012ac <HAL_ADC_ConvCpltCallback+0x24>
	}
}
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20002890 	.word	0x20002890
 80012e8:	20004174 	.word	0x20004174
 80012ec:	200028dc 	.word	0x200028dc
 80012f0:	44160000 	.word	0x44160000
 80012f4:	2000028c 	.word	0x2000028c

080012f8 <get_frequency>:
  float32_t fb = *(const float32_t*) b;
  return (fa > fb) - (fa < fb);
}

void get_frequency(float32_t *signal, float32_t target_freq, float32_t *out_freq)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	ed87 0a02 	vstr	s0, [r7, #8]
 8001304:	6079      	str	r1, [r7, #4]
	if (callback_state == 1)
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <get_frequency+0x78>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d12b      	bne.n	8001366 <get_frequency+0x6e>
	{
		float32_t curr_freq = 0;
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
		mpm_mcleod_pitch_method_f32(&signal[0], &curr_freq);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f001 f97c 	bl	8002618 <mpm_mcleod_pitch_method_f32>
		callback_state = 0;
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <get_frequency+0x78>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
		*out_freq = ceill(4 * curr_freq) / 4;
 8001326:	edd7 7a05 	vldr	s15, [r7, #20]
 800132a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	ee17 0a90 	vmov	r0, s15
 8001336:	f7ff f907 	bl	8000548 <__aeabi_f2d>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	ec43 2b10 	vmov	d0, r2, r3
 8001342:	f00b fb2d 	bl	800c9a0 <ceill>
 8001346:	ec51 0b10 	vmov	r0, r1, d0
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <get_frequency+0x7c>)
 8001350:	f7ff fa7c 	bl	800084c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fc24 	bl	8000ba8 <__aeabi_d2f>
 8001360:	4602      	mov	r2, r0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	601a      	str	r2, [r3, #0]
	}
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000028c 	.word	0x2000028c
 8001374:	40100000 	.word	0x40100000

08001378 <get_error_in_cents>:

float32_t get_error_in_cents(float32_t curr_frequency, float32_t target_frequency)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001382:	edc7 0a00 	vstr	s1, [r7]
	float32_t error = 1200 * log2(curr_frequency / target_frequency);
 8001386:	ed97 7a01 	vldr	s14, [r7, #4]
 800138a:	edd7 7a00 	vldr	s15, [r7]
 800138e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001392:	ee16 0a90 	vmov	r0, s13
 8001396:	f7ff f8d7 	bl	8000548 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	ec43 2b10 	vmov	d0, r2, r3
 80013a2:	f00b fbcd 	bl	800cb40 <log>
 80013a6:	ec51 0b10 	vmov	r0, r1, d0
 80013aa:	a318      	add	r3, pc, #96	; (adr r3, 800140c <get_error_in_cents+0x94>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff fa4c 	bl	800084c <__aeabi_ddiv>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <get_error_in_cents+0x90>)
 80013c2:	f7ff f919 	bl	80005f8 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fbeb 	bl	8000ba8 <__aeabi_d2f>
 80013d2:	4603      	mov	r3, r0
 80013d4:	60fb      	str	r3, [r7, #12]
	return round(error);
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f7ff f8b6 	bl	8000548 <__aeabi_f2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	ec43 2b10 	vmov	d0, r2, r3
 80013e4:	f00b fb64 	bl	800cab0 <round>
 80013e8:	ec53 2b10 	vmov	r2, r3, d0
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fbda 	bl	8000ba8 <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	ee07 3a90 	vmov	s15, r3
}
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	f3af 8000 	nop.w
 8001408:	4092c000 	.word	0x4092c000
 800140c:	fefa39ef 	.word	0xfefa39ef
 8001410:	3fe62e42 	.word	0x3fe62e42

08001414 <toggle_motor_wait>:


void toggle_motor_wait()
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
	if (motor_wait == 2)
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <toggle_motor_wait+0x28>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b02      	cmp	r3, #2
 800141e:	d103      	bne.n	8001428 <toggle_motor_wait+0x14>
	{
		motor_wait = 0;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <toggle_motor_wait+0x28>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
	} else
	{
		motor_wait++;
	}
}
 8001426:	e004      	b.n	8001432 <toggle_motor_wait+0x1e>
		motor_wait++;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <toggle_motor_wait+0x28>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	4a03      	ldr	r2, [pc, #12]	; (800143c <toggle_motor_wait+0x28>)
 8001430:	6013      	str	r3, [r2, #0]
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000288 	.word	0x20000288

08001440 <state_tune_up_fine>:

void state_tune_up_fine()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
	int pulse_width = 46;
 8001446:	232e      	movs	r3, #46	; 0x2e
 8001448:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <state_tune_up_fine+0x34>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 8001452:	2064      	movs	r0, #100	; 0x64
 8001454:	f002 fab2 	bl	80039bc <HAL_Delay>
	pulse_width = 50;
 8001458:	2332      	movs	r3, #50	; 0x32
 800145a:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <state_tune_up_fine+0x34>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	641a      	str	r2, [r3, #64]	; 0x40
	state = state_get_pitch;
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <state_tune_up_fine+0x38>)
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <state_tune_up_fine+0x3c>)
 8001468:	601a      	str	r2, [r3, #0]
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20003928 	.word	0x20003928
 8001478:	200027a0 	.word	0x200027a0
 800147c:	08001845 	.word	0x08001845

08001480 <state_tune_up_fast>:

void state_tune_up_fast()
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
	int pulse_width = 40;
 8001486:	2328      	movs	r3, #40	; 0x28
 8001488:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <state_tune_up_fast+0x40>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(200);
 8001492:	20c8      	movs	r0, #200	; 0xc8
 8001494:	f002 fa92 	bl	80039bc <HAL_Delay>
	pulse_width = 50;
 8001498:	2332      	movs	r3, #50	; 0x32
 800149a:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <state_tune_up_fast+0x40>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 80014a4:	2064      	movs	r0, #100	; 0x64
 80014a6:	f002 fa89 	bl	80039bc <HAL_Delay>
	motor_wait = 0;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <state_tune_up_fast+0x44>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
	state = state_get_pitch;
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <state_tune_up_fast+0x48>)
 80014b2:	4a06      	ldr	r2, [pc, #24]	; (80014cc <state_tune_up_fast+0x4c>)
 80014b4:	601a      	str	r2, [r3, #0]
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20003928 	.word	0x20003928
 80014c4:	20000288 	.word	0x20000288
 80014c8:	200027a0 	.word	0x200027a0
 80014cc:	08001845 	.word	0x08001845

080014d0 <state_tune_down_fine>:

void state_tune_down_fine()
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
	int pulse_width = 54;
 80014d6:	2336      	movs	r3, #54	; 0x36
 80014d8:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <state_tune_down_fine+0x34>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 80014e2:	2064      	movs	r0, #100	; 0x64
 80014e4:	f002 fa6a 	bl	80039bc <HAL_Delay>
	pulse_width = 50;
 80014e8:	2332      	movs	r3, #50	; 0x32
 80014ea:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <state_tune_down_fine+0x34>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
	state = state_get_pitch;
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <state_tune_down_fine+0x38>)
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <state_tune_down_fine+0x3c>)
 80014f8:	601a      	str	r2, [r3, #0]
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20003928 	.word	0x20003928
 8001508:	200027a0 	.word	0x200027a0
 800150c:	08001845 	.word	0x08001845

08001510 <state_tune_down_fast>:

void state_tune_down_fast()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
	int pulse_width = 64;
 8001516:	2340      	movs	r3, #64	; 0x40
 8001518:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <state_tune_down_fast+0x40>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(200);
 8001522:	20c8      	movs	r0, #200	; 0xc8
 8001524:	f002 fa4a 	bl	80039bc <HAL_Delay>
	pulse_width = 50;
 8001528:	2332      	movs	r3, #50	; 0x32
 800152a:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <state_tune_down_fast+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 8001534:	2064      	movs	r0, #100	; 0x64
 8001536:	f002 fa41 	bl	80039bc <HAL_Delay>
	motor_wait = 0;
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <state_tune_down_fast+0x44>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
	state = state_get_pitch;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <state_tune_down_fast+0x48>)
 8001542:	4a06      	ldr	r2, [pc, #24]	; (800155c <state_tune_down_fast+0x4c>)
 8001544:	601a      	str	r2, [r3, #0]
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20003928 	.word	0x20003928
 8001554:	20000288 	.word	0x20000288
 8001558:	200027a0 	.word	0x200027a0
 800155c:	08001845 	.word	0x08001845

08001560 <iterate_table_pos>:


void iterate_table_pos()
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
	if(table_pos_ptr == &pitch_table[TABLE_SIZE - 1])
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <iterate_table_pos+0x2c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a09      	ldr	r2, [pc, #36]	; (8001590 <iterate_table_pos+0x30>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d103      	bne.n	8001576 <iterate_table_pos+0x16>
	{
		table_pos_ptr = &pitch_table[0];
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <iterate_table_pos+0x2c>)
 8001570:	4a08      	ldr	r2, [pc, #32]	; (8001594 <iterate_table_pos+0x34>)
 8001572:	601a      	str	r2, [r3, #0]
	}else
	{
		table_pos_ptr++;
	}

}
 8001574:	e004      	b.n	8001580 <iterate_table_pos+0x20>
		table_pos_ptr++;
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <iterate_table_pos+0x2c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3304      	adds	r3, #4
 800157c:	4a03      	ldr	r2, [pc, #12]	; (800158c <iterate_table_pos+0x2c>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000000 	.word	0x20000000
 8001590:	200002b0 	.word	0x200002b0
 8001594:	200002a0 	.word	0x200002a0

08001598 <get_min_table>:

float32_t  get_min_table()
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0

	float32_t min = pitch_table[0];
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <get_min_table+0x58>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < TABLE_SIZE; i++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	e015      	b.n	80015d6 <get_min_table+0x3e>
	{
		if(pitch_table[i] < min)
 80015aa:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <get_min_table+0x58>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80015ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c2:	dd05      	ble.n	80015d0 <get_min_table+0x38>
		{
			min = pitch_table[i];
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <get_min_table+0x58>)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < TABLE_SIZE; i++)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	dde6      	ble.n	80015aa <get_min_table+0x12>
		}
	}
	//qsort(pitch_table, TABLE_SIZE, sizeof(float32_t), cmpfunc);
	//float32_t median_error = tmp[TABLE_CENTRE];
	return min;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	ee07 3a90 	vmov	s15, r3
}
 80015e2:	eeb0 0a67 	vmov.f32	s0, s15
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	200002a0 	.word	0x200002a0

080015f4 <init_table>:


int init_table(int PITCH_U, int PITCH_L, float32_t target_freq)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	ed87 0a01 	vstr	s0, [r7, #4]
	#define END TABLE_SIZE - 1

	if( pitch_table[END] < PITCH_L || pitch_table[END] > PITCH_U)
 8001602:	4b25      	ldr	r3, [pc, #148]	; (8001698 <init_table+0xa4>)
 8001604:	ed93 7a04 	vldr	s14, [r3, #16]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161a:	d40c      	bmi.n	8001636 <init_table+0x42>
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <init_table+0xa4>)
 800161e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001634:	dd2a      	ble.n	800168c <init_table+0x98>
	{
		float32_t freq = 0;
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
		get_frequency(&guitar_signal[0], target_freq, &freq);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	ed97 0a01 	vldr	s0, [r7, #4]
 8001646:	4815      	ldr	r0, [pc, #84]	; (800169c <init_table+0xa8>)
 8001648:	f7ff fe56 	bl	80012f8 <get_frequency>
		if(PITCH_L < freq && freq < PITCH_U)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001656:	edd7 7a05 	vldr	s15, [r7, #20]
 800165a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001662:	d513      	bpl.n	800168c <init_table+0x98>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800166e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167a:	dd07      	ble.n	800168c <init_table+0x98>
		{
			*table_pos_ptr = freq;
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <init_table+0xac>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	601a      	str	r2, [r3, #0]
			iterate_table_pos();
 8001684:	f7ff ff6c 	bl	8001560 <iterate_table_pos>
			return 1;
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <init_table+0x9a>
		}
	}
	return 0;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200002a0 	.word	0x200002a0
 800169c:	200028dc 	.word	0x200028dc
 80016a0:	20000000 	.word	0x20000000

080016a4 <state_string_pitch>:



void state_string_pitch(int UPP_LIM, int LOW_LIM, float32_t target_freq)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	ed87 0a01 	vstr	s0, [r7, #4]

	if (correct_pitch_counter ==  MIN_CORRECT)
 80016b2:	4b57      	ldr	r3, [pc, #348]	; (8001810 <state_string_pitch+0x16c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d111      	bne.n	80016de <state_string_pitch+0x3a>
	{
		char *str = "Correct";
 80016ba:	4b56      	ldr	r3, [pc, #344]	; (8001814 <state_string_pitch+0x170>)
 80016bc:	61bb      	str	r3, [r7, #24]
		oled_print_string(str);
 80016be:	69b8      	ldr	r0, [r7, #24]
 80016c0:	f001 f818 	bl	80026f4 <oled_print_string>
		string_tracking++;
 80016c4:	4b54      	ldr	r3, [pc, #336]	; (8001818 <state_string_pitch+0x174>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	4a53      	ldr	r2, [pc, #332]	; (8001818 <state_string_pitch+0x174>)
 80016cc:	6013      	str	r3, [r2, #0]
		correct_pitch_counter = 0;
 80016ce:	4b50      	ldr	r3, [pc, #320]	; (8001810 <state_string_pitch+0x16c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
		HAL_Delay(2000);
 80016d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016d8:	f002 f970 	bl	80039bc <HAL_Delay>
 80016dc:	e095      	b.n	800180a <state_string_pitch+0x166>
		return;
	}

	while(init_table(UPP_LIM, LOW_LIM, target_freq));
 80016de:	bf00      	nop
 80016e0:	ed97 0a01 	vldr	s0, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f7ff ff84 	bl	80015f4 <init_table>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f6      	bne.n	80016e0 <state_string_pitch+0x3c>

	float32_t freq = 0;
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
	get_frequency(&guitar_signal[0], target_freq, &freq);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8001702:	4846      	ldr	r0, [pc, #280]	; (800181c <state_string_pitch+0x178>)
 8001704:	f7ff fdf8 	bl	80012f8 <get_frequency>

	if(LOW_LIM < freq && freq < UPP_LIM)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001712:	edd7 7a05 	vldr	s15, [r7, #20]
 8001716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	d56e      	bpl.n	80017fe <state_string_pitch+0x15a>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172a:	edd7 7a05 	vldr	s15, [r7, #20]
 800172e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	dd62      	ble.n	80017fe <state_string_pitch+0x15a>
	{
		*table_pos_ptr = freq;
 8001738:	4b39      	ldr	r3, [pc, #228]	; (8001820 <state_string_pitch+0x17c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	601a      	str	r2, [r3, #0]
		iterate_table_pos();
 8001740:	f7ff ff0e 	bl	8001560 <iterate_table_pos>
		float32_t m_freq = get_min_table();
 8001744:	f7ff ff28 	bl	8001598 <get_min_table>
 8001748:	ed87 0a07 	vstr	s0, [r7, #28]
		float32_t error = get_error_in_cents(m_freq, target_freq);
 800174c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001750:	ed97 0a07 	vldr	s0, [r7, #28]
 8001754:	f7ff fe10 	bl	8001378 <get_error_in_cents>
 8001758:	eef0 7a40 	vmov.f32	s15, s0
 800175c:	edc7 7a04 	vstr	s15, [r7, #16]
		oled_print_f32(&error);
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4618      	mov	r0, r3
 8001766:	f000 ffdb 	bl	8002720 <oled_print_f32>

		if (motor_wait == 0)
 800176a:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <state_string_pitch+0x180>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d148      	bne.n	8001804 <state_string_pitch+0x160>
		{
			if(error > 40) {
 8001772:	edd7 7a04 	vldr	s15, [r7, #16]
 8001776:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001828 <state_string_pitch+0x184>
 800177a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	dd06      	ble.n	8001792 <state_string_pitch+0xee>
				state = state_tune_down_fast;
 8001784:	4b29      	ldr	r3, [pc, #164]	; (800182c <state_string_pitch+0x188>)
 8001786:	4a2a      	ldr	r2, [pc, #168]	; (8001830 <state_string_pitch+0x18c>)
 8001788:	601a      	str	r2, [r3, #0]
				correct_pitch_counter = 0;
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <state_string_pitch+0x16c>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
	{
 8001790:	e038      	b.n	8001804 <state_string_pitch+0x160>
			} else if (error > 7)
 8001792:	edd7 7a04 	vldr	s15, [r7, #16]
 8001796:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800179a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a2:	dd06      	ble.n	80017b2 <state_string_pitch+0x10e>
			{
				state = state_tune_down_fine;
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <state_string_pitch+0x188>)
 80017a6:	4a23      	ldr	r2, [pc, #140]	; (8001834 <state_string_pitch+0x190>)
 80017a8:	601a      	str	r2, [r3, #0]
				correct_pitch_counter = 0;
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <state_string_pitch+0x16c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
	{
 80017b0:	e028      	b.n	8001804 <state_string_pitch+0x160>
			}else if(error < -40.0)
 80017b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017b6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001838 <state_string_pitch+0x194>
 80017ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	d506      	bpl.n	80017d2 <state_string_pitch+0x12e>
			{

				state = state_tune_up_fast;
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <state_string_pitch+0x188>)
 80017c6:	4a1d      	ldr	r2, [pc, #116]	; (800183c <state_string_pitch+0x198>)
 80017c8:	601a      	str	r2, [r3, #0]
				correct_pitch_counter = 0;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <state_string_pitch+0x16c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
	{
 80017d0:	e018      	b.n	8001804 <state_string_pitch+0x160>
			}else if(error < -7)
 80017d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017d6:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 80017da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d506      	bpl.n	80017f2 <state_string_pitch+0x14e>
			{
				state = state_tune_up_fine;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <state_string_pitch+0x188>)
 80017e6:	4a16      	ldr	r2, [pc, #88]	; (8001840 <state_string_pitch+0x19c>)
 80017e8:	601a      	str	r2, [r3, #0]
				correct_pitch_counter = 0;
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <state_string_pitch+0x16c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
	{
 80017f0:	e008      	b.n	8001804 <state_string_pitch+0x160>
			} else
			{
				correct_pitch_counter++;
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <state_string_pitch+0x16c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	4a05      	ldr	r2, [pc, #20]	; (8001810 <state_string_pitch+0x16c>)
 80017fa:	6013      	str	r3, [r2, #0]
	{
 80017fc:	e002      	b.n	8001804 <state_string_pitch+0x160>
			}
		}
	}
	else
	{
		oled_clear_screen();
 80017fe:	f000 ffbb 	bl	8002778 <oled_clear_screen>
 8001802:	e000      	b.n	8001806 <state_string_pitch+0x162>
	{
 8001804:	bf00      	nop
	}
	toggle_motor_wait();
 8001806:	f7ff fe05 	bl	8001414 <toggle_motor_wait>
}
 800180a:	3720      	adds	r7, #32
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2000029c 	.word	0x2000029c
 8001814:	0800d7d8 	.word	0x0800d7d8
 8001818:	20000294 	.word	0x20000294
 800181c:	200028dc 	.word	0x200028dc
 8001820:	20000000 	.word	0x20000000
 8001824:	20000288 	.word	0x20000288
 8001828:	42200000 	.word	0x42200000
 800182c:	200027a0 	.word	0x200027a0
 8001830:	08001511 	.word	0x08001511
 8001834:	080014d1 	.word	0x080014d1
 8001838:	c2200000 	.word	0xc2200000
 800183c:	08001481 	.word	0x08001481
 8001840:	08001441 	.word	0x08001441

08001844 <state_get_pitch>:


void state_get_pitch()
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	#define B3_U 320
	#define B3_L 205
	#define E4_U 350
	#define E4_L 305

	if (string_tracking == E2_STRING_NUM)
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <state_get_pitch+0x98>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d106      	bne.n	800185e <state_get_pitch+0x1a>
	{
		state_string_pitch(E2_U, E2_L, E2);
 8001850:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80018e0 <state_get_pitch+0x9c>
 8001854:	2137      	movs	r1, #55	; 0x37
 8001856:	2064      	movs	r0, #100	; 0x64
 8001858:	f7ff ff24 	bl	80016a4 <state_string_pitch>





}
 800185c:	e03c      	b.n	80018d8 <state_get_pitch+0x94>
	} else if (string_tracking == A2_STRING_NUM)
 800185e:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <state_get_pitch+0x98>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d106      	bne.n	8001874 <state_get_pitch+0x30>
		state_string_pitch(A2_U, A2_L, A2);
 8001866:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80018e4 <state_get_pitch+0xa0>
 800186a:	2155      	movs	r1, #85	; 0x55
 800186c:	208c      	movs	r0, #140	; 0x8c
 800186e:	f7ff ff19 	bl	80016a4 <state_string_pitch>
}
 8001872:	e031      	b.n	80018d8 <state_get_pitch+0x94>
	}else if (string_tracking == D3_STRING_NUM)
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <state_get_pitch+0x98>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d106      	bne.n	800188a <state_get_pitch+0x46>
		state_string_pitch(D3_U, D3_L, D3);
 800187c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80018e8 <state_get_pitch+0xa4>
 8001880:	2173      	movs	r1, #115	; 0x73
 8001882:	20be      	movs	r0, #190	; 0xbe
 8001884:	f7ff ff0e 	bl	80016a4 <state_string_pitch>
}
 8001888:	e026      	b.n	80018d8 <state_get_pitch+0x94>
	}else if (string_tracking == G3_STRING_NUM)
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <state_get_pitch+0x98>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d106      	bne.n	80018a0 <state_get_pitch+0x5c>
		state_string_pitch(G3_U, G3_L, G3);
 8001892:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80018ec <state_get_pitch+0xa8>
 8001896:	219b      	movs	r1, #155	; 0x9b
 8001898:	20e6      	movs	r0, #230	; 0xe6
 800189a:	f7ff ff03 	bl	80016a4 <state_string_pitch>
}
 800189e:	e01b      	b.n	80018d8 <state_get_pitch+0x94>
	}else if (string_tracking == B3_STRING_NUM)
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <state_get_pitch+0x98>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d107      	bne.n	80018b8 <state_get_pitch+0x74>
		state_string_pitch(B3_U, B3_L, B3);
 80018a8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80018f0 <state_get_pitch+0xac>
 80018ac:	21cd      	movs	r1, #205	; 0xcd
 80018ae:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80018b2:	f7ff fef7 	bl	80016a4 <state_string_pitch>
}
 80018b6:	e00f      	b.n	80018d8 <state_get_pitch+0x94>
	}else if (string_tracking == E4_STRING_NUM)
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <state_get_pitch+0x98>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d108      	bne.n	80018d2 <state_get_pitch+0x8e>
		state_string_pitch(E4_U, E4_L, E4);
 80018c0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80018f4 <state_get_pitch+0xb0>
 80018c4:	f240 1131 	movw	r1, #305	; 0x131
 80018c8:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80018cc:	f7ff feea 	bl	80016a4 <state_string_pitch>
}
 80018d0:	e002      	b.n	80018d8 <state_get_pitch+0x94>
		string_tracking =  E2_STRING_NUM;
 80018d2:	4b02      	ldr	r3, [pc, #8]	; (80018dc <state_get_pitch+0x98>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000294 	.word	0x20000294
 80018e0:	42a4d1ec 	.word	0x42a4d1ec
 80018e4:	42dc0000 	.word	0x42dc0000
 80018e8:	4312d47b 	.word	0x4312d47b
 80018ec:	43440000 	.word	0x43440000
 80018f0:	4376f0a4 	.word	0x4376f0a4
 80018f4:	43a4d0a4 	.word	0x43a4d0a4

080018f8 <metronome>:




void metronome(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim2);
 80018fe:	4821      	ldr	r0, [pc, #132]	; (8001984 <metronome+0x8c>)
 8001900:	f006 fb7a 	bl	8007ff8 <HAL_TIM_Base_Start_IT>



	int bpm = 100;
 8001904:	2364      	movs	r3, #100	; 0x64
 8001906:	607b      	str	r3, [r7, #4]

	oled_timing_screen(bpm);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 ff91 	bl	8002830 <oled_timing_screen>
	ssd1306_UpdateScreen();
 800190e:	f001 fc73 	bl	80031f8 <ssd1306_UpdateScreen>



	while (1)
	{
		int exit = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8001912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001916:	481c      	ldr	r0, [pc, #112]	; (8001988 <metronome+0x90>)
 8001918:	f003 ffde 	bl	80058d8 <HAL_GPIO_ReadPin>
 800191c:	4603      	mov	r3, r0
 800191e:	603b      	str	r3, [r7, #0]

		if (exit == 1)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d103      	bne.n	800192e <metronome+0x36>
		{
			HAL_TIM_Base_Stop_IT(&htim2);
 8001926:	4817      	ldr	r0, [pc, #92]	; (8001984 <metronome+0x8c>)
 8001928:	f006 fbba 	bl	80080a0 <HAL_TIM_Base_Stop_IT>
			return;
 800192c:	e027      	b.n	800197e <metronome+0x86>
		}

		if (HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin))
 800192e:	2140      	movs	r1, #64	; 0x40
 8001930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001934:	f003 ffd0 	bl	80058d8 <HAL_GPIO_ReadPin>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <metronome+0x56>
		{
			bpm++;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3301      	adds	r3, #1
 8001942:	607b      	str	r3, [r7, #4]
			oled_timing_screen(bpm);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 ff73 	bl	8002830 <oled_timing_screen>
			ssd1306_UpdateScreen();
 800194a:	f001 fc55 	bl	80031f8 <ssd1306_UpdateScreen>

		}
		if (HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin))
 800194e:	2180      	movs	r1, #128	; 0x80
 8001950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001954:	f003 ffc0 	bl	80058d8 <HAL_GPIO_ReadPin>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <metronome+0x76>
		{
			bpm--;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3b01      	subs	r3, #1
 8001962:	607b      	str	r3, [r7, #4]
			oled_timing_screen(bpm);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 ff63 	bl	8002830 <oled_timing_screen>
			ssd1306_UpdateScreen();
 800196a:	f001 fc45 	bl	80031f8 <ssd1306_UpdateScreen>

		}


		__HAL_TIM_SET_PRESCALER(&htim2, bpm * 100);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2264      	movs	r2, #100	; 0x64
 8001972:	fb02 f203 	mul.w	r2, r2, r3
 8001976:	4b03      	ldr	r3, [pc, #12]	; (8001984 <metronome+0x8c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
	{
 800197c:	e7c9      	b.n	8001912 <metronome+0x1a>
	}




}
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20004974 	.word	0x20004974
 8001988:	48000400 	.word	0x48000400

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001992:	f001 ff9f 	bl	80038d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001996:	f000 f8e1 	bl	8001b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199a:	f000 fbcf 	bl	800213c <MX_GPIO_Init>
  MX_DMA_Init();
 800199e:	f000 fba7 	bl	80020f0 <MX_DMA_Init>
  MX_TIM6_Init();
 80019a2:	f000 fb47 	bl	8002034 <MX_TIM6_Init>
  MX_OPAMP1_Init();
 80019a6:	f000 fa45 	bl	8001e34 <MX_OPAMP1_Init>
  MX_ADC1_Init();
 80019aa:	f000 f927 	bl	8001bfc <MX_ADC1_Init>
  MX_I2C1_Init();
 80019ae:	f000 f9bd 	bl	8001d2c <MX_I2C1_Init>
  MX_DAC1_Init();
 80019b2:	f000 f989 	bl	8001cc8 <MX_DAC1_Init>
  MX_TIM1_Init();
 80019b6:	f000 fa61 	bl	8001e7c <MX_TIM1_Init>
  MX_I2C2_Init();
 80019ba:	f000 f9f7 	bl	8001dac <MX_I2C2_Init>
  MX_TIM16_Init();
 80019be:	f000 fb6f 	bl	80020a0 <MX_TIM16_Init>
  MX_TIM2_Init();
 80019c2:	f000 fae9 	bl	8001f98 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim6);
 80019c6:	4858      	ldr	r0, [pc, #352]	; (8001b28 <main+0x19c>)
 80019c8:	f006 faca 	bl	8007f60 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80019cc:	210c      	movs	r1, #12
 80019ce:	4857      	ldr	r0, [pc, #348]	; (8001b2c <main+0x1a0>)
 80019d0:	f006 fccc 	bl	800836c <HAL_TIM_PWM_Start>

	HAL_TIM_OC_Start(&htim6, TIM_CHANNEL_6);
 80019d4:	2114      	movs	r1, #20
 80019d6:	4854      	ldr	r0, [pc, #336]	; (8001b28 <main+0x19c>)
 80019d8:	f006 fb92 	bl	8008100 <HAL_TIM_OC_Start>
	HAL_OPAMP_SelfCalibrate (&hopamp1);
 80019dc:	4854      	ldr	r0, [pc, #336]	; (8001b30 <main+0x1a4>)
 80019de:	f004 ffdc 	bl	800699a <HAL_OPAMP_SelfCalibrate>
	HAL_OPAMP_Start(&hopamp1);
 80019e2:	4853      	ldr	r0, [pc, #332]	; (8001b30 <main+0x1a4>)
 80019e4:	f004 ffa8 	bl	8006938 <HAL_OPAMP_Start>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80019e8:	217f      	movs	r1, #127	; 0x7f
 80019ea:	4852      	ldr	r0, [pc, #328]	; (8001b34 <main+0x1a8>)
 80019ec:	f003 f954 	bl	8004c98 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, 2 * BLOCK_SIZE);
 80019f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019f4:	4950      	ldr	r1, [pc, #320]	; (8001b38 <main+0x1ac>)
 80019f6:	484f      	ldr	r0, [pc, #316]	; (8001b34 <main+0x1a8>)
 80019f8:	f002 fb3a 	bl	8004070 <HAL_ADC_Start_DMA>
	arm_biquad_cascade_df1_init_f32(&iir_settings, NUM_IIR_STAGES, &iir_taps[0], &iir_state[0]);
 80019fc:	4b4f      	ldr	r3, [pc, #316]	; (8001b3c <main+0x1b0>)
 80019fe:	4a50      	ldr	r2, [pc, #320]	; (8001b40 <main+0x1b4>)
 8001a00:	2101      	movs	r1, #1
 8001a02:	4850      	ldr	r0, [pc, #320]	; (8001b44 <main+0x1b8>)
 8001a04:	f007 ffe2 	bl	80099cc <arm_biquad_cascade_df1_init_f32>


	oled_init();
 8001a08:	f000 fe5a 	bl	80026c0 <oled_init>
	init_tunings();
 8001a0c:	f7ff fbaa 	bl	8001164 <init_tunings>

	MPU6050_Init(&hi2c1);
 8001a10:	484d      	ldr	r0, [pc, #308]	; (8001b48 <main+0x1bc>)
 8001a12:	f7ff f919 	bl	8000c48 <MPU6050_Init>
	myMpuConfig.Accel_Full_Scale = AFS_SEL_2g;
 8001a16:	2300      	movs	r3, #0
 8001a18:	70bb      	strb	r3, [r7, #2]
    myMpuConfig.CONFIG_DLPF = Internal_8MHz;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	70fb      	strb	r3, [r7, #3]
    myMpuConfig.ClockSource = DLPF_184A_188G_Hz;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	703b      	strb	r3, [r7, #0]
    myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 8001a22:	2301      	movs	r3, #1
 8001a24:	707b      	strb	r3, [r7, #1]
    myMpuConfig.Sleep_Mode_Bit = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	713b      	strb	r3, [r7, #4]
    MPU6050_Config(&myMpuConfig);
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff f95f 	bl	8000cf0 <MPU6050_Config>

	//HAL_TIM_Base_Start_IT(&htim16);



	state = state_get_pitch;
 8001a32:	4b46      	ldr	r3, [pc, #280]	; (8001b4c <main+0x1c0>)
 8001a34:	4a46      	ldr	r2, [pc, #280]	; (8001b50 <main+0x1c4>)
 8001a36:	601a      	str	r2, [r3, #0]



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a3e:	4845      	ldr	r0, [pc, #276]	; (8001b54 <main+0x1c8>)
 8001a40:	f003 ff62 	bl	8005908 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001a44:	2201      	movs	r2, #1
 8001a46:	2101      	movs	r1, #1
 8001a48:	4842      	ldr	r0, [pc, #264]	; (8001b54 <main+0x1c8>)
 8001a4a:	f003 ff5d 	bl	8005908 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a54:	483f      	ldr	r0, [pc, #252]	; (8001b54 <main+0x1c8>)
 8001a56:	f003 ff57 	bl	8005908 <HAL_GPIO_WritePin>



	int counter = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	/*-------------------------------------------------------------------------------------------------------------------------------------------------------------*/
	while (1)
	{
		if (mode == 0)
 8001a5e:	4b3e      	ldr	r3, [pc, #248]	; (8001b58 <main+0x1cc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d157      	bne.n	8001b16 <main+0x18a>
		{




			int Button1_val = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8001a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a6a:	483a      	ldr	r0, [pc, #232]	; (8001b54 <main+0x1c8>)
 8001a6c:	f003 ff34 	bl	80058d8 <HAL_GPIO_ReadPin>
 8001a70:	4603      	mov	r3, r0
 8001a72:	613b      	str	r3, [r7, #16]
			int Button2_val = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8001a74:	2140      	movs	r1, #64	; 0x40
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7a:	f003 ff2d 	bl	80058d8 <HAL_GPIO_ReadPin>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	60fb      	str	r3, [r7, #12]
			int Button3_val = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8001a82:	2180      	movs	r1, #128	; 0x80
 8001a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a88:	f003 ff26 	bl	80058d8 <HAL_GPIO_ReadPin>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	60bb      	str	r3, [r7, #8]

			if (Button2_val == 1 || Button3_val == 1)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d002      	beq.n	8001a9c <main+0x110>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d125      	bne.n	8001ae8 <main+0x15c>
			{

				if (counter == 0 )
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d111      	bne.n	8001ac6 <main+0x13a>
				{

					oled_selection_screen();
 8001aa2:	f000 fefb 	bl	800289c <oled_selection_screen>
					ssd1306_DrawRectangle(0, 36, 128,  58, 0);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	233a      	movs	r3, #58	; 0x3a
 8001aac:	2280      	movs	r2, #128	; 0x80
 8001aae:	2124      	movs	r1, #36	; 0x24
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f001 fdd6 	bl	8003662 <ssd1306_DrawRectangle>
					ssd1306_UpdateScreen();
 8001ab6:	f001 fb9f 	bl	80031f8 <ssd1306_UpdateScreen>
					counter = 1;
 8001aba:	2301      	movs	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
					HAL_Delay(100);
 8001abe:	2064      	movs	r0, #100	; 0x64
 8001ac0:	f001 ff7c 	bl	80039bc <HAL_Delay>
 8001ac4:	e010      	b.n	8001ae8 <main+0x15c>

				} else
				{
					oled_selection_screen();
 8001ac6:	f000 fee9 	bl	800289c <oled_selection_screen>
					ssd1306_DrawRectangle(0, 8, 128,  30, 0);
 8001aca:	2300      	movs	r3, #0
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	231e      	movs	r3, #30
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	2108      	movs	r1, #8
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f001 fdc4 	bl	8003662 <ssd1306_DrawRectangle>
					ssd1306_UpdateScreen();
 8001ada:	f001 fb8d 	bl	80031f8 <ssd1306_UpdateScreen>

					counter = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
					HAL_Delay(100);
 8001ae2:	2064      	movs	r0, #100	; 0x64
 8001ae4:	f001 ff6a 	bl	80039bc <HAL_Delay>
				}
			}

			if (Button1_val == 1)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d1b7      	bne.n	8001a5e <main+0xd2>
			{
				if (counter == 0)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d108      	bne.n	8001b06 <main+0x17a>
				{
					oled_tone_screen(100);
 8001af4:	2064      	movs	r0, #100	; 0x64
 8001af6:	f000 fe4f 	bl	8002798 <oled_tone_screen>
					ssd1306_UpdateScreen();
 8001afa:	f001 fb7d 	bl	80031f8 <ssd1306_UpdateScreen>
					HAL_Delay(200);
 8001afe:	20c8      	movs	r0, #200	; 0xc8
 8001b00:	f001 ff5c 	bl	80039bc <HAL_Delay>
 8001b04:	e7ab      	b.n	8001a5e <main+0xd2>
			} else {
					metronome();
 8001b06:	f7ff fef7 	bl	80018f8 <metronome>
					oled_selection_screen();
 8001b0a:	f000 fec7 	bl	800289c <oled_selection_screen>
					HAL_Delay(200);
 8001b0e:	20c8      	movs	r0, #200	; 0xc8
 8001b10:	f001 ff54 	bl	80039bc <HAL_Delay>
 8001b14:	e7a3      	b.n	8001a5e <main+0xd2>

				}
			}


		}else if (mode == 1)
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <main+0x1cc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d19f      	bne.n	8001a5e <main+0xd2>
		{
			//oled_timing_screen(100);
			state();
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <main+0x1c0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4798      	blx	r3
		if (mode == 0)
 8001b24:	e79b      	b.n	8001a5e <main+0xd2>
 8001b26:	bf00      	nop
 8001b28:	200038dc 	.word	0x200038dc
 8001b2c:	20003928 	.word	0x20003928
 8001b30:	200027ec 	.word	0x200027ec
 8001b34:	20002820 	.word	0x20002820
 8001b38:	20003974 	.word	0x20003974
 8001b3c:	20004a24 	.word	0x20004a24
 8001b40:	20000004 	.word	0x20000004
 8001b44:	200049c0 	.word	0x200049c0
 8001b48:	200026e0 	.word	0x200026e0
 8001b4c:	200027a0 	.word	0x200027a0
 8001b50:	08001845 	.word	0x08001845
 8001b54:	48000400 	.word	0x48000400
 8001b58:	20000298 	.word	0x20000298

08001b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b096      	sub	sp, #88	; 0x58
 8001b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	2244      	movs	r2, #68	; 0x44
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f008 f888 	bl	8009c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b70:	463b      	mov	r3, r7
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b82:	f005 f837 	bl	8006bf4 <HAL_PWREx_ControlVoltageScaling>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b8c:	f000 fba4 	bl	80022d8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b90:	2301      	movs	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001ba2:	2306      	movs	r3, #6
 8001ba4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001ba6:	2350      	movs	r3, #80	; 0x50
 8001ba8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001baa:	2307      	movs	r3, #7
 8001bac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f005 f870 	bl	8006ca0 <HAL_RCC_OscConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001bc6:	f000 fb87 	bl	80022d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bca:	230f      	movs	r3, #15
 8001bcc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bde:	463b      	mov	r3, r7
 8001be0:	2104      	movs	r1, #4
 8001be2:	4618      	mov	r0, r3
 8001be4:	f005 fc6e 	bl	80074c4 <HAL_RCC_ClockConfig>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001bee:	f000 fb73 	bl	80022d8 <Error_Handler>
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3758      	adds	r7, #88	; 0x58
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c02:	463b      	mov	r3, r7
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
 8001c10:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c14:	4a2a      	ldr	r2, [pc, #168]	; (8001cc0 <MX_ADC1_Init+0xc4>)
 8001c16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c18:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c1e:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c30:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c32:	2204      	movs	r2, #4
 8001c34:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c36:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001c42:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c48:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c52:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c76:	4811      	ldr	r0, [pc, #68]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001c78:	f002 f8b2 	bl	8003de0 <HAL_ADC_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001c82:	f000 fb29 	bl	80022d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_ADC1_Init+0xc8>)
 8001c88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c92:	237f      	movs	r3, #127	; 0x7f
 8001c94:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c96:	2304      	movs	r3, #4
 8001c98:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4806      	ldr	r0, [pc, #24]	; (8001cbc <MX_ADC1_Init+0xc0>)
 8001ca4:	f002 fa72 	bl	800418c <HAL_ADC_ConfigChannel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001cae:	f000 fb13 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20002820 	.word	0x20002820
 8001cc0:	50040000 	.word	0x50040000
 8001cc4:	21800100 	.word	0x21800100

08001cc8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	2224      	movs	r2, #36	; 0x24
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f007 ffd3 	bl	8009c80 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <MX_DAC1_Init+0x5c>)
 8001cdc:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <MX_DAC1_Init+0x60>)
 8001cde:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001ce0:	4810      	ldr	r0, [pc, #64]	; (8001d24 <MX_DAC1_Init+0x5c>)
 8001ce2:	f003 f94a 	bl	8004f7a <HAL_DAC_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001cec:	f000 faf4 	bl	80022d8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4806      	ldr	r0, [pc, #24]	; (8001d24 <MX_DAC1_Init+0x5c>)
 8001d0c:	f003 f957 	bl	8004fbe <HAL_DAC_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001d16:	f000 fadf 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	3728      	adds	r7, #40	; 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200026cc 	.word	0x200026cc
 8001d28:	40007400 	.word	0x40007400

08001d2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d30:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <MX_I2C1_Init+0x74>)
 8001d32:	4a1c      	ldr	r2, [pc, #112]	; (8001da4 <MX_I2C1_Init+0x78>)
 8001d34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <MX_I2C1_Init+0x74>)
 8001d38:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <MX_I2C1_Init+0x7c>)
 8001d3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d3c:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <MX_I2C1_Init+0x74>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <MX_I2C1_Init+0x74>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <MX_I2C1_Init+0x74>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_I2C1_Init+0x74>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <MX_I2C1_Init+0x74>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_I2C1_Init+0x74>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <MX_I2C1_Init+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d66:	480e      	ldr	r0, [pc, #56]	; (8001da0 <MX_I2C1_Init+0x74>)
 8001d68:	f003 fdfe 	bl	8005968 <HAL_I2C_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d72:	f000 fab1 	bl	80022d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d76:	2100      	movs	r1, #0
 8001d78:	4809      	ldr	r0, [pc, #36]	; (8001da0 <MX_I2C1_Init+0x74>)
 8001d7a:	f004 fc4f 	bl	800661c <HAL_I2CEx_ConfigAnalogFilter>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d84:	f000 faa8 	bl	80022d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <MX_I2C1_Init+0x74>)
 8001d8c:	f004 fc91 	bl	80066b2 <HAL_I2CEx_ConfigDigitalFilter>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d96:	f000 fa9f 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200026e0 	.word	0x200026e0
 8001da4:	40005400 	.word	0x40005400
 8001da8:	00702991 	.word	0x00702991

08001dac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <MX_I2C2_Init+0x7c>)
 8001db2:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <MX_I2C2_Init+0x80>)
 8001db4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300F33;
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <MX_I2C2_Init+0x7c>)
 8001db8:	4a1d      	ldr	r2, [pc, #116]	; (8001e30 <MX_I2C2_Init+0x84>)
 8001dba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <MX_I2C2_Init+0x7c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <MX_I2C2_Init+0x7c>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <MX_I2C2_Init+0x7c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <MX_I2C2_Init+0x7c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <MX_I2C2_Init+0x7c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <MX_I2C2_Init+0x7c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <MX_I2C2_Init+0x7c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001de6:	4810      	ldr	r0, [pc, #64]	; (8001e28 <MX_I2C2_Init+0x7c>)
 8001de8:	f003 fdbe 	bl	8005968 <HAL_I2C_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001df2:	f000 fa71 	bl	80022d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001df6:	2100      	movs	r1, #0
 8001df8:	480b      	ldr	r0, [pc, #44]	; (8001e28 <MX_I2C2_Init+0x7c>)
 8001dfa:	f004 fc0f 	bl	800661c <HAL_I2CEx_ConfigAnalogFilter>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e04:	f000 fa68 	bl	80022d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4807      	ldr	r0, [pc, #28]	; (8001e28 <MX_I2C2_Init+0x7c>)
 8001e0c:	f004 fc51 	bl	80066b2 <HAL_I2CEx_ConfigDigitalFilter>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e16:	f000 fa5f 	bl	80022d8 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8001e1a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001e1e:	f004 fc95 	bl	800674c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20002734 	.word	0x20002734
 8001e2c:	40005800 	.word	0x40005800
 8001e30:	00300f33 	.word	0x00300f33

08001e34 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001e38:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_OPAMP1_Init+0x40>)
 8001e3a:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <MX_OPAMP1_Init+0x44>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_HIGH;
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <MX_OPAMP1_Init+0x40>)
 8001e40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e44:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <MX_OPAMP1_Init+0x40>)
 8001e48:	220c      	movs	r2, #12
 8001e4a:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <MX_OPAMP1_Init+0x40>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	615a      	str	r2, [r3, #20]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <MX_OPAMP1_Init+0x40>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <MX_OPAMP1_Init+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_OPAMP1_Init+0x40>)
 8001e60:	f004 fc94 	bl	800678c <HAL_OPAMP_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_OPAMP1_Init+0x3a>
  {
    Error_Handler();
 8001e6a:	f000 fa35 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200027ec 	.word	0x200027ec
 8001e78:	40007800 	.word	0x40007800

08001e7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b096      	sub	sp, #88	; 0x58
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]
 8001e9e:	615a      	str	r2, [r3, #20]
 8001ea0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	222c      	movs	r2, #44	; 0x2c
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f007 fee9 	bl	8009c80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eae:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <MX_TIM1_Init+0x114>)
 8001eb0:	4a38      	ldr	r2, [pc, #224]	; (8001f94 <MX_TIM1_Init+0x118>)
 8001eb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2352;
 8001eb4:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <MX_TIM1_Init+0x114>)
 8001eb6:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001eba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebc:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <MX_TIM1_Init+0x114>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001ec2:	4b33      	ldr	r3, [pc, #204]	; (8001f90 <MX_TIM1_Init+0x114>)
 8001ec4:	2264      	movs	r2, #100	; 0x64
 8001ec6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec8:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <MX_TIM1_Init+0x114>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ece:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <MX_TIM1_Init+0x114>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <MX_TIM1_Init+0x114>)
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eda:	482d      	ldr	r0, [pc, #180]	; (8001f90 <MX_TIM1_Init+0x114>)
 8001edc:	f006 f9ee 	bl	80082bc <HAL_TIM_PWM_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001ee6:	f000 f9f7 	bl	80022d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001efa:	4619      	mov	r1, r3
 8001efc:	4824      	ldr	r0, [pc, #144]	; (8001f90 <MX_TIM1_Init+0x114>)
 8001efe:	f007 f9db 	bl	80092b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f08:	f000 f9e6 	bl	80022d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0c:	2360      	movs	r3, #96	; 0x60
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 8001f10:	2332      	movs	r3, #50	; 0x32
 8001f12:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f14:	2300      	movs	r3, #0
 8001f16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f28:	220c      	movs	r2, #12
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4818      	ldr	r0, [pc, #96]	; (8001f90 <MX_TIM1_Init+0x114>)
 8001f2e:	f006 fc1b 	bl	8008768 <HAL_TIM_PWM_ConfigChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001f38:	f000 f9ce 	bl	80022d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4807      	ldr	r0, [pc, #28]	; (8001f90 <MX_TIM1_Init+0x114>)
 8001f72:	f007 fa07 	bl	8009384 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001f7c:	f000 f9ac 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f80:	4803      	ldr	r0, [pc, #12]	; (8001f90 <MX_TIM1_Init+0x114>)
 8001f82:	f000 ff1d 	bl	8002dc0 <HAL_TIM_MspPostInit>

}
 8001f86:	bf00      	nop
 8001f88:	3758      	adds	r7, #88	; 0x58
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20003928 	.word	0x20003928
 8001f94:	40012c00 	.word	0x40012c00

08001f98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <MX_TIM2_Init+0x98>)
 8001fb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000 - 1;
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <MX_TIM2_Init+0x98>)
 8001fc0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001fc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <MX_TIM2_Init+0x98>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000 - 1;
 8001fcc:	4b18      	ldr	r3, [pc, #96]	; (8002030 <MX_TIM2_Init+0x98>)
 8001fce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001fd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd4:	4b16      	ldr	r3, [pc, #88]	; (8002030 <MX_TIM2_Init+0x98>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <MX_TIM2_Init+0x98>)
 8001fdc:	2280      	movs	r2, #128	; 0x80
 8001fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fe0:	4813      	ldr	r0, [pc, #76]	; (8002030 <MX_TIM2_Init+0x98>)
 8001fe2:	f005 ff65 	bl	8007eb0 <HAL_TIM_Base_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001fec:	f000 f974 	bl	80022d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ff6:	f107 0310 	add.w	r3, r7, #16
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	480c      	ldr	r0, [pc, #48]	; (8002030 <MX_TIM2_Init+0x98>)
 8001ffe:	f006 fcc7 	bl	8008990 <HAL_TIM_ConfigClockSource>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002008:	f000 f966 	bl	80022d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200c:	2300      	movs	r3, #0
 800200e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	4619      	mov	r1, r3
 8002018:	4805      	ldr	r0, [pc, #20]	; (8002030 <MX_TIM2_Init+0x98>)
 800201a:	f007 f94d 	bl	80092b8 <HAL_TIMEx_MasterConfigSynchronization>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002024:	f000 f958 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002028:	bf00      	nop
 800202a:	3720      	adds	r7, #32
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20004974 	.word	0x20004974

08002034 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <MX_TIM6_Init+0x64>)
 8002046:	4a15      	ldr	r2, [pc, #84]	; (800209c <MX_TIM6_Init+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800204a:	4b13      	ldr	r3, [pc, #76]	; (8002098 <MX_TIM6_Init+0x64>)
 800204c:	2200      	movs	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <MX_TIM6_Init+0x64>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000 - 1;
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <MX_TIM6_Init+0x64>)
 8002058:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800205c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MX_TIM6_Init+0x64>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <MX_TIM6_Init+0x64>)
 8002066:	f005 ff23 	bl	8007eb0 <HAL_TIM_Base_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002070:	f000 f932 	bl	80022d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002074:	2320      	movs	r3, #32
 8002076:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	4619      	mov	r1, r3
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <MX_TIM6_Init+0x64>)
 8002082:	f007 f919 	bl	80092b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800208c:	f000 f924 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200038dc 	.word	0x200038dc
 800209c:	40001000 	.word	0x40001000

080020a0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80020a4:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <MX_TIM16_Init+0x48>)
 80020a6:	4a11      	ldr	r2, [pc, #68]	; (80020ec <MX_TIM16_Init+0x4c>)
 80020a8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 20000;
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <MX_TIM16_Init+0x48>)
 80020ac:	f644 6220 	movw	r2, #20000	; 0x4e20
 80020b0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <MX_TIM16_Init+0x48>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4000 - 1;
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <MX_TIM16_Init+0x48>)
 80020ba:	f640 729f 	movw	r2, #3999	; 0xf9f
 80020be:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <MX_TIM16_Init+0x48>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <MX_TIM16_Init+0x48>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <MX_TIM16_Init+0x48>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <MX_TIM16_Init+0x48>)
 80020d4:	f005 feec 	bl	8007eb0 <HAL_TIM_Base_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80020de:	f000 f8fb 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200049cc 	.word	0x200049cc
 80020ec:	40014400 	.word	0x40014400

080020f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <MX_DMA_Init+0x48>)
 80020f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fa:	4a0f      	ldr	r2, [pc, #60]	; (8002138 <MX_DMA_Init+0x48>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6493      	str	r3, [r2, #72]	; 0x48
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <MX_DMA_Init+0x48>)
 8002104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	200b      	movs	r0, #11
 8002114:	f002 fefb 	bl	8004f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002118:	200b      	movs	r0, #11
 800211a:	f002 ff14 	bl	8004f46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	200d      	movs	r0, #13
 8002124:	f002 fef3 	bl	8004f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002128:	200d      	movs	r0, #13
 800212a:	f002 ff0c 	bl	8004f46 <HAL_NVIC_EnableIRQ>

}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000

0800213c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002152:	4b45      	ldr	r3, [pc, #276]	; (8002268 <MX_GPIO_Init+0x12c>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	4a44      	ldr	r2, [pc, #272]	; (8002268 <MX_GPIO_Init+0x12c>)
 8002158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215e:	4b42      	ldr	r3, [pc, #264]	; (8002268 <MX_GPIO_Init+0x12c>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <MX_GPIO_Init+0x12c>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	4a3e      	ldr	r2, [pc, #248]	; (8002268 <MX_GPIO_Init+0x12c>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002176:	4b3c      	ldr	r3, [pc, #240]	; (8002268 <MX_GPIO_Init+0x12c>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002182:	4b39      	ldr	r3, [pc, #228]	; (8002268 <MX_GPIO_Init+0x12c>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	4a38      	ldr	r2, [pc, #224]	; (8002268 <MX_GPIO_Init+0x12c>)
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218e:	4b36      	ldr	r3, [pc, #216]	; (8002268 <MX_GPIO_Init+0x12c>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LED_BLUE_Pin, GPIO_PIN_RESET);
 800219a:	2200      	movs	r2, #0
 800219c:	f248 0102 	movw	r1, #32770	; 0x8002
 80021a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a4:	f003 fbb0 	bl	8005908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|Button2_Vcc_Pin, GPIO_PIN_RESET);
 80021a8:	2200      	movs	r2, #0
 80021aa:	f240 2101 	movw	r1, #513	; 0x201
 80021ae:	482f      	ldr	r0, [pc, #188]	; (800226c <MX_GPIO_Init+0x130>)
 80021b0:	f003 fbaa 	bl	8005908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Switch_High_GPIO_Port, Switch_High_Pin, GPIO_PIN_SET);
 80021b4:	2201      	movs	r2, #1
 80021b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021ba:	482c      	ldr	r0, [pc, #176]	; (800226c <MX_GPIO_Init+0x130>)
 80021bc:	f003 fba4 	bl	8005908 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 LED_BLUE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LED_BLUE_Pin;
 80021c0:	f248 0302 	movw	r3, #32770	; 0x8002
 80021c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c6:	2301      	movs	r3, #1
 80021c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	f107 030c 	add.w	r3, r7, #12
 80021d6:	4619      	mov	r1, r3
 80021d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021dc:	f003 fa02 	bl	80055e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button3_Pin;
 80021e0:	23c0      	movs	r3, #192	; 0xc0
 80021e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e4:	2300      	movs	r3, #0
 80021e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	4619      	mov	r1, r3
 80021f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f6:	f003 f9f5 	bl	80055e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 Switch_High_Pin Button2_Vcc_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Switch_High_Pin|Button2_Vcc_Pin;
 80021fa:	f248 2301 	movw	r3, #33281	; 0x8201
 80021fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	4619      	mov	r1, r3
 8002212:	4816      	ldr	r0, [pc, #88]	; (800226c <MX_GPIO_Init+0x130>)
 8002214:	f003 f9e6 	bl	80055e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch_Int_Pin */
  GPIO_InitStruct.Pin = Switch_Int_Pin;
 8002218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800221e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Switch_Int_GPIO_Port, &GPIO_InitStruct);
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	4619      	mov	r1, r3
 800222e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002232:	f003 f9d7 	bl	80055e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8002236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800223a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223c:	2300      	movs	r3, #0
 800223e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	4619      	mov	r1, r3
 800224a:	4808      	ldr	r0, [pc, #32]	; (800226c <MX_GPIO_Init+0x130>)
 800224c:	f003 f9ca 	bl	80055e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002250:	2200      	movs	r2, #0
 8002252:	2101      	movs	r1, #1
 8002254:	2017      	movs	r0, #23
 8002256:	f002 fe5a 	bl	8004f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800225a:	2017      	movs	r0, #23
 800225c:	f002 fe73 	bl	8004f46 <HAL_NVIC_EnableIRQ>

}
 8002260:	bf00      	nop
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	48000400 	.word	0x48000400

08002270 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	80fb      	strh	r3, [r7, #6]

	Screenmode = HAL_GPIO_ReadPin(GPIOA, Switch_Int_Pin);
 800227a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800227e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002282:	f003 fb29 	bl	80058d8 <HAL_GPIO_ReadPin>
 8002286:	4603      	mov	r3, r0
 8002288:	461a      	mov	r2, r3
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_GPIO_EXTI_Callback+0x5c>)
 800228c:	601a      	str	r2, [r3, #0]



	if (Screenmode == 0)
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <HAL_GPIO_EXTI_Callback+0x5c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d105      	bne.n	80022a2 <HAL_GPIO_EXTI_Callback+0x32>
	{
		oled_selection_screen();
 8002296:	f000 fb01 	bl	800289c <oled_selection_screen>
		mode = 0;
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x60>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
		oled_clear_screen();

	}


}
 80022a0:	e00f      	b.n	80022c2 <HAL_GPIO_EXTI_Callback+0x52>
		oled_clear_screen();
 80022a2:	f000 fa69 	bl	8002778 <oled_clear_screen>
		mode = 1;
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x60>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
		char *s = "Tuning";
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_GPIO_EXTI_Callback+0x64>)
 80022ae:	60fb      	str	r3, [r7, #12]
		oled_print_string(s);
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 fa1f 	bl	80026f4 <oled_print_string>
		HAL_Delay(2000);
 80022b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022ba:	f001 fb7f 	bl	80039bc <HAL_Delay>
		oled_clear_screen();
 80022be:	f000 fa5b 	bl	8002778 <oled_clear_screen>
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000290 	.word	0x20000290
 80022d0:	20000298 	.word	0x20000298
 80022d4:	0800d7e0 	.word	0x0800d7e0

080022d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022dc:	b672      	cpsid	i
}
 80022de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80022e0:	e7fe      	b.n	80022e0 <Error_Handler+0x8>

080022e2 <mpm_sum_f32>:
	printf("end\n");
}


void mpm_sum_f32(float32_t *pSrc, uint16_t scrLen, float32_t *pRes)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b087      	sub	sp, #28
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	460b      	mov	r3, r1
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	817b      	strh	r3, [r7, #10]
	*pRes = 0;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < scrLen; i++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	82fb      	strh	r3, [r7, #22]
 80022fc:	e010      	b.n	8002320 <mpm_sum_f32+0x3e>
	{
		 *pRes += *pSrc;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	ed93 7a00 	vldr	s14, [r3]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	edd3 7a00 	vldr	s15, [r3]
 800230a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	edc3 7a00 	vstr	s15, [r3]
		 pSrc++;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	3304      	adds	r3, #4
 8002318:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < scrLen; i++)
 800231a:	8afb      	ldrh	r3, [r7, #22]
 800231c:	3301      	adds	r3, #1
 800231e:	82fb      	strh	r3, [r7, #22]
 8002320:	8afa      	ldrh	r2, [r7, #22]
 8002322:	897b      	ldrh	r3, [r7, #10]
 8002324:	429a      	cmp	r2, r3
 8002326:	d3ea      	bcc.n	80022fe <mpm_sum_f32+0x1c>
	}
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <mpm_find_peak_f32>:


void mpm_find_peak_f32(float32_t *pSrc, uint16_t *tau)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
	uint16_t flag = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	82fb      	strh	r3, [r7, #22]
	uint16_t valid_peak_flag = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	82bb      	strh	r3, [r7, #20]
	float32_t peak_value = 0;
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	613b      	str	r3, [r7, #16]

	for (uint16_t i = 0; i < BLOCK_SIZE; i++)
 8002350:	2300      	movs	r3, #0
 8002352:	81fb      	strh	r3, [r7, #14]
 8002354:	e038      	b.n	80023c8 <mpm_find_peak_f32+0x90>
    {

       if (flag == 0 && *pSrc < 0)
 8002356:	8afb      	ldrh	r3, [r7, #22]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d109      	bne.n	8002370 <mpm_find_peak_f32+0x38>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	edd3 7a00 	vldr	s15, [r3]
 8002362:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236a:	d501      	bpl.n	8002370 <mpm_find_peak_f32+0x38>
       {
           flag = 1;
 800236c:	2301      	movs	r3, #1
 800236e:	82fb      	strh	r3, [r7, #22]

       }
       if (flag == 1)
 8002370:	8afb      	ldrh	r3, [r7, #22]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d122      	bne.n	80023bc <mpm_find_peak_f32+0x84>
       {
       		if (*pSrc > peak_value && *pSrc > PEAK_THRESHOLD)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002388:	d515      	bpl.n	80023b6 <mpm_find_peak_f32+0x7e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f8da 	bl	8000548 <__aeabi_f2d>
 8002394:	a312      	add	r3, pc, #72	; (adr r3, 80023e0 <mpm_find_peak_f32+0xa8>)
 8002396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239a:	f7fe fbbd 	bl	8000b18 <__aeabi_dcmpgt>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <mpm_find_peak_f32+0x7e>
       		{
				peak_value = *pSrc;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	613b      	str	r3, [r7, #16]
              	*tau = i;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	89fa      	ldrh	r2, [r7, #14]
 80023ae:	801a      	strh	r2, [r3, #0]
                valid_peak_flag = 1;
 80023b0:	2301      	movs	r3, #1
 80023b2:	82bb      	strh	r3, [r7, #20]
 80023b4:	e002      	b.n	80023bc <mpm_find_peak_f32+0x84>

       		} else if (valid_peak_flag == 1)
 80023b6:	8abb      	ldrh	r3, [r7, #20]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d00a      	beq.n	80023d2 <mpm_find_peak_f32+0x9a>
       		{
       			return;
       		}
       }
       pSrc++;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	607b      	str	r3, [r7, #4]
	for (uint16_t i = 0; i < BLOCK_SIZE; i++)
 80023c2:	89fb      	ldrh	r3, [r7, #14]
 80023c4:	3301      	adds	r3, #1
 80023c6:	81fb      	strh	r3, [r7, #14]
 80023c8:	89fb      	ldrh	r3, [r7, #14]
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ce:	d3c2      	bcc.n	8002356 <mpm_find_peak_f32+0x1e>
 80023d0:	e000      	b.n	80023d4 <mpm_find_peak_f32+0x9c>
       			return;
 80023d2:	bf00      	nop
    }
}
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	f3af 8000 	nop.w
 80023e0:	cccccccd 	.word	0xcccccccd
 80023e4:	3feccccc 	.word	0x3feccccc

080023e8 <mpm_NSDF_f32>:


void mpm_NSDF_f32(float32_t *pSrc, float32_t **pDst)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	; 0x30
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]

	float32_t *xcorr = &mpm_reserved_memory[1];
 80023f2:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <mpm_NSDF_f32+0xd8>)
 80023f4:	613b      	str	r3, [r7, #16]


	arm_correlate_f32(&pSrc[0], BLOCK_SIZE , &pSrc[0], BLOCK_SIZE, xcorr);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f007 f853 	bl	80094b0 <arm_correlate_f32>


	float32_t *r = &xcorr[BLOCK_SIZE - 1];
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
	*pDst = r;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002416:	601a      	str	r2, [r3, #0]

	float32_t *xs = &mpm_reserved_memory[0];
 8002418:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <mpm_NSDF_f32+0xdc>)
 800241a:	60fb      	str	r3, [r7, #12]
	float32_t *p_xs1 = &xs[0];
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	623b      	str	r3, [r7, #32]
	float32_t *p_xs2 = &xs[BLOCK_SIZE - 1];
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 8002426:	61fb      	str	r3, [r7, #28]
	float32_t xs1, xs2;

	arm_mult_f32(&pSrc[0], &pSrc[0],  &xs[0], BLOCK_SIZE);
 8002428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f007 fba7 	bl	8009b84 <arm_mult_f32>
	mpm_sum_f32(&xs[0], BLOCK_SIZE, &xs1);
 8002436:	f107 0308 	add.w	r3, r7, #8
 800243a:	461a      	mov	r2, r3
 800243c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f7ff ff4e 	bl	80022e2 <mpm_sum_f32>
	xs2 = xs1;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	61bb      	str	r3, [r7, #24]


	for (uint16_t tau = 0; tau < BLOCK_SIZE  ; tau++)
 800244a:	2300      	movs	r3, #0
 800244c:	82fb      	strh	r3, [r7, #22]
 800244e:	e02d      	b.n	80024ac <mpm_NSDF_f32+0xc4>
	{

		*r = 2 * (*r) / (xs1 + xs2);
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800245a:	ed97 7a02 	vldr	s14, [r7, #8]
 800245e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002462:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	edc3 7a00 	vstr	s15, [r3]

		xs1 = xs1 - (*p_xs1);
 8002470:	ed97 7a02 	vldr	s14, [r7, #8]
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	edd3 7a00 	vldr	s15, [r3]
 800247a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247e:	edc7 7a02 	vstr	s15, [r7, #8]
		xs2 = xs2 - (*p_xs2);
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	edd3 7a00 	vldr	s15, [r3]
 8002488:	ed97 7a06 	vldr	s14, [r7, #24]
 800248c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002490:	edc7 7a06 	vstr	s15, [r7, #24]

		r++;
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	3304      	adds	r3, #4
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
		p_xs1++;
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	3304      	adds	r3, #4
 800249e:	623b      	str	r3, [r7, #32]
		p_xs2--;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	3b04      	subs	r3, #4
 80024a4:	61fb      	str	r3, [r7, #28]
	for (uint16_t tau = 0; tau < BLOCK_SIZE  ; tau++)
 80024a6:	8afb      	ldrh	r3, [r7, #22]
 80024a8:	3301      	adds	r3, #1
 80024aa:	82fb      	strh	r3, [r7, #22]
 80024ac:	8afb      	ldrh	r3, [r7, #22]
 80024ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b2:	d3cd      	bcc.n	8002450 <mpm_NSDF_f32+0x68>
	}
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3728      	adds	r7, #40	; 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200002bc 	.word	0x200002bc
 80024c4:	200002b8 	.word	0x200002b8

080024c8 <mpm_parabolic_interpolation_f32>:


void mpm_parabolic_interpolation_f32(uint16_t x_pos, float32_t a, float32_t b, float32_t c, float32_t *delta_tau)
{
 80024c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024cc:	b088      	sub	sp, #32
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	ed87 0a04 	vstr	s0, [r7, #16]
 80024d6:	edc7 0a03 	vstr	s1, [r7, #12]
 80024da:	ed87 1a02 	vstr	s2, [r7, #8]
 80024de:	6079      	str	r1, [r7, #4]
 80024e0:	82fb      	strh	r3, [r7, #22]
	a = 20*log10(a);
 80024e2:	6938      	ldr	r0, [r7, #16]
 80024e4:	f7fe f830 	bl	8000548 <__aeabi_f2d>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	ec43 2b10 	vmov	d0, r2, r3
 80024f0:	f00a fb6e 	bl	800cbd0 <log10>
 80024f4:	ec51 0b10 	vmov	r0, r1, d0
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	4b43      	ldr	r3, [pc, #268]	; (800260c <mpm_parabolic_interpolation_f32+0x144>)
 80024fe:	f7fe f87b 	bl	80005f8 <__aeabi_dmul>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	f7fe fb4d 	bl	8000ba8 <__aeabi_d2f>
 800250e:	4603      	mov	r3, r0
 8002510:	613b      	str	r3, [r7, #16]
	b = 20*log10(b);
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7fe f818 	bl	8000548 <__aeabi_f2d>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	ec43 2b10 	vmov	d0, r2, r3
 8002520:	f00a fb56 	bl	800cbd0 <log10>
 8002524:	ec51 0b10 	vmov	r0, r1, d0
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	4b37      	ldr	r3, [pc, #220]	; (800260c <mpm_parabolic_interpolation_f32+0x144>)
 800252e:	f7fe f863 	bl	80005f8 <__aeabi_dmul>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	f7fe fb35 	bl	8000ba8 <__aeabi_d2f>
 800253e:	4603      	mov	r3, r0
 8002540:	60fb      	str	r3, [r7, #12]
	c = 20*log10(c);
 8002542:	68b8      	ldr	r0, [r7, #8]
 8002544:	f7fe f800 	bl	8000548 <__aeabi_f2d>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	ec43 2b10 	vmov	d0, r2, r3
 8002550:	f00a fb3e 	bl	800cbd0 <log10>
 8002554:	ec51 0b10 	vmov	r0, r1, d0
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	4b2b      	ldr	r3, [pc, #172]	; (800260c <mpm_parabolic_interpolation_f32+0x144>)
 800255e:	f7fe f84b 	bl	80005f8 <__aeabi_dmul>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4610      	mov	r0, r2
 8002568:	4619      	mov	r1, r3
 800256a:	f7fe fb1d 	bl	8000ba8 <__aeabi_d2f>
 800256e:	4603      	mov	r3, r0
 8002570:	60bb      	str	r3, [r7, #8]

	float32_t delta_pos = 0.5 * (a - c) / (1 - 2.0*b + c);
 8002572:	ed97 7a04 	vldr	s14, [r7, #16]
 8002576:	edd7 7a02 	vldr	s15, [r7, #8]
 800257a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257e:	ee17 0a90 	vmov	r0, s15
 8002582:	f7fd ffe1 	bl	8000548 <__aeabi_f2d>
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	4b21      	ldr	r3, [pc, #132]	; (8002610 <mpm_parabolic_interpolation_f32+0x148>)
 800258c:	f7fe f834 	bl	80005f8 <__aeabi_dmul>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4614      	mov	r4, r2
 8002596:	461d      	mov	r5, r3
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7fd ffd5 	bl	8000548 <__aeabi_f2d>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	f7fd fe73 	bl	800028c <__adddf3>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	f04f 0000 	mov.w	r0, #0
 80025ae:	4919      	ldr	r1, [pc, #100]	; (8002614 <mpm_parabolic_interpolation_f32+0x14c>)
 80025b0:	f7fd fe6a 	bl	8000288 <__aeabi_dsub>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4690      	mov	r8, r2
 80025ba:	4699      	mov	r9, r3
 80025bc:	68b8      	ldr	r0, [r7, #8]
 80025be:	f7fd ffc3 	bl	8000548 <__aeabi_f2d>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4640      	mov	r0, r8
 80025c8:	4649      	mov	r1, r9
 80025ca:	f7fd fe5f 	bl	800028c <__adddf3>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7fe f939 	bl	800084c <__aeabi_ddiv>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7fe fae1 	bl	8000ba8 <__aeabi_d2f>
 80025e6:	4603      	mov	r3, r0
 80025e8:	61fb      	str	r3, [r7, #28]

	*delta_tau = x_pos + delta_pos;
 80025ea:	8afb      	ldrh	r3, [r7, #22]
 80025ec:	ee07 3a90 	vmov	s15, r3
 80025f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80025f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	edc3 7a00 	vstr	s15, [r3]
}
 8002602:	bf00      	nop
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800260c:	40340000 	.word	0x40340000
 8002610:	3fe00000 	.word	0x3fe00000
 8002614:	3ff00000 	.word	0x3ff00000

08002618 <mpm_mcleod_pitch_method_f32>:


void mpm_mcleod_pitch_method_f32(float32_t *pData, float32_t *pitch_estimate)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	; 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]


	float32_t *p_ncorr;

	mpm_NSDF_f32(pData, &p_ncorr);
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	4619      	mov	r1, r3
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff fedd 	bl	80023e8 <mpm_NSDF_f32>
	uint16_t tau = 1;
 800262e:	2301      	movs	r3, #1
 8002630:	827b      	strh	r3, [r7, #18]
	mpm_find_peak_f32(p_ncorr, &tau);
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f107 0212 	add.w	r2, r7, #18
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fe7c 	bl	8002338 <mpm_find_peak_f32>



   if (tau > BLOCK_SIZE - 2)
 8002640:	8a7b      	ldrh	r3, [r7, #18]
 8002642:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8002646:	4293      	cmp	r3, r2
 8002648:	d902      	bls.n	8002650 <mpm_mcleod_pitch_method_f32+0x38>
   {
   	tau = BLOCK_SIZE - 2;
 800264a:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800264e:	827b      	strh	r3, [r7, #18]
   }

	uint16_t xp = tau;
 8002650:	8a7b      	ldrh	r3, [r7, #18]
 8002652:	84fb      	strh	r3, [r7, #38]	; 0x26
	float32_t a = p_ncorr[tau - 1];
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	8a7b      	ldrh	r3, [r7, #18]
 8002658:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800265c:	3b01      	subs	r3, #1
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	623b      	str	r3, [r7, #32]
	float32_t b = p_ncorr[tau];
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	8a7b      	ldrh	r3, [r7, #18]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	61fb      	str	r3, [r7, #28]
	float32_t c = p_ncorr[tau + 1];
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	8a7b      	ldrh	r3, [r7, #18]
 8002676:	3301      	adds	r3, #1
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	61bb      	str	r3, [r7, #24]

	float32_t delta_tau = 0;
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
	mpm_parabolic_interpolation_f32(xp, a, b, c, &delta_tau);
 8002686:	f107 020c 	add.w	r2, r7, #12
 800268a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800268c:	4611      	mov	r1, r2
 800268e:	ed97 1a06 	vldr	s2, [r7, #24]
 8002692:	edd7 0a07 	vldr	s1, [r7, #28]
 8002696:	ed97 0a08 	vldr	s0, [r7, #32]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff14 	bl	80024c8 <mpm_parabolic_interpolation_f32>


	*pitch_estimate = FS / delta_tau;
 80026a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80026a4:	eddf 6a05 	vldr	s13, [pc, #20]	; 80026bc <mpm_mcleod_pitch_method_f32+0xa4>
 80026a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	edc3 7a00 	vstr	s15, [r3]
}
 80026b2:	bf00      	nop
 80026b4:	3728      	adds	r7, #40	; 0x28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	471c4000 	.word	0x471c4000

080026c0 <oled_init>:
#define RADIUS 30



void oled_init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	ssd1306_Init1();
 80026c4:	f001 f836 	bl	8003734 <ssd1306_Init1>
	ssd1306_Fill(White);
 80026c8:	2001      	movs	r0, #1
 80026ca:	f000 fd71 	bl	80031b0 <ssd1306_Fill>
	ssd1306_DrawCircle(SCREEN_CENTRE_X, SCREEN_CENTRE_Y, RADIUS, Black);
 80026ce:	2300      	movs	r3, #0
 80026d0:	221e      	movs	r2, #30
 80026d2:	2120      	movs	r1, #32
 80026d4:	2040      	movs	r0, #64	; 0x40
 80026d6:	f000 ff3d 	bl	8003554 <ssd1306_DrawCircle>
		ssd1306_UpdateScreen();
	}

	HAL_Delay(1000);
 	 */
	ssd1306_Fill(White);
 80026da:	2001      	movs	r0, #1
 80026dc:	f000 fd68 	bl	80031b0 <ssd1306_Fill>
	ssd1306_DrawCircle(SCREEN_CENTRE_X, SCREEN_CENTRE_Y, RADIUS, Black);
 80026e0:	2300      	movs	r3, #0
 80026e2:	221e      	movs	r2, #30
 80026e4:	2120      	movs	r1, #32
 80026e6:	2040      	movs	r0, #64	; 0x40
 80026e8:	f000 ff34 	bl	8003554 <ssd1306_DrawCircle>
	ssd1306_UpdateScreen();
 80026ec:	f000 fd84 	bl	80031f8 <ssd1306_UpdateScreen>
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <oled_print_string>:

void oled_print_string(char *string)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	 ssd1306_SetCursor(10, 24);
 80026fc:	2118      	movs	r1, #24
 80026fe:	200a      	movs	r0, #10
 8002700:	f000 fea4 	bl	800344c <ssd1306_SetCursor>
	 ssd1306_WriteString(string, FONT_MED, Black);
 8002704:	4a05      	ldr	r2, [pc, #20]	; (800271c <oled_print_string+0x28>)
 8002706:	2300      	movs	r3, #0
 8002708:	ca06      	ldmia	r2, {r1, r2}
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fe78 	bl	8003400 <ssd1306_WriteString>
	 ssd1306_UpdateScreen();
 8002710:	f000 fd72 	bl	80031f8 <ssd1306_UpdateScreen>

}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	2000001c 	.word	0x2000001c

08002720 <oled_print_f32>:


void oled_print_f32(float *var)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	char var_string[10] = {0};
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	f107 0310 	add.w	r3, r7, #16
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	809a      	strh	r2, [r3, #4]
	sprintf(var_string,"%.1f", *var);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7fd ff04 	bl	8000548 <__aeabi_f2d>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	f107 000c 	add.w	r0, r7, #12
 8002748:	4909      	ldr	r1, [pc, #36]	; (8002770 <oled_print_f32+0x50>)
 800274a:	f007 ff0b 	bl	800a564 <siprintf>

	ssd1306_WriteString(var_string, FONT_LARGE, Black);
 800274e:	4a09      	ldr	r2, [pc, #36]	; (8002774 <oled_print_f32+0x54>)
 8002750:	f107 000c 	add.w	r0, r7, #12
 8002754:	2300      	movs	r3, #0
 8002756:	ca06      	ldmia	r2, {r1, r2}
 8002758:	f000 fe52 	bl	8003400 <ssd1306_WriteString>
	ssd1306_SetCursor(25, 24);
 800275c:	2118      	movs	r1, #24
 800275e:	2019      	movs	r0, #25
 8002760:	f000 fe74 	bl	800344c <ssd1306_SetCursor>
	ssd1306_UpdateScreen();
 8002764:	f000 fd48 	bl	80031f8 <ssd1306_UpdateScreen>
}
 8002768:	bf00      	nop
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	0800d7e8 	.word	0x0800d7e8
 8002774:	20000024 	.word	0x20000024

08002778 <oled_clear_screen>:
	ssd1306_UpdateScreen();
}


void oled_clear_screen(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0

	ssd1306_Fill(White);
 800277c:	2001      	movs	r0, #1
 800277e:	f000 fd17 	bl	80031b0 <ssd1306_Fill>
	ssd1306_DrawCircle(SCREEN_CENTRE_X, SCREEN_CENTRE_Y, RADIUS, Black);
 8002782:	2300      	movs	r3, #0
 8002784:	221e      	movs	r2, #30
 8002786:	2120      	movs	r1, #32
 8002788:	2040      	movs	r0, #64	; 0x40
 800278a:	f000 fee3 	bl	8003554 <ssd1306_DrawCircle>
	ssd1306_UpdateScreen();
 800278e:	f000 fd33 	bl	80031f8 <ssd1306_UpdateScreen>


}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <oled_tone_screen>:
}



void oled_tone_screen(int tone)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

	ssd1306_Fill(White);
 80027a0:	2001      	movs	r0, #1
 80027a2:	f000 fd05 	bl	80031b0 <ssd1306_Fill>

	char tone_screen[5] = "Tone";
 80027a6:	4a1d      	ldr	r2, [pc, #116]	; (800281c <oled_tone_screen+0x84>)
 80027a8:	f107 0320 	add.w	r3, r7, #32
 80027ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027b0:	6018      	str	r0, [r3, #0]
 80027b2:	3304      	adds	r3, #4
 80027b4:	7019      	strb	r1, [r3, #0]
	char tone_scc[7] = "Screen";
 80027b6:	4a1a      	ldr	r2, [pc, #104]	; (8002820 <oled_tone_screen+0x88>)
 80027b8:	f107 0318 	add.w	r3, r7, #24
 80027bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027c0:	6018      	str	r0, [r3, #0]
 80027c2:	3304      	adds	r3, #4
 80027c4:	8019      	strh	r1, [r3, #0]
 80027c6:	3302      	adds	r3, #2
 80027c8:	0c0a      	lsrs	r2, r1, #16
 80027ca:	701a      	strb	r2, [r3, #0]


	ssd1306_Fill(White);
 80027cc:	2001      	movs	r0, #1
 80027ce:	f000 fcef 	bl	80031b0 <ssd1306_Fill>
	ssd1306_SetCursor(84, MID_Y_POS_MED);
 80027d2:	2118      	movs	r1, #24
 80027d4:	2054      	movs	r0, #84	; 0x54
 80027d6:	f000 fe39 	bl	800344c <ssd1306_SetCursor>
	char tone_string[10];
	sprintf(tone_string,"%d", tone);
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4910      	ldr	r1, [pc, #64]	; (8002824 <oled_tone_screen+0x8c>)
 80027e2:	4618      	mov	r0, r3
 80027e4:	f007 febe 	bl	800a564 <siprintf>
	ssd1306_WriteString(tone_string, FONT_MED, Black);
 80027e8:	4a0f      	ldr	r2, [pc, #60]	; (8002828 <oled_tone_screen+0x90>)
 80027ea:	f107 000c 	add.w	r0, r7, #12
 80027ee:	2300      	movs	r3, #0
 80027f0:	ca06      	ldmia	r2, {r1, r2}
 80027f2:	f000 fe05 	bl	8003400 <ssd1306_WriteString>
	ssd1306_SetCursor(18, MID_Y_POS_MED);
 80027f6:	2118      	movs	r1, #24
 80027f8:	2012      	movs	r0, #18
 80027fa:	f000 fe27 	bl	800344c <ssd1306_SetCursor>
	ssd1306_WriteString("Tone: ", FONT_MED, Black);
 80027fe:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <oled_tone_screen+0x90>)
 8002800:	2300      	movs	r3, #0
 8002802:	ca06      	ldmia	r2, {r1, r2}
 8002804:	4809      	ldr	r0, [pc, #36]	; (800282c <oled_tone_screen+0x94>)
 8002806:	f000 fdfb 	bl	8003400 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800280a:	f000 fcf5 	bl	80031f8 <ssd1306_UpdateScreen>
	HAL_Delay(100);
 800280e:	2064      	movs	r0, #100	; 0x64
 8002810:	f001 f8d4 	bl	80039bc <HAL_Delay>

}
 8002814:	bf00      	nop
 8002816:	3728      	adds	r7, #40	; 0x28
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	0800d800 	.word	0x0800d800
 8002820:	0800d808 	.word	0x0800d808
 8002824:	0800d7f4 	.word	0x0800d7f4
 8002828:	2000001c 	.word	0x2000001c
 800282c:	0800d7f8 	.word	0x0800d7f8

08002830 <oled_timing_screen>:

void oled_timing_screen(int timing)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

	ssd1306_Fill(White);
 8002838:	2001      	movs	r0, #1
 800283a:	f000 fcb9 	bl	80031b0 <ssd1306_Fill>


	ssd1306_Fill(White);
 800283e:	2001      	movs	r0, #1
 8002840:	f000 fcb6 	bl	80031b0 <ssd1306_Fill>
	ssd1306_SetCursor(30, MID_Y_POS_MED);
 8002844:	2118      	movs	r1, #24
 8002846:	201e      	movs	r0, #30
 8002848:	f000 fe00 	bl	800344c <ssd1306_SetCursor>
	char timing_string[10];
	sprintf(timing_string,"%d", timing);
 800284c:	f107 030c 	add.w	r3, r7, #12
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	490f      	ldr	r1, [pc, #60]	; (8002890 <oled_timing_screen+0x60>)
 8002854:	4618      	mov	r0, r3
 8002856:	f007 fe85 	bl	800a564 <siprintf>
	ssd1306_WriteString(timing_string, FONT_MED, Black);
 800285a:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <oled_timing_screen+0x64>)
 800285c:	f107 000c 	add.w	r0, r7, #12
 8002860:	2300      	movs	r3, #0
 8002862:	ca06      	ldmia	r2, {r1, r2}
 8002864:	f000 fdcc 	bl	8003400 <ssd1306_WriteString>
	ssd1306_SetCursor(70, MID_Y_POS_MED);
 8002868:	2118      	movs	r1, #24
 800286a:	2046      	movs	r0, #70	; 0x46
 800286c:	f000 fdee 	bl	800344c <ssd1306_SetCursor>
	ssd1306_WriteString(" BPM", FONT_MED, Black);
 8002870:	4a08      	ldr	r2, [pc, #32]	; (8002894 <oled_timing_screen+0x64>)
 8002872:	2300      	movs	r3, #0
 8002874:	ca06      	ldmia	r2, {r1, r2}
 8002876:	4808      	ldr	r0, [pc, #32]	; (8002898 <oled_timing_screen+0x68>)
 8002878:	f000 fdc2 	bl	8003400 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800287c:	f000 fcbc 	bl	80031f8 <ssd1306_UpdateScreen>
	HAL_Delay(100);
 8002880:	2064      	movs	r0, #100	; 0x64
 8002882:	f001 f89b 	bl	80039bc <HAL_Delay>

}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	0800d7f4 	.word	0x0800d7f4
 8002894:	2000001c 	.word	0x2000001c
 8002898:	0800d810 	.word	0x0800d810

0800289c <oled_selection_screen>:


void oled_selection_screen(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
	ssd1306_Fill(White);
 80028a2:	2001      	movs	r0, #1
 80028a4:	f000 fc84 	bl	80031b0 <ssd1306_Fill>

	char selection_screen[5] = "Tone";
 80028a8:	4a16      	ldr	r2, [pc, #88]	; (8002904 <oled_selection_screen+0x68>)
 80028aa:	463b      	mov	r3, r7
 80028ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028b0:	6018      	str	r0, [r3, #0]
 80028b2:	3304      	adds	r3, #4
 80028b4:	7019      	strb	r1, [r3, #0]
	char *timing_screen = "Metronome";
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <oled_selection_screen+0x6c>)
 80028b8:	60bb      	str	r3, [r7, #8]
	for(int x = 98; x > MID_X_POS_MED; x--)
 80028ba:	2362      	movs	r3, #98	; 0x62
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	e018      	b.n	80028f2 <oled_selection_screen+0x56>
	{
		ssd1306_SetCursor(40, 10);
 80028c0:	210a      	movs	r1, #10
 80028c2:	2028      	movs	r0, #40	; 0x28
 80028c4:	f000 fdc2 	bl	800344c <ssd1306_SetCursor>
		ssd1306_WriteString(selection_screen, FONT_MED, Black);
 80028c8:	4a10      	ldr	r2, [pc, #64]	; (800290c <oled_selection_screen+0x70>)
 80028ca:	4638      	mov	r0, r7
 80028cc:	2300      	movs	r3, #0
 80028ce:	ca06      	ldmia	r2, {r1, r2}
 80028d0:	f000 fd96 	bl	8003400 <ssd1306_WriteString>
		ssd1306_SetCursor(15, 40);
 80028d4:	2128      	movs	r1, #40	; 0x28
 80028d6:	200f      	movs	r0, #15
 80028d8:	f000 fdb8 	bl	800344c <ssd1306_SetCursor>
		ssd1306_WriteString(timing_screen, FONT_MED, Black);
 80028dc:	4a0b      	ldr	r2, [pc, #44]	; (800290c <oled_selection_screen+0x70>)
 80028de:	2300      	movs	r3, #0
 80028e0:	ca06      	ldmia	r2, {r1, r2}
 80028e2:	68b8      	ldr	r0, [r7, #8]
 80028e4:	f000 fd8c 	bl	8003400 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80028e8:	f000 fc86 	bl	80031f8 <ssd1306_UpdateScreen>
	for(int x = 98; x > MID_X_POS_MED; x--)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b0a      	cmp	r3, #10
 80028f6:	dce3      	bgt.n	80028c0 <oled_selection_screen+0x24>

	}
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	0800d800 	.word	0x0800d800
 8002908:	0800d818 	.word	0x0800d818
 800290c:	2000001c 	.word	0x2000001c

08002910 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <HAL_MspInit+0x44>)
 8002918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291a:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <HAL_MspInit+0x44>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6613      	str	r3, [r2, #96]	; 0x60
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <HAL_MspInit+0x44>)
 8002924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_MspInit+0x44>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	4a08      	ldr	r2, [pc, #32]	; (8002954 <HAL_MspInit+0x44>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002938:	6593      	str	r3, [r2, #88]	; 0x58
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_MspInit+0x44>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000

08002958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b09a      	sub	sp, #104	; 0x68
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	225c      	movs	r2, #92	; 0x5c
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f007 f989 	bl	8009c80 <memset>
  if(hadc->Instance==ADC1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2e      	ldr	r2, [pc, #184]	; (8002a2c <HAL_ADC_MspInit+0xd4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d155      	bne.n	8002a24 <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002978:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800297c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800297e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002982:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002984:	2303      	movs	r3, #3
 8002986:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 6;
 8002988:	2306      	movs	r3, #6
 800298a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 43;
 800298c:	232b      	movs	r3, #43	; 0x2b
 800298e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002990:	2307      	movs	r3, #7
 8002992:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002994:	2302      	movs	r3, #2
 8002996:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8002998:	2304      	movs	r3, #4
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800299c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029a2:	f107 030c 	add.w	r3, r7, #12
 80029a6:	4618      	mov	r0, r3
 80029a8:	f004 ff78 	bl	800789c <HAL_RCCEx_PeriphCLKConfig>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 80029b2:	f7ff fc91 	bl	80022d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80029b6:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <HAL_ADC_MspInit+0xd8>)
 80029b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ba:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <HAL_ADC_MspInit+0xd8>)
 80029bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_ADC_MspInit+0xd8>)
 80029c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_ADC_MspInit+0xdc>)
 80029d0:	4a19      	ldr	r2, [pc, #100]	; (8002a38 <HAL_ADC_MspInit+0xe0>)
 80029d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <HAL_ADC_MspInit+0xdc>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <HAL_ADC_MspInit+0xdc>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_ADC_MspInit+0xdc>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80029e6:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_ADC_MspInit+0xdc>)
 80029e8:	2280      	movs	r2, #128	; 0x80
 80029ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_ADC_MspInit+0xdc>)
 80029ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <HAL_ADC_MspInit+0xdc>)
 80029f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80029fc:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_ADC_MspInit+0xdc>)
 80029fe:	2220      	movs	r2, #32
 8002a00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_ADC_MspInit+0xdc>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a08:	480a      	ldr	r0, [pc, #40]	; (8002a34 <HAL_ADC_MspInit+0xdc>)
 8002a0a:	f002 fbf3 	bl	80051f4 <HAL_DMA_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8002a14:	f7ff fc60 	bl	80022d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a06      	ldr	r2, [pc, #24]	; (8002a34 <HAL_ADC_MspInit+0xdc>)
 8002a1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a1e:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <HAL_ADC_MspInit+0xdc>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a24:	bf00      	nop
 8002a26:	3768      	adds	r7, #104	; 0x68
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	50040000 	.word	0x50040000
 8002a30:	40021000 	.word	0x40021000
 8002a34:	20002894 	.word	0x20002894
 8002a38:	40020008 	.word	0x40020008

08002a3c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	; 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2b      	ldr	r2, [pc, #172]	; (8002b08 <HAL_DAC_MspInit+0xcc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d14f      	bne.n	8002afe <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002a5e:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <HAL_DAC_MspInit+0xd0>)
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	4a2a      	ldr	r2, [pc, #168]	; (8002b0c <HAL_DAC_MspInit+0xd0>)
 8002a64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a68:	6593      	str	r3, [r2, #88]	; 0x58
 8002a6a:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <HAL_DAC_MspInit+0xd0>)
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	4b25      	ldr	r3, [pc, #148]	; (8002b0c <HAL_DAC_MspInit+0xd0>)
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	4a24      	ldr	r2, [pc, #144]	; (8002b0c <HAL_DAC_MspInit+0xd0>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a82:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <HAL_DAC_MspInit+0xd0>)
 8002a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a8e:	2310      	movs	r3, #16
 8002a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a92:	2303      	movs	r3, #3
 8002a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9a:	f107 0314 	add.w	r3, r7, #20
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa4:	f002 fd9e 	bl	80055e4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_DAC_MspInit+0xd4>)
 8002aaa:	4a1a      	ldr	r2, [pc, #104]	; (8002b14 <HAL_DAC_MspInit+0xd8>)
 8002aac:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8002aae:	4b18      	ldr	r3, [pc, #96]	; (8002b10 <HAL_DAC_MspInit+0xd4>)
 8002ab0:	2206      	movs	r2, #6
 8002ab2:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ab4:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_DAC_MspInit+0xd4>)
 8002ab6:	2210      	movs	r2, #16
 8002ab8:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <HAL_DAC_MspInit+0xd4>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002ac0:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <HAL_DAC_MspInit+0xd4>)
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_DAC_MspInit+0xd4>)
 8002ac8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002acc:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <HAL_DAC_MspInit+0xd4>)
 8002ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ad4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <HAL_DAC_MspInit+0xd4>)
 8002ad8:	2220      	movs	r2, #32
 8002ada:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <HAL_DAC_MspInit+0xd4>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002ae2:	480b      	ldr	r0, [pc, #44]	; (8002b10 <HAL_DAC_MspInit+0xd4>)
 8002ae4:	f002 fb86 	bl	80051f4 <HAL_DMA_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002aee:	f7ff fbf3 	bl	80022d8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a06      	ldr	r2, [pc, #24]	; (8002b10 <HAL_DAC_MspInit+0xd4>)
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <HAL_DAC_MspInit+0xd4>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002afe:	bf00      	nop
 8002b00:	3728      	adds	r7, #40	; 0x28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40007400 	.word	0x40007400
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	200027a4 	.word	0x200027a4
 8002b14:	40020030 	.word	0x40020030

08002b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b0a2      	sub	sp, #136	; 0x88
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b30:	f107 0318 	add.w	r3, r7, #24
 8002b34:	225c      	movs	r2, #92	; 0x5c
 8002b36:	2100      	movs	r1, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f007 f8a1 	bl	8009c80 <memset>
  if(hi2c->Instance==I2C1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a3f      	ldr	r2, [pc, #252]	; (8002c40 <HAL_I2C_MspInit+0x128>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d138      	bne.n	8002bba <HAL_I2C_MspInit+0xa2>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b48:	2340      	movs	r3, #64	; 0x40
 8002b4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b50:	f107 0318 	add.w	r3, r7, #24
 8002b54:	4618      	mov	r0, r3
 8002b56:	f004 fea1 	bl	800789c <HAL_RCCEx_PeriphCLKConfig>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002b60:	f7ff fbba 	bl	80022d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b64:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <HAL_I2C_MspInit+0x12c>)
 8002b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b68:	4a36      	ldr	r2, [pc, #216]	; (8002c44 <HAL_I2C_MspInit+0x12c>)
 8002b6a:	f043 0302 	orr.w	r3, r3, #2
 8002b6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b70:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <HAL_I2C_MspInit+0x12c>)
 8002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b7c:	23c0      	movs	r3, #192	; 0xc0
 8002b7e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b80:	2312      	movs	r3, #18
 8002b82:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b8e:	2304      	movs	r3, #4
 8002b90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b98:	4619      	mov	r1, r3
 8002b9a:	482b      	ldr	r0, [pc, #172]	; (8002c48 <HAL_I2C_MspInit+0x130>)
 8002b9c:	f002 fd22 	bl	80055e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ba0:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <HAL_I2C_MspInit+0x12c>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	4a27      	ldr	r2, [pc, #156]	; (8002c44 <HAL_I2C_MspInit+0x12c>)
 8002ba6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002baa:	6593      	str	r3, [r2, #88]	; 0x58
 8002bac:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <HAL_I2C_MspInit+0x12c>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002bb8:	e03d      	b.n	8002c36 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a23      	ldr	r2, [pc, #140]	; (8002c4c <HAL_I2C_MspInit+0x134>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d138      	bne.n	8002c36 <HAL_I2C_MspInit+0x11e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bcc:	f107 0318 	add.w	r3, r7, #24
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f004 fe63 	bl	800789c <HAL_RCCEx_PeriphCLKConfig>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_I2C_MspInit+0xc8>
      Error_Handler();
 8002bdc:	f7ff fb7c 	bl	80022d8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be0:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <HAL_I2C_MspInit+0x12c>)
 8002be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be4:	4a17      	ldr	r2, [pc, #92]	; (8002c44 <HAL_I2C_MspInit+0x12c>)
 8002be6:	f043 0302 	orr.w	r3, r3, #2
 8002bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <HAL_I2C_MspInit+0x12c>)
 8002bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002bf8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bfc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bfe:	2312      	movs	r3, #18
 8002c00:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c06:	2303      	movs	r3, #3
 8002c08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c12:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c16:	4619      	mov	r1, r3
 8002c18:	480b      	ldr	r0, [pc, #44]	; (8002c48 <HAL_I2C_MspInit+0x130>)
 8002c1a:	f002 fce3 	bl	80055e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_I2C_MspInit+0x12c>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c22:	4a08      	ldr	r2, [pc, #32]	; (8002c44 <HAL_I2C_MspInit+0x12c>)
 8002c24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c28:	6593      	str	r3, [r2, #88]	; 0x58
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_I2C_MspInit+0x12c>)
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
}
 8002c36:	bf00      	nop
 8002c38:	3788      	adds	r7, #136	; 0x88
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40005400 	.word	0x40005400
 8002c44:	40021000 	.word	0x40021000
 8002c48:	48000400 	.word	0x48000400
 8002c4c:	40005800 	.word	0x40005800

08002c50 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <HAL_OPAMP_MspInit+0x74>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d124      	bne.n	8002cbc <HAL_OPAMP_MspInit+0x6c>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_OPAMP_MspInit+0x78>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <HAL_OPAMP_MspInit+0x78>)
 8002c78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_OPAMP_MspInit+0x78>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <HAL_OPAMP_MspInit+0x78>)
 8002c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8e:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <HAL_OPAMP_MspInit+0x78>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c96:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <HAL_OPAMP_MspInit+0x78>)
 8002c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002ca2:	2309      	movs	r3, #9
 8002ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cae:	f107 0314 	add.w	r3, r7, #20
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb8:	f002 fc94 	bl	80055e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8002cbc:	bf00      	nop
 8002cbe:	3728      	adds	r7, #40	; 0x28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40007800 	.word	0x40007800
 8002cc8:	40021000 	.word	0x40021000

08002ccc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <HAL_TIM_PWM_MspInit+0x44>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d113      	bne.n	8002d06 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cde:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <HAL_TIM_PWM_MspInit+0x48>)
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce2:	4a0c      	ldr	r2, [pc, #48]	; (8002d14 <HAL_TIM_PWM_MspInit+0x48>)
 8002ce4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ce8:	6613      	str	r3, [r2, #96]	; 0x60
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_TIM_PWM_MspInit+0x48>)
 8002cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	2019      	movs	r0, #25
 8002cfc:	f002 f907 	bl	8004f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002d00:	2019      	movs	r0, #25
 8002d02:	f002 f920 	bl	8004f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40012c00 	.word	0x40012c00
 8002d14:	40021000 	.word	0x40021000

08002d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d28:	d114      	bne.n	8002d54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d2a:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <HAL_TIM_Base_MspInit+0x9c>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	4a21      	ldr	r2, [pc, #132]	; (8002db4 <HAL_TIM_Base_MspInit+0x9c>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6593      	str	r3, [r2, #88]	; 0x58
 8002d36:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <HAL_TIM_Base_MspInit+0x9c>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002d42:	2200      	movs	r2, #0
 8002d44:	2102      	movs	r1, #2
 8002d46:	201c      	movs	r0, #28
 8002d48:	f002 f8e1 	bl	8004f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d4c:	201c      	movs	r0, #28
 8002d4e:	f002 f8fa 	bl	8004f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002d52:	e02a      	b.n	8002daa <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a17      	ldr	r2, [pc, #92]	; (8002db8 <HAL_TIM_Base_MspInit+0xa0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10c      	bne.n	8002d78 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <HAL_TIM_Base_MspInit+0x9c>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <HAL_TIM_Base_MspInit+0x9c>)
 8002d64:	f043 0310 	orr.w	r3, r3, #16
 8002d68:	6593      	str	r3, [r2, #88]	; 0x58
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_TIM_Base_MspInit+0x9c>)
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]
}
 8002d76:	e018      	b.n	8002daa <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM16)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <HAL_TIM_Base_MspInit+0xa4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d113      	bne.n	8002daa <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_TIM_Base_MspInit+0x9c>)
 8002d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d86:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <HAL_TIM_Base_MspInit+0x9c>)
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_TIM_Base_MspInit+0x9c>)
 8002d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	2019      	movs	r0, #25
 8002da0:	f002 f8b5 	bl	8004f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002da4:	2019      	movs	r0, #25
 8002da6:	f002 f8ce 	bl	8004f46 <HAL_NVIC_EnableIRQ>
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40001000 	.word	0x40001000
 8002dbc:	40014400 	.word	0x40014400

08002dc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc8:	f107 030c 	add.w	r3, r7, #12
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <HAL_TIM_MspPostInit+0x68>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d11d      	bne.n	8002e1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de2:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_TIM_MspPostInit+0x6c>)
 8002de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de6:	4a11      	ldr	r2, [pc, #68]	; (8002e2c <HAL_TIM_MspPostInit+0x6c>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <HAL_TIM_MspPostInit+0x6c>)
 8002df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002dfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2302      	movs	r3, #2
 8002e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e10:	f107 030c 	add.w	r3, r7, #12
 8002e14:	4619      	mov	r1, r3
 8002e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e1a:	f002 fbe3 	bl	80055e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e1e:	bf00      	nop
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40012c00 	.word	0x40012c00
 8002e2c:	40021000 	.word	0x40021000

08002e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e34:	e7fe      	b.n	8002e34 <NMI_Handler+0x4>

08002e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e3a:	e7fe      	b.n	8002e3a <HardFault_Handler+0x4>

08002e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <MemManage_Handler+0x4>

08002e42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e46:	e7fe      	b.n	8002e46 <BusFault_Handler+0x4>

08002e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e4c:	e7fe      	b.n	8002e4c <UsageFault_Handler+0x4>

08002e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e7c:	f000 fd7e 	bl	800397c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e88:	4802      	ldr	r0, [pc, #8]	; (8002e94 <DMA1_Channel1_IRQHandler+0x10>)
 8002e8a:	f002 facb 	bl	8005424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20002894 	.word	0x20002894

08002e98 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002e9c:	4802      	ldr	r0, [pc, #8]	; (8002ea8 <DMA1_Channel3_IRQHandler+0x10>)
 8002e9e:	f002 fac1 	bl	8005424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200027a4 	.word	0x200027a4

08002eac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Switch_Int_Pin);
 8002eb0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002eb4:	f002 fd40 	bl	8005938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002eb8:	bf00      	nop
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ec0:	4803      	ldr	r0, [pc, #12]	; (8002ed0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002ec2:	f005 fb31 	bl	8008528 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002ec6:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002ec8:	f005 fb2e 	bl	8008528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002ecc:	bf00      	nop
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20003928 	.word	0x20003928
 8002ed4:	200049cc 	.word	0x200049cc

08002ed8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002edc:	4802      	ldr	r0, [pc, #8]	; (8002ee8 <TIM2_IRQHandler+0x10>)
 8002ede:	f005 fb23 	bl	8008528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20004974 	.word	0x20004974

08002eec <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002ef6:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <ITM_SendChar+0x48>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <ITM_SendChar+0x48>)
 8002efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f00:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <ITM_SendChar+0x4c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a0c      	ldr	r2, [pc, #48]	; (8002f38 <ITM_SendChar+0x4c>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002f0e:	bf00      	nop
 8002f10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f8      	beq.n	8002f10 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002f1e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	6013      	str	r3, [r2, #0]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000edfc 	.word	0xe000edfc
 8002f38:	e0000e00 	.word	0xe0000e00

08002f3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
	return 1;
 8002f40:	2301      	movs	r3, #1
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <_kill>:

int _kill(int pid, int sig)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f56:	f006 fe5b 	bl	8009c10 <__errno>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2216      	movs	r2, #22
 8002f5e:	601a      	str	r2, [r3, #0]
	return -1;
 8002f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <_exit>:

void _exit (int status)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff ffe7 	bl	8002f4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f7e:	e7fe      	b.n	8002f7e <_exit+0x12>

08002f80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	e00a      	b.n	8002fa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f92:	f3af 8000 	nop.w
 8002f96:	4601      	mov	r1, r0
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	60ba      	str	r2, [r7, #8]
 8002f9e:	b2ca      	uxtb	r2, r1
 8002fa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	dbf0      	blt.n	8002f92 <_read+0x12>
	}

return len;
 8002fb0:	687b      	ldr	r3, [r7, #4]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	e009      	b.n	8002fe0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);   // This sends to the trace
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	60ba      	str	r2, [r7, #8]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff89 	bl	8002eec <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	dbf1      	blt.n	8002fcc <_write+0x12>
	}
	return len;
 8002fe8:	687b      	ldr	r3, [r7, #4]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <_close>:

int _close(int file)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
	return -1;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800301a:	605a      	str	r2, [r3, #4]
	return 0;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <_isatty>:

int _isatty(int file)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
	return 1;
 8003032:	2301      	movs	r3, #1
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
	return 0;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003064:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <_sbrk+0x5c>)
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <_sbrk+0x60>)
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003070:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <_sbrk+0x64>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <_sbrk+0x64>)
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <_sbrk+0x68>)
 800307c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <_sbrk+0x64>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	429a      	cmp	r2, r3
 800308a:	d207      	bcs.n	800309c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800308c:	f006 fdc0 	bl	8009c10 <__errno>
 8003090:	4603      	mov	r3, r0
 8003092:	220c      	movs	r2, #12
 8003094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800309a:	e009      	b.n	80030b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <_sbrk+0x64>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <_sbrk+0x64>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <_sbrk+0x64>)
 80030ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030ae:	68fb      	ldr	r3, [r7, #12]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20010000 	.word	0x20010000
 80030bc:	00000400 	.word	0x00000400
 80030c0:	200022b8 	.word	0x200022b8
 80030c4:	20004a48 	.word	0x20004a48

080030c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <SystemInit+0x20>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	4a05      	ldr	r2, [pc, #20]	; (80030e8 <SystemInit+0x20>)
 80030d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003124 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030f0:	f7ff ffea 	bl	80030c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030f4:	480c      	ldr	r0, [pc, #48]	; (8003128 <LoopForever+0x6>)
  ldr r1, =_edata
 80030f6:	490d      	ldr	r1, [pc, #52]	; (800312c <LoopForever+0xa>)
  ldr r2, =_sidata
 80030f8:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <LoopForever+0xe>)
  movs r3, #0
 80030fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030fc:	e002      	b.n	8003104 <LoopCopyDataInit>

080030fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003102:	3304      	adds	r3, #4

08003104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003108:	d3f9      	bcc.n	80030fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800310a:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <LoopForever+0x12>)
  ldr r4, =_ebss
 800310c:	4c0a      	ldr	r4, [pc, #40]	; (8003138 <LoopForever+0x16>)
  movs r3, #0
 800310e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003110:	e001      	b.n	8003116 <LoopFillZerobss>

08003112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003114:	3204      	adds	r2, #4

08003116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003118:	d3fb      	bcc.n	8003112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800311a:	f006 fd7f 	bl	8009c1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800311e:	f7fe fc35 	bl	800198c <main>

08003122 <LoopForever>:

LoopForever:
    b LoopForever
 8003122:	e7fe      	b.n	8003122 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003124:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800312c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8003130:	0800fd68 	.word	0x0800fd68
  ldr r2, =_sbss
 8003134:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003138:	20004a48 	.word	0x20004a48

0800313c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800313c:	e7fe      	b.n	800313c <ADC1_IRQHandler>

0800313e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003142:	bf00      	nop
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af04      	add	r7, sp, #16
 8003152:	4603      	mov	r3, r0
 8003154:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800315a:	9302      	str	r3, [sp, #8]
 800315c:	2301      	movs	r3, #1
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	1dfb      	adds	r3, r7, #7
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2301      	movs	r3, #1
 8003166:	2200      	movs	r2, #0
 8003168:	2178      	movs	r1, #120	; 0x78
 800316a:	4803      	ldr	r0, [pc, #12]	; (8003178 <ssd1306_WriteCommand+0x2c>)
 800316c:	f002 fe76 	bl	8005e5c <HAL_I2C_Mem_Write>
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20002734 	.word	0x20002734

0800317c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af04      	add	r7, sp, #16
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	b29b      	uxth	r3, r3
 800318a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800318e:	9202      	str	r2, [sp, #8]
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	2301      	movs	r3, #1
 8003198:	2240      	movs	r2, #64	; 0x40
 800319a:	2178      	movs	r1, #120	; 0x78
 800319c:	4803      	ldr	r0, [pc, #12]	; (80031ac <ssd1306_WriteData+0x30>)
 800319e:	f002 fe5d 	bl	8005e5c <HAL_I2C_Mem_Write>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20002734 	.word	0x20002734

080031b0 <ssd1306_Fill>:




// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e00d      	b.n	80031dc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <ssd1306_Fill+0x1a>
 80031c6:	2100      	movs	r1, #0
 80031c8:	e000      	b.n	80031cc <ssd1306_Fill+0x1c>
 80031ca:	21ff      	movs	r1, #255	; 0xff
 80031cc:	4a09      	ldr	r2, [pc, #36]	; (80031f4 <ssd1306_Fill+0x44>)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4413      	add	r3, r2
 80031d2:	460a      	mov	r2, r1
 80031d4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	3301      	adds	r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e2:	d3ed      	bcc.n	80031c0 <ssd1306_Fill+0x10>
    }
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	200022bc 	.word	0x200022bc

080031f8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80031fe:	2300      	movs	r3, #0
 8003200:	71fb      	strb	r3, [r7, #7]
 8003202:	e016      	b.n	8003232 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	3b50      	subs	r3, #80	; 0x50
 8003208:	b2db      	uxtb	r3, r3
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ff9e 	bl	800314c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003210:	2000      	movs	r0, #0
 8003212:	f7ff ff9b 	bl	800314c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003216:	2010      	movs	r0, #16
 8003218:	f7ff ff98 	bl	800314c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	01db      	lsls	r3, r3, #7
 8003220:	4a08      	ldr	r2, [pc, #32]	; (8003244 <ssd1306_UpdateScreen+0x4c>)
 8003222:	4413      	add	r3, r2
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff ffa8 	bl	800317c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	3301      	adds	r3, #1
 8003230:	71fb      	strb	r3, [r7, #7]
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	2b07      	cmp	r3, #7
 8003236:	d9e5      	bls.n	8003204 <ssd1306_UpdateScreen+0xc>
    }
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	200022bc 	.word	0x200022bc

08003248 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
 8003252:	460b      	mov	r3, r1
 8003254:	71bb      	strb	r3, [r7, #6]
 8003256:	4613      	mov	r3, r2
 8003258:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	2b00      	cmp	r3, #0
 8003260:	db3d      	blt.n	80032de <ssd1306_DrawPixel+0x96>
 8003262:	79bb      	ldrb	r3, [r7, #6]
 8003264:	2b3f      	cmp	r3, #63	; 0x3f
 8003266:	d83a      	bhi.n	80032de <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003268:	797b      	ldrb	r3, [r7, #5]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d11a      	bne.n	80032a4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800326e:	79fa      	ldrb	r2, [r7, #7]
 8003270:	79bb      	ldrb	r3, [r7, #6]
 8003272:	08db      	lsrs	r3, r3, #3
 8003274:	b2d8      	uxtb	r0, r3
 8003276:	4603      	mov	r3, r0
 8003278:	01db      	lsls	r3, r3, #7
 800327a:	4413      	add	r3, r2
 800327c:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <ssd1306_DrawPixel+0xa4>)
 800327e:	5cd3      	ldrb	r3, [r2, r3]
 8003280:	b25a      	sxtb	r2, r3
 8003282:	79bb      	ldrb	r3, [r7, #6]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	2101      	movs	r1, #1
 800328a:	fa01 f303 	lsl.w	r3, r1, r3
 800328e:	b25b      	sxtb	r3, r3
 8003290:	4313      	orrs	r3, r2
 8003292:	b259      	sxtb	r1, r3
 8003294:	79fa      	ldrb	r2, [r7, #7]
 8003296:	4603      	mov	r3, r0
 8003298:	01db      	lsls	r3, r3, #7
 800329a:	4413      	add	r3, r2
 800329c:	b2c9      	uxtb	r1, r1
 800329e:	4a13      	ldr	r2, [pc, #76]	; (80032ec <ssd1306_DrawPixel+0xa4>)
 80032a0:	54d1      	strb	r1, [r2, r3]
 80032a2:	e01d      	b.n	80032e0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80032a4:	79fa      	ldrb	r2, [r7, #7]
 80032a6:	79bb      	ldrb	r3, [r7, #6]
 80032a8:	08db      	lsrs	r3, r3, #3
 80032aa:	b2d8      	uxtb	r0, r3
 80032ac:	4603      	mov	r3, r0
 80032ae:	01db      	lsls	r3, r3, #7
 80032b0:	4413      	add	r3, r2
 80032b2:	4a0e      	ldr	r2, [pc, #56]	; (80032ec <ssd1306_DrawPixel+0xa4>)
 80032b4:	5cd3      	ldrb	r3, [r2, r3]
 80032b6:	b25a      	sxtb	r2, r3
 80032b8:	79bb      	ldrb	r3, [r7, #6]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	2101      	movs	r1, #1
 80032c0:	fa01 f303 	lsl.w	r3, r1, r3
 80032c4:	b25b      	sxtb	r3, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	b25b      	sxtb	r3, r3
 80032ca:	4013      	ands	r3, r2
 80032cc:	b259      	sxtb	r1, r3
 80032ce:	79fa      	ldrb	r2, [r7, #7]
 80032d0:	4603      	mov	r3, r0
 80032d2:	01db      	lsls	r3, r3, #7
 80032d4:	4413      	add	r3, r2
 80032d6:	b2c9      	uxtb	r1, r1
 80032d8:	4a04      	ldr	r2, [pc, #16]	; (80032ec <ssd1306_DrawPixel+0xa4>)
 80032da:	54d1      	strb	r1, [r2, r3]
 80032dc:	e000      	b.n	80032e0 <ssd1306_DrawPixel+0x98>
        return;
 80032de:	bf00      	nop
    }
}
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	200022bc 	.word	0x200022bc

080032f0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	b089      	sub	sp, #36	; 0x24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4604      	mov	r4, r0
 80032f8:	1d38      	adds	r0, r7, #4
 80032fa:	e880 0006 	stmia.w	r0, {r1, r2}
 80032fe:	461a      	mov	r2, r3
 8003300:	4623      	mov	r3, r4
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	4613      	mov	r3, r2
 8003306:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b1f      	cmp	r3, #31
 800330c:	d902      	bls.n	8003314 <ssd1306_WriteChar+0x24>
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	2b7e      	cmp	r3, #126	; 0x7e
 8003312:	d901      	bls.n	8003318 <ssd1306_WriteChar+0x28>
        return 0;
 8003314:	2300      	movs	r3, #0
 8003316:	e06d      	b.n	80033f4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003318:	4b38      	ldr	r3, [pc, #224]	; (80033fc <ssd1306_WriteChar+0x10c>)
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	793b      	ldrb	r3, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	2b80      	cmp	r3, #128	; 0x80
 8003324:	dc06      	bgt.n	8003334 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003326:	4b35      	ldr	r3, [pc, #212]	; (80033fc <ssd1306_WriteChar+0x10c>)
 8003328:	885b      	ldrh	r3, [r3, #2]
 800332a:	461a      	mov	r2, r3
 800332c:	797b      	ldrb	r3, [r7, #5]
 800332e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003330:	2b40      	cmp	r3, #64	; 0x40
 8003332:	dd01      	ble.n	8003338 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003334:	2300      	movs	r3, #0
 8003336:	e05d      	b.n	80033f4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	e04c      	b.n	80033d8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	3b20      	subs	r3, #32
 8003344:	7979      	ldrb	r1, [r7, #5]
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4619      	mov	r1, r3
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	440b      	add	r3, r1
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	e034      	b.n	80033c8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d012      	beq.n	8003394 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800336e:	4b23      	ldr	r3, [pc, #140]	; (80033fc <ssd1306_WriteChar+0x10c>)
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	b2da      	uxtb	r2, r3
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	4413      	add	r3, r2
 800337a:	b2d8      	uxtb	r0, r3
 800337c:	4b1f      	ldr	r3, [pc, #124]	; (80033fc <ssd1306_WriteChar+0x10c>)
 800337e:	885b      	ldrh	r3, [r3, #2]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	4413      	add	r3, r2
 8003388:	b2db      	uxtb	r3, r3
 800338a:	7bba      	ldrb	r2, [r7, #14]
 800338c:	4619      	mov	r1, r3
 800338e:	f7ff ff5b 	bl	8003248 <ssd1306_DrawPixel>
 8003392:	e016      	b.n	80033c2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <ssd1306_WriteChar+0x10c>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	4413      	add	r3, r2
 80033a0:	b2d8      	uxtb	r0, r3
 80033a2:	4b16      	ldr	r3, [pc, #88]	; (80033fc <ssd1306_WriteChar+0x10c>)
 80033a4:	885b      	ldrh	r3, [r3, #2]
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	b2d9      	uxtb	r1, r3
 80033b0:	7bbb      	ldrb	r3, [r7, #14]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	f7ff ff43 	bl	8003248 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	3301      	adds	r3, #1
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	793b      	ldrb	r3, [r7, #4]
 80033ca:	461a      	mov	r2, r3
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d3c5      	bcc.n	800335e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3301      	adds	r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	797b      	ldrb	r3, [r7, #5]
 80033da:	461a      	mov	r2, r3
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	4293      	cmp	r3, r2
 80033e0:	d3ad      	bcc.n	800333e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <ssd1306_WriteChar+0x10c>)
 80033e4:	881a      	ldrh	r2, [r3, #0]
 80033e6:	793b      	ldrb	r3, [r7, #4]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	4b03      	ldr	r3, [pc, #12]	; (80033fc <ssd1306_WriteChar+0x10c>)
 80033f0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3724      	adds	r7, #36	; 0x24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	200026bc 	.word	0x200026bc

08003400 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	1d38      	adds	r0, r7, #4
 800340a:	e880 0006 	stmia.w	r0, {r1, r2}
 800340e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8003410:	e012      	b.n	8003438 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	7818      	ldrb	r0, [r3, #0]
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	1d3a      	adds	r2, r7, #4
 800341a:	ca06      	ldmia	r2, {r1, r2}
 800341c:	f7ff ff68 	bl	80032f0 <ssd1306_WriteChar>
 8003420:	4603      	mov	r3, r0
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d002      	beq.n	8003432 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	e008      	b.n	8003444 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3301      	adds	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e8      	bne.n	8003412 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	781b      	ldrb	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	460a      	mov	r2, r1
 8003456:	71fb      	strb	r3, [r7, #7]
 8003458:	4613      	mov	r3, r2
 800345a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	b29a      	uxth	r2, r3
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <ssd1306_SetCursor+0x2c>)
 8003462:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003464:	79bb      	ldrb	r3, [r7, #6]
 8003466:	b29a      	uxth	r2, r3
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <ssd1306_SetCursor+0x2c>)
 800346a:	805a      	strh	r2, [r3, #2]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	200026bc 	.word	0x200026bc

0800347c <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800347c:	b590      	push	{r4, r7, lr}
 800347e:	b089      	sub	sp, #36	; 0x24
 8003480:	af00      	add	r7, sp, #0
 8003482:	4604      	mov	r4, r0
 8003484:	4608      	mov	r0, r1
 8003486:	4611      	mov	r1, r2
 8003488:	461a      	mov	r2, r3
 800348a:	4623      	mov	r3, r4
 800348c:	71fb      	strb	r3, [r7, #7]
 800348e:	4603      	mov	r3, r0
 8003490:	71bb      	strb	r3, [r7, #6]
 8003492:	460b      	mov	r3, r1
 8003494:	717b      	strb	r3, [r7, #5]
 8003496:	4613      	mov	r3, r2
 8003498:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800349a:	797a      	ldrb	r2, [r7, #5]
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bfb8      	it	lt
 80034a4:	425b      	neglt	r3, r3
 80034a6:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 80034a8:	793a      	ldrb	r2, [r7, #4]
 80034aa:	79bb      	ldrb	r3, [r7, #6]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bfb8      	it	lt
 80034b2:	425b      	neglt	r3, r3
 80034b4:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 80034b6:	79fa      	ldrb	r2, [r7, #7]
 80034b8:	797b      	ldrb	r3, [r7, #5]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d201      	bcs.n	80034c2 <ssd1306_Line+0x46>
 80034be:	2301      	movs	r3, #1
 80034c0:	e001      	b.n	80034c6 <ssd1306_Line+0x4a>
 80034c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034c6:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80034c8:	79ba      	ldrb	r2, [r7, #6]
 80034ca:	793b      	ldrb	r3, [r7, #4]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d201      	bcs.n	80034d4 <ssd1306_Line+0x58>
 80034d0:	2301      	movs	r3, #1
 80034d2:	e001      	b.n	80034d8 <ssd1306_Line+0x5c>
 80034d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034d8:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 80034e2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80034e6:	7939      	ldrb	r1, [r7, #4]
 80034e8:	797b      	ldrb	r3, [r7, #5]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff feac 	bl	8003248 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80034f0:	e024      	b.n	800353c <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80034f2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80034f6:	79b9      	ldrb	r1, [r7, #6]
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fea4 	bl	8003248 <ssd1306_DrawPixel>
    error2 = error * 2;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	425b      	negs	r3, r3
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	429a      	cmp	r2, r3
 800350e:	dd08      	ble.n	8003522 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	b2da      	uxtb	r2, r3
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	4413      	add	r3, r2
 8003520:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	429a      	cmp	r2, r3
 8003528:	da08      	bge.n	800353c <ssd1306_Line+0xc0>
    {
      error += deltaX;
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	4413      	add	r3, r2
 8003530:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	79bb      	ldrb	r3, [r7, #6]
 8003538:	4413      	add	r3, r2
 800353a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 800353c:	79fa      	ldrb	r2, [r7, #7]
 800353e:	797b      	ldrb	r3, [r7, #5]
 8003540:	429a      	cmp	r2, r3
 8003542:	d1d6      	bne.n	80034f2 <ssd1306_Line+0x76>
 8003544:	79ba      	ldrb	r2, [r7, #6]
 8003546:	793b      	ldrb	r3, [r7, #4]
 8003548:	429a      	cmp	r2, r3
 800354a:	d1d2      	bne.n	80034f2 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 800354c:	bf00      	nop
}
 800354e:	3724      	adds	r7, #36	; 0x24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd90      	pop	{r4, r7, pc}

08003554 <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8003554:	b590      	push	{r4, r7, lr}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	4604      	mov	r4, r0
 800355c:	4608      	mov	r0, r1
 800355e:	4611      	mov	r1, r2
 8003560:	461a      	mov	r2, r3
 8003562:	4623      	mov	r3, r4
 8003564:	71fb      	strb	r3, [r7, #7]
 8003566:	4603      	mov	r3, r0
 8003568:	71bb      	strb	r3, [r7, #6]
 800356a:	460b      	mov	r3, r1
 800356c:	717b      	strb	r3, [r7, #5]
 800356e:	4613      	mov	r3, r2
 8003570:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 8003572:	797b      	ldrb	r3, [r7, #5]
 8003574:	425b      	negs	r3, r3
 8003576:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 800357c:	797b      	ldrb	r3, [r7, #5]
 800357e:	f1c3 0301 	rsb	r3, r3, #1
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8003586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358a:	2b00      	cmp	r3, #0
 800358c:	db65      	blt.n	800365a <ssd1306_DrawCircle+0x106>
 800358e:	79bb      	ldrb	r3, [r7, #6]
 8003590:	2b3f      	cmp	r3, #63	; 0x3f
 8003592:	d862      	bhi.n	800365a <ssd1306_DrawCircle+0x106>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	79fa      	ldrb	r2, [r7, #7]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	b2d8      	uxtb	r0, r3
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	79bb      	ldrb	r3, [r7, #6]
 80035a4:	4413      	add	r3, r2
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	793a      	ldrb	r2, [r7, #4]
 80035aa:	4619      	mov	r1, r3
 80035ac:	f7ff fe4c 	bl	8003248 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	4413      	add	r3, r2
 80035b8:	b2d8      	uxtb	r0, r3
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	79bb      	ldrb	r3, [r7, #6]
 80035c0:	4413      	add	r3, r2
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	793a      	ldrb	r2, [r7, #4]
 80035c6:	4619      	mov	r1, r3
 80035c8:	f7ff fe3e 	bl	8003248 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	4413      	add	r3, r2
 80035d4:	b2d8      	uxtb	r0, r3
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	79ba      	ldrb	r2, [r7, #6]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	793a      	ldrb	r2, [r7, #4]
 80035e2:	4619      	mov	r1, r3
 80035e4:	f7ff fe30 	bl	8003248 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	79fa      	ldrb	r2, [r7, #7]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	b2d8      	uxtb	r0, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	79ba      	ldrb	r2, [r7, #6]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	793a      	ldrb	r2, [r7, #4]
 80035fe:	4619      	mov	r1, r3
 8003600:	f7ff fe22 	bl	8003248 <ssd1306_DrawPixel>
        e2 = err;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	429a      	cmp	r2, r3
 800360e:	dc13      	bgt.n	8003638 <ssd1306_DrawCircle+0xe4>
            y++;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	3301      	adds	r3, #1
 8003614:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	3301      	adds	r3, #1
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4413      	add	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	425b      	negs	r3, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	429a      	cmp	r2, r3
 800362a:	d105      	bne.n	8003638 <ssd1306_DrawCircle+0xe4>
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	429a      	cmp	r2, r3
 8003632:	dc01      	bgt.n	8003638 <ssd1306_DrawCircle+0xe4>
              e2 = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	429a      	cmp	r2, r3
 800363e:	dd08      	ble.n	8003652 <ssd1306_DrawCircle+0xfe>
          x++;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	3301      	adds	r3, #1
 8003644:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	3301      	adds	r3, #1
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	dd9d      	ble.n	8003594 <ssd1306_DrawCircle+0x40>

    return;
 8003658:	e000      	b.n	800365c <ssd1306_DrawCircle+0x108>
    return;
 800365a:	bf00      	nop
}
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	bd90      	pop	{r4, r7, pc}

08003662 <ssd1306_DrawRectangle>:

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003662:	b590      	push	{r4, r7, lr}
 8003664:	b085      	sub	sp, #20
 8003666:	af02      	add	r7, sp, #8
 8003668:	4604      	mov	r4, r0
 800366a:	4608      	mov	r0, r1
 800366c:	4611      	mov	r1, r2
 800366e:	461a      	mov	r2, r3
 8003670:	4623      	mov	r3, r4
 8003672:	71fb      	strb	r3, [r7, #7]
 8003674:	4603      	mov	r3, r0
 8003676:	71bb      	strb	r3, [r7, #6]
 8003678:	460b      	mov	r3, r1
 800367a:	717b      	strb	r3, [r7, #5]
 800367c:	4613      	mov	r3, r2
 800367e:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8003680:	79bc      	ldrb	r4, [r7, #6]
 8003682:	797a      	ldrb	r2, [r7, #5]
 8003684:	79b9      	ldrb	r1, [r7, #6]
 8003686:	79f8      	ldrb	r0, [r7, #7]
 8003688:	7e3b      	ldrb	r3, [r7, #24]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	4623      	mov	r3, r4
 800368e:	f7ff fef5 	bl	800347c <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8003692:	793c      	ldrb	r4, [r7, #4]
 8003694:	797a      	ldrb	r2, [r7, #5]
 8003696:	79b9      	ldrb	r1, [r7, #6]
 8003698:	7978      	ldrb	r0, [r7, #5]
 800369a:	7e3b      	ldrb	r3, [r7, #24]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	4623      	mov	r3, r4
 80036a0:	f7ff feec 	bl	800347c <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 80036a4:	793c      	ldrb	r4, [r7, #4]
 80036a6:	79fa      	ldrb	r2, [r7, #7]
 80036a8:	7939      	ldrb	r1, [r7, #4]
 80036aa:	7978      	ldrb	r0, [r7, #5]
 80036ac:	7e3b      	ldrb	r3, [r7, #24]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	4623      	mov	r3, r4
 80036b2:	f7ff fee3 	bl	800347c <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 80036b6:	79bc      	ldrb	r4, [r7, #6]
 80036b8:	79fa      	ldrb	r2, [r7, #7]
 80036ba:	7939      	ldrb	r1, [r7, #4]
 80036bc:	79f8      	ldrb	r0, [r7, #7]
 80036be:	7e3b      	ldrb	r3, [r7, #24]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	4623      	mov	r3, r4
 80036c4:	f7ff feda 	bl	800347c <ssd1306_Line>

  return;
 80036c8:	bf00      	nop
}
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd90      	pop	{r4, r7, pc}

080036d0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80036da:	2381      	movs	r3, #129	; 0x81
 80036dc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fd33 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fd2f 	bl	800314c <ssd1306_WriteCommand>
}
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003708:	23af      	movs	r3, #175	; 0xaf
 800370a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800370c:	4b08      	ldr	r3, [pc, #32]	; (8003730 <ssd1306_SetDisplayOn+0x38>)
 800370e:	2201      	movs	r2, #1
 8003710:	715a      	strb	r2, [r3, #5]
 8003712:	e004      	b.n	800371e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003714:	23ae      	movs	r3, #174	; 0xae
 8003716:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <ssd1306_SetDisplayOn+0x38>)
 800371a:	2200      	movs	r2, #0
 800371c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fd13 	bl	800314c <ssd1306_WriteCommand>
}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	200026bc 	.word	0x200026bc

08003734 <ssd1306_Init1>:




// Initialize the oled screen
void ssd1306_Init1(void) {
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003738:	f7ff fd01 	bl	800313e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800373c:	2064      	movs	r0, #100	; 0x64
 800373e:	f000 f93d 	bl	80039bc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003742:	2000      	movs	r0, #0
 8003744:	f7ff ffd8 	bl	80036f8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003748:	2020      	movs	r0, #32
 800374a:	f7ff fcff 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800374e:	2000      	movs	r0, #0
 8003750:	f7ff fcfc 	bl	800314c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003754:	20b0      	movs	r0, #176	; 0xb0
 8003756:	f7ff fcf9 	bl	800314c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800375a:	20c8      	movs	r0, #200	; 0xc8
 800375c:	f7ff fcf6 	bl	800314c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003760:	2000      	movs	r0, #0
 8003762:	f7ff fcf3 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003766:	2010      	movs	r0, #16
 8003768:	f7ff fcf0 	bl	800314c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800376c:	2040      	movs	r0, #64	; 0x40
 800376e:	f7ff fced 	bl	800314c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003772:	20ff      	movs	r0, #255	; 0xff
 8003774:	f7ff ffac 	bl	80036d0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003778:	20a1      	movs	r0, #161	; 0xa1
 800377a:	f7ff fce7 	bl	800314c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800377e:	20a6      	movs	r0, #166	; 0xa6
 8003780:	f7ff fce4 	bl	800314c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003784:	20a8      	movs	r0, #168	; 0xa8
 8003786:	f7ff fce1 	bl	800314c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800378a:	203f      	movs	r0, #63	; 0x3f
 800378c:	f7ff fcde 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003790:	20a4      	movs	r0, #164	; 0xa4
 8003792:	f7ff fcdb 	bl	800314c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003796:	20d3      	movs	r0, #211	; 0xd3
 8003798:	f7ff fcd8 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800379c:	2000      	movs	r0, #0
 800379e:	f7ff fcd5 	bl	800314c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80037a2:	20d5      	movs	r0, #213	; 0xd5
 80037a4:	f7ff fcd2 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80037a8:	20f0      	movs	r0, #240	; 0xf0
 80037aa:	f7ff fccf 	bl	800314c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80037ae:	20d9      	movs	r0, #217	; 0xd9
 80037b0:	f7ff fccc 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80037b4:	2022      	movs	r0, #34	; 0x22
 80037b6:	f7ff fcc9 	bl	800314c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80037ba:	20da      	movs	r0, #218	; 0xda
 80037bc:	f7ff fcc6 	bl	800314c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80037c0:	2012      	movs	r0, #18
 80037c2:	f7ff fcc3 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80037c6:	20db      	movs	r0, #219	; 0xdb
 80037c8:	f7ff fcc0 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80037cc:	2020      	movs	r0, #32
 80037ce:	f7ff fcbd 	bl	800314c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80037d2:	208d      	movs	r0, #141	; 0x8d
 80037d4:	f7ff fcba 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80037d8:	2014      	movs	r0, #20
 80037da:	f7ff fcb7 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80037de:	2001      	movs	r0, #1
 80037e0:	f7ff ff8a 	bl	80036f8 <ssd1306_SetDisplayOn>


    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80037e4:	f7ff fd08 	bl	80031f8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <ssd1306_Init1+0xcc>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80037ee:	4b04      	ldr	r3, [pc, #16]	; (8003800 <ssd1306_Init1+0xcc>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80037f4:	4b02      	ldr	r3, [pc, #8]	; (8003800 <ssd1306_Init1+0xcc>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	711a      	strb	r2, [r3, #4]
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200026bc 	.word	0x200026bc

08003804 <ssd1306_Init2>:


// Initialize the oled screen
void ssd1306_Init2(void) {
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003808:	f7ff fc99 	bl	800313e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800380c:	2064      	movs	r0, #100	; 0x64
 800380e:	f000 f8d5 	bl	80039bc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003812:	2000      	movs	r0, #0
 8003814:	f7ff ff70 	bl	80036f8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003818:	2020      	movs	r0, #32
 800381a:	f7ff fc97 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800381e:	2000      	movs	r0, #0
 8003820:	f7ff fc94 	bl	800314c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003824:	20b0      	movs	r0, #176	; 0xb0
 8003826:	f7ff fc91 	bl	800314c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC8); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC0); //Set COM Output Scan Direction
 800382a:	20c0      	movs	r0, #192	; 0xc0
 800382c:	f7ff fc8e 	bl	800314c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003830:	2000      	movs	r0, #0
 8003832:	f7ff fc8b 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003836:	2010      	movs	r0, #16
 8003838:	f7ff fc88 	bl	800314c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800383c:	2040      	movs	r0, #64	; 0x40
 800383e:	f7ff fc85 	bl	800314c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003842:	20ff      	movs	r0, #255	; 0xff
 8003844:	f7ff ff44 	bl	80036d0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA1); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA0); //--set segment re-map 0 to 127 - CHECK
 8003848:	20a0      	movs	r0, #160	; 0xa0
 800384a:	f7ff fc7f 	bl	800314c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800384e:	20a6      	movs	r0, #166	; 0xa6
 8003850:	f7ff fc7c 	bl	800314c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003854:	20a8      	movs	r0, #168	; 0xa8
 8003856:	f7ff fc79 	bl	800314c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800385a:	203f      	movs	r0, #63	; 0x3f
 800385c:	f7ff fc76 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003860:	20a4      	movs	r0, #164	; 0xa4
 8003862:	f7ff fc73 	bl	800314c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003866:	20d3      	movs	r0, #211	; 0xd3
 8003868:	f7ff fc70 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800386c:	2000      	movs	r0, #0
 800386e:	f7ff fc6d 	bl	800314c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003872:	20d5      	movs	r0, #213	; 0xd5
 8003874:	f7ff fc6a 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003878:	20f0      	movs	r0, #240	; 0xf0
 800387a:	f7ff fc67 	bl	800314c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800387e:	20d9      	movs	r0, #217	; 0xd9
 8003880:	f7ff fc64 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003884:	2022      	movs	r0, #34	; 0x22
 8003886:	f7ff fc61 	bl	800314c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800388a:	20da      	movs	r0, #218	; 0xda
 800388c:	f7ff fc5e 	bl	800314c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003890:	2012      	movs	r0, #18
 8003892:	f7ff fc5b 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003896:	20db      	movs	r0, #219	; 0xdb
 8003898:	f7ff fc58 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800389c:	2020      	movs	r0, #32
 800389e:	f7ff fc55 	bl	800314c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80038a2:	208d      	movs	r0, #141	; 0x8d
 80038a4:	f7ff fc52 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80038a8:	2014      	movs	r0, #20
 80038aa:	f7ff fc4f 	bl	800314c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80038ae:	2001      	movs	r0, #1
 80038b0:	f7ff ff22 	bl	80036f8 <ssd1306_SetDisplayOn>


    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80038b4:	f7ff fca0 	bl	80031f8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <ssd1306_Init2+0xcc>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <ssd1306_Init2+0xcc>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80038c4:	4b02      	ldr	r3, [pc, #8]	; (80038d0 <ssd1306_Init2+0xcc>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	711a      	strb	r2, [r3, #4]
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	200026bc 	.word	0x200026bc

080038d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038de:	2003      	movs	r0, #3
 80038e0:	f001 fb0a 	bl	8004ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038e4:	2000      	movs	r0, #0
 80038e6:	f000 f80d 	bl	8003904 <HAL_InitTick>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	71fb      	strb	r3, [r7, #7]
 80038f4:	e001      	b.n	80038fa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038f6:	f7ff f80b 	bl	8002910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038fa:	79fb      	ldrb	r3, [r7, #7]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003910:	4b17      	ldr	r3, [pc, #92]	; (8003970 <HAL_InitTick+0x6c>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d023      	beq.n	8003960 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003918:	4b16      	ldr	r3, [pc, #88]	; (8003974 <HAL_InitTick+0x70>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4b14      	ldr	r3, [pc, #80]	; (8003970 <HAL_InitTick+0x6c>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	4619      	mov	r1, r3
 8003922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003926:	fbb3 f3f1 	udiv	r3, r3, r1
 800392a:	fbb2 f3f3 	udiv	r3, r2, r3
 800392e:	4618      	mov	r0, r3
 8003930:	f001 fb17 	bl	8004f62 <HAL_SYSTICK_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10f      	bne.n	800395a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b0f      	cmp	r3, #15
 800393e:	d809      	bhi.n	8003954 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003940:	2200      	movs	r2, #0
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003948:	f001 fae1 	bl	8004f0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800394c:	4a0a      	ldr	r2, [pc, #40]	; (8003978 <HAL_InitTick+0x74>)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e007      	b.n	8003964 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
 8003958:	e004      	b.n	8003964 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
 800395e:	e001      	b.n	8003964 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003964:	7bfb      	ldrb	r3, [r7, #15]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000030 	.word	0x20000030
 8003974:	20000018 	.word	0x20000018
 8003978:	2000002c 	.word	0x2000002c

0800397c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_IncTick+0x20>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_IncTick+0x24>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4413      	add	r3, r2
 800398c:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <HAL_IncTick+0x24>)
 800398e:	6013      	str	r3, [r2, #0]
}
 8003990:	bf00      	nop
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000030 	.word	0x20000030
 80039a0:	20004a34 	.word	0x20004a34

080039a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return uwTick;
 80039a8:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <HAL_GetTick+0x14>)
 80039aa:	681b      	ldr	r3, [r3, #0]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20004a34 	.word	0x20004a34

080039bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039c4:	f7ff ffee 	bl	80039a4 <HAL_GetTick>
 80039c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d4:	d005      	beq.n	80039e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <HAL_Delay+0x44>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039e2:	bf00      	nop
 80039e4:	f7ff ffde 	bl	80039a4 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d8f7      	bhi.n	80039e4 <HAL_Delay+0x28>
  {
  }
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000030 	.word	0x20000030

08003a04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	609a      	str	r2, [r3, #8]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3360      	adds	r3, #96	; 0x60
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <LL_ADC_SetOffset+0x44>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	03fff000 	.word	0x03fff000

08003ab4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3360      	adds	r3, #96	; 0x60
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3360      	adds	r3, #96	; 0x60
 8003af0:	461a      	mov	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	431a      	orrs	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3330      	adds	r3, #48	; 0x30
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	0a1b      	lsrs	r3, r3, #8
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	4413      	add	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	211f      	movs	r1, #31
 8003b68:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	401a      	ands	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	0e9b      	lsrs	r3, r3, #26
 8003b74:	f003 011f 	and.w	r1, r3, #31
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f003 031f 	and.w	r3, r3, #31
 8003b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b82:	431a      	orrs	r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b88:	bf00      	nop
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	3314      	adds	r3, #20
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	0e5b      	lsrs	r3, r3, #25
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	4413      	add	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	0d1b      	lsrs	r3, r3, #20
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	2107      	movs	r1, #7
 8003bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	401a      	ands	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	0d1b      	lsrs	r3, r3, #20
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c04:	43db      	mvns	r3, r3
 8003c06:	401a      	ands	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f003 0318 	and.w	r3, r3, #24
 8003c0e:	4908      	ldr	r1, [pc, #32]	; (8003c30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c10:	40d9      	lsrs	r1, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	400b      	ands	r3, r1
 8003c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	0007ffff 	.word	0x0007ffff

08003c34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003c44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6093      	str	r3, [r2, #8]
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c6c:	d101      	bne.n	8003c72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cbc:	d101      	bne.n	8003cc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ce0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ce4:	f043 0201 	orr.w	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d0c:	f043 0202 	orr.w	r2, r3, #2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <LL_ADC_IsEnabled+0x18>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <LL_ADC_IsEnabled+0x1a>
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d101      	bne.n	8003d5e <LL_ADC_IsDisableOngoing+0x18>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <LL_ADC_IsDisableOngoing+0x1a>
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d80:	f043 0204 	orr.w	r2, r3, #4
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d101      	bne.n	8003dac <LL_ADC_REG_IsConversionOngoing+0x18>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d101      	bne.n	8003dd2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e12c      	b.n	8004054 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d109      	bne.n	8003e1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7fe fda5 	bl	8002958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff19 	bl	8003c58 <LL_ADC_IsDeepPowerDownEnabled>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff feff 	bl	8003c34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff ff34 	bl	8003ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d115      	bne.n	8003e72 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff ff18 	bl	8003c80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e50:	4b82      	ldr	r3, [pc, #520]	; (800405c <HAL_ADC_Init+0x27c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	099b      	lsrs	r3, r3, #6
 8003e56:	4a82      	ldr	r2, [pc, #520]	; (8004060 <HAL_ADC_Init+0x280>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	099b      	lsrs	r3, r3, #6
 8003e5e:	3301      	adds	r3, #1
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e64:	e002      	b.n	8003e6c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f9      	bne.n	8003e66 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff ff16 	bl	8003ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	f043 0210 	orr.w	r2, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	f043 0201 	orr.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff ff76 	bl	8003d94 <LL_ADC_REG_IsConversionOngoing>
 8003ea8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f040 80c5 	bne.w	8004042 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f040 80c1 	bne.w	8004042 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ec8:	f043 0202 	orr.w	r2, r3, #2
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff23 	bl	8003d20 <LL_ADC_IsEnabled>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10b      	bne.n	8003ef8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ee0:	4860      	ldr	r0, [pc, #384]	; (8004064 <HAL_ADC_Init+0x284>)
 8003ee2:	f7ff ff1d 	bl	8003d20 <LL_ADC_IsEnabled>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	485d      	ldr	r0, [pc, #372]	; (8004068 <HAL_ADC_Init+0x288>)
 8003ef4:	f7ff fd86 	bl	8003a04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	7e5b      	ldrb	r3, [r3, #25]
 8003efc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f02:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003f08:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003f0e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f16:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d106      	bne.n	8003f34 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	045b      	lsls	r3, r3, #17
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	4b45      	ldr	r3, [pc, #276]	; (800406c <HAL_ADC_Init+0x28c>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	69b9      	ldr	r1, [r7, #24]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff ff13 	bl	8003d94 <LL_ADC_REG_IsConversionOngoing>
 8003f6e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff20 	bl	8003dba <LL_ADC_INJ_IsConversionOngoing>
 8003f7a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d13d      	bne.n	8003ffe <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d13a      	bne.n	8003ffe <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f8c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f94:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fa4:	f023 0302 	bic.w	r3, r3, #2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	69b9      	ldr	r1, [r7, #24]
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d118      	bne.n	8003fee <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003fc6:	f023 0304 	bic.w	r3, r3, #4
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fd2:	4311      	orrs	r1, r2
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003fd8:	4311      	orrs	r1, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	611a      	str	r2, [r3, #16]
 8003fec:	e007      	b.n	8003ffe <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0201 	bic.w	r2, r2, #1
 8003ffc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d10c      	bne.n	8004020 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	f023 010f 	bic.w	r1, r3, #15
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	1e5a      	subs	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
 800401e:	e007      	b.n	8004030 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 020f 	bic.w	r2, r2, #15
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	f023 0303 	bic.w	r3, r3, #3
 8004038:	f043 0201 	orr.w	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	655a      	str	r2, [r3, #84]	; 0x54
 8004040:	e007      	b.n	8004052 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004046:	f043 0210 	orr.w	r2, r3, #16
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004052:	7ffb      	ldrb	r3, [r7, #31]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	20000018 	.word	0x20000018
 8004060:	053e2d63 	.word	0x053e2d63
 8004064:	50040000 	.word	0x50040000
 8004068:	50040300 	.word	0x50040300
 800406c:	fff0c007 	.word	0xfff0c007

08004070 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fe87 	bl	8003d94 <LL_ADC_REG_IsConversionOngoing>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d167      	bne.n	800415c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_ADC_Start_DMA+0x2a>
 8004096:	2302      	movs	r3, #2
 8004098:	e063      	b.n	8004162 <HAL_ADC_Start_DMA+0xf2>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 fc52 	bl	800494c <ADC_Enable>
 80040a8:	4603      	mov	r3, r0
 80040aa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d14f      	bne.n	8004152 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d006      	beq.n	80040e0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	f023 0206 	bic.w	r2, r3, #6
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	659a      	str	r2, [r3, #88]	; 0x58
 80040de:	e002      	b.n	80040e6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ea:	4a20      	ldr	r2, [pc, #128]	; (800416c <HAL_ADC_Start_DMA+0xfc>)
 80040ec:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f2:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <HAL_ADC_Start_DMA+0x100>)
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fa:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <HAL_ADC_Start_DMA+0x104>)
 80040fc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	221c      	movs	r2, #28
 8004104:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0210 	orr.w	r2, r2, #16
 800411c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0201 	orr.w	r2, r2, #1
 800412c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3340      	adds	r3, #64	; 0x40
 8004138:	4619      	mov	r1, r3
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f001 f911 	bl	8005364 <HAL_DMA_Start_IT>
 8004142:	4603      	mov	r3, r0
 8004144:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fe0e 	bl	8003d6c <LL_ADC_REG_StartConversion>
 8004150:	e006      	b.n	8004160 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800415a:	e001      	b.n	8004160 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800415c:	2302      	movs	r3, #2
 800415e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004160:	7dfb      	ldrb	r3, [r7, #23]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	08004b17 	.word	0x08004b17
 8004170:	08004bef 	.word	0x08004bef
 8004174:	08004c0b 	.word	0x08004c0b

08004178 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b0b6      	sub	sp, #216	; 0xd8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x22>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e3b9      	b.n	8004922 <HAL_ADC_ConfigChannel+0x796>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fdea 	bl	8003d94 <LL_ADC_REG_IsConversionOngoing>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f040 839e 	bne.w	8004904 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b05      	cmp	r3, #5
 80041ce:	d824      	bhi.n	800421a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	3b02      	subs	r3, #2
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d81b      	bhi.n	8004212 <HAL_ADC_ConfigChannel+0x86>
 80041da:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <HAL_ADC_ConfigChannel+0x54>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	080041f1 	.word	0x080041f1
 80041e4:	080041f9 	.word	0x080041f9
 80041e8:	08004201 	.word	0x08004201
 80041ec:	08004209 	.word	0x08004209
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	220c      	movs	r2, #12
 80041f4:	605a      	str	r2, [r3, #4]
          break;
 80041f6:	e011      	b.n	800421c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2212      	movs	r2, #18
 80041fc:	605a      	str	r2, [r3, #4]
          break;
 80041fe:	e00d      	b.n	800421c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2218      	movs	r2, #24
 8004204:	605a      	str	r2, [r3, #4]
          break;
 8004206:	e009      	b.n	800421c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800420e:	605a      	str	r2, [r3, #4]
          break;
 8004210:	e004      	b.n	800421c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2206      	movs	r2, #6
 8004216:	605a      	str	r2, [r3, #4]
          break;
 8004218:	e000      	b.n	800421c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800421a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	f7ff fc87 	bl	8003b3c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fdae 	bl	8003d94 <LL_ADC_REG_IsConversionOngoing>
 8004238:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fdba 	bl	8003dba <LL_ADC_INJ_IsConversionOngoing>
 8004246:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800424a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 81a6 	bne.w	80045a0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004254:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004258:	2b00      	cmp	r3, #0
 800425a:	f040 81a1 	bne.w	80045a0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6819      	ldr	r1, [r3, #0]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	461a      	mov	r2, r3
 800426c:	f7ff fc92 	bl	8003b94 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	695a      	ldr	r2, [r3, #20]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	08db      	lsrs	r3, r3, #3
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b04      	cmp	r3, #4
 8004290:	d00a      	beq.n	80042a8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6919      	ldr	r1, [r3, #16]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042a2:	f7ff fbe3 	bl	8003a6c <LL_ADC_SetOffset>
 80042a6:	e17b      	b.n	80045a0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2100      	movs	r1, #0
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fc00 	bl	8003ab4 <LL_ADC_GetOffsetChannel>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x148>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2100      	movs	r1, #0
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff fbf5 	bl	8003ab4 <LL_ADC_GetOffsetChannel>
 80042ca:	4603      	mov	r3, r0
 80042cc:	0e9b      	lsrs	r3, r3, #26
 80042ce:	f003 021f 	and.w	r2, r3, #31
 80042d2:	e01e      	b.n	8004312 <HAL_ADC_ConfigChannel+0x186>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fbea 	bl	8003ab4 <LL_ADC_GetOffsetChannel>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80042f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004302:	2320      	movs	r3, #32
 8004304:	e004      	b.n	8004310 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004306:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431a:	2b00      	cmp	r3, #0
 800431c:	d105      	bne.n	800432a <HAL_ADC_ConfigChannel+0x19e>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0e9b      	lsrs	r3, r3, #26
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	e018      	b.n	800435c <HAL_ADC_ConfigChannel+0x1d0>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800433e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004342:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004346:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800434e:	2320      	movs	r3, #32
 8004350:	e004      	b.n	800435c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004352:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004356:	fab3 f383 	clz	r3, r3
 800435a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800435c:	429a      	cmp	r2, r3
 800435e:	d106      	bne.n	800436e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2200      	movs	r2, #0
 8004366:	2100      	movs	r1, #0
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff fbb9 	bl	8003ae0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2101      	movs	r1, #1
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fb9d 	bl	8003ab4 <LL_ADC_GetOffsetChannel>
 800437a:	4603      	mov	r3, r0
 800437c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <HAL_ADC_ConfigChannel+0x20e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2101      	movs	r1, #1
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fb92 	bl	8003ab4 <LL_ADC_GetOffsetChannel>
 8004390:	4603      	mov	r3, r0
 8004392:	0e9b      	lsrs	r3, r3, #26
 8004394:	f003 021f 	and.w	r2, r3, #31
 8004398:	e01e      	b.n	80043d8 <HAL_ADC_ConfigChannel+0x24c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2101      	movs	r1, #1
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fb87 	bl	8003ab4 <LL_ADC_GetOffsetChannel>
 80043a6:	4603      	mov	r3, r0
 80043a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043b0:	fa93 f3a3 	rbit	r3, r3
 80043b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80043b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80043c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80043c8:	2320      	movs	r3, #32
 80043ca:	e004      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80043cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043d0:	fab3 f383 	clz	r3, r3
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x264>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	0e9b      	lsrs	r3, r3, #26
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	e018      	b.n	8004422 <HAL_ADC_ConfigChannel+0x296>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043fc:	fa93 f3a3 	rbit	r3, r3
 8004400:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004404:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800440c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004414:	2320      	movs	r3, #32
 8004416:	e004      	b.n	8004422 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004418:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800441c:	fab3 f383 	clz	r3, r3
 8004420:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004422:	429a      	cmp	r2, r3
 8004424:	d106      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2200      	movs	r2, #0
 800442c:	2101      	movs	r1, #1
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fb56 	bl	8003ae0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2102      	movs	r1, #2
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff fb3a 	bl	8003ab4 <LL_ADC_GetOffsetChannel>
 8004440:	4603      	mov	r3, r0
 8004442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x2d4>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2102      	movs	r1, #2
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fb2f 	bl	8003ab4 <LL_ADC_GetOffsetChannel>
 8004456:	4603      	mov	r3, r0
 8004458:	0e9b      	lsrs	r3, r3, #26
 800445a:	f003 021f 	and.w	r2, r3, #31
 800445e:	e01e      	b.n	800449e <HAL_ADC_ConfigChannel+0x312>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2102      	movs	r1, #2
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fb24 	bl	8003ab4 <LL_ADC_GetOffsetChannel>
 800446c:	4603      	mov	r3, r0
 800446e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004476:	fa93 f3a3 	rbit	r3, r3
 800447a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800447e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004486:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800448e:	2320      	movs	r3, #32
 8004490:	e004      	b.n	800449c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004492:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004496:	fab3 f383 	clz	r3, r3
 800449a:	b2db      	uxtb	r3, r3
 800449c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d105      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x32a>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	0e9b      	lsrs	r3, r3, #26
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	e016      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x358>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044c2:	fa93 f3a3 	rbit	r3, r3
 80044c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80044c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80044ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80044d6:	2320      	movs	r3, #32
 80044d8:	e004      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80044da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044de:	fab3 f383 	clz	r3, r3
 80044e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d106      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2200      	movs	r2, #0
 80044ee:	2102      	movs	r1, #2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff faf5 	bl	8003ae0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2103      	movs	r1, #3
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fad9 	bl	8003ab4 <LL_ADC_GetOffsetChannel>
 8004502:	4603      	mov	r3, r0
 8004504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x396>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2103      	movs	r1, #3
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff face 	bl	8003ab4 <LL_ADC_GetOffsetChannel>
 8004518:	4603      	mov	r3, r0
 800451a:	0e9b      	lsrs	r3, r3, #26
 800451c:	f003 021f 	and.w	r2, r3, #31
 8004520:	e017      	b.n	8004552 <HAL_ADC_ConfigChannel+0x3c6>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2103      	movs	r1, #3
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fac3 	bl	8003ab4 <LL_ADC_GetOffsetChannel>
 800452e:	4603      	mov	r3, r0
 8004530:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004534:	fa93 f3a3 	rbit	r3, r3
 8004538:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800453a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800453c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800453e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004544:	2320      	movs	r3, #32
 8004546:	e003      	b.n	8004550 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800454a:	fab3 f383 	clz	r3, r3
 800454e:	b2db      	uxtb	r3, r3
 8004550:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800455a:	2b00      	cmp	r3, #0
 800455c:	d105      	bne.n	800456a <HAL_ADC_ConfigChannel+0x3de>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	0e9b      	lsrs	r3, r3, #26
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	e011      	b.n	800458e <HAL_ADC_ConfigChannel+0x402>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004570:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004572:	fa93 f3a3 	rbit	r3, r3
 8004576:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800457a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800457c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004582:	2320      	movs	r3, #32
 8004584:	e003      	b.n	800458e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004588:	fab3 f383 	clz	r3, r3
 800458c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800458e:	429a      	cmp	r2, r3
 8004590:	d106      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	2103      	movs	r1, #3
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff faa0 	bl	8003ae0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fbbb 	bl	8003d20 <LL_ADC_IsEnabled>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f040 813f 	bne.w	8004830 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6819      	ldr	r1, [r3, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	461a      	mov	r2, r3
 80045c0:	f7ff fb14 	bl	8003bec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4a8e      	ldr	r2, [pc, #568]	; (8004804 <HAL_ADC_ConfigChannel+0x678>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	f040 8130 	bne.w	8004830 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10b      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x46c>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	0e9b      	lsrs	r3, r3, #26
 80045e6:	3301      	adds	r3, #1
 80045e8:	f003 031f 	and.w	r3, r3, #31
 80045ec:	2b09      	cmp	r3, #9
 80045ee:	bf94      	ite	ls
 80045f0:	2301      	movls	r3, #1
 80045f2:	2300      	movhi	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	e019      	b.n	800462c <HAL_ADC_ConfigChannel+0x4a0>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004600:	fa93 f3a3 	rbit	r3, r3
 8004604:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004608:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800460a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004610:	2320      	movs	r3, #32
 8004612:	e003      	b.n	800461c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004616:	fab3 f383 	clz	r3, r3
 800461a:	b2db      	uxtb	r3, r3
 800461c:	3301      	adds	r3, #1
 800461e:	f003 031f 	and.w	r3, r3, #31
 8004622:	2b09      	cmp	r3, #9
 8004624:	bf94      	ite	ls
 8004626:	2301      	movls	r3, #1
 8004628:	2300      	movhi	r3, #0
 800462a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800462c:	2b00      	cmp	r3, #0
 800462e:	d079      	beq.n	8004724 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004638:	2b00      	cmp	r3, #0
 800463a:	d107      	bne.n	800464c <HAL_ADC_ConfigChannel+0x4c0>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	0e9b      	lsrs	r3, r3, #26
 8004642:	3301      	adds	r3, #1
 8004644:	069b      	lsls	r3, r3, #26
 8004646:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800464a:	e015      	b.n	8004678 <HAL_ADC_ConfigChannel+0x4ec>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004654:	fa93 f3a3 	rbit	r3, r3
 8004658:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800465a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800465c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800465e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004664:	2320      	movs	r3, #32
 8004666:	e003      	b.n	8004670 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	3301      	adds	r3, #1
 8004672:	069b      	lsls	r3, r3, #26
 8004674:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004680:	2b00      	cmp	r3, #0
 8004682:	d109      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x50c>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	0e9b      	lsrs	r3, r3, #26
 800468a:	3301      	adds	r3, #1
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	2101      	movs	r1, #1
 8004692:	fa01 f303 	lsl.w	r3, r1, r3
 8004696:	e017      	b.n	80046c8 <HAL_ADC_ConfigChannel+0x53c>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a0:	fa93 f3a3 	rbit	r3, r3
 80046a4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80046a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80046aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80046b0:	2320      	movs	r3, #32
 80046b2:	e003      	b.n	80046bc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80046b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b6:	fab3 f383 	clz	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	3301      	adds	r3, #1
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	2101      	movs	r1, #1
 80046c4:	fa01 f303 	lsl.w	r3, r1, r3
 80046c8:	ea42 0103 	orr.w	r1, r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x562>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	0e9b      	lsrs	r3, r3, #26
 80046de:	3301      	adds	r3, #1
 80046e0:	f003 021f 	and.w	r2, r3, #31
 80046e4:	4613      	mov	r3, r2
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	4413      	add	r3, r2
 80046ea:	051b      	lsls	r3, r3, #20
 80046ec:	e018      	b.n	8004720 <HAL_ADC_ConfigChannel+0x594>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f6:	fa93 f3a3 	rbit	r3, r3
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004706:	2320      	movs	r3, #32
 8004708:	e003      	b.n	8004712 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800470a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470c:	fab3 f383 	clz	r3, r3
 8004710:	b2db      	uxtb	r3, r3
 8004712:	3301      	adds	r3, #1
 8004714:	f003 021f 	and.w	r2, r3, #31
 8004718:	4613      	mov	r3, r2
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	4413      	add	r3, r2
 800471e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004720:	430b      	orrs	r3, r1
 8004722:	e080      	b.n	8004826 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472c:	2b00      	cmp	r3, #0
 800472e:	d107      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x5b4>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	0e9b      	lsrs	r3, r3, #26
 8004736:	3301      	adds	r3, #1
 8004738:	069b      	lsls	r3, r3, #26
 800473a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800473e:	e015      	b.n	800476c <HAL_ADC_ConfigChannel+0x5e0>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	fa93 f3a3 	rbit	r3, r3
 800474c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004758:	2320      	movs	r3, #32
 800475a:	e003      	b.n	8004764 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	fab3 f383 	clz	r3, r3
 8004762:	b2db      	uxtb	r3, r3
 8004764:	3301      	adds	r3, #1
 8004766:	069b      	lsls	r3, r3, #26
 8004768:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004774:	2b00      	cmp	r3, #0
 8004776:	d109      	bne.n	800478c <HAL_ADC_ConfigChannel+0x600>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	0e9b      	lsrs	r3, r3, #26
 800477e:	3301      	adds	r3, #1
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	2101      	movs	r1, #1
 8004786:	fa01 f303 	lsl.w	r3, r1, r3
 800478a:	e017      	b.n	80047bc <HAL_ADC_ConfigChannel+0x630>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	fa93 f3a3 	rbit	r3, r3
 8004798:	61fb      	str	r3, [r7, #28]
  return result;
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80047a4:	2320      	movs	r3, #32
 80047a6:	e003      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	fab3 f383 	clz	r3, r3
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	3301      	adds	r3, #1
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	2101      	movs	r1, #1
 80047b8:	fa01 f303 	lsl.w	r3, r1, r3
 80047bc:	ea42 0103 	orr.w	r1, r2, r3
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10d      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x65c>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	0e9b      	lsrs	r3, r3, #26
 80047d2:	3301      	adds	r3, #1
 80047d4:	f003 021f 	and.w	r2, r3, #31
 80047d8:	4613      	mov	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4413      	add	r3, r2
 80047de:	3b1e      	subs	r3, #30
 80047e0:	051b      	lsls	r3, r3, #20
 80047e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047e6:	e01d      	b.n	8004824 <HAL_ADC_ConfigChannel+0x698>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	fa93 f3a3 	rbit	r3, r3
 80047f4:	613b      	str	r3, [r7, #16]
  return result;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d103      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004800:	2320      	movs	r3, #32
 8004802:	e005      	b.n	8004810 <HAL_ADC_ConfigChannel+0x684>
 8004804:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	fab3 f383 	clz	r3, r3
 800480e:	b2db      	uxtb	r3, r3
 8004810:	3301      	adds	r3, #1
 8004812:	f003 021f 	and.w	r2, r3, #31
 8004816:	4613      	mov	r3, r2
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	4413      	add	r3, r2
 800481c:	3b1e      	subs	r3, #30
 800481e:	051b      	lsls	r3, r3, #20
 8004820:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004824:	430b      	orrs	r3, r1
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	6892      	ldr	r2, [r2, #8]
 800482a:	4619      	mov	r1, r3
 800482c:	f7ff f9b2 	bl	8003b94 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4b3d      	ldr	r3, [pc, #244]	; (800492c <HAL_ADC_ConfigChannel+0x7a0>)
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d06c      	beq.n	8004916 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800483c:	483c      	ldr	r0, [pc, #240]	; (8004930 <HAL_ADC_ConfigChannel+0x7a4>)
 800483e:	f7ff f907 	bl	8003a50 <LL_ADC_GetCommonPathInternalCh>
 8004842:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3a      	ldr	r2, [pc, #232]	; (8004934 <HAL_ADC_ConfigChannel+0x7a8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d127      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004854:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d121      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a35      	ldr	r2, [pc, #212]	; (8004938 <HAL_ADC_ConfigChannel+0x7ac>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d157      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800486a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800486e:	4619      	mov	r1, r3
 8004870:	482f      	ldr	r0, [pc, #188]	; (8004930 <HAL_ADC_ConfigChannel+0x7a4>)
 8004872:	f7ff f8da 	bl	8003a2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004876:	4b31      	ldr	r3, [pc, #196]	; (800493c <HAL_ADC_ConfigChannel+0x7b0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	4a30      	ldr	r2, [pc, #192]	; (8004940 <HAL_ADC_ConfigChannel+0x7b4>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	099b      	lsrs	r3, r3, #6
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	4613      	mov	r3, r2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004890:	e002      	b.n	8004898 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3b01      	subs	r3, #1
 8004896:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f9      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800489e:	e03a      	b.n	8004916 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a27      	ldr	r2, [pc, #156]	; (8004944 <HAL_ADC_ConfigChannel+0x7b8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d113      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x746>
 80048aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10d      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1f      	ldr	r2, [pc, #124]	; (8004938 <HAL_ADC_ConfigChannel+0x7ac>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d12a      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048c8:	4619      	mov	r1, r3
 80048ca:	4819      	ldr	r0, [pc, #100]	; (8004930 <HAL_ADC_ConfigChannel+0x7a4>)
 80048cc:	f7ff f8ad 	bl	8003a2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048d0:	e021      	b.n	8004916 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1c      	ldr	r2, [pc, #112]	; (8004948 <HAL_ADC_ConfigChannel+0x7bc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d11c      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d116      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a12      	ldr	r2, [pc, #72]	; (8004938 <HAL_ADC_ConfigChannel+0x7ac>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d111      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048fa:	4619      	mov	r1, r3
 80048fc:	480c      	ldr	r0, [pc, #48]	; (8004930 <HAL_ADC_ConfigChannel+0x7a4>)
 80048fe:	f7ff f894 	bl	8003a2a <LL_ADC_SetCommonPathInternalCh>
 8004902:	e008      	b.n	8004916 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004908:	f043 0220 	orr.w	r2, r3, #32
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800491e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004922:	4618      	mov	r0, r3
 8004924:	37d8      	adds	r7, #216	; 0xd8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	80080000 	.word	0x80080000
 8004930:	50040300 	.word	0x50040300
 8004934:	c7520000 	.word	0xc7520000
 8004938:	50040000 	.word	0x50040000
 800493c:	20000018 	.word	0x20000018
 8004940:	053e2d63 	.word	0x053e2d63
 8004944:	cb840000 	.word	0xcb840000
 8004948:	80000001 	.word	0x80000001

0800494c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff f9df 	bl	8003d20 <LL_ADC_IsEnabled>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d169      	bne.n	8004a3c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <ADC_Enable+0xfc>)
 8004970:	4013      	ands	r3, r2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00d      	beq.n	8004992 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	f043 0210 	orr.w	r2, r3, #16
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004986:	f043 0201 	orr.w	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e055      	b.n	8004a3e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff f99a 	bl	8003cd0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800499c:	482b      	ldr	r0, [pc, #172]	; (8004a4c <ADC_Enable+0x100>)
 800499e:	f7ff f857 	bl	8003a50 <LL_ADC_GetCommonPathInternalCh>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d013      	beq.n	80049d4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049ac:	4b28      	ldr	r3, [pc, #160]	; (8004a50 <ADC_Enable+0x104>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	099b      	lsrs	r3, r3, #6
 80049b2:	4a28      	ldr	r2, [pc, #160]	; (8004a54 <ADC_Enable+0x108>)
 80049b4:	fba2 2303 	umull	r2, r3, r2, r3
 80049b8:	099b      	lsrs	r3, r3, #6
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	4613      	mov	r3, r2
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80049c6:	e002      	b.n	80049ce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f9      	bne.n	80049c8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049d4:	f7fe ffe6 	bl	80039a4 <HAL_GetTick>
 80049d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049da:	e028      	b.n	8004a2e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff f99d 	bl	8003d20 <LL_ADC_IsEnabled>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff f96d 	bl	8003cd0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049f6:	f7fe ffd5 	bl	80039a4 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d914      	bls.n	8004a2e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d00d      	beq.n	8004a2e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a16:	f043 0210 	orr.w	r2, r3, #16
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a22:	f043 0201 	orr.w	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e007      	b.n	8004a3e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d1cf      	bne.n	80049dc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	8000003f 	.word	0x8000003f
 8004a4c:	50040300 	.word	0x50040300
 8004a50:	20000018 	.word	0x20000018
 8004a54:	053e2d63 	.word	0x053e2d63

08004a58 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff f96e 	bl	8003d46 <LL_ADC_IsDisableOngoing>
 8004a6a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff f955 	bl	8003d20 <LL_ADC_IsEnabled>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d047      	beq.n	8004b0c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d144      	bne.n	8004b0c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 030d 	and.w	r3, r3, #13
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d10c      	bne.n	8004aaa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff f92f 	bl	8003cf8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004aa2:	f7fe ff7f 	bl	80039a4 <HAL_GetTick>
 8004aa6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004aa8:	e029      	b.n	8004afe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aae:	f043 0210 	orr.w	r2, r3, #16
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	f043 0201 	orr.w	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e023      	b.n	8004b0e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ac6:	f7fe ff6d 	bl	80039a4 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d914      	bls.n	8004afe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00d      	beq.n	8004afe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae6:	f043 0210 	orr.w	r2, r3, #16
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af2:	f043 0201 	orr.w	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e007      	b.n	8004b0e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1dc      	bne.n	8004ac6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d14b      	bne.n	8004bc8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d021      	beq.n	8004b8e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe ffe1 	bl	8003b16 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d032      	beq.n	8004bc0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d12b      	bne.n	8004bc0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d11f      	bne.n	8004bc0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b84:	f043 0201 	orr.w	r2, r3, #1
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	655a      	str	r2, [r3, #84]	; 0x54
 8004b8c:	e018      	b.n	8004bc0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d111      	bne.n	8004bc0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d105      	bne.n	8004bc0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb8:	f043 0201 	orr.w	r2, r3, #1
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f7fc fb61 	bl	8001288 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004bc6:	e00e      	b.n	8004be6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f7ff facf 	bl	8004178 <HAL_ADC_ErrorCallback>
}
 8004bda:	e004      	b.n	8004be6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	4798      	blx	r3
}
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f7fc fb0b 	bl	8001218 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c02:	bf00      	nop
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c28:	f043 0204 	orr.w	r2, r3, #4
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f7ff faa1 	bl	8004178 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c36:	bf00      	nop
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <LL_ADC_StartCalibration>:
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004c50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	609a      	str	r2, [r3, #8]
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <LL_ADC_IsCalibrationOnGoing>:
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c84:	d101      	bne.n	8004c8a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_ADCEx_Calibration_Start+0x1c>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e04d      	b.n	8004d50 <HAL_ADCEx_Calibration_Start+0xb8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff fecb 	bl	8004a58 <ADC_Disable>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d136      	bne.n	8004d3a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004cd4:	f023 0302 	bic.w	r3, r3, #2
 8004cd8:	f043 0202 	orr.w	r2, r3, #2
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6839      	ldr	r1, [r7, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff ffa9 	bl	8004c3e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004cec:	e014      	b.n	8004d18 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004cfa:	d30d      	bcc.n	8004d18 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d00:	f023 0312 	bic.w	r3, r3, #18
 8004d04:	f043 0210 	orr.w	r2, r3, #16
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e01b      	b.n	8004d50 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff ffa7 	bl	8004c70 <LL_ADC_IsCalibrationOnGoing>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e2      	bne.n	8004cee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2c:	f023 0303 	bic.w	r3, r3, #3
 8004d30:	f043 0201 	orr.w	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	655a      	str	r2, [r3, #84]	; 0x54
 8004d38:	e005      	b.n	8004d46 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3e:	f043 0210 	orr.w	r2, r3, #16
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d68:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <__NVIC_SetPriorityGrouping+0x44>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d74:	4013      	ands	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d8a:	4a04      	ldr	r2, [pc, #16]	; (8004d9c <__NVIC_SetPriorityGrouping+0x44>)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	60d3      	str	r3, [r2, #12]
}
 8004d90:	bf00      	nop
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	e000ed00 	.word	0xe000ed00

08004da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <__NVIC_GetPriorityGrouping+0x18>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	f003 0307 	and.w	r3, r3, #7
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	e000ed00 	.word	0xe000ed00

08004dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	db0b      	blt.n	8004de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	f003 021f 	and.w	r2, r3, #31
 8004dd4:	4907      	ldr	r1, [pc, #28]	; (8004df4 <__NVIC_EnableIRQ+0x38>)
 8004dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	2001      	movs	r0, #1
 8004dde:	fa00 f202 	lsl.w	r2, r0, r2
 8004de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	e000e100 	.word	0xe000e100

08004df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	6039      	str	r1, [r7, #0]
 8004e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	db0a      	blt.n	8004e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	490c      	ldr	r1, [pc, #48]	; (8004e44 <__NVIC_SetPriority+0x4c>)
 8004e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e16:	0112      	lsls	r2, r2, #4
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e20:	e00a      	b.n	8004e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	4908      	ldr	r1, [pc, #32]	; (8004e48 <__NVIC_SetPriority+0x50>)
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	3b04      	subs	r3, #4
 8004e30:	0112      	lsls	r2, r2, #4
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	440b      	add	r3, r1
 8004e36:	761a      	strb	r2, [r3, #24]
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	e000e100 	.word	0xe000e100
 8004e48:	e000ed00 	.word	0xe000ed00

08004e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b089      	sub	sp, #36	; 0x24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f1c3 0307 	rsb	r3, r3, #7
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	bf28      	it	cs
 8004e6a:	2304      	movcs	r3, #4
 8004e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	3304      	adds	r3, #4
 8004e72:	2b06      	cmp	r3, #6
 8004e74:	d902      	bls.n	8004e7c <NVIC_EncodePriority+0x30>
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	3b03      	subs	r3, #3
 8004e7a:	e000      	b.n	8004e7e <NVIC_EncodePriority+0x32>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43da      	mvns	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	401a      	ands	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9e:	43d9      	mvns	r1, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ea4:	4313      	orrs	r3, r2
         );
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3724      	adds	r7, #36	; 0x24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
	...

08004eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ec4:	d301      	bcc.n	8004eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e00f      	b.n	8004eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eca:	4a0a      	ldr	r2, [pc, #40]	; (8004ef4 <SysTick_Config+0x40>)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ed2:	210f      	movs	r1, #15
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ed8:	f7ff ff8e 	bl	8004df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004edc:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <SysTick_Config+0x40>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ee2:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <SysTick_Config+0x40>)
 8004ee4:	2207      	movs	r2, #7
 8004ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	e000e010 	.word	0xe000e010

08004ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ff29 	bl	8004d58 <__NVIC_SetPriorityGrouping>
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b086      	sub	sp, #24
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	4603      	mov	r3, r0
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f20:	f7ff ff3e 	bl	8004da0 <__NVIC_GetPriorityGrouping>
 8004f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	6978      	ldr	r0, [r7, #20]
 8004f2c:	f7ff ff8e 	bl	8004e4c <NVIC_EncodePriority>
 8004f30:	4602      	mov	r2, r0
 8004f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f36:	4611      	mov	r1, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff ff5d 	bl	8004df8 <__NVIC_SetPriority>
}
 8004f3e:	bf00      	nop
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b082      	sub	sp, #8
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff ff31 	bl	8004dbc <__NVIC_EnableIRQ>
}
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff ffa2 	bl	8004eb4 <SysTick_Config>
 8004f70:	4603      	mov	r3, r0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e014      	b.n	8004fb6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	791b      	ldrb	r3, [r3, #4]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d105      	bne.n	8004fa2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7fd fd4d 	bl	8002a3c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b088      	sub	sp, #32
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	795b      	ldrb	r3, [r3, #5]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_DAC_ConfigChannel+0x1c>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e107      	b.n	80051ea <HAL_DAC_ConfigChannel+0x22c>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d174      	bne.n	80050d8 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004fee:	f7fe fcd9 	bl	80039a4 <HAL_GetTick>
 8004ff2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d134      	bne.n	8005064 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ffa:	e011      	b.n	8005020 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ffc:	f7fe fcd2 	bl	80039a4 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b01      	cmp	r3, #1
 8005008:	d90a      	bls.n	8005020 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f043 0208 	orr.w	r2, r3, #8
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2203      	movs	r2, #3
 800501a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e0e4      	b.n	80051ea <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e6      	bne.n	8004ffc <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800502e:	2001      	movs	r0, #1
 8005030:	f7fe fcc4 	bl	80039bc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	6992      	ldr	r2, [r2, #24]
 800503c:	641a      	str	r2, [r3, #64]	; 0x40
 800503e:	e01e      	b.n	800507e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005040:	f7fe fcb0 	bl	80039a4 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	d90a      	bls.n	8005064 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f043 0208 	orr.w	r2, r3, #8
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2203      	movs	r2, #3
 800505e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e0c2      	b.n	80051ea <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506a:	2b00      	cmp	r3, #0
 800506c:	dbe8      	blt.n	8005040 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800506e:	2001      	movs	r0, #1
 8005070:	f7fe fca4 	bl	80039bc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	6992      	ldr	r2, [r2, #24]
 800507c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800508e:	fa01 f303 	lsl.w	r3, r1, r3
 8005092:	43db      	mvns	r3, r3
 8005094:	ea02 0103 	and.w	r1, r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f003 0310 	and.w	r3, r3, #16
 80050a2:	409a      	lsls	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	21ff      	movs	r1, #255	; 0xff
 80050ba:	fa01 f303 	lsl.w	r3, r1, r3
 80050be:	43db      	mvns	r3, r3
 80050c0:	ea02 0103 	and.w	r1, r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	6a1a      	ldr	r2, [r3, #32]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	409a      	lsls	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d11d      	bne.n	800511c <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	221f      	movs	r2, #31
 80050f0:	fa02 f303 	lsl.w	r3, r2, r3
 80050f4:	43db      	mvns	r3, r3
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	4013      	ands	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	4313      	orrs	r3, r2
 8005112:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005122:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f003 0310 	and.w	r3, r3, #16
 800512a:	2207      	movs	r2, #7
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	4013      	ands	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	431a      	orrs	r2, r3
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4313      	orrs	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6819      	ldr	r1, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	43da      	mvns	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	400a      	ands	r2, r1
 8005180:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	f640 72fc 	movw	r2, #4092	; 0xffc
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	43db      	mvns	r3, r3
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	4013      	ands	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6819      	ldr	r1, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	22c0      	movs	r2, #192	; 0xc0
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	43da      	mvns	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	400a      	ands	r2, r1
 80051da:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e098      	b.n	8005338 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	4b4d      	ldr	r3, [pc, #308]	; (8005344 <HAL_DMA_Init+0x150>)
 800520e:	429a      	cmp	r2, r3
 8005210:	d80f      	bhi.n	8005232 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	4b4b      	ldr	r3, [pc, #300]	; (8005348 <HAL_DMA_Init+0x154>)
 800521a:	4413      	add	r3, r2
 800521c:	4a4b      	ldr	r2, [pc, #300]	; (800534c <HAL_DMA_Init+0x158>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	091b      	lsrs	r3, r3, #4
 8005224:	009a      	lsls	r2, r3, #2
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a48      	ldr	r2, [pc, #288]	; (8005350 <HAL_DMA_Init+0x15c>)
 800522e:	641a      	str	r2, [r3, #64]	; 0x40
 8005230:	e00e      	b.n	8005250 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	4b46      	ldr	r3, [pc, #280]	; (8005354 <HAL_DMA_Init+0x160>)
 800523a:	4413      	add	r3, r2
 800523c:	4a43      	ldr	r2, [pc, #268]	; (800534c <HAL_DMA_Init+0x158>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	091b      	lsrs	r3, r3, #4
 8005244:	009a      	lsls	r2, r3, #2
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a42      	ldr	r2, [pc, #264]	; (8005358 <HAL_DMA_Init+0x164>)
 800524e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005274:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800528c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052aa:	d039      	beq.n	8005320 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	4a27      	ldr	r2, [pc, #156]	; (8005350 <HAL_DMA_Init+0x15c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d11a      	bne.n	80052ec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80052b6:	4b29      	ldr	r3, [pc, #164]	; (800535c <HAL_DMA_Init+0x168>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052be:	f003 031c 	and.w	r3, r3, #28
 80052c2:	210f      	movs	r1, #15
 80052c4:	fa01 f303 	lsl.w	r3, r1, r3
 80052c8:	43db      	mvns	r3, r3
 80052ca:	4924      	ldr	r1, [pc, #144]	; (800535c <HAL_DMA_Init+0x168>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80052d0:	4b22      	ldr	r3, [pc, #136]	; (800535c <HAL_DMA_Init+0x168>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6859      	ldr	r1, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052dc:	f003 031c 	and.w	r3, r3, #28
 80052e0:	fa01 f303 	lsl.w	r3, r1, r3
 80052e4:	491d      	ldr	r1, [pc, #116]	; (800535c <HAL_DMA_Init+0x168>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]
 80052ea:	e019      	b.n	8005320 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80052ec:	4b1c      	ldr	r3, [pc, #112]	; (8005360 <HAL_DMA_Init+0x16c>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f4:	f003 031c 	and.w	r3, r3, #28
 80052f8:	210f      	movs	r1, #15
 80052fa:	fa01 f303 	lsl.w	r3, r1, r3
 80052fe:	43db      	mvns	r3, r3
 8005300:	4917      	ldr	r1, [pc, #92]	; (8005360 <HAL_DMA_Init+0x16c>)
 8005302:	4013      	ands	r3, r2
 8005304:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005306:	4b16      	ldr	r3, [pc, #88]	; (8005360 <HAL_DMA_Init+0x16c>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6859      	ldr	r1, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	f003 031c 	and.w	r3, r3, #28
 8005316:	fa01 f303 	lsl.w	r3, r1, r3
 800531a:	4911      	ldr	r1, [pc, #68]	; (8005360 <HAL_DMA_Init+0x16c>)
 800531c:	4313      	orrs	r3, r2
 800531e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40020407 	.word	0x40020407
 8005348:	bffdfff8 	.word	0xbffdfff8
 800534c:	cccccccd 	.word	0xcccccccd
 8005350:	40020000 	.word	0x40020000
 8005354:	bffdfbf8 	.word	0xbffdfbf8
 8005358:	40020400 	.word	0x40020400
 800535c:	400200a8 	.word	0x400200a8
 8005360:	400204a8 	.word	0x400204a8

08005364 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_DMA_Start_IT+0x20>
 8005380:	2302      	movs	r3, #2
 8005382:	e04b      	b.n	800541c <HAL_DMA_Start_IT+0xb8>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	d13a      	bne.n	800540e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0201 	bic.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f8e0 	bl	8005582 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d008      	beq.n	80053dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 020e 	orr.w	r2, r2, #14
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	e00f      	b.n	80053fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0204 	bic.w	r2, r2, #4
 80053ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 020a 	orr.w	r2, r2, #10
 80053fa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	e005      	b.n	800541a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005416:	2302      	movs	r3, #2
 8005418:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800541a:	7dfb      	ldrb	r3, [r7, #23]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005440:	f003 031c 	and.w	r3, r3, #28
 8005444:	2204      	movs	r2, #4
 8005446:	409a      	lsls	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d026      	beq.n	800549e <HAL_DMA_IRQHandler+0x7a>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d021      	beq.n	800549e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d107      	bne.n	8005478 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0204 	bic.w	r2, r2, #4
 8005476:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547c:	f003 021c 	and.w	r2, r3, #28
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	2104      	movs	r1, #4
 8005486:	fa01 f202 	lsl.w	r2, r1, r2
 800548a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	2b00      	cmp	r3, #0
 8005492:	d071      	beq.n	8005578 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800549c:	e06c      	b.n	8005578 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a2:	f003 031c 	and.w	r3, r3, #28
 80054a6:	2202      	movs	r2, #2
 80054a8:	409a      	lsls	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4013      	ands	r3, r2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d02e      	beq.n	8005510 <HAL_DMA_IRQHandler+0xec>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d029      	beq.n	8005510 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 020a 	bic.w	r2, r2, #10
 80054d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e6:	f003 021c 	and.w	r2, r3, #28
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	2102      	movs	r1, #2
 80054f0:	fa01 f202 	lsl.w	r2, r1, r2
 80054f4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d038      	beq.n	8005578 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800550e:	e033      	b.n	8005578 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005514:	f003 031c 	and.w	r3, r3, #28
 8005518:	2208      	movs	r2, #8
 800551a:	409a      	lsls	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d02a      	beq.n	800557a <HAL_DMA_IRQHandler+0x156>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d025      	beq.n	800557a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 020e 	bic.w	r2, r2, #14
 800553c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005542:	f003 021c 	and.w	r2, r3, #28
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	2101      	movs	r1, #1
 800554c:	fa01 f202 	lsl.w	r2, r1, r2
 8005550:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005578:	bf00      	nop
 800557a:	bf00      	nop
}
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	607a      	str	r2, [r7, #4]
 800558e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005594:	f003 021c 	and.w	r2, r3, #28
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	2101      	movs	r1, #1
 800559e:	fa01 f202 	lsl.w	r2, r1, r2
 80055a2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d108      	bne.n	80055c6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80055c4:	e007      	b.n	80055d6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	60da      	str	r2, [r3, #12]
}
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055f2:	e154      	b.n	800589e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	2101      	movs	r1, #1
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005600:	4013      	ands	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 8146 	beq.w	8005898 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	2b01      	cmp	r3, #1
 8005616:	d005      	beq.n	8005624 <HAL_GPIO_Init+0x40>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d130      	bne.n	8005686 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	2203      	movs	r2, #3
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	43db      	mvns	r3, r3
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4013      	ands	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800565a:	2201      	movs	r2, #1
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	43db      	mvns	r3, r3
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4013      	ands	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	091b      	lsrs	r3, r3, #4
 8005670:	f003 0201 	and.w	r2, r3, #1
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2b03      	cmp	r3, #3
 8005690:	d017      	beq.n	80056c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	2203      	movs	r2, #3
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	43db      	mvns	r3, r3
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4013      	ands	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d123      	bne.n	8005716 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	08da      	lsrs	r2, r3, #3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3208      	adds	r2, #8
 80056d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	220f      	movs	r2, #15
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	43db      	mvns	r3, r3
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4013      	ands	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	08da      	lsrs	r2, r3, #3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3208      	adds	r2, #8
 8005710:	6939      	ldr	r1, [r7, #16]
 8005712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	2203      	movs	r2, #3
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	43db      	mvns	r3, r3
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4013      	ands	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f003 0203 	and.w	r2, r3, #3
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 80a0 	beq.w	8005898 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005758:	4b58      	ldr	r3, [pc, #352]	; (80058bc <HAL_GPIO_Init+0x2d8>)
 800575a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575c:	4a57      	ldr	r2, [pc, #348]	; (80058bc <HAL_GPIO_Init+0x2d8>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	6613      	str	r3, [r2, #96]	; 0x60
 8005764:	4b55      	ldr	r3, [pc, #340]	; (80058bc <HAL_GPIO_Init+0x2d8>)
 8005766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005770:	4a53      	ldr	r2, [pc, #332]	; (80058c0 <HAL_GPIO_Init+0x2dc>)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	089b      	lsrs	r3, r3, #2
 8005776:	3302      	adds	r3, #2
 8005778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800577c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	220f      	movs	r2, #15
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4013      	ands	r3, r2
 8005792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800579a:	d019      	beq.n	80057d0 <HAL_GPIO_Init+0x1ec>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a49      	ldr	r2, [pc, #292]	; (80058c4 <HAL_GPIO_Init+0x2e0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d013      	beq.n	80057cc <HAL_GPIO_Init+0x1e8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a48      	ldr	r2, [pc, #288]	; (80058c8 <HAL_GPIO_Init+0x2e4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00d      	beq.n	80057c8 <HAL_GPIO_Init+0x1e4>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a47      	ldr	r2, [pc, #284]	; (80058cc <HAL_GPIO_Init+0x2e8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <HAL_GPIO_Init+0x1e0>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a46      	ldr	r2, [pc, #280]	; (80058d0 <HAL_GPIO_Init+0x2ec>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d101      	bne.n	80057c0 <HAL_GPIO_Init+0x1dc>
 80057bc:	2304      	movs	r3, #4
 80057be:	e008      	b.n	80057d2 <HAL_GPIO_Init+0x1ee>
 80057c0:	2307      	movs	r3, #7
 80057c2:	e006      	b.n	80057d2 <HAL_GPIO_Init+0x1ee>
 80057c4:	2303      	movs	r3, #3
 80057c6:	e004      	b.n	80057d2 <HAL_GPIO_Init+0x1ee>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e002      	b.n	80057d2 <HAL_GPIO_Init+0x1ee>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <HAL_GPIO_Init+0x1ee>
 80057d0:	2300      	movs	r3, #0
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	f002 0203 	and.w	r2, r2, #3
 80057d8:	0092      	lsls	r2, r2, #2
 80057da:	4093      	lsls	r3, r2
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80057e2:	4937      	ldr	r1, [pc, #220]	; (80058c0 <HAL_GPIO_Init+0x2dc>)
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	089b      	lsrs	r3, r3, #2
 80057e8:	3302      	adds	r3, #2
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057f0:	4b38      	ldr	r3, [pc, #224]	; (80058d4 <HAL_GPIO_Init+0x2f0>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	43db      	mvns	r3, r3
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4013      	ands	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005814:	4a2f      	ldr	r2, [pc, #188]	; (80058d4 <HAL_GPIO_Init+0x2f0>)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800581a:	4b2e      	ldr	r3, [pc, #184]	; (80058d4 <HAL_GPIO_Init+0x2f0>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	43db      	mvns	r3, r3
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4013      	ands	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800583e:	4a25      	ldr	r2, [pc, #148]	; (80058d4 <HAL_GPIO_Init+0x2f0>)
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005844:	4b23      	ldr	r3, [pc, #140]	; (80058d4 <HAL_GPIO_Init+0x2f0>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	43db      	mvns	r3, r3
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4013      	ands	r3, r2
 8005852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005868:	4a1a      	ldr	r2, [pc, #104]	; (80058d4 <HAL_GPIO_Init+0x2f0>)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800586e:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <HAL_GPIO_Init+0x2f0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	43db      	mvns	r3, r3
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4013      	ands	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005892:	4a10      	ldr	r2, [pc, #64]	; (80058d4 <HAL_GPIO_Init+0x2f0>)
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	3301      	adds	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	fa22 f303 	lsr.w	r3, r2, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f47f aea3 	bne.w	80055f4 <HAL_GPIO_Init+0x10>
  }
}
 80058ae:	bf00      	nop
 80058b0:	bf00      	nop
 80058b2:	371c      	adds	r7, #28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	40021000 	.word	0x40021000
 80058c0:	40010000 	.word	0x40010000
 80058c4:	48000400 	.word	0x48000400
 80058c8:	48000800 	.word	0x48000800
 80058cc:	48000c00 	.word	0x48000c00
 80058d0:	48001000 	.word	0x48001000
 80058d4:	40010400 	.word	0x40010400

080058d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	887b      	ldrh	r3, [r7, #2]
 80058ea:	4013      	ands	r3, r2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
 80058f4:	e001      	b.n	80058fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058f6:	2300      	movs	r3, #0
 80058f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	807b      	strh	r3, [r7, #2]
 8005914:	4613      	mov	r3, r2
 8005916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005918:	787b      	ldrb	r3, [r7, #1]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800591e:	887a      	ldrh	r2, [r7, #2]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005924:	e002      	b.n	800592c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005926:	887a      	ldrh	r2, [r7, #2]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	4603      	mov	r3, r0
 8005940:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005942:	4b08      	ldr	r3, [pc, #32]	; (8005964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005944:	695a      	ldr	r2, [r3, #20]
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	4013      	ands	r3, r2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d006      	beq.n	800595c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800594e:	4a05      	ldr	r2, [pc, #20]	; (8005964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005954:	88fb      	ldrh	r3, [r7, #6]
 8005956:	4618      	mov	r0, r3
 8005958:	f7fc fc8a 	bl	8002270 <HAL_GPIO_EXTI_Callback>
  }
}
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40010400 	.word	0x40010400

08005968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e081      	b.n	8005a7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fd f8c2 	bl	8002b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2224      	movs	r2, #36	; 0x24
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d107      	bne.n	80059e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059de:	609a      	str	r2, [r3, #8]
 80059e0:	e006      	b.n	80059f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80059ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d104      	bne.n	8005a02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69d9      	ldr	r1, [r3, #28]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1a      	ldr	r2, [r3, #32]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	607a      	str	r2, [r7, #4]
 8005a92:	461a      	mov	r2, r3
 8005a94:	460b      	mov	r3, r1
 8005a96:	817b      	strh	r3, [r7, #10]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	f040 80da 	bne.w	8005c5e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_I2C_Master_Transmit+0x30>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e0d3      	b.n	8005c60 <HAL_I2C_Master_Transmit+0x1d8>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ac0:	f7fd ff70 	bl	80039a4 <HAL_GetTick>
 8005ac4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	2319      	movs	r3, #25
 8005acc:	2201      	movs	r2, #1
 8005ace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 fb4e 	bl	8006174 <I2C_WaitOnFlagUntilTimeout>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e0be      	b.n	8005c60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2221      	movs	r2, #33	; 0x21
 8005ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2210      	movs	r2, #16
 8005aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	893a      	ldrh	r2, [r7, #8]
 8005b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2bff      	cmp	r3, #255	; 0xff
 8005b12:	d90e      	bls.n	8005b32 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	22ff      	movs	r2, #255	; 0xff
 8005b18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	8979      	ldrh	r1, [r7, #10]
 8005b22:	4b51      	ldr	r3, [pc, #324]	; (8005c68 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 fd44 	bl	80065b8 <I2C_TransferConfig>
 8005b30:	e06c      	b.n	8005c0c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	8979      	ldrh	r1, [r7, #10]
 8005b44:	4b48      	ldr	r3, [pc, #288]	; (8005c68 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 fd33 	bl	80065b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b52:	e05b      	b.n	8005c0c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	6a39      	ldr	r1, [r7, #32]
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 fb4b 	bl	80061f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e07b      	b.n	8005c60 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d034      	beq.n	8005c0c <HAL_I2C_Master_Transmit+0x184>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d130      	bne.n	8005c0c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2180      	movs	r1, #128	; 0x80
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 fadd 	bl	8006174 <I2C_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e04d      	b.n	8005c60 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2bff      	cmp	r3, #255	; 0xff
 8005bcc:	d90e      	bls.n	8005bec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	22ff      	movs	r2, #255	; 0xff
 8005bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	8979      	ldrh	r1, [r7, #10]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 fce7 	bl	80065b8 <I2C_TransferConfig>
 8005bea:	e00f      	b.n	8005c0c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	8979      	ldrh	r1, [r7, #10]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 fcd6 	bl	80065b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d19e      	bne.n	8005b54 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	6a39      	ldr	r1, [r7, #32]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 fb2a 	bl	8006274 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e01a      	b.n	8005c60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6859      	ldr	r1, [r3, #4]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <HAL_I2C_Master_Transmit+0x1e4>)
 8005c3e:	400b      	ands	r3, r1
 8005c40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e000      	b.n	8005c60 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005c5e:	2302      	movs	r3, #2
  }
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	80002000 	.word	0x80002000
 8005c6c:	fe00e800 	.word	0xfe00e800

08005c70 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	817b      	strh	r3, [r7, #10]
 8005c80:	4613      	mov	r3, r2
 8005c82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	f040 80db 	bne.w	8005e48 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_I2C_Master_Receive+0x30>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e0d4      	b.n	8005e4a <HAL_I2C_Master_Receive+0x1da>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ca8:	f7fd fe7c 	bl	80039a4 <HAL_GetTick>
 8005cac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	2319      	movs	r3, #25
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fa5a 	bl	8006174 <I2C_WaitOnFlagUntilTimeout>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e0bf      	b.n	8005e4a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2222      	movs	r2, #34	; 0x22
 8005cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2210      	movs	r2, #16
 8005cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	893a      	ldrh	r2, [r7, #8]
 8005cea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2bff      	cmp	r3, #255	; 0xff
 8005cfa:	d90e      	bls.n	8005d1a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	22ff      	movs	r2, #255	; 0xff
 8005d00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	8979      	ldrh	r1, [r7, #10]
 8005d0a:	4b52      	ldr	r3, [pc, #328]	; (8005e54 <HAL_I2C_Master_Receive+0x1e4>)
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 fc50 	bl	80065b8 <I2C_TransferConfig>
 8005d18:	e06d      	b.n	8005df6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	8979      	ldrh	r1, [r7, #10]
 8005d2c:	4b49      	ldr	r3, [pc, #292]	; (8005e54 <HAL_I2C_Master_Receive+0x1e4>)
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 fc3f 	bl	80065b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005d3a:	e05c      	b.n	8005df6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	6a39      	ldr	r1, [r7, #32]
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 fad3 	bl	80062ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e07c      	b.n	8005e4a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d034      	beq.n	8005df6 <HAL_I2C_Master_Receive+0x186>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d130      	bne.n	8005df6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	2180      	movs	r1, #128	; 0x80
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 f9e8 	bl	8006174 <I2C_WaitOnFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e04d      	b.n	8005e4a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2bff      	cmp	r3, #255	; 0xff
 8005db6:	d90e      	bls.n	8005dd6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	22ff      	movs	r2, #255	; 0xff
 8005dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	8979      	ldrh	r1, [r7, #10]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 fbf2 	bl	80065b8 <I2C_TransferConfig>
 8005dd4:	e00f      	b.n	8005df6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	8979      	ldrh	r1, [r7, #10]
 8005de8:	2300      	movs	r3, #0
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fbe1 	bl	80065b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d19d      	bne.n	8005d3c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	6a39      	ldr	r1, [r7, #32]
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 fa35 	bl	8006274 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e01a      	b.n	8005e4a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6859      	ldr	r1, [r3, #4]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <HAL_I2C_Master_Receive+0x1e8>)
 8005e28:	400b      	ands	r3, r1
 8005e2a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	e000      	b.n	8005e4a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005e48:	2302      	movs	r3, #2
  }
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	80002400 	.word	0x80002400
 8005e58:	fe00e800 	.word	0xfe00e800

08005e5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	4608      	mov	r0, r1
 8005e66:	4611      	mov	r1, r2
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	817b      	strh	r3, [r7, #10]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	813b      	strh	r3, [r7, #8]
 8005e72:	4613      	mov	r3, r2
 8005e74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	f040 80f9 	bne.w	8006076 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_I2C_Mem_Write+0x34>
 8005e8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d105      	bne.n	8005e9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e0ed      	b.n	8006078 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_I2C_Mem_Write+0x4e>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e0e6      	b.n	8006078 <HAL_I2C_Mem_Write+0x21c>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005eb2:	f7fd fd77 	bl	80039a4 <HAL_GetTick>
 8005eb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	2319      	movs	r3, #25
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 f955 	bl	8006174 <I2C_WaitOnFlagUntilTimeout>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e0d1      	b.n	8006078 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2221      	movs	r2, #33	; 0x21
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2240      	movs	r2, #64	; 0x40
 8005ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a3a      	ldr	r2, [r7, #32]
 8005eee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005efc:	88f8      	ldrh	r0, [r7, #6]
 8005efe:	893a      	ldrh	r2, [r7, #8]
 8005f00:	8979      	ldrh	r1, [r7, #10]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 f8b9 	bl	8006084 <I2C_RequestMemoryWrite>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d005      	beq.n	8005f24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0a9      	b.n	8006078 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2bff      	cmp	r3, #255	; 0xff
 8005f2c:	d90e      	bls.n	8005f4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	22ff      	movs	r2, #255	; 0xff
 8005f32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	8979      	ldrh	r1, [r7, #10]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fb37 	bl	80065b8 <I2C_TransferConfig>
 8005f4a:	e00f      	b.n	8005f6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	8979      	ldrh	r1, [r7, #10]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 fb26 	bl	80065b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f93f 	bl	80061f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e07b      	b.n	8006078 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	781a      	ldrb	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d034      	beq.n	8006024 <HAL_I2C_Mem_Write+0x1c8>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d130      	bne.n	8006024 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2180      	movs	r1, #128	; 0x80
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f8d1 	bl	8006174 <I2C_WaitOnFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e04d      	b.n	8006078 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2bff      	cmp	r3, #255	; 0xff
 8005fe4:	d90e      	bls.n	8006004 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	22ff      	movs	r2, #255	; 0xff
 8005fea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	8979      	ldrh	r1, [r7, #10]
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 fadb 	bl	80065b8 <I2C_TransferConfig>
 8006002:	e00f      	b.n	8006024 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006012:	b2da      	uxtb	r2, r3
 8006014:	8979      	ldrh	r1, [r7, #10]
 8006016:	2300      	movs	r3, #0
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 faca 	bl	80065b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d19e      	bne.n	8005f6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 f91e 	bl	8006274 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e01a      	b.n	8006078 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2220      	movs	r2, #32
 8006048:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6859      	ldr	r1, [r3, #4]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <HAL_I2C_Mem_Write+0x224>)
 8006056:	400b      	ands	r3, r1
 8006058:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	e000      	b.n	8006078 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006076:	2302      	movs	r3, #2
  }
}
 8006078:	4618      	mov	r0, r3
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	fe00e800 	.word	0xfe00e800

08006084 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	4608      	mov	r0, r1
 800608e:	4611      	mov	r1, r2
 8006090:	461a      	mov	r2, r3
 8006092:	4603      	mov	r3, r0
 8006094:	817b      	strh	r3, [r7, #10]
 8006096:	460b      	mov	r3, r1
 8006098:	813b      	strh	r3, [r7, #8]
 800609a:	4613      	mov	r3, r2
 800609c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	8979      	ldrh	r1, [r7, #10]
 80060a4:	4b20      	ldr	r3, [pc, #128]	; (8006128 <I2C_RequestMemoryWrite+0xa4>)
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 fa83 	bl	80065b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060b2:	69fa      	ldr	r2, [r7, #28]
 80060b4:	69b9      	ldr	r1, [r7, #24]
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 f89c 	bl	80061f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e02c      	b.n	8006120 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d105      	bne.n	80060d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060cc:	893b      	ldrh	r3, [r7, #8]
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	629a      	str	r2, [r3, #40]	; 0x28
 80060d6:	e015      	b.n	8006104 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80060d8:	893b      	ldrh	r3, [r7, #8]
 80060da:	0a1b      	lsrs	r3, r3, #8
 80060dc:	b29b      	uxth	r3, r3
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	69b9      	ldr	r1, [r7, #24]
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f882 	bl	80061f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e012      	b.n	8006120 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060fa:	893b      	ldrh	r3, [r7, #8]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	2200      	movs	r2, #0
 800610c:	2180      	movs	r1, #128	; 0x80
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f830 	bl	8006174 <I2C_WaitOnFlagUntilTimeout>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	80002000 	.word	0x80002000

0800612c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b02      	cmp	r3, #2
 8006140:	d103      	bne.n	800614a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2200      	movs	r2, #0
 8006148:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b01      	cmp	r3, #1
 8006156:	d007      	beq.n	8006168 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	619a      	str	r2, [r3, #24]
  }
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	4613      	mov	r3, r2
 8006182:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006184:	e022      	b.n	80061cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800618c:	d01e      	beq.n	80061cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618e:	f7fd fc09 	bl	80039a4 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d302      	bcc.n	80061a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d113      	bne.n	80061cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a8:	f043 0220 	orr.w	r2, r3, #32
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e00f      	b.n	80061ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4013      	ands	r3, r2
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	429a      	cmp	r2, r3
 80061da:	bf0c      	ite	eq
 80061dc:	2301      	moveq	r3, #1
 80061de:	2300      	movne	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	461a      	mov	r2, r3
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d0cd      	beq.n	8006186 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006200:	e02c      	b.n	800625c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	68b9      	ldr	r1, [r7, #8]
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 f8ea 	bl	80063e0 <I2C_IsErrorOccurred>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e02a      	b.n	800626c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800621c:	d01e      	beq.n	800625c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800621e:	f7fd fbc1 	bl	80039a4 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	429a      	cmp	r2, r3
 800622c:	d302      	bcc.n	8006234 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d113      	bne.n	800625c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006238:	f043 0220 	orr.w	r2, r3, #32
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e007      	b.n	800626c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d1cb      	bne.n	8006202 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006280:	e028      	b.n	80062d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 f8aa 	bl	80063e0 <I2C_IsErrorOccurred>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e026      	b.n	80062e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006296:	f7fd fb85 	bl	80039a4 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d302      	bcc.n	80062ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d113      	bne.n	80062d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b0:	f043 0220 	orr.w	r2, r3, #32
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e007      	b.n	80062e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b20      	cmp	r3, #32
 80062e0:	d1cf      	bne.n	8006282 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062f8:	e064      	b.n	80063c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 f86e 	bl	80063e0 <I2C_IsErrorOccurred>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e062      	b.n	80063d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b20      	cmp	r3, #32
 800631a:	d138      	bne.n	800638e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b04      	cmp	r3, #4
 8006328:	d105      	bne.n	8006336 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	e04e      	b.n	80063d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	2b10      	cmp	r3, #16
 8006342:	d107      	bne.n	8006354 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2210      	movs	r2, #16
 800634a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2204      	movs	r2, #4
 8006350:	645a      	str	r2, [r3, #68]	; 0x44
 8006352:	e002      	b.n	800635a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2220      	movs	r2, #32
 8006360:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6859      	ldr	r1, [r3, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4b1b      	ldr	r3, [pc, #108]	; (80063dc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800636e:	400b      	ands	r3, r1
 8006370:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e022      	b.n	80063d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800638e:	f7fd fb09 	bl	80039a4 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	429a      	cmp	r2, r3
 800639c:	d302      	bcc.n	80063a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10f      	bne.n	80063c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a8:	f043 0220 	orr.w	r2, r3, #32
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e007      	b.n	80063d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d193      	bne.n	80062fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	fe00e800 	.word	0xfe00e800

080063e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08a      	sub	sp, #40	; 0x28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80063fa:	2300      	movs	r3, #0
 80063fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	2b00      	cmp	r3, #0
 800640a:	d075      	beq.n	80064f8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2210      	movs	r2, #16
 8006412:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006414:	e056      	b.n	80064c4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800641c:	d052      	beq.n	80064c4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800641e:	f7fd fac1 	bl	80039a4 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	429a      	cmp	r2, r3
 800642c:	d302      	bcc.n	8006434 <I2C_IsErrorOccurred+0x54>
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d147      	bne.n	80064c4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800643e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006446:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006456:	d12e      	bne.n	80064b6 <I2C_IsErrorOccurred+0xd6>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800645e:	d02a      	beq.n	80064b6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006460:	7cfb      	ldrb	r3, [r7, #19]
 8006462:	2b20      	cmp	r3, #32
 8006464:	d027      	beq.n	80064b6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006474:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006476:	f7fd fa95 	bl	80039a4 <HAL_GetTick>
 800647a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800647c:	e01b      	b.n	80064b6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800647e:	f7fd fa91 	bl	80039a4 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b19      	cmp	r3, #25
 800648a:	d914      	bls.n	80064b6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006490:	f043 0220 	orr.w	r2, r3, #32
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2220      	movs	r2, #32
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d1dc      	bne.n	800647e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	d003      	beq.n	80064da <I2C_IsErrorOccurred+0xfa>
 80064d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d09d      	beq.n	8006416 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80064da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d103      	bne.n	80064ea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2220      	movs	r2, #32
 80064e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	f043 0304 	orr.w	r3, r3, #4
 80064f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00b      	beq.n	8006522 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	f043 0301 	orr.w	r3, r3, #1
 8006510:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800651a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00b      	beq.n	8006544 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	f043 0308 	orr.w	r3, r3, #8
 8006532:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800653c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00b      	beq.n	8006566 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	f043 0302 	orr.w	r3, r3, #2
 8006554:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800655e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800656a:	2b00      	cmp	r3, #0
 800656c:	d01c      	beq.n	80065a8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f7ff fddc 	bl	800612c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6859      	ldr	r1, [r3, #4]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <I2C_IsErrorOccurred+0x1d4>)
 8006580:	400b      	ands	r3, r1
 8006582:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	431a      	orrs	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2220      	movs	r2, #32
 8006594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80065a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3728      	adds	r7, #40	; 0x28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	fe00e800 	.word	0xfe00e800

080065b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	607b      	str	r3, [r7, #4]
 80065c2:	460b      	mov	r3, r1
 80065c4:	817b      	strh	r3, [r7, #10]
 80065c6:	4613      	mov	r3, r2
 80065c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065ca:	897b      	ldrh	r3, [r7, #10]
 80065cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80065d0:	7a7b      	ldrb	r3, [r7, #9]
 80065d2:	041b      	lsls	r3, r3, #16
 80065d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	0d5b      	lsrs	r3, r3, #21
 80065f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80065f6:	4b08      	ldr	r3, [pc, #32]	; (8006618 <I2C_TransferConfig+0x60>)
 80065f8:	430b      	orrs	r3, r1
 80065fa:	43db      	mvns	r3, r3
 80065fc:	ea02 0103 	and.w	r1, r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	430a      	orrs	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800660a:	bf00      	nop
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	03ff63ff 	.word	0x03ff63ff

0800661c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b20      	cmp	r3, #32
 8006630:	d138      	bne.n	80066a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800663c:	2302      	movs	r3, #2
 800663e:	e032      	b.n	80066a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2224      	movs	r2, #36	; 0x24
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0201 	bic.w	r2, r2, #1
 800665e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800666e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6819      	ldr	r1, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	e000      	b.n	80066a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066a4:	2302      	movs	r3, #2
  }
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b20      	cmp	r3, #32
 80066c6:	d139      	bne.n	800673c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066d2:	2302      	movs	r3, #2
 80066d4:	e033      	b.n	800673e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2224      	movs	r2, #36	; 0x24
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0201 	bic.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006704:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0201 	orr.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	e000      	b.n	800673e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800673c:	2302      	movs	r3, #2
  }
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
	...

0800674c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006754:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006758:	4a0a      	ldr	r2, [pc, #40]	; (8006784 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800675a:	f043 0301 	orr.w	r3, r3, #1
 800675e:	6613      	str	r3, [r2, #96]	; 0x60
 8006760:	4b08      	ldr	r3, [pc, #32]	; (8006784 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800676c:	4b06      	ldr	r3, [pc, #24]	; (8006788 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	4905      	ldr	r1, [pc, #20]	; (8006788 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4313      	orrs	r3, r2
 8006776:	604b      	str	r3, [r1, #4]
}
 8006778:	bf00      	nop
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	40021000 	.word	0x40021000
 8006788:	40010000 	.word	0x40010000

0800678c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e0c3      	b.n	800692a <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b05      	cmp	r3, #5
 80067ac:	d101      	bne.n	80067b2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e0bb      	b.n	800692a <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d101      	bne.n	80067c2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e0b3      	b.n	800692a <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d103      	bne.n	80067de <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7fc fa36 	bl	8002c50 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067f2:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d11b      	bne.n	8006834 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8006806:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	6891      	ldr	r1, [r2, #8]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	68d2      	ldr	r2, [r2, #12]
 8006812:	4311      	orrs	r1, r2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6992      	ldr	r2, [r2, #24]
 8006818:	4311      	orrs	r1, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6912      	ldr	r2, [r2, #16]
 800681e:	4311      	orrs	r1, r2
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6952      	ldr	r2, [r2, #20]
 8006824:	4311      	orrs	r1, r2
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	69d2      	ldr	r2, [r2, #28]
 800682a:	4311      	orrs	r1, r2
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6812      	ldr	r2, [r2, #0]
 8006830:	430b      	orrs	r3, r1
 8006832:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	2b0c      	cmp	r3, #12
 800683a:	d115      	bne.n	8006868 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8006846:	f023 030e 	bic.w	r3, r3, #14
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6891      	ldr	r1, [r2, #8]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	68d2      	ldr	r2, [r2, #12]
 8006852:	4311      	orrs	r1, r2
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6952      	ldr	r2, [r2, #20]
 8006858:	4311      	orrs	r1, r2
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	69d2      	ldr	r2, [r2, #28]
 800685e:	4311      	orrs	r1, r2
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6812      	ldr	r2, [r2, #0]
 8006864:	430b      	orrs	r3, r1
 8006866:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d118      	bne.n	80068a2 <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 800687a:	f023 030e 	bic.w	r3, r3, #14
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6891      	ldr	r1, [r2, #8]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	68d2      	ldr	r2, [r2, #12]
 8006886:	4311      	orrs	r1, r2
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	6912      	ldr	r2, [r2, #16]
 800688c:	4311      	orrs	r1, r2
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6952      	ldr	r2, [r2, #20]
 8006892:	4311      	orrs	r1, r2
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	69d2      	ldr	r2, [r2, #28]
 8006898:	4311      	orrs	r1, r2
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6812      	ldr	r2, [r2, #0]
 800689e:	430b      	orrs	r3, r1
 80068a0:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068aa:	d12a      	bne.n	8006902 <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d013      	beq.n	80068dc <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80068be:	4313      	orrs	r3, r2
 80068c0:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80068cc:	f023 031f 	bic.w	r3, r3, #31
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6812      	ldr	r2, [r2, #0]
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	430b      	orrs	r3, r1
 80068d8:	6053      	str	r3, [r2, #4]
 80068da:	e012      	b.n	8006902 <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e0:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80068f4:	f023 031f 	bic.w	r3, r3, #31
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6812      	ldr	r2, [r2, #0]
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	430b      	orrs	r3, r1
 8006900:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 8006902:	4b0c      	ldr	r3, [pc, #48]	; (8006934 <HAL_OPAMP_Init+0x1a8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	4909      	ldr	r1, [pc, #36]	; (8006934 <HAL_OPAMP_Init+0x1a8>)
 8006910:	4313      	orrs	r3, r2
 8006912:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d103      	bne.n	8006928 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8006928:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	40007800 	.word	0x40007800

08006938 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d102      	bne.n	8006950 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	73fb      	strb	r3, [r7, #15]
 800694e:	e01d      	b.n	800698c <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b05      	cmp	r3, #5
 800695a:	d102      	bne.n	8006962 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	73fb      	strb	r3, [r7, #15]
 8006960:	e014      	b.n	800698c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b01      	cmp	r3, #1
 800696c:	d10c      	bne.n	8006988 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f042 0201 	orr.w	r2, r2, #1
 800697c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2204      	movs	r2, #4
 8006982:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8006986:	e001      	b.n	800698c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status

  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b088      	sub	sp, #32
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	77fb      	strb	r3, [r7, #31]

  __IO uint32_t* tmp_opamp_reg_trimming;   /* Selection of register of trimming depending on power mode: OTR or LPOTR */

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d102      	bne.n	80069b2 <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	77fb      	strb	r3, [r7, #31]
 80069b0:	e10d      	b.n	8006bce <HAL_OPAMP_SelfCalibrate+0x234>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b05      	cmp	r3, #5
 80069bc:	d102      	bne.n	80069c4 <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	77fb      	strb	r3, [r7, #31]
 80069c2:	e104      	b.n	8006bce <HAL_OPAMP_SelfCalibrate+0x234>
  }
  else
  {
    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if(hopamp->State ==  HAL_OPAMP_STATE_READY)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	f040 80fc 	bne.w	8006bca <HAL_OPAMP_SelfCalibrate+0x230>
      assert_param(IS_OPAMP_POWERMODE(hopamp->Init.PowerMode));

      /* Save OPAMP mode as in                                       */
      /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx */
      /* the calibration is not working in PGA mode                  */
      opampmode = READ_BIT(hopamp->Instance->CSR,OPAMP_CSR_OPAMODE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 030c 	and.w	r3, r3, #12
 80069dc:	60bb      	str	r3, [r7, #8]

      /* Use of standalone mode */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_OPAMODE, OPAMP_STANDALONE_MODE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 020c 	bic.w	r2, r2, #12
 80069ec:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069fc:	601a      	str	r2, [r3, #0]

      /* Select trimming settings depending on power mode */
      if (hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <HAL_OPAMP_SelfCalibrate+0x76>
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->OTR;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	e003      	b.n	8006a18 <HAL_OPAMP_SelfCalibrate+0x7e>
      }
      else
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->LPOTR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3308      	adds	r3, #8
 8006a16:	60fb      	str	r3, [r7, #12]
      }

      /* Enable calibration */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a26:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALSEL);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a36:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0201 	orr.w	r2, r2, #1
 8006a46:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16U;
 8006a48:	2310      	movs	r3, #16
 8006a4a:	61bb      	str	r3, [r7, #24]
      delta = 8U;
 8006a4c:	2308      	movs	r3, #8
 8006a4e:	613b      	str	r3, [r7, #16]

      while (delta != 0U)
 8006a50:	e01d      	b.n	8006a8e <HAL_OPAMP_SelfCalibrate+0xf4>
      {
        /* Set candidate trimming */
        /* OPAMP_POWERMODE_NORMALPOWER */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f023 021f 	bic.w	r2, r3, #31
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 8006a62:	2001      	movs	r0, #1
 8006a64:	f7fc ffaa 	bl	80039bc <HAL_Delay>

        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d004      	beq.n	8006a80 <HAL_OPAMP_SelfCalibrate+0xe6>
        {
          /* OPAMP_CSR_CALOUT is HIGH try higher trimming */
          trimmingvaluen -= delta;
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	e003      	b.n	8006a88 <HAL_OPAMP_SelfCalibrate+0xee>
        }
        else
        {
          /* OPAMP_CSR_CALOUT is LOW try lower trimming */
          trimmingvaluen += delta;
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	4413      	add	r3, r2
 8006a86:	61bb      	str	r3, [r7, #24]
        }
        /* Divide range by 2 to continue dichotomy sweep */
        delta >>= 1U;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	085b      	lsrs	r3, r3, #1
 8006a8c:	613b      	str	r3, [r7, #16]
      while (delta != 0U)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1de      	bne.n	8006a52 <HAL_OPAMP_SelfCalibrate+0xb8>
      }

      /* Still need to check if right calibration is current value or one step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 0 to 1  */
      /* Set candidate trimming */
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f023 021f 	bic.w	r2, r3, #31
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	f7fc ff89 	bl	80039bc <HAL_Delay>

      if ((READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT)) == 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <HAL_OPAMP_SelfCalibrate+0x134>
      {
        /* Trimming value is actually one value more */
        trimmingvaluen++;
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	3301      	adds	r3, #1
 8006abc:	61bb      	str	r3, [r7, #24]
        /* Set right trimming */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f023 021f 	bic.w	r2, r3, #31
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALSEL);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006adc:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16U;
 8006ade:	2310      	movs	r3, #16
 8006ae0:	617b      	str	r3, [r7, #20]
      delta = 8U;
 8006ae2:	2308      	movs	r3, #8
 8006ae4:	613b      	str	r3, [r7, #16]

      while (delta != 0U)
 8006ae6:	e01e      	b.n	8006b26 <HAL_OPAMP_SelfCalibrate+0x18c>
      {
        /* Set candidate trimming */
        /* OPAMP_POWERMODE_NORMALPOWER */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	431a      	orrs	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 8006afa:	2001      	movs	r0, #1
 8006afc:	f7fc ff5e 	bl	80039bc <HAL_Delay>

        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d004      	beq.n	8006b18 <HAL_OPAMP_SelfCalibrate+0x17e>
        {
          /* OPAMP_CSR_CALOUT is HIGH try higher trimming */
          trimmingvaluep += delta;
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	4413      	add	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	e003      	b.n	8006b20 <HAL_OPAMP_SelfCalibrate+0x186>
        }
        else
        {
          /* OPAMP_CSR_CALOUT  is LOW try lower trimming */
          trimmingvaluep -= delta;
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	617b      	str	r3, [r7, #20]
        }

        /* Divide range by 2 to continue dichotomy sweep */
        delta >>= 1U;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	085b      	lsrs	r3, r3, #1
 8006b24:	613b      	str	r3, [r7, #16]
      while (delta != 0U)
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1dd      	bne.n	8006ae8 <HAL_OPAMP_SelfCalibrate+0x14e>
      }

      /* Still need to check if right calibration is current value or one step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      /* Set candidate trimming */
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	021b      	lsls	r3, r3, #8
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 8006b3e:	2001      	movs	r0, #1
 8006b40:	f7fc ff3c 	bl	80039bc <HAL_Delay>

      if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00b      	beq.n	8006b6a <HAL_OPAMP_SelfCalibrate+0x1d0>
      {
        /* Trimming value is actually one value more */
        trimmingvaluep++;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	3301      	adds	r3, #1
 8006b56:	617b      	str	r3, [r7, #20]
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	431a      	orrs	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	601a      	str	r2, [r3, #0]
      }

      /* Disable the OPAMP */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0201 	bic.w	r2, r2, #1
 8006b78:	601a      	str	r2, [r3, #0]

      /* Disable calibration & set normal mode (operating mode) */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b88:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user trimming) results in init structure. */

      /* Set user trimming mode */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b90:	61da      	str	r2, [r3, #28]

      /* Affect calibration parameters depending on mode normal/low power */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d006      	beq.n	8006ba8 <HAL_OPAMP_SelfCalibrate+0x20e>
      {
        /* Write calibration result N */
        hopamp->Init.TrimmingValueN = trimmingvaluen;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	625a      	str	r2, [r3, #36]	; 0x24
        /* Write calibration result P */
        hopamp->Init.TrimmingValueP = trimmingvaluep;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	621a      	str	r2, [r3, #32]
 8006ba6:	e005      	b.n	8006bb4 <HAL_OPAMP_SelfCalibrate+0x21a>
      }
      else
      {
        /* Write calibration result N */
        hopamp->Init.TrimmingValueNLowPower = trimmingvaluen;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	62da      	str	r2, [r3, #44]	; 0x2c
        /* Write calibration result P */
        hopamp->Init.TrimmingValuePLowPower = trimmingvaluep;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	629a      	str	r2, [r3, #40]	; 0x28
      }

    /* Restore OPAMP mode after calibration */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_OPAMODE, opampmode);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f023 010c 	bic.w	r1, r3, #12
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	e001      	b.n	8006bce <HAL_OPAMP_SelfCalibrate+0x234>
    }
    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8006bce:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3720      	adds	r7, #32
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006bdc:	4b04      	ldr	r3, [pc, #16]	; (8006bf0 <HAL_PWREx_GetVoltageRange+0x18>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	40007000 	.word	0x40007000

08006bf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c02:	d130      	bne.n	8006c66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c04:	4b23      	ldr	r3, [pc, #140]	; (8006c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c10:	d038      	beq.n	8006c84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c12:	4b20      	ldr	r3, [pc, #128]	; (8006c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c1a:	4a1e      	ldr	r2, [pc, #120]	; (8006c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c22:	4b1d      	ldr	r3, [pc, #116]	; (8006c98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2232      	movs	r2, #50	; 0x32
 8006c28:	fb02 f303 	mul.w	r3, r2, r3
 8006c2c:	4a1b      	ldr	r2, [pc, #108]	; (8006c9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c32:	0c9b      	lsrs	r3, r3, #18
 8006c34:	3301      	adds	r3, #1
 8006c36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c38:	e002      	b.n	8006c40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c40:	4b14      	ldr	r3, [pc, #80]	; (8006c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c4c:	d102      	bne.n	8006c54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1f2      	bne.n	8006c3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c54:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c60:	d110      	bne.n	8006c84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e00f      	b.n	8006c86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c66:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c72:	d007      	beq.n	8006c84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006c74:	4b07      	ldr	r3, [pc, #28]	; (8006c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c7c:	4a05      	ldr	r2, [pc, #20]	; (8006c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	40007000 	.word	0x40007000
 8006c98:	20000018 	.word	0x20000018
 8006c9c:	431bde83 	.word	0x431bde83

08006ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e3fe      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cb2:	4ba1      	ldr	r3, [pc, #644]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 030c 	and.w	r3, r3, #12
 8006cba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cbc:	4b9e      	ldr	r3, [pc, #632]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0303 	and.w	r3, r3, #3
 8006cc4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0310 	and.w	r3, r3, #16
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 80e4 	beq.w	8006e9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d007      	beq.n	8006cea <HAL_RCC_OscConfig+0x4a>
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	2b0c      	cmp	r3, #12
 8006cde:	f040 808b 	bne.w	8006df8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	f040 8087 	bne.w	8006df8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006cea:	4b93      	ldr	r3, [pc, #588]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <HAL_RCC_OscConfig+0x62>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e3d6      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1a      	ldr	r2, [r3, #32]
 8006d06:	4b8c      	ldr	r3, [pc, #560]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0308 	and.w	r3, r3, #8
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <HAL_RCC_OscConfig+0x7c>
 8006d12:	4b89      	ldr	r3, [pc, #548]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d1a:	e005      	b.n	8006d28 <HAL_RCC_OscConfig+0x88>
 8006d1c:	4b86      	ldr	r3, [pc, #536]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d22:	091b      	lsrs	r3, r3, #4
 8006d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d223      	bcs.n	8006d74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fd53 	bl	80077dc <RCC_SetFlashLatencyFromMSIRange>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e3b7      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d40:	4b7d      	ldr	r3, [pc, #500]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a7c      	ldr	r2, [pc, #496]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006d46:	f043 0308 	orr.w	r3, r3, #8
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	4b7a      	ldr	r3, [pc, #488]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	4977      	ldr	r1, [pc, #476]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d5e:	4b76      	ldr	r3, [pc, #472]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	021b      	lsls	r3, r3, #8
 8006d6c:	4972      	ldr	r1, [pc, #456]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	604b      	str	r3, [r1, #4]
 8006d72:	e025      	b.n	8006dc0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d74:	4b70      	ldr	r3, [pc, #448]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a6f      	ldr	r2, [pc, #444]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006d7a:	f043 0308 	orr.w	r3, r3, #8
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	4b6d      	ldr	r3, [pc, #436]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	496a      	ldr	r1, [pc, #424]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d92:	4b69      	ldr	r3, [pc, #420]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	021b      	lsls	r3, r3, #8
 8006da0:	4965      	ldr	r1, [pc, #404]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d109      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fd13 	bl	80077dc <RCC_SetFlashLatencyFromMSIRange>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e377      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006dc0:	f000 fc80 	bl	80076c4 <HAL_RCC_GetSysClockFreq>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	4b5c      	ldr	r3, [pc, #368]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	091b      	lsrs	r3, r3, #4
 8006dcc:	f003 030f 	and.w	r3, r3, #15
 8006dd0:	495a      	ldr	r1, [pc, #360]	; (8006f3c <HAL_RCC_OscConfig+0x29c>)
 8006dd2:	5ccb      	ldrb	r3, [r1, r3]
 8006dd4:	f003 031f 	and.w	r3, r3, #31
 8006dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ddc:	4a58      	ldr	r2, [pc, #352]	; (8006f40 <HAL_RCC_OscConfig+0x2a0>)
 8006dde:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006de0:	4b58      	ldr	r3, [pc, #352]	; (8006f44 <HAL_RCC_OscConfig+0x2a4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fc fd8d 	bl	8003904 <HAL_InitTick>
 8006dea:	4603      	mov	r3, r0
 8006dec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d052      	beq.n	8006e9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	e35b      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d032      	beq.n	8006e66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006e00:	4b4d      	ldr	r3, [pc, #308]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a4c      	ldr	r2, [pc, #304]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e0c:	f7fc fdca 	bl	80039a4 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e14:	f7fc fdc6 	bl	80039a4 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e344      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e26:	4b44      	ldr	r3, [pc, #272]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0f0      	beq.n	8006e14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e32:	4b41      	ldr	r3, [pc, #260]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a40      	ldr	r2, [pc, #256]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006e38:	f043 0308 	orr.w	r3, r3, #8
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	4b3e      	ldr	r3, [pc, #248]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	493b      	ldr	r1, [pc, #236]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e50:	4b39      	ldr	r3, [pc, #228]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	4936      	ldr	r1, [pc, #216]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	604b      	str	r3, [r1, #4]
 8006e64:	e01a      	b.n	8006e9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006e66:	4b34      	ldr	r3, [pc, #208]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a33      	ldr	r2, [pc, #204]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006e6c:	f023 0301 	bic.w	r3, r3, #1
 8006e70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e72:	f7fc fd97 	bl	80039a4 <HAL_GetTick>
 8006e76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e78:	e008      	b.n	8006e8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e7a:	f7fc fd93 	bl	80039a4 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e311      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e8c:	4b2a      	ldr	r3, [pc, #168]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1f0      	bne.n	8006e7a <HAL_RCC_OscConfig+0x1da>
 8006e98:	e000      	b.n	8006e9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d074      	beq.n	8006f92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b08      	cmp	r3, #8
 8006eac:	d005      	beq.n	8006eba <HAL_RCC_OscConfig+0x21a>
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	2b0c      	cmp	r3, #12
 8006eb2:	d10e      	bne.n	8006ed2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d10b      	bne.n	8006ed2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eba:	4b1f      	ldr	r3, [pc, #124]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d064      	beq.n	8006f90 <HAL_RCC_OscConfig+0x2f0>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d160      	bne.n	8006f90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e2ee      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eda:	d106      	bne.n	8006eea <HAL_RCC_OscConfig+0x24a>
 8006edc:	4b16      	ldr	r3, [pc, #88]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a15      	ldr	r2, [pc, #84]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	e01d      	b.n	8006f26 <HAL_RCC_OscConfig+0x286>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ef2:	d10c      	bne.n	8006f0e <HAL_RCC_OscConfig+0x26e>
 8006ef4:	4b10      	ldr	r3, [pc, #64]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a0f      	ldr	r2, [pc, #60]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a0c      	ldr	r2, [pc, #48]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	e00b      	b.n	8006f26 <HAL_RCC_OscConfig+0x286>
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a09      	ldr	r2, [pc, #36]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a06      	ldr	r2, [pc, #24]	; (8006f38 <HAL_RCC_OscConfig+0x298>)
 8006f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d01c      	beq.n	8006f68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2e:	f7fc fd39 	bl	80039a4 <HAL_GetTick>
 8006f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f34:	e011      	b.n	8006f5a <HAL_RCC_OscConfig+0x2ba>
 8006f36:	bf00      	nop
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	0800d824 	.word	0x0800d824
 8006f40:	20000018 	.word	0x20000018
 8006f44:	2000002c 	.word	0x2000002c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f48:	f7fc fd2c 	bl	80039a4 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b64      	cmp	r3, #100	; 0x64
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e2aa      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f5a:	4baf      	ldr	r3, [pc, #700]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0f0      	beq.n	8006f48 <HAL_RCC_OscConfig+0x2a8>
 8006f66:	e014      	b.n	8006f92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f68:	f7fc fd1c 	bl	80039a4 <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f70:	f7fc fd18 	bl	80039a4 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b64      	cmp	r3, #100	; 0x64
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e296      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f82:	4ba5      	ldr	r3, [pc, #660]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1f0      	bne.n	8006f70 <HAL_RCC_OscConfig+0x2d0>
 8006f8e:	e000      	b.n	8006f92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d060      	beq.n	8007060 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d005      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x310>
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	2b0c      	cmp	r3, #12
 8006fa8:	d119      	bne.n	8006fde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d116      	bne.n	8006fde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fb0:	4b99      	ldr	r3, [pc, #612]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x328>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e273      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fc8:	4b93      	ldr	r3, [pc, #588]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	061b      	lsls	r3, r3, #24
 8006fd6:	4990      	ldr	r1, [pc, #576]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fdc:	e040      	b.n	8007060 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d023      	beq.n	800702e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fe6:	4b8c      	ldr	r3, [pc, #560]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a8b      	ldr	r2, [pc, #556]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8006fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff2:	f7fc fcd7 	bl	80039a4 <HAL_GetTick>
 8006ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ff8:	e008      	b.n	800700c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ffa:	f7fc fcd3 	bl	80039a4 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d901      	bls.n	800700c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e251      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800700c:	4b82      	ldr	r3, [pc, #520]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007014:	2b00      	cmp	r3, #0
 8007016:	d0f0      	beq.n	8006ffa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007018:	4b7f      	ldr	r3, [pc, #508]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	061b      	lsls	r3, r3, #24
 8007026:	497c      	ldr	r1, [pc, #496]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8007028:	4313      	orrs	r3, r2
 800702a:	604b      	str	r3, [r1, #4]
 800702c:	e018      	b.n	8007060 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800702e:	4b7a      	ldr	r3, [pc, #488]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a79      	ldr	r2, [pc, #484]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8007034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703a:	f7fc fcb3 	bl	80039a4 <HAL_GetTick>
 800703e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007040:	e008      	b.n	8007054 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007042:	f7fc fcaf 	bl	80039a4 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b02      	cmp	r3, #2
 800704e:	d901      	bls.n	8007054 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e22d      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007054:	4b70      	ldr	r3, [pc, #448]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1f0      	bne.n	8007042 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d03c      	beq.n	80070e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01c      	beq.n	80070ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007074:	4b68      	ldr	r3, [pc, #416]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8007076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800707a:	4a67      	ldr	r2, [pc, #412]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 800707c:	f043 0301 	orr.w	r3, r3, #1
 8007080:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007084:	f7fc fc8e 	bl	80039a4 <HAL_GetTick>
 8007088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800708a:	e008      	b.n	800709e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800708c:	f7fc fc8a 	bl	80039a4 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e208      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800709e:	4b5e      	ldr	r3, [pc, #376]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 80070a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0ef      	beq.n	800708c <HAL_RCC_OscConfig+0x3ec>
 80070ac:	e01b      	b.n	80070e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070ae:	4b5a      	ldr	r3, [pc, #360]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 80070b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070b4:	4a58      	ldr	r2, [pc, #352]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 80070b6:	f023 0301 	bic.w	r3, r3, #1
 80070ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070be:	f7fc fc71 	bl	80039a4 <HAL_GetTick>
 80070c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070c4:	e008      	b.n	80070d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070c6:	f7fc fc6d 	bl	80039a4 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e1eb      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070d8:	4b4f      	ldr	r3, [pc, #316]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 80070da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1ef      	bne.n	80070c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0304 	and.w	r3, r3, #4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 80a6 	beq.w	8007240 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070f4:	2300      	movs	r3, #0
 80070f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80070f8:	4b47      	ldr	r3, [pc, #284]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 80070fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10d      	bne.n	8007120 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007104:	4b44      	ldr	r3, [pc, #272]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8007106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007108:	4a43      	ldr	r2, [pc, #268]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 800710a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800710e:	6593      	str	r3, [r2, #88]	; 0x58
 8007110:	4b41      	ldr	r3, [pc, #260]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8007112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007118:	60bb      	str	r3, [r7, #8]
 800711a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800711c:	2301      	movs	r3, #1
 800711e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007120:	4b3e      	ldr	r3, [pc, #248]	; (800721c <HAL_RCC_OscConfig+0x57c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007128:	2b00      	cmp	r3, #0
 800712a:	d118      	bne.n	800715e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800712c:	4b3b      	ldr	r3, [pc, #236]	; (800721c <HAL_RCC_OscConfig+0x57c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a3a      	ldr	r2, [pc, #232]	; (800721c <HAL_RCC_OscConfig+0x57c>)
 8007132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007136:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007138:	f7fc fc34 	bl	80039a4 <HAL_GetTick>
 800713c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007140:	f7fc fc30 	bl	80039a4 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e1ae      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007152:	4b32      	ldr	r3, [pc, #200]	; (800721c <HAL_RCC_OscConfig+0x57c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0f0      	beq.n	8007140 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d108      	bne.n	8007178 <HAL_RCC_OscConfig+0x4d8>
 8007166:	4b2c      	ldr	r3, [pc, #176]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8007168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716c:	4a2a      	ldr	r2, [pc, #168]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 800716e:	f043 0301 	orr.w	r3, r3, #1
 8007172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007176:	e024      	b.n	80071c2 <HAL_RCC_OscConfig+0x522>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	2b05      	cmp	r3, #5
 800717e:	d110      	bne.n	80071a2 <HAL_RCC_OscConfig+0x502>
 8007180:	4b25      	ldr	r3, [pc, #148]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8007182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007186:	4a24      	ldr	r2, [pc, #144]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8007188:	f043 0304 	orr.w	r3, r3, #4
 800718c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007190:	4b21      	ldr	r3, [pc, #132]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007196:	4a20      	ldr	r2, [pc, #128]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 8007198:	f043 0301 	orr.w	r3, r3, #1
 800719c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071a0:	e00f      	b.n	80071c2 <HAL_RCC_OscConfig+0x522>
 80071a2:	4b1d      	ldr	r3, [pc, #116]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 80071a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a8:	4a1b      	ldr	r2, [pc, #108]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 80071aa:	f023 0301 	bic.w	r3, r3, #1
 80071ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071b2:	4b19      	ldr	r3, [pc, #100]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 80071b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b8:	4a17      	ldr	r2, [pc, #92]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 80071ba:	f023 0304 	bic.w	r3, r3, #4
 80071be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d016      	beq.n	80071f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ca:	f7fc fbeb 	bl	80039a4 <HAL_GetTick>
 80071ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071d0:	e00a      	b.n	80071e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071d2:	f7fc fbe7 	bl	80039a4 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d901      	bls.n	80071e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e163      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071e8:	4b0b      	ldr	r3, [pc, #44]	; (8007218 <HAL_RCC_OscConfig+0x578>)
 80071ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d0ed      	beq.n	80071d2 <HAL_RCC_OscConfig+0x532>
 80071f6:	e01a      	b.n	800722e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f8:	f7fc fbd4 	bl	80039a4 <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071fe:	e00f      	b.n	8007220 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007200:	f7fc fbd0 	bl	80039a4 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	f241 3288 	movw	r2, #5000	; 0x1388
 800720e:	4293      	cmp	r3, r2
 8007210:	d906      	bls.n	8007220 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e14c      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
 8007216:	bf00      	nop
 8007218:	40021000 	.word	0x40021000
 800721c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007220:	4ba5      	ldr	r3, [pc, #660]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e8      	bne.n	8007200 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800722e:	7ffb      	ldrb	r3, [r7, #31]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d105      	bne.n	8007240 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007234:	4ba0      	ldr	r3, [pc, #640]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007238:	4a9f      	ldr	r2, [pc, #636]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 800723a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800723e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d03c      	beq.n	80072c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	d01c      	beq.n	800728e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007254:	4b98      	ldr	r3, [pc, #608]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007256:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800725a:	4a97      	ldr	r2, [pc, #604]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 800725c:	f043 0301 	orr.w	r3, r3, #1
 8007260:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007264:	f7fc fb9e 	bl	80039a4 <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800726c:	f7fc fb9a 	bl	80039a4 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e118      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800727e:	4b8e      	ldr	r3, [pc, #568]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0ef      	beq.n	800726c <HAL_RCC_OscConfig+0x5cc>
 800728c:	e01b      	b.n	80072c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800728e:	4b8a      	ldr	r3, [pc, #552]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007294:	4a88      	ldr	r2, [pc, #544]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729e:	f7fc fb81 	bl	80039a4 <HAL_GetTick>
 80072a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80072a4:	e008      	b.n	80072b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072a6:	f7fc fb7d 	bl	80039a4 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e0fb      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80072b8:	4b7f      	ldr	r3, [pc, #508]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 80072ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1ef      	bne.n	80072a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 80ef 	beq.w	80074ae <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	f040 80c5 	bne.w	8007464 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80072da:	4b77      	ldr	r3, [pc, #476]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f003 0203 	and.w	r2, r3, #3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d12c      	bne.n	8007348 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f8:	3b01      	subs	r3, #1
 80072fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d123      	bne.n	8007348 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800730c:	429a      	cmp	r2, r3
 800730e:	d11b      	bne.n	8007348 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800731c:	429a      	cmp	r2, r3
 800731e:	d113      	bne.n	8007348 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732a:	085b      	lsrs	r3, r3, #1
 800732c:	3b01      	subs	r3, #1
 800732e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007330:	429a      	cmp	r2, r3
 8007332:	d109      	bne.n	8007348 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	085b      	lsrs	r3, r3, #1
 8007340:	3b01      	subs	r3, #1
 8007342:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007344:	429a      	cmp	r2, r3
 8007346:	d067      	beq.n	8007418 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	2b0c      	cmp	r3, #12
 800734c:	d062      	beq.n	8007414 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800734e:	4b5a      	ldr	r3, [pc, #360]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e0a8      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800735e:	4b56      	ldr	r3, [pc, #344]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a55      	ldr	r2, [pc, #340]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007364:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007368:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800736a:	f7fc fb1b 	bl	80039a4 <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007370:	e008      	b.n	8007384 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007372:	f7fc fb17 	bl	80039a4 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d901      	bls.n	8007384 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e095      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007384:	4b4c      	ldr	r3, [pc, #304]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1f0      	bne.n	8007372 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007390:	4b49      	ldr	r3, [pc, #292]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	4b49      	ldr	r3, [pc, #292]	; (80074bc <HAL_RCC_OscConfig+0x81c>)
 8007396:	4013      	ands	r3, r2
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80073a0:	3a01      	subs	r2, #1
 80073a2:	0112      	lsls	r2, r2, #4
 80073a4:	4311      	orrs	r1, r2
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073aa:	0212      	lsls	r2, r2, #8
 80073ac:	4311      	orrs	r1, r2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80073b2:	0852      	lsrs	r2, r2, #1
 80073b4:	3a01      	subs	r2, #1
 80073b6:	0552      	lsls	r2, r2, #21
 80073b8:	4311      	orrs	r1, r2
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80073be:	0852      	lsrs	r2, r2, #1
 80073c0:	3a01      	subs	r2, #1
 80073c2:	0652      	lsls	r2, r2, #25
 80073c4:	4311      	orrs	r1, r2
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073ca:	06d2      	lsls	r2, r2, #27
 80073cc:	430a      	orrs	r2, r1
 80073ce:	493a      	ldr	r1, [pc, #232]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80073d4:	4b38      	ldr	r3, [pc, #224]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a37      	ldr	r2, [pc, #220]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 80073da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073e0:	4b35      	ldr	r3, [pc, #212]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	4a34      	ldr	r2, [pc, #208]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 80073e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80073ec:	f7fc fada 	bl	80039a4 <HAL_GetTick>
 80073f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f4:	f7fc fad6 	bl	80039a4 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e054      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007406:	4b2c      	ldr	r3, [pc, #176]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0f0      	beq.n	80073f4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007412:	e04c      	b.n	80074ae <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e04b      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007418:	4b27      	ldr	r3, [pc, #156]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d144      	bne.n	80074ae <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007424:	4b24      	ldr	r3, [pc, #144]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a23      	ldr	r2, [pc, #140]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 800742a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800742e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007430:	4b21      	ldr	r3, [pc, #132]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	4a20      	ldr	r2, [pc, #128]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800743a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800743c:	f7fc fab2 	bl	80039a4 <HAL_GetTick>
 8007440:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007444:	f7fc faae 	bl	80039a4 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e02c      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007456:	4b18      	ldr	r3, [pc, #96]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0f0      	beq.n	8007444 <HAL_RCC_OscConfig+0x7a4>
 8007462:	e024      	b.n	80074ae <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	2b0c      	cmp	r3, #12
 8007468:	d01f      	beq.n	80074aa <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800746a:	4b13      	ldr	r3, [pc, #76]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a12      	ldr	r2, [pc, #72]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007476:	f7fc fa95 	bl	80039a4 <HAL_GetTick>
 800747a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800747c:	e008      	b.n	8007490 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800747e:	f7fc fa91 	bl	80039a4 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d901      	bls.n	8007490 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e00f      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007490:	4b09      	ldr	r3, [pc, #36]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1f0      	bne.n	800747e <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	4905      	ldr	r1, [pc, #20]	; (80074b8 <HAL_RCC_OscConfig+0x818>)
 80074a2:	4b07      	ldr	r3, [pc, #28]	; (80074c0 <HAL_RCC_OscConfig+0x820>)
 80074a4:	4013      	ands	r3, r2
 80074a6:	60cb      	str	r3, [r1, #12]
 80074a8:	e001      	b.n	80074ae <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e000      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3720      	adds	r7, #32
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	40021000 	.word	0x40021000
 80074bc:	019d808c 	.word	0x019d808c
 80074c0:	feeefffc 	.word	0xfeeefffc

080074c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e0e7      	b.n	80076a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074d8:	4b75      	ldr	r3, [pc, #468]	; (80076b0 <HAL_RCC_ClockConfig+0x1ec>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d910      	bls.n	8007508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074e6:	4b72      	ldr	r3, [pc, #456]	; (80076b0 <HAL_RCC_ClockConfig+0x1ec>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f023 0207 	bic.w	r2, r3, #7
 80074ee:	4970      	ldr	r1, [pc, #448]	; (80076b0 <HAL_RCC_ClockConfig+0x1ec>)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074f6:	4b6e      	ldr	r3, [pc, #440]	; (80076b0 <HAL_RCC_ClockConfig+0x1ec>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	429a      	cmp	r2, r3
 8007502:	d001      	beq.n	8007508 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e0cf      	b.n	80076a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	2b00      	cmp	r3, #0
 8007512:	d010      	beq.n	8007536 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	4b66      	ldr	r3, [pc, #408]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007520:	429a      	cmp	r2, r3
 8007522:	d908      	bls.n	8007536 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007524:	4b63      	ldr	r3, [pc, #396]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	4960      	ldr	r1, [pc, #384]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007532:	4313      	orrs	r3, r2
 8007534:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d04c      	beq.n	80075dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2b03      	cmp	r3, #3
 8007548:	d107      	bne.n	800755a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800754a:	4b5a      	ldr	r3, [pc, #360]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d121      	bne.n	800759a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e0a6      	b.n	80076a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	2b02      	cmp	r3, #2
 8007560:	d107      	bne.n	8007572 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007562:	4b54      	ldr	r3, [pc, #336]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d115      	bne.n	800759a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e09a      	b.n	80076a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d107      	bne.n	800758a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800757a:	4b4e      	ldr	r3, [pc, #312]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d109      	bne.n	800759a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e08e      	b.n	80076a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800758a:	4b4a      	ldr	r3, [pc, #296]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e086      	b.n	80076a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800759a:	4b46      	ldr	r3, [pc, #280]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f023 0203 	bic.w	r2, r3, #3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	4943      	ldr	r1, [pc, #268]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ac:	f7fc f9fa 	bl	80039a4 <HAL_GetTick>
 80075b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075b2:	e00a      	b.n	80075ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075b4:	f7fc f9f6 	bl	80039a4 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	f241 3288 	movw	r2, #5000	; 0x1388
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d901      	bls.n	80075ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e06e      	b.n	80076a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ca:	4b3a      	ldr	r3, [pc, #232]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f003 020c 	and.w	r2, r3, #12
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	429a      	cmp	r2, r3
 80075da:	d1eb      	bne.n	80075b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d010      	beq.n	800760a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	4b31      	ldr	r3, [pc, #196]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d208      	bcs.n	800760a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075f8:	4b2e      	ldr	r3, [pc, #184]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	492b      	ldr	r1, [pc, #172]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007606:	4313      	orrs	r3, r2
 8007608:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800760a:	4b29      	ldr	r3, [pc, #164]	; (80076b0 <HAL_RCC_ClockConfig+0x1ec>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0307 	and.w	r3, r3, #7
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	429a      	cmp	r2, r3
 8007616:	d210      	bcs.n	800763a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007618:	4b25      	ldr	r3, [pc, #148]	; (80076b0 <HAL_RCC_ClockConfig+0x1ec>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f023 0207 	bic.w	r2, r3, #7
 8007620:	4923      	ldr	r1, [pc, #140]	; (80076b0 <HAL_RCC_ClockConfig+0x1ec>)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	4313      	orrs	r3, r2
 8007626:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007628:	4b21      	ldr	r3, [pc, #132]	; (80076b0 <HAL_RCC_ClockConfig+0x1ec>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0307 	and.w	r3, r3, #7
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d001      	beq.n	800763a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e036      	b.n	80076a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0304 	and.w	r3, r3, #4
 8007642:	2b00      	cmp	r3, #0
 8007644:	d008      	beq.n	8007658 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007646:	4b1b      	ldr	r3, [pc, #108]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	4918      	ldr	r1, [pc, #96]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007654:	4313      	orrs	r3, r2
 8007656:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d009      	beq.n	8007678 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007664:	4b13      	ldr	r3, [pc, #76]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	4910      	ldr	r1, [pc, #64]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007674:	4313      	orrs	r3, r2
 8007676:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007678:	f000 f824 	bl	80076c4 <HAL_RCC_GetSysClockFreq>
 800767c:	4602      	mov	r2, r0
 800767e:	4b0d      	ldr	r3, [pc, #52]	; (80076b4 <HAL_RCC_ClockConfig+0x1f0>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	091b      	lsrs	r3, r3, #4
 8007684:	f003 030f 	and.w	r3, r3, #15
 8007688:	490b      	ldr	r1, [pc, #44]	; (80076b8 <HAL_RCC_ClockConfig+0x1f4>)
 800768a:	5ccb      	ldrb	r3, [r1, r3]
 800768c:	f003 031f 	and.w	r3, r3, #31
 8007690:	fa22 f303 	lsr.w	r3, r2, r3
 8007694:	4a09      	ldr	r2, [pc, #36]	; (80076bc <HAL_RCC_ClockConfig+0x1f8>)
 8007696:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007698:	4b09      	ldr	r3, [pc, #36]	; (80076c0 <HAL_RCC_ClockConfig+0x1fc>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4618      	mov	r0, r3
 800769e:	f7fc f931 	bl	8003904 <HAL_InitTick>
 80076a2:	4603      	mov	r3, r0
 80076a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80076a6:	7afb      	ldrb	r3, [r7, #11]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	40022000 	.word	0x40022000
 80076b4:	40021000 	.word	0x40021000
 80076b8:	0800d824 	.word	0x0800d824
 80076bc:	20000018 	.word	0x20000018
 80076c0:	2000002c 	.word	0x2000002c

080076c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b089      	sub	sp, #36	; 0x24
 80076c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61fb      	str	r3, [r7, #28]
 80076ce:	2300      	movs	r3, #0
 80076d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076d2:	4b3e      	ldr	r3, [pc, #248]	; (80077cc <HAL_RCC_GetSysClockFreq+0x108>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 030c 	and.w	r3, r3, #12
 80076da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076dc:	4b3b      	ldr	r3, [pc, #236]	; (80077cc <HAL_RCC_GetSysClockFreq+0x108>)
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f003 0303 	and.w	r3, r3, #3
 80076e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <HAL_RCC_GetSysClockFreq+0x34>
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	2b0c      	cmp	r3, #12
 80076f0:	d121      	bne.n	8007736 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d11e      	bne.n	8007736 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80076f8:	4b34      	ldr	r3, [pc, #208]	; (80077cc <HAL_RCC_GetSysClockFreq+0x108>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0308 	and.w	r3, r3, #8
 8007700:	2b00      	cmp	r3, #0
 8007702:	d107      	bne.n	8007714 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007704:	4b31      	ldr	r3, [pc, #196]	; (80077cc <HAL_RCC_GetSysClockFreq+0x108>)
 8007706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800770a:	0a1b      	lsrs	r3, r3, #8
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	61fb      	str	r3, [r7, #28]
 8007712:	e005      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007714:	4b2d      	ldr	r3, [pc, #180]	; (80077cc <HAL_RCC_GetSysClockFreq+0x108>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	091b      	lsrs	r3, r3, #4
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007720:	4a2b      	ldr	r2, [pc, #172]	; (80077d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007728:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10d      	bne.n	800774c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007734:	e00a      	b.n	800774c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	2b04      	cmp	r3, #4
 800773a:	d102      	bne.n	8007742 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800773c:	4b25      	ldr	r3, [pc, #148]	; (80077d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800773e:	61bb      	str	r3, [r7, #24]
 8007740:	e004      	b.n	800774c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	2b08      	cmp	r3, #8
 8007746:	d101      	bne.n	800774c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007748:	4b23      	ldr	r3, [pc, #140]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800774a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2b0c      	cmp	r3, #12
 8007750:	d134      	bne.n	80077bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007752:	4b1e      	ldr	r3, [pc, #120]	; (80077cc <HAL_RCC_GetSysClockFreq+0x108>)
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2b02      	cmp	r3, #2
 8007760:	d003      	beq.n	800776a <HAL_RCC_GetSysClockFreq+0xa6>
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2b03      	cmp	r3, #3
 8007766:	d003      	beq.n	8007770 <HAL_RCC_GetSysClockFreq+0xac>
 8007768:	e005      	b.n	8007776 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800776a:	4b1a      	ldr	r3, [pc, #104]	; (80077d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800776c:	617b      	str	r3, [r7, #20]
      break;
 800776e:	e005      	b.n	800777c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007770:	4b19      	ldr	r3, [pc, #100]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007772:	617b      	str	r3, [r7, #20]
      break;
 8007774:	e002      	b.n	800777c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	617b      	str	r3, [r7, #20]
      break;
 800777a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800777c:	4b13      	ldr	r3, [pc, #76]	; (80077cc <HAL_RCC_GetSysClockFreq+0x108>)
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	091b      	lsrs	r3, r3, #4
 8007782:	f003 0307 	and.w	r3, r3, #7
 8007786:	3301      	adds	r3, #1
 8007788:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800778a:	4b10      	ldr	r3, [pc, #64]	; (80077cc <HAL_RCC_GetSysClockFreq+0x108>)
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	0a1b      	lsrs	r3, r3, #8
 8007790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	fb02 f203 	mul.w	r2, r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077a2:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <HAL_RCC_GetSysClockFreq+0x108>)
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	0e5b      	lsrs	r3, r3, #25
 80077a8:	f003 0303 	and.w	r3, r3, #3
 80077ac:	3301      	adds	r3, #1
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80077bc:	69bb      	ldr	r3, [r7, #24]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3724      	adds	r7, #36	; 0x24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40021000 	.word	0x40021000
 80077d0:	0800d834 	.word	0x0800d834
 80077d4:	00f42400 	.word	0x00f42400
 80077d8:	016e3600 	.word	0x016e3600

080077dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80077e4:	2300      	movs	r3, #0
 80077e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80077e8:	4b2a      	ldr	r3, [pc, #168]	; (8007894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80077ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80077f4:	f7ff f9f0 	bl	8006bd8 <HAL_PWREx_GetVoltageRange>
 80077f8:	6178      	str	r0, [r7, #20]
 80077fa:	e014      	b.n	8007826 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80077fc:	4b25      	ldr	r3, [pc, #148]	; (8007894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80077fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007800:	4a24      	ldr	r2, [pc, #144]	; (8007894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007806:	6593      	str	r3, [r2, #88]	; 0x58
 8007808:	4b22      	ldr	r3, [pc, #136]	; (8007894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800780a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007814:	f7ff f9e0 	bl	8006bd8 <HAL_PWREx_GetVoltageRange>
 8007818:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800781a:	4b1e      	ldr	r3, [pc, #120]	; (8007894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800781c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781e:	4a1d      	ldr	r2, [pc, #116]	; (8007894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007824:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800782c:	d10b      	bne.n	8007846 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b80      	cmp	r3, #128	; 0x80
 8007832:	d919      	bls.n	8007868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2ba0      	cmp	r3, #160	; 0xa0
 8007838:	d902      	bls.n	8007840 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800783a:	2302      	movs	r3, #2
 800783c:	613b      	str	r3, [r7, #16]
 800783e:	e013      	b.n	8007868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007840:	2301      	movs	r3, #1
 8007842:	613b      	str	r3, [r7, #16]
 8007844:	e010      	b.n	8007868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b80      	cmp	r3, #128	; 0x80
 800784a:	d902      	bls.n	8007852 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800784c:	2303      	movs	r3, #3
 800784e:	613b      	str	r3, [r7, #16]
 8007850:	e00a      	b.n	8007868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b80      	cmp	r3, #128	; 0x80
 8007856:	d102      	bne.n	800785e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007858:	2302      	movs	r3, #2
 800785a:	613b      	str	r3, [r7, #16]
 800785c:	e004      	b.n	8007868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b70      	cmp	r3, #112	; 0x70
 8007862:	d101      	bne.n	8007868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007864:	2301      	movs	r3, #1
 8007866:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007868:	4b0b      	ldr	r3, [pc, #44]	; (8007898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f023 0207 	bic.w	r2, r3, #7
 8007870:	4909      	ldr	r1, [pc, #36]	; (8007898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007878:	4b07      	ldr	r3, [pc, #28]	; (8007898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0307 	and.w	r3, r3, #7
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	429a      	cmp	r2, r3
 8007884:	d001      	beq.n	800788a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e000      	b.n	800788c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	40021000 	.word	0x40021000
 8007898:	40022000 	.word	0x40022000

0800789c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078a4:	2300      	movs	r3, #0
 80078a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078a8:	2300      	movs	r3, #0
 80078aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d031      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80078c0:	d01a      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80078c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80078c6:	d814      	bhi.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d009      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80078cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078d0:	d10f      	bne.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80078d2:	4b5d      	ldr	r3, [pc, #372]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	4a5c      	ldr	r2, [pc, #368]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80078d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80078de:	e00c      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3304      	adds	r3, #4
 80078e4:	2100      	movs	r1, #0
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 f9f0 	bl	8007ccc <RCCEx_PLLSAI1_Config>
 80078ec:	4603      	mov	r3, r0
 80078ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80078f0:	e003      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	74fb      	strb	r3, [r7, #19]
      break;
 80078f6:	e000      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80078f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078fa:	7cfb      	ldrb	r3, [r7, #19]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10b      	bne.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007900:	4b51      	ldr	r3, [pc, #324]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007906:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790e:	494e      	ldr	r1, [pc, #312]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007910:	4313      	orrs	r3, r2
 8007912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007916:	e001      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007918:	7cfb      	ldrb	r3, [r7, #19]
 800791a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 809e 	beq.w	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800792a:	2300      	movs	r3, #0
 800792c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800792e:	4b46      	ldr	r3, [pc, #280]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800793e:	2300      	movs	r3, #0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00d      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007944:	4b40      	ldr	r3, [pc, #256]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007948:	4a3f      	ldr	r2, [pc, #252]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800794a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800794e:	6593      	str	r3, [r2, #88]	; 0x58
 8007950:	4b3d      	ldr	r3, [pc, #244]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007958:	60bb      	str	r3, [r7, #8]
 800795a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800795c:	2301      	movs	r3, #1
 800795e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007960:	4b3a      	ldr	r3, [pc, #232]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a39      	ldr	r2, [pc, #228]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800796a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800796c:	f7fc f81a 	bl	80039a4 <HAL_GetTick>
 8007970:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007972:	e009      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007974:	f7fc f816 	bl	80039a4 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	2b02      	cmp	r3, #2
 8007980:	d902      	bls.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	74fb      	strb	r3, [r7, #19]
        break;
 8007986:	e005      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007988:	4b30      	ldr	r3, [pc, #192]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0ef      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007994:	7cfb      	ldrb	r3, [r7, #19]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d15a      	bne.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800799a:	4b2b      	ldr	r3, [pc, #172]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800799c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01e      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d019      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079b6:	4b24      	ldr	r3, [pc, #144]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079c2:	4b21      	ldr	r3, [pc, #132]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c8:	4a1f      	ldr	r2, [pc, #124]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079d2:	4b1d      	ldr	r3, [pc, #116]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d8:	4a1b      	ldr	r2, [pc, #108]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80079e2:	4a19      	ldr	r2, [pc, #100]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d016      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f4:	f7fb ffd6 	bl	80039a4 <HAL_GetTick>
 80079f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079fa:	e00b      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079fc:	f7fb ffd2 	bl	80039a4 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d902      	bls.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	74fb      	strb	r3, [r7, #19]
            break;
 8007a12:	e006      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a14:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0ec      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007a22:	7cfb      	ldrb	r3, [r7, #19]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10b      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a28:	4b07      	ldr	r3, [pc, #28]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a36:	4904      	ldr	r1, [pc, #16]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007a3e:	e009      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a40:	7cfb      	ldrb	r3, [r7, #19]
 8007a42:	74bb      	strb	r3, [r7, #18]
 8007a44:	e006      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007a46:	bf00      	nop
 8007a48:	40021000 	.word	0x40021000
 8007a4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a50:	7cfb      	ldrb	r3, [r7, #19]
 8007a52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a54:	7c7b      	ldrb	r3, [r7, #17]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d105      	bne.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a5a:	4b9b      	ldr	r3, [pc, #620]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5e:	4a9a      	ldr	r2, [pc, #616]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a72:	4b95      	ldr	r3, [pc, #596]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a78:	f023 0203 	bic.w	r2, r3, #3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	4991      	ldr	r1, [pc, #580]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0302 	and.w	r3, r3, #2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a94:	4b8c      	ldr	r3, [pc, #560]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a9a:	f023 020c 	bic.w	r2, r3, #12
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa2:	4989      	ldr	r1, [pc, #548]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0304 	and.w	r3, r3, #4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ab6:	4b84      	ldr	r3, [pc, #528]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007abc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac4:	4980      	ldr	r1, [pc, #512]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0320 	and.w	r3, r3, #32
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ad8:	4b7b      	ldr	r3, [pc, #492]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ade:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae6:	4978      	ldr	r1, [pc, #480]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007afa:	4b73      	ldr	r3, [pc, #460]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b08:	496f      	ldr	r1, [pc, #444]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b1c:	4b6a      	ldr	r3, [pc, #424]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	4967      	ldr	r1, [pc, #412]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b3e:	4b62      	ldr	r3, [pc, #392]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4c:	495e      	ldr	r1, [pc, #376]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b60:	4b59      	ldr	r3, [pc, #356]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6e:	4956      	ldr	r1, [pc, #344]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b82:	4b51      	ldr	r3, [pc, #324]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b90:	494d      	ldr	r1, [pc, #308]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d028      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ba4:	4b48      	ldr	r3, [pc, #288]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007baa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bb2:	4945      	ldr	r1, [pc, #276]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bc2:	d106      	bne.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bc4:	4b40      	ldr	r3, [pc, #256]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	4a3f      	ldr	r2, [pc, #252]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bce:	60d3      	str	r3, [r2, #12]
 8007bd0:	e011      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bda:	d10c      	bne.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3304      	adds	r3, #4
 8007be0:	2101      	movs	r1, #1
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 f872 	bl	8007ccc <RCCEx_PLLSAI1_Config>
 8007be8:	4603      	mov	r3, r0
 8007bea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007bec:	7cfb      	ldrb	r3, [r7, #19]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8007bf2:	7cfb      	ldrb	r3, [r7, #19]
 8007bf4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d028      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c02:	4b31      	ldr	r3, [pc, #196]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c10:	492d      	ldr	r1, [pc, #180]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c20:	d106      	bne.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c22:	4b29      	ldr	r3, [pc, #164]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	4a28      	ldr	r2, [pc, #160]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c2c:	60d3      	str	r3, [r2, #12]
 8007c2e:	e011      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c38:	d10c      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	2101      	movs	r1, #1
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 f843 	bl	8007ccc <RCCEx_PLLSAI1_Config>
 8007c46:	4603      	mov	r3, r0
 8007c48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c4a:	7cfb      	ldrb	r3, [r7, #19]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007c50:	7cfb      	ldrb	r3, [r7, #19]
 8007c52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01c      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c60:	4b19      	ldr	r3, [pc, #100]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c6e:	4916      	ldr	r1, [pc, #88]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c7e:	d10c      	bne.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3304      	adds	r3, #4
 8007c84:	2102      	movs	r1, #2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 f820 	bl	8007ccc <RCCEx_PLLSAI1_Config>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c90:	7cfb      	ldrb	r3, [r7, #19]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8007c96:	7cfb      	ldrb	r3, [r7, #19]
 8007c98:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ca6:	4b08      	ldr	r3, [pc, #32]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb4:	4904      	ldr	r1, [pc, #16]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007cbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	40021000 	.word	0x40021000

08007ccc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007cda:	4b74      	ldr	r3, [pc, #464]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d018      	beq.n	8007d18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007ce6:	4b71      	ldr	r3, [pc, #452]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	f003 0203 	and.w	r2, r3, #3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d10d      	bne.n	8007d12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
       ||
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007cfe:	4b6b      	ldr	r3, [pc, #428]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	091b      	lsrs	r3, r3, #4
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
       ||
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d047      	beq.n	8007da2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	73fb      	strb	r3, [r7, #15]
 8007d16:	e044      	b.n	8007da2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d018      	beq.n	8007d52 <RCCEx_PLLSAI1_Config+0x86>
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d825      	bhi.n	8007d70 <RCCEx_PLLSAI1_Config+0xa4>
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d002      	beq.n	8007d2e <RCCEx_PLLSAI1_Config+0x62>
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d009      	beq.n	8007d40 <RCCEx_PLLSAI1_Config+0x74>
 8007d2c:	e020      	b.n	8007d70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007d2e:	4b5f      	ldr	r3, [pc, #380]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d11d      	bne.n	8007d76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d3e:	e01a      	b.n	8007d76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007d40:	4b5a      	ldr	r3, [pc, #360]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d116      	bne.n	8007d7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d50:	e013      	b.n	8007d7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007d52:	4b56      	ldr	r3, [pc, #344]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10f      	bne.n	8007d7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007d5e:	4b53      	ldr	r3, [pc, #332]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d109      	bne.n	8007d7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d6e:	e006      	b.n	8007d7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	73fb      	strb	r3, [r7, #15]
      break;
 8007d74:	e004      	b.n	8007d80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007d76:	bf00      	nop
 8007d78:	e002      	b.n	8007d80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007d7a:	bf00      	nop
 8007d7c:	e000      	b.n	8007d80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007d7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10d      	bne.n	8007da2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007d86:	4b49      	ldr	r3, [pc, #292]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6819      	ldr	r1, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	011b      	lsls	r3, r3, #4
 8007d9a:	430b      	orrs	r3, r1
 8007d9c:	4943      	ldr	r1, [pc, #268]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d17c      	bne.n	8007ea2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007da8:	4b40      	ldr	r3, [pc, #256]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a3f      	ldr	r2, [pc, #252]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007db4:	f7fb fdf6 	bl	80039a4 <HAL_GetTick>
 8007db8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007dba:	e009      	b.n	8007dd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007dbc:	f7fb fdf2 	bl	80039a4 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d902      	bls.n	8007dd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	73fb      	strb	r3, [r7, #15]
        break;
 8007dce:	e005      	b.n	8007ddc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007dd0:	4b36      	ldr	r3, [pc, #216]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1ef      	bne.n	8007dbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d15f      	bne.n	8007ea2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d110      	bne.n	8007e0a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007de8:	4b30      	ldr	r3, [pc, #192]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007df0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	6892      	ldr	r2, [r2, #8]
 8007df8:	0211      	lsls	r1, r2, #8
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	68d2      	ldr	r2, [r2, #12]
 8007dfe:	06d2      	lsls	r2, r2, #27
 8007e00:	430a      	orrs	r2, r1
 8007e02:	492a      	ldr	r1, [pc, #168]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	610b      	str	r3, [r1, #16]
 8007e08:	e027      	b.n	8007e5a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d112      	bne.n	8007e36 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e10:	4b26      	ldr	r3, [pc, #152]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007e18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	6892      	ldr	r2, [r2, #8]
 8007e20:	0211      	lsls	r1, r2, #8
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	6912      	ldr	r2, [r2, #16]
 8007e26:	0852      	lsrs	r2, r2, #1
 8007e28:	3a01      	subs	r2, #1
 8007e2a:	0552      	lsls	r2, r2, #21
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	491f      	ldr	r1, [pc, #124]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	610b      	str	r3, [r1, #16]
 8007e34:	e011      	b.n	8007e5a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e36:	4b1d      	ldr	r3, [pc, #116]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007e3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6892      	ldr	r2, [r2, #8]
 8007e46:	0211      	lsls	r1, r2, #8
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6952      	ldr	r2, [r2, #20]
 8007e4c:	0852      	lsrs	r2, r2, #1
 8007e4e:	3a01      	subs	r2, #1
 8007e50:	0652      	lsls	r2, r2, #25
 8007e52:	430a      	orrs	r2, r1
 8007e54:	4915      	ldr	r1, [pc, #84]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007e5a:	4b14      	ldr	r3, [pc, #80]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a13      	ldr	r2, [pc, #76]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e66:	f7fb fd9d 	bl	80039a4 <HAL_GetTick>
 8007e6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e6c:	e009      	b.n	8007e82 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e6e:	f7fb fd99 	bl	80039a4 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d902      	bls.n	8007e82 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	73fb      	strb	r3, [r7, #15]
          break;
 8007e80:	e005      	b.n	8007e8e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e82:	4b0a      	ldr	r3, [pc, #40]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0ef      	beq.n	8007e6e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d106      	bne.n	8007ea2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007e94:	4b05      	ldr	r3, [pc, #20]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e96:	691a      	ldr	r2, [r3, #16]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	4903      	ldr	r1, [pc, #12]	; (8007eac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	40021000 	.word	0x40021000

08007eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e049      	b.n	8007f56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d106      	bne.n	8007edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7fa ff1e 	bl	8002d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3304      	adds	r3, #4
 8007eec:	4619      	mov	r1, r3
 8007eee:	4610      	mov	r0, r2
 8007ef0:	f000 fe40 	bl	8008b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
	...

08007f60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d001      	beq.n	8007f78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e033      	b.n	8007fe0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a19      	ldr	r2, [pc, #100]	; (8007fec <HAL_TIM_Base_Start+0x8c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d009      	beq.n	8007f9e <HAL_TIM_Base_Start+0x3e>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f92:	d004      	beq.n	8007f9e <HAL_TIM_Base_Start+0x3e>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a15      	ldr	r2, [pc, #84]	; (8007ff0 <HAL_TIM_Base_Start+0x90>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d115      	bne.n	8007fca <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	4b13      	ldr	r3, [pc, #76]	; (8007ff4 <HAL_TIM_Base_Start+0x94>)
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b06      	cmp	r3, #6
 8007fae:	d015      	beq.n	8007fdc <HAL_TIM_Base_Start+0x7c>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb6:	d011      	beq.n	8007fdc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f042 0201 	orr.w	r2, r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fc8:	e008      	b.n	8007fdc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f042 0201 	orr.w	r2, r2, #1
 8007fd8:	601a      	str	r2, [r3, #0]
 8007fda:	e000      	b.n	8007fde <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	40012c00 	.word	0x40012c00
 8007ff0:	40014000 	.word	0x40014000
 8007ff4:	00010007 	.word	0x00010007

08007ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b01      	cmp	r3, #1
 800800a:	d001      	beq.n	8008010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e03b      	b.n	8008088 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68da      	ldr	r2, [r3, #12]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f042 0201 	orr.w	r2, r2, #1
 8008026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a19      	ldr	r2, [pc, #100]	; (8008094 <HAL_TIM_Base_Start_IT+0x9c>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d009      	beq.n	8008046 <HAL_TIM_Base_Start_IT+0x4e>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800803a:	d004      	beq.n	8008046 <HAL_TIM_Base_Start_IT+0x4e>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a15      	ldr	r2, [pc, #84]	; (8008098 <HAL_TIM_Base_Start_IT+0xa0>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d115      	bne.n	8008072 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	4b13      	ldr	r3, [pc, #76]	; (800809c <HAL_TIM_Base_Start_IT+0xa4>)
 800804e:	4013      	ands	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b06      	cmp	r3, #6
 8008056:	d015      	beq.n	8008084 <HAL_TIM_Base_Start_IT+0x8c>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800805e:	d011      	beq.n	8008084 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f042 0201 	orr.w	r2, r2, #1
 800806e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008070:	e008      	b.n	8008084 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0201 	orr.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	e000      	b.n	8008086 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008084:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	40012c00 	.word	0x40012c00
 8008098:	40014000 	.word	0x40014000
 800809c:	00010007 	.word	0x00010007

080080a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0201 	bic.w	r2, r2, #1
 80080b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6a1a      	ldr	r2, [r3, #32]
 80080be:	f241 1311 	movw	r3, #4369	; 0x1111
 80080c2:	4013      	ands	r3, r2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10f      	bne.n	80080e8 <HAL_TIM_Base_Stop_IT+0x48>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	6a1a      	ldr	r2, [r3, #32]
 80080ce:	f240 4344 	movw	r3, #1092	; 0x444
 80080d2:	4013      	ands	r3, r2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d107      	bne.n	80080e8 <HAL_TIM_Base_Stop_IT+0x48>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 0201 	bic.w	r2, r2, #1
 80080e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
	...

08008100 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d109      	bne.n	8008124 <HAL_TIM_OC_Start+0x24>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b01      	cmp	r3, #1
 800811a:	bf14      	ite	ne
 800811c:	2301      	movne	r3, #1
 800811e:	2300      	moveq	r3, #0
 8008120:	b2db      	uxtb	r3, r3
 8008122:	e03c      	b.n	800819e <HAL_TIM_OC_Start+0x9e>
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	2b04      	cmp	r3, #4
 8008128:	d109      	bne.n	800813e <HAL_TIM_OC_Start+0x3e>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b01      	cmp	r3, #1
 8008134:	bf14      	ite	ne
 8008136:	2301      	movne	r3, #1
 8008138:	2300      	moveq	r3, #0
 800813a:	b2db      	uxtb	r3, r3
 800813c:	e02f      	b.n	800819e <HAL_TIM_OC_Start+0x9e>
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b08      	cmp	r3, #8
 8008142:	d109      	bne.n	8008158 <HAL_TIM_OC_Start+0x58>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b01      	cmp	r3, #1
 800814e:	bf14      	ite	ne
 8008150:	2301      	movne	r3, #1
 8008152:	2300      	moveq	r3, #0
 8008154:	b2db      	uxtb	r3, r3
 8008156:	e022      	b.n	800819e <HAL_TIM_OC_Start+0x9e>
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2b0c      	cmp	r3, #12
 800815c:	d109      	bne.n	8008172 <HAL_TIM_OC_Start+0x72>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b01      	cmp	r3, #1
 8008168:	bf14      	ite	ne
 800816a:	2301      	movne	r3, #1
 800816c:	2300      	moveq	r3, #0
 800816e:	b2db      	uxtb	r3, r3
 8008170:	e015      	b.n	800819e <HAL_TIM_OC_Start+0x9e>
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b10      	cmp	r3, #16
 8008176:	d109      	bne.n	800818c <HAL_TIM_OC_Start+0x8c>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b01      	cmp	r3, #1
 8008182:	bf14      	ite	ne
 8008184:	2301      	movne	r3, #1
 8008186:	2300      	moveq	r3, #0
 8008188:	b2db      	uxtb	r3, r3
 800818a:	e008      	b.n	800819e <HAL_TIM_OC_Start+0x9e>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b01      	cmp	r3, #1
 8008196:	bf14      	ite	ne
 8008198:	2301      	movne	r3, #1
 800819a:	2300      	moveq	r3, #0
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e07e      	b.n	80082a4 <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d104      	bne.n	80081b6 <HAL_TIM_OC_Start+0xb6>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2202      	movs	r2, #2
 80081b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081b4:	e023      	b.n	80081fe <HAL_TIM_OC_Start+0xfe>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b04      	cmp	r3, #4
 80081ba:	d104      	bne.n	80081c6 <HAL_TIM_OC_Start+0xc6>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081c4:	e01b      	b.n	80081fe <HAL_TIM_OC_Start+0xfe>
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b08      	cmp	r3, #8
 80081ca:	d104      	bne.n	80081d6 <HAL_TIM_OC_Start+0xd6>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2202      	movs	r2, #2
 80081d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081d4:	e013      	b.n	80081fe <HAL_TIM_OC_Start+0xfe>
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b0c      	cmp	r3, #12
 80081da:	d104      	bne.n	80081e6 <HAL_TIM_OC_Start+0xe6>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081e4:	e00b      	b.n	80081fe <HAL_TIM_OC_Start+0xfe>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2b10      	cmp	r3, #16
 80081ea:	d104      	bne.n	80081f6 <HAL_TIM_OC_Start+0xf6>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081f4:	e003      	b.n	80081fe <HAL_TIM_OC_Start+0xfe>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2202      	movs	r2, #2
 80081fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2201      	movs	r2, #1
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	4618      	mov	r0, r3
 8008208:	f001 f830 	bl	800926c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a26      	ldr	r2, [pc, #152]	; (80082ac <HAL_TIM_OC_Start+0x1ac>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d009      	beq.n	800822a <HAL_TIM_OC_Start+0x12a>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a25      	ldr	r2, [pc, #148]	; (80082b0 <HAL_TIM_OC_Start+0x1b0>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d004      	beq.n	800822a <HAL_TIM_OC_Start+0x12a>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a23      	ldr	r2, [pc, #140]	; (80082b4 <HAL_TIM_OC_Start+0x1b4>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d101      	bne.n	800822e <HAL_TIM_OC_Start+0x12e>
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <HAL_TIM_OC_Start+0x130>
 800822e:	2300      	movs	r3, #0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d007      	beq.n	8008244 <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008242:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a18      	ldr	r2, [pc, #96]	; (80082ac <HAL_TIM_OC_Start+0x1ac>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d009      	beq.n	8008262 <HAL_TIM_OC_Start+0x162>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008256:	d004      	beq.n	8008262 <HAL_TIM_OC_Start+0x162>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a14      	ldr	r2, [pc, #80]	; (80082b0 <HAL_TIM_OC_Start+0x1b0>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d115      	bne.n	800828e <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689a      	ldr	r2, [r3, #8]
 8008268:	4b13      	ldr	r3, [pc, #76]	; (80082b8 <HAL_TIM_OC_Start+0x1b8>)
 800826a:	4013      	ands	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2b06      	cmp	r3, #6
 8008272:	d015      	beq.n	80082a0 <HAL_TIM_OC_Start+0x1a0>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800827a:	d011      	beq.n	80082a0 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0201 	orr.w	r2, r2, #1
 800828a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800828c:	e008      	b.n	80082a0 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f042 0201 	orr.w	r2, r2, #1
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	e000      	b.n	80082a2 <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	40012c00 	.word	0x40012c00
 80082b0:	40014000 	.word	0x40014000
 80082b4:	40014400 	.word	0x40014400
 80082b8:	00010007 	.word	0x00010007

080082bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e049      	b.n	8008362 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d106      	bne.n	80082e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7fa fcf2 	bl	8002ccc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	3304      	adds	r3, #4
 80082f8:	4619      	mov	r1, r3
 80082fa:	4610      	mov	r0, r2
 80082fc:	f000 fc3a 	bl	8008b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d109      	bne.n	8008390 <HAL_TIM_PWM_Start+0x24>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b01      	cmp	r3, #1
 8008386:	bf14      	ite	ne
 8008388:	2301      	movne	r3, #1
 800838a:	2300      	moveq	r3, #0
 800838c:	b2db      	uxtb	r3, r3
 800838e:	e03c      	b.n	800840a <HAL_TIM_PWM_Start+0x9e>
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2b04      	cmp	r3, #4
 8008394:	d109      	bne.n	80083aa <HAL_TIM_PWM_Start+0x3e>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b01      	cmp	r3, #1
 80083a0:	bf14      	ite	ne
 80083a2:	2301      	movne	r3, #1
 80083a4:	2300      	moveq	r3, #0
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	e02f      	b.n	800840a <HAL_TIM_PWM_Start+0x9e>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d109      	bne.n	80083c4 <HAL_TIM_PWM_Start+0x58>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	bf14      	ite	ne
 80083bc:	2301      	movne	r3, #1
 80083be:	2300      	moveq	r3, #0
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	e022      	b.n	800840a <HAL_TIM_PWM_Start+0x9e>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	2b0c      	cmp	r3, #12
 80083c8:	d109      	bne.n	80083de <HAL_TIM_PWM_Start+0x72>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	bf14      	ite	ne
 80083d6:	2301      	movne	r3, #1
 80083d8:	2300      	moveq	r3, #0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	e015      	b.n	800840a <HAL_TIM_PWM_Start+0x9e>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b10      	cmp	r3, #16
 80083e2:	d109      	bne.n	80083f8 <HAL_TIM_PWM_Start+0x8c>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	bf14      	ite	ne
 80083f0:	2301      	movne	r3, #1
 80083f2:	2300      	moveq	r3, #0
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	e008      	b.n	800840a <HAL_TIM_PWM_Start+0x9e>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b01      	cmp	r3, #1
 8008402:	bf14      	ite	ne
 8008404:	2301      	movne	r3, #1
 8008406:	2300      	moveq	r3, #0
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e07e      	b.n	8008510 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d104      	bne.n	8008422 <HAL_TIM_PWM_Start+0xb6>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008420:	e023      	b.n	800846a <HAL_TIM_PWM_Start+0xfe>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b04      	cmp	r3, #4
 8008426:	d104      	bne.n	8008432 <HAL_TIM_PWM_Start+0xc6>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008430:	e01b      	b.n	800846a <HAL_TIM_PWM_Start+0xfe>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b08      	cmp	r3, #8
 8008436:	d104      	bne.n	8008442 <HAL_TIM_PWM_Start+0xd6>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008440:	e013      	b.n	800846a <HAL_TIM_PWM_Start+0xfe>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b0c      	cmp	r3, #12
 8008446:	d104      	bne.n	8008452 <HAL_TIM_PWM_Start+0xe6>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008450:	e00b      	b.n	800846a <HAL_TIM_PWM_Start+0xfe>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	2b10      	cmp	r3, #16
 8008456:	d104      	bne.n	8008462 <HAL_TIM_PWM_Start+0xf6>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2202      	movs	r2, #2
 800845c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008460:	e003      	b.n	800846a <HAL_TIM_PWM_Start+0xfe>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2202      	movs	r2, #2
 8008466:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2201      	movs	r2, #1
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	4618      	mov	r0, r3
 8008474:	f000 fefa 	bl	800926c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a26      	ldr	r2, [pc, #152]	; (8008518 <HAL_TIM_PWM_Start+0x1ac>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d009      	beq.n	8008496 <HAL_TIM_PWM_Start+0x12a>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a25      	ldr	r2, [pc, #148]	; (800851c <HAL_TIM_PWM_Start+0x1b0>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d004      	beq.n	8008496 <HAL_TIM_PWM_Start+0x12a>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a23      	ldr	r2, [pc, #140]	; (8008520 <HAL_TIM_PWM_Start+0x1b4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d101      	bne.n	800849a <HAL_TIM_PWM_Start+0x12e>
 8008496:	2301      	movs	r3, #1
 8008498:	e000      	b.n	800849c <HAL_TIM_PWM_Start+0x130>
 800849a:	2300      	movs	r3, #0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d007      	beq.n	80084b0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a18      	ldr	r2, [pc, #96]	; (8008518 <HAL_TIM_PWM_Start+0x1ac>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d009      	beq.n	80084ce <HAL_TIM_PWM_Start+0x162>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c2:	d004      	beq.n	80084ce <HAL_TIM_PWM_Start+0x162>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a14      	ldr	r2, [pc, #80]	; (800851c <HAL_TIM_PWM_Start+0x1b0>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d115      	bne.n	80084fa <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	4b13      	ldr	r3, [pc, #76]	; (8008524 <HAL_TIM_PWM_Start+0x1b8>)
 80084d6:	4013      	ands	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b06      	cmp	r3, #6
 80084de:	d015      	beq.n	800850c <HAL_TIM_PWM_Start+0x1a0>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084e6:	d011      	beq.n	800850c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0201 	orr.w	r2, r2, #1
 80084f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084f8:	e008      	b.n	800850c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f042 0201 	orr.w	r2, r2, #1
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	e000      	b.n	800850e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800850c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	40012c00 	.word	0x40012c00
 800851c:	40014000 	.word	0x40014000
 8008520:	40014400 	.word	0x40014400
 8008524:	00010007 	.word	0x00010007

08008528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b02      	cmp	r3, #2
 800853c:	d122      	bne.n	8008584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	f003 0302 	and.w	r3, r3, #2
 8008548:	2b02      	cmp	r3, #2
 800854a:	d11b      	bne.n	8008584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f06f 0202 	mvn.w	r2, #2
 8008554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	f003 0303 	and.w	r3, r3, #3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fae3 	bl	8008b36 <HAL_TIM_IC_CaptureCallback>
 8008570:	e005      	b.n	800857e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fad5 	bl	8008b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fae6 	bl	8008b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	f003 0304 	and.w	r3, r3, #4
 800858e:	2b04      	cmp	r3, #4
 8008590:	d122      	bne.n	80085d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b04      	cmp	r3, #4
 800859e:	d11b      	bne.n	80085d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f06f 0204 	mvn.w	r2, #4
 80085a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2202      	movs	r2, #2
 80085ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fab9 	bl	8008b36 <HAL_TIM_IC_CaptureCallback>
 80085c4:	e005      	b.n	80085d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 faab 	bl	8008b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fabc 	bl	8008b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	f003 0308 	and.w	r3, r3, #8
 80085e2:	2b08      	cmp	r3, #8
 80085e4:	d122      	bne.n	800862c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f003 0308 	and.w	r3, r3, #8
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d11b      	bne.n	800862c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f06f 0208 	mvn.w	r2, #8
 80085fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2204      	movs	r2, #4
 8008602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	f003 0303 	and.w	r3, r3, #3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d003      	beq.n	800861a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa8f 	bl	8008b36 <HAL_TIM_IC_CaptureCallback>
 8008618:	e005      	b.n	8008626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fa81 	bl	8008b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fa92 	bl	8008b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	f003 0310 	and.w	r3, r3, #16
 8008636:	2b10      	cmp	r3, #16
 8008638:	d122      	bne.n	8008680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	f003 0310 	and.w	r3, r3, #16
 8008644:	2b10      	cmp	r3, #16
 8008646:	d11b      	bne.n	8008680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f06f 0210 	mvn.w	r2, #16
 8008650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2208      	movs	r2, #8
 8008656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008662:	2b00      	cmp	r3, #0
 8008664:	d003      	beq.n	800866e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fa65 	bl	8008b36 <HAL_TIM_IC_CaptureCallback>
 800866c:	e005      	b.n	800867a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fa57 	bl	8008b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fa68 	bl	8008b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b01      	cmp	r3, #1
 800868c:	d10e      	bne.n	80086ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	2b01      	cmp	r3, #1
 800869a:	d107      	bne.n	80086ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f06f 0201 	mvn.w	r2, #1
 80086a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7f8 fd08 	bl	80010bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b6:	2b80      	cmp	r3, #128	; 0x80
 80086b8:	d10e      	bne.n	80086d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c4:	2b80      	cmp	r3, #128	; 0x80
 80086c6:	d107      	bne.n	80086d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fed8 	bl	8009488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086e6:	d10e      	bne.n	8008706 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f2:	2b80      	cmp	r3, #128	; 0x80
 80086f4:	d107      	bne.n	8008706 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80086fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fecb 	bl	800949c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008710:	2b40      	cmp	r3, #64	; 0x40
 8008712:	d10e      	bne.n	8008732 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871e:	2b40      	cmp	r3, #64	; 0x40
 8008720:	d107      	bne.n	8008732 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800872a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 fa16 	bl	8008b5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	f003 0320 	and.w	r3, r3, #32
 800873c:	2b20      	cmp	r3, #32
 800873e:	d10e      	bne.n	800875e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	f003 0320 	and.w	r3, r3, #32
 800874a:	2b20      	cmp	r3, #32
 800874c:	d107      	bne.n	800875e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f06f 0220 	mvn.w	r2, #32
 8008756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fe8b 	bl	8009474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800877e:	2b01      	cmp	r3, #1
 8008780:	d101      	bne.n	8008786 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008782:	2302      	movs	r3, #2
 8008784:	e0ff      	b.n	8008986 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b14      	cmp	r3, #20
 8008792:	f200 80f0 	bhi.w	8008976 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008796:	a201      	add	r2, pc, #4	; (adr r2, 800879c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879c:	080087f1 	.word	0x080087f1
 80087a0:	08008977 	.word	0x08008977
 80087a4:	08008977 	.word	0x08008977
 80087a8:	08008977 	.word	0x08008977
 80087ac:	08008831 	.word	0x08008831
 80087b0:	08008977 	.word	0x08008977
 80087b4:	08008977 	.word	0x08008977
 80087b8:	08008977 	.word	0x08008977
 80087bc:	08008873 	.word	0x08008873
 80087c0:	08008977 	.word	0x08008977
 80087c4:	08008977 	.word	0x08008977
 80087c8:	08008977 	.word	0x08008977
 80087cc:	080088b3 	.word	0x080088b3
 80087d0:	08008977 	.word	0x08008977
 80087d4:	08008977 	.word	0x08008977
 80087d8:	08008977 	.word	0x08008977
 80087dc:	080088f5 	.word	0x080088f5
 80087e0:	08008977 	.word	0x08008977
 80087e4:	08008977 	.word	0x08008977
 80087e8:	08008977 	.word	0x08008977
 80087ec:	08008935 	.word	0x08008935
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68b9      	ldr	r1, [r7, #8]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fa20 	bl	8008c3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	699a      	ldr	r2, [r3, #24]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f042 0208 	orr.w	r2, r2, #8
 800880a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699a      	ldr	r2, [r3, #24]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f022 0204 	bic.w	r2, r2, #4
 800881a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6999      	ldr	r1, [r3, #24]
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	691a      	ldr	r2, [r3, #16]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	619a      	str	r2, [r3, #24]
      break;
 800882e:	e0a5      	b.n	800897c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68b9      	ldr	r1, [r7, #8]
 8008836:	4618      	mov	r0, r3
 8008838:	f000 fa7c 	bl	8008d34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	699a      	ldr	r2, [r3, #24]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800884a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	699a      	ldr	r2, [r3, #24]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800885a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6999      	ldr	r1, [r3, #24]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	021a      	lsls	r2, r3, #8
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	430a      	orrs	r2, r1
 800886e:	619a      	str	r2, [r3, #24]
      break;
 8008870:	e084      	b.n	800897c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68b9      	ldr	r1, [r7, #8]
 8008878:	4618      	mov	r0, r3
 800887a:	f000 fad5 	bl	8008e28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	69da      	ldr	r2, [r3, #28]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f042 0208 	orr.w	r2, r2, #8
 800888c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	69da      	ldr	r2, [r3, #28]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 0204 	bic.w	r2, r2, #4
 800889c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	69d9      	ldr	r1, [r3, #28]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	691a      	ldr	r2, [r3, #16]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	61da      	str	r2, [r3, #28]
      break;
 80088b0:	e064      	b.n	800897c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68b9      	ldr	r1, [r7, #8]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 fb2d 	bl	8008f18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69da      	ldr	r2, [r3, #28]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69da      	ldr	r2, [r3, #28]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	69d9      	ldr	r1, [r3, #28]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	021a      	lsls	r2, r3, #8
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	61da      	str	r2, [r3, #28]
      break;
 80088f2:	e043      	b.n	800897c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68b9      	ldr	r1, [r7, #8]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fb6a 	bl	8008fd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f042 0208 	orr.w	r2, r2, #8
 800890e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0204 	bic.w	r2, r2, #4
 800891e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	691a      	ldr	r2, [r3, #16]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008932:	e023      	b.n	800897c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68b9      	ldr	r1, [r7, #8]
 800893a:	4618      	mov	r0, r3
 800893c:	f000 fba2 	bl	8009084 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800894e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800895e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	021a      	lsls	r2, r3, #8
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	430a      	orrs	r2, r1
 8008972:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008974:	e002      	b.n	800897c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	75fb      	strb	r3, [r7, #23]
      break;
 800897a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008984:	7dfb      	ldrb	r3, [r7, #23]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop

08008990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d101      	bne.n	80089ac <HAL_TIM_ConfigClockSource+0x1c>
 80089a8:	2302      	movs	r3, #2
 80089aa:	e0b6      	b.n	8008b1a <HAL_TIM_ConfigClockSource+0x18a>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2202      	movs	r2, #2
 80089b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80089ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089e8:	d03e      	beq.n	8008a68 <HAL_TIM_ConfigClockSource+0xd8>
 80089ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089ee:	f200 8087 	bhi.w	8008b00 <HAL_TIM_ConfigClockSource+0x170>
 80089f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089f6:	f000 8086 	beq.w	8008b06 <HAL_TIM_ConfigClockSource+0x176>
 80089fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089fe:	d87f      	bhi.n	8008b00 <HAL_TIM_ConfigClockSource+0x170>
 8008a00:	2b70      	cmp	r3, #112	; 0x70
 8008a02:	d01a      	beq.n	8008a3a <HAL_TIM_ConfigClockSource+0xaa>
 8008a04:	2b70      	cmp	r3, #112	; 0x70
 8008a06:	d87b      	bhi.n	8008b00 <HAL_TIM_ConfigClockSource+0x170>
 8008a08:	2b60      	cmp	r3, #96	; 0x60
 8008a0a:	d050      	beq.n	8008aae <HAL_TIM_ConfigClockSource+0x11e>
 8008a0c:	2b60      	cmp	r3, #96	; 0x60
 8008a0e:	d877      	bhi.n	8008b00 <HAL_TIM_ConfigClockSource+0x170>
 8008a10:	2b50      	cmp	r3, #80	; 0x50
 8008a12:	d03c      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0xfe>
 8008a14:	2b50      	cmp	r3, #80	; 0x50
 8008a16:	d873      	bhi.n	8008b00 <HAL_TIM_ConfigClockSource+0x170>
 8008a18:	2b40      	cmp	r3, #64	; 0x40
 8008a1a:	d058      	beq.n	8008ace <HAL_TIM_ConfigClockSource+0x13e>
 8008a1c:	2b40      	cmp	r3, #64	; 0x40
 8008a1e:	d86f      	bhi.n	8008b00 <HAL_TIM_ConfigClockSource+0x170>
 8008a20:	2b30      	cmp	r3, #48	; 0x30
 8008a22:	d064      	beq.n	8008aee <HAL_TIM_ConfigClockSource+0x15e>
 8008a24:	2b30      	cmp	r3, #48	; 0x30
 8008a26:	d86b      	bhi.n	8008b00 <HAL_TIM_ConfigClockSource+0x170>
 8008a28:	2b20      	cmp	r3, #32
 8008a2a:	d060      	beq.n	8008aee <HAL_TIM_ConfigClockSource+0x15e>
 8008a2c:	2b20      	cmp	r3, #32
 8008a2e:	d867      	bhi.n	8008b00 <HAL_TIM_ConfigClockSource+0x170>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d05c      	beq.n	8008aee <HAL_TIM_ConfigClockSource+0x15e>
 8008a34:	2b10      	cmp	r3, #16
 8008a36:	d05a      	beq.n	8008aee <HAL_TIM_ConfigClockSource+0x15e>
 8008a38:	e062      	b.n	8008b00 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	6899      	ldr	r1, [r3, #8]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f000 fbef 	bl	800922c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	609a      	str	r2, [r3, #8]
      break;
 8008a66:	e04f      	b.n	8008b08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6818      	ldr	r0, [r3, #0]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	6899      	ldr	r1, [r3, #8]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f000 fbd8 	bl	800922c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689a      	ldr	r2, [r3, #8]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a8a:	609a      	str	r2, [r3, #8]
      break;
 8008a8c:	e03c      	b.n	8008b08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6818      	ldr	r0, [r3, #0]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	6859      	ldr	r1, [r3, #4]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	f000 fb4c 	bl	8009138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2150      	movs	r1, #80	; 0x50
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 fba5 	bl	80091f6 <TIM_ITRx_SetConfig>
      break;
 8008aac:	e02c      	b.n	8008b08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6818      	ldr	r0, [r3, #0]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	6859      	ldr	r1, [r3, #4]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	461a      	mov	r2, r3
 8008abc:	f000 fb6b 	bl	8009196 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2160      	movs	r1, #96	; 0x60
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 fb95 	bl	80091f6 <TIM_ITRx_SetConfig>
      break;
 8008acc:	e01c      	b.n	8008b08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	6859      	ldr	r1, [r3, #4]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	461a      	mov	r2, r3
 8008adc:	f000 fb2c 	bl	8009138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2140      	movs	r1, #64	; 0x40
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 fb85 	bl	80091f6 <TIM_ITRx_SetConfig>
      break;
 8008aec:	e00c      	b.n	8008b08 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4619      	mov	r1, r3
 8008af8:	4610      	mov	r0, r2
 8008afa:	f000 fb7c 	bl	80091f6 <TIM_ITRx_SetConfig>
      break;
 8008afe:	e003      	b.n	8008b08 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	73fb      	strb	r3, [r7, #15]
      break;
 8008b04:	e000      	b.n	8008b08 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b083      	sub	sp, #12
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b2a:	bf00      	nop
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b083      	sub	sp, #12
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b3e:	bf00      	nop
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b52:	bf00      	nop
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b66:	bf00      	nop
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
	...

08008b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a2a      	ldr	r2, [pc, #168]	; (8008c30 <TIM_Base_SetConfig+0xbc>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d003      	beq.n	8008b94 <TIM_Base_SetConfig+0x20>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b92:	d108      	bne.n	8008ba6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a21      	ldr	r2, [pc, #132]	; (8008c30 <TIM_Base_SetConfig+0xbc>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d00b      	beq.n	8008bc6 <TIM_Base_SetConfig+0x52>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bb4:	d007      	beq.n	8008bc6 <TIM_Base_SetConfig+0x52>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a1e      	ldr	r2, [pc, #120]	; (8008c34 <TIM_Base_SetConfig+0xc0>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d003      	beq.n	8008bc6 <TIM_Base_SetConfig+0x52>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a1d      	ldr	r2, [pc, #116]	; (8008c38 <TIM_Base_SetConfig+0xc4>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d108      	bne.n	8008bd8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a0c      	ldr	r2, [pc, #48]	; (8008c30 <TIM_Base_SetConfig+0xbc>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d007      	beq.n	8008c14 <TIM_Base_SetConfig+0xa0>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a0b      	ldr	r2, [pc, #44]	; (8008c34 <TIM_Base_SetConfig+0xc0>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d003      	beq.n	8008c14 <TIM_Base_SetConfig+0xa0>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a0a      	ldr	r2, [pc, #40]	; (8008c38 <TIM_Base_SetConfig+0xc4>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d103      	bne.n	8008c1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	691a      	ldr	r2, [r3, #16]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	615a      	str	r2, [r3, #20]
}
 8008c22:	bf00      	nop
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	40012c00 	.word	0x40012c00
 8008c34:	40014000 	.word	0x40014000
 8008c38:	40014400 	.word	0x40014400

08008c3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	f023 0201 	bic.w	r2, r3, #1
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f023 0303 	bic.w	r3, r3, #3
 8008c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f023 0302 	bic.w	r3, r3, #2
 8008c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a24      	ldr	r2, [pc, #144]	; (8008d28 <TIM_OC1_SetConfig+0xec>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d007      	beq.n	8008cac <TIM_OC1_SetConfig+0x70>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a23      	ldr	r2, [pc, #140]	; (8008d2c <TIM_OC1_SetConfig+0xf0>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d003      	beq.n	8008cac <TIM_OC1_SetConfig+0x70>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a22      	ldr	r2, [pc, #136]	; (8008d30 <TIM_OC1_SetConfig+0xf4>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d10c      	bne.n	8008cc6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	f023 0308 	bic.w	r3, r3, #8
 8008cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f023 0304 	bic.w	r3, r3, #4
 8008cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a17      	ldr	r2, [pc, #92]	; (8008d28 <TIM_OC1_SetConfig+0xec>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d007      	beq.n	8008cde <TIM_OC1_SetConfig+0xa2>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a16      	ldr	r2, [pc, #88]	; (8008d2c <TIM_OC1_SetConfig+0xf0>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d003      	beq.n	8008cde <TIM_OC1_SetConfig+0xa2>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a15      	ldr	r2, [pc, #84]	; (8008d30 <TIM_OC1_SetConfig+0xf4>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d111      	bne.n	8008d02 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	621a      	str	r2, [r3, #32]
}
 8008d1c:	bf00      	nop
 8008d1e:	371c      	adds	r7, #28
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	40012c00 	.word	0x40012c00
 8008d2c:	40014000 	.word	0x40014000
 8008d30:	40014400 	.word	0x40014400

08008d34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	f023 0210 	bic.w	r2, r3, #16
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	021b      	lsls	r3, r3, #8
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f023 0320 	bic.w	r3, r3, #32
 8008d82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	011b      	lsls	r3, r3, #4
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a22      	ldr	r2, [pc, #136]	; (8008e1c <TIM_OC2_SetConfig+0xe8>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d10d      	bne.n	8008db4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	011b      	lsls	r3, r3, #4
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008db2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a19      	ldr	r2, [pc, #100]	; (8008e1c <TIM_OC2_SetConfig+0xe8>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d007      	beq.n	8008dcc <TIM_OC2_SetConfig+0x98>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a18      	ldr	r2, [pc, #96]	; (8008e20 <TIM_OC2_SetConfig+0xec>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d003      	beq.n	8008dcc <TIM_OC2_SetConfig+0x98>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a17      	ldr	r2, [pc, #92]	; (8008e24 <TIM_OC2_SetConfig+0xf0>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d113      	bne.n	8008df4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	695b      	ldr	r3, [r3, #20]
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	621a      	str	r2, [r3, #32]
}
 8008e0e:	bf00      	nop
 8008e10:	371c      	adds	r7, #28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	40012c00 	.word	0x40012c00
 8008e20:	40014000 	.word	0x40014000
 8008e24:	40014400 	.word	0x40014400

08008e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b087      	sub	sp, #28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f023 0303 	bic.w	r3, r3, #3
 8008e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	021b      	lsls	r3, r3, #8
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a21      	ldr	r2, [pc, #132]	; (8008f0c <TIM_OC3_SetConfig+0xe4>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d10d      	bne.n	8008ea6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	021b      	lsls	r3, r3, #8
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a18      	ldr	r2, [pc, #96]	; (8008f0c <TIM_OC3_SetConfig+0xe4>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d007      	beq.n	8008ebe <TIM_OC3_SetConfig+0x96>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a17      	ldr	r2, [pc, #92]	; (8008f10 <TIM_OC3_SetConfig+0xe8>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d003      	beq.n	8008ebe <TIM_OC3_SetConfig+0x96>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a16      	ldr	r2, [pc, #88]	; (8008f14 <TIM_OC3_SetConfig+0xec>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d113      	bne.n	8008ee6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	011b      	lsls	r3, r3, #4
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	011b      	lsls	r3, r3, #4
 8008ee0:	693a      	ldr	r2, [r7, #16]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	685a      	ldr	r2, [r3, #4]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	621a      	str	r2, [r3, #32]
}
 8008f00:	bf00      	nop
 8008f02:	371c      	adds	r7, #28
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	40012c00 	.word	0x40012c00
 8008f10:	40014000 	.word	0x40014000
 8008f14:	40014400 	.word	0x40014400

08008f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	021b      	lsls	r3, r3, #8
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	031b      	lsls	r3, r3, #12
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a14      	ldr	r2, [pc, #80]	; (8008fc8 <TIM_OC4_SetConfig+0xb0>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d007      	beq.n	8008f8c <TIM_OC4_SetConfig+0x74>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a13      	ldr	r2, [pc, #76]	; (8008fcc <TIM_OC4_SetConfig+0xb4>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d003      	beq.n	8008f8c <TIM_OC4_SetConfig+0x74>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a12      	ldr	r2, [pc, #72]	; (8008fd0 <TIM_OC4_SetConfig+0xb8>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d109      	bne.n	8008fa0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	019b      	lsls	r3, r3, #6
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	621a      	str	r2, [r3, #32]
}
 8008fba:	bf00      	nop
 8008fbc:	371c      	adds	r7, #28
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	40012c00 	.word	0x40012c00
 8008fcc:	40014000 	.word	0x40014000
 8008fd0:	40014400 	.word	0x40014400

08008fd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	4313      	orrs	r3, r2
 8009010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009018:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	041b      	lsls	r3, r3, #16
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	4313      	orrs	r3, r2
 8009024:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a13      	ldr	r2, [pc, #76]	; (8009078 <TIM_OC5_SetConfig+0xa4>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d007      	beq.n	800903e <TIM_OC5_SetConfig+0x6a>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a12      	ldr	r2, [pc, #72]	; (800907c <TIM_OC5_SetConfig+0xa8>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d003      	beq.n	800903e <TIM_OC5_SetConfig+0x6a>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a11      	ldr	r2, [pc, #68]	; (8009080 <TIM_OC5_SetConfig+0xac>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d109      	bne.n	8009052 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009044:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	021b      	lsls	r3, r3, #8
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	4313      	orrs	r3, r2
 8009050:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	621a      	str	r2, [r3, #32]
}
 800906c:	bf00      	nop
 800906e:	371c      	adds	r7, #28
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	40012c00 	.word	0x40012c00
 800907c:	40014000 	.word	0x40014000
 8009080:	40014400 	.word	0x40014400

08009084 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	051b      	lsls	r3, r3, #20
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a14      	ldr	r2, [pc, #80]	; (800912c <TIM_OC6_SetConfig+0xa8>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d007      	beq.n	80090f0 <TIM_OC6_SetConfig+0x6c>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a13      	ldr	r2, [pc, #76]	; (8009130 <TIM_OC6_SetConfig+0xac>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d003      	beq.n	80090f0 <TIM_OC6_SetConfig+0x6c>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a12      	ldr	r2, [pc, #72]	; (8009134 <TIM_OC6_SetConfig+0xb0>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d109      	bne.n	8009104 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	029b      	lsls	r3, r3, #10
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	4313      	orrs	r3, r2
 8009102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	685a      	ldr	r2, [r3, #4]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	621a      	str	r2, [r3, #32]
}
 800911e:	bf00      	nop
 8009120:	371c      	adds	r7, #28
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	40012c00 	.word	0x40012c00
 8009130:	40014000 	.word	0x40014000
 8009134:	40014400 	.word	0x40014400

08009138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6a1b      	ldr	r3, [r3, #32]
 8009148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	f023 0201 	bic.w	r2, r3, #1
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	011b      	lsls	r3, r3, #4
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	4313      	orrs	r3, r2
 800916c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	f023 030a 	bic.w	r3, r3, #10
 8009174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	4313      	orrs	r3, r2
 800917c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	621a      	str	r2, [r3, #32]
}
 800918a:	bf00      	nop
 800918c:	371c      	adds	r7, #28
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009196:	b480      	push	{r7}
 8009198:	b087      	sub	sp, #28
 800919a:	af00      	add	r7, sp, #0
 800919c:	60f8      	str	r0, [r7, #12]
 800919e:	60b9      	str	r1, [r7, #8]
 80091a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	f023 0210 	bic.w	r2, r3, #16
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6a1b      	ldr	r3, [r3, #32]
 80091b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	031b      	lsls	r3, r3, #12
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	011b      	lsls	r3, r3, #4
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	4313      	orrs	r3, r2
 80091dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	621a      	str	r2, [r3, #32]
}
 80091ea:	bf00      	nop
 80091ec:	371c      	adds	r7, #28
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b085      	sub	sp, #20
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800920c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800920e:	683a      	ldr	r2, [r7, #0]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4313      	orrs	r3, r2
 8009214:	f043 0307 	orr.w	r3, r3, #7
 8009218:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	609a      	str	r2, [r3, #8]
}
 8009220:	bf00      	nop
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800922c:	b480      	push	{r7}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
 8009238:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009246:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	021a      	lsls	r2, r3, #8
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	431a      	orrs	r2, r3
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	4313      	orrs	r3, r2
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	4313      	orrs	r3, r2
 8009258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	609a      	str	r2, [r3, #8]
}
 8009260:	bf00      	nop
 8009262:	371c      	adds	r7, #28
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800926c:	b480      	push	{r7}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	f003 031f 	and.w	r3, r3, #31
 800927e:	2201      	movs	r2, #1
 8009280:	fa02 f303 	lsl.w	r3, r2, r3
 8009284:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6a1a      	ldr	r2, [r3, #32]
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	43db      	mvns	r3, r3
 800928e:	401a      	ands	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a1a      	ldr	r2, [r3, #32]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f003 031f 	and.w	r3, r3, #31
 800929e:	6879      	ldr	r1, [r7, #4]
 80092a0:	fa01 f303 	lsl.w	r3, r1, r3
 80092a4:	431a      	orrs	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	621a      	str	r2, [r3, #32]
}
 80092aa:	bf00      	nop
 80092ac:	371c      	adds	r7, #28
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
	...

080092b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d101      	bne.n	80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092cc:	2302      	movs	r3, #2
 80092ce:	e04f      	b.n	8009370 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a21      	ldr	r2, [pc, #132]	; (800937c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d108      	bne.n	800930c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009300:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	4313      	orrs	r3, r2
 800930a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	4313      	orrs	r3, r2
 800931c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a14      	ldr	r2, [pc, #80]	; (800937c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d009      	beq.n	8009344 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009338:	d004      	beq.n	8009344 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a10      	ldr	r2, [pc, #64]	; (8009380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d10c      	bne.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800934a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	4313      	orrs	r3, r2
 8009354:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	40012c00 	.word	0x40012c00
 8009380:	40014000 	.word	0x40014000

08009384 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800938e:	2300      	movs	r3, #0
 8009390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009398:	2b01      	cmp	r3, #1
 800939a:	d101      	bne.n	80093a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800939c:	2302      	movs	r3, #2
 800939e:	e060      	b.n	8009462 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4313      	orrs	r3, r2
 80093de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009406:	4313      	orrs	r3, r2
 8009408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	041b      	lsls	r3, r3, #16
 8009416:	4313      	orrs	r3, r2
 8009418:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a14      	ldr	r2, [pc, #80]	; (8009470 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d115      	bne.n	8009450 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942e:	051b      	lsls	r3, r3, #20
 8009430:	4313      	orrs	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	4313      	orrs	r3, r2
 8009440:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	4313      	orrs	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	40012c00 	.word	0x40012c00

08009474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <arm_correlate_f32>:
 80094b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b4:	b087      	sub	sp, #28
 80094b6:	4299      	cmp	r1, r3
 80094b8:	4684      	mov	ip, r0
 80094ba:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80094bc:	f0c0 80a7 	bcc.w	800960e <arm_correlate_f32+0x15e>
 80094c0:	ebc3 0e01 	rsb	lr, r3, r1
 80094c4:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 80094c8:	2704      	movs	r7, #4
 80094ca:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 80094ce:	3101      	adds	r1, #1
 80094d0:	3801      	subs	r0, #1
 80094d2:	1ac9      	subs	r1, r1, r3
 80094d4:	1e5e      	subs	r6, r3, #1
 80094d6:	9100      	str	r1, [sp, #0]
 80094d8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80094dc:	d055      	beq.n	800958a <arm_correlate_f32+0xda>
 80094de:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8009690 <arm_correlate_f32+0x1e0>
 80094e2:	f1a0 0804 	sub.w	r8, r0, #4
 80094e6:	46f1      	mov	r9, lr
 80094e8:	4664      	mov	r4, ip
 80094ea:	2501      	movs	r5, #1
 80094ec:	f015 0103 	ands.w	r1, r5, #3
 80094f0:	d009      	beq.n	8009506 <arm_correlate_f32+0x56>
 80094f2:	ecf4 6a01 	vldmia	r4!, {s13}
 80094f6:	ecb0 7a01 	vldmia	r0!, {s14}
 80094fa:	ee26 7a87 	vmul.f32	s14, s13, s14
 80094fe:	3901      	subs	r1, #1
 8009500:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009504:	d1f5      	bne.n	80094f2 <arm_correlate_f32+0x42>
 8009506:	3501      	adds	r5, #1
 8009508:	429d      	cmp	r5, r3
 800950a:	edc9 7a00 	vstr	s15, [r9]
 800950e:	4640      	mov	r0, r8
 8009510:	44b9      	add	r9, r7
 8009512:	d038      	beq.n	8009586 <arm_correlate_f32+0xd6>
 8009514:	ea5f 0a95 	movs.w	sl, r5, lsr #2
 8009518:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8009690 <arm_correlate_f32+0x1e0>
 800951c:	f000 8253 	beq.w	80099c6 <arm_correlate_f32+0x516>
 8009520:	f10c 0010 	add.w	r0, ip, #16
 8009524:	f108 0110 	add.w	r1, r8, #16
 8009528:	4654      	mov	r4, sl
 800952a:	ed51 6a04 	vldr	s13, [r1, #-16]
 800952e:	ed10 4a04 	vldr	s8, [r0, #-16]
 8009532:	ed50 3a03 	vldr	s7, [r0, #-12]
 8009536:	ed11 5a03 	vldr	s10, [r1, #-12]
 800953a:	ed50 4a02 	vldr	s9, [r0, #-8]
 800953e:	ed11 6a02 	vldr	s12, [r1, #-8]
 8009542:	ed50 5a01 	vldr	s11, [r0, #-4]
 8009546:	ed11 7a01 	vldr	s14, [r1, #-4]
 800954a:	ee24 4a26 	vmul.f32	s8, s8, s13
 800954e:	ee23 5a85 	vmul.f32	s10, s7, s10
 8009552:	ee74 6a27 	vadd.f32	s13, s8, s15
 8009556:	ee24 6a86 	vmul.f32	s12, s9, s12
 800955a:	ee75 6a26 	vadd.f32	s13, s10, s13
 800955e:	ee25 7a87 	vmul.f32	s14, s11, s14
 8009562:	ee76 7a26 	vadd.f32	s15, s12, s13
 8009566:	3c01      	subs	r4, #1
 8009568:	f100 0010 	add.w	r0, r0, #16
 800956c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009570:	f101 0110 	add.w	r1, r1, #16
 8009574:	d1d9      	bne.n	800952a <arm_correlate_f32+0x7a>
 8009576:	ea4f 100a 	mov.w	r0, sl, lsl #4
 800957a:	eb0c 0400 	add.w	r4, ip, r0
 800957e:	4440      	add	r0, r8
 8009580:	f1a8 0804 	sub.w	r8, r8, #4
 8009584:	e7b2      	b.n	80094ec <arm_correlate_f32+0x3c>
 8009586:	fb07 ee06 	mla	lr, r7, r6, lr
 800958a:	2b03      	cmp	r3, #3
 800958c:	9900      	ldr	r1, [sp, #0]
 800958e:	d84d      	bhi.n	800962c <arm_correlate_f32+0x17c>
 8009590:	2900      	cmp	r1, #0
 8009592:	f000 81d4 	beq.w	800993e <arm_correlate_f32+0x48e>
 8009596:	2b00      	cmp	r3, #0
 8009598:	f000 81d6 	beq.w	8009948 <arm_correlate_f32+0x498>
 800959c:	2e00      	cmp	r6, #0
 800959e:	f000 81df 	beq.w	8009960 <arm_correlate_f32+0x4b0>
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	9b00      	ldr	r3, [sp, #0]
 80095a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80095aa:	f000 81ef 	beq.w	800998c <arm_correlate_f32+0x4dc>
 80095ae:	eddf 4a38 	vldr	s9, [pc, #224]	; 8009690 <arm_correlate_f32+0x1e0>
 80095b2:	eb0c 0503 	add.w	r5, ip, r3
 80095b6:	4664      	mov	r4, ip
 80095b8:	f10c 0004 	add.w	r0, ip, #4
 80095bc:	4671      	mov	r1, lr
 80095be:	ecb4 5a01 	vldmia	r4!, {s10}
 80095c2:	ed92 6a00 	vldr	s12, [r2]
 80095c6:	edd0 7a00 	vldr	s15, [r0]
 80095ca:	edd2 6a01 	vldr	s13, [r2, #4]
 80095ce:	edd0 5a01 	vldr	s11, [r0, #4]
 80095d2:	ed92 7a02 	vldr	s14, [r2, #8]
 80095d6:	ee25 6a06 	vmul.f32	s12, s10, s12
 80095da:	3004      	adds	r0, #4
 80095dc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80095e0:	ee36 6a24 	vadd.f32	s12, s12, s9
 80095e4:	ee25 7a87 	vmul.f32	s14, s11, s14
 80095e8:	ee76 7a26 	vadd.f32	s15, s12, s13
 80095ec:	42ac      	cmp	r4, r5
 80095ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095f2:	edc1 7a00 	vstr	s15, [r1]
 80095f6:	4439      	add	r1, r7
 80095f8:	d1e1      	bne.n	80095be <arm_correlate_f32+0x10e>
 80095fa:	9900      	ldr	r1, [sp, #0]
 80095fc:	449c      	add	ip, r3
 80095fe:	fb07 ee01 	mla	lr, r7, r1, lr
 8009602:	2e00      	cmp	r6, #0
 8009604:	f040 814c 	bne.w	80098a0 <arm_correlate_f32+0x3f0>
 8009608:	b007      	add	sp, #28
 800960a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800960e:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8009612:	3802      	subs	r0, #2
 8009614:	4666      	mov	r6, ip
 8009616:	4408      	add	r0, r1
 8009618:	460d      	mov	r5, r1
 800961a:	4694      	mov	ip, r2
 800961c:	4619      	mov	r1, r3
 800961e:	eb04 0e80 	add.w	lr, r4, r0, lsl #2
 8009622:	4632      	mov	r2, r6
 8009624:	f06f 0703 	mvn.w	r7, #3
 8009628:	462b      	mov	r3, r5
 800962a:	e74e      	b.n	80094ca <arm_correlate_f32+0x1a>
 800962c:	0889      	lsrs	r1, r1, #2
 800962e:	9101      	str	r1, [sp, #4]
 8009630:	f000 8187 	beq.w	8009942 <arm_correlate_f32+0x492>
 8009634:	0109      	lsls	r1, r1, #4
 8009636:	ea4f 0a93 	mov.w	sl, r3, lsr #2
 800963a:	9102      	str	r1, [sp, #8]
 800963c:	ea4f 1b0a 	mov.w	fp, sl, lsl #4
 8009640:	310c      	adds	r1, #12
 8009642:	4461      	add	r1, ip
 8009644:	f003 0903 	and.w	r9, r3, #3
 8009648:	eb02 000b 	add.w	r0, r2, fp
 800964c:	f102 0410 	add.w	r4, r2, #16
 8009650:	f10c 050c 	add.w	r5, ip, #12
 8009654:	46f0      	mov	r8, lr
 8009656:	f8cd e00c 	str.w	lr, [sp, #12]
 800965a:	9604      	str	r6, [sp, #16]
 800965c:	f8cd c014 	str.w	ip, [sp, #20]
 8009660:	464e      	mov	r6, r9
 8009662:	468e      	mov	lr, r1
 8009664:	4681      	mov	r9, r0
 8009666:	46a4      	mov	ip, r4
 8009668:	eddf 5a09 	vldr	s11, [pc, #36]	; 8009690 <arm_correlate_f32+0x1e0>
 800966c:	ed55 2a03 	vldr	s5, [r5, #-12]
 8009670:	ed15 2a02 	vldr	s4, [r5, #-8]
 8009674:	ed55 1a01 	vldr	s3, [r5, #-4]
 8009678:	ed95 5a00 	vldr	s10, [r5]
 800967c:	eef0 4a65 	vmov.f32	s9, s11
 8009680:	eef0 3a65 	vmov.f32	s7, s11
 8009684:	eeb0 1a65 	vmov.f32	s2, s11
 8009688:	4661      	mov	r1, ip
 800968a:	4628      	mov	r0, r5
 800968c:	4654      	mov	r4, sl
 800968e:	e004      	b.n	800969a <arm_correlate_f32+0x1ea>
 8009690:	00000000 	.word	0x00000000
 8009694:	3010      	adds	r0, #16
 8009696:	ed90 5a00 	vldr	s10, [r0]
 800969a:	ed11 6a04 	vldr	s12, [r1, #-16]
 800969e:	ed51 6a03 	vldr	s13, [r1, #-12]
 80096a2:	ed11 7a02 	vldr	s14, [r1, #-8]
 80096a6:	ed51 7a01 	vldr	s15, [r1, #-4]
 80096aa:	ee62 0a86 	vmul.f32	s1, s5, s12
 80096ae:	ee22 3a06 	vmul.f32	s6, s4, s12
 80096b2:	ee21 4a86 	vmul.f32	s8, s3, s12
 80096b6:	edd0 2a01 	vldr	s5, [r0, #4]
 80096ba:	ee25 6a06 	vmul.f32	s12, s10, s12
 80096be:	ee30 1a81 	vadd.f32	s2, s1, s2
 80096c2:	ee73 3a23 	vadd.f32	s7, s6, s7
 80096c6:	ee62 0a26 	vmul.f32	s1, s4, s13
 80096ca:	ee21 3aa6 	vmul.f32	s6, s3, s13
 80096ce:	ee74 4a24 	vadd.f32	s9, s8, s9
 80096d2:	ee76 5a25 	vadd.f32	s11, s12, s11
 80096d6:	ed90 2a02 	vldr	s4, [r0, #8]
 80096da:	ee25 6a26 	vmul.f32	s12, s10, s13
 80096de:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80096e2:	ee30 1a81 	vadd.f32	s2, s1, s2
 80096e6:	ee73 3a23 	vadd.f32	s7, s6, s7
 80096ea:	ee61 0a87 	vmul.f32	s1, s3, s14
 80096ee:	ee25 4a07 	vmul.f32	s8, s10, s14
 80096f2:	ee76 4a24 	vadd.f32	s9, s12, s9
 80096f6:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80096fa:	edd0 1a03 	vldr	s3, [r0, #12]
 80096fe:	ee62 6a87 	vmul.f32	s13, s5, s14
 8009702:	ee22 7a07 	vmul.f32	s14, s4, s14
 8009706:	ee25 5a27 	vmul.f32	s10, s10, s15
 800970a:	ee34 6a23 	vadd.f32	s12, s8, s7
 800970e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009712:	ee62 3aa7 	vmul.f32	s7, s5, s15
 8009716:	ee62 4a27 	vmul.f32	s9, s4, s15
 800971a:	ee30 3a81 	vadd.f32	s6, s1, s2
 800971e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8009722:	ee61 7aa7 	vmul.f32	s15, s3, s15
 8009726:	3c01      	subs	r4, #1
 8009728:	f101 0110 	add.w	r1, r1, #16
 800972c:	ee35 1a03 	vadd.f32	s2, s10, s6
 8009730:	ee73 3a86 	vadd.f32	s7, s7, s12
 8009734:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8009738:	ee77 5a87 	vadd.f32	s11, s15, s14
 800973c:	d1aa      	bne.n	8009694 <arm_correlate_f32+0x1e4>
 800973e:	eb05 000b 	add.w	r0, r5, fp
 8009742:	b1ee      	cbz	r6, 8009780 <arm_correlate_f32+0x2d0>
 8009744:	4631      	mov	r1, r6
 8009746:	464c      	mov	r4, r9
 8009748:	ecf4 7a01 	vldmia	r4!, {s15}
 800974c:	ecb0 7a01 	vldmia	r0!, {s14}
 8009750:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8009754:	ee22 6a27 	vmul.f32	s12, s4, s15
 8009758:	ee61 6aa7 	vmul.f32	s13, s3, s15
 800975c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009760:	3901      	subs	r1, #1
 8009762:	ee31 1a22 	vadd.f32	s2, s2, s5
 8009766:	ee73 3a86 	vadd.f32	s7, s7, s12
 800976a:	eef0 2a42 	vmov.f32	s5, s4
 800976e:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8009772:	eeb0 2a61 	vmov.f32	s4, s3
 8009776:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800977a:	eef0 1a47 	vmov.f32	s3, s14
 800977e:	d1e3      	bne.n	8009748 <arm_correlate_f32+0x298>
 8009780:	eb08 0107 	add.w	r1, r8, r7
 8009784:	19c8      	adds	r0, r1, r7
 8009786:	3510      	adds	r5, #16
 8009788:	ed88 1a00 	vstr	s2, [r8]
 800978c:	4575      	cmp	r5, lr
 800978e:	eb00 0807 	add.w	r8, r0, r7
 8009792:	edc1 3a00 	vstr	s7, [r1]
 8009796:	edc0 4a00 	vstr	s9, [r0]
 800979a:	edc8 5a00 	vstr	s11, [r8]
 800979e:	44b8      	add	r8, r7
 80097a0:	f47f af62 	bne.w	8009668 <arm_correlate_f32+0x1b8>
 80097a4:	f8dd c014 	ldr.w	ip, [sp, #20]
 80097a8:	9802      	ldr	r0, [sp, #8]
 80097aa:	9c01      	ldr	r4, [sp, #4]
 80097ac:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80097b0:	9e04      	ldr	r6, [sp, #16]
 80097b2:	00b9      	lsls	r1, r7, #2
 80097b4:	4460      	add	r0, ip
 80097b6:	4605      	mov	r5, r0
 80097b8:	fb04 ee01 	mla	lr, r4, r1, lr
 80097bc:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80097c0:	9900      	ldr	r1, [sp, #0]
 80097c2:	f011 0103 	ands.w	r1, r1, #3
 80097c6:	9101      	str	r1, [sp, #4]
 80097c8:	d064      	beq.n	8009894 <arm_correlate_f32+0x3e4>
 80097ca:	ea4f 0b93 	mov.w	fp, r3, lsr #2
 80097ce:	3101      	adds	r1, #1
 80097d0:	4441      	add	r1, r8
 80097d2:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 80097d6:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 80097da:	f108 0801 	add.w	r8, r8, #1
 80097de:	f003 0003 	and.w	r0, r3, #3
 80097e2:	f102 0410 	add.w	r4, r2, #16
 80097e6:	eb02 030a 	add.w	r3, r2, sl
 80097ea:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
 80097ee:	46f1      	mov	r9, lr
 80097f0:	f8cd e008 	str.w	lr, [sp, #8]
 80097f4:	9603      	str	r6, [sp, #12]
 80097f6:	f8cd c010 	str.w	ip, [sp, #16]
 80097fa:	460e      	mov	r6, r1
 80097fc:	469c      	mov	ip, r3
 80097fe:	46a6      	mov	lr, r4
 8009800:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 8009690 <arm_correlate_f32+0x1e0>
 8009804:	f105 0110 	add.w	r1, r5, #16
 8009808:	4673      	mov	r3, lr
 800980a:	465c      	mov	r4, fp
 800980c:	ed53 6a04 	vldr	s13, [r3, #-16]
 8009810:	ed11 4a04 	vldr	s8, [r1, #-16]
 8009814:	ed51 3a03 	vldr	s7, [r1, #-12]
 8009818:	ed13 5a03 	vldr	s10, [r3, #-12]
 800981c:	ed51 4a02 	vldr	s9, [r1, #-8]
 8009820:	ed13 6a02 	vldr	s12, [r3, #-8]
 8009824:	ed51 5a01 	vldr	s11, [r1, #-4]
 8009828:	ed13 7a01 	vldr	s14, [r3, #-4]
 800982c:	ee24 4a26 	vmul.f32	s8, s8, s13
 8009830:	ee23 5a85 	vmul.f32	s10, s7, s10
 8009834:	ee74 6a27 	vadd.f32	s13, s8, s15
 8009838:	ee24 6a86 	vmul.f32	s12, s9, s12
 800983c:	ee75 6a26 	vadd.f32	s13, s10, s13
 8009840:	ee25 7a87 	vmul.f32	s14, s11, s14
 8009844:	ee76 7a26 	vadd.f32	s15, s12, s13
 8009848:	3c01      	subs	r4, #1
 800984a:	f101 0110 	add.w	r1, r1, #16
 800984e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009852:	f103 0310 	add.w	r3, r3, #16
 8009856:	d1d9      	bne.n	800980c <arm_correlate_f32+0x35c>
 8009858:	4455      	add	r5, sl
 800985a:	b158      	cbz	r0, 8009874 <arm_correlate_f32+0x3c4>
 800985c:	4603      	mov	r3, r0
 800985e:	4661      	mov	r1, ip
 8009860:	ecf5 6a01 	vldmia	r5!, {s13}
 8009864:	ecb1 7a01 	vldmia	r1!, {s14}
 8009868:	ee26 7a87 	vmul.f32	s14, s13, s14
 800986c:	3b01      	subs	r3, #1
 800986e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009872:	d1f5      	bne.n	8009860 <arm_correlate_f32+0x3b0>
 8009874:	4645      	mov	r5, r8
 8009876:	f108 0804 	add.w	r8, r8, #4
 800987a:	45b0      	cmp	r8, r6
 800987c:	edc9 7a00 	vstr	s15, [r9]
 8009880:	44b9      	add	r9, r7
 8009882:	d1bd      	bne.n	8009800 <arm_correlate_f32+0x350>
 8009884:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009888:	9b01      	ldr	r3, [sp, #4]
 800988a:	9e03      	ldr	r6, [sp, #12]
 800988c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009890:	fb07 ee03 	mla	lr, r7, r3, lr
 8009894:	9b00      	ldr	r3, [sp, #0]
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	449c      	add	ip, r3
 800989a:	2e00      	cmp	r6, #0
 800989c:	f43f aeb4 	beq.w	8009608 <arm_correlate_f32+0x158>
 80098a0:	08b4      	lsrs	r4, r6, #2
 80098a2:	ed5f 7a85 	vldr	s15, [pc, #-532]	; 8009690 <arm_correlate_f32+0x1e0>
 80098a6:	d047      	beq.n	8009938 <arm_correlate_f32+0x488>
 80098a8:	f10c 0110 	add.w	r1, ip, #16
 80098ac:	f102 0310 	add.w	r3, r2, #16
 80098b0:	4620      	mov	r0, r4
 80098b2:	ed53 6a04 	vldr	s13, [r3, #-16]
 80098b6:	ed11 4a04 	vldr	s8, [r1, #-16]
 80098ba:	ed51 3a03 	vldr	s7, [r1, #-12]
 80098be:	ed13 5a03 	vldr	s10, [r3, #-12]
 80098c2:	ed51 4a02 	vldr	s9, [r1, #-8]
 80098c6:	ed13 6a02 	vldr	s12, [r3, #-8]
 80098ca:	ed51 5a01 	vldr	s11, [r1, #-4]
 80098ce:	ed13 7a01 	vldr	s14, [r3, #-4]
 80098d2:	ee24 4a26 	vmul.f32	s8, s8, s13
 80098d6:	ee23 5a85 	vmul.f32	s10, s7, s10
 80098da:	ee74 6a27 	vadd.f32	s13, s8, s15
 80098de:	ee24 6a86 	vmul.f32	s12, s9, s12
 80098e2:	ee75 6a26 	vadd.f32	s13, s10, s13
 80098e6:	ee25 7a87 	vmul.f32	s14, s11, s14
 80098ea:	ee76 7a26 	vadd.f32	s15, s12, s13
 80098ee:	3801      	subs	r0, #1
 80098f0:	f101 0110 	add.w	r1, r1, #16
 80098f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098f8:	f103 0310 	add.w	r3, r3, #16
 80098fc:	d1d9      	bne.n	80098b2 <arm_correlate_f32+0x402>
 80098fe:	0121      	lsls	r1, r4, #4
 8009900:	eb0c 0001 	add.w	r0, ip, r1
 8009904:	4411      	add	r1, r2
 8009906:	f016 0303 	ands.w	r3, r6, #3
 800990a:	d009      	beq.n	8009920 <arm_correlate_f32+0x470>
 800990c:	ecf0 6a01 	vldmia	r0!, {s13}
 8009910:	ecb1 7a01 	vldmia	r1!, {s14}
 8009914:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009918:	3b01      	subs	r3, #1
 800991a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800991e:	d1f5      	bne.n	800990c <arm_correlate_f32+0x45c>
 8009920:	3e01      	subs	r6, #1
 8009922:	edce 7a00 	vstr	s15, [lr]
 8009926:	f10c 0c04 	add.w	ip, ip, #4
 800992a:	44be      	add	lr, r7
 800992c:	f43f ae6c 	beq.w	8009608 <arm_correlate_f32+0x158>
 8009930:	08b4      	lsrs	r4, r6, #2
 8009932:	ed5f 7aa9 	vldr	s15, [pc, #-676]	; 8009690 <arm_correlate_f32+0x1e0>
 8009936:	d1b7      	bne.n	80098a8 <arm_correlate_f32+0x3f8>
 8009938:	4611      	mov	r1, r2
 800993a:	4660      	mov	r0, ip
 800993c:	e7e3      	b.n	8009906 <arm_correlate_f32+0x456>
 800993e:	460b      	mov	r3, r1
 8009940:	e7aa      	b.n	8009898 <arm_correlate_f32+0x3e8>
 8009942:	4688      	mov	r8, r1
 8009944:	4665      	mov	r5, ip
 8009946:	e73b      	b.n	80097c0 <arm_correlate_f32+0x310>
 8009948:	9900      	ldr	r1, [sp, #0]
 800994a:	2000      	movs	r0, #0
 800994c:	4673      	mov	r3, lr
 800994e:	3901      	subs	r1, #1
 8009950:	6018      	str	r0, [r3, #0]
 8009952:	443b      	add	r3, r7
 8009954:	d1fb      	bne.n	800994e <arm_correlate_f32+0x49e>
 8009956:	9900      	ldr	r1, [sp, #0]
 8009958:	fb07 ee01 	mla	lr, r7, r1, lr
 800995c:	008b      	lsls	r3, r1, #2
 800995e:	e79b      	b.n	8009898 <arm_correlate_f32+0x3e8>
 8009960:	9b00      	ldr	r3, [sp, #0]
 8009962:	ed5f 6ab5 	vldr	s13, [pc, #-724]	; 8009690 <arm_correlate_f32+0x1e0>
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	eb0c 0403 	add.w	r4, ip, r3
 800996c:	4660      	mov	r0, ip
 800996e:	4671      	mov	r1, lr
 8009970:	ecb0 7a01 	vldmia	r0!, {s14}
 8009974:	edd2 7a00 	vldr	s15, [r2]
 8009978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997c:	42a0      	cmp	r0, r4
 800997e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009982:	edc1 7a00 	vstr	s15, [r1]
 8009986:	4439      	add	r1, r7
 8009988:	d1f2      	bne.n	8009970 <arm_correlate_f32+0x4c0>
 800998a:	e636      	b.n	80095fa <arm_correlate_f32+0x14a>
 800998c:	ed5f 5ac0 	vldr	s11, [pc, #-768]	; 8009690 <arm_correlate_f32+0x1e0>
 8009990:	eb0c 0403 	add.w	r4, ip, r3
 8009994:	4661      	mov	r1, ip
 8009996:	4670      	mov	r0, lr
 8009998:	ed91 6a00 	vldr	s12, [r1]
 800999c:	ed92 7a00 	vldr	s14, [r2]
 80099a0:	edd1 6a01 	vldr	s13, [r1, #4]
 80099a4:	edd2 7a01 	vldr	s15, [r2, #4]
 80099a8:	3104      	adds	r1, #4
 80099aa:	ee26 7a07 	vmul.f32	s14, s12, s14
 80099ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099b2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80099b6:	42a1      	cmp	r1, r4
 80099b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099bc:	edc0 7a00 	vstr	s15, [r0]
 80099c0:	4438      	add	r0, r7
 80099c2:	d1e9      	bne.n	8009998 <arm_correlate_f32+0x4e8>
 80099c4:	e619      	b.n	80095fa <arm_correlate_f32+0x14a>
 80099c6:	4664      	mov	r4, ip
 80099c8:	e5da      	b.n	8009580 <arm_correlate_f32+0xd0>
 80099ca:	bf00      	nop

080099cc <arm_biquad_cascade_df1_init_f32>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4604      	mov	r4, r0
 80099d0:	6082      	str	r2, [r0, #8]
 80099d2:	6001      	str	r1, [r0, #0]
 80099d4:	461d      	mov	r5, r3
 80099d6:	010a      	lsls	r2, r1, #4
 80099d8:	4618      	mov	r0, r3
 80099da:	2100      	movs	r1, #0
 80099dc:	f000 f950 	bl	8009c80 <memset>
 80099e0:	6065      	str	r5, [r4, #4]
 80099e2:	bd38      	pop	{r3, r4, r5, pc}

080099e4 <arm_biquad_cascade_df1_f32>:
 80099e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099e8:	ed2d 8b02 	vpush	{d8}
 80099ec:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80099f0:	6886      	ldr	r6, [r0, #8]
 80099f2:	6845      	ldr	r5, [r0, #4]
 80099f4:	6807      	ldr	r7, [r0, #0]
 80099f6:	4696      	mov	lr, r2
 80099f8:	ea4f 180c 	mov.w	r8, ip, lsl #4
 80099fc:	f003 0203 	and.w	r2, r3, #3
 8009a00:	eb0e 0908 	add.w	r9, lr, r8
 8009a04:	3614      	adds	r6, #20
 8009a06:	3510      	adds	r5, #16
 8009a08:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8009a0c:	ed56 1a04 	vldr	s3, [r6, #-16]
 8009a10:	ed16 1a03 	vldr	s2, [r6, #-12]
 8009a14:	ed56 0a02 	vldr	s1, [r6, #-8]
 8009a18:	ed16 0a01 	vldr	s0, [r6, #-4]
 8009a1c:	ed15 8a04 	vldr	s16, [r5, #-16]
 8009a20:	ed55 8a03 	vldr	s17, [r5, #-12]
 8009a24:	ed15 7a02 	vldr	s14, [r5, #-8]
 8009a28:	ed55 7a01 	vldr	s15, [r5, #-4]
 8009a2c:	f1bc 0f00 	cmp.w	ip, #0
 8009a30:	f000 80a5 	beq.w	8009b7e <arm_biquad_cascade_df1_f32+0x19a>
 8009a34:	f101 0010 	add.w	r0, r1, #16
 8009a38:	f10e 0310 	add.w	r3, lr, #16
 8009a3c:	4664      	mov	r4, ip
 8009a3e:	ed50 3a04 	vldr	s7, [r0, #-16]
 8009a42:	ee21 6a88 	vmul.f32	s12, s3, s16
 8009a46:	ee22 5a23 	vmul.f32	s10, s4, s7
 8009a4a:	ee61 8a28 	vmul.f32	s17, s2, s17
 8009a4e:	ee35 6a06 	vadd.f32	s12, s10, s12
 8009a52:	ee60 6a87 	vmul.f32	s13, s1, s14
 8009a56:	ee36 6a28 	vadd.f32	s12, s12, s17
 8009a5a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009a5e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8009a62:	ee61 6aa3 	vmul.f32	s13, s3, s7
 8009a66:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8009a6a:	ee21 8a08 	vmul.f32	s16, s2, s16
 8009a6e:	ed43 7a04 	vstr	s15, [r3, #-16]
 8009a72:	ed50 2a03 	vldr	s5, [r0, #-12]
 8009a76:	ee22 6a22 	vmul.f32	s12, s4, s5
 8009a7a:	ee60 5aa7 	vmul.f32	s11, s1, s15
 8009a7e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8009a82:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009a86:	ee76 6a08 	vadd.f32	s13, s12, s16
 8009a8a:	ee21 3aa2 	vmul.f32	s6, s3, s5
 8009a8e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009a92:	ee21 8a23 	vmul.f32	s16, s2, s7
 8009a96:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009a9a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009a9e:	ed03 7a03 	vstr	s14, [r3, #-12]
 8009aa2:	ed50 8a02 	vldr	s17, [r0, #-8]
 8009aa6:	ee62 3a28 	vmul.f32	s7, s4, s17
 8009aaa:	ee20 6a87 	vmul.f32	s12, s1, s14
 8009aae:	ee33 3a83 	vadd.f32	s6, s7, s6
 8009ab2:	ee21 4aa8 	vmul.f32	s8, s3, s17
 8009ab6:	ee73 6a08 	vadd.f32	s13, s6, s16
 8009aba:	ee61 2a22 	vmul.f32	s5, s2, s5
 8009abe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009ac2:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aca:	3c01      	subs	r4, #1
 8009acc:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009ad0:	ed10 8a01 	vldr	s16, [r0, #-4]
 8009ad4:	ee62 3a08 	vmul.f32	s7, s4, s16
 8009ad8:	ee60 6aa7 	vmul.f32	s13, s1, s15
 8009adc:	ee73 3a84 	vadd.f32	s7, s7, s8
 8009ae0:	f100 0010 	add.w	r0, r0, #16
 8009ae4:	ee33 4aa2 	vadd.f32	s8, s7, s5
 8009ae8:	f103 0310 	add.w	r3, r3, #16
 8009aec:	ee34 4a26 	vadd.f32	s8, s8, s13
 8009af0:	ee34 7a07 	vadd.f32	s14, s8, s14
 8009af4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8009af8:	d1a1      	bne.n	8009a3e <arm_biquad_cascade_df1_f32+0x5a>
 8009afa:	4441      	add	r1, r8
 8009afc:	4648      	mov	r0, r9
 8009afe:	b3aa      	cbz	r2, 8009b6c <arm_biquad_cascade_df1_f32+0x188>
 8009b00:	4613      	mov	r3, r2
 8009b02:	e003      	b.n	8009b0c <arm_biquad_cascade_df1_f32+0x128>
 8009b04:	eeb0 7a45 	vmov.f32	s14, s10
 8009b08:	eeb0 8a43 	vmov.f32	s16, s6
 8009b0c:	ecb1 3a01 	vldmia	r1!, {s6}
 8009b10:	ee21 6a88 	vmul.f32	s12, s3, s16
 8009b14:	ee62 3a03 	vmul.f32	s7, s4, s6
 8009b18:	ee61 8a28 	vmul.f32	s17, s2, s17
 8009b1c:	ee33 4a86 	vadd.f32	s8, s7, s12
 8009b20:	ee60 4a87 	vmul.f32	s9, s1, s14
 8009b24:	ee34 6a28 	vadd.f32	s12, s8, s17
 8009b28:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009b2c:	ee76 4a24 	vadd.f32	s9, s12, s9
 8009b30:	3b01      	subs	r3, #1
 8009b32:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009b36:	eef0 8a48 	vmov.f32	s17, s16
 8009b3a:	eef0 7a47 	vmov.f32	s15, s14
 8009b3e:	eca0 5a01 	vstmia	r0!, {s10}
 8009b42:	d1df      	bne.n	8009b04 <arm_biquad_cascade_df1_f32+0x120>
 8009b44:	3f01      	subs	r7, #1
 8009b46:	ed05 3a04 	vstr	s6, [r5, #-16]
 8009b4a:	ed05 8a03 	vstr	s16, [r5, #-12]
 8009b4e:	ed05 5a02 	vstr	s10, [r5, #-8]
 8009b52:	ed05 7a01 	vstr	s14, [r5, #-4]
 8009b56:	f106 0614 	add.w	r6, r6, #20
 8009b5a:	f105 0510 	add.w	r5, r5, #16
 8009b5e:	4671      	mov	r1, lr
 8009b60:	f47f af52 	bne.w	8009a08 <arm_biquad_cascade_df1_f32+0x24>
 8009b64:	ecbd 8b02 	vpop	{d8}
 8009b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b6c:	eeb0 5a47 	vmov.f32	s10, s14
 8009b70:	eeb0 3a48 	vmov.f32	s6, s16
 8009b74:	eeb0 7a67 	vmov.f32	s14, s15
 8009b78:	eeb0 8a68 	vmov.f32	s16, s17
 8009b7c:	e7e2      	b.n	8009b44 <arm_biquad_cascade_df1_f32+0x160>
 8009b7e:	4670      	mov	r0, lr
 8009b80:	e7bd      	b.n	8009afe <arm_biquad_cascade_df1_f32+0x11a>
 8009b82:	bf00      	nop

08009b84 <arm_mult_f32>:
 8009b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b86:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8009b8a:	d033      	beq.n	8009bf4 <arm_mult_f32+0x70>
 8009b8c:	f100 0610 	add.w	r6, r0, #16
 8009b90:	f101 0510 	add.w	r5, r1, #16
 8009b94:	f102 0410 	add.w	r4, r2, #16
 8009b98:	4677      	mov	r7, lr
 8009b9a:	ed16 6a04 	vldr	s12, [r6, #-16]
 8009b9e:	ed55 4a04 	vldr	s9, [r5, #-16]
 8009ba2:	ed56 6a02 	vldr	s13, [r6, #-8]
 8009ba6:	ed15 5a02 	vldr	s10, [r5, #-8]
 8009baa:	ed16 7a03 	vldr	s14, [r6, #-12]
 8009bae:	ed55 5a03 	vldr	s11, [r5, #-12]
 8009bb2:	ed56 7a01 	vldr	s15, [r6, #-4]
 8009bb6:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009bba:	ee66 6a85 	vmul.f32	s13, s13, s10
 8009bbe:	ed04 6a04 	vstr	s12, [r4, #-16]
 8009bc2:	ed15 6a01 	vldr	s12, [r5, #-4]
 8009bc6:	ed44 6a02 	vstr	s13, [r4, #-8]
 8009bca:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009bce:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009bd2:	3f01      	subs	r7, #1
 8009bd4:	ed04 7a03 	vstr	s14, [r4, #-12]
 8009bd8:	ed44 7a01 	vstr	s15, [r4, #-4]
 8009bdc:	f106 0610 	add.w	r6, r6, #16
 8009be0:	f105 0510 	add.w	r5, r5, #16
 8009be4:	f104 0410 	add.w	r4, r4, #16
 8009be8:	d1d7      	bne.n	8009b9a <arm_mult_f32+0x16>
 8009bea:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009bee:	4420      	add	r0, r4
 8009bf0:	4421      	add	r1, r4
 8009bf2:	4422      	add	r2, r4
 8009bf4:	f013 0303 	ands.w	r3, r3, #3
 8009bf8:	d009      	beq.n	8009c0e <arm_mult_f32+0x8a>
 8009bfa:	ecf0 7a01 	vldmia	r0!, {s15}
 8009bfe:	ecb1 7a01 	vldmia	r1!, {s14}
 8009c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c06:	3b01      	subs	r3, #1
 8009c08:	ece2 7a01 	vstmia	r2!, {s15}
 8009c0c:	d1f5      	bne.n	8009bfa <arm_mult_f32+0x76>
 8009c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c10 <__errno>:
 8009c10:	4b01      	ldr	r3, [pc, #4]	; (8009c18 <__errno+0x8>)
 8009c12:	6818      	ldr	r0, [r3, #0]
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	20000034 	.word	0x20000034

08009c1c <__libc_init_array>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	4d0d      	ldr	r5, [pc, #52]	; (8009c54 <__libc_init_array+0x38>)
 8009c20:	4c0d      	ldr	r4, [pc, #52]	; (8009c58 <__libc_init_array+0x3c>)
 8009c22:	1b64      	subs	r4, r4, r5
 8009c24:	10a4      	asrs	r4, r4, #2
 8009c26:	2600      	movs	r6, #0
 8009c28:	42a6      	cmp	r6, r4
 8009c2a:	d109      	bne.n	8009c40 <__libc_init_array+0x24>
 8009c2c:	4d0b      	ldr	r5, [pc, #44]	; (8009c5c <__libc_init_array+0x40>)
 8009c2e:	4c0c      	ldr	r4, [pc, #48]	; (8009c60 <__libc_init_array+0x44>)
 8009c30:	f003 fdc6 	bl	800d7c0 <_init>
 8009c34:	1b64      	subs	r4, r4, r5
 8009c36:	10a4      	asrs	r4, r4, #2
 8009c38:	2600      	movs	r6, #0
 8009c3a:	42a6      	cmp	r6, r4
 8009c3c:	d105      	bne.n	8009c4a <__libc_init_array+0x2e>
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
 8009c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c44:	4798      	blx	r3
 8009c46:	3601      	adds	r6, #1
 8009c48:	e7ee      	b.n	8009c28 <__libc_init_array+0xc>
 8009c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c4e:	4798      	blx	r3
 8009c50:	3601      	adds	r6, #1
 8009c52:	e7f2      	b.n	8009c3a <__libc_init_array+0x1e>
 8009c54:	0800fd60 	.word	0x0800fd60
 8009c58:	0800fd60 	.word	0x0800fd60
 8009c5c:	0800fd60 	.word	0x0800fd60
 8009c60:	0800fd64 	.word	0x0800fd64

08009c64 <memcpy>:
 8009c64:	440a      	add	r2, r1
 8009c66:	4291      	cmp	r1, r2
 8009c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009c6c:	d100      	bne.n	8009c70 <memcpy+0xc>
 8009c6e:	4770      	bx	lr
 8009c70:	b510      	push	{r4, lr}
 8009c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c7a:	4291      	cmp	r1, r2
 8009c7c:	d1f9      	bne.n	8009c72 <memcpy+0xe>
 8009c7e:	bd10      	pop	{r4, pc}

08009c80 <memset>:
 8009c80:	4402      	add	r2, r0
 8009c82:	4603      	mov	r3, r0
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d100      	bne.n	8009c8a <memset+0xa>
 8009c88:	4770      	bx	lr
 8009c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c8e:	e7f9      	b.n	8009c84 <memset+0x4>

08009c90 <__cvt>:
 8009c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c94:	ec55 4b10 	vmov	r4, r5, d0
 8009c98:	2d00      	cmp	r5, #0
 8009c9a:	460e      	mov	r6, r1
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	462b      	mov	r3, r5
 8009ca0:	bfbb      	ittet	lt
 8009ca2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009ca6:	461d      	movlt	r5, r3
 8009ca8:	2300      	movge	r3, #0
 8009caa:	232d      	movlt	r3, #45	; 0x2d
 8009cac:	700b      	strb	r3, [r1, #0]
 8009cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cb0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009cb4:	4691      	mov	r9, r2
 8009cb6:	f023 0820 	bic.w	r8, r3, #32
 8009cba:	bfbc      	itt	lt
 8009cbc:	4622      	movlt	r2, r4
 8009cbe:	4614      	movlt	r4, r2
 8009cc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009cc4:	d005      	beq.n	8009cd2 <__cvt+0x42>
 8009cc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009cca:	d100      	bne.n	8009cce <__cvt+0x3e>
 8009ccc:	3601      	adds	r6, #1
 8009cce:	2102      	movs	r1, #2
 8009cd0:	e000      	b.n	8009cd4 <__cvt+0x44>
 8009cd2:	2103      	movs	r1, #3
 8009cd4:	ab03      	add	r3, sp, #12
 8009cd6:	9301      	str	r3, [sp, #4]
 8009cd8:	ab02      	add	r3, sp, #8
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	ec45 4b10 	vmov	d0, r4, r5
 8009ce0:	4653      	mov	r3, sl
 8009ce2:	4632      	mov	r2, r6
 8009ce4:	f000 fdac 	bl	800a840 <_dtoa_r>
 8009ce8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009cec:	4607      	mov	r7, r0
 8009cee:	d102      	bne.n	8009cf6 <__cvt+0x66>
 8009cf0:	f019 0f01 	tst.w	r9, #1
 8009cf4:	d022      	beq.n	8009d3c <__cvt+0xac>
 8009cf6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009cfa:	eb07 0906 	add.w	r9, r7, r6
 8009cfe:	d110      	bne.n	8009d22 <__cvt+0x92>
 8009d00:	783b      	ldrb	r3, [r7, #0]
 8009d02:	2b30      	cmp	r3, #48	; 0x30
 8009d04:	d10a      	bne.n	8009d1c <__cvt+0x8c>
 8009d06:	2200      	movs	r2, #0
 8009d08:	2300      	movs	r3, #0
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	f7f6 fedb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d12:	b918      	cbnz	r0, 8009d1c <__cvt+0x8c>
 8009d14:	f1c6 0601 	rsb	r6, r6, #1
 8009d18:	f8ca 6000 	str.w	r6, [sl]
 8009d1c:	f8da 3000 	ldr.w	r3, [sl]
 8009d20:	4499      	add	r9, r3
 8009d22:	2200      	movs	r2, #0
 8009d24:	2300      	movs	r3, #0
 8009d26:	4620      	mov	r0, r4
 8009d28:	4629      	mov	r1, r5
 8009d2a:	f7f6 fecd 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d2e:	b108      	cbz	r0, 8009d34 <__cvt+0xa4>
 8009d30:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d34:	2230      	movs	r2, #48	; 0x30
 8009d36:	9b03      	ldr	r3, [sp, #12]
 8009d38:	454b      	cmp	r3, r9
 8009d3a:	d307      	bcc.n	8009d4c <__cvt+0xbc>
 8009d3c:	9b03      	ldr	r3, [sp, #12]
 8009d3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d40:	1bdb      	subs	r3, r3, r7
 8009d42:	4638      	mov	r0, r7
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	b004      	add	sp, #16
 8009d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d4c:	1c59      	adds	r1, r3, #1
 8009d4e:	9103      	str	r1, [sp, #12]
 8009d50:	701a      	strb	r2, [r3, #0]
 8009d52:	e7f0      	b.n	8009d36 <__cvt+0xa6>

08009d54 <__exponent>:
 8009d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d56:	4603      	mov	r3, r0
 8009d58:	2900      	cmp	r1, #0
 8009d5a:	bfb8      	it	lt
 8009d5c:	4249      	neglt	r1, r1
 8009d5e:	f803 2b02 	strb.w	r2, [r3], #2
 8009d62:	bfb4      	ite	lt
 8009d64:	222d      	movlt	r2, #45	; 0x2d
 8009d66:	222b      	movge	r2, #43	; 0x2b
 8009d68:	2909      	cmp	r1, #9
 8009d6a:	7042      	strb	r2, [r0, #1]
 8009d6c:	dd2a      	ble.n	8009dc4 <__exponent+0x70>
 8009d6e:	f10d 0407 	add.w	r4, sp, #7
 8009d72:	46a4      	mov	ip, r4
 8009d74:	270a      	movs	r7, #10
 8009d76:	46a6      	mov	lr, r4
 8009d78:	460a      	mov	r2, r1
 8009d7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009d7e:	fb07 1516 	mls	r5, r7, r6, r1
 8009d82:	3530      	adds	r5, #48	; 0x30
 8009d84:	2a63      	cmp	r2, #99	; 0x63
 8009d86:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009d8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009d8e:	4631      	mov	r1, r6
 8009d90:	dcf1      	bgt.n	8009d76 <__exponent+0x22>
 8009d92:	3130      	adds	r1, #48	; 0x30
 8009d94:	f1ae 0502 	sub.w	r5, lr, #2
 8009d98:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009d9c:	1c44      	adds	r4, r0, #1
 8009d9e:	4629      	mov	r1, r5
 8009da0:	4561      	cmp	r1, ip
 8009da2:	d30a      	bcc.n	8009dba <__exponent+0x66>
 8009da4:	f10d 0209 	add.w	r2, sp, #9
 8009da8:	eba2 020e 	sub.w	r2, r2, lr
 8009dac:	4565      	cmp	r5, ip
 8009dae:	bf88      	it	hi
 8009db0:	2200      	movhi	r2, #0
 8009db2:	4413      	add	r3, r2
 8009db4:	1a18      	subs	r0, r3, r0
 8009db6:	b003      	add	sp, #12
 8009db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dbe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009dc2:	e7ed      	b.n	8009da0 <__exponent+0x4c>
 8009dc4:	2330      	movs	r3, #48	; 0x30
 8009dc6:	3130      	adds	r1, #48	; 0x30
 8009dc8:	7083      	strb	r3, [r0, #2]
 8009dca:	70c1      	strb	r1, [r0, #3]
 8009dcc:	1d03      	adds	r3, r0, #4
 8009dce:	e7f1      	b.n	8009db4 <__exponent+0x60>

08009dd0 <_printf_float>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	ed2d 8b02 	vpush	{d8}
 8009dd8:	b08d      	sub	sp, #52	; 0x34
 8009dda:	460c      	mov	r4, r1
 8009ddc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009de0:	4616      	mov	r6, r2
 8009de2:	461f      	mov	r7, r3
 8009de4:	4605      	mov	r5, r0
 8009de6:	f001 fccf 	bl	800b788 <_localeconv_r>
 8009dea:	f8d0 a000 	ldr.w	sl, [r0]
 8009dee:	4650      	mov	r0, sl
 8009df0:	f7f6 f9ee 	bl	80001d0 <strlen>
 8009df4:	2300      	movs	r3, #0
 8009df6:	930a      	str	r3, [sp, #40]	; 0x28
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	9305      	str	r3, [sp, #20]
 8009dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8009e00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009e04:	3307      	adds	r3, #7
 8009e06:	f023 0307 	bic.w	r3, r3, #7
 8009e0a:	f103 0208 	add.w	r2, r3, #8
 8009e0e:	f8c8 2000 	str.w	r2, [r8]
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009e1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e22:	9307      	str	r3, [sp, #28]
 8009e24:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e28:	ee08 0a10 	vmov	s16, r0
 8009e2c:	4b9f      	ldr	r3, [pc, #636]	; (800a0ac <_printf_float+0x2dc>)
 8009e2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e36:	f7f6 fe79 	bl	8000b2c <__aeabi_dcmpun>
 8009e3a:	bb88      	cbnz	r0, 8009ea0 <_printf_float+0xd0>
 8009e3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e40:	4b9a      	ldr	r3, [pc, #616]	; (800a0ac <_printf_float+0x2dc>)
 8009e42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e46:	f7f6 fe53 	bl	8000af0 <__aeabi_dcmple>
 8009e4a:	bb48      	cbnz	r0, 8009ea0 <_printf_float+0xd0>
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2300      	movs	r3, #0
 8009e50:	4640      	mov	r0, r8
 8009e52:	4649      	mov	r1, r9
 8009e54:	f7f6 fe42 	bl	8000adc <__aeabi_dcmplt>
 8009e58:	b110      	cbz	r0, 8009e60 <_printf_float+0x90>
 8009e5a:	232d      	movs	r3, #45	; 0x2d
 8009e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e60:	4b93      	ldr	r3, [pc, #588]	; (800a0b0 <_printf_float+0x2e0>)
 8009e62:	4894      	ldr	r0, [pc, #592]	; (800a0b4 <_printf_float+0x2e4>)
 8009e64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009e68:	bf94      	ite	ls
 8009e6a:	4698      	movls	r8, r3
 8009e6c:	4680      	movhi	r8, r0
 8009e6e:	2303      	movs	r3, #3
 8009e70:	6123      	str	r3, [r4, #16]
 8009e72:	9b05      	ldr	r3, [sp, #20]
 8009e74:	f023 0204 	bic.w	r2, r3, #4
 8009e78:	6022      	str	r2, [r4, #0]
 8009e7a:	f04f 0900 	mov.w	r9, #0
 8009e7e:	9700      	str	r7, [sp, #0]
 8009e80:	4633      	mov	r3, r6
 8009e82:	aa0b      	add	r2, sp, #44	; 0x2c
 8009e84:	4621      	mov	r1, r4
 8009e86:	4628      	mov	r0, r5
 8009e88:	f000 f9d8 	bl	800a23c <_printf_common>
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	f040 8090 	bne.w	8009fb2 <_printf_float+0x1e2>
 8009e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e96:	b00d      	add	sp, #52	; 0x34
 8009e98:	ecbd 8b02 	vpop	{d8}
 8009e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea0:	4642      	mov	r2, r8
 8009ea2:	464b      	mov	r3, r9
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	f7f6 fe40 	bl	8000b2c <__aeabi_dcmpun>
 8009eac:	b140      	cbz	r0, 8009ec0 <_printf_float+0xf0>
 8009eae:	464b      	mov	r3, r9
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	bfbc      	itt	lt
 8009eb4:	232d      	movlt	r3, #45	; 0x2d
 8009eb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009eba:	487f      	ldr	r0, [pc, #508]	; (800a0b8 <_printf_float+0x2e8>)
 8009ebc:	4b7f      	ldr	r3, [pc, #508]	; (800a0bc <_printf_float+0x2ec>)
 8009ebe:	e7d1      	b.n	8009e64 <_printf_float+0x94>
 8009ec0:	6863      	ldr	r3, [r4, #4]
 8009ec2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009ec6:	9206      	str	r2, [sp, #24]
 8009ec8:	1c5a      	adds	r2, r3, #1
 8009eca:	d13f      	bne.n	8009f4c <_printf_float+0x17c>
 8009ecc:	2306      	movs	r3, #6
 8009ece:	6063      	str	r3, [r4, #4]
 8009ed0:	9b05      	ldr	r3, [sp, #20]
 8009ed2:	6861      	ldr	r1, [r4, #4]
 8009ed4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009ed8:	2300      	movs	r3, #0
 8009eda:	9303      	str	r3, [sp, #12]
 8009edc:	ab0a      	add	r3, sp, #40	; 0x28
 8009ede:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009ee2:	ab09      	add	r3, sp, #36	; 0x24
 8009ee4:	ec49 8b10 	vmov	d0, r8, r9
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	6022      	str	r2, [r4, #0]
 8009eec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	f7ff fecd 	bl	8009c90 <__cvt>
 8009ef6:	9b06      	ldr	r3, [sp, #24]
 8009ef8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009efa:	2b47      	cmp	r3, #71	; 0x47
 8009efc:	4680      	mov	r8, r0
 8009efe:	d108      	bne.n	8009f12 <_printf_float+0x142>
 8009f00:	1cc8      	adds	r0, r1, #3
 8009f02:	db02      	blt.n	8009f0a <_printf_float+0x13a>
 8009f04:	6863      	ldr	r3, [r4, #4]
 8009f06:	4299      	cmp	r1, r3
 8009f08:	dd41      	ble.n	8009f8e <_printf_float+0x1be>
 8009f0a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009f0e:	fa5f fb8b 	uxtb.w	fp, fp
 8009f12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f16:	d820      	bhi.n	8009f5a <_printf_float+0x18a>
 8009f18:	3901      	subs	r1, #1
 8009f1a:	465a      	mov	r2, fp
 8009f1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f20:	9109      	str	r1, [sp, #36]	; 0x24
 8009f22:	f7ff ff17 	bl	8009d54 <__exponent>
 8009f26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f28:	1813      	adds	r3, r2, r0
 8009f2a:	2a01      	cmp	r2, #1
 8009f2c:	4681      	mov	r9, r0
 8009f2e:	6123      	str	r3, [r4, #16]
 8009f30:	dc02      	bgt.n	8009f38 <_printf_float+0x168>
 8009f32:	6822      	ldr	r2, [r4, #0]
 8009f34:	07d2      	lsls	r2, r2, #31
 8009f36:	d501      	bpl.n	8009f3c <_printf_float+0x16c>
 8009f38:	3301      	adds	r3, #1
 8009f3a:	6123      	str	r3, [r4, #16]
 8009f3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d09c      	beq.n	8009e7e <_printf_float+0xae>
 8009f44:	232d      	movs	r3, #45	; 0x2d
 8009f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f4a:	e798      	b.n	8009e7e <_printf_float+0xae>
 8009f4c:	9a06      	ldr	r2, [sp, #24]
 8009f4e:	2a47      	cmp	r2, #71	; 0x47
 8009f50:	d1be      	bne.n	8009ed0 <_printf_float+0x100>
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1bc      	bne.n	8009ed0 <_printf_float+0x100>
 8009f56:	2301      	movs	r3, #1
 8009f58:	e7b9      	b.n	8009ece <_printf_float+0xfe>
 8009f5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009f5e:	d118      	bne.n	8009f92 <_printf_float+0x1c2>
 8009f60:	2900      	cmp	r1, #0
 8009f62:	6863      	ldr	r3, [r4, #4]
 8009f64:	dd0b      	ble.n	8009f7e <_printf_float+0x1ae>
 8009f66:	6121      	str	r1, [r4, #16]
 8009f68:	b913      	cbnz	r3, 8009f70 <_printf_float+0x1a0>
 8009f6a:	6822      	ldr	r2, [r4, #0]
 8009f6c:	07d0      	lsls	r0, r2, #31
 8009f6e:	d502      	bpl.n	8009f76 <_printf_float+0x1a6>
 8009f70:	3301      	adds	r3, #1
 8009f72:	440b      	add	r3, r1
 8009f74:	6123      	str	r3, [r4, #16]
 8009f76:	65a1      	str	r1, [r4, #88]	; 0x58
 8009f78:	f04f 0900 	mov.w	r9, #0
 8009f7c:	e7de      	b.n	8009f3c <_printf_float+0x16c>
 8009f7e:	b913      	cbnz	r3, 8009f86 <_printf_float+0x1b6>
 8009f80:	6822      	ldr	r2, [r4, #0]
 8009f82:	07d2      	lsls	r2, r2, #31
 8009f84:	d501      	bpl.n	8009f8a <_printf_float+0x1ba>
 8009f86:	3302      	adds	r3, #2
 8009f88:	e7f4      	b.n	8009f74 <_printf_float+0x1a4>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e7f2      	b.n	8009f74 <_printf_float+0x1a4>
 8009f8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f94:	4299      	cmp	r1, r3
 8009f96:	db05      	blt.n	8009fa4 <_printf_float+0x1d4>
 8009f98:	6823      	ldr	r3, [r4, #0]
 8009f9a:	6121      	str	r1, [r4, #16]
 8009f9c:	07d8      	lsls	r0, r3, #31
 8009f9e:	d5ea      	bpl.n	8009f76 <_printf_float+0x1a6>
 8009fa0:	1c4b      	adds	r3, r1, #1
 8009fa2:	e7e7      	b.n	8009f74 <_printf_float+0x1a4>
 8009fa4:	2900      	cmp	r1, #0
 8009fa6:	bfd4      	ite	le
 8009fa8:	f1c1 0202 	rsble	r2, r1, #2
 8009fac:	2201      	movgt	r2, #1
 8009fae:	4413      	add	r3, r2
 8009fb0:	e7e0      	b.n	8009f74 <_printf_float+0x1a4>
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	055a      	lsls	r2, r3, #21
 8009fb6:	d407      	bmi.n	8009fc8 <_printf_float+0x1f8>
 8009fb8:	6923      	ldr	r3, [r4, #16]
 8009fba:	4642      	mov	r2, r8
 8009fbc:	4631      	mov	r1, r6
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	47b8      	blx	r7
 8009fc2:	3001      	adds	r0, #1
 8009fc4:	d12c      	bne.n	800a020 <_printf_float+0x250>
 8009fc6:	e764      	b.n	8009e92 <_printf_float+0xc2>
 8009fc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009fcc:	f240 80e0 	bls.w	800a190 <_printf_float+0x3c0>
 8009fd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f7f6 fd76 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d034      	beq.n	800a04a <_printf_float+0x27a>
 8009fe0:	4a37      	ldr	r2, [pc, #220]	; (800a0c0 <_printf_float+0x2f0>)
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	4631      	mov	r1, r6
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	47b8      	blx	r7
 8009fea:	3001      	adds	r0, #1
 8009fec:	f43f af51 	beq.w	8009e92 <_printf_float+0xc2>
 8009ff0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	db02      	blt.n	8009ffe <_printf_float+0x22e>
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	07d8      	lsls	r0, r3, #31
 8009ffc:	d510      	bpl.n	800a020 <_printf_float+0x250>
 8009ffe:	ee18 3a10 	vmov	r3, s16
 800a002:	4652      	mov	r2, sl
 800a004:	4631      	mov	r1, r6
 800a006:	4628      	mov	r0, r5
 800a008:	47b8      	blx	r7
 800a00a:	3001      	adds	r0, #1
 800a00c:	f43f af41 	beq.w	8009e92 <_printf_float+0xc2>
 800a010:	f04f 0800 	mov.w	r8, #0
 800a014:	f104 091a 	add.w	r9, r4, #26
 800a018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a01a:	3b01      	subs	r3, #1
 800a01c:	4543      	cmp	r3, r8
 800a01e:	dc09      	bgt.n	800a034 <_printf_float+0x264>
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	079b      	lsls	r3, r3, #30
 800a024:	f100 8105 	bmi.w	800a232 <_printf_float+0x462>
 800a028:	68e0      	ldr	r0, [r4, #12]
 800a02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a02c:	4298      	cmp	r0, r3
 800a02e:	bfb8      	it	lt
 800a030:	4618      	movlt	r0, r3
 800a032:	e730      	b.n	8009e96 <_printf_float+0xc6>
 800a034:	2301      	movs	r3, #1
 800a036:	464a      	mov	r2, r9
 800a038:	4631      	mov	r1, r6
 800a03a:	4628      	mov	r0, r5
 800a03c:	47b8      	blx	r7
 800a03e:	3001      	adds	r0, #1
 800a040:	f43f af27 	beq.w	8009e92 <_printf_float+0xc2>
 800a044:	f108 0801 	add.w	r8, r8, #1
 800a048:	e7e6      	b.n	800a018 <_printf_float+0x248>
 800a04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	dc39      	bgt.n	800a0c4 <_printf_float+0x2f4>
 800a050:	4a1b      	ldr	r2, [pc, #108]	; (800a0c0 <_printf_float+0x2f0>)
 800a052:	2301      	movs	r3, #1
 800a054:	4631      	mov	r1, r6
 800a056:	4628      	mov	r0, r5
 800a058:	47b8      	blx	r7
 800a05a:	3001      	adds	r0, #1
 800a05c:	f43f af19 	beq.w	8009e92 <_printf_float+0xc2>
 800a060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a064:	4313      	orrs	r3, r2
 800a066:	d102      	bne.n	800a06e <_printf_float+0x29e>
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	07d9      	lsls	r1, r3, #31
 800a06c:	d5d8      	bpl.n	800a020 <_printf_float+0x250>
 800a06e:	ee18 3a10 	vmov	r3, s16
 800a072:	4652      	mov	r2, sl
 800a074:	4631      	mov	r1, r6
 800a076:	4628      	mov	r0, r5
 800a078:	47b8      	blx	r7
 800a07a:	3001      	adds	r0, #1
 800a07c:	f43f af09 	beq.w	8009e92 <_printf_float+0xc2>
 800a080:	f04f 0900 	mov.w	r9, #0
 800a084:	f104 0a1a 	add.w	sl, r4, #26
 800a088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a08a:	425b      	negs	r3, r3
 800a08c:	454b      	cmp	r3, r9
 800a08e:	dc01      	bgt.n	800a094 <_printf_float+0x2c4>
 800a090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a092:	e792      	b.n	8009fba <_printf_float+0x1ea>
 800a094:	2301      	movs	r3, #1
 800a096:	4652      	mov	r2, sl
 800a098:	4631      	mov	r1, r6
 800a09a:	4628      	mov	r0, r5
 800a09c:	47b8      	blx	r7
 800a09e:	3001      	adds	r0, #1
 800a0a0:	f43f aef7 	beq.w	8009e92 <_printf_float+0xc2>
 800a0a4:	f109 0901 	add.w	r9, r9, #1
 800a0a8:	e7ee      	b.n	800a088 <_printf_float+0x2b8>
 800a0aa:	bf00      	nop
 800a0ac:	7fefffff 	.word	0x7fefffff
 800a0b0:	0800f910 	.word	0x0800f910
 800a0b4:	0800f914 	.word	0x0800f914
 800a0b8:	0800f91c 	.word	0x0800f91c
 800a0bc:	0800f918 	.word	0x0800f918
 800a0c0:	0800f920 	.word	0x0800f920
 800a0c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	bfa8      	it	ge
 800a0cc:	461a      	movge	r2, r3
 800a0ce:	2a00      	cmp	r2, #0
 800a0d0:	4691      	mov	r9, r2
 800a0d2:	dc37      	bgt.n	800a144 <_printf_float+0x374>
 800a0d4:	f04f 0b00 	mov.w	fp, #0
 800a0d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0dc:	f104 021a 	add.w	r2, r4, #26
 800a0e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0e2:	9305      	str	r3, [sp, #20]
 800a0e4:	eba3 0309 	sub.w	r3, r3, r9
 800a0e8:	455b      	cmp	r3, fp
 800a0ea:	dc33      	bgt.n	800a154 <_printf_float+0x384>
 800a0ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	db3b      	blt.n	800a16c <_printf_float+0x39c>
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	07da      	lsls	r2, r3, #31
 800a0f8:	d438      	bmi.n	800a16c <_printf_float+0x39c>
 800a0fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0fc:	9b05      	ldr	r3, [sp, #20]
 800a0fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	eba2 0901 	sub.w	r9, r2, r1
 800a106:	4599      	cmp	r9, r3
 800a108:	bfa8      	it	ge
 800a10a:	4699      	movge	r9, r3
 800a10c:	f1b9 0f00 	cmp.w	r9, #0
 800a110:	dc35      	bgt.n	800a17e <_printf_float+0x3ae>
 800a112:	f04f 0800 	mov.w	r8, #0
 800a116:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a11a:	f104 0a1a 	add.w	sl, r4, #26
 800a11e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a122:	1a9b      	subs	r3, r3, r2
 800a124:	eba3 0309 	sub.w	r3, r3, r9
 800a128:	4543      	cmp	r3, r8
 800a12a:	f77f af79 	ble.w	800a020 <_printf_float+0x250>
 800a12e:	2301      	movs	r3, #1
 800a130:	4652      	mov	r2, sl
 800a132:	4631      	mov	r1, r6
 800a134:	4628      	mov	r0, r5
 800a136:	47b8      	blx	r7
 800a138:	3001      	adds	r0, #1
 800a13a:	f43f aeaa 	beq.w	8009e92 <_printf_float+0xc2>
 800a13e:	f108 0801 	add.w	r8, r8, #1
 800a142:	e7ec      	b.n	800a11e <_printf_float+0x34e>
 800a144:	4613      	mov	r3, r2
 800a146:	4631      	mov	r1, r6
 800a148:	4642      	mov	r2, r8
 800a14a:	4628      	mov	r0, r5
 800a14c:	47b8      	blx	r7
 800a14e:	3001      	adds	r0, #1
 800a150:	d1c0      	bne.n	800a0d4 <_printf_float+0x304>
 800a152:	e69e      	b.n	8009e92 <_printf_float+0xc2>
 800a154:	2301      	movs	r3, #1
 800a156:	4631      	mov	r1, r6
 800a158:	4628      	mov	r0, r5
 800a15a:	9205      	str	r2, [sp, #20]
 800a15c:	47b8      	blx	r7
 800a15e:	3001      	adds	r0, #1
 800a160:	f43f ae97 	beq.w	8009e92 <_printf_float+0xc2>
 800a164:	9a05      	ldr	r2, [sp, #20]
 800a166:	f10b 0b01 	add.w	fp, fp, #1
 800a16a:	e7b9      	b.n	800a0e0 <_printf_float+0x310>
 800a16c:	ee18 3a10 	vmov	r3, s16
 800a170:	4652      	mov	r2, sl
 800a172:	4631      	mov	r1, r6
 800a174:	4628      	mov	r0, r5
 800a176:	47b8      	blx	r7
 800a178:	3001      	adds	r0, #1
 800a17a:	d1be      	bne.n	800a0fa <_printf_float+0x32a>
 800a17c:	e689      	b.n	8009e92 <_printf_float+0xc2>
 800a17e:	9a05      	ldr	r2, [sp, #20]
 800a180:	464b      	mov	r3, r9
 800a182:	4442      	add	r2, r8
 800a184:	4631      	mov	r1, r6
 800a186:	4628      	mov	r0, r5
 800a188:	47b8      	blx	r7
 800a18a:	3001      	adds	r0, #1
 800a18c:	d1c1      	bne.n	800a112 <_printf_float+0x342>
 800a18e:	e680      	b.n	8009e92 <_printf_float+0xc2>
 800a190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a192:	2a01      	cmp	r2, #1
 800a194:	dc01      	bgt.n	800a19a <_printf_float+0x3ca>
 800a196:	07db      	lsls	r3, r3, #31
 800a198:	d538      	bpl.n	800a20c <_printf_float+0x43c>
 800a19a:	2301      	movs	r3, #1
 800a19c:	4642      	mov	r2, r8
 800a19e:	4631      	mov	r1, r6
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	47b8      	blx	r7
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	f43f ae74 	beq.w	8009e92 <_printf_float+0xc2>
 800a1aa:	ee18 3a10 	vmov	r3, s16
 800a1ae:	4652      	mov	r2, sl
 800a1b0:	4631      	mov	r1, r6
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	47b8      	blx	r7
 800a1b6:	3001      	adds	r0, #1
 800a1b8:	f43f ae6b 	beq.w	8009e92 <_printf_float+0xc2>
 800a1bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	f7f6 fc80 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1c8:	b9d8      	cbnz	r0, 800a202 <_printf_float+0x432>
 800a1ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1cc:	f108 0201 	add.w	r2, r8, #1
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	4631      	mov	r1, r6
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	47b8      	blx	r7
 800a1d8:	3001      	adds	r0, #1
 800a1da:	d10e      	bne.n	800a1fa <_printf_float+0x42a>
 800a1dc:	e659      	b.n	8009e92 <_printf_float+0xc2>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	4652      	mov	r2, sl
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	47b8      	blx	r7
 800a1e8:	3001      	adds	r0, #1
 800a1ea:	f43f ae52 	beq.w	8009e92 <_printf_float+0xc2>
 800a1ee:	f108 0801 	add.w	r8, r8, #1
 800a1f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	4543      	cmp	r3, r8
 800a1f8:	dcf1      	bgt.n	800a1de <_printf_float+0x40e>
 800a1fa:	464b      	mov	r3, r9
 800a1fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a200:	e6dc      	b.n	8009fbc <_printf_float+0x1ec>
 800a202:	f04f 0800 	mov.w	r8, #0
 800a206:	f104 0a1a 	add.w	sl, r4, #26
 800a20a:	e7f2      	b.n	800a1f2 <_printf_float+0x422>
 800a20c:	2301      	movs	r3, #1
 800a20e:	4642      	mov	r2, r8
 800a210:	e7df      	b.n	800a1d2 <_printf_float+0x402>
 800a212:	2301      	movs	r3, #1
 800a214:	464a      	mov	r2, r9
 800a216:	4631      	mov	r1, r6
 800a218:	4628      	mov	r0, r5
 800a21a:	47b8      	blx	r7
 800a21c:	3001      	adds	r0, #1
 800a21e:	f43f ae38 	beq.w	8009e92 <_printf_float+0xc2>
 800a222:	f108 0801 	add.w	r8, r8, #1
 800a226:	68e3      	ldr	r3, [r4, #12]
 800a228:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a22a:	1a5b      	subs	r3, r3, r1
 800a22c:	4543      	cmp	r3, r8
 800a22e:	dcf0      	bgt.n	800a212 <_printf_float+0x442>
 800a230:	e6fa      	b.n	800a028 <_printf_float+0x258>
 800a232:	f04f 0800 	mov.w	r8, #0
 800a236:	f104 0919 	add.w	r9, r4, #25
 800a23a:	e7f4      	b.n	800a226 <_printf_float+0x456>

0800a23c <_printf_common>:
 800a23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a240:	4616      	mov	r6, r2
 800a242:	4699      	mov	r9, r3
 800a244:	688a      	ldr	r2, [r1, #8]
 800a246:	690b      	ldr	r3, [r1, #16]
 800a248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a24c:	4293      	cmp	r3, r2
 800a24e:	bfb8      	it	lt
 800a250:	4613      	movlt	r3, r2
 800a252:	6033      	str	r3, [r6, #0]
 800a254:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a258:	4607      	mov	r7, r0
 800a25a:	460c      	mov	r4, r1
 800a25c:	b10a      	cbz	r2, 800a262 <_printf_common+0x26>
 800a25e:	3301      	adds	r3, #1
 800a260:	6033      	str	r3, [r6, #0]
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	0699      	lsls	r1, r3, #26
 800a266:	bf42      	ittt	mi
 800a268:	6833      	ldrmi	r3, [r6, #0]
 800a26a:	3302      	addmi	r3, #2
 800a26c:	6033      	strmi	r3, [r6, #0]
 800a26e:	6825      	ldr	r5, [r4, #0]
 800a270:	f015 0506 	ands.w	r5, r5, #6
 800a274:	d106      	bne.n	800a284 <_printf_common+0x48>
 800a276:	f104 0a19 	add.w	sl, r4, #25
 800a27a:	68e3      	ldr	r3, [r4, #12]
 800a27c:	6832      	ldr	r2, [r6, #0]
 800a27e:	1a9b      	subs	r3, r3, r2
 800a280:	42ab      	cmp	r3, r5
 800a282:	dc26      	bgt.n	800a2d2 <_printf_common+0x96>
 800a284:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a288:	1e13      	subs	r3, r2, #0
 800a28a:	6822      	ldr	r2, [r4, #0]
 800a28c:	bf18      	it	ne
 800a28e:	2301      	movne	r3, #1
 800a290:	0692      	lsls	r2, r2, #26
 800a292:	d42b      	bmi.n	800a2ec <_printf_common+0xb0>
 800a294:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a298:	4649      	mov	r1, r9
 800a29a:	4638      	mov	r0, r7
 800a29c:	47c0      	blx	r8
 800a29e:	3001      	adds	r0, #1
 800a2a0:	d01e      	beq.n	800a2e0 <_printf_common+0xa4>
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	68e5      	ldr	r5, [r4, #12]
 800a2a6:	6832      	ldr	r2, [r6, #0]
 800a2a8:	f003 0306 	and.w	r3, r3, #6
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	bf08      	it	eq
 800a2b0:	1aad      	subeq	r5, r5, r2
 800a2b2:	68a3      	ldr	r3, [r4, #8]
 800a2b4:	6922      	ldr	r2, [r4, #16]
 800a2b6:	bf0c      	ite	eq
 800a2b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2bc:	2500      	movne	r5, #0
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	bfc4      	itt	gt
 800a2c2:	1a9b      	subgt	r3, r3, r2
 800a2c4:	18ed      	addgt	r5, r5, r3
 800a2c6:	2600      	movs	r6, #0
 800a2c8:	341a      	adds	r4, #26
 800a2ca:	42b5      	cmp	r5, r6
 800a2cc:	d11a      	bne.n	800a304 <_printf_common+0xc8>
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	e008      	b.n	800a2e4 <_printf_common+0xa8>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	4652      	mov	r2, sl
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	4638      	mov	r0, r7
 800a2da:	47c0      	blx	r8
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d103      	bne.n	800a2e8 <_printf_common+0xac>
 800a2e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2e8:	3501      	adds	r5, #1
 800a2ea:	e7c6      	b.n	800a27a <_printf_common+0x3e>
 800a2ec:	18e1      	adds	r1, r4, r3
 800a2ee:	1c5a      	adds	r2, r3, #1
 800a2f0:	2030      	movs	r0, #48	; 0x30
 800a2f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2f6:	4422      	add	r2, r4
 800a2f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a300:	3302      	adds	r3, #2
 800a302:	e7c7      	b.n	800a294 <_printf_common+0x58>
 800a304:	2301      	movs	r3, #1
 800a306:	4622      	mov	r2, r4
 800a308:	4649      	mov	r1, r9
 800a30a:	4638      	mov	r0, r7
 800a30c:	47c0      	blx	r8
 800a30e:	3001      	adds	r0, #1
 800a310:	d0e6      	beq.n	800a2e0 <_printf_common+0xa4>
 800a312:	3601      	adds	r6, #1
 800a314:	e7d9      	b.n	800a2ca <_printf_common+0x8e>
	...

0800a318 <_printf_i>:
 800a318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a31c:	460c      	mov	r4, r1
 800a31e:	4691      	mov	r9, r2
 800a320:	7e27      	ldrb	r7, [r4, #24]
 800a322:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a324:	2f78      	cmp	r7, #120	; 0x78
 800a326:	4680      	mov	r8, r0
 800a328:	469a      	mov	sl, r3
 800a32a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a32e:	d807      	bhi.n	800a340 <_printf_i+0x28>
 800a330:	2f62      	cmp	r7, #98	; 0x62
 800a332:	d80a      	bhi.n	800a34a <_printf_i+0x32>
 800a334:	2f00      	cmp	r7, #0
 800a336:	f000 80d8 	beq.w	800a4ea <_printf_i+0x1d2>
 800a33a:	2f58      	cmp	r7, #88	; 0x58
 800a33c:	f000 80a3 	beq.w	800a486 <_printf_i+0x16e>
 800a340:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a348:	e03a      	b.n	800a3c0 <_printf_i+0xa8>
 800a34a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a34e:	2b15      	cmp	r3, #21
 800a350:	d8f6      	bhi.n	800a340 <_printf_i+0x28>
 800a352:	a001      	add	r0, pc, #4	; (adr r0, 800a358 <_printf_i+0x40>)
 800a354:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a358:	0800a3b1 	.word	0x0800a3b1
 800a35c:	0800a3c5 	.word	0x0800a3c5
 800a360:	0800a341 	.word	0x0800a341
 800a364:	0800a341 	.word	0x0800a341
 800a368:	0800a341 	.word	0x0800a341
 800a36c:	0800a341 	.word	0x0800a341
 800a370:	0800a3c5 	.word	0x0800a3c5
 800a374:	0800a341 	.word	0x0800a341
 800a378:	0800a341 	.word	0x0800a341
 800a37c:	0800a341 	.word	0x0800a341
 800a380:	0800a341 	.word	0x0800a341
 800a384:	0800a4d1 	.word	0x0800a4d1
 800a388:	0800a3f5 	.word	0x0800a3f5
 800a38c:	0800a4b3 	.word	0x0800a4b3
 800a390:	0800a341 	.word	0x0800a341
 800a394:	0800a341 	.word	0x0800a341
 800a398:	0800a4f3 	.word	0x0800a4f3
 800a39c:	0800a341 	.word	0x0800a341
 800a3a0:	0800a3f5 	.word	0x0800a3f5
 800a3a4:	0800a341 	.word	0x0800a341
 800a3a8:	0800a341 	.word	0x0800a341
 800a3ac:	0800a4bb 	.word	0x0800a4bb
 800a3b0:	680b      	ldr	r3, [r1, #0]
 800a3b2:	1d1a      	adds	r2, r3, #4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	600a      	str	r2, [r1, #0]
 800a3b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a3bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e0a3      	b.n	800a50c <_printf_i+0x1f4>
 800a3c4:	6825      	ldr	r5, [r4, #0]
 800a3c6:	6808      	ldr	r0, [r1, #0]
 800a3c8:	062e      	lsls	r6, r5, #24
 800a3ca:	f100 0304 	add.w	r3, r0, #4
 800a3ce:	d50a      	bpl.n	800a3e6 <_printf_i+0xce>
 800a3d0:	6805      	ldr	r5, [r0, #0]
 800a3d2:	600b      	str	r3, [r1, #0]
 800a3d4:	2d00      	cmp	r5, #0
 800a3d6:	da03      	bge.n	800a3e0 <_printf_i+0xc8>
 800a3d8:	232d      	movs	r3, #45	; 0x2d
 800a3da:	426d      	negs	r5, r5
 800a3dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3e0:	485e      	ldr	r0, [pc, #376]	; (800a55c <_printf_i+0x244>)
 800a3e2:	230a      	movs	r3, #10
 800a3e4:	e019      	b.n	800a41a <_printf_i+0x102>
 800a3e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a3ea:	6805      	ldr	r5, [r0, #0]
 800a3ec:	600b      	str	r3, [r1, #0]
 800a3ee:	bf18      	it	ne
 800a3f0:	b22d      	sxthne	r5, r5
 800a3f2:	e7ef      	b.n	800a3d4 <_printf_i+0xbc>
 800a3f4:	680b      	ldr	r3, [r1, #0]
 800a3f6:	6825      	ldr	r5, [r4, #0]
 800a3f8:	1d18      	adds	r0, r3, #4
 800a3fa:	6008      	str	r0, [r1, #0]
 800a3fc:	0628      	lsls	r0, r5, #24
 800a3fe:	d501      	bpl.n	800a404 <_printf_i+0xec>
 800a400:	681d      	ldr	r5, [r3, #0]
 800a402:	e002      	b.n	800a40a <_printf_i+0xf2>
 800a404:	0669      	lsls	r1, r5, #25
 800a406:	d5fb      	bpl.n	800a400 <_printf_i+0xe8>
 800a408:	881d      	ldrh	r5, [r3, #0]
 800a40a:	4854      	ldr	r0, [pc, #336]	; (800a55c <_printf_i+0x244>)
 800a40c:	2f6f      	cmp	r7, #111	; 0x6f
 800a40e:	bf0c      	ite	eq
 800a410:	2308      	moveq	r3, #8
 800a412:	230a      	movne	r3, #10
 800a414:	2100      	movs	r1, #0
 800a416:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a41a:	6866      	ldr	r6, [r4, #4]
 800a41c:	60a6      	str	r6, [r4, #8]
 800a41e:	2e00      	cmp	r6, #0
 800a420:	bfa2      	ittt	ge
 800a422:	6821      	ldrge	r1, [r4, #0]
 800a424:	f021 0104 	bicge.w	r1, r1, #4
 800a428:	6021      	strge	r1, [r4, #0]
 800a42a:	b90d      	cbnz	r5, 800a430 <_printf_i+0x118>
 800a42c:	2e00      	cmp	r6, #0
 800a42e:	d04d      	beq.n	800a4cc <_printf_i+0x1b4>
 800a430:	4616      	mov	r6, r2
 800a432:	fbb5 f1f3 	udiv	r1, r5, r3
 800a436:	fb03 5711 	mls	r7, r3, r1, r5
 800a43a:	5dc7      	ldrb	r7, [r0, r7]
 800a43c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a440:	462f      	mov	r7, r5
 800a442:	42bb      	cmp	r3, r7
 800a444:	460d      	mov	r5, r1
 800a446:	d9f4      	bls.n	800a432 <_printf_i+0x11a>
 800a448:	2b08      	cmp	r3, #8
 800a44a:	d10b      	bne.n	800a464 <_printf_i+0x14c>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	07df      	lsls	r7, r3, #31
 800a450:	d508      	bpl.n	800a464 <_printf_i+0x14c>
 800a452:	6923      	ldr	r3, [r4, #16]
 800a454:	6861      	ldr	r1, [r4, #4]
 800a456:	4299      	cmp	r1, r3
 800a458:	bfde      	ittt	le
 800a45a:	2330      	movle	r3, #48	; 0x30
 800a45c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a460:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a464:	1b92      	subs	r2, r2, r6
 800a466:	6122      	str	r2, [r4, #16]
 800a468:	f8cd a000 	str.w	sl, [sp]
 800a46c:	464b      	mov	r3, r9
 800a46e:	aa03      	add	r2, sp, #12
 800a470:	4621      	mov	r1, r4
 800a472:	4640      	mov	r0, r8
 800a474:	f7ff fee2 	bl	800a23c <_printf_common>
 800a478:	3001      	adds	r0, #1
 800a47a:	d14c      	bne.n	800a516 <_printf_i+0x1fe>
 800a47c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a480:	b004      	add	sp, #16
 800a482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a486:	4835      	ldr	r0, [pc, #212]	; (800a55c <_printf_i+0x244>)
 800a488:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a48c:	6823      	ldr	r3, [r4, #0]
 800a48e:	680e      	ldr	r6, [r1, #0]
 800a490:	061f      	lsls	r7, r3, #24
 800a492:	f856 5b04 	ldr.w	r5, [r6], #4
 800a496:	600e      	str	r6, [r1, #0]
 800a498:	d514      	bpl.n	800a4c4 <_printf_i+0x1ac>
 800a49a:	07d9      	lsls	r1, r3, #31
 800a49c:	bf44      	itt	mi
 800a49e:	f043 0320 	orrmi.w	r3, r3, #32
 800a4a2:	6023      	strmi	r3, [r4, #0]
 800a4a4:	b91d      	cbnz	r5, 800a4ae <_printf_i+0x196>
 800a4a6:	6823      	ldr	r3, [r4, #0]
 800a4a8:	f023 0320 	bic.w	r3, r3, #32
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	2310      	movs	r3, #16
 800a4b0:	e7b0      	b.n	800a414 <_printf_i+0xfc>
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	f043 0320 	orr.w	r3, r3, #32
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	2378      	movs	r3, #120	; 0x78
 800a4bc:	4828      	ldr	r0, [pc, #160]	; (800a560 <_printf_i+0x248>)
 800a4be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4c2:	e7e3      	b.n	800a48c <_printf_i+0x174>
 800a4c4:	065e      	lsls	r6, r3, #25
 800a4c6:	bf48      	it	mi
 800a4c8:	b2ad      	uxthmi	r5, r5
 800a4ca:	e7e6      	b.n	800a49a <_printf_i+0x182>
 800a4cc:	4616      	mov	r6, r2
 800a4ce:	e7bb      	b.n	800a448 <_printf_i+0x130>
 800a4d0:	680b      	ldr	r3, [r1, #0]
 800a4d2:	6826      	ldr	r6, [r4, #0]
 800a4d4:	6960      	ldr	r0, [r4, #20]
 800a4d6:	1d1d      	adds	r5, r3, #4
 800a4d8:	600d      	str	r5, [r1, #0]
 800a4da:	0635      	lsls	r5, r6, #24
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	d501      	bpl.n	800a4e4 <_printf_i+0x1cc>
 800a4e0:	6018      	str	r0, [r3, #0]
 800a4e2:	e002      	b.n	800a4ea <_printf_i+0x1d2>
 800a4e4:	0671      	lsls	r1, r6, #25
 800a4e6:	d5fb      	bpl.n	800a4e0 <_printf_i+0x1c8>
 800a4e8:	8018      	strh	r0, [r3, #0]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	6123      	str	r3, [r4, #16]
 800a4ee:	4616      	mov	r6, r2
 800a4f0:	e7ba      	b.n	800a468 <_printf_i+0x150>
 800a4f2:	680b      	ldr	r3, [r1, #0]
 800a4f4:	1d1a      	adds	r2, r3, #4
 800a4f6:	600a      	str	r2, [r1, #0]
 800a4f8:	681e      	ldr	r6, [r3, #0]
 800a4fa:	6862      	ldr	r2, [r4, #4]
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	4630      	mov	r0, r6
 800a500:	f7f5 fe6e 	bl	80001e0 <memchr>
 800a504:	b108      	cbz	r0, 800a50a <_printf_i+0x1f2>
 800a506:	1b80      	subs	r0, r0, r6
 800a508:	6060      	str	r0, [r4, #4]
 800a50a:	6863      	ldr	r3, [r4, #4]
 800a50c:	6123      	str	r3, [r4, #16]
 800a50e:	2300      	movs	r3, #0
 800a510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a514:	e7a8      	b.n	800a468 <_printf_i+0x150>
 800a516:	6923      	ldr	r3, [r4, #16]
 800a518:	4632      	mov	r2, r6
 800a51a:	4649      	mov	r1, r9
 800a51c:	4640      	mov	r0, r8
 800a51e:	47d0      	blx	sl
 800a520:	3001      	adds	r0, #1
 800a522:	d0ab      	beq.n	800a47c <_printf_i+0x164>
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	079b      	lsls	r3, r3, #30
 800a528:	d413      	bmi.n	800a552 <_printf_i+0x23a>
 800a52a:	68e0      	ldr	r0, [r4, #12]
 800a52c:	9b03      	ldr	r3, [sp, #12]
 800a52e:	4298      	cmp	r0, r3
 800a530:	bfb8      	it	lt
 800a532:	4618      	movlt	r0, r3
 800a534:	e7a4      	b.n	800a480 <_printf_i+0x168>
 800a536:	2301      	movs	r3, #1
 800a538:	4632      	mov	r2, r6
 800a53a:	4649      	mov	r1, r9
 800a53c:	4640      	mov	r0, r8
 800a53e:	47d0      	blx	sl
 800a540:	3001      	adds	r0, #1
 800a542:	d09b      	beq.n	800a47c <_printf_i+0x164>
 800a544:	3501      	adds	r5, #1
 800a546:	68e3      	ldr	r3, [r4, #12]
 800a548:	9903      	ldr	r1, [sp, #12]
 800a54a:	1a5b      	subs	r3, r3, r1
 800a54c:	42ab      	cmp	r3, r5
 800a54e:	dcf2      	bgt.n	800a536 <_printf_i+0x21e>
 800a550:	e7eb      	b.n	800a52a <_printf_i+0x212>
 800a552:	2500      	movs	r5, #0
 800a554:	f104 0619 	add.w	r6, r4, #25
 800a558:	e7f5      	b.n	800a546 <_printf_i+0x22e>
 800a55a:	bf00      	nop
 800a55c:	0800f922 	.word	0x0800f922
 800a560:	0800f933 	.word	0x0800f933

0800a564 <siprintf>:
 800a564:	b40e      	push	{r1, r2, r3}
 800a566:	b500      	push	{lr}
 800a568:	b09c      	sub	sp, #112	; 0x70
 800a56a:	ab1d      	add	r3, sp, #116	; 0x74
 800a56c:	9002      	str	r0, [sp, #8]
 800a56e:	9006      	str	r0, [sp, #24]
 800a570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a574:	4809      	ldr	r0, [pc, #36]	; (800a59c <siprintf+0x38>)
 800a576:	9107      	str	r1, [sp, #28]
 800a578:	9104      	str	r1, [sp, #16]
 800a57a:	4909      	ldr	r1, [pc, #36]	; (800a5a0 <siprintf+0x3c>)
 800a57c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a580:	9105      	str	r1, [sp, #20]
 800a582:	6800      	ldr	r0, [r0, #0]
 800a584:	9301      	str	r3, [sp, #4]
 800a586:	a902      	add	r1, sp, #8
 800a588:	f001 fe06 	bl	800c198 <_svfiprintf_r>
 800a58c:	9b02      	ldr	r3, [sp, #8]
 800a58e:	2200      	movs	r2, #0
 800a590:	701a      	strb	r2, [r3, #0]
 800a592:	b01c      	add	sp, #112	; 0x70
 800a594:	f85d eb04 	ldr.w	lr, [sp], #4
 800a598:	b003      	add	sp, #12
 800a59a:	4770      	bx	lr
 800a59c:	20000034 	.word	0x20000034
 800a5a0:	ffff0208 	.word	0xffff0208

0800a5a4 <__swbuf_r>:
 800a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a6:	460e      	mov	r6, r1
 800a5a8:	4614      	mov	r4, r2
 800a5aa:	4605      	mov	r5, r0
 800a5ac:	b118      	cbz	r0, 800a5b6 <__swbuf_r+0x12>
 800a5ae:	6983      	ldr	r3, [r0, #24]
 800a5b0:	b90b      	cbnz	r3, 800a5b6 <__swbuf_r+0x12>
 800a5b2:	f001 f84b 	bl	800b64c <__sinit>
 800a5b6:	4b21      	ldr	r3, [pc, #132]	; (800a63c <__swbuf_r+0x98>)
 800a5b8:	429c      	cmp	r4, r3
 800a5ba:	d12b      	bne.n	800a614 <__swbuf_r+0x70>
 800a5bc:	686c      	ldr	r4, [r5, #4]
 800a5be:	69a3      	ldr	r3, [r4, #24]
 800a5c0:	60a3      	str	r3, [r4, #8]
 800a5c2:	89a3      	ldrh	r3, [r4, #12]
 800a5c4:	071a      	lsls	r2, r3, #28
 800a5c6:	d52f      	bpl.n	800a628 <__swbuf_r+0x84>
 800a5c8:	6923      	ldr	r3, [r4, #16]
 800a5ca:	b36b      	cbz	r3, 800a628 <__swbuf_r+0x84>
 800a5cc:	6923      	ldr	r3, [r4, #16]
 800a5ce:	6820      	ldr	r0, [r4, #0]
 800a5d0:	1ac0      	subs	r0, r0, r3
 800a5d2:	6963      	ldr	r3, [r4, #20]
 800a5d4:	b2f6      	uxtb	r6, r6
 800a5d6:	4283      	cmp	r3, r0
 800a5d8:	4637      	mov	r7, r6
 800a5da:	dc04      	bgt.n	800a5e6 <__swbuf_r+0x42>
 800a5dc:	4621      	mov	r1, r4
 800a5de:	4628      	mov	r0, r5
 800a5e0:	f000 ffa0 	bl	800b524 <_fflush_r>
 800a5e4:	bb30      	cbnz	r0, 800a634 <__swbuf_r+0x90>
 800a5e6:	68a3      	ldr	r3, [r4, #8]
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	60a3      	str	r3, [r4, #8]
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	1c5a      	adds	r2, r3, #1
 800a5f0:	6022      	str	r2, [r4, #0]
 800a5f2:	701e      	strb	r6, [r3, #0]
 800a5f4:	6963      	ldr	r3, [r4, #20]
 800a5f6:	3001      	adds	r0, #1
 800a5f8:	4283      	cmp	r3, r0
 800a5fa:	d004      	beq.n	800a606 <__swbuf_r+0x62>
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	07db      	lsls	r3, r3, #31
 800a600:	d506      	bpl.n	800a610 <__swbuf_r+0x6c>
 800a602:	2e0a      	cmp	r6, #10
 800a604:	d104      	bne.n	800a610 <__swbuf_r+0x6c>
 800a606:	4621      	mov	r1, r4
 800a608:	4628      	mov	r0, r5
 800a60a:	f000 ff8b 	bl	800b524 <_fflush_r>
 800a60e:	b988      	cbnz	r0, 800a634 <__swbuf_r+0x90>
 800a610:	4638      	mov	r0, r7
 800a612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a614:	4b0a      	ldr	r3, [pc, #40]	; (800a640 <__swbuf_r+0x9c>)
 800a616:	429c      	cmp	r4, r3
 800a618:	d101      	bne.n	800a61e <__swbuf_r+0x7a>
 800a61a:	68ac      	ldr	r4, [r5, #8]
 800a61c:	e7cf      	b.n	800a5be <__swbuf_r+0x1a>
 800a61e:	4b09      	ldr	r3, [pc, #36]	; (800a644 <__swbuf_r+0xa0>)
 800a620:	429c      	cmp	r4, r3
 800a622:	bf08      	it	eq
 800a624:	68ec      	ldreq	r4, [r5, #12]
 800a626:	e7ca      	b.n	800a5be <__swbuf_r+0x1a>
 800a628:	4621      	mov	r1, r4
 800a62a:	4628      	mov	r0, r5
 800a62c:	f000 f80c 	bl	800a648 <__swsetup_r>
 800a630:	2800      	cmp	r0, #0
 800a632:	d0cb      	beq.n	800a5cc <__swbuf_r+0x28>
 800a634:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a638:	e7ea      	b.n	800a610 <__swbuf_r+0x6c>
 800a63a:	bf00      	nop
 800a63c:	0800f9f8 	.word	0x0800f9f8
 800a640:	0800fa18 	.word	0x0800fa18
 800a644:	0800f9d8 	.word	0x0800f9d8

0800a648 <__swsetup_r>:
 800a648:	4b32      	ldr	r3, [pc, #200]	; (800a714 <__swsetup_r+0xcc>)
 800a64a:	b570      	push	{r4, r5, r6, lr}
 800a64c:	681d      	ldr	r5, [r3, #0]
 800a64e:	4606      	mov	r6, r0
 800a650:	460c      	mov	r4, r1
 800a652:	b125      	cbz	r5, 800a65e <__swsetup_r+0x16>
 800a654:	69ab      	ldr	r3, [r5, #24]
 800a656:	b913      	cbnz	r3, 800a65e <__swsetup_r+0x16>
 800a658:	4628      	mov	r0, r5
 800a65a:	f000 fff7 	bl	800b64c <__sinit>
 800a65e:	4b2e      	ldr	r3, [pc, #184]	; (800a718 <__swsetup_r+0xd0>)
 800a660:	429c      	cmp	r4, r3
 800a662:	d10f      	bne.n	800a684 <__swsetup_r+0x3c>
 800a664:	686c      	ldr	r4, [r5, #4]
 800a666:	89a3      	ldrh	r3, [r4, #12]
 800a668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a66c:	0719      	lsls	r1, r3, #28
 800a66e:	d42c      	bmi.n	800a6ca <__swsetup_r+0x82>
 800a670:	06dd      	lsls	r5, r3, #27
 800a672:	d411      	bmi.n	800a698 <__swsetup_r+0x50>
 800a674:	2309      	movs	r3, #9
 800a676:	6033      	str	r3, [r6, #0]
 800a678:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a67c:	81a3      	strh	r3, [r4, #12]
 800a67e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a682:	e03e      	b.n	800a702 <__swsetup_r+0xba>
 800a684:	4b25      	ldr	r3, [pc, #148]	; (800a71c <__swsetup_r+0xd4>)
 800a686:	429c      	cmp	r4, r3
 800a688:	d101      	bne.n	800a68e <__swsetup_r+0x46>
 800a68a:	68ac      	ldr	r4, [r5, #8]
 800a68c:	e7eb      	b.n	800a666 <__swsetup_r+0x1e>
 800a68e:	4b24      	ldr	r3, [pc, #144]	; (800a720 <__swsetup_r+0xd8>)
 800a690:	429c      	cmp	r4, r3
 800a692:	bf08      	it	eq
 800a694:	68ec      	ldreq	r4, [r5, #12]
 800a696:	e7e6      	b.n	800a666 <__swsetup_r+0x1e>
 800a698:	0758      	lsls	r0, r3, #29
 800a69a:	d512      	bpl.n	800a6c2 <__swsetup_r+0x7a>
 800a69c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a69e:	b141      	cbz	r1, 800a6b2 <__swsetup_r+0x6a>
 800a6a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6a4:	4299      	cmp	r1, r3
 800a6a6:	d002      	beq.n	800a6ae <__swsetup_r+0x66>
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f001 fc6f 	bl	800bf8c <_free_r>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	6363      	str	r3, [r4, #52]	; 0x34
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	6063      	str	r3, [r4, #4]
 800a6be:	6923      	ldr	r3, [r4, #16]
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	f043 0308 	orr.w	r3, r3, #8
 800a6c8:	81a3      	strh	r3, [r4, #12]
 800a6ca:	6923      	ldr	r3, [r4, #16]
 800a6cc:	b94b      	cbnz	r3, 800a6e2 <__swsetup_r+0x9a>
 800a6ce:	89a3      	ldrh	r3, [r4, #12]
 800a6d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6d8:	d003      	beq.n	800a6e2 <__swsetup_r+0x9a>
 800a6da:	4621      	mov	r1, r4
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f001 f87f 	bl	800b7e0 <__smakebuf_r>
 800a6e2:	89a0      	ldrh	r0, [r4, #12]
 800a6e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6e8:	f010 0301 	ands.w	r3, r0, #1
 800a6ec:	d00a      	beq.n	800a704 <__swsetup_r+0xbc>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	60a3      	str	r3, [r4, #8]
 800a6f2:	6963      	ldr	r3, [r4, #20]
 800a6f4:	425b      	negs	r3, r3
 800a6f6:	61a3      	str	r3, [r4, #24]
 800a6f8:	6923      	ldr	r3, [r4, #16]
 800a6fa:	b943      	cbnz	r3, 800a70e <__swsetup_r+0xc6>
 800a6fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a700:	d1ba      	bne.n	800a678 <__swsetup_r+0x30>
 800a702:	bd70      	pop	{r4, r5, r6, pc}
 800a704:	0781      	lsls	r1, r0, #30
 800a706:	bf58      	it	pl
 800a708:	6963      	ldrpl	r3, [r4, #20]
 800a70a:	60a3      	str	r3, [r4, #8]
 800a70c:	e7f4      	b.n	800a6f8 <__swsetup_r+0xb0>
 800a70e:	2000      	movs	r0, #0
 800a710:	e7f7      	b.n	800a702 <__swsetup_r+0xba>
 800a712:	bf00      	nop
 800a714:	20000034 	.word	0x20000034
 800a718:	0800f9f8 	.word	0x0800f9f8
 800a71c:	0800fa18 	.word	0x0800fa18
 800a720:	0800f9d8 	.word	0x0800f9d8

0800a724 <quorem>:
 800a724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a728:	6903      	ldr	r3, [r0, #16]
 800a72a:	690c      	ldr	r4, [r1, #16]
 800a72c:	42a3      	cmp	r3, r4
 800a72e:	4607      	mov	r7, r0
 800a730:	f2c0 8081 	blt.w	800a836 <quorem+0x112>
 800a734:	3c01      	subs	r4, #1
 800a736:	f101 0814 	add.w	r8, r1, #20
 800a73a:	f100 0514 	add.w	r5, r0, #20
 800a73e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a742:	9301      	str	r3, [sp, #4]
 800a744:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a74c:	3301      	adds	r3, #1
 800a74e:	429a      	cmp	r2, r3
 800a750:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a754:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a758:	fbb2 f6f3 	udiv	r6, r2, r3
 800a75c:	d331      	bcc.n	800a7c2 <quorem+0x9e>
 800a75e:	f04f 0e00 	mov.w	lr, #0
 800a762:	4640      	mov	r0, r8
 800a764:	46ac      	mov	ip, r5
 800a766:	46f2      	mov	sl, lr
 800a768:	f850 2b04 	ldr.w	r2, [r0], #4
 800a76c:	b293      	uxth	r3, r2
 800a76e:	fb06 e303 	mla	r3, r6, r3, lr
 800a772:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a776:	b29b      	uxth	r3, r3
 800a778:	ebaa 0303 	sub.w	r3, sl, r3
 800a77c:	0c12      	lsrs	r2, r2, #16
 800a77e:	f8dc a000 	ldr.w	sl, [ip]
 800a782:	fb06 e202 	mla	r2, r6, r2, lr
 800a786:	fa13 f38a 	uxtah	r3, r3, sl
 800a78a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a78e:	fa1f fa82 	uxth.w	sl, r2
 800a792:	f8dc 2000 	ldr.w	r2, [ip]
 800a796:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a79a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7a4:	4581      	cmp	r9, r0
 800a7a6:	f84c 3b04 	str.w	r3, [ip], #4
 800a7aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a7ae:	d2db      	bcs.n	800a768 <quorem+0x44>
 800a7b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a7b4:	b92b      	cbnz	r3, 800a7c2 <quorem+0x9e>
 800a7b6:	9b01      	ldr	r3, [sp, #4]
 800a7b8:	3b04      	subs	r3, #4
 800a7ba:	429d      	cmp	r5, r3
 800a7bc:	461a      	mov	r2, r3
 800a7be:	d32e      	bcc.n	800a81e <quorem+0xfa>
 800a7c0:	613c      	str	r4, [r7, #16]
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	f001 fad2 	bl	800bd6c <__mcmp>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	db24      	blt.n	800a816 <quorem+0xf2>
 800a7cc:	3601      	adds	r6, #1
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	f04f 0c00 	mov.w	ip, #0
 800a7d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7d8:	f8d0 e000 	ldr.w	lr, [r0]
 800a7dc:	b293      	uxth	r3, r2
 800a7de:	ebac 0303 	sub.w	r3, ip, r3
 800a7e2:	0c12      	lsrs	r2, r2, #16
 800a7e4:	fa13 f38e 	uxtah	r3, r3, lr
 800a7e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a7ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7f6:	45c1      	cmp	r9, r8
 800a7f8:	f840 3b04 	str.w	r3, [r0], #4
 800a7fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a800:	d2e8      	bcs.n	800a7d4 <quorem+0xb0>
 800a802:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a80a:	b922      	cbnz	r2, 800a816 <quorem+0xf2>
 800a80c:	3b04      	subs	r3, #4
 800a80e:	429d      	cmp	r5, r3
 800a810:	461a      	mov	r2, r3
 800a812:	d30a      	bcc.n	800a82a <quorem+0x106>
 800a814:	613c      	str	r4, [r7, #16]
 800a816:	4630      	mov	r0, r6
 800a818:	b003      	add	sp, #12
 800a81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81e:	6812      	ldr	r2, [r2, #0]
 800a820:	3b04      	subs	r3, #4
 800a822:	2a00      	cmp	r2, #0
 800a824:	d1cc      	bne.n	800a7c0 <quorem+0x9c>
 800a826:	3c01      	subs	r4, #1
 800a828:	e7c7      	b.n	800a7ba <quorem+0x96>
 800a82a:	6812      	ldr	r2, [r2, #0]
 800a82c:	3b04      	subs	r3, #4
 800a82e:	2a00      	cmp	r2, #0
 800a830:	d1f0      	bne.n	800a814 <quorem+0xf0>
 800a832:	3c01      	subs	r4, #1
 800a834:	e7eb      	b.n	800a80e <quorem+0xea>
 800a836:	2000      	movs	r0, #0
 800a838:	e7ee      	b.n	800a818 <quorem+0xf4>
 800a83a:	0000      	movs	r0, r0
 800a83c:	0000      	movs	r0, r0
	...

0800a840 <_dtoa_r>:
 800a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a844:	ed2d 8b02 	vpush	{d8}
 800a848:	ec57 6b10 	vmov	r6, r7, d0
 800a84c:	b095      	sub	sp, #84	; 0x54
 800a84e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a850:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a854:	9105      	str	r1, [sp, #20]
 800a856:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a85a:	4604      	mov	r4, r0
 800a85c:	9209      	str	r2, [sp, #36]	; 0x24
 800a85e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a860:	b975      	cbnz	r5, 800a880 <_dtoa_r+0x40>
 800a862:	2010      	movs	r0, #16
 800a864:	f000 fffc 	bl	800b860 <malloc>
 800a868:	4602      	mov	r2, r0
 800a86a:	6260      	str	r0, [r4, #36]	; 0x24
 800a86c:	b920      	cbnz	r0, 800a878 <_dtoa_r+0x38>
 800a86e:	4bb2      	ldr	r3, [pc, #712]	; (800ab38 <_dtoa_r+0x2f8>)
 800a870:	21ea      	movs	r1, #234	; 0xea
 800a872:	48b2      	ldr	r0, [pc, #712]	; (800ab3c <_dtoa_r+0x2fc>)
 800a874:	f001 ff50 	bl	800c718 <__assert_func>
 800a878:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a87c:	6005      	str	r5, [r0, #0]
 800a87e:	60c5      	str	r5, [r0, #12]
 800a880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a882:	6819      	ldr	r1, [r3, #0]
 800a884:	b151      	cbz	r1, 800a89c <_dtoa_r+0x5c>
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	604a      	str	r2, [r1, #4]
 800a88a:	2301      	movs	r3, #1
 800a88c:	4093      	lsls	r3, r2
 800a88e:	608b      	str	r3, [r1, #8]
 800a890:	4620      	mov	r0, r4
 800a892:	f001 f82d 	bl	800b8f0 <_Bfree>
 800a896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a898:	2200      	movs	r2, #0
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	1e3b      	subs	r3, r7, #0
 800a89e:	bfb9      	ittee	lt
 800a8a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a8a4:	9303      	strlt	r3, [sp, #12]
 800a8a6:	2300      	movge	r3, #0
 800a8a8:	f8c8 3000 	strge.w	r3, [r8]
 800a8ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a8b0:	4ba3      	ldr	r3, [pc, #652]	; (800ab40 <_dtoa_r+0x300>)
 800a8b2:	bfbc      	itt	lt
 800a8b4:	2201      	movlt	r2, #1
 800a8b6:	f8c8 2000 	strlt.w	r2, [r8]
 800a8ba:	ea33 0309 	bics.w	r3, r3, r9
 800a8be:	d11b      	bne.n	800a8f8 <_dtoa_r+0xb8>
 800a8c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a8c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8cc:	4333      	orrs	r3, r6
 800a8ce:	f000 857a 	beq.w	800b3c6 <_dtoa_r+0xb86>
 800a8d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8d4:	b963      	cbnz	r3, 800a8f0 <_dtoa_r+0xb0>
 800a8d6:	4b9b      	ldr	r3, [pc, #620]	; (800ab44 <_dtoa_r+0x304>)
 800a8d8:	e024      	b.n	800a924 <_dtoa_r+0xe4>
 800a8da:	4b9b      	ldr	r3, [pc, #620]	; (800ab48 <_dtoa_r+0x308>)
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	3308      	adds	r3, #8
 800a8e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a8e2:	6013      	str	r3, [r2, #0]
 800a8e4:	9800      	ldr	r0, [sp, #0]
 800a8e6:	b015      	add	sp, #84	; 0x54
 800a8e8:	ecbd 8b02 	vpop	{d8}
 800a8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f0:	4b94      	ldr	r3, [pc, #592]	; (800ab44 <_dtoa_r+0x304>)
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	3303      	adds	r3, #3
 800a8f6:	e7f3      	b.n	800a8e0 <_dtoa_r+0xa0>
 800a8f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	ec51 0b17 	vmov	r0, r1, d7
 800a902:	2300      	movs	r3, #0
 800a904:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a908:	f7f6 f8de 	bl	8000ac8 <__aeabi_dcmpeq>
 800a90c:	4680      	mov	r8, r0
 800a90e:	b158      	cbz	r0, 800a928 <_dtoa_r+0xe8>
 800a910:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a912:	2301      	movs	r3, #1
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f000 8551 	beq.w	800b3c0 <_dtoa_r+0xb80>
 800a91e:	488b      	ldr	r0, [pc, #556]	; (800ab4c <_dtoa_r+0x30c>)
 800a920:	6018      	str	r0, [r3, #0]
 800a922:	1e43      	subs	r3, r0, #1
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	e7dd      	b.n	800a8e4 <_dtoa_r+0xa4>
 800a928:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a92c:	aa12      	add	r2, sp, #72	; 0x48
 800a92e:	a913      	add	r1, sp, #76	; 0x4c
 800a930:	4620      	mov	r0, r4
 800a932:	f001 fabf 	bl	800beb4 <__d2b>
 800a936:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a93a:	4683      	mov	fp, r0
 800a93c:	2d00      	cmp	r5, #0
 800a93e:	d07c      	beq.n	800aa3a <_dtoa_r+0x1fa>
 800a940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a942:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a946:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a94a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a94e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a952:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a956:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a95a:	4b7d      	ldr	r3, [pc, #500]	; (800ab50 <_dtoa_r+0x310>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	4630      	mov	r0, r6
 800a960:	4639      	mov	r1, r7
 800a962:	f7f5 fc91 	bl	8000288 <__aeabi_dsub>
 800a966:	a36e      	add	r3, pc, #440	; (adr r3, 800ab20 <_dtoa_r+0x2e0>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	f7f5 fe44 	bl	80005f8 <__aeabi_dmul>
 800a970:	a36d      	add	r3, pc, #436	; (adr r3, 800ab28 <_dtoa_r+0x2e8>)
 800a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a976:	f7f5 fc89 	bl	800028c <__adddf3>
 800a97a:	4606      	mov	r6, r0
 800a97c:	4628      	mov	r0, r5
 800a97e:	460f      	mov	r7, r1
 800a980:	f7f5 fdd0 	bl	8000524 <__aeabi_i2d>
 800a984:	a36a      	add	r3, pc, #424	; (adr r3, 800ab30 <_dtoa_r+0x2f0>)
 800a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98a:	f7f5 fe35 	bl	80005f8 <__aeabi_dmul>
 800a98e:	4602      	mov	r2, r0
 800a990:	460b      	mov	r3, r1
 800a992:	4630      	mov	r0, r6
 800a994:	4639      	mov	r1, r7
 800a996:	f7f5 fc79 	bl	800028c <__adddf3>
 800a99a:	4606      	mov	r6, r0
 800a99c:	460f      	mov	r7, r1
 800a99e:	f7f6 f8db 	bl	8000b58 <__aeabi_d2iz>
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	4682      	mov	sl, r0
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	4639      	mov	r1, r7
 800a9ac:	f7f6 f896 	bl	8000adc <__aeabi_dcmplt>
 800a9b0:	b148      	cbz	r0, 800a9c6 <_dtoa_r+0x186>
 800a9b2:	4650      	mov	r0, sl
 800a9b4:	f7f5 fdb6 	bl	8000524 <__aeabi_i2d>
 800a9b8:	4632      	mov	r2, r6
 800a9ba:	463b      	mov	r3, r7
 800a9bc:	f7f6 f884 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9c0:	b908      	cbnz	r0, 800a9c6 <_dtoa_r+0x186>
 800a9c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a9c6:	f1ba 0f16 	cmp.w	sl, #22
 800a9ca:	d854      	bhi.n	800aa76 <_dtoa_r+0x236>
 800a9cc:	4b61      	ldr	r3, [pc, #388]	; (800ab54 <_dtoa_r+0x314>)
 800a9ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a9da:	f7f6 f87f 	bl	8000adc <__aeabi_dcmplt>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	d04b      	beq.n	800aa7a <_dtoa_r+0x23a>
 800a9e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	930e      	str	r3, [sp, #56]	; 0x38
 800a9ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9ec:	1b5d      	subs	r5, r3, r5
 800a9ee:	1e6b      	subs	r3, r5, #1
 800a9f0:	9304      	str	r3, [sp, #16]
 800a9f2:	bf43      	ittte	mi
 800a9f4:	2300      	movmi	r3, #0
 800a9f6:	f1c5 0801 	rsbmi	r8, r5, #1
 800a9fa:	9304      	strmi	r3, [sp, #16]
 800a9fc:	f04f 0800 	movpl.w	r8, #0
 800aa00:	f1ba 0f00 	cmp.w	sl, #0
 800aa04:	db3b      	blt.n	800aa7e <_dtoa_r+0x23e>
 800aa06:	9b04      	ldr	r3, [sp, #16]
 800aa08:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800aa0c:	4453      	add	r3, sl
 800aa0e:	9304      	str	r3, [sp, #16]
 800aa10:	2300      	movs	r3, #0
 800aa12:	9306      	str	r3, [sp, #24]
 800aa14:	9b05      	ldr	r3, [sp, #20]
 800aa16:	2b09      	cmp	r3, #9
 800aa18:	d869      	bhi.n	800aaee <_dtoa_r+0x2ae>
 800aa1a:	2b05      	cmp	r3, #5
 800aa1c:	bfc4      	itt	gt
 800aa1e:	3b04      	subgt	r3, #4
 800aa20:	9305      	strgt	r3, [sp, #20]
 800aa22:	9b05      	ldr	r3, [sp, #20]
 800aa24:	f1a3 0302 	sub.w	r3, r3, #2
 800aa28:	bfcc      	ite	gt
 800aa2a:	2500      	movgt	r5, #0
 800aa2c:	2501      	movle	r5, #1
 800aa2e:	2b03      	cmp	r3, #3
 800aa30:	d869      	bhi.n	800ab06 <_dtoa_r+0x2c6>
 800aa32:	e8df f003 	tbb	[pc, r3]
 800aa36:	4e2c      	.short	0x4e2c
 800aa38:	5a4c      	.short	0x5a4c
 800aa3a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800aa3e:	441d      	add	r5, r3
 800aa40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aa44:	2b20      	cmp	r3, #32
 800aa46:	bfc1      	itttt	gt
 800aa48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aa4c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aa50:	fa09 f303 	lslgt.w	r3, r9, r3
 800aa54:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aa58:	bfda      	itte	le
 800aa5a:	f1c3 0320 	rsble	r3, r3, #32
 800aa5e:	fa06 f003 	lslle.w	r0, r6, r3
 800aa62:	4318      	orrgt	r0, r3
 800aa64:	f7f5 fd4e 	bl	8000504 <__aeabi_ui2d>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	4606      	mov	r6, r0
 800aa6c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aa70:	3d01      	subs	r5, #1
 800aa72:	9310      	str	r3, [sp, #64]	; 0x40
 800aa74:	e771      	b.n	800a95a <_dtoa_r+0x11a>
 800aa76:	2301      	movs	r3, #1
 800aa78:	e7b6      	b.n	800a9e8 <_dtoa_r+0x1a8>
 800aa7a:	900e      	str	r0, [sp, #56]	; 0x38
 800aa7c:	e7b5      	b.n	800a9ea <_dtoa_r+0x1aa>
 800aa7e:	f1ca 0300 	rsb	r3, sl, #0
 800aa82:	9306      	str	r3, [sp, #24]
 800aa84:	2300      	movs	r3, #0
 800aa86:	eba8 080a 	sub.w	r8, r8, sl
 800aa8a:	930d      	str	r3, [sp, #52]	; 0x34
 800aa8c:	e7c2      	b.n	800aa14 <_dtoa_r+0x1d4>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	9308      	str	r3, [sp, #32]
 800aa92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	dc39      	bgt.n	800ab0c <_dtoa_r+0x2cc>
 800aa98:	f04f 0901 	mov.w	r9, #1
 800aa9c:	f8cd 9004 	str.w	r9, [sp, #4]
 800aaa0:	464b      	mov	r3, r9
 800aaa2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800aaa6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	6042      	str	r2, [r0, #4]
 800aaac:	2204      	movs	r2, #4
 800aaae:	f102 0614 	add.w	r6, r2, #20
 800aab2:	429e      	cmp	r6, r3
 800aab4:	6841      	ldr	r1, [r0, #4]
 800aab6:	d92f      	bls.n	800ab18 <_dtoa_r+0x2d8>
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 fed9 	bl	800b870 <_Balloc>
 800aabe:	9000      	str	r0, [sp, #0]
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d14b      	bne.n	800ab5c <_dtoa_r+0x31c>
 800aac4:	4b24      	ldr	r3, [pc, #144]	; (800ab58 <_dtoa_r+0x318>)
 800aac6:	4602      	mov	r2, r0
 800aac8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aacc:	e6d1      	b.n	800a872 <_dtoa_r+0x32>
 800aace:	2301      	movs	r3, #1
 800aad0:	e7de      	b.n	800aa90 <_dtoa_r+0x250>
 800aad2:	2300      	movs	r3, #0
 800aad4:	9308      	str	r3, [sp, #32]
 800aad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aad8:	eb0a 0903 	add.w	r9, sl, r3
 800aadc:	f109 0301 	add.w	r3, r9, #1
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	9301      	str	r3, [sp, #4]
 800aae4:	bfb8      	it	lt
 800aae6:	2301      	movlt	r3, #1
 800aae8:	e7dd      	b.n	800aaa6 <_dtoa_r+0x266>
 800aaea:	2301      	movs	r3, #1
 800aaec:	e7f2      	b.n	800aad4 <_dtoa_r+0x294>
 800aaee:	2501      	movs	r5, #1
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	9305      	str	r3, [sp, #20]
 800aaf4:	9508      	str	r5, [sp, #32]
 800aaf6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800aafa:	2200      	movs	r2, #0
 800aafc:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab00:	2312      	movs	r3, #18
 800ab02:	9209      	str	r2, [sp, #36]	; 0x24
 800ab04:	e7cf      	b.n	800aaa6 <_dtoa_r+0x266>
 800ab06:	2301      	movs	r3, #1
 800ab08:	9308      	str	r3, [sp, #32]
 800ab0a:	e7f4      	b.n	800aaf6 <_dtoa_r+0x2b6>
 800ab0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ab10:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab14:	464b      	mov	r3, r9
 800ab16:	e7c6      	b.n	800aaa6 <_dtoa_r+0x266>
 800ab18:	3101      	adds	r1, #1
 800ab1a:	6041      	str	r1, [r0, #4]
 800ab1c:	0052      	lsls	r2, r2, #1
 800ab1e:	e7c6      	b.n	800aaae <_dtoa_r+0x26e>
 800ab20:	636f4361 	.word	0x636f4361
 800ab24:	3fd287a7 	.word	0x3fd287a7
 800ab28:	8b60c8b3 	.word	0x8b60c8b3
 800ab2c:	3fc68a28 	.word	0x3fc68a28
 800ab30:	509f79fb 	.word	0x509f79fb
 800ab34:	3fd34413 	.word	0x3fd34413
 800ab38:	0800f951 	.word	0x0800f951
 800ab3c:	0800f968 	.word	0x0800f968
 800ab40:	7ff00000 	.word	0x7ff00000
 800ab44:	0800f94d 	.word	0x0800f94d
 800ab48:	0800f944 	.word	0x0800f944
 800ab4c:	0800f921 	.word	0x0800f921
 800ab50:	3ff80000 	.word	0x3ff80000
 800ab54:	0800fac0 	.word	0x0800fac0
 800ab58:	0800f9c7 	.word	0x0800f9c7
 800ab5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab5e:	9a00      	ldr	r2, [sp, #0]
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	9b01      	ldr	r3, [sp, #4]
 800ab64:	2b0e      	cmp	r3, #14
 800ab66:	f200 80ad 	bhi.w	800acc4 <_dtoa_r+0x484>
 800ab6a:	2d00      	cmp	r5, #0
 800ab6c:	f000 80aa 	beq.w	800acc4 <_dtoa_r+0x484>
 800ab70:	f1ba 0f00 	cmp.w	sl, #0
 800ab74:	dd36      	ble.n	800abe4 <_dtoa_r+0x3a4>
 800ab76:	4ac3      	ldr	r2, [pc, #780]	; (800ae84 <_dtoa_r+0x644>)
 800ab78:	f00a 030f 	and.w	r3, sl, #15
 800ab7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab80:	ed93 7b00 	vldr	d7, [r3]
 800ab84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ab88:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ab8c:	eeb0 8a47 	vmov.f32	s16, s14
 800ab90:	eef0 8a67 	vmov.f32	s17, s15
 800ab94:	d016      	beq.n	800abc4 <_dtoa_r+0x384>
 800ab96:	4bbc      	ldr	r3, [pc, #752]	; (800ae88 <_dtoa_r+0x648>)
 800ab98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aba0:	f7f5 fe54 	bl	800084c <__aeabi_ddiv>
 800aba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aba8:	f007 070f 	and.w	r7, r7, #15
 800abac:	2503      	movs	r5, #3
 800abae:	4eb6      	ldr	r6, [pc, #728]	; (800ae88 <_dtoa_r+0x648>)
 800abb0:	b957      	cbnz	r7, 800abc8 <_dtoa_r+0x388>
 800abb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abb6:	ec53 2b18 	vmov	r2, r3, d8
 800abba:	f7f5 fe47 	bl	800084c <__aeabi_ddiv>
 800abbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abc2:	e029      	b.n	800ac18 <_dtoa_r+0x3d8>
 800abc4:	2502      	movs	r5, #2
 800abc6:	e7f2      	b.n	800abae <_dtoa_r+0x36e>
 800abc8:	07f9      	lsls	r1, r7, #31
 800abca:	d508      	bpl.n	800abde <_dtoa_r+0x39e>
 800abcc:	ec51 0b18 	vmov	r0, r1, d8
 800abd0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800abd4:	f7f5 fd10 	bl	80005f8 <__aeabi_dmul>
 800abd8:	ec41 0b18 	vmov	d8, r0, r1
 800abdc:	3501      	adds	r5, #1
 800abde:	107f      	asrs	r7, r7, #1
 800abe0:	3608      	adds	r6, #8
 800abe2:	e7e5      	b.n	800abb0 <_dtoa_r+0x370>
 800abe4:	f000 80a6 	beq.w	800ad34 <_dtoa_r+0x4f4>
 800abe8:	f1ca 0600 	rsb	r6, sl, #0
 800abec:	4ba5      	ldr	r3, [pc, #660]	; (800ae84 <_dtoa_r+0x644>)
 800abee:	4fa6      	ldr	r7, [pc, #664]	; (800ae88 <_dtoa_r+0x648>)
 800abf0:	f006 020f 	and.w	r2, r6, #15
 800abf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac00:	f7f5 fcfa 	bl	80005f8 <__aeabi_dmul>
 800ac04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac08:	1136      	asrs	r6, r6, #4
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	2502      	movs	r5, #2
 800ac0e:	2e00      	cmp	r6, #0
 800ac10:	f040 8085 	bne.w	800ad1e <_dtoa_r+0x4de>
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1d2      	bne.n	800abbe <_dtoa_r+0x37e>
 800ac18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f000 808c 	beq.w	800ad38 <_dtoa_r+0x4f8>
 800ac20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ac24:	4b99      	ldr	r3, [pc, #612]	; (800ae8c <_dtoa_r+0x64c>)
 800ac26:	2200      	movs	r2, #0
 800ac28:	4630      	mov	r0, r6
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	f7f5 ff56 	bl	8000adc <__aeabi_dcmplt>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	f000 8081 	beq.w	800ad38 <_dtoa_r+0x4f8>
 800ac36:	9b01      	ldr	r3, [sp, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d07d      	beq.n	800ad38 <_dtoa_r+0x4f8>
 800ac3c:	f1b9 0f00 	cmp.w	r9, #0
 800ac40:	dd3c      	ble.n	800acbc <_dtoa_r+0x47c>
 800ac42:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800ac46:	9307      	str	r3, [sp, #28]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	4b91      	ldr	r3, [pc, #580]	; (800ae90 <_dtoa_r+0x650>)
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	4639      	mov	r1, r7
 800ac50:	f7f5 fcd2 	bl	80005f8 <__aeabi_dmul>
 800ac54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac58:	3501      	adds	r5, #1
 800ac5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ac5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ac62:	4628      	mov	r0, r5
 800ac64:	f7f5 fc5e 	bl	8000524 <__aeabi_i2d>
 800ac68:	4632      	mov	r2, r6
 800ac6a:	463b      	mov	r3, r7
 800ac6c:	f7f5 fcc4 	bl	80005f8 <__aeabi_dmul>
 800ac70:	4b88      	ldr	r3, [pc, #544]	; (800ae94 <_dtoa_r+0x654>)
 800ac72:	2200      	movs	r2, #0
 800ac74:	f7f5 fb0a 	bl	800028c <__adddf3>
 800ac78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ac7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac80:	9303      	str	r3, [sp, #12]
 800ac82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d15c      	bne.n	800ad42 <_dtoa_r+0x502>
 800ac88:	4b83      	ldr	r3, [pc, #524]	; (800ae98 <_dtoa_r+0x658>)
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	4639      	mov	r1, r7
 800ac90:	f7f5 fafa 	bl	8000288 <__aeabi_dsub>
 800ac94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac98:	4606      	mov	r6, r0
 800ac9a:	460f      	mov	r7, r1
 800ac9c:	f7f5 ff3c 	bl	8000b18 <__aeabi_dcmpgt>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	f040 8296 	bne.w	800b1d2 <_dtoa_r+0x992>
 800aca6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800acaa:	4630      	mov	r0, r6
 800acac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acb0:	4639      	mov	r1, r7
 800acb2:	f7f5 ff13 	bl	8000adc <__aeabi_dcmplt>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	f040 8288 	bne.w	800b1cc <_dtoa_r+0x98c>
 800acbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800acc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f2c0 8158 	blt.w	800af7c <_dtoa_r+0x73c>
 800accc:	f1ba 0f0e 	cmp.w	sl, #14
 800acd0:	f300 8154 	bgt.w	800af7c <_dtoa_r+0x73c>
 800acd4:	4b6b      	ldr	r3, [pc, #428]	; (800ae84 <_dtoa_r+0x644>)
 800acd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800acda:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f280 80e3 	bge.w	800aeac <_dtoa_r+0x66c>
 800ace6:	9b01      	ldr	r3, [sp, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f300 80df 	bgt.w	800aeac <_dtoa_r+0x66c>
 800acee:	f040 826d 	bne.w	800b1cc <_dtoa_r+0x98c>
 800acf2:	4b69      	ldr	r3, [pc, #420]	; (800ae98 <_dtoa_r+0x658>)
 800acf4:	2200      	movs	r2, #0
 800acf6:	4640      	mov	r0, r8
 800acf8:	4649      	mov	r1, r9
 800acfa:	f7f5 fc7d 	bl	80005f8 <__aeabi_dmul>
 800acfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad02:	f7f5 feff 	bl	8000b04 <__aeabi_dcmpge>
 800ad06:	9e01      	ldr	r6, [sp, #4]
 800ad08:	4637      	mov	r7, r6
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	f040 8243 	bne.w	800b196 <_dtoa_r+0x956>
 800ad10:	9d00      	ldr	r5, [sp, #0]
 800ad12:	2331      	movs	r3, #49	; 0x31
 800ad14:	f805 3b01 	strb.w	r3, [r5], #1
 800ad18:	f10a 0a01 	add.w	sl, sl, #1
 800ad1c:	e23f      	b.n	800b19e <_dtoa_r+0x95e>
 800ad1e:	07f2      	lsls	r2, r6, #31
 800ad20:	d505      	bpl.n	800ad2e <_dtoa_r+0x4ee>
 800ad22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad26:	f7f5 fc67 	bl	80005f8 <__aeabi_dmul>
 800ad2a:	3501      	adds	r5, #1
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	1076      	asrs	r6, r6, #1
 800ad30:	3708      	adds	r7, #8
 800ad32:	e76c      	b.n	800ac0e <_dtoa_r+0x3ce>
 800ad34:	2502      	movs	r5, #2
 800ad36:	e76f      	b.n	800ac18 <_dtoa_r+0x3d8>
 800ad38:	9b01      	ldr	r3, [sp, #4]
 800ad3a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ad3e:	930c      	str	r3, [sp, #48]	; 0x30
 800ad40:	e78d      	b.n	800ac5e <_dtoa_r+0x41e>
 800ad42:	9900      	ldr	r1, [sp, #0]
 800ad44:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ad46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad48:	4b4e      	ldr	r3, [pc, #312]	; (800ae84 <_dtoa_r+0x644>)
 800ad4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad4e:	4401      	add	r1, r0
 800ad50:	9102      	str	r1, [sp, #8]
 800ad52:	9908      	ldr	r1, [sp, #32]
 800ad54:	eeb0 8a47 	vmov.f32	s16, s14
 800ad58:	eef0 8a67 	vmov.f32	s17, s15
 800ad5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad64:	2900      	cmp	r1, #0
 800ad66:	d045      	beq.n	800adf4 <_dtoa_r+0x5b4>
 800ad68:	494c      	ldr	r1, [pc, #304]	; (800ae9c <_dtoa_r+0x65c>)
 800ad6a:	2000      	movs	r0, #0
 800ad6c:	f7f5 fd6e 	bl	800084c <__aeabi_ddiv>
 800ad70:	ec53 2b18 	vmov	r2, r3, d8
 800ad74:	f7f5 fa88 	bl	8000288 <__aeabi_dsub>
 800ad78:	9d00      	ldr	r5, [sp, #0]
 800ad7a:	ec41 0b18 	vmov	d8, r0, r1
 800ad7e:	4639      	mov	r1, r7
 800ad80:	4630      	mov	r0, r6
 800ad82:	f7f5 fee9 	bl	8000b58 <__aeabi_d2iz>
 800ad86:	900c      	str	r0, [sp, #48]	; 0x30
 800ad88:	f7f5 fbcc 	bl	8000524 <__aeabi_i2d>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	4630      	mov	r0, r6
 800ad92:	4639      	mov	r1, r7
 800ad94:	f7f5 fa78 	bl	8000288 <__aeabi_dsub>
 800ad98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad9a:	3330      	adds	r3, #48	; 0x30
 800ad9c:	f805 3b01 	strb.w	r3, [r5], #1
 800ada0:	ec53 2b18 	vmov	r2, r3, d8
 800ada4:	4606      	mov	r6, r0
 800ada6:	460f      	mov	r7, r1
 800ada8:	f7f5 fe98 	bl	8000adc <__aeabi_dcmplt>
 800adac:	2800      	cmp	r0, #0
 800adae:	d165      	bne.n	800ae7c <_dtoa_r+0x63c>
 800adb0:	4632      	mov	r2, r6
 800adb2:	463b      	mov	r3, r7
 800adb4:	4935      	ldr	r1, [pc, #212]	; (800ae8c <_dtoa_r+0x64c>)
 800adb6:	2000      	movs	r0, #0
 800adb8:	f7f5 fa66 	bl	8000288 <__aeabi_dsub>
 800adbc:	ec53 2b18 	vmov	r2, r3, d8
 800adc0:	f7f5 fe8c 	bl	8000adc <__aeabi_dcmplt>
 800adc4:	2800      	cmp	r0, #0
 800adc6:	f040 80b9 	bne.w	800af3c <_dtoa_r+0x6fc>
 800adca:	9b02      	ldr	r3, [sp, #8]
 800adcc:	429d      	cmp	r5, r3
 800adce:	f43f af75 	beq.w	800acbc <_dtoa_r+0x47c>
 800add2:	4b2f      	ldr	r3, [pc, #188]	; (800ae90 <_dtoa_r+0x650>)
 800add4:	ec51 0b18 	vmov	r0, r1, d8
 800add8:	2200      	movs	r2, #0
 800adda:	f7f5 fc0d 	bl	80005f8 <__aeabi_dmul>
 800adde:	4b2c      	ldr	r3, [pc, #176]	; (800ae90 <_dtoa_r+0x650>)
 800ade0:	ec41 0b18 	vmov	d8, r0, r1
 800ade4:	2200      	movs	r2, #0
 800ade6:	4630      	mov	r0, r6
 800ade8:	4639      	mov	r1, r7
 800adea:	f7f5 fc05 	bl	80005f8 <__aeabi_dmul>
 800adee:	4606      	mov	r6, r0
 800adf0:	460f      	mov	r7, r1
 800adf2:	e7c4      	b.n	800ad7e <_dtoa_r+0x53e>
 800adf4:	ec51 0b17 	vmov	r0, r1, d7
 800adf8:	f7f5 fbfe 	bl	80005f8 <__aeabi_dmul>
 800adfc:	9b02      	ldr	r3, [sp, #8]
 800adfe:	9d00      	ldr	r5, [sp, #0]
 800ae00:	930c      	str	r3, [sp, #48]	; 0x30
 800ae02:	ec41 0b18 	vmov	d8, r0, r1
 800ae06:	4639      	mov	r1, r7
 800ae08:	4630      	mov	r0, r6
 800ae0a:	f7f5 fea5 	bl	8000b58 <__aeabi_d2iz>
 800ae0e:	9011      	str	r0, [sp, #68]	; 0x44
 800ae10:	f7f5 fb88 	bl	8000524 <__aeabi_i2d>
 800ae14:	4602      	mov	r2, r0
 800ae16:	460b      	mov	r3, r1
 800ae18:	4630      	mov	r0, r6
 800ae1a:	4639      	mov	r1, r7
 800ae1c:	f7f5 fa34 	bl	8000288 <__aeabi_dsub>
 800ae20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae22:	3330      	adds	r3, #48	; 0x30
 800ae24:	f805 3b01 	strb.w	r3, [r5], #1
 800ae28:	9b02      	ldr	r3, [sp, #8]
 800ae2a:	429d      	cmp	r5, r3
 800ae2c:	4606      	mov	r6, r0
 800ae2e:	460f      	mov	r7, r1
 800ae30:	f04f 0200 	mov.w	r2, #0
 800ae34:	d134      	bne.n	800aea0 <_dtoa_r+0x660>
 800ae36:	4b19      	ldr	r3, [pc, #100]	; (800ae9c <_dtoa_r+0x65c>)
 800ae38:	ec51 0b18 	vmov	r0, r1, d8
 800ae3c:	f7f5 fa26 	bl	800028c <__adddf3>
 800ae40:	4602      	mov	r2, r0
 800ae42:	460b      	mov	r3, r1
 800ae44:	4630      	mov	r0, r6
 800ae46:	4639      	mov	r1, r7
 800ae48:	f7f5 fe66 	bl	8000b18 <__aeabi_dcmpgt>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d175      	bne.n	800af3c <_dtoa_r+0x6fc>
 800ae50:	ec53 2b18 	vmov	r2, r3, d8
 800ae54:	4911      	ldr	r1, [pc, #68]	; (800ae9c <_dtoa_r+0x65c>)
 800ae56:	2000      	movs	r0, #0
 800ae58:	f7f5 fa16 	bl	8000288 <__aeabi_dsub>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	460b      	mov	r3, r1
 800ae60:	4630      	mov	r0, r6
 800ae62:	4639      	mov	r1, r7
 800ae64:	f7f5 fe3a 	bl	8000adc <__aeabi_dcmplt>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	f43f af27 	beq.w	800acbc <_dtoa_r+0x47c>
 800ae6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae70:	1e6b      	subs	r3, r5, #1
 800ae72:	930c      	str	r3, [sp, #48]	; 0x30
 800ae74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae78:	2b30      	cmp	r3, #48	; 0x30
 800ae7a:	d0f8      	beq.n	800ae6e <_dtoa_r+0x62e>
 800ae7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ae80:	e04a      	b.n	800af18 <_dtoa_r+0x6d8>
 800ae82:	bf00      	nop
 800ae84:	0800fac0 	.word	0x0800fac0
 800ae88:	0800fa98 	.word	0x0800fa98
 800ae8c:	3ff00000 	.word	0x3ff00000
 800ae90:	40240000 	.word	0x40240000
 800ae94:	401c0000 	.word	0x401c0000
 800ae98:	40140000 	.word	0x40140000
 800ae9c:	3fe00000 	.word	0x3fe00000
 800aea0:	4baf      	ldr	r3, [pc, #700]	; (800b160 <_dtoa_r+0x920>)
 800aea2:	f7f5 fba9 	bl	80005f8 <__aeabi_dmul>
 800aea6:	4606      	mov	r6, r0
 800aea8:	460f      	mov	r7, r1
 800aeaa:	e7ac      	b.n	800ae06 <_dtoa_r+0x5c6>
 800aeac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aeb0:	9d00      	ldr	r5, [sp, #0]
 800aeb2:	4642      	mov	r2, r8
 800aeb4:	464b      	mov	r3, r9
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	4639      	mov	r1, r7
 800aeba:	f7f5 fcc7 	bl	800084c <__aeabi_ddiv>
 800aebe:	f7f5 fe4b 	bl	8000b58 <__aeabi_d2iz>
 800aec2:	9002      	str	r0, [sp, #8]
 800aec4:	f7f5 fb2e 	bl	8000524 <__aeabi_i2d>
 800aec8:	4642      	mov	r2, r8
 800aeca:	464b      	mov	r3, r9
 800aecc:	f7f5 fb94 	bl	80005f8 <__aeabi_dmul>
 800aed0:	4602      	mov	r2, r0
 800aed2:	460b      	mov	r3, r1
 800aed4:	4630      	mov	r0, r6
 800aed6:	4639      	mov	r1, r7
 800aed8:	f7f5 f9d6 	bl	8000288 <__aeabi_dsub>
 800aedc:	9e02      	ldr	r6, [sp, #8]
 800aede:	9f01      	ldr	r7, [sp, #4]
 800aee0:	3630      	adds	r6, #48	; 0x30
 800aee2:	f805 6b01 	strb.w	r6, [r5], #1
 800aee6:	9e00      	ldr	r6, [sp, #0]
 800aee8:	1bae      	subs	r6, r5, r6
 800aeea:	42b7      	cmp	r7, r6
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	d137      	bne.n	800af62 <_dtoa_r+0x722>
 800aef2:	f7f5 f9cb 	bl	800028c <__adddf3>
 800aef6:	4642      	mov	r2, r8
 800aef8:	464b      	mov	r3, r9
 800aefa:	4606      	mov	r6, r0
 800aefc:	460f      	mov	r7, r1
 800aefe:	f7f5 fe0b 	bl	8000b18 <__aeabi_dcmpgt>
 800af02:	b9c8      	cbnz	r0, 800af38 <_dtoa_r+0x6f8>
 800af04:	4642      	mov	r2, r8
 800af06:	464b      	mov	r3, r9
 800af08:	4630      	mov	r0, r6
 800af0a:	4639      	mov	r1, r7
 800af0c:	f7f5 fddc 	bl	8000ac8 <__aeabi_dcmpeq>
 800af10:	b110      	cbz	r0, 800af18 <_dtoa_r+0x6d8>
 800af12:	9b02      	ldr	r3, [sp, #8]
 800af14:	07d9      	lsls	r1, r3, #31
 800af16:	d40f      	bmi.n	800af38 <_dtoa_r+0x6f8>
 800af18:	4620      	mov	r0, r4
 800af1a:	4659      	mov	r1, fp
 800af1c:	f000 fce8 	bl	800b8f0 <_Bfree>
 800af20:	2300      	movs	r3, #0
 800af22:	702b      	strb	r3, [r5, #0]
 800af24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af26:	f10a 0001 	add.w	r0, sl, #1
 800af2a:	6018      	str	r0, [r3, #0]
 800af2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f43f acd8 	beq.w	800a8e4 <_dtoa_r+0xa4>
 800af34:	601d      	str	r5, [r3, #0]
 800af36:	e4d5      	b.n	800a8e4 <_dtoa_r+0xa4>
 800af38:	f8cd a01c 	str.w	sl, [sp, #28]
 800af3c:	462b      	mov	r3, r5
 800af3e:	461d      	mov	r5, r3
 800af40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af44:	2a39      	cmp	r2, #57	; 0x39
 800af46:	d108      	bne.n	800af5a <_dtoa_r+0x71a>
 800af48:	9a00      	ldr	r2, [sp, #0]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d1f7      	bne.n	800af3e <_dtoa_r+0x6fe>
 800af4e:	9a07      	ldr	r2, [sp, #28]
 800af50:	9900      	ldr	r1, [sp, #0]
 800af52:	3201      	adds	r2, #1
 800af54:	9207      	str	r2, [sp, #28]
 800af56:	2230      	movs	r2, #48	; 0x30
 800af58:	700a      	strb	r2, [r1, #0]
 800af5a:	781a      	ldrb	r2, [r3, #0]
 800af5c:	3201      	adds	r2, #1
 800af5e:	701a      	strb	r2, [r3, #0]
 800af60:	e78c      	b.n	800ae7c <_dtoa_r+0x63c>
 800af62:	4b7f      	ldr	r3, [pc, #508]	; (800b160 <_dtoa_r+0x920>)
 800af64:	2200      	movs	r2, #0
 800af66:	f7f5 fb47 	bl	80005f8 <__aeabi_dmul>
 800af6a:	2200      	movs	r2, #0
 800af6c:	2300      	movs	r3, #0
 800af6e:	4606      	mov	r6, r0
 800af70:	460f      	mov	r7, r1
 800af72:	f7f5 fda9 	bl	8000ac8 <__aeabi_dcmpeq>
 800af76:	2800      	cmp	r0, #0
 800af78:	d09b      	beq.n	800aeb2 <_dtoa_r+0x672>
 800af7a:	e7cd      	b.n	800af18 <_dtoa_r+0x6d8>
 800af7c:	9a08      	ldr	r2, [sp, #32]
 800af7e:	2a00      	cmp	r2, #0
 800af80:	f000 80c4 	beq.w	800b10c <_dtoa_r+0x8cc>
 800af84:	9a05      	ldr	r2, [sp, #20]
 800af86:	2a01      	cmp	r2, #1
 800af88:	f300 80a8 	bgt.w	800b0dc <_dtoa_r+0x89c>
 800af8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af8e:	2a00      	cmp	r2, #0
 800af90:	f000 80a0 	beq.w	800b0d4 <_dtoa_r+0x894>
 800af94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af98:	9e06      	ldr	r6, [sp, #24]
 800af9a:	4645      	mov	r5, r8
 800af9c:	9a04      	ldr	r2, [sp, #16]
 800af9e:	2101      	movs	r1, #1
 800afa0:	441a      	add	r2, r3
 800afa2:	4620      	mov	r0, r4
 800afa4:	4498      	add	r8, r3
 800afa6:	9204      	str	r2, [sp, #16]
 800afa8:	f000 fd5e 	bl	800ba68 <__i2b>
 800afac:	4607      	mov	r7, r0
 800afae:	2d00      	cmp	r5, #0
 800afb0:	dd0b      	ble.n	800afca <_dtoa_r+0x78a>
 800afb2:	9b04      	ldr	r3, [sp, #16]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	dd08      	ble.n	800afca <_dtoa_r+0x78a>
 800afb8:	42ab      	cmp	r3, r5
 800afba:	9a04      	ldr	r2, [sp, #16]
 800afbc:	bfa8      	it	ge
 800afbe:	462b      	movge	r3, r5
 800afc0:	eba8 0803 	sub.w	r8, r8, r3
 800afc4:	1aed      	subs	r5, r5, r3
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	9304      	str	r3, [sp, #16]
 800afca:	9b06      	ldr	r3, [sp, #24]
 800afcc:	b1fb      	cbz	r3, 800b00e <_dtoa_r+0x7ce>
 800afce:	9b08      	ldr	r3, [sp, #32]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f000 809f 	beq.w	800b114 <_dtoa_r+0x8d4>
 800afd6:	2e00      	cmp	r6, #0
 800afd8:	dd11      	ble.n	800affe <_dtoa_r+0x7be>
 800afda:	4639      	mov	r1, r7
 800afdc:	4632      	mov	r2, r6
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 fdfe 	bl	800bbe0 <__pow5mult>
 800afe4:	465a      	mov	r2, fp
 800afe6:	4601      	mov	r1, r0
 800afe8:	4607      	mov	r7, r0
 800afea:	4620      	mov	r0, r4
 800afec:	f000 fd52 	bl	800ba94 <__multiply>
 800aff0:	4659      	mov	r1, fp
 800aff2:	9007      	str	r0, [sp, #28]
 800aff4:	4620      	mov	r0, r4
 800aff6:	f000 fc7b 	bl	800b8f0 <_Bfree>
 800affa:	9b07      	ldr	r3, [sp, #28]
 800affc:	469b      	mov	fp, r3
 800affe:	9b06      	ldr	r3, [sp, #24]
 800b000:	1b9a      	subs	r2, r3, r6
 800b002:	d004      	beq.n	800b00e <_dtoa_r+0x7ce>
 800b004:	4659      	mov	r1, fp
 800b006:	4620      	mov	r0, r4
 800b008:	f000 fdea 	bl	800bbe0 <__pow5mult>
 800b00c:	4683      	mov	fp, r0
 800b00e:	2101      	movs	r1, #1
 800b010:	4620      	mov	r0, r4
 800b012:	f000 fd29 	bl	800ba68 <__i2b>
 800b016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b018:	2b00      	cmp	r3, #0
 800b01a:	4606      	mov	r6, r0
 800b01c:	dd7c      	ble.n	800b118 <_dtoa_r+0x8d8>
 800b01e:	461a      	mov	r2, r3
 800b020:	4601      	mov	r1, r0
 800b022:	4620      	mov	r0, r4
 800b024:	f000 fddc 	bl	800bbe0 <__pow5mult>
 800b028:	9b05      	ldr	r3, [sp, #20]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	4606      	mov	r6, r0
 800b02e:	dd76      	ble.n	800b11e <_dtoa_r+0x8de>
 800b030:	2300      	movs	r3, #0
 800b032:	9306      	str	r3, [sp, #24]
 800b034:	6933      	ldr	r3, [r6, #16]
 800b036:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b03a:	6918      	ldr	r0, [r3, #16]
 800b03c:	f000 fcc4 	bl	800b9c8 <__hi0bits>
 800b040:	f1c0 0020 	rsb	r0, r0, #32
 800b044:	9b04      	ldr	r3, [sp, #16]
 800b046:	4418      	add	r0, r3
 800b048:	f010 001f 	ands.w	r0, r0, #31
 800b04c:	f000 8086 	beq.w	800b15c <_dtoa_r+0x91c>
 800b050:	f1c0 0320 	rsb	r3, r0, #32
 800b054:	2b04      	cmp	r3, #4
 800b056:	dd7f      	ble.n	800b158 <_dtoa_r+0x918>
 800b058:	f1c0 001c 	rsb	r0, r0, #28
 800b05c:	9b04      	ldr	r3, [sp, #16]
 800b05e:	4403      	add	r3, r0
 800b060:	4480      	add	r8, r0
 800b062:	4405      	add	r5, r0
 800b064:	9304      	str	r3, [sp, #16]
 800b066:	f1b8 0f00 	cmp.w	r8, #0
 800b06a:	dd05      	ble.n	800b078 <_dtoa_r+0x838>
 800b06c:	4659      	mov	r1, fp
 800b06e:	4642      	mov	r2, r8
 800b070:	4620      	mov	r0, r4
 800b072:	f000 fe0f 	bl	800bc94 <__lshift>
 800b076:	4683      	mov	fp, r0
 800b078:	9b04      	ldr	r3, [sp, #16]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	dd05      	ble.n	800b08a <_dtoa_r+0x84a>
 800b07e:	4631      	mov	r1, r6
 800b080:	461a      	mov	r2, r3
 800b082:	4620      	mov	r0, r4
 800b084:	f000 fe06 	bl	800bc94 <__lshift>
 800b088:	4606      	mov	r6, r0
 800b08a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d069      	beq.n	800b164 <_dtoa_r+0x924>
 800b090:	4631      	mov	r1, r6
 800b092:	4658      	mov	r0, fp
 800b094:	f000 fe6a 	bl	800bd6c <__mcmp>
 800b098:	2800      	cmp	r0, #0
 800b09a:	da63      	bge.n	800b164 <_dtoa_r+0x924>
 800b09c:	2300      	movs	r3, #0
 800b09e:	4659      	mov	r1, fp
 800b0a0:	220a      	movs	r2, #10
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f000 fc46 	bl	800b934 <__multadd>
 800b0a8:	9b08      	ldr	r3, [sp, #32]
 800b0aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b0ae:	4683      	mov	fp, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 818f 	beq.w	800b3d4 <_dtoa_r+0xb94>
 800b0b6:	4639      	mov	r1, r7
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	220a      	movs	r2, #10
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f000 fc39 	bl	800b934 <__multadd>
 800b0c2:	f1b9 0f00 	cmp.w	r9, #0
 800b0c6:	4607      	mov	r7, r0
 800b0c8:	f300 808e 	bgt.w	800b1e8 <_dtoa_r+0x9a8>
 800b0cc:	9b05      	ldr	r3, [sp, #20]
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	dc50      	bgt.n	800b174 <_dtoa_r+0x934>
 800b0d2:	e089      	b.n	800b1e8 <_dtoa_r+0x9a8>
 800b0d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b0da:	e75d      	b.n	800af98 <_dtoa_r+0x758>
 800b0dc:	9b01      	ldr	r3, [sp, #4]
 800b0de:	1e5e      	subs	r6, r3, #1
 800b0e0:	9b06      	ldr	r3, [sp, #24]
 800b0e2:	42b3      	cmp	r3, r6
 800b0e4:	bfbf      	itttt	lt
 800b0e6:	9b06      	ldrlt	r3, [sp, #24]
 800b0e8:	9606      	strlt	r6, [sp, #24]
 800b0ea:	1af2      	sublt	r2, r6, r3
 800b0ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b0ee:	bfb6      	itet	lt
 800b0f0:	189b      	addlt	r3, r3, r2
 800b0f2:	1b9e      	subge	r6, r3, r6
 800b0f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b0f6:	9b01      	ldr	r3, [sp, #4]
 800b0f8:	bfb8      	it	lt
 800b0fa:	2600      	movlt	r6, #0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	bfb5      	itete	lt
 800b100:	eba8 0503 	sublt.w	r5, r8, r3
 800b104:	9b01      	ldrge	r3, [sp, #4]
 800b106:	2300      	movlt	r3, #0
 800b108:	4645      	movge	r5, r8
 800b10a:	e747      	b.n	800af9c <_dtoa_r+0x75c>
 800b10c:	9e06      	ldr	r6, [sp, #24]
 800b10e:	9f08      	ldr	r7, [sp, #32]
 800b110:	4645      	mov	r5, r8
 800b112:	e74c      	b.n	800afae <_dtoa_r+0x76e>
 800b114:	9a06      	ldr	r2, [sp, #24]
 800b116:	e775      	b.n	800b004 <_dtoa_r+0x7c4>
 800b118:	9b05      	ldr	r3, [sp, #20]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	dc18      	bgt.n	800b150 <_dtoa_r+0x910>
 800b11e:	9b02      	ldr	r3, [sp, #8]
 800b120:	b9b3      	cbnz	r3, 800b150 <_dtoa_r+0x910>
 800b122:	9b03      	ldr	r3, [sp, #12]
 800b124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b128:	b9a3      	cbnz	r3, 800b154 <_dtoa_r+0x914>
 800b12a:	9b03      	ldr	r3, [sp, #12]
 800b12c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b130:	0d1b      	lsrs	r3, r3, #20
 800b132:	051b      	lsls	r3, r3, #20
 800b134:	b12b      	cbz	r3, 800b142 <_dtoa_r+0x902>
 800b136:	9b04      	ldr	r3, [sp, #16]
 800b138:	3301      	adds	r3, #1
 800b13a:	9304      	str	r3, [sp, #16]
 800b13c:	f108 0801 	add.w	r8, r8, #1
 800b140:	2301      	movs	r3, #1
 800b142:	9306      	str	r3, [sp, #24]
 800b144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b146:	2b00      	cmp	r3, #0
 800b148:	f47f af74 	bne.w	800b034 <_dtoa_r+0x7f4>
 800b14c:	2001      	movs	r0, #1
 800b14e:	e779      	b.n	800b044 <_dtoa_r+0x804>
 800b150:	2300      	movs	r3, #0
 800b152:	e7f6      	b.n	800b142 <_dtoa_r+0x902>
 800b154:	9b02      	ldr	r3, [sp, #8]
 800b156:	e7f4      	b.n	800b142 <_dtoa_r+0x902>
 800b158:	d085      	beq.n	800b066 <_dtoa_r+0x826>
 800b15a:	4618      	mov	r0, r3
 800b15c:	301c      	adds	r0, #28
 800b15e:	e77d      	b.n	800b05c <_dtoa_r+0x81c>
 800b160:	40240000 	.word	0x40240000
 800b164:	9b01      	ldr	r3, [sp, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	dc38      	bgt.n	800b1dc <_dtoa_r+0x99c>
 800b16a:	9b05      	ldr	r3, [sp, #20]
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	dd35      	ble.n	800b1dc <_dtoa_r+0x99c>
 800b170:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b174:	f1b9 0f00 	cmp.w	r9, #0
 800b178:	d10d      	bne.n	800b196 <_dtoa_r+0x956>
 800b17a:	4631      	mov	r1, r6
 800b17c:	464b      	mov	r3, r9
 800b17e:	2205      	movs	r2, #5
 800b180:	4620      	mov	r0, r4
 800b182:	f000 fbd7 	bl	800b934 <__multadd>
 800b186:	4601      	mov	r1, r0
 800b188:	4606      	mov	r6, r0
 800b18a:	4658      	mov	r0, fp
 800b18c:	f000 fdee 	bl	800bd6c <__mcmp>
 800b190:	2800      	cmp	r0, #0
 800b192:	f73f adbd 	bgt.w	800ad10 <_dtoa_r+0x4d0>
 800b196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b198:	9d00      	ldr	r5, [sp, #0]
 800b19a:	ea6f 0a03 	mvn.w	sl, r3
 800b19e:	f04f 0800 	mov.w	r8, #0
 800b1a2:	4631      	mov	r1, r6
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f000 fba3 	bl	800b8f0 <_Bfree>
 800b1aa:	2f00      	cmp	r7, #0
 800b1ac:	f43f aeb4 	beq.w	800af18 <_dtoa_r+0x6d8>
 800b1b0:	f1b8 0f00 	cmp.w	r8, #0
 800b1b4:	d005      	beq.n	800b1c2 <_dtoa_r+0x982>
 800b1b6:	45b8      	cmp	r8, r7
 800b1b8:	d003      	beq.n	800b1c2 <_dtoa_r+0x982>
 800b1ba:	4641      	mov	r1, r8
 800b1bc:	4620      	mov	r0, r4
 800b1be:	f000 fb97 	bl	800b8f0 <_Bfree>
 800b1c2:	4639      	mov	r1, r7
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f000 fb93 	bl	800b8f0 <_Bfree>
 800b1ca:	e6a5      	b.n	800af18 <_dtoa_r+0x6d8>
 800b1cc:	2600      	movs	r6, #0
 800b1ce:	4637      	mov	r7, r6
 800b1d0:	e7e1      	b.n	800b196 <_dtoa_r+0x956>
 800b1d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b1d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b1d8:	4637      	mov	r7, r6
 800b1da:	e599      	b.n	800ad10 <_dtoa_r+0x4d0>
 800b1dc:	9b08      	ldr	r3, [sp, #32]
 800b1de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	f000 80fd 	beq.w	800b3e2 <_dtoa_r+0xba2>
 800b1e8:	2d00      	cmp	r5, #0
 800b1ea:	dd05      	ble.n	800b1f8 <_dtoa_r+0x9b8>
 800b1ec:	4639      	mov	r1, r7
 800b1ee:	462a      	mov	r2, r5
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f000 fd4f 	bl	800bc94 <__lshift>
 800b1f6:	4607      	mov	r7, r0
 800b1f8:	9b06      	ldr	r3, [sp, #24]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d05c      	beq.n	800b2b8 <_dtoa_r+0xa78>
 800b1fe:	6879      	ldr	r1, [r7, #4]
 800b200:	4620      	mov	r0, r4
 800b202:	f000 fb35 	bl	800b870 <_Balloc>
 800b206:	4605      	mov	r5, r0
 800b208:	b928      	cbnz	r0, 800b216 <_dtoa_r+0x9d6>
 800b20a:	4b80      	ldr	r3, [pc, #512]	; (800b40c <_dtoa_r+0xbcc>)
 800b20c:	4602      	mov	r2, r0
 800b20e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b212:	f7ff bb2e 	b.w	800a872 <_dtoa_r+0x32>
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	3202      	adds	r2, #2
 800b21a:	0092      	lsls	r2, r2, #2
 800b21c:	f107 010c 	add.w	r1, r7, #12
 800b220:	300c      	adds	r0, #12
 800b222:	f7fe fd1f 	bl	8009c64 <memcpy>
 800b226:	2201      	movs	r2, #1
 800b228:	4629      	mov	r1, r5
 800b22a:	4620      	mov	r0, r4
 800b22c:	f000 fd32 	bl	800bc94 <__lshift>
 800b230:	9b00      	ldr	r3, [sp, #0]
 800b232:	3301      	adds	r3, #1
 800b234:	9301      	str	r3, [sp, #4]
 800b236:	9b00      	ldr	r3, [sp, #0]
 800b238:	444b      	add	r3, r9
 800b23a:	9307      	str	r3, [sp, #28]
 800b23c:	9b02      	ldr	r3, [sp, #8]
 800b23e:	f003 0301 	and.w	r3, r3, #1
 800b242:	46b8      	mov	r8, r7
 800b244:	9306      	str	r3, [sp, #24]
 800b246:	4607      	mov	r7, r0
 800b248:	9b01      	ldr	r3, [sp, #4]
 800b24a:	4631      	mov	r1, r6
 800b24c:	3b01      	subs	r3, #1
 800b24e:	4658      	mov	r0, fp
 800b250:	9302      	str	r3, [sp, #8]
 800b252:	f7ff fa67 	bl	800a724 <quorem>
 800b256:	4603      	mov	r3, r0
 800b258:	3330      	adds	r3, #48	; 0x30
 800b25a:	9004      	str	r0, [sp, #16]
 800b25c:	4641      	mov	r1, r8
 800b25e:	4658      	mov	r0, fp
 800b260:	9308      	str	r3, [sp, #32]
 800b262:	f000 fd83 	bl	800bd6c <__mcmp>
 800b266:	463a      	mov	r2, r7
 800b268:	4681      	mov	r9, r0
 800b26a:	4631      	mov	r1, r6
 800b26c:	4620      	mov	r0, r4
 800b26e:	f000 fd99 	bl	800bda4 <__mdiff>
 800b272:	68c2      	ldr	r2, [r0, #12]
 800b274:	9b08      	ldr	r3, [sp, #32]
 800b276:	4605      	mov	r5, r0
 800b278:	bb02      	cbnz	r2, 800b2bc <_dtoa_r+0xa7c>
 800b27a:	4601      	mov	r1, r0
 800b27c:	4658      	mov	r0, fp
 800b27e:	f000 fd75 	bl	800bd6c <__mcmp>
 800b282:	9b08      	ldr	r3, [sp, #32]
 800b284:	4602      	mov	r2, r0
 800b286:	4629      	mov	r1, r5
 800b288:	4620      	mov	r0, r4
 800b28a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b28e:	f000 fb2f 	bl	800b8f0 <_Bfree>
 800b292:	9b05      	ldr	r3, [sp, #20]
 800b294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b296:	9d01      	ldr	r5, [sp, #4]
 800b298:	ea43 0102 	orr.w	r1, r3, r2
 800b29c:	9b06      	ldr	r3, [sp, #24]
 800b29e:	430b      	orrs	r3, r1
 800b2a0:	9b08      	ldr	r3, [sp, #32]
 800b2a2:	d10d      	bne.n	800b2c0 <_dtoa_r+0xa80>
 800b2a4:	2b39      	cmp	r3, #57	; 0x39
 800b2a6:	d029      	beq.n	800b2fc <_dtoa_r+0xabc>
 800b2a8:	f1b9 0f00 	cmp.w	r9, #0
 800b2ac:	dd01      	ble.n	800b2b2 <_dtoa_r+0xa72>
 800b2ae:	9b04      	ldr	r3, [sp, #16]
 800b2b0:	3331      	adds	r3, #49	; 0x31
 800b2b2:	9a02      	ldr	r2, [sp, #8]
 800b2b4:	7013      	strb	r3, [r2, #0]
 800b2b6:	e774      	b.n	800b1a2 <_dtoa_r+0x962>
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	e7b9      	b.n	800b230 <_dtoa_r+0x9f0>
 800b2bc:	2201      	movs	r2, #1
 800b2be:	e7e2      	b.n	800b286 <_dtoa_r+0xa46>
 800b2c0:	f1b9 0f00 	cmp.w	r9, #0
 800b2c4:	db06      	blt.n	800b2d4 <_dtoa_r+0xa94>
 800b2c6:	9905      	ldr	r1, [sp, #20]
 800b2c8:	ea41 0909 	orr.w	r9, r1, r9
 800b2cc:	9906      	ldr	r1, [sp, #24]
 800b2ce:	ea59 0101 	orrs.w	r1, r9, r1
 800b2d2:	d120      	bne.n	800b316 <_dtoa_r+0xad6>
 800b2d4:	2a00      	cmp	r2, #0
 800b2d6:	ddec      	ble.n	800b2b2 <_dtoa_r+0xa72>
 800b2d8:	4659      	mov	r1, fp
 800b2da:	2201      	movs	r2, #1
 800b2dc:	4620      	mov	r0, r4
 800b2de:	9301      	str	r3, [sp, #4]
 800b2e0:	f000 fcd8 	bl	800bc94 <__lshift>
 800b2e4:	4631      	mov	r1, r6
 800b2e6:	4683      	mov	fp, r0
 800b2e8:	f000 fd40 	bl	800bd6c <__mcmp>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	9b01      	ldr	r3, [sp, #4]
 800b2f0:	dc02      	bgt.n	800b2f8 <_dtoa_r+0xab8>
 800b2f2:	d1de      	bne.n	800b2b2 <_dtoa_r+0xa72>
 800b2f4:	07da      	lsls	r2, r3, #31
 800b2f6:	d5dc      	bpl.n	800b2b2 <_dtoa_r+0xa72>
 800b2f8:	2b39      	cmp	r3, #57	; 0x39
 800b2fa:	d1d8      	bne.n	800b2ae <_dtoa_r+0xa6e>
 800b2fc:	9a02      	ldr	r2, [sp, #8]
 800b2fe:	2339      	movs	r3, #57	; 0x39
 800b300:	7013      	strb	r3, [r2, #0]
 800b302:	462b      	mov	r3, r5
 800b304:	461d      	mov	r5, r3
 800b306:	3b01      	subs	r3, #1
 800b308:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b30c:	2a39      	cmp	r2, #57	; 0x39
 800b30e:	d050      	beq.n	800b3b2 <_dtoa_r+0xb72>
 800b310:	3201      	adds	r2, #1
 800b312:	701a      	strb	r2, [r3, #0]
 800b314:	e745      	b.n	800b1a2 <_dtoa_r+0x962>
 800b316:	2a00      	cmp	r2, #0
 800b318:	dd03      	ble.n	800b322 <_dtoa_r+0xae2>
 800b31a:	2b39      	cmp	r3, #57	; 0x39
 800b31c:	d0ee      	beq.n	800b2fc <_dtoa_r+0xabc>
 800b31e:	3301      	adds	r3, #1
 800b320:	e7c7      	b.n	800b2b2 <_dtoa_r+0xa72>
 800b322:	9a01      	ldr	r2, [sp, #4]
 800b324:	9907      	ldr	r1, [sp, #28]
 800b326:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b32a:	428a      	cmp	r2, r1
 800b32c:	d02a      	beq.n	800b384 <_dtoa_r+0xb44>
 800b32e:	4659      	mov	r1, fp
 800b330:	2300      	movs	r3, #0
 800b332:	220a      	movs	r2, #10
 800b334:	4620      	mov	r0, r4
 800b336:	f000 fafd 	bl	800b934 <__multadd>
 800b33a:	45b8      	cmp	r8, r7
 800b33c:	4683      	mov	fp, r0
 800b33e:	f04f 0300 	mov.w	r3, #0
 800b342:	f04f 020a 	mov.w	r2, #10
 800b346:	4641      	mov	r1, r8
 800b348:	4620      	mov	r0, r4
 800b34a:	d107      	bne.n	800b35c <_dtoa_r+0xb1c>
 800b34c:	f000 faf2 	bl	800b934 <__multadd>
 800b350:	4680      	mov	r8, r0
 800b352:	4607      	mov	r7, r0
 800b354:	9b01      	ldr	r3, [sp, #4]
 800b356:	3301      	adds	r3, #1
 800b358:	9301      	str	r3, [sp, #4]
 800b35a:	e775      	b.n	800b248 <_dtoa_r+0xa08>
 800b35c:	f000 faea 	bl	800b934 <__multadd>
 800b360:	4639      	mov	r1, r7
 800b362:	4680      	mov	r8, r0
 800b364:	2300      	movs	r3, #0
 800b366:	220a      	movs	r2, #10
 800b368:	4620      	mov	r0, r4
 800b36a:	f000 fae3 	bl	800b934 <__multadd>
 800b36e:	4607      	mov	r7, r0
 800b370:	e7f0      	b.n	800b354 <_dtoa_r+0xb14>
 800b372:	f1b9 0f00 	cmp.w	r9, #0
 800b376:	9a00      	ldr	r2, [sp, #0]
 800b378:	bfcc      	ite	gt
 800b37a:	464d      	movgt	r5, r9
 800b37c:	2501      	movle	r5, #1
 800b37e:	4415      	add	r5, r2
 800b380:	f04f 0800 	mov.w	r8, #0
 800b384:	4659      	mov	r1, fp
 800b386:	2201      	movs	r2, #1
 800b388:	4620      	mov	r0, r4
 800b38a:	9301      	str	r3, [sp, #4]
 800b38c:	f000 fc82 	bl	800bc94 <__lshift>
 800b390:	4631      	mov	r1, r6
 800b392:	4683      	mov	fp, r0
 800b394:	f000 fcea 	bl	800bd6c <__mcmp>
 800b398:	2800      	cmp	r0, #0
 800b39a:	dcb2      	bgt.n	800b302 <_dtoa_r+0xac2>
 800b39c:	d102      	bne.n	800b3a4 <_dtoa_r+0xb64>
 800b39e:	9b01      	ldr	r3, [sp, #4]
 800b3a0:	07db      	lsls	r3, r3, #31
 800b3a2:	d4ae      	bmi.n	800b302 <_dtoa_r+0xac2>
 800b3a4:	462b      	mov	r3, r5
 800b3a6:	461d      	mov	r5, r3
 800b3a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3ac:	2a30      	cmp	r2, #48	; 0x30
 800b3ae:	d0fa      	beq.n	800b3a6 <_dtoa_r+0xb66>
 800b3b0:	e6f7      	b.n	800b1a2 <_dtoa_r+0x962>
 800b3b2:	9a00      	ldr	r2, [sp, #0]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d1a5      	bne.n	800b304 <_dtoa_r+0xac4>
 800b3b8:	f10a 0a01 	add.w	sl, sl, #1
 800b3bc:	2331      	movs	r3, #49	; 0x31
 800b3be:	e779      	b.n	800b2b4 <_dtoa_r+0xa74>
 800b3c0:	4b13      	ldr	r3, [pc, #76]	; (800b410 <_dtoa_r+0xbd0>)
 800b3c2:	f7ff baaf 	b.w	800a924 <_dtoa_r+0xe4>
 800b3c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f47f aa86 	bne.w	800a8da <_dtoa_r+0x9a>
 800b3ce:	4b11      	ldr	r3, [pc, #68]	; (800b414 <_dtoa_r+0xbd4>)
 800b3d0:	f7ff baa8 	b.w	800a924 <_dtoa_r+0xe4>
 800b3d4:	f1b9 0f00 	cmp.w	r9, #0
 800b3d8:	dc03      	bgt.n	800b3e2 <_dtoa_r+0xba2>
 800b3da:	9b05      	ldr	r3, [sp, #20]
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	f73f aec9 	bgt.w	800b174 <_dtoa_r+0x934>
 800b3e2:	9d00      	ldr	r5, [sp, #0]
 800b3e4:	4631      	mov	r1, r6
 800b3e6:	4658      	mov	r0, fp
 800b3e8:	f7ff f99c 	bl	800a724 <quorem>
 800b3ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b3f0:	f805 3b01 	strb.w	r3, [r5], #1
 800b3f4:	9a00      	ldr	r2, [sp, #0]
 800b3f6:	1aaa      	subs	r2, r5, r2
 800b3f8:	4591      	cmp	r9, r2
 800b3fa:	ddba      	ble.n	800b372 <_dtoa_r+0xb32>
 800b3fc:	4659      	mov	r1, fp
 800b3fe:	2300      	movs	r3, #0
 800b400:	220a      	movs	r2, #10
 800b402:	4620      	mov	r0, r4
 800b404:	f000 fa96 	bl	800b934 <__multadd>
 800b408:	4683      	mov	fp, r0
 800b40a:	e7eb      	b.n	800b3e4 <_dtoa_r+0xba4>
 800b40c:	0800f9c7 	.word	0x0800f9c7
 800b410:	0800f920 	.word	0x0800f920
 800b414:	0800f944 	.word	0x0800f944

0800b418 <__sflush_r>:
 800b418:	898a      	ldrh	r2, [r1, #12]
 800b41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b41e:	4605      	mov	r5, r0
 800b420:	0710      	lsls	r0, r2, #28
 800b422:	460c      	mov	r4, r1
 800b424:	d458      	bmi.n	800b4d8 <__sflush_r+0xc0>
 800b426:	684b      	ldr	r3, [r1, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	dc05      	bgt.n	800b438 <__sflush_r+0x20>
 800b42c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b42e:	2b00      	cmp	r3, #0
 800b430:	dc02      	bgt.n	800b438 <__sflush_r+0x20>
 800b432:	2000      	movs	r0, #0
 800b434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b43a:	2e00      	cmp	r6, #0
 800b43c:	d0f9      	beq.n	800b432 <__sflush_r+0x1a>
 800b43e:	2300      	movs	r3, #0
 800b440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b444:	682f      	ldr	r7, [r5, #0]
 800b446:	602b      	str	r3, [r5, #0]
 800b448:	d032      	beq.n	800b4b0 <__sflush_r+0x98>
 800b44a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	075a      	lsls	r2, r3, #29
 800b450:	d505      	bpl.n	800b45e <__sflush_r+0x46>
 800b452:	6863      	ldr	r3, [r4, #4]
 800b454:	1ac0      	subs	r0, r0, r3
 800b456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b458:	b10b      	cbz	r3, 800b45e <__sflush_r+0x46>
 800b45a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b45c:	1ac0      	subs	r0, r0, r3
 800b45e:	2300      	movs	r3, #0
 800b460:	4602      	mov	r2, r0
 800b462:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b464:	6a21      	ldr	r1, [r4, #32]
 800b466:	4628      	mov	r0, r5
 800b468:	47b0      	blx	r6
 800b46a:	1c43      	adds	r3, r0, #1
 800b46c:	89a3      	ldrh	r3, [r4, #12]
 800b46e:	d106      	bne.n	800b47e <__sflush_r+0x66>
 800b470:	6829      	ldr	r1, [r5, #0]
 800b472:	291d      	cmp	r1, #29
 800b474:	d82c      	bhi.n	800b4d0 <__sflush_r+0xb8>
 800b476:	4a2a      	ldr	r2, [pc, #168]	; (800b520 <__sflush_r+0x108>)
 800b478:	40ca      	lsrs	r2, r1
 800b47a:	07d6      	lsls	r6, r2, #31
 800b47c:	d528      	bpl.n	800b4d0 <__sflush_r+0xb8>
 800b47e:	2200      	movs	r2, #0
 800b480:	6062      	str	r2, [r4, #4]
 800b482:	04d9      	lsls	r1, r3, #19
 800b484:	6922      	ldr	r2, [r4, #16]
 800b486:	6022      	str	r2, [r4, #0]
 800b488:	d504      	bpl.n	800b494 <__sflush_r+0x7c>
 800b48a:	1c42      	adds	r2, r0, #1
 800b48c:	d101      	bne.n	800b492 <__sflush_r+0x7a>
 800b48e:	682b      	ldr	r3, [r5, #0]
 800b490:	b903      	cbnz	r3, 800b494 <__sflush_r+0x7c>
 800b492:	6560      	str	r0, [r4, #84]	; 0x54
 800b494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b496:	602f      	str	r7, [r5, #0]
 800b498:	2900      	cmp	r1, #0
 800b49a:	d0ca      	beq.n	800b432 <__sflush_r+0x1a>
 800b49c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4a0:	4299      	cmp	r1, r3
 800b4a2:	d002      	beq.n	800b4aa <__sflush_r+0x92>
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	f000 fd71 	bl	800bf8c <_free_r>
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	6360      	str	r0, [r4, #52]	; 0x34
 800b4ae:	e7c1      	b.n	800b434 <__sflush_r+0x1c>
 800b4b0:	6a21      	ldr	r1, [r4, #32]
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	47b0      	blx	r6
 800b4b8:	1c41      	adds	r1, r0, #1
 800b4ba:	d1c7      	bne.n	800b44c <__sflush_r+0x34>
 800b4bc:	682b      	ldr	r3, [r5, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d0c4      	beq.n	800b44c <__sflush_r+0x34>
 800b4c2:	2b1d      	cmp	r3, #29
 800b4c4:	d001      	beq.n	800b4ca <__sflush_r+0xb2>
 800b4c6:	2b16      	cmp	r3, #22
 800b4c8:	d101      	bne.n	800b4ce <__sflush_r+0xb6>
 800b4ca:	602f      	str	r7, [r5, #0]
 800b4cc:	e7b1      	b.n	800b432 <__sflush_r+0x1a>
 800b4ce:	89a3      	ldrh	r3, [r4, #12]
 800b4d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4d4:	81a3      	strh	r3, [r4, #12]
 800b4d6:	e7ad      	b.n	800b434 <__sflush_r+0x1c>
 800b4d8:	690f      	ldr	r7, [r1, #16]
 800b4da:	2f00      	cmp	r7, #0
 800b4dc:	d0a9      	beq.n	800b432 <__sflush_r+0x1a>
 800b4de:	0793      	lsls	r3, r2, #30
 800b4e0:	680e      	ldr	r6, [r1, #0]
 800b4e2:	bf08      	it	eq
 800b4e4:	694b      	ldreq	r3, [r1, #20]
 800b4e6:	600f      	str	r7, [r1, #0]
 800b4e8:	bf18      	it	ne
 800b4ea:	2300      	movne	r3, #0
 800b4ec:	eba6 0807 	sub.w	r8, r6, r7
 800b4f0:	608b      	str	r3, [r1, #8]
 800b4f2:	f1b8 0f00 	cmp.w	r8, #0
 800b4f6:	dd9c      	ble.n	800b432 <__sflush_r+0x1a>
 800b4f8:	6a21      	ldr	r1, [r4, #32]
 800b4fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b4fc:	4643      	mov	r3, r8
 800b4fe:	463a      	mov	r2, r7
 800b500:	4628      	mov	r0, r5
 800b502:	47b0      	blx	r6
 800b504:	2800      	cmp	r0, #0
 800b506:	dc06      	bgt.n	800b516 <__sflush_r+0xfe>
 800b508:	89a3      	ldrh	r3, [r4, #12]
 800b50a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b50e:	81a3      	strh	r3, [r4, #12]
 800b510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b514:	e78e      	b.n	800b434 <__sflush_r+0x1c>
 800b516:	4407      	add	r7, r0
 800b518:	eba8 0800 	sub.w	r8, r8, r0
 800b51c:	e7e9      	b.n	800b4f2 <__sflush_r+0xda>
 800b51e:	bf00      	nop
 800b520:	20400001 	.word	0x20400001

0800b524 <_fflush_r>:
 800b524:	b538      	push	{r3, r4, r5, lr}
 800b526:	690b      	ldr	r3, [r1, #16]
 800b528:	4605      	mov	r5, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	b913      	cbnz	r3, 800b534 <_fflush_r+0x10>
 800b52e:	2500      	movs	r5, #0
 800b530:	4628      	mov	r0, r5
 800b532:	bd38      	pop	{r3, r4, r5, pc}
 800b534:	b118      	cbz	r0, 800b53e <_fflush_r+0x1a>
 800b536:	6983      	ldr	r3, [r0, #24]
 800b538:	b90b      	cbnz	r3, 800b53e <_fflush_r+0x1a>
 800b53a:	f000 f887 	bl	800b64c <__sinit>
 800b53e:	4b14      	ldr	r3, [pc, #80]	; (800b590 <_fflush_r+0x6c>)
 800b540:	429c      	cmp	r4, r3
 800b542:	d11b      	bne.n	800b57c <_fflush_r+0x58>
 800b544:	686c      	ldr	r4, [r5, #4]
 800b546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d0ef      	beq.n	800b52e <_fflush_r+0xa>
 800b54e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b550:	07d0      	lsls	r0, r2, #31
 800b552:	d404      	bmi.n	800b55e <_fflush_r+0x3a>
 800b554:	0599      	lsls	r1, r3, #22
 800b556:	d402      	bmi.n	800b55e <_fflush_r+0x3a>
 800b558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b55a:	f000 f91a 	bl	800b792 <__retarget_lock_acquire_recursive>
 800b55e:	4628      	mov	r0, r5
 800b560:	4621      	mov	r1, r4
 800b562:	f7ff ff59 	bl	800b418 <__sflush_r>
 800b566:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b568:	07da      	lsls	r2, r3, #31
 800b56a:	4605      	mov	r5, r0
 800b56c:	d4e0      	bmi.n	800b530 <_fflush_r+0xc>
 800b56e:	89a3      	ldrh	r3, [r4, #12]
 800b570:	059b      	lsls	r3, r3, #22
 800b572:	d4dd      	bmi.n	800b530 <_fflush_r+0xc>
 800b574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b576:	f000 f90d 	bl	800b794 <__retarget_lock_release_recursive>
 800b57a:	e7d9      	b.n	800b530 <_fflush_r+0xc>
 800b57c:	4b05      	ldr	r3, [pc, #20]	; (800b594 <_fflush_r+0x70>)
 800b57e:	429c      	cmp	r4, r3
 800b580:	d101      	bne.n	800b586 <_fflush_r+0x62>
 800b582:	68ac      	ldr	r4, [r5, #8]
 800b584:	e7df      	b.n	800b546 <_fflush_r+0x22>
 800b586:	4b04      	ldr	r3, [pc, #16]	; (800b598 <_fflush_r+0x74>)
 800b588:	429c      	cmp	r4, r3
 800b58a:	bf08      	it	eq
 800b58c:	68ec      	ldreq	r4, [r5, #12]
 800b58e:	e7da      	b.n	800b546 <_fflush_r+0x22>
 800b590:	0800f9f8 	.word	0x0800f9f8
 800b594:	0800fa18 	.word	0x0800fa18
 800b598:	0800f9d8 	.word	0x0800f9d8

0800b59c <std>:
 800b59c:	2300      	movs	r3, #0
 800b59e:	b510      	push	{r4, lr}
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	e9c0 3300 	strd	r3, r3, [r0]
 800b5a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5aa:	6083      	str	r3, [r0, #8]
 800b5ac:	8181      	strh	r1, [r0, #12]
 800b5ae:	6643      	str	r3, [r0, #100]	; 0x64
 800b5b0:	81c2      	strh	r2, [r0, #14]
 800b5b2:	6183      	str	r3, [r0, #24]
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	2208      	movs	r2, #8
 800b5b8:	305c      	adds	r0, #92	; 0x5c
 800b5ba:	f7fe fb61 	bl	8009c80 <memset>
 800b5be:	4b05      	ldr	r3, [pc, #20]	; (800b5d4 <std+0x38>)
 800b5c0:	6263      	str	r3, [r4, #36]	; 0x24
 800b5c2:	4b05      	ldr	r3, [pc, #20]	; (800b5d8 <std+0x3c>)
 800b5c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5c6:	4b05      	ldr	r3, [pc, #20]	; (800b5dc <std+0x40>)
 800b5c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5ca:	4b05      	ldr	r3, [pc, #20]	; (800b5e0 <std+0x44>)
 800b5cc:	6224      	str	r4, [r4, #32]
 800b5ce:	6323      	str	r3, [r4, #48]	; 0x30
 800b5d0:	bd10      	pop	{r4, pc}
 800b5d2:	bf00      	nop
 800b5d4:	0800c66d 	.word	0x0800c66d
 800b5d8:	0800c68f 	.word	0x0800c68f
 800b5dc:	0800c6c7 	.word	0x0800c6c7
 800b5e0:	0800c6eb 	.word	0x0800c6eb

0800b5e4 <_cleanup_r>:
 800b5e4:	4901      	ldr	r1, [pc, #4]	; (800b5ec <_cleanup_r+0x8>)
 800b5e6:	f000 b8af 	b.w	800b748 <_fwalk_reent>
 800b5ea:	bf00      	nop
 800b5ec:	0800b525 	.word	0x0800b525

0800b5f0 <__sfmoreglue>:
 800b5f0:	b570      	push	{r4, r5, r6, lr}
 800b5f2:	1e4a      	subs	r2, r1, #1
 800b5f4:	2568      	movs	r5, #104	; 0x68
 800b5f6:	4355      	muls	r5, r2
 800b5f8:	460e      	mov	r6, r1
 800b5fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b5fe:	f000 fd15 	bl	800c02c <_malloc_r>
 800b602:	4604      	mov	r4, r0
 800b604:	b140      	cbz	r0, 800b618 <__sfmoreglue+0x28>
 800b606:	2100      	movs	r1, #0
 800b608:	e9c0 1600 	strd	r1, r6, [r0]
 800b60c:	300c      	adds	r0, #12
 800b60e:	60a0      	str	r0, [r4, #8]
 800b610:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b614:	f7fe fb34 	bl	8009c80 <memset>
 800b618:	4620      	mov	r0, r4
 800b61a:	bd70      	pop	{r4, r5, r6, pc}

0800b61c <__sfp_lock_acquire>:
 800b61c:	4801      	ldr	r0, [pc, #4]	; (800b624 <__sfp_lock_acquire+0x8>)
 800b61e:	f000 b8b8 	b.w	800b792 <__retarget_lock_acquire_recursive>
 800b622:	bf00      	nop
 800b624:	20004a40 	.word	0x20004a40

0800b628 <__sfp_lock_release>:
 800b628:	4801      	ldr	r0, [pc, #4]	; (800b630 <__sfp_lock_release+0x8>)
 800b62a:	f000 b8b3 	b.w	800b794 <__retarget_lock_release_recursive>
 800b62e:	bf00      	nop
 800b630:	20004a40 	.word	0x20004a40

0800b634 <__sinit_lock_acquire>:
 800b634:	4801      	ldr	r0, [pc, #4]	; (800b63c <__sinit_lock_acquire+0x8>)
 800b636:	f000 b8ac 	b.w	800b792 <__retarget_lock_acquire_recursive>
 800b63a:	bf00      	nop
 800b63c:	20004a3b 	.word	0x20004a3b

0800b640 <__sinit_lock_release>:
 800b640:	4801      	ldr	r0, [pc, #4]	; (800b648 <__sinit_lock_release+0x8>)
 800b642:	f000 b8a7 	b.w	800b794 <__retarget_lock_release_recursive>
 800b646:	bf00      	nop
 800b648:	20004a3b 	.word	0x20004a3b

0800b64c <__sinit>:
 800b64c:	b510      	push	{r4, lr}
 800b64e:	4604      	mov	r4, r0
 800b650:	f7ff fff0 	bl	800b634 <__sinit_lock_acquire>
 800b654:	69a3      	ldr	r3, [r4, #24]
 800b656:	b11b      	cbz	r3, 800b660 <__sinit+0x14>
 800b658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b65c:	f7ff bff0 	b.w	800b640 <__sinit_lock_release>
 800b660:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b664:	6523      	str	r3, [r4, #80]	; 0x50
 800b666:	4b13      	ldr	r3, [pc, #76]	; (800b6b4 <__sinit+0x68>)
 800b668:	4a13      	ldr	r2, [pc, #76]	; (800b6b8 <__sinit+0x6c>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b66e:	42a3      	cmp	r3, r4
 800b670:	bf04      	itt	eq
 800b672:	2301      	moveq	r3, #1
 800b674:	61a3      	streq	r3, [r4, #24]
 800b676:	4620      	mov	r0, r4
 800b678:	f000 f820 	bl	800b6bc <__sfp>
 800b67c:	6060      	str	r0, [r4, #4]
 800b67e:	4620      	mov	r0, r4
 800b680:	f000 f81c 	bl	800b6bc <__sfp>
 800b684:	60a0      	str	r0, [r4, #8]
 800b686:	4620      	mov	r0, r4
 800b688:	f000 f818 	bl	800b6bc <__sfp>
 800b68c:	2200      	movs	r2, #0
 800b68e:	60e0      	str	r0, [r4, #12]
 800b690:	2104      	movs	r1, #4
 800b692:	6860      	ldr	r0, [r4, #4]
 800b694:	f7ff ff82 	bl	800b59c <std>
 800b698:	68a0      	ldr	r0, [r4, #8]
 800b69a:	2201      	movs	r2, #1
 800b69c:	2109      	movs	r1, #9
 800b69e:	f7ff ff7d 	bl	800b59c <std>
 800b6a2:	68e0      	ldr	r0, [r4, #12]
 800b6a4:	2202      	movs	r2, #2
 800b6a6:	2112      	movs	r1, #18
 800b6a8:	f7ff ff78 	bl	800b59c <std>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	61a3      	str	r3, [r4, #24]
 800b6b0:	e7d2      	b.n	800b658 <__sinit+0xc>
 800b6b2:	bf00      	nop
 800b6b4:	0800f90c 	.word	0x0800f90c
 800b6b8:	0800b5e5 	.word	0x0800b5e5

0800b6bc <__sfp>:
 800b6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6be:	4607      	mov	r7, r0
 800b6c0:	f7ff ffac 	bl	800b61c <__sfp_lock_acquire>
 800b6c4:	4b1e      	ldr	r3, [pc, #120]	; (800b740 <__sfp+0x84>)
 800b6c6:	681e      	ldr	r6, [r3, #0]
 800b6c8:	69b3      	ldr	r3, [r6, #24]
 800b6ca:	b913      	cbnz	r3, 800b6d2 <__sfp+0x16>
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f7ff ffbd 	bl	800b64c <__sinit>
 800b6d2:	3648      	adds	r6, #72	; 0x48
 800b6d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	d503      	bpl.n	800b6e4 <__sfp+0x28>
 800b6dc:	6833      	ldr	r3, [r6, #0]
 800b6de:	b30b      	cbz	r3, 800b724 <__sfp+0x68>
 800b6e0:	6836      	ldr	r6, [r6, #0]
 800b6e2:	e7f7      	b.n	800b6d4 <__sfp+0x18>
 800b6e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b6e8:	b9d5      	cbnz	r5, 800b720 <__sfp+0x64>
 800b6ea:	4b16      	ldr	r3, [pc, #88]	; (800b744 <__sfp+0x88>)
 800b6ec:	60e3      	str	r3, [r4, #12]
 800b6ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6f2:	6665      	str	r5, [r4, #100]	; 0x64
 800b6f4:	f000 f84c 	bl	800b790 <__retarget_lock_init_recursive>
 800b6f8:	f7ff ff96 	bl	800b628 <__sfp_lock_release>
 800b6fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b700:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b704:	6025      	str	r5, [r4, #0]
 800b706:	61a5      	str	r5, [r4, #24]
 800b708:	2208      	movs	r2, #8
 800b70a:	4629      	mov	r1, r5
 800b70c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b710:	f7fe fab6 	bl	8009c80 <memset>
 800b714:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b718:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b71c:	4620      	mov	r0, r4
 800b71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b720:	3468      	adds	r4, #104	; 0x68
 800b722:	e7d9      	b.n	800b6d8 <__sfp+0x1c>
 800b724:	2104      	movs	r1, #4
 800b726:	4638      	mov	r0, r7
 800b728:	f7ff ff62 	bl	800b5f0 <__sfmoreglue>
 800b72c:	4604      	mov	r4, r0
 800b72e:	6030      	str	r0, [r6, #0]
 800b730:	2800      	cmp	r0, #0
 800b732:	d1d5      	bne.n	800b6e0 <__sfp+0x24>
 800b734:	f7ff ff78 	bl	800b628 <__sfp_lock_release>
 800b738:	230c      	movs	r3, #12
 800b73a:	603b      	str	r3, [r7, #0]
 800b73c:	e7ee      	b.n	800b71c <__sfp+0x60>
 800b73e:	bf00      	nop
 800b740:	0800f90c 	.word	0x0800f90c
 800b744:	ffff0001 	.word	0xffff0001

0800b748 <_fwalk_reent>:
 800b748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b74c:	4606      	mov	r6, r0
 800b74e:	4688      	mov	r8, r1
 800b750:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b754:	2700      	movs	r7, #0
 800b756:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b75a:	f1b9 0901 	subs.w	r9, r9, #1
 800b75e:	d505      	bpl.n	800b76c <_fwalk_reent+0x24>
 800b760:	6824      	ldr	r4, [r4, #0]
 800b762:	2c00      	cmp	r4, #0
 800b764:	d1f7      	bne.n	800b756 <_fwalk_reent+0xe>
 800b766:	4638      	mov	r0, r7
 800b768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b76c:	89ab      	ldrh	r3, [r5, #12]
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d907      	bls.n	800b782 <_fwalk_reent+0x3a>
 800b772:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b776:	3301      	adds	r3, #1
 800b778:	d003      	beq.n	800b782 <_fwalk_reent+0x3a>
 800b77a:	4629      	mov	r1, r5
 800b77c:	4630      	mov	r0, r6
 800b77e:	47c0      	blx	r8
 800b780:	4307      	orrs	r7, r0
 800b782:	3568      	adds	r5, #104	; 0x68
 800b784:	e7e9      	b.n	800b75a <_fwalk_reent+0x12>
	...

0800b788 <_localeconv_r>:
 800b788:	4800      	ldr	r0, [pc, #0]	; (800b78c <_localeconv_r+0x4>)
 800b78a:	4770      	bx	lr
 800b78c:	20000188 	.word	0x20000188

0800b790 <__retarget_lock_init_recursive>:
 800b790:	4770      	bx	lr

0800b792 <__retarget_lock_acquire_recursive>:
 800b792:	4770      	bx	lr

0800b794 <__retarget_lock_release_recursive>:
 800b794:	4770      	bx	lr

0800b796 <__swhatbuf_r>:
 800b796:	b570      	push	{r4, r5, r6, lr}
 800b798:	460e      	mov	r6, r1
 800b79a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b79e:	2900      	cmp	r1, #0
 800b7a0:	b096      	sub	sp, #88	; 0x58
 800b7a2:	4614      	mov	r4, r2
 800b7a4:	461d      	mov	r5, r3
 800b7a6:	da07      	bge.n	800b7b8 <__swhatbuf_r+0x22>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	602b      	str	r3, [r5, #0]
 800b7ac:	89b3      	ldrh	r3, [r6, #12]
 800b7ae:	061a      	lsls	r2, r3, #24
 800b7b0:	d410      	bmi.n	800b7d4 <__swhatbuf_r+0x3e>
 800b7b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7b6:	e00e      	b.n	800b7d6 <__swhatbuf_r+0x40>
 800b7b8:	466a      	mov	r2, sp
 800b7ba:	f000 ffed 	bl	800c798 <_fstat_r>
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	dbf2      	blt.n	800b7a8 <__swhatbuf_r+0x12>
 800b7c2:	9a01      	ldr	r2, [sp, #4]
 800b7c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7cc:	425a      	negs	r2, r3
 800b7ce:	415a      	adcs	r2, r3
 800b7d0:	602a      	str	r2, [r5, #0]
 800b7d2:	e7ee      	b.n	800b7b2 <__swhatbuf_r+0x1c>
 800b7d4:	2340      	movs	r3, #64	; 0x40
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	b016      	add	sp, #88	; 0x58
 800b7dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b7e0 <__smakebuf_r>:
 800b7e0:	898b      	ldrh	r3, [r1, #12]
 800b7e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7e4:	079d      	lsls	r5, r3, #30
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	460c      	mov	r4, r1
 800b7ea:	d507      	bpl.n	800b7fc <__smakebuf_r+0x1c>
 800b7ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7f0:	6023      	str	r3, [r4, #0]
 800b7f2:	6123      	str	r3, [r4, #16]
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	6163      	str	r3, [r4, #20]
 800b7f8:	b002      	add	sp, #8
 800b7fa:	bd70      	pop	{r4, r5, r6, pc}
 800b7fc:	ab01      	add	r3, sp, #4
 800b7fe:	466a      	mov	r2, sp
 800b800:	f7ff ffc9 	bl	800b796 <__swhatbuf_r>
 800b804:	9900      	ldr	r1, [sp, #0]
 800b806:	4605      	mov	r5, r0
 800b808:	4630      	mov	r0, r6
 800b80a:	f000 fc0f 	bl	800c02c <_malloc_r>
 800b80e:	b948      	cbnz	r0, 800b824 <__smakebuf_r+0x44>
 800b810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b814:	059a      	lsls	r2, r3, #22
 800b816:	d4ef      	bmi.n	800b7f8 <__smakebuf_r+0x18>
 800b818:	f023 0303 	bic.w	r3, r3, #3
 800b81c:	f043 0302 	orr.w	r3, r3, #2
 800b820:	81a3      	strh	r3, [r4, #12]
 800b822:	e7e3      	b.n	800b7ec <__smakebuf_r+0xc>
 800b824:	4b0d      	ldr	r3, [pc, #52]	; (800b85c <__smakebuf_r+0x7c>)
 800b826:	62b3      	str	r3, [r6, #40]	; 0x28
 800b828:	89a3      	ldrh	r3, [r4, #12]
 800b82a:	6020      	str	r0, [r4, #0]
 800b82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b830:	81a3      	strh	r3, [r4, #12]
 800b832:	9b00      	ldr	r3, [sp, #0]
 800b834:	6163      	str	r3, [r4, #20]
 800b836:	9b01      	ldr	r3, [sp, #4]
 800b838:	6120      	str	r0, [r4, #16]
 800b83a:	b15b      	cbz	r3, 800b854 <__smakebuf_r+0x74>
 800b83c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b840:	4630      	mov	r0, r6
 800b842:	f000 ffbb 	bl	800c7bc <_isatty_r>
 800b846:	b128      	cbz	r0, 800b854 <__smakebuf_r+0x74>
 800b848:	89a3      	ldrh	r3, [r4, #12]
 800b84a:	f023 0303 	bic.w	r3, r3, #3
 800b84e:	f043 0301 	orr.w	r3, r3, #1
 800b852:	81a3      	strh	r3, [r4, #12]
 800b854:	89a0      	ldrh	r0, [r4, #12]
 800b856:	4305      	orrs	r5, r0
 800b858:	81a5      	strh	r5, [r4, #12]
 800b85a:	e7cd      	b.n	800b7f8 <__smakebuf_r+0x18>
 800b85c:	0800b5e5 	.word	0x0800b5e5

0800b860 <malloc>:
 800b860:	4b02      	ldr	r3, [pc, #8]	; (800b86c <malloc+0xc>)
 800b862:	4601      	mov	r1, r0
 800b864:	6818      	ldr	r0, [r3, #0]
 800b866:	f000 bbe1 	b.w	800c02c <_malloc_r>
 800b86a:	bf00      	nop
 800b86c:	20000034 	.word	0x20000034

0800b870 <_Balloc>:
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b874:	4604      	mov	r4, r0
 800b876:	460d      	mov	r5, r1
 800b878:	b976      	cbnz	r6, 800b898 <_Balloc+0x28>
 800b87a:	2010      	movs	r0, #16
 800b87c:	f7ff fff0 	bl	800b860 <malloc>
 800b880:	4602      	mov	r2, r0
 800b882:	6260      	str	r0, [r4, #36]	; 0x24
 800b884:	b920      	cbnz	r0, 800b890 <_Balloc+0x20>
 800b886:	4b18      	ldr	r3, [pc, #96]	; (800b8e8 <_Balloc+0x78>)
 800b888:	4818      	ldr	r0, [pc, #96]	; (800b8ec <_Balloc+0x7c>)
 800b88a:	2166      	movs	r1, #102	; 0x66
 800b88c:	f000 ff44 	bl	800c718 <__assert_func>
 800b890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b894:	6006      	str	r6, [r0, #0]
 800b896:	60c6      	str	r6, [r0, #12]
 800b898:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b89a:	68f3      	ldr	r3, [r6, #12]
 800b89c:	b183      	cbz	r3, 800b8c0 <_Balloc+0x50>
 800b89e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8a6:	b9b8      	cbnz	r0, 800b8d8 <_Balloc+0x68>
 800b8a8:	2101      	movs	r1, #1
 800b8aa:	fa01 f605 	lsl.w	r6, r1, r5
 800b8ae:	1d72      	adds	r2, r6, #5
 800b8b0:	0092      	lsls	r2, r2, #2
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f000 fb5a 	bl	800bf6c <_calloc_r>
 800b8b8:	b160      	cbz	r0, 800b8d4 <_Balloc+0x64>
 800b8ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8be:	e00e      	b.n	800b8de <_Balloc+0x6e>
 800b8c0:	2221      	movs	r2, #33	; 0x21
 800b8c2:	2104      	movs	r1, #4
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f000 fb51 	bl	800bf6c <_calloc_r>
 800b8ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8cc:	60f0      	str	r0, [r6, #12]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d1e4      	bne.n	800b89e <_Balloc+0x2e>
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	bd70      	pop	{r4, r5, r6, pc}
 800b8d8:	6802      	ldr	r2, [r0, #0]
 800b8da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8de:	2300      	movs	r3, #0
 800b8e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8e4:	e7f7      	b.n	800b8d6 <_Balloc+0x66>
 800b8e6:	bf00      	nop
 800b8e8:	0800f951 	.word	0x0800f951
 800b8ec:	0800fa38 	.word	0x0800fa38

0800b8f0 <_Bfree>:
 800b8f0:	b570      	push	{r4, r5, r6, lr}
 800b8f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8f4:	4605      	mov	r5, r0
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	b976      	cbnz	r6, 800b918 <_Bfree+0x28>
 800b8fa:	2010      	movs	r0, #16
 800b8fc:	f7ff ffb0 	bl	800b860 <malloc>
 800b900:	4602      	mov	r2, r0
 800b902:	6268      	str	r0, [r5, #36]	; 0x24
 800b904:	b920      	cbnz	r0, 800b910 <_Bfree+0x20>
 800b906:	4b09      	ldr	r3, [pc, #36]	; (800b92c <_Bfree+0x3c>)
 800b908:	4809      	ldr	r0, [pc, #36]	; (800b930 <_Bfree+0x40>)
 800b90a:	218a      	movs	r1, #138	; 0x8a
 800b90c:	f000 ff04 	bl	800c718 <__assert_func>
 800b910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b914:	6006      	str	r6, [r0, #0]
 800b916:	60c6      	str	r6, [r0, #12]
 800b918:	b13c      	cbz	r4, 800b92a <_Bfree+0x3a>
 800b91a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b91c:	6862      	ldr	r2, [r4, #4]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b924:	6021      	str	r1, [r4, #0]
 800b926:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b92a:	bd70      	pop	{r4, r5, r6, pc}
 800b92c:	0800f951 	.word	0x0800f951
 800b930:	0800fa38 	.word	0x0800fa38

0800b934 <__multadd>:
 800b934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b938:	690e      	ldr	r6, [r1, #16]
 800b93a:	4607      	mov	r7, r0
 800b93c:	4698      	mov	r8, r3
 800b93e:	460c      	mov	r4, r1
 800b940:	f101 0014 	add.w	r0, r1, #20
 800b944:	2300      	movs	r3, #0
 800b946:	6805      	ldr	r5, [r0, #0]
 800b948:	b2a9      	uxth	r1, r5
 800b94a:	fb02 8101 	mla	r1, r2, r1, r8
 800b94e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b952:	0c2d      	lsrs	r5, r5, #16
 800b954:	fb02 c505 	mla	r5, r2, r5, ip
 800b958:	b289      	uxth	r1, r1
 800b95a:	3301      	adds	r3, #1
 800b95c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b960:	429e      	cmp	r6, r3
 800b962:	f840 1b04 	str.w	r1, [r0], #4
 800b966:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b96a:	dcec      	bgt.n	800b946 <__multadd+0x12>
 800b96c:	f1b8 0f00 	cmp.w	r8, #0
 800b970:	d022      	beq.n	800b9b8 <__multadd+0x84>
 800b972:	68a3      	ldr	r3, [r4, #8]
 800b974:	42b3      	cmp	r3, r6
 800b976:	dc19      	bgt.n	800b9ac <__multadd+0x78>
 800b978:	6861      	ldr	r1, [r4, #4]
 800b97a:	4638      	mov	r0, r7
 800b97c:	3101      	adds	r1, #1
 800b97e:	f7ff ff77 	bl	800b870 <_Balloc>
 800b982:	4605      	mov	r5, r0
 800b984:	b928      	cbnz	r0, 800b992 <__multadd+0x5e>
 800b986:	4602      	mov	r2, r0
 800b988:	4b0d      	ldr	r3, [pc, #52]	; (800b9c0 <__multadd+0x8c>)
 800b98a:	480e      	ldr	r0, [pc, #56]	; (800b9c4 <__multadd+0x90>)
 800b98c:	21b5      	movs	r1, #181	; 0xb5
 800b98e:	f000 fec3 	bl	800c718 <__assert_func>
 800b992:	6922      	ldr	r2, [r4, #16]
 800b994:	3202      	adds	r2, #2
 800b996:	f104 010c 	add.w	r1, r4, #12
 800b99a:	0092      	lsls	r2, r2, #2
 800b99c:	300c      	adds	r0, #12
 800b99e:	f7fe f961 	bl	8009c64 <memcpy>
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	f7ff ffa3 	bl	800b8f0 <_Bfree>
 800b9aa:	462c      	mov	r4, r5
 800b9ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b9b0:	3601      	adds	r6, #1
 800b9b2:	f8c3 8014 	str.w	r8, [r3, #20]
 800b9b6:	6126      	str	r6, [r4, #16]
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9be:	bf00      	nop
 800b9c0:	0800f9c7 	.word	0x0800f9c7
 800b9c4:	0800fa38 	.word	0x0800fa38

0800b9c8 <__hi0bits>:
 800b9c8:	0c03      	lsrs	r3, r0, #16
 800b9ca:	041b      	lsls	r3, r3, #16
 800b9cc:	b9d3      	cbnz	r3, 800ba04 <__hi0bits+0x3c>
 800b9ce:	0400      	lsls	r0, r0, #16
 800b9d0:	2310      	movs	r3, #16
 800b9d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b9d6:	bf04      	itt	eq
 800b9d8:	0200      	lsleq	r0, r0, #8
 800b9da:	3308      	addeq	r3, #8
 800b9dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b9e0:	bf04      	itt	eq
 800b9e2:	0100      	lsleq	r0, r0, #4
 800b9e4:	3304      	addeq	r3, #4
 800b9e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b9ea:	bf04      	itt	eq
 800b9ec:	0080      	lsleq	r0, r0, #2
 800b9ee:	3302      	addeq	r3, #2
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	db05      	blt.n	800ba00 <__hi0bits+0x38>
 800b9f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b9f8:	f103 0301 	add.w	r3, r3, #1
 800b9fc:	bf08      	it	eq
 800b9fe:	2320      	moveq	r3, #32
 800ba00:	4618      	mov	r0, r3
 800ba02:	4770      	bx	lr
 800ba04:	2300      	movs	r3, #0
 800ba06:	e7e4      	b.n	800b9d2 <__hi0bits+0xa>

0800ba08 <__lo0bits>:
 800ba08:	6803      	ldr	r3, [r0, #0]
 800ba0a:	f013 0207 	ands.w	r2, r3, #7
 800ba0e:	4601      	mov	r1, r0
 800ba10:	d00b      	beq.n	800ba2a <__lo0bits+0x22>
 800ba12:	07da      	lsls	r2, r3, #31
 800ba14:	d424      	bmi.n	800ba60 <__lo0bits+0x58>
 800ba16:	0798      	lsls	r0, r3, #30
 800ba18:	bf49      	itett	mi
 800ba1a:	085b      	lsrmi	r3, r3, #1
 800ba1c:	089b      	lsrpl	r3, r3, #2
 800ba1e:	2001      	movmi	r0, #1
 800ba20:	600b      	strmi	r3, [r1, #0]
 800ba22:	bf5c      	itt	pl
 800ba24:	600b      	strpl	r3, [r1, #0]
 800ba26:	2002      	movpl	r0, #2
 800ba28:	4770      	bx	lr
 800ba2a:	b298      	uxth	r0, r3
 800ba2c:	b9b0      	cbnz	r0, 800ba5c <__lo0bits+0x54>
 800ba2e:	0c1b      	lsrs	r3, r3, #16
 800ba30:	2010      	movs	r0, #16
 800ba32:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ba36:	bf04      	itt	eq
 800ba38:	0a1b      	lsreq	r3, r3, #8
 800ba3a:	3008      	addeq	r0, #8
 800ba3c:	071a      	lsls	r2, r3, #28
 800ba3e:	bf04      	itt	eq
 800ba40:	091b      	lsreq	r3, r3, #4
 800ba42:	3004      	addeq	r0, #4
 800ba44:	079a      	lsls	r2, r3, #30
 800ba46:	bf04      	itt	eq
 800ba48:	089b      	lsreq	r3, r3, #2
 800ba4a:	3002      	addeq	r0, #2
 800ba4c:	07da      	lsls	r2, r3, #31
 800ba4e:	d403      	bmi.n	800ba58 <__lo0bits+0x50>
 800ba50:	085b      	lsrs	r3, r3, #1
 800ba52:	f100 0001 	add.w	r0, r0, #1
 800ba56:	d005      	beq.n	800ba64 <__lo0bits+0x5c>
 800ba58:	600b      	str	r3, [r1, #0]
 800ba5a:	4770      	bx	lr
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	e7e8      	b.n	800ba32 <__lo0bits+0x2a>
 800ba60:	2000      	movs	r0, #0
 800ba62:	4770      	bx	lr
 800ba64:	2020      	movs	r0, #32
 800ba66:	4770      	bx	lr

0800ba68 <__i2b>:
 800ba68:	b510      	push	{r4, lr}
 800ba6a:	460c      	mov	r4, r1
 800ba6c:	2101      	movs	r1, #1
 800ba6e:	f7ff feff 	bl	800b870 <_Balloc>
 800ba72:	4602      	mov	r2, r0
 800ba74:	b928      	cbnz	r0, 800ba82 <__i2b+0x1a>
 800ba76:	4b05      	ldr	r3, [pc, #20]	; (800ba8c <__i2b+0x24>)
 800ba78:	4805      	ldr	r0, [pc, #20]	; (800ba90 <__i2b+0x28>)
 800ba7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ba7e:	f000 fe4b 	bl	800c718 <__assert_func>
 800ba82:	2301      	movs	r3, #1
 800ba84:	6144      	str	r4, [r0, #20]
 800ba86:	6103      	str	r3, [r0, #16]
 800ba88:	bd10      	pop	{r4, pc}
 800ba8a:	bf00      	nop
 800ba8c:	0800f9c7 	.word	0x0800f9c7
 800ba90:	0800fa38 	.word	0x0800fa38

0800ba94 <__multiply>:
 800ba94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba98:	4614      	mov	r4, r2
 800ba9a:	690a      	ldr	r2, [r1, #16]
 800ba9c:	6923      	ldr	r3, [r4, #16]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	bfb8      	it	lt
 800baa2:	460b      	movlt	r3, r1
 800baa4:	460d      	mov	r5, r1
 800baa6:	bfbc      	itt	lt
 800baa8:	4625      	movlt	r5, r4
 800baaa:	461c      	movlt	r4, r3
 800baac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bab0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bab4:	68ab      	ldr	r3, [r5, #8]
 800bab6:	6869      	ldr	r1, [r5, #4]
 800bab8:	eb0a 0709 	add.w	r7, sl, r9
 800babc:	42bb      	cmp	r3, r7
 800babe:	b085      	sub	sp, #20
 800bac0:	bfb8      	it	lt
 800bac2:	3101      	addlt	r1, #1
 800bac4:	f7ff fed4 	bl	800b870 <_Balloc>
 800bac8:	b930      	cbnz	r0, 800bad8 <__multiply+0x44>
 800baca:	4602      	mov	r2, r0
 800bacc:	4b42      	ldr	r3, [pc, #264]	; (800bbd8 <__multiply+0x144>)
 800bace:	4843      	ldr	r0, [pc, #268]	; (800bbdc <__multiply+0x148>)
 800bad0:	f240 115d 	movw	r1, #349	; 0x15d
 800bad4:	f000 fe20 	bl	800c718 <__assert_func>
 800bad8:	f100 0614 	add.w	r6, r0, #20
 800badc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bae0:	4633      	mov	r3, r6
 800bae2:	2200      	movs	r2, #0
 800bae4:	4543      	cmp	r3, r8
 800bae6:	d31e      	bcc.n	800bb26 <__multiply+0x92>
 800bae8:	f105 0c14 	add.w	ip, r5, #20
 800baec:	f104 0314 	add.w	r3, r4, #20
 800baf0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800baf4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800baf8:	9202      	str	r2, [sp, #8]
 800bafa:	ebac 0205 	sub.w	r2, ip, r5
 800bafe:	3a15      	subs	r2, #21
 800bb00:	f022 0203 	bic.w	r2, r2, #3
 800bb04:	3204      	adds	r2, #4
 800bb06:	f105 0115 	add.w	r1, r5, #21
 800bb0a:	458c      	cmp	ip, r1
 800bb0c:	bf38      	it	cc
 800bb0e:	2204      	movcc	r2, #4
 800bb10:	9201      	str	r2, [sp, #4]
 800bb12:	9a02      	ldr	r2, [sp, #8]
 800bb14:	9303      	str	r3, [sp, #12]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d808      	bhi.n	800bb2c <__multiply+0x98>
 800bb1a:	2f00      	cmp	r7, #0
 800bb1c:	dc55      	bgt.n	800bbca <__multiply+0x136>
 800bb1e:	6107      	str	r7, [r0, #16]
 800bb20:	b005      	add	sp, #20
 800bb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb26:	f843 2b04 	str.w	r2, [r3], #4
 800bb2a:	e7db      	b.n	800bae4 <__multiply+0x50>
 800bb2c:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb30:	f1ba 0f00 	cmp.w	sl, #0
 800bb34:	d020      	beq.n	800bb78 <__multiply+0xe4>
 800bb36:	f105 0e14 	add.w	lr, r5, #20
 800bb3a:	46b1      	mov	r9, r6
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bb42:	f8d9 b000 	ldr.w	fp, [r9]
 800bb46:	b2a1      	uxth	r1, r4
 800bb48:	fa1f fb8b 	uxth.w	fp, fp
 800bb4c:	fb0a b101 	mla	r1, sl, r1, fp
 800bb50:	4411      	add	r1, r2
 800bb52:	f8d9 2000 	ldr.w	r2, [r9]
 800bb56:	0c24      	lsrs	r4, r4, #16
 800bb58:	0c12      	lsrs	r2, r2, #16
 800bb5a:	fb0a 2404 	mla	r4, sl, r4, r2
 800bb5e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bb62:	b289      	uxth	r1, r1
 800bb64:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bb68:	45f4      	cmp	ip, lr
 800bb6a:	f849 1b04 	str.w	r1, [r9], #4
 800bb6e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bb72:	d8e4      	bhi.n	800bb3e <__multiply+0xaa>
 800bb74:	9901      	ldr	r1, [sp, #4]
 800bb76:	5072      	str	r2, [r6, r1]
 800bb78:	9a03      	ldr	r2, [sp, #12]
 800bb7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb7e:	3304      	adds	r3, #4
 800bb80:	f1b9 0f00 	cmp.w	r9, #0
 800bb84:	d01f      	beq.n	800bbc6 <__multiply+0x132>
 800bb86:	6834      	ldr	r4, [r6, #0]
 800bb88:	f105 0114 	add.w	r1, r5, #20
 800bb8c:	46b6      	mov	lr, r6
 800bb8e:	f04f 0a00 	mov.w	sl, #0
 800bb92:	880a      	ldrh	r2, [r1, #0]
 800bb94:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bb98:	fb09 b202 	mla	r2, r9, r2, fp
 800bb9c:	4492      	add	sl, r2
 800bb9e:	b2a4      	uxth	r4, r4
 800bba0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bba4:	f84e 4b04 	str.w	r4, [lr], #4
 800bba8:	f851 4b04 	ldr.w	r4, [r1], #4
 800bbac:	f8be 2000 	ldrh.w	r2, [lr]
 800bbb0:	0c24      	lsrs	r4, r4, #16
 800bbb2:	fb09 2404 	mla	r4, r9, r4, r2
 800bbb6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bbba:	458c      	cmp	ip, r1
 800bbbc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bbc0:	d8e7      	bhi.n	800bb92 <__multiply+0xfe>
 800bbc2:	9a01      	ldr	r2, [sp, #4]
 800bbc4:	50b4      	str	r4, [r6, r2]
 800bbc6:	3604      	adds	r6, #4
 800bbc8:	e7a3      	b.n	800bb12 <__multiply+0x7e>
 800bbca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1a5      	bne.n	800bb1e <__multiply+0x8a>
 800bbd2:	3f01      	subs	r7, #1
 800bbd4:	e7a1      	b.n	800bb1a <__multiply+0x86>
 800bbd6:	bf00      	nop
 800bbd8:	0800f9c7 	.word	0x0800f9c7
 800bbdc:	0800fa38 	.word	0x0800fa38

0800bbe0 <__pow5mult>:
 800bbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbe4:	4615      	mov	r5, r2
 800bbe6:	f012 0203 	ands.w	r2, r2, #3
 800bbea:	4606      	mov	r6, r0
 800bbec:	460f      	mov	r7, r1
 800bbee:	d007      	beq.n	800bc00 <__pow5mult+0x20>
 800bbf0:	4c25      	ldr	r4, [pc, #148]	; (800bc88 <__pow5mult+0xa8>)
 800bbf2:	3a01      	subs	r2, #1
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbfa:	f7ff fe9b 	bl	800b934 <__multadd>
 800bbfe:	4607      	mov	r7, r0
 800bc00:	10ad      	asrs	r5, r5, #2
 800bc02:	d03d      	beq.n	800bc80 <__pow5mult+0xa0>
 800bc04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bc06:	b97c      	cbnz	r4, 800bc28 <__pow5mult+0x48>
 800bc08:	2010      	movs	r0, #16
 800bc0a:	f7ff fe29 	bl	800b860 <malloc>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	6270      	str	r0, [r6, #36]	; 0x24
 800bc12:	b928      	cbnz	r0, 800bc20 <__pow5mult+0x40>
 800bc14:	4b1d      	ldr	r3, [pc, #116]	; (800bc8c <__pow5mult+0xac>)
 800bc16:	481e      	ldr	r0, [pc, #120]	; (800bc90 <__pow5mult+0xb0>)
 800bc18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bc1c:	f000 fd7c 	bl	800c718 <__assert_func>
 800bc20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc24:	6004      	str	r4, [r0, #0]
 800bc26:	60c4      	str	r4, [r0, #12]
 800bc28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc30:	b94c      	cbnz	r4, 800bc46 <__pow5mult+0x66>
 800bc32:	f240 2171 	movw	r1, #625	; 0x271
 800bc36:	4630      	mov	r0, r6
 800bc38:	f7ff ff16 	bl	800ba68 <__i2b>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc42:	4604      	mov	r4, r0
 800bc44:	6003      	str	r3, [r0, #0]
 800bc46:	f04f 0900 	mov.w	r9, #0
 800bc4a:	07eb      	lsls	r3, r5, #31
 800bc4c:	d50a      	bpl.n	800bc64 <__pow5mult+0x84>
 800bc4e:	4639      	mov	r1, r7
 800bc50:	4622      	mov	r2, r4
 800bc52:	4630      	mov	r0, r6
 800bc54:	f7ff ff1e 	bl	800ba94 <__multiply>
 800bc58:	4639      	mov	r1, r7
 800bc5a:	4680      	mov	r8, r0
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f7ff fe47 	bl	800b8f0 <_Bfree>
 800bc62:	4647      	mov	r7, r8
 800bc64:	106d      	asrs	r5, r5, #1
 800bc66:	d00b      	beq.n	800bc80 <__pow5mult+0xa0>
 800bc68:	6820      	ldr	r0, [r4, #0]
 800bc6a:	b938      	cbnz	r0, 800bc7c <__pow5mult+0x9c>
 800bc6c:	4622      	mov	r2, r4
 800bc6e:	4621      	mov	r1, r4
 800bc70:	4630      	mov	r0, r6
 800bc72:	f7ff ff0f 	bl	800ba94 <__multiply>
 800bc76:	6020      	str	r0, [r4, #0]
 800bc78:	f8c0 9000 	str.w	r9, [r0]
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	e7e4      	b.n	800bc4a <__pow5mult+0x6a>
 800bc80:	4638      	mov	r0, r7
 800bc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc86:	bf00      	nop
 800bc88:	0800fb88 	.word	0x0800fb88
 800bc8c:	0800f951 	.word	0x0800f951
 800bc90:	0800fa38 	.word	0x0800fa38

0800bc94 <__lshift>:
 800bc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc98:	460c      	mov	r4, r1
 800bc9a:	6849      	ldr	r1, [r1, #4]
 800bc9c:	6923      	ldr	r3, [r4, #16]
 800bc9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bca2:	68a3      	ldr	r3, [r4, #8]
 800bca4:	4607      	mov	r7, r0
 800bca6:	4691      	mov	r9, r2
 800bca8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcac:	f108 0601 	add.w	r6, r8, #1
 800bcb0:	42b3      	cmp	r3, r6
 800bcb2:	db0b      	blt.n	800bccc <__lshift+0x38>
 800bcb4:	4638      	mov	r0, r7
 800bcb6:	f7ff fddb 	bl	800b870 <_Balloc>
 800bcba:	4605      	mov	r5, r0
 800bcbc:	b948      	cbnz	r0, 800bcd2 <__lshift+0x3e>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	4b28      	ldr	r3, [pc, #160]	; (800bd64 <__lshift+0xd0>)
 800bcc2:	4829      	ldr	r0, [pc, #164]	; (800bd68 <__lshift+0xd4>)
 800bcc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bcc8:	f000 fd26 	bl	800c718 <__assert_func>
 800bccc:	3101      	adds	r1, #1
 800bcce:	005b      	lsls	r3, r3, #1
 800bcd0:	e7ee      	b.n	800bcb0 <__lshift+0x1c>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	f100 0114 	add.w	r1, r0, #20
 800bcd8:	f100 0210 	add.w	r2, r0, #16
 800bcdc:	4618      	mov	r0, r3
 800bcde:	4553      	cmp	r3, sl
 800bce0:	db33      	blt.n	800bd4a <__lshift+0xb6>
 800bce2:	6920      	ldr	r0, [r4, #16]
 800bce4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bce8:	f104 0314 	add.w	r3, r4, #20
 800bcec:	f019 091f 	ands.w	r9, r9, #31
 800bcf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bcf8:	d02b      	beq.n	800bd52 <__lshift+0xbe>
 800bcfa:	f1c9 0e20 	rsb	lr, r9, #32
 800bcfe:	468a      	mov	sl, r1
 800bd00:	2200      	movs	r2, #0
 800bd02:	6818      	ldr	r0, [r3, #0]
 800bd04:	fa00 f009 	lsl.w	r0, r0, r9
 800bd08:	4302      	orrs	r2, r0
 800bd0a:	f84a 2b04 	str.w	r2, [sl], #4
 800bd0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd12:	459c      	cmp	ip, r3
 800bd14:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd18:	d8f3      	bhi.n	800bd02 <__lshift+0x6e>
 800bd1a:	ebac 0304 	sub.w	r3, ip, r4
 800bd1e:	3b15      	subs	r3, #21
 800bd20:	f023 0303 	bic.w	r3, r3, #3
 800bd24:	3304      	adds	r3, #4
 800bd26:	f104 0015 	add.w	r0, r4, #21
 800bd2a:	4584      	cmp	ip, r0
 800bd2c:	bf38      	it	cc
 800bd2e:	2304      	movcc	r3, #4
 800bd30:	50ca      	str	r2, [r1, r3]
 800bd32:	b10a      	cbz	r2, 800bd38 <__lshift+0xa4>
 800bd34:	f108 0602 	add.w	r6, r8, #2
 800bd38:	3e01      	subs	r6, #1
 800bd3a:	4638      	mov	r0, r7
 800bd3c:	612e      	str	r6, [r5, #16]
 800bd3e:	4621      	mov	r1, r4
 800bd40:	f7ff fdd6 	bl	800b8f0 <_Bfree>
 800bd44:	4628      	mov	r0, r5
 800bd46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd4e:	3301      	adds	r3, #1
 800bd50:	e7c5      	b.n	800bcde <__lshift+0x4a>
 800bd52:	3904      	subs	r1, #4
 800bd54:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd58:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd5c:	459c      	cmp	ip, r3
 800bd5e:	d8f9      	bhi.n	800bd54 <__lshift+0xc0>
 800bd60:	e7ea      	b.n	800bd38 <__lshift+0xa4>
 800bd62:	bf00      	nop
 800bd64:	0800f9c7 	.word	0x0800f9c7
 800bd68:	0800fa38 	.word	0x0800fa38

0800bd6c <__mcmp>:
 800bd6c:	b530      	push	{r4, r5, lr}
 800bd6e:	6902      	ldr	r2, [r0, #16]
 800bd70:	690c      	ldr	r4, [r1, #16]
 800bd72:	1b12      	subs	r2, r2, r4
 800bd74:	d10e      	bne.n	800bd94 <__mcmp+0x28>
 800bd76:	f100 0314 	add.w	r3, r0, #20
 800bd7a:	3114      	adds	r1, #20
 800bd7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd8c:	42a5      	cmp	r5, r4
 800bd8e:	d003      	beq.n	800bd98 <__mcmp+0x2c>
 800bd90:	d305      	bcc.n	800bd9e <__mcmp+0x32>
 800bd92:	2201      	movs	r2, #1
 800bd94:	4610      	mov	r0, r2
 800bd96:	bd30      	pop	{r4, r5, pc}
 800bd98:	4283      	cmp	r3, r0
 800bd9a:	d3f3      	bcc.n	800bd84 <__mcmp+0x18>
 800bd9c:	e7fa      	b.n	800bd94 <__mcmp+0x28>
 800bd9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bda2:	e7f7      	b.n	800bd94 <__mcmp+0x28>

0800bda4 <__mdiff>:
 800bda4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda8:	460c      	mov	r4, r1
 800bdaa:	4606      	mov	r6, r0
 800bdac:	4611      	mov	r1, r2
 800bdae:	4620      	mov	r0, r4
 800bdb0:	4617      	mov	r7, r2
 800bdb2:	f7ff ffdb 	bl	800bd6c <__mcmp>
 800bdb6:	1e05      	subs	r5, r0, #0
 800bdb8:	d110      	bne.n	800bddc <__mdiff+0x38>
 800bdba:	4629      	mov	r1, r5
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	f7ff fd57 	bl	800b870 <_Balloc>
 800bdc2:	b930      	cbnz	r0, 800bdd2 <__mdiff+0x2e>
 800bdc4:	4b39      	ldr	r3, [pc, #228]	; (800beac <__mdiff+0x108>)
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	f240 2132 	movw	r1, #562	; 0x232
 800bdcc:	4838      	ldr	r0, [pc, #224]	; (800beb0 <__mdiff+0x10c>)
 800bdce:	f000 fca3 	bl	800c718 <__assert_func>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bddc:	bfa4      	itt	ge
 800bdde:	463b      	movge	r3, r7
 800bde0:	4627      	movge	r7, r4
 800bde2:	4630      	mov	r0, r6
 800bde4:	6879      	ldr	r1, [r7, #4]
 800bde6:	bfa6      	itte	ge
 800bde8:	461c      	movge	r4, r3
 800bdea:	2500      	movge	r5, #0
 800bdec:	2501      	movlt	r5, #1
 800bdee:	f7ff fd3f 	bl	800b870 <_Balloc>
 800bdf2:	b920      	cbnz	r0, 800bdfe <__mdiff+0x5a>
 800bdf4:	4b2d      	ldr	r3, [pc, #180]	; (800beac <__mdiff+0x108>)
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bdfc:	e7e6      	b.n	800bdcc <__mdiff+0x28>
 800bdfe:	693e      	ldr	r6, [r7, #16]
 800be00:	60c5      	str	r5, [r0, #12]
 800be02:	6925      	ldr	r5, [r4, #16]
 800be04:	f107 0114 	add.w	r1, r7, #20
 800be08:	f104 0914 	add.w	r9, r4, #20
 800be0c:	f100 0e14 	add.w	lr, r0, #20
 800be10:	f107 0210 	add.w	r2, r7, #16
 800be14:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800be18:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800be1c:	46f2      	mov	sl, lr
 800be1e:	2700      	movs	r7, #0
 800be20:	f859 3b04 	ldr.w	r3, [r9], #4
 800be24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800be28:	fa1f f883 	uxth.w	r8, r3
 800be2c:	fa17 f78b 	uxtah	r7, r7, fp
 800be30:	0c1b      	lsrs	r3, r3, #16
 800be32:	eba7 0808 	sub.w	r8, r7, r8
 800be36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800be3e:	fa1f f888 	uxth.w	r8, r8
 800be42:	141f      	asrs	r7, r3, #16
 800be44:	454d      	cmp	r5, r9
 800be46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be4a:	f84a 3b04 	str.w	r3, [sl], #4
 800be4e:	d8e7      	bhi.n	800be20 <__mdiff+0x7c>
 800be50:	1b2b      	subs	r3, r5, r4
 800be52:	3b15      	subs	r3, #21
 800be54:	f023 0303 	bic.w	r3, r3, #3
 800be58:	3304      	adds	r3, #4
 800be5a:	3415      	adds	r4, #21
 800be5c:	42a5      	cmp	r5, r4
 800be5e:	bf38      	it	cc
 800be60:	2304      	movcc	r3, #4
 800be62:	4419      	add	r1, r3
 800be64:	4473      	add	r3, lr
 800be66:	469e      	mov	lr, r3
 800be68:	460d      	mov	r5, r1
 800be6a:	4565      	cmp	r5, ip
 800be6c:	d30e      	bcc.n	800be8c <__mdiff+0xe8>
 800be6e:	f10c 0203 	add.w	r2, ip, #3
 800be72:	1a52      	subs	r2, r2, r1
 800be74:	f022 0203 	bic.w	r2, r2, #3
 800be78:	3903      	subs	r1, #3
 800be7a:	458c      	cmp	ip, r1
 800be7c:	bf38      	it	cc
 800be7e:	2200      	movcc	r2, #0
 800be80:	441a      	add	r2, r3
 800be82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800be86:	b17b      	cbz	r3, 800bea8 <__mdiff+0x104>
 800be88:	6106      	str	r6, [r0, #16]
 800be8a:	e7a5      	b.n	800bdd8 <__mdiff+0x34>
 800be8c:	f855 8b04 	ldr.w	r8, [r5], #4
 800be90:	fa17 f488 	uxtah	r4, r7, r8
 800be94:	1422      	asrs	r2, r4, #16
 800be96:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800be9a:	b2a4      	uxth	r4, r4
 800be9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bea0:	f84e 4b04 	str.w	r4, [lr], #4
 800bea4:	1417      	asrs	r7, r2, #16
 800bea6:	e7e0      	b.n	800be6a <__mdiff+0xc6>
 800bea8:	3e01      	subs	r6, #1
 800beaa:	e7ea      	b.n	800be82 <__mdiff+0xde>
 800beac:	0800f9c7 	.word	0x0800f9c7
 800beb0:	0800fa38 	.word	0x0800fa38

0800beb4 <__d2b>:
 800beb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800beb8:	4689      	mov	r9, r1
 800beba:	2101      	movs	r1, #1
 800bebc:	ec57 6b10 	vmov	r6, r7, d0
 800bec0:	4690      	mov	r8, r2
 800bec2:	f7ff fcd5 	bl	800b870 <_Balloc>
 800bec6:	4604      	mov	r4, r0
 800bec8:	b930      	cbnz	r0, 800bed8 <__d2b+0x24>
 800beca:	4602      	mov	r2, r0
 800becc:	4b25      	ldr	r3, [pc, #148]	; (800bf64 <__d2b+0xb0>)
 800bece:	4826      	ldr	r0, [pc, #152]	; (800bf68 <__d2b+0xb4>)
 800bed0:	f240 310a 	movw	r1, #778	; 0x30a
 800bed4:	f000 fc20 	bl	800c718 <__assert_func>
 800bed8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bedc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bee0:	bb35      	cbnz	r5, 800bf30 <__d2b+0x7c>
 800bee2:	2e00      	cmp	r6, #0
 800bee4:	9301      	str	r3, [sp, #4]
 800bee6:	d028      	beq.n	800bf3a <__d2b+0x86>
 800bee8:	4668      	mov	r0, sp
 800beea:	9600      	str	r6, [sp, #0]
 800beec:	f7ff fd8c 	bl	800ba08 <__lo0bits>
 800bef0:	9900      	ldr	r1, [sp, #0]
 800bef2:	b300      	cbz	r0, 800bf36 <__d2b+0x82>
 800bef4:	9a01      	ldr	r2, [sp, #4]
 800bef6:	f1c0 0320 	rsb	r3, r0, #32
 800befa:	fa02 f303 	lsl.w	r3, r2, r3
 800befe:	430b      	orrs	r3, r1
 800bf00:	40c2      	lsrs	r2, r0
 800bf02:	6163      	str	r3, [r4, #20]
 800bf04:	9201      	str	r2, [sp, #4]
 800bf06:	9b01      	ldr	r3, [sp, #4]
 800bf08:	61a3      	str	r3, [r4, #24]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	bf14      	ite	ne
 800bf0e:	2202      	movne	r2, #2
 800bf10:	2201      	moveq	r2, #1
 800bf12:	6122      	str	r2, [r4, #16]
 800bf14:	b1d5      	cbz	r5, 800bf4c <__d2b+0x98>
 800bf16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf1a:	4405      	add	r5, r0
 800bf1c:	f8c9 5000 	str.w	r5, [r9]
 800bf20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf24:	f8c8 0000 	str.w	r0, [r8]
 800bf28:	4620      	mov	r0, r4
 800bf2a:	b003      	add	sp, #12
 800bf2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf34:	e7d5      	b.n	800bee2 <__d2b+0x2e>
 800bf36:	6161      	str	r1, [r4, #20]
 800bf38:	e7e5      	b.n	800bf06 <__d2b+0x52>
 800bf3a:	a801      	add	r0, sp, #4
 800bf3c:	f7ff fd64 	bl	800ba08 <__lo0bits>
 800bf40:	9b01      	ldr	r3, [sp, #4]
 800bf42:	6163      	str	r3, [r4, #20]
 800bf44:	2201      	movs	r2, #1
 800bf46:	6122      	str	r2, [r4, #16]
 800bf48:	3020      	adds	r0, #32
 800bf4a:	e7e3      	b.n	800bf14 <__d2b+0x60>
 800bf4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf54:	f8c9 0000 	str.w	r0, [r9]
 800bf58:	6918      	ldr	r0, [r3, #16]
 800bf5a:	f7ff fd35 	bl	800b9c8 <__hi0bits>
 800bf5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf62:	e7df      	b.n	800bf24 <__d2b+0x70>
 800bf64:	0800f9c7 	.word	0x0800f9c7
 800bf68:	0800fa38 	.word	0x0800fa38

0800bf6c <_calloc_r>:
 800bf6c:	b513      	push	{r0, r1, r4, lr}
 800bf6e:	434a      	muls	r2, r1
 800bf70:	4611      	mov	r1, r2
 800bf72:	9201      	str	r2, [sp, #4]
 800bf74:	f000 f85a 	bl	800c02c <_malloc_r>
 800bf78:	4604      	mov	r4, r0
 800bf7a:	b118      	cbz	r0, 800bf84 <_calloc_r+0x18>
 800bf7c:	9a01      	ldr	r2, [sp, #4]
 800bf7e:	2100      	movs	r1, #0
 800bf80:	f7fd fe7e 	bl	8009c80 <memset>
 800bf84:	4620      	mov	r0, r4
 800bf86:	b002      	add	sp, #8
 800bf88:	bd10      	pop	{r4, pc}
	...

0800bf8c <_free_r>:
 800bf8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf8e:	2900      	cmp	r1, #0
 800bf90:	d048      	beq.n	800c024 <_free_r+0x98>
 800bf92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf96:	9001      	str	r0, [sp, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f1a1 0404 	sub.w	r4, r1, #4
 800bf9e:	bfb8      	it	lt
 800bfa0:	18e4      	addlt	r4, r4, r3
 800bfa2:	f000 fc59 	bl	800c858 <__malloc_lock>
 800bfa6:	4a20      	ldr	r2, [pc, #128]	; (800c028 <_free_r+0x9c>)
 800bfa8:	9801      	ldr	r0, [sp, #4]
 800bfaa:	6813      	ldr	r3, [r2, #0]
 800bfac:	4615      	mov	r5, r2
 800bfae:	b933      	cbnz	r3, 800bfbe <_free_r+0x32>
 800bfb0:	6063      	str	r3, [r4, #4]
 800bfb2:	6014      	str	r4, [r2, #0]
 800bfb4:	b003      	add	sp, #12
 800bfb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfba:	f000 bc53 	b.w	800c864 <__malloc_unlock>
 800bfbe:	42a3      	cmp	r3, r4
 800bfc0:	d90b      	bls.n	800bfda <_free_r+0x4e>
 800bfc2:	6821      	ldr	r1, [r4, #0]
 800bfc4:	1862      	adds	r2, r4, r1
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	bf04      	itt	eq
 800bfca:	681a      	ldreq	r2, [r3, #0]
 800bfcc:	685b      	ldreq	r3, [r3, #4]
 800bfce:	6063      	str	r3, [r4, #4]
 800bfd0:	bf04      	itt	eq
 800bfd2:	1852      	addeq	r2, r2, r1
 800bfd4:	6022      	streq	r2, [r4, #0]
 800bfd6:	602c      	str	r4, [r5, #0]
 800bfd8:	e7ec      	b.n	800bfb4 <_free_r+0x28>
 800bfda:	461a      	mov	r2, r3
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	b10b      	cbz	r3, 800bfe4 <_free_r+0x58>
 800bfe0:	42a3      	cmp	r3, r4
 800bfe2:	d9fa      	bls.n	800bfda <_free_r+0x4e>
 800bfe4:	6811      	ldr	r1, [r2, #0]
 800bfe6:	1855      	adds	r5, r2, r1
 800bfe8:	42a5      	cmp	r5, r4
 800bfea:	d10b      	bne.n	800c004 <_free_r+0x78>
 800bfec:	6824      	ldr	r4, [r4, #0]
 800bfee:	4421      	add	r1, r4
 800bff0:	1854      	adds	r4, r2, r1
 800bff2:	42a3      	cmp	r3, r4
 800bff4:	6011      	str	r1, [r2, #0]
 800bff6:	d1dd      	bne.n	800bfb4 <_free_r+0x28>
 800bff8:	681c      	ldr	r4, [r3, #0]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	6053      	str	r3, [r2, #4]
 800bffe:	4421      	add	r1, r4
 800c000:	6011      	str	r1, [r2, #0]
 800c002:	e7d7      	b.n	800bfb4 <_free_r+0x28>
 800c004:	d902      	bls.n	800c00c <_free_r+0x80>
 800c006:	230c      	movs	r3, #12
 800c008:	6003      	str	r3, [r0, #0]
 800c00a:	e7d3      	b.n	800bfb4 <_free_r+0x28>
 800c00c:	6825      	ldr	r5, [r4, #0]
 800c00e:	1961      	adds	r1, r4, r5
 800c010:	428b      	cmp	r3, r1
 800c012:	bf04      	itt	eq
 800c014:	6819      	ldreq	r1, [r3, #0]
 800c016:	685b      	ldreq	r3, [r3, #4]
 800c018:	6063      	str	r3, [r4, #4]
 800c01a:	bf04      	itt	eq
 800c01c:	1949      	addeq	r1, r1, r5
 800c01e:	6021      	streq	r1, [r4, #0]
 800c020:	6054      	str	r4, [r2, #4]
 800c022:	e7c7      	b.n	800bfb4 <_free_r+0x28>
 800c024:	b003      	add	sp, #12
 800c026:	bd30      	pop	{r4, r5, pc}
 800c028:	200026c4 	.word	0x200026c4

0800c02c <_malloc_r>:
 800c02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c02e:	1ccd      	adds	r5, r1, #3
 800c030:	f025 0503 	bic.w	r5, r5, #3
 800c034:	3508      	adds	r5, #8
 800c036:	2d0c      	cmp	r5, #12
 800c038:	bf38      	it	cc
 800c03a:	250c      	movcc	r5, #12
 800c03c:	2d00      	cmp	r5, #0
 800c03e:	4606      	mov	r6, r0
 800c040:	db01      	blt.n	800c046 <_malloc_r+0x1a>
 800c042:	42a9      	cmp	r1, r5
 800c044:	d903      	bls.n	800c04e <_malloc_r+0x22>
 800c046:	230c      	movs	r3, #12
 800c048:	6033      	str	r3, [r6, #0]
 800c04a:	2000      	movs	r0, #0
 800c04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c04e:	f000 fc03 	bl	800c858 <__malloc_lock>
 800c052:	4921      	ldr	r1, [pc, #132]	; (800c0d8 <_malloc_r+0xac>)
 800c054:	680a      	ldr	r2, [r1, #0]
 800c056:	4614      	mov	r4, r2
 800c058:	b99c      	cbnz	r4, 800c082 <_malloc_r+0x56>
 800c05a:	4f20      	ldr	r7, [pc, #128]	; (800c0dc <_malloc_r+0xb0>)
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	b923      	cbnz	r3, 800c06a <_malloc_r+0x3e>
 800c060:	4621      	mov	r1, r4
 800c062:	4630      	mov	r0, r6
 800c064:	f000 faf2 	bl	800c64c <_sbrk_r>
 800c068:	6038      	str	r0, [r7, #0]
 800c06a:	4629      	mov	r1, r5
 800c06c:	4630      	mov	r0, r6
 800c06e:	f000 faed 	bl	800c64c <_sbrk_r>
 800c072:	1c43      	adds	r3, r0, #1
 800c074:	d123      	bne.n	800c0be <_malloc_r+0x92>
 800c076:	230c      	movs	r3, #12
 800c078:	6033      	str	r3, [r6, #0]
 800c07a:	4630      	mov	r0, r6
 800c07c:	f000 fbf2 	bl	800c864 <__malloc_unlock>
 800c080:	e7e3      	b.n	800c04a <_malloc_r+0x1e>
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	1b5b      	subs	r3, r3, r5
 800c086:	d417      	bmi.n	800c0b8 <_malloc_r+0x8c>
 800c088:	2b0b      	cmp	r3, #11
 800c08a:	d903      	bls.n	800c094 <_malloc_r+0x68>
 800c08c:	6023      	str	r3, [r4, #0]
 800c08e:	441c      	add	r4, r3
 800c090:	6025      	str	r5, [r4, #0]
 800c092:	e004      	b.n	800c09e <_malloc_r+0x72>
 800c094:	6863      	ldr	r3, [r4, #4]
 800c096:	42a2      	cmp	r2, r4
 800c098:	bf0c      	ite	eq
 800c09a:	600b      	streq	r3, [r1, #0]
 800c09c:	6053      	strne	r3, [r2, #4]
 800c09e:	4630      	mov	r0, r6
 800c0a0:	f000 fbe0 	bl	800c864 <__malloc_unlock>
 800c0a4:	f104 000b 	add.w	r0, r4, #11
 800c0a8:	1d23      	adds	r3, r4, #4
 800c0aa:	f020 0007 	bic.w	r0, r0, #7
 800c0ae:	1ac2      	subs	r2, r0, r3
 800c0b0:	d0cc      	beq.n	800c04c <_malloc_r+0x20>
 800c0b2:	1a1b      	subs	r3, r3, r0
 800c0b4:	50a3      	str	r3, [r4, r2]
 800c0b6:	e7c9      	b.n	800c04c <_malloc_r+0x20>
 800c0b8:	4622      	mov	r2, r4
 800c0ba:	6864      	ldr	r4, [r4, #4]
 800c0bc:	e7cc      	b.n	800c058 <_malloc_r+0x2c>
 800c0be:	1cc4      	adds	r4, r0, #3
 800c0c0:	f024 0403 	bic.w	r4, r4, #3
 800c0c4:	42a0      	cmp	r0, r4
 800c0c6:	d0e3      	beq.n	800c090 <_malloc_r+0x64>
 800c0c8:	1a21      	subs	r1, r4, r0
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	f000 fabe 	bl	800c64c <_sbrk_r>
 800c0d0:	3001      	adds	r0, #1
 800c0d2:	d1dd      	bne.n	800c090 <_malloc_r+0x64>
 800c0d4:	e7cf      	b.n	800c076 <_malloc_r+0x4a>
 800c0d6:	bf00      	nop
 800c0d8:	200026c4 	.word	0x200026c4
 800c0dc:	200026c8 	.word	0x200026c8

0800c0e0 <__ssputs_r>:
 800c0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0e4:	688e      	ldr	r6, [r1, #8]
 800c0e6:	429e      	cmp	r6, r3
 800c0e8:	4682      	mov	sl, r0
 800c0ea:	460c      	mov	r4, r1
 800c0ec:	4690      	mov	r8, r2
 800c0ee:	461f      	mov	r7, r3
 800c0f0:	d838      	bhi.n	800c164 <__ssputs_r+0x84>
 800c0f2:	898a      	ldrh	r2, [r1, #12]
 800c0f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0f8:	d032      	beq.n	800c160 <__ssputs_r+0x80>
 800c0fa:	6825      	ldr	r5, [r4, #0]
 800c0fc:	6909      	ldr	r1, [r1, #16]
 800c0fe:	eba5 0901 	sub.w	r9, r5, r1
 800c102:	6965      	ldr	r5, [r4, #20]
 800c104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c10c:	3301      	adds	r3, #1
 800c10e:	444b      	add	r3, r9
 800c110:	106d      	asrs	r5, r5, #1
 800c112:	429d      	cmp	r5, r3
 800c114:	bf38      	it	cc
 800c116:	461d      	movcc	r5, r3
 800c118:	0553      	lsls	r3, r2, #21
 800c11a:	d531      	bpl.n	800c180 <__ssputs_r+0xa0>
 800c11c:	4629      	mov	r1, r5
 800c11e:	f7ff ff85 	bl	800c02c <_malloc_r>
 800c122:	4606      	mov	r6, r0
 800c124:	b950      	cbnz	r0, 800c13c <__ssputs_r+0x5c>
 800c126:	230c      	movs	r3, #12
 800c128:	f8ca 3000 	str.w	r3, [sl]
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c132:	81a3      	strh	r3, [r4, #12]
 800c134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c13c:	6921      	ldr	r1, [r4, #16]
 800c13e:	464a      	mov	r2, r9
 800c140:	f7fd fd90 	bl	8009c64 <memcpy>
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c14a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c14e:	81a3      	strh	r3, [r4, #12]
 800c150:	6126      	str	r6, [r4, #16]
 800c152:	6165      	str	r5, [r4, #20]
 800c154:	444e      	add	r6, r9
 800c156:	eba5 0509 	sub.w	r5, r5, r9
 800c15a:	6026      	str	r6, [r4, #0]
 800c15c:	60a5      	str	r5, [r4, #8]
 800c15e:	463e      	mov	r6, r7
 800c160:	42be      	cmp	r6, r7
 800c162:	d900      	bls.n	800c166 <__ssputs_r+0x86>
 800c164:	463e      	mov	r6, r7
 800c166:	4632      	mov	r2, r6
 800c168:	6820      	ldr	r0, [r4, #0]
 800c16a:	4641      	mov	r1, r8
 800c16c:	f000 fb5a 	bl	800c824 <memmove>
 800c170:	68a3      	ldr	r3, [r4, #8]
 800c172:	6822      	ldr	r2, [r4, #0]
 800c174:	1b9b      	subs	r3, r3, r6
 800c176:	4432      	add	r2, r6
 800c178:	60a3      	str	r3, [r4, #8]
 800c17a:	6022      	str	r2, [r4, #0]
 800c17c:	2000      	movs	r0, #0
 800c17e:	e7db      	b.n	800c138 <__ssputs_r+0x58>
 800c180:	462a      	mov	r2, r5
 800c182:	f000 fb75 	bl	800c870 <_realloc_r>
 800c186:	4606      	mov	r6, r0
 800c188:	2800      	cmp	r0, #0
 800c18a:	d1e1      	bne.n	800c150 <__ssputs_r+0x70>
 800c18c:	6921      	ldr	r1, [r4, #16]
 800c18e:	4650      	mov	r0, sl
 800c190:	f7ff fefc 	bl	800bf8c <_free_r>
 800c194:	e7c7      	b.n	800c126 <__ssputs_r+0x46>
	...

0800c198 <_svfiprintf_r>:
 800c198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19c:	4698      	mov	r8, r3
 800c19e:	898b      	ldrh	r3, [r1, #12]
 800c1a0:	061b      	lsls	r3, r3, #24
 800c1a2:	b09d      	sub	sp, #116	; 0x74
 800c1a4:	4607      	mov	r7, r0
 800c1a6:	460d      	mov	r5, r1
 800c1a8:	4614      	mov	r4, r2
 800c1aa:	d50e      	bpl.n	800c1ca <_svfiprintf_r+0x32>
 800c1ac:	690b      	ldr	r3, [r1, #16]
 800c1ae:	b963      	cbnz	r3, 800c1ca <_svfiprintf_r+0x32>
 800c1b0:	2140      	movs	r1, #64	; 0x40
 800c1b2:	f7ff ff3b 	bl	800c02c <_malloc_r>
 800c1b6:	6028      	str	r0, [r5, #0]
 800c1b8:	6128      	str	r0, [r5, #16]
 800c1ba:	b920      	cbnz	r0, 800c1c6 <_svfiprintf_r+0x2e>
 800c1bc:	230c      	movs	r3, #12
 800c1be:	603b      	str	r3, [r7, #0]
 800c1c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1c4:	e0d1      	b.n	800c36a <_svfiprintf_r+0x1d2>
 800c1c6:	2340      	movs	r3, #64	; 0x40
 800c1c8:	616b      	str	r3, [r5, #20]
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ce:	2320      	movs	r3, #32
 800c1d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1d8:	2330      	movs	r3, #48	; 0x30
 800c1da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c384 <_svfiprintf_r+0x1ec>
 800c1de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1e2:	f04f 0901 	mov.w	r9, #1
 800c1e6:	4623      	mov	r3, r4
 800c1e8:	469a      	mov	sl, r3
 800c1ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1ee:	b10a      	cbz	r2, 800c1f4 <_svfiprintf_r+0x5c>
 800c1f0:	2a25      	cmp	r2, #37	; 0x25
 800c1f2:	d1f9      	bne.n	800c1e8 <_svfiprintf_r+0x50>
 800c1f4:	ebba 0b04 	subs.w	fp, sl, r4
 800c1f8:	d00b      	beq.n	800c212 <_svfiprintf_r+0x7a>
 800c1fa:	465b      	mov	r3, fp
 800c1fc:	4622      	mov	r2, r4
 800c1fe:	4629      	mov	r1, r5
 800c200:	4638      	mov	r0, r7
 800c202:	f7ff ff6d 	bl	800c0e0 <__ssputs_r>
 800c206:	3001      	adds	r0, #1
 800c208:	f000 80aa 	beq.w	800c360 <_svfiprintf_r+0x1c8>
 800c20c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c20e:	445a      	add	r2, fp
 800c210:	9209      	str	r2, [sp, #36]	; 0x24
 800c212:	f89a 3000 	ldrb.w	r3, [sl]
 800c216:	2b00      	cmp	r3, #0
 800c218:	f000 80a2 	beq.w	800c360 <_svfiprintf_r+0x1c8>
 800c21c:	2300      	movs	r3, #0
 800c21e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c226:	f10a 0a01 	add.w	sl, sl, #1
 800c22a:	9304      	str	r3, [sp, #16]
 800c22c:	9307      	str	r3, [sp, #28]
 800c22e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c232:	931a      	str	r3, [sp, #104]	; 0x68
 800c234:	4654      	mov	r4, sl
 800c236:	2205      	movs	r2, #5
 800c238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c23c:	4851      	ldr	r0, [pc, #324]	; (800c384 <_svfiprintf_r+0x1ec>)
 800c23e:	f7f3 ffcf 	bl	80001e0 <memchr>
 800c242:	9a04      	ldr	r2, [sp, #16]
 800c244:	b9d8      	cbnz	r0, 800c27e <_svfiprintf_r+0xe6>
 800c246:	06d0      	lsls	r0, r2, #27
 800c248:	bf44      	itt	mi
 800c24a:	2320      	movmi	r3, #32
 800c24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c250:	0711      	lsls	r1, r2, #28
 800c252:	bf44      	itt	mi
 800c254:	232b      	movmi	r3, #43	; 0x2b
 800c256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c25a:	f89a 3000 	ldrb.w	r3, [sl]
 800c25e:	2b2a      	cmp	r3, #42	; 0x2a
 800c260:	d015      	beq.n	800c28e <_svfiprintf_r+0xf6>
 800c262:	9a07      	ldr	r2, [sp, #28]
 800c264:	4654      	mov	r4, sl
 800c266:	2000      	movs	r0, #0
 800c268:	f04f 0c0a 	mov.w	ip, #10
 800c26c:	4621      	mov	r1, r4
 800c26e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c272:	3b30      	subs	r3, #48	; 0x30
 800c274:	2b09      	cmp	r3, #9
 800c276:	d94e      	bls.n	800c316 <_svfiprintf_r+0x17e>
 800c278:	b1b0      	cbz	r0, 800c2a8 <_svfiprintf_r+0x110>
 800c27a:	9207      	str	r2, [sp, #28]
 800c27c:	e014      	b.n	800c2a8 <_svfiprintf_r+0x110>
 800c27e:	eba0 0308 	sub.w	r3, r0, r8
 800c282:	fa09 f303 	lsl.w	r3, r9, r3
 800c286:	4313      	orrs	r3, r2
 800c288:	9304      	str	r3, [sp, #16]
 800c28a:	46a2      	mov	sl, r4
 800c28c:	e7d2      	b.n	800c234 <_svfiprintf_r+0x9c>
 800c28e:	9b03      	ldr	r3, [sp, #12]
 800c290:	1d19      	adds	r1, r3, #4
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	9103      	str	r1, [sp, #12]
 800c296:	2b00      	cmp	r3, #0
 800c298:	bfbb      	ittet	lt
 800c29a:	425b      	neglt	r3, r3
 800c29c:	f042 0202 	orrlt.w	r2, r2, #2
 800c2a0:	9307      	strge	r3, [sp, #28]
 800c2a2:	9307      	strlt	r3, [sp, #28]
 800c2a4:	bfb8      	it	lt
 800c2a6:	9204      	strlt	r2, [sp, #16]
 800c2a8:	7823      	ldrb	r3, [r4, #0]
 800c2aa:	2b2e      	cmp	r3, #46	; 0x2e
 800c2ac:	d10c      	bne.n	800c2c8 <_svfiprintf_r+0x130>
 800c2ae:	7863      	ldrb	r3, [r4, #1]
 800c2b0:	2b2a      	cmp	r3, #42	; 0x2a
 800c2b2:	d135      	bne.n	800c320 <_svfiprintf_r+0x188>
 800c2b4:	9b03      	ldr	r3, [sp, #12]
 800c2b6:	1d1a      	adds	r2, r3, #4
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	9203      	str	r2, [sp, #12]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	bfb8      	it	lt
 800c2c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c2c4:	3402      	adds	r4, #2
 800c2c6:	9305      	str	r3, [sp, #20]
 800c2c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c394 <_svfiprintf_r+0x1fc>
 800c2cc:	7821      	ldrb	r1, [r4, #0]
 800c2ce:	2203      	movs	r2, #3
 800c2d0:	4650      	mov	r0, sl
 800c2d2:	f7f3 ff85 	bl	80001e0 <memchr>
 800c2d6:	b140      	cbz	r0, 800c2ea <_svfiprintf_r+0x152>
 800c2d8:	2340      	movs	r3, #64	; 0x40
 800c2da:	eba0 000a 	sub.w	r0, r0, sl
 800c2de:	fa03 f000 	lsl.w	r0, r3, r0
 800c2e2:	9b04      	ldr	r3, [sp, #16]
 800c2e4:	4303      	orrs	r3, r0
 800c2e6:	3401      	adds	r4, #1
 800c2e8:	9304      	str	r3, [sp, #16]
 800c2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ee:	4826      	ldr	r0, [pc, #152]	; (800c388 <_svfiprintf_r+0x1f0>)
 800c2f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2f4:	2206      	movs	r2, #6
 800c2f6:	f7f3 ff73 	bl	80001e0 <memchr>
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	d038      	beq.n	800c370 <_svfiprintf_r+0x1d8>
 800c2fe:	4b23      	ldr	r3, [pc, #140]	; (800c38c <_svfiprintf_r+0x1f4>)
 800c300:	bb1b      	cbnz	r3, 800c34a <_svfiprintf_r+0x1b2>
 800c302:	9b03      	ldr	r3, [sp, #12]
 800c304:	3307      	adds	r3, #7
 800c306:	f023 0307 	bic.w	r3, r3, #7
 800c30a:	3308      	adds	r3, #8
 800c30c:	9303      	str	r3, [sp, #12]
 800c30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c310:	4433      	add	r3, r6
 800c312:	9309      	str	r3, [sp, #36]	; 0x24
 800c314:	e767      	b.n	800c1e6 <_svfiprintf_r+0x4e>
 800c316:	fb0c 3202 	mla	r2, ip, r2, r3
 800c31a:	460c      	mov	r4, r1
 800c31c:	2001      	movs	r0, #1
 800c31e:	e7a5      	b.n	800c26c <_svfiprintf_r+0xd4>
 800c320:	2300      	movs	r3, #0
 800c322:	3401      	adds	r4, #1
 800c324:	9305      	str	r3, [sp, #20]
 800c326:	4619      	mov	r1, r3
 800c328:	f04f 0c0a 	mov.w	ip, #10
 800c32c:	4620      	mov	r0, r4
 800c32e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c332:	3a30      	subs	r2, #48	; 0x30
 800c334:	2a09      	cmp	r2, #9
 800c336:	d903      	bls.n	800c340 <_svfiprintf_r+0x1a8>
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d0c5      	beq.n	800c2c8 <_svfiprintf_r+0x130>
 800c33c:	9105      	str	r1, [sp, #20]
 800c33e:	e7c3      	b.n	800c2c8 <_svfiprintf_r+0x130>
 800c340:	fb0c 2101 	mla	r1, ip, r1, r2
 800c344:	4604      	mov	r4, r0
 800c346:	2301      	movs	r3, #1
 800c348:	e7f0      	b.n	800c32c <_svfiprintf_r+0x194>
 800c34a:	ab03      	add	r3, sp, #12
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	462a      	mov	r2, r5
 800c350:	4b0f      	ldr	r3, [pc, #60]	; (800c390 <_svfiprintf_r+0x1f8>)
 800c352:	a904      	add	r1, sp, #16
 800c354:	4638      	mov	r0, r7
 800c356:	f7fd fd3b 	bl	8009dd0 <_printf_float>
 800c35a:	1c42      	adds	r2, r0, #1
 800c35c:	4606      	mov	r6, r0
 800c35e:	d1d6      	bne.n	800c30e <_svfiprintf_r+0x176>
 800c360:	89ab      	ldrh	r3, [r5, #12]
 800c362:	065b      	lsls	r3, r3, #25
 800c364:	f53f af2c 	bmi.w	800c1c0 <_svfiprintf_r+0x28>
 800c368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c36a:	b01d      	add	sp, #116	; 0x74
 800c36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c370:	ab03      	add	r3, sp, #12
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	462a      	mov	r2, r5
 800c376:	4b06      	ldr	r3, [pc, #24]	; (800c390 <_svfiprintf_r+0x1f8>)
 800c378:	a904      	add	r1, sp, #16
 800c37a:	4638      	mov	r0, r7
 800c37c:	f7fd ffcc 	bl	800a318 <_printf_i>
 800c380:	e7eb      	b.n	800c35a <_svfiprintf_r+0x1c2>
 800c382:	bf00      	nop
 800c384:	0800fb94 	.word	0x0800fb94
 800c388:	0800fb9e 	.word	0x0800fb9e
 800c38c:	08009dd1 	.word	0x08009dd1
 800c390:	0800c0e1 	.word	0x0800c0e1
 800c394:	0800fb9a 	.word	0x0800fb9a

0800c398 <__sfputc_r>:
 800c398:	6893      	ldr	r3, [r2, #8]
 800c39a:	3b01      	subs	r3, #1
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	b410      	push	{r4}
 800c3a0:	6093      	str	r3, [r2, #8]
 800c3a2:	da08      	bge.n	800c3b6 <__sfputc_r+0x1e>
 800c3a4:	6994      	ldr	r4, [r2, #24]
 800c3a6:	42a3      	cmp	r3, r4
 800c3a8:	db01      	blt.n	800c3ae <__sfputc_r+0x16>
 800c3aa:	290a      	cmp	r1, #10
 800c3ac:	d103      	bne.n	800c3b6 <__sfputc_r+0x1e>
 800c3ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3b2:	f7fe b8f7 	b.w	800a5a4 <__swbuf_r>
 800c3b6:	6813      	ldr	r3, [r2, #0]
 800c3b8:	1c58      	adds	r0, r3, #1
 800c3ba:	6010      	str	r0, [r2, #0]
 800c3bc:	7019      	strb	r1, [r3, #0]
 800c3be:	4608      	mov	r0, r1
 800c3c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3c4:	4770      	bx	lr

0800c3c6 <__sfputs_r>:
 800c3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c8:	4606      	mov	r6, r0
 800c3ca:	460f      	mov	r7, r1
 800c3cc:	4614      	mov	r4, r2
 800c3ce:	18d5      	adds	r5, r2, r3
 800c3d0:	42ac      	cmp	r4, r5
 800c3d2:	d101      	bne.n	800c3d8 <__sfputs_r+0x12>
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	e007      	b.n	800c3e8 <__sfputs_r+0x22>
 800c3d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3dc:	463a      	mov	r2, r7
 800c3de:	4630      	mov	r0, r6
 800c3e0:	f7ff ffda 	bl	800c398 <__sfputc_r>
 800c3e4:	1c43      	adds	r3, r0, #1
 800c3e6:	d1f3      	bne.n	800c3d0 <__sfputs_r+0xa>
 800c3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3ec <_vfiprintf_r>:
 800c3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f0:	460d      	mov	r5, r1
 800c3f2:	b09d      	sub	sp, #116	; 0x74
 800c3f4:	4614      	mov	r4, r2
 800c3f6:	4698      	mov	r8, r3
 800c3f8:	4606      	mov	r6, r0
 800c3fa:	b118      	cbz	r0, 800c404 <_vfiprintf_r+0x18>
 800c3fc:	6983      	ldr	r3, [r0, #24]
 800c3fe:	b90b      	cbnz	r3, 800c404 <_vfiprintf_r+0x18>
 800c400:	f7ff f924 	bl	800b64c <__sinit>
 800c404:	4b89      	ldr	r3, [pc, #548]	; (800c62c <_vfiprintf_r+0x240>)
 800c406:	429d      	cmp	r5, r3
 800c408:	d11b      	bne.n	800c442 <_vfiprintf_r+0x56>
 800c40a:	6875      	ldr	r5, [r6, #4]
 800c40c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c40e:	07d9      	lsls	r1, r3, #31
 800c410:	d405      	bmi.n	800c41e <_vfiprintf_r+0x32>
 800c412:	89ab      	ldrh	r3, [r5, #12]
 800c414:	059a      	lsls	r2, r3, #22
 800c416:	d402      	bmi.n	800c41e <_vfiprintf_r+0x32>
 800c418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c41a:	f7ff f9ba 	bl	800b792 <__retarget_lock_acquire_recursive>
 800c41e:	89ab      	ldrh	r3, [r5, #12]
 800c420:	071b      	lsls	r3, r3, #28
 800c422:	d501      	bpl.n	800c428 <_vfiprintf_r+0x3c>
 800c424:	692b      	ldr	r3, [r5, #16]
 800c426:	b9eb      	cbnz	r3, 800c464 <_vfiprintf_r+0x78>
 800c428:	4629      	mov	r1, r5
 800c42a:	4630      	mov	r0, r6
 800c42c:	f7fe f90c 	bl	800a648 <__swsetup_r>
 800c430:	b1c0      	cbz	r0, 800c464 <_vfiprintf_r+0x78>
 800c432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c434:	07dc      	lsls	r4, r3, #31
 800c436:	d50e      	bpl.n	800c456 <_vfiprintf_r+0x6a>
 800c438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c43c:	b01d      	add	sp, #116	; 0x74
 800c43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c442:	4b7b      	ldr	r3, [pc, #492]	; (800c630 <_vfiprintf_r+0x244>)
 800c444:	429d      	cmp	r5, r3
 800c446:	d101      	bne.n	800c44c <_vfiprintf_r+0x60>
 800c448:	68b5      	ldr	r5, [r6, #8]
 800c44a:	e7df      	b.n	800c40c <_vfiprintf_r+0x20>
 800c44c:	4b79      	ldr	r3, [pc, #484]	; (800c634 <_vfiprintf_r+0x248>)
 800c44e:	429d      	cmp	r5, r3
 800c450:	bf08      	it	eq
 800c452:	68f5      	ldreq	r5, [r6, #12]
 800c454:	e7da      	b.n	800c40c <_vfiprintf_r+0x20>
 800c456:	89ab      	ldrh	r3, [r5, #12]
 800c458:	0598      	lsls	r0, r3, #22
 800c45a:	d4ed      	bmi.n	800c438 <_vfiprintf_r+0x4c>
 800c45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c45e:	f7ff f999 	bl	800b794 <__retarget_lock_release_recursive>
 800c462:	e7e9      	b.n	800c438 <_vfiprintf_r+0x4c>
 800c464:	2300      	movs	r3, #0
 800c466:	9309      	str	r3, [sp, #36]	; 0x24
 800c468:	2320      	movs	r3, #32
 800c46a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c46e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c472:	2330      	movs	r3, #48	; 0x30
 800c474:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c638 <_vfiprintf_r+0x24c>
 800c478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c47c:	f04f 0901 	mov.w	r9, #1
 800c480:	4623      	mov	r3, r4
 800c482:	469a      	mov	sl, r3
 800c484:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c488:	b10a      	cbz	r2, 800c48e <_vfiprintf_r+0xa2>
 800c48a:	2a25      	cmp	r2, #37	; 0x25
 800c48c:	d1f9      	bne.n	800c482 <_vfiprintf_r+0x96>
 800c48e:	ebba 0b04 	subs.w	fp, sl, r4
 800c492:	d00b      	beq.n	800c4ac <_vfiprintf_r+0xc0>
 800c494:	465b      	mov	r3, fp
 800c496:	4622      	mov	r2, r4
 800c498:	4629      	mov	r1, r5
 800c49a:	4630      	mov	r0, r6
 800c49c:	f7ff ff93 	bl	800c3c6 <__sfputs_r>
 800c4a0:	3001      	adds	r0, #1
 800c4a2:	f000 80aa 	beq.w	800c5fa <_vfiprintf_r+0x20e>
 800c4a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4a8:	445a      	add	r2, fp
 800c4aa:	9209      	str	r2, [sp, #36]	; 0x24
 800c4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 80a2 	beq.w	800c5fa <_vfiprintf_r+0x20e>
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4c0:	f10a 0a01 	add.w	sl, sl, #1
 800c4c4:	9304      	str	r3, [sp, #16]
 800c4c6:	9307      	str	r3, [sp, #28]
 800c4c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4cc:	931a      	str	r3, [sp, #104]	; 0x68
 800c4ce:	4654      	mov	r4, sl
 800c4d0:	2205      	movs	r2, #5
 800c4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4d6:	4858      	ldr	r0, [pc, #352]	; (800c638 <_vfiprintf_r+0x24c>)
 800c4d8:	f7f3 fe82 	bl	80001e0 <memchr>
 800c4dc:	9a04      	ldr	r2, [sp, #16]
 800c4de:	b9d8      	cbnz	r0, 800c518 <_vfiprintf_r+0x12c>
 800c4e0:	06d1      	lsls	r1, r2, #27
 800c4e2:	bf44      	itt	mi
 800c4e4:	2320      	movmi	r3, #32
 800c4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4ea:	0713      	lsls	r3, r2, #28
 800c4ec:	bf44      	itt	mi
 800c4ee:	232b      	movmi	r3, #43	; 0x2b
 800c4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4fa:	d015      	beq.n	800c528 <_vfiprintf_r+0x13c>
 800c4fc:	9a07      	ldr	r2, [sp, #28]
 800c4fe:	4654      	mov	r4, sl
 800c500:	2000      	movs	r0, #0
 800c502:	f04f 0c0a 	mov.w	ip, #10
 800c506:	4621      	mov	r1, r4
 800c508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c50c:	3b30      	subs	r3, #48	; 0x30
 800c50e:	2b09      	cmp	r3, #9
 800c510:	d94e      	bls.n	800c5b0 <_vfiprintf_r+0x1c4>
 800c512:	b1b0      	cbz	r0, 800c542 <_vfiprintf_r+0x156>
 800c514:	9207      	str	r2, [sp, #28]
 800c516:	e014      	b.n	800c542 <_vfiprintf_r+0x156>
 800c518:	eba0 0308 	sub.w	r3, r0, r8
 800c51c:	fa09 f303 	lsl.w	r3, r9, r3
 800c520:	4313      	orrs	r3, r2
 800c522:	9304      	str	r3, [sp, #16]
 800c524:	46a2      	mov	sl, r4
 800c526:	e7d2      	b.n	800c4ce <_vfiprintf_r+0xe2>
 800c528:	9b03      	ldr	r3, [sp, #12]
 800c52a:	1d19      	adds	r1, r3, #4
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	9103      	str	r1, [sp, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	bfbb      	ittet	lt
 800c534:	425b      	neglt	r3, r3
 800c536:	f042 0202 	orrlt.w	r2, r2, #2
 800c53a:	9307      	strge	r3, [sp, #28]
 800c53c:	9307      	strlt	r3, [sp, #28]
 800c53e:	bfb8      	it	lt
 800c540:	9204      	strlt	r2, [sp, #16]
 800c542:	7823      	ldrb	r3, [r4, #0]
 800c544:	2b2e      	cmp	r3, #46	; 0x2e
 800c546:	d10c      	bne.n	800c562 <_vfiprintf_r+0x176>
 800c548:	7863      	ldrb	r3, [r4, #1]
 800c54a:	2b2a      	cmp	r3, #42	; 0x2a
 800c54c:	d135      	bne.n	800c5ba <_vfiprintf_r+0x1ce>
 800c54e:	9b03      	ldr	r3, [sp, #12]
 800c550:	1d1a      	adds	r2, r3, #4
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	9203      	str	r2, [sp, #12]
 800c556:	2b00      	cmp	r3, #0
 800c558:	bfb8      	it	lt
 800c55a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c55e:	3402      	adds	r4, #2
 800c560:	9305      	str	r3, [sp, #20]
 800c562:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c648 <_vfiprintf_r+0x25c>
 800c566:	7821      	ldrb	r1, [r4, #0]
 800c568:	2203      	movs	r2, #3
 800c56a:	4650      	mov	r0, sl
 800c56c:	f7f3 fe38 	bl	80001e0 <memchr>
 800c570:	b140      	cbz	r0, 800c584 <_vfiprintf_r+0x198>
 800c572:	2340      	movs	r3, #64	; 0x40
 800c574:	eba0 000a 	sub.w	r0, r0, sl
 800c578:	fa03 f000 	lsl.w	r0, r3, r0
 800c57c:	9b04      	ldr	r3, [sp, #16]
 800c57e:	4303      	orrs	r3, r0
 800c580:	3401      	adds	r4, #1
 800c582:	9304      	str	r3, [sp, #16]
 800c584:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c588:	482c      	ldr	r0, [pc, #176]	; (800c63c <_vfiprintf_r+0x250>)
 800c58a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c58e:	2206      	movs	r2, #6
 800c590:	f7f3 fe26 	bl	80001e0 <memchr>
 800c594:	2800      	cmp	r0, #0
 800c596:	d03f      	beq.n	800c618 <_vfiprintf_r+0x22c>
 800c598:	4b29      	ldr	r3, [pc, #164]	; (800c640 <_vfiprintf_r+0x254>)
 800c59a:	bb1b      	cbnz	r3, 800c5e4 <_vfiprintf_r+0x1f8>
 800c59c:	9b03      	ldr	r3, [sp, #12]
 800c59e:	3307      	adds	r3, #7
 800c5a0:	f023 0307 	bic.w	r3, r3, #7
 800c5a4:	3308      	adds	r3, #8
 800c5a6:	9303      	str	r3, [sp, #12]
 800c5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5aa:	443b      	add	r3, r7
 800c5ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ae:	e767      	b.n	800c480 <_vfiprintf_r+0x94>
 800c5b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5b4:	460c      	mov	r4, r1
 800c5b6:	2001      	movs	r0, #1
 800c5b8:	e7a5      	b.n	800c506 <_vfiprintf_r+0x11a>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	3401      	adds	r4, #1
 800c5be:	9305      	str	r3, [sp, #20]
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	f04f 0c0a 	mov.w	ip, #10
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5cc:	3a30      	subs	r2, #48	; 0x30
 800c5ce:	2a09      	cmp	r2, #9
 800c5d0:	d903      	bls.n	800c5da <_vfiprintf_r+0x1ee>
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d0c5      	beq.n	800c562 <_vfiprintf_r+0x176>
 800c5d6:	9105      	str	r1, [sp, #20]
 800c5d8:	e7c3      	b.n	800c562 <_vfiprintf_r+0x176>
 800c5da:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5de:	4604      	mov	r4, r0
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	e7f0      	b.n	800c5c6 <_vfiprintf_r+0x1da>
 800c5e4:	ab03      	add	r3, sp, #12
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	462a      	mov	r2, r5
 800c5ea:	4b16      	ldr	r3, [pc, #88]	; (800c644 <_vfiprintf_r+0x258>)
 800c5ec:	a904      	add	r1, sp, #16
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	f7fd fbee 	bl	8009dd0 <_printf_float>
 800c5f4:	4607      	mov	r7, r0
 800c5f6:	1c78      	adds	r0, r7, #1
 800c5f8:	d1d6      	bne.n	800c5a8 <_vfiprintf_r+0x1bc>
 800c5fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5fc:	07d9      	lsls	r1, r3, #31
 800c5fe:	d405      	bmi.n	800c60c <_vfiprintf_r+0x220>
 800c600:	89ab      	ldrh	r3, [r5, #12]
 800c602:	059a      	lsls	r2, r3, #22
 800c604:	d402      	bmi.n	800c60c <_vfiprintf_r+0x220>
 800c606:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c608:	f7ff f8c4 	bl	800b794 <__retarget_lock_release_recursive>
 800c60c:	89ab      	ldrh	r3, [r5, #12]
 800c60e:	065b      	lsls	r3, r3, #25
 800c610:	f53f af12 	bmi.w	800c438 <_vfiprintf_r+0x4c>
 800c614:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c616:	e711      	b.n	800c43c <_vfiprintf_r+0x50>
 800c618:	ab03      	add	r3, sp, #12
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	462a      	mov	r2, r5
 800c61e:	4b09      	ldr	r3, [pc, #36]	; (800c644 <_vfiprintf_r+0x258>)
 800c620:	a904      	add	r1, sp, #16
 800c622:	4630      	mov	r0, r6
 800c624:	f7fd fe78 	bl	800a318 <_printf_i>
 800c628:	e7e4      	b.n	800c5f4 <_vfiprintf_r+0x208>
 800c62a:	bf00      	nop
 800c62c:	0800f9f8 	.word	0x0800f9f8
 800c630:	0800fa18 	.word	0x0800fa18
 800c634:	0800f9d8 	.word	0x0800f9d8
 800c638:	0800fb94 	.word	0x0800fb94
 800c63c:	0800fb9e 	.word	0x0800fb9e
 800c640:	08009dd1 	.word	0x08009dd1
 800c644:	0800c3c7 	.word	0x0800c3c7
 800c648:	0800fb9a 	.word	0x0800fb9a

0800c64c <_sbrk_r>:
 800c64c:	b538      	push	{r3, r4, r5, lr}
 800c64e:	4d06      	ldr	r5, [pc, #24]	; (800c668 <_sbrk_r+0x1c>)
 800c650:	2300      	movs	r3, #0
 800c652:	4604      	mov	r4, r0
 800c654:	4608      	mov	r0, r1
 800c656:	602b      	str	r3, [r5, #0]
 800c658:	f7f6 fd00 	bl	800305c <_sbrk>
 800c65c:	1c43      	adds	r3, r0, #1
 800c65e:	d102      	bne.n	800c666 <_sbrk_r+0x1a>
 800c660:	682b      	ldr	r3, [r5, #0]
 800c662:	b103      	cbz	r3, 800c666 <_sbrk_r+0x1a>
 800c664:	6023      	str	r3, [r4, #0]
 800c666:	bd38      	pop	{r3, r4, r5, pc}
 800c668:	20004a44 	.word	0x20004a44

0800c66c <__sread>:
 800c66c:	b510      	push	{r4, lr}
 800c66e:	460c      	mov	r4, r1
 800c670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c674:	f000 f922 	bl	800c8bc <_read_r>
 800c678:	2800      	cmp	r0, #0
 800c67a:	bfab      	itete	ge
 800c67c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c67e:	89a3      	ldrhlt	r3, [r4, #12]
 800c680:	181b      	addge	r3, r3, r0
 800c682:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c686:	bfac      	ite	ge
 800c688:	6563      	strge	r3, [r4, #84]	; 0x54
 800c68a:	81a3      	strhlt	r3, [r4, #12]
 800c68c:	bd10      	pop	{r4, pc}

0800c68e <__swrite>:
 800c68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c692:	461f      	mov	r7, r3
 800c694:	898b      	ldrh	r3, [r1, #12]
 800c696:	05db      	lsls	r3, r3, #23
 800c698:	4605      	mov	r5, r0
 800c69a:	460c      	mov	r4, r1
 800c69c:	4616      	mov	r6, r2
 800c69e:	d505      	bpl.n	800c6ac <__swrite+0x1e>
 800c6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a4:	2302      	movs	r3, #2
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f000 f898 	bl	800c7dc <_lseek_r>
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6b6:	81a3      	strh	r3, [r4, #12]
 800c6b8:	4632      	mov	r2, r6
 800c6ba:	463b      	mov	r3, r7
 800c6bc:	4628      	mov	r0, r5
 800c6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c2:	f000 b817 	b.w	800c6f4 <_write_r>

0800c6c6 <__sseek>:
 800c6c6:	b510      	push	{r4, lr}
 800c6c8:	460c      	mov	r4, r1
 800c6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ce:	f000 f885 	bl	800c7dc <_lseek_r>
 800c6d2:	1c43      	adds	r3, r0, #1
 800c6d4:	89a3      	ldrh	r3, [r4, #12]
 800c6d6:	bf15      	itete	ne
 800c6d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c6da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c6de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c6e2:	81a3      	strheq	r3, [r4, #12]
 800c6e4:	bf18      	it	ne
 800c6e6:	81a3      	strhne	r3, [r4, #12]
 800c6e8:	bd10      	pop	{r4, pc}

0800c6ea <__sclose>:
 800c6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ee:	f000 b831 	b.w	800c754 <_close_r>
	...

0800c6f4 <_write_r>:
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	4d07      	ldr	r5, [pc, #28]	; (800c714 <_write_r+0x20>)
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	4608      	mov	r0, r1
 800c6fc:	4611      	mov	r1, r2
 800c6fe:	2200      	movs	r2, #0
 800c700:	602a      	str	r2, [r5, #0]
 800c702:	461a      	mov	r2, r3
 800c704:	f7f6 fc59 	bl	8002fba <_write>
 800c708:	1c43      	adds	r3, r0, #1
 800c70a:	d102      	bne.n	800c712 <_write_r+0x1e>
 800c70c:	682b      	ldr	r3, [r5, #0]
 800c70e:	b103      	cbz	r3, 800c712 <_write_r+0x1e>
 800c710:	6023      	str	r3, [r4, #0]
 800c712:	bd38      	pop	{r3, r4, r5, pc}
 800c714:	20004a44 	.word	0x20004a44

0800c718 <__assert_func>:
 800c718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c71a:	4614      	mov	r4, r2
 800c71c:	461a      	mov	r2, r3
 800c71e:	4b09      	ldr	r3, [pc, #36]	; (800c744 <__assert_func+0x2c>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4605      	mov	r5, r0
 800c724:	68d8      	ldr	r0, [r3, #12]
 800c726:	b14c      	cbz	r4, 800c73c <__assert_func+0x24>
 800c728:	4b07      	ldr	r3, [pc, #28]	; (800c748 <__assert_func+0x30>)
 800c72a:	9100      	str	r1, [sp, #0]
 800c72c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c730:	4906      	ldr	r1, [pc, #24]	; (800c74c <__assert_func+0x34>)
 800c732:	462b      	mov	r3, r5
 800c734:	f000 f81e 	bl	800c774 <fiprintf>
 800c738:	f000 f8df 	bl	800c8fa <abort>
 800c73c:	4b04      	ldr	r3, [pc, #16]	; (800c750 <__assert_func+0x38>)
 800c73e:	461c      	mov	r4, r3
 800c740:	e7f3      	b.n	800c72a <__assert_func+0x12>
 800c742:	bf00      	nop
 800c744:	20000034 	.word	0x20000034
 800c748:	0800fba5 	.word	0x0800fba5
 800c74c:	0800fbb2 	.word	0x0800fbb2
 800c750:	0800fbe0 	.word	0x0800fbe0

0800c754 <_close_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	4d06      	ldr	r5, [pc, #24]	; (800c770 <_close_r+0x1c>)
 800c758:	2300      	movs	r3, #0
 800c75a:	4604      	mov	r4, r0
 800c75c:	4608      	mov	r0, r1
 800c75e:	602b      	str	r3, [r5, #0]
 800c760:	f7f6 fc47 	bl	8002ff2 <_close>
 800c764:	1c43      	adds	r3, r0, #1
 800c766:	d102      	bne.n	800c76e <_close_r+0x1a>
 800c768:	682b      	ldr	r3, [r5, #0]
 800c76a:	b103      	cbz	r3, 800c76e <_close_r+0x1a>
 800c76c:	6023      	str	r3, [r4, #0]
 800c76e:	bd38      	pop	{r3, r4, r5, pc}
 800c770:	20004a44 	.word	0x20004a44

0800c774 <fiprintf>:
 800c774:	b40e      	push	{r1, r2, r3}
 800c776:	b503      	push	{r0, r1, lr}
 800c778:	4601      	mov	r1, r0
 800c77a:	ab03      	add	r3, sp, #12
 800c77c:	4805      	ldr	r0, [pc, #20]	; (800c794 <fiprintf+0x20>)
 800c77e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c782:	6800      	ldr	r0, [r0, #0]
 800c784:	9301      	str	r3, [sp, #4]
 800c786:	f7ff fe31 	bl	800c3ec <_vfiprintf_r>
 800c78a:	b002      	add	sp, #8
 800c78c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c790:	b003      	add	sp, #12
 800c792:	4770      	bx	lr
 800c794:	20000034 	.word	0x20000034

0800c798 <_fstat_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4d07      	ldr	r5, [pc, #28]	; (800c7b8 <_fstat_r+0x20>)
 800c79c:	2300      	movs	r3, #0
 800c79e:	4604      	mov	r4, r0
 800c7a0:	4608      	mov	r0, r1
 800c7a2:	4611      	mov	r1, r2
 800c7a4:	602b      	str	r3, [r5, #0]
 800c7a6:	f7f6 fc30 	bl	800300a <_fstat>
 800c7aa:	1c43      	adds	r3, r0, #1
 800c7ac:	d102      	bne.n	800c7b4 <_fstat_r+0x1c>
 800c7ae:	682b      	ldr	r3, [r5, #0]
 800c7b0:	b103      	cbz	r3, 800c7b4 <_fstat_r+0x1c>
 800c7b2:	6023      	str	r3, [r4, #0]
 800c7b4:	bd38      	pop	{r3, r4, r5, pc}
 800c7b6:	bf00      	nop
 800c7b8:	20004a44 	.word	0x20004a44

0800c7bc <_isatty_r>:
 800c7bc:	b538      	push	{r3, r4, r5, lr}
 800c7be:	4d06      	ldr	r5, [pc, #24]	; (800c7d8 <_isatty_r+0x1c>)
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	4604      	mov	r4, r0
 800c7c4:	4608      	mov	r0, r1
 800c7c6:	602b      	str	r3, [r5, #0]
 800c7c8:	f7f6 fc2f 	bl	800302a <_isatty>
 800c7cc:	1c43      	adds	r3, r0, #1
 800c7ce:	d102      	bne.n	800c7d6 <_isatty_r+0x1a>
 800c7d0:	682b      	ldr	r3, [r5, #0]
 800c7d2:	b103      	cbz	r3, 800c7d6 <_isatty_r+0x1a>
 800c7d4:	6023      	str	r3, [r4, #0]
 800c7d6:	bd38      	pop	{r3, r4, r5, pc}
 800c7d8:	20004a44 	.word	0x20004a44

0800c7dc <_lseek_r>:
 800c7dc:	b538      	push	{r3, r4, r5, lr}
 800c7de:	4d07      	ldr	r5, [pc, #28]	; (800c7fc <_lseek_r+0x20>)
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	4608      	mov	r0, r1
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	602a      	str	r2, [r5, #0]
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	f7f6 fc28 	bl	8003040 <_lseek>
 800c7f0:	1c43      	adds	r3, r0, #1
 800c7f2:	d102      	bne.n	800c7fa <_lseek_r+0x1e>
 800c7f4:	682b      	ldr	r3, [r5, #0]
 800c7f6:	b103      	cbz	r3, 800c7fa <_lseek_r+0x1e>
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	bd38      	pop	{r3, r4, r5, pc}
 800c7fc:	20004a44 	.word	0x20004a44

0800c800 <__ascii_mbtowc>:
 800c800:	b082      	sub	sp, #8
 800c802:	b901      	cbnz	r1, 800c806 <__ascii_mbtowc+0x6>
 800c804:	a901      	add	r1, sp, #4
 800c806:	b142      	cbz	r2, 800c81a <__ascii_mbtowc+0x1a>
 800c808:	b14b      	cbz	r3, 800c81e <__ascii_mbtowc+0x1e>
 800c80a:	7813      	ldrb	r3, [r2, #0]
 800c80c:	600b      	str	r3, [r1, #0]
 800c80e:	7812      	ldrb	r2, [r2, #0]
 800c810:	1e10      	subs	r0, r2, #0
 800c812:	bf18      	it	ne
 800c814:	2001      	movne	r0, #1
 800c816:	b002      	add	sp, #8
 800c818:	4770      	bx	lr
 800c81a:	4610      	mov	r0, r2
 800c81c:	e7fb      	b.n	800c816 <__ascii_mbtowc+0x16>
 800c81e:	f06f 0001 	mvn.w	r0, #1
 800c822:	e7f8      	b.n	800c816 <__ascii_mbtowc+0x16>

0800c824 <memmove>:
 800c824:	4288      	cmp	r0, r1
 800c826:	b510      	push	{r4, lr}
 800c828:	eb01 0402 	add.w	r4, r1, r2
 800c82c:	d902      	bls.n	800c834 <memmove+0x10>
 800c82e:	4284      	cmp	r4, r0
 800c830:	4623      	mov	r3, r4
 800c832:	d807      	bhi.n	800c844 <memmove+0x20>
 800c834:	1e43      	subs	r3, r0, #1
 800c836:	42a1      	cmp	r1, r4
 800c838:	d008      	beq.n	800c84c <memmove+0x28>
 800c83a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c83e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c842:	e7f8      	b.n	800c836 <memmove+0x12>
 800c844:	4402      	add	r2, r0
 800c846:	4601      	mov	r1, r0
 800c848:	428a      	cmp	r2, r1
 800c84a:	d100      	bne.n	800c84e <memmove+0x2a>
 800c84c:	bd10      	pop	{r4, pc}
 800c84e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c856:	e7f7      	b.n	800c848 <memmove+0x24>

0800c858 <__malloc_lock>:
 800c858:	4801      	ldr	r0, [pc, #4]	; (800c860 <__malloc_lock+0x8>)
 800c85a:	f7fe bf9a 	b.w	800b792 <__retarget_lock_acquire_recursive>
 800c85e:	bf00      	nop
 800c860:	20004a3c 	.word	0x20004a3c

0800c864 <__malloc_unlock>:
 800c864:	4801      	ldr	r0, [pc, #4]	; (800c86c <__malloc_unlock+0x8>)
 800c866:	f7fe bf95 	b.w	800b794 <__retarget_lock_release_recursive>
 800c86a:	bf00      	nop
 800c86c:	20004a3c 	.word	0x20004a3c

0800c870 <_realloc_r>:
 800c870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c872:	4607      	mov	r7, r0
 800c874:	4614      	mov	r4, r2
 800c876:	460e      	mov	r6, r1
 800c878:	b921      	cbnz	r1, 800c884 <_realloc_r+0x14>
 800c87a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c87e:	4611      	mov	r1, r2
 800c880:	f7ff bbd4 	b.w	800c02c <_malloc_r>
 800c884:	b922      	cbnz	r2, 800c890 <_realloc_r+0x20>
 800c886:	f7ff fb81 	bl	800bf8c <_free_r>
 800c88a:	4625      	mov	r5, r4
 800c88c:	4628      	mov	r0, r5
 800c88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c890:	f000 f83a 	bl	800c908 <_malloc_usable_size_r>
 800c894:	42a0      	cmp	r0, r4
 800c896:	d20f      	bcs.n	800c8b8 <_realloc_r+0x48>
 800c898:	4621      	mov	r1, r4
 800c89a:	4638      	mov	r0, r7
 800c89c:	f7ff fbc6 	bl	800c02c <_malloc_r>
 800c8a0:	4605      	mov	r5, r0
 800c8a2:	2800      	cmp	r0, #0
 800c8a4:	d0f2      	beq.n	800c88c <_realloc_r+0x1c>
 800c8a6:	4631      	mov	r1, r6
 800c8a8:	4622      	mov	r2, r4
 800c8aa:	f7fd f9db 	bl	8009c64 <memcpy>
 800c8ae:	4631      	mov	r1, r6
 800c8b0:	4638      	mov	r0, r7
 800c8b2:	f7ff fb6b 	bl	800bf8c <_free_r>
 800c8b6:	e7e9      	b.n	800c88c <_realloc_r+0x1c>
 800c8b8:	4635      	mov	r5, r6
 800c8ba:	e7e7      	b.n	800c88c <_realloc_r+0x1c>

0800c8bc <_read_r>:
 800c8bc:	b538      	push	{r3, r4, r5, lr}
 800c8be:	4d07      	ldr	r5, [pc, #28]	; (800c8dc <_read_r+0x20>)
 800c8c0:	4604      	mov	r4, r0
 800c8c2:	4608      	mov	r0, r1
 800c8c4:	4611      	mov	r1, r2
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	602a      	str	r2, [r5, #0]
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	f7f6 fb58 	bl	8002f80 <_read>
 800c8d0:	1c43      	adds	r3, r0, #1
 800c8d2:	d102      	bne.n	800c8da <_read_r+0x1e>
 800c8d4:	682b      	ldr	r3, [r5, #0]
 800c8d6:	b103      	cbz	r3, 800c8da <_read_r+0x1e>
 800c8d8:	6023      	str	r3, [r4, #0]
 800c8da:	bd38      	pop	{r3, r4, r5, pc}
 800c8dc:	20004a44 	.word	0x20004a44

0800c8e0 <__ascii_wctomb>:
 800c8e0:	b149      	cbz	r1, 800c8f6 <__ascii_wctomb+0x16>
 800c8e2:	2aff      	cmp	r2, #255	; 0xff
 800c8e4:	bf85      	ittet	hi
 800c8e6:	238a      	movhi	r3, #138	; 0x8a
 800c8e8:	6003      	strhi	r3, [r0, #0]
 800c8ea:	700a      	strbls	r2, [r1, #0]
 800c8ec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c8f0:	bf98      	it	ls
 800c8f2:	2001      	movls	r0, #1
 800c8f4:	4770      	bx	lr
 800c8f6:	4608      	mov	r0, r1
 800c8f8:	4770      	bx	lr

0800c8fa <abort>:
 800c8fa:	b508      	push	{r3, lr}
 800c8fc:	2006      	movs	r0, #6
 800c8fe:	f000 f833 	bl	800c968 <raise>
 800c902:	2001      	movs	r0, #1
 800c904:	f7f6 fb32 	bl	8002f6c <_exit>

0800c908 <_malloc_usable_size_r>:
 800c908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c90c:	1f18      	subs	r0, r3, #4
 800c90e:	2b00      	cmp	r3, #0
 800c910:	bfbc      	itt	lt
 800c912:	580b      	ldrlt	r3, [r1, r0]
 800c914:	18c0      	addlt	r0, r0, r3
 800c916:	4770      	bx	lr

0800c918 <_raise_r>:
 800c918:	291f      	cmp	r1, #31
 800c91a:	b538      	push	{r3, r4, r5, lr}
 800c91c:	4604      	mov	r4, r0
 800c91e:	460d      	mov	r5, r1
 800c920:	d904      	bls.n	800c92c <_raise_r+0x14>
 800c922:	2316      	movs	r3, #22
 800c924:	6003      	str	r3, [r0, #0]
 800c926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c92a:	bd38      	pop	{r3, r4, r5, pc}
 800c92c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c92e:	b112      	cbz	r2, 800c936 <_raise_r+0x1e>
 800c930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c934:	b94b      	cbnz	r3, 800c94a <_raise_r+0x32>
 800c936:	4620      	mov	r0, r4
 800c938:	f000 f830 	bl	800c99c <_getpid_r>
 800c93c:	462a      	mov	r2, r5
 800c93e:	4601      	mov	r1, r0
 800c940:	4620      	mov	r0, r4
 800c942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c946:	f000 b817 	b.w	800c978 <_kill_r>
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d00a      	beq.n	800c964 <_raise_r+0x4c>
 800c94e:	1c59      	adds	r1, r3, #1
 800c950:	d103      	bne.n	800c95a <_raise_r+0x42>
 800c952:	2316      	movs	r3, #22
 800c954:	6003      	str	r3, [r0, #0]
 800c956:	2001      	movs	r0, #1
 800c958:	e7e7      	b.n	800c92a <_raise_r+0x12>
 800c95a:	2400      	movs	r4, #0
 800c95c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c960:	4628      	mov	r0, r5
 800c962:	4798      	blx	r3
 800c964:	2000      	movs	r0, #0
 800c966:	e7e0      	b.n	800c92a <_raise_r+0x12>

0800c968 <raise>:
 800c968:	4b02      	ldr	r3, [pc, #8]	; (800c974 <raise+0xc>)
 800c96a:	4601      	mov	r1, r0
 800c96c:	6818      	ldr	r0, [r3, #0]
 800c96e:	f7ff bfd3 	b.w	800c918 <_raise_r>
 800c972:	bf00      	nop
 800c974:	20000034 	.word	0x20000034

0800c978 <_kill_r>:
 800c978:	b538      	push	{r3, r4, r5, lr}
 800c97a:	4d07      	ldr	r5, [pc, #28]	; (800c998 <_kill_r+0x20>)
 800c97c:	2300      	movs	r3, #0
 800c97e:	4604      	mov	r4, r0
 800c980:	4608      	mov	r0, r1
 800c982:	4611      	mov	r1, r2
 800c984:	602b      	str	r3, [r5, #0]
 800c986:	f7f6 fae1 	bl	8002f4c <_kill>
 800c98a:	1c43      	adds	r3, r0, #1
 800c98c:	d102      	bne.n	800c994 <_kill_r+0x1c>
 800c98e:	682b      	ldr	r3, [r5, #0]
 800c990:	b103      	cbz	r3, 800c994 <_kill_r+0x1c>
 800c992:	6023      	str	r3, [r4, #0]
 800c994:	bd38      	pop	{r3, r4, r5, pc}
 800c996:	bf00      	nop
 800c998:	20004a44 	.word	0x20004a44

0800c99c <_getpid_r>:
 800c99c:	f7f6 bace 	b.w	8002f3c <_getpid>

0800c9a0 <ceill>:
 800c9a0:	f000 b802 	b.w	800c9a8 <ceil>
 800c9a4:	0000      	movs	r0, r0
	...

0800c9a8 <ceil>:
 800c9a8:	ec51 0b10 	vmov	r0, r1, d0
 800c9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c9b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c9b8:	2e13      	cmp	r6, #19
 800c9ba:	ee10 5a10 	vmov	r5, s0
 800c9be:	ee10 8a10 	vmov	r8, s0
 800c9c2:	460c      	mov	r4, r1
 800c9c4:	dc30      	bgt.n	800ca28 <ceil+0x80>
 800c9c6:	2e00      	cmp	r6, #0
 800c9c8:	da12      	bge.n	800c9f0 <ceil+0x48>
 800c9ca:	a335      	add	r3, pc, #212	; (adr r3, 800caa0 <ceil+0xf8>)
 800c9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d0:	f7f3 fc5c 	bl	800028c <__adddf3>
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	f7f4 f89e 	bl	8000b18 <__aeabi_dcmpgt>
 800c9dc:	b128      	cbz	r0, 800c9ea <ceil+0x42>
 800c9de:	2c00      	cmp	r4, #0
 800c9e0:	db55      	blt.n	800ca8e <ceil+0xe6>
 800c9e2:	432c      	orrs	r4, r5
 800c9e4:	d057      	beq.n	800ca96 <ceil+0xee>
 800c9e6:	4c30      	ldr	r4, [pc, #192]	; (800caa8 <ceil+0x100>)
 800c9e8:	2500      	movs	r5, #0
 800c9ea:	4621      	mov	r1, r4
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	e025      	b.n	800ca3c <ceil+0x94>
 800c9f0:	4f2e      	ldr	r7, [pc, #184]	; (800caac <ceil+0x104>)
 800c9f2:	4137      	asrs	r7, r6
 800c9f4:	ea01 0307 	and.w	r3, r1, r7
 800c9f8:	4303      	orrs	r3, r0
 800c9fa:	d01f      	beq.n	800ca3c <ceil+0x94>
 800c9fc:	a328      	add	r3, pc, #160	; (adr r3, 800caa0 <ceil+0xf8>)
 800c9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca02:	f7f3 fc43 	bl	800028c <__adddf3>
 800ca06:	2200      	movs	r2, #0
 800ca08:	2300      	movs	r3, #0
 800ca0a:	f7f4 f885 	bl	8000b18 <__aeabi_dcmpgt>
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d0eb      	beq.n	800c9ea <ceil+0x42>
 800ca12:	2c00      	cmp	r4, #0
 800ca14:	bfc2      	ittt	gt
 800ca16:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800ca1a:	fa43 f606 	asrgt.w	r6, r3, r6
 800ca1e:	19a4      	addgt	r4, r4, r6
 800ca20:	ea24 0407 	bic.w	r4, r4, r7
 800ca24:	2500      	movs	r5, #0
 800ca26:	e7e0      	b.n	800c9ea <ceil+0x42>
 800ca28:	2e33      	cmp	r6, #51	; 0x33
 800ca2a:	dd0b      	ble.n	800ca44 <ceil+0x9c>
 800ca2c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ca30:	d104      	bne.n	800ca3c <ceil+0x94>
 800ca32:	ee10 2a10 	vmov	r2, s0
 800ca36:	460b      	mov	r3, r1
 800ca38:	f7f3 fc28 	bl	800028c <__adddf3>
 800ca3c:	ec41 0b10 	vmov	d0, r0, r1
 800ca40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca44:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ca48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca4c:	fa23 f707 	lsr.w	r7, r3, r7
 800ca50:	4207      	tst	r7, r0
 800ca52:	d0f3      	beq.n	800ca3c <ceil+0x94>
 800ca54:	a312      	add	r3, pc, #72	; (adr r3, 800caa0 <ceil+0xf8>)
 800ca56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5a:	f7f3 fc17 	bl	800028c <__adddf3>
 800ca5e:	2200      	movs	r2, #0
 800ca60:	2300      	movs	r3, #0
 800ca62:	f7f4 f859 	bl	8000b18 <__aeabi_dcmpgt>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	d0bf      	beq.n	800c9ea <ceil+0x42>
 800ca6a:	2c00      	cmp	r4, #0
 800ca6c:	dd02      	ble.n	800ca74 <ceil+0xcc>
 800ca6e:	2e14      	cmp	r6, #20
 800ca70:	d103      	bne.n	800ca7a <ceil+0xd2>
 800ca72:	3401      	adds	r4, #1
 800ca74:	ea25 0507 	bic.w	r5, r5, r7
 800ca78:	e7b7      	b.n	800c9ea <ceil+0x42>
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ca80:	fa03 f606 	lsl.w	r6, r3, r6
 800ca84:	4435      	add	r5, r6
 800ca86:	4545      	cmp	r5, r8
 800ca88:	bf38      	it	cc
 800ca8a:	18e4      	addcc	r4, r4, r3
 800ca8c:	e7f2      	b.n	800ca74 <ceil+0xcc>
 800ca8e:	2500      	movs	r5, #0
 800ca90:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ca94:	e7a9      	b.n	800c9ea <ceil+0x42>
 800ca96:	4625      	mov	r5, r4
 800ca98:	e7a7      	b.n	800c9ea <ceil+0x42>
 800ca9a:	bf00      	nop
 800ca9c:	f3af 8000 	nop.w
 800caa0:	8800759c 	.word	0x8800759c
 800caa4:	7e37e43c 	.word	0x7e37e43c
 800caa8:	3ff00000 	.word	0x3ff00000
 800caac:	000fffff 	.word	0x000fffff

0800cab0 <round>:
 800cab0:	ec51 0b10 	vmov	r0, r1, d0
 800cab4:	b570      	push	{r4, r5, r6, lr}
 800cab6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800caba:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800cabe:	2c13      	cmp	r4, #19
 800cac0:	ee10 2a10 	vmov	r2, s0
 800cac4:	460b      	mov	r3, r1
 800cac6:	dc19      	bgt.n	800cafc <round+0x4c>
 800cac8:	2c00      	cmp	r4, #0
 800caca:	da09      	bge.n	800cae0 <round+0x30>
 800cacc:	3401      	adds	r4, #1
 800cace:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800cad2:	d103      	bne.n	800cadc <round+0x2c>
 800cad4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cad8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cadc:	2100      	movs	r1, #0
 800cade:	e028      	b.n	800cb32 <round+0x82>
 800cae0:	4d15      	ldr	r5, [pc, #84]	; (800cb38 <round+0x88>)
 800cae2:	4125      	asrs	r5, r4
 800cae4:	ea01 0605 	and.w	r6, r1, r5
 800cae8:	4332      	orrs	r2, r6
 800caea:	d00e      	beq.n	800cb0a <round+0x5a>
 800caec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800caf0:	fa42 f404 	asr.w	r4, r2, r4
 800caf4:	4423      	add	r3, r4
 800caf6:	ea23 0305 	bic.w	r3, r3, r5
 800cafa:	e7ef      	b.n	800cadc <round+0x2c>
 800cafc:	2c33      	cmp	r4, #51	; 0x33
 800cafe:	dd07      	ble.n	800cb10 <round+0x60>
 800cb00:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800cb04:	d101      	bne.n	800cb0a <round+0x5a>
 800cb06:	f7f3 fbc1 	bl	800028c <__adddf3>
 800cb0a:	ec41 0b10 	vmov	d0, r0, r1
 800cb0e:	bd70      	pop	{r4, r5, r6, pc}
 800cb10:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800cb14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cb18:	40f5      	lsrs	r5, r6
 800cb1a:	4228      	tst	r0, r5
 800cb1c:	d0f5      	beq.n	800cb0a <round+0x5a>
 800cb1e:	2101      	movs	r1, #1
 800cb20:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800cb24:	fa01 f404 	lsl.w	r4, r1, r4
 800cb28:	1912      	adds	r2, r2, r4
 800cb2a:	bf28      	it	cs
 800cb2c:	185b      	addcs	r3, r3, r1
 800cb2e:	ea22 0105 	bic.w	r1, r2, r5
 800cb32:	4608      	mov	r0, r1
 800cb34:	4619      	mov	r1, r3
 800cb36:	e7e8      	b.n	800cb0a <round+0x5a>
 800cb38:	000fffff 	.word	0x000fffff

0800cb3c <atan2>:
 800cb3c:	f000 b8c4 	b.w	800ccc8 <__ieee754_atan2>

0800cb40 <log>:
 800cb40:	b538      	push	{r3, r4, r5, lr}
 800cb42:	ed2d 8b02 	vpush	{d8}
 800cb46:	ec55 4b10 	vmov	r4, r5, d0
 800cb4a:	f000 f989 	bl	800ce60 <__ieee754_log>
 800cb4e:	4b1e      	ldr	r3, [pc, #120]	; (800cbc8 <log+0x88>)
 800cb50:	eeb0 8a40 	vmov.f32	s16, s0
 800cb54:	eef0 8a60 	vmov.f32	s17, s1
 800cb58:	f993 3000 	ldrsb.w	r3, [r3]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	d01a      	beq.n	800cb96 <log+0x56>
 800cb60:	4622      	mov	r2, r4
 800cb62:	462b      	mov	r3, r5
 800cb64:	4620      	mov	r0, r4
 800cb66:	4629      	mov	r1, r5
 800cb68:	f7f3 ffe0 	bl	8000b2c <__aeabi_dcmpun>
 800cb6c:	b998      	cbnz	r0, 800cb96 <log+0x56>
 800cb6e:	2200      	movs	r2, #0
 800cb70:	2300      	movs	r3, #0
 800cb72:	4620      	mov	r0, r4
 800cb74:	4629      	mov	r1, r5
 800cb76:	f7f3 ffcf 	bl	8000b18 <__aeabi_dcmpgt>
 800cb7a:	b960      	cbnz	r0, 800cb96 <log+0x56>
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	2300      	movs	r3, #0
 800cb80:	4620      	mov	r0, r4
 800cb82:	4629      	mov	r1, r5
 800cb84:	f7f3 ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb88:	b160      	cbz	r0, 800cba4 <log+0x64>
 800cb8a:	f7fd f841 	bl	8009c10 <__errno>
 800cb8e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800cbc0 <log+0x80>
 800cb92:	2322      	movs	r3, #34	; 0x22
 800cb94:	6003      	str	r3, [r0, #0]
 800cb96:	eeb0 0a48 	vmov.f32	s0, s16
 800cb9a:	eef0 0a68 	vmov.f32	s1, s17
 800cb9e:	ecbd 8b02 	vpop	{d8}
 800cba2:	bd38      	pop	{r3, r4, r5, pc}
 800cba4:	f7fd f834 	bl	8009c10 <__errno>
 800cba8:	ecbd 8b02 	vpop	{d8}
 800cbac:	2321      	movs	r3, #33	; 0x21
 800cbae:	6003      	str	r3, [r0, #0]
 800cbb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbb4:	4805      	ldr	r0, [pc, #20]	; (800cbcc <log+0x8c>)
 800cbb6:	f000 bdfb 	b.w	800d7b0 <nan>
 800cbba:	bf00      	nop
 800cbbc:	f3af 8000 	nop.w
 800cbc0:	00000000 	.word	0x00000000
 800cbc4:	fff00000 	.word	0xfff00000
 800cbc8:	20000204 	.word	0x20000204
 800cbcc:	0800fbe0 	.word	0x0800fbe0

0800cbd0 <log10>:
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	ed2d 8b02 	vpush	{d8}
 800cbd6:	ec55 4b10 	vmov	r4, r5, d0
 800cbda:	f000 fafd 	bl	800d1d8 <__ieee754_log10>
 800cbde:	4b1e      	ldr	r3, [pc, #120]	; (800cc58 <log10+0x88>)
 800cbe0:	eeb0 8a40 	vmov.f32	s16, s0
 800cbe4:	eef0 8a60 	vmov.f32	s17, s1
 800cbe8:	f993 3000 	ldrsb.w	r3, [r3]
 800cbec:	3301      	adds	r3, #1
 800cbee:	d01a      	beq.n	800cc26 <log10+0x56>
 800cbf0:	4622      	mov	r2, r4
 800cbf2:	462b      	mov	r3, r5
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	f7f3 ff98 	bl	8000b2c <__aeabi_dcmpun>
 800cbfc:	b998      	cbnz	r0, 800cc26 <log10+0x56>
 800cbfe:	2200      	movs	r2, #0
 800cc00:	2300      	movs	r3, #0
 800cc02:	4620      	mov	r0, r4
 800cc04:	4629      	mov	r1, r5
 800cc06:	f7f3 ff73 	bl	8000af0 <__aeabi_dcmple>
 800cc0a:	b160      	cbz	r0, 800cc26 <log10+0x56>
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	2300      	movs	r3, #0
 800cc10:	4620      	mov	r0, r4
 800cc12:	4629      	mov	r1, r5
 800cc14:	f7f3 ff58 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc18:	b160      	cbz	r0, 800cc34 <log10+0x64>
 800cc1a:	f7fc fff9 	bl	8009c10 <__errno>
 800cc1e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800cc50 <log10+0x80>
 800cc22:	2322      	movs	r3, #34	; 0x22
 800cc24:	6003      	str	r3, [r0, #0]
 800cc26:	eeb0 0a48 	vmov.f32	s0, s16
 800cc2a:	eef0 0a68 	vmov.f32	s1, s17
 800cc2e:	ecbd 8b02 	vpop	{d8}
 800cc32:	bd38      	pop	{r3, r4, r5, pc}
 800cc34:	f7fc ffec 	bl	8009c10 <__errno>
 800cc38:	ecbd 8b02 	vpop	{d8}
 800cc3c:	2321      	movs	r3, #33	; 0x21
 800cc3e:	6003      	str	r3, [r0, #0]
 800cc40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc44:	4805      	ldr	r0, [pc, #20]	; (800cc5c <log10+0x8c>)
 800cc46:	f000 bdb3 	b.w	800d7b0 <nan>
 800cc4a:	bf00      	nop
 800cc4c:	f3af 8000 	nop.w
 800cc50:	00000000 	.word	0x00000000
 800cc54:	fff00000 	.word	0xfff00000
 800cc58:	20000204 	.word	0x20000204
 800cc5c:	0800fbe0 	.word	0x0800fbe0

0800cc60 <sqrt>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	ed2d 8b02 	vpush	{d8}
 800cc66:	ec55 4b10 	vmov	r4, r5, d0
 800cc6a:	f000 fb3f 	bl	800d2ec <__ieee754_sqrt>
 800cc6e:	4b15      	ldr	r3, [pc, #84]	; (800ccc4 <sqrt+0x64>)
 800cc70:	eeb0 8a40 	vmov.f32	s16, s0
 800cc74:	eef0 8a60 	vmov.f32	s17, s1
 800cc78:	f993 3000 	ldrsb.w	r3, [r3]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	d019      	beq.n	800ccb4 <sqrt+0x54>
 800cc80:	4622      	mov	r2, r4
 800cc82:	462b      	mov	r3, r5
 800cc84:	4620      	mov	r0, r4
 800cc86:	4629      	mov	r1, r5
 800cc88:	f7f3 ff50 	bl	8000b2c <__aeabi_dcmpun>
 800cc8c:	b990      	cbnz	r0, 800ccb4 <sqrt+0x54>
 800cc8e:	2200      	movs	r2, #0
 800cc90:	2300      	movs	r3, #0
 800cc92:	4620      	mov	r0, r4
 800cc94:	4629      	mov	r1, r5
 800cc96:	f7f3 ff21 	bl	8000adc <__aeabi_dcmplt>
 800cc9a:	b158      	cbz	r0, 800ccb4 <sqrt+0x54>
 800cc9c:	f7fc ffb8 	bl	8009c10 <__errno>
 800cca0:	2321      	movs	r3, #33	; 0x21
 800cca2:	6003      	str	r3, [r0, #0]
 800cca4:	2200      	movs	r2, #0
 800cca6:	2300      	movs	r3, #0
 800cca8:	4610      	mov	r0, r2
 800ccaa:	4619      	mov	r1, r3
 800ccac:	f7f3 fdce 	bl	800084c <__aeabi_ddiv>
 800ccb0:	ec41 0b18 	vmov	d8, r0, r1
 800ccb4:	eeb0 0a48 	vmov.f32	s0, s16
 800ccb8:	eef0 0a68 	vmov.f32	s1, s17
 800ccbc:	ecbd 8b02 	vpop	{d8}
 800ccc0:	bd38      	pop	{r3, r4, r5, pc}
 800ccc2:	bf00      	nop
 800ccc4:	20000204 	.word	0x20000204

0800ccc8 <__ieee754_atan2>:
 800ccc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cccc:	ec57 6b11 	vmov	r6, r7, d1
 800ccd0:	4273      	negs	r3, r6
 800ccd2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ce58 <__ieee754_atan2+0x190>
 800ccd6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ccda:	4333      	orrs	r3, r6
 800ccdc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cce0:	4573      	cmp	r3, lr
 800cce2:	ec51 0b10 	vmov	r0, r1, d0
 800cce6:	ee11 8a10 	vmov	r8, s2
 800ccea:	d80a      	bhi.n	800cd02 <__ieee754_atan2+0x3a>
 800ccec:	4244      	negs	r4, r0
 800ccee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ccf2:	4304      	orrs	r4, r0
 800ccf4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ccf8:	4574      	cmp	r4, lr
 800ccfa:	ee10 9a10 	vmov	r9, s0
 800ccfe:	468c      	mov	ip, r1
 800cd00:	d907      	bls.n	800cd12 <__ieee754_atan2+0x4a>
 800cd02:	4632      	mov	r2, r6
 800cd04:	463b      	mov	r3, r7
 800cd06:	f7f3 fac1 	bl	800028c <__adddf3>
 800cd0a:	ec41 0b10 	vmov	d0, r0, r1
 800cd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd12:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800cd16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cd1a:	4334      	orrs	r4, r6
 800cd1c:	d103      	bne.n	800cd26 <__ieee754_atan2+0x5e>
 800cd1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd22:	f000 bb99 	b.w	800d458 <atan>
 800cd26:	17bc      	asrs	r4, r7, #30
 800cd28:	f004 0402 	and.w	r4, r4, #2
 800cd2c:	ea53 0909 	orrs.w	r9, r3, r9
 800cd30:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800cd34:	d107      	bne.n	800cd46 <__ieee754_atan2+0x7e>
 800cd36:	2c02      	cmp	r4, #2
 800cd38:	d060      	beq.n	800cdfc <__ieee754_atan2+0x134>
 800cd3a:	2c03      	cmp	r4, #3
 800cd3c:	d1e5      	bne.n	800cd0a <__ieee754_atan2+0x42>
 800cd3e:	a142      	add	r1, pc, #264	; (adr r1, 800ce48 <__ieee754_atan2+0x180>)
 800cd40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd44:	e7e1      	b.n	800cd0a <__ieee754_atan2+0x42>
 800cd46:	ea52 0808 	orrs.w	r8, r2, r8
 800cd4a:	d106      	bne.n	800cd5a <__ieee754_atan2+0x92>
 800cd4c:	f1bc 0f00 	cmp.w	ip, #0
 800cd50:	da5f      	bge.n	800ce12 <__ieee754_atan2+0x14a>
 800cd52:	a13f      	add	r1, pc, #252	; (adr r1, 800ce50 <__ieee754_atan2+0x188>)
 800cd54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd58:	e7d7      	b.n	800cd0a <__ieee754_atan2+0x42>
 800cd5a:	4572      	cmp	r2, lr
 800cd5c:	d10f      	bne.n	800cd7e <__ieee754_atan2+0xb6>
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800cd64:	d107      	bne.n	800cd76 <__ieee754_atan2+0xae>
 800cd66:	2c02      	cmp	r4, #2
 800cd68:	d84c      	bhi.n	800ce04 <__ieee754_atan2+0x13c>
 800cd6a:	4b35      	ldr	r3, [pc, #212]	; (800ce40 <__ieee754_atan2+0x178>)
 800cd6c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800cd70:	e9d4 0100 	ldrd	r0, r1, [r4]
 800cd74:	e7c9      	b.n	800cd0a <__ieee754_atan2+0x42>
 800cd76:	2c02      	cmp	r4, #2
 800cd78:	d848      	bhi.n	800ce0c <__ieee754_atan2+0x144>
 800cd7a:	4b32      	ldr	r3, [pc, #200]	; (800ce44 <__ieee754_atan2+0x17c>)
 800cd7c:	e7f6      	b.n	800cd6c <__ieee754_atan2+0xa4>
 800cd7e:	4573      	cmp	r3, lr
 800cd80:	d0e4      	beq.n	800cd4c <__ieee754_atan2+0x84>
 800cd82:	1a9b      	subs	r3, r3, r2
 800cd84:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800cd88:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cd8c:	da1e      	bge.n	800cdcc <__ieee754_atan2+0x104>
 800cd8e:	2f00      	cmp	r7, #0
 800cd90:	da01      	bge.n	800cd96 <__ieee754_atan2+0xce>
 800cd92:	323c      	adds	r2, #60	; 0x3c
 800cd94:	db1e      	blt.n	800cdd4 <__ieee754_atan2+0x10c>
 800cd96:	4632      	mov	r2, r6
 800cd98:	463b      	mov	r3, r7
 800cd9a:	f7f3 fd57 	bl	800084c <__aeabi_ddiv>
 800cd9e:	ec41 0b10 	vmov	d0, r0, r1
 800cda2:	f000 fcf9 	bl	800d798 <fabs>
 800cda6:	f000 fb57 	bl	800d458 <atan>
 800cdaa:	ec51 0b10 	vmov	r0, r1, d0
 800cdae:	2c01      	cmp	r4, #1
 800cdb0:	d013      	beq.n	800cdda <__ieee754_atan2+0x112>
 800cdb2:	2c02      	cmp	r4, #2
 800cdb4:	d015      	beq.n	800cde2 <__ieee754_atan2+0x11a>
 800cdb6:	2c00      	cmp	r4, #0
 800cdb8:	d0a7      	beq.n	800cd0a <__ieee754_atan2+0x42>
 800cdba:	a319      	add	r3, pc, #100	; (adr r3, 800ce20 <__ieee754_atan2+0x158>)
 800cdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc0:	f7f3 fa62 	bl	8000288 <__aeabi_dsub>
 800cdc4:	a318      	add	r3, pc, #96	; (adr r3, 800ce28 <__ieee754_atan2+0x160>)
 800cdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdca:	e014      	b.n	800cdf6 <__ieee754_atan2+0x12e>
 800cdcc:	a118      	add	r1, pc, #96	; (adr r1, 800ce30 <__ieee754_atan2+0x168>)
 800cdce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdd2:	e7ec      	b.n	800cdae <__ieee754_atan2+0xe6>
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	e7e9      	b.n	800cdae <__ieee754_atan2+0xe6>
 800cdda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdde:	4619      	mov	r1, r3
 800cde0:	e793      	b.n	800cd0a <__ieee754_atan2+0x42>
 800cde2:	a30f      	add	r3, pc, #60	; (adr r3, 800ce20 <__ieee754_atan2+0x158>)
 800cde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde8:	f7f3 fa4e 	bl	8000288 <__aeabi_dsub>
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	a10d      	add	r1, pc, #52	; (adr r1, 800ce28 <__ieee754_atan2+0x160>)
 800cdf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdf6:	f7f3 fa47 	bl	8000288 <__aeabi_dsub>
 800cdfa:	e786      	b.n	800cd0a <__ieee754_atan2+0x42>
 800cdfc:	a10a      	add	r1, pc, #40	; (adr r1, 800ce28 <__ieee754_atan2+0x160>)
 800cdfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce02:	e782      	b.n	800cd0a <__ieee754_atan2+0x42>
 800ce04:	a10c      	add	r1, pc, #48	; (adr r1, 800ce38 <__ieee754_atan2+0x170>)
 800ce06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce0a:	e77e      	b.n	800cd0a <__ieee754_atan2+0x42>
 800ce0c:	2000      	movs	r0, #0
 800ce0e:	2100      	movs	r1, #0
 800ce10:	e77b      	b.n	800cd0a <__ieee754_atan2+0x42>
 800ce12:	a107      	add	r1, pc, #28	; (adr r1, 800ce30 <__ieee754_atan2+0x168>)
 800ce14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce18:	e777      	b.n	800cd0a <__ieee754_atan2+0x42>
 800ce1a:	bf00      	nop
 800ce1c:	f3af 8000 	nop.w
 800ce20:	33145c07 	.word	0x33145c07
 800ce24:	3ca1a626 	.word	0x3ca1a626
 800ce28:	54442d18 	.word	0x54442d18
 800ce2c:	400921fb 	.word	0x400921fb
 800ce30:	54442d18 	.word	0x54442d18
 800ce34:	3ff921fb 	.word	0x3ff921fb
 800ce38:	54442d18 	.word	0x54442d18
 800ce3c:	3fe921fb 	.word	0x3fe921fb
 800ce40:	0800fcf0 	.word	0x0800fcf0
 800ce44:	0800fd08 	.word	0x0800fd08
 800ce48:	54442d18 	.word	0x54442d18
 800ce4c:	c00921fb 	.word	0xc00921fb
 800ce50:	54442d18 	.word	0x54442d18
 800ce54:	bff921fb 	.word	0xbff921fb
 800ce58:	7ff00000 	.word	0x7ff00000
 800ce5c:	00000000 	.word	0x00000000

0800ce60 <__ieee754_log>:
 800ce60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce64:	ec51 0b10 	vmov	r0, r1, d0
 800ce68:	ed2d 8b04 	vpush	{d8-d9}
 800ce6c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ce70:	b083      	sub	sp, #12
 800ce72:	460d      	mov	r5, r1
 800ce74:	da29      	bge.n	800ceca <__ieee754_log+0x6a>
 800ce76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce7a:	4303      	orrs	r3, r0
 800ce7c:	ee10 2a10 	vmov	r2, s0
 800ce80:	d10c      	bne.n	800ce9c <__ieee754_log+0x3c>
 800ce82:	49cf      	ldr	r1, [pc, #828]	; (800d1c0 <__ieee754_log+0x360>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	2300      	movs	r3, #0
 800ce88:	2000      	movs	r0, #0
 800ce8a:	f7f3 fcdf 	bl	800084c <__aeabi_ddiv>
 800ce8e:	ec41 0b10 	vmov	d0, r0, r1
 800ce92:	b003      	add	sp, #12
 800ce94:	ecbd 8b04 	vpop	{d8-d9}
 800ce98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce9c:	2900      	cmp	r1, #0
 800ce9e:	da05      	bge.n	800ceac <__ieee754_log+0x4c>
 800cea0:	460b      	mov	r3, r1
 800cea2:	f7f3 f9f1 	bl	8000288 <__aeabi_dsub>
 800cea6:	2200      	movs	r2, #0
 800cea8:	2300      	movs	r3, #0
 800ceaa:	e7ee      	b.n	800ce8a <__ieee754_log+0x2a>
 800ceac:	4bc5      	ldr	r3, [pc, #788]	; (800d1c4 <__ieee754_log+0x364>)
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f7f3 fba2 	bl	80005f8 <__aeabi_dmul>
 800ceb4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ceb8:	460d      	mov	r5, r1
 800ceba:	4ac3      	ldr	r2, [pc, #780]	; (800d1c8 <__ieee754_log+0x368>)
 800cebc:	4295      	cmp	r5, r2
 800cebe:	dd06      	ble.n	800cece <__ieee754_log+0x6e>
 800cec0:	4602      	mov	r2, r0
 800cec2:	460b      	mov	r3, r1
 800cec4:	f7f3 f9e2 	bl	800028c <__adddf3>
 800cec8:	e7e1      	b.n	800ce8e <__ieee754_log+0x2e>
 800ceca:	2300      	movs	r3, #0
 800cecc:	e7f5      	b.n	800ceba <__ieee754_log+0x5a>
 800cece:	152c      	asrs	r4, r5, #20
 800ced0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ced4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ced8:	441c      	add	r4, r3
 800ceda:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800cede:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800cee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cee6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ceea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ceee:	ea42 0105 	orr.w	r1, r2, r5
 800cef2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800cef6:	2200      	movs	r2, #0
 800cef8:	4bb4      	ldr	r3, [pc, #720]	; (800d1cc <__ieee754_log+0x36c>)
 800cefa:	f7f3 f9c5 	bl	8000288 <__aeabi_dsub>
 800cefe:	1cab      	adds	r3, r5, #2
 800cf00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf04:	2b02      	cmp	r3, #2
 800cf06:	4682      	mov	sl, r0
 800cf08:	468b      	mov	fp, r1
 800cf0a:	f04f 0200 	mov.w	r2, #0
 800cf0e:	dc53      	bgt.n	800cfb8 <__ieee754_log+0x158>
 800cf10:	2300      	movs	r3, #0
 800cf12:	f7f3 fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf16:	b1d0      	cbz	r0, 800cf4e <__ieee754_log+0xee>
 800cf18:	2c00      	cmp	r4, #0
 800cf1a:	f000 8122 	beq.w	800d162 <__ieee754_log+0x302>
 800cf1e:	4620      	mov	r0, r4
 800cf20:	f7f3 fb00 	bl	8000524 <__aeabi_i2d>
 800cf24:	a390      	add	r3, pc, #576	; (adr r3, 800d168 <__ieee754_log+0x308>)
 800cf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2a:	4606      	mov	r6, r0
 800cf2c:	460f      	mov	r7, r1
 800cf2e:	f7f3 fb63 	bl	80005f8 <__aeabi_dmul>
 800cf32:	a38f      	add	r3, pc, #572	; (adr r3, 800d170 <__ieee754_log+0x310>)
 800cf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf38:	4604      	mov	r4, r0
 800cf3a:	460d      	mov	r5, r1
 800cf3c:	4630      	mov	r0, r6
 800cf3e:	4639      	mov	r1, r7
 800cf40:	f7f3 fb5a 	bl	80005f8 <__aeabi_dmul>
 800cf44:	4602      	mov	r2, r0
 800cf46:	460b      	mov	r3, r1
 800cf48:	4620      	mov	r0, r4
 800cf4a:	4629      	mov	r1, r5
 800cf4c:	e7ba      	b.n	800cec4 <__ieee754_log+0x64>
 800cf4e:	a38a      	add	r3, pc, #552	; (adr r3, 800d178 <__ieee754_log+0x318>)
 800cf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf54:	4650      	mov	r0, sl
 800cf56:	4659      	mov	r1, fp
 800cf58:	f7f3 fb4e 	bl	80005f8 <__aeabi_dmul>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	460b      	mov	r3, r1
 800cf60:	2000      	movs	r0, #0
 800cf62:	499b      	ldr	r1, [pc, #620]	; (800d1d0 <__ieee754_log+0x370>)
 800cf64:	f7f3 f990 	bl	8000288 <__aeabi_dsub>
 800cf68:	4652      	mov	r2, sl
 800cf6a:	4606      	mov	r6, r0
 800cf6c:	460f      	mov	r7, r1
 800cf6e:	465b      	mov	r3, fp
 800cf70:	4650      	mov	r0, sl
 800cf72:	4659      	mov	r1, fp
 800cf74:	f7f3 fb40 	bl	80005f8 <__aeabi_dmul>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	4639      	mov	r1, r7
 800cf80:	f7f3 fb3a 	bl	80005f8 <__aeabi_dmul>
 800cf84:	4606      	mov	r6, r0
 800cf86:	460f      	mov	r7, r1
 800cf88:	b914      	cbnz	r4, 800cf90 <__ieee754_log+0x130>
 800cf8a:	4632      	mov	r2, r6
 800cf8c:	463b      	mov	r3, r7
 800cf8e:	e0a2      	b.n	800d0d6 <__ieee754_log+0x276>
 800cf90:	4620      	mov	r0, r4
 800cf92:	f7f3 fac7 	bl	8000524 <__aeabi_i2d>
 800cf96:	a374      	add	r3, pc, #464	; (adr r3, 800d168 <__ieee754_log+0x308>)
 800cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9c:	4680      	mov	r8, r0
 800cf9e:	4689      	mov	r9, r1
 800cfa0:	f7f3 fb2a 	bl	80005f8 <__aeabi_dmul>
 800cfa4:	a372      	add	r3, pc, #456	; (adr r3, 800d170 <__ieee754_log+0x310>)
 800cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfaa:	4604      	mov	r4, r0
 800cfac:	460d      	mov	r5, r1
 800cfae:	4640      	mov	r0, r8
 800cfb0:	4649      	mov	r1, r9
 800cfb2:	f7f3 fb21 	bl	80005f8 <__aeabi_dmul>
 800cfb6:	e0a7      	b.n	800d108 <__ieee754_log+0x2a8>
 800cfb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cfbc:	f7f3 f966 	bl	800028c <__adddf3>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	4650      	mov	r0, sl
 800cfc6:	4659      	mov	r1, fp
 800cfc8:	f7f3 fc40 	bl	800084c <__aeabi_ddiv>
 800cfcc:	ec41 0b18 	vmov	d8, r0, r1
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f7f3 faa7 	bl	8000524 <__aeabi_i2d>
 800cfd6:	ec53 2b18 	vmov	r2, r3, d8
 800cfda:	ec41 0b19 	vmov	d9, r0, r1
 800cfde:	ec51 0b18 	vmov	r0, r1, d8
 800cfe2:	f7f3 fb09 	bl	80005f8 <__aeabi_dmul>
 800cfe6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800cfea:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800cfee:	9301      	str	r3, [sp, #4]
 800cff0:	4602      	mov	r2, r0
 800cff2:	460b      	mov	r3, r1
 800cff4:	4680      	mov	r8, r0
 800cff6:	4689      	mov	r9, r1
 800cff8:	f7f3 fafe 	bl	80005f8 <__aeabi_dmul>
 800cffc:	a360      	add	r3, pc, #384	; (adr r3, 800d180 <__ieee754_log+0x320>)
 800cffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d002:	4606      	mov	r6, r0
 800d004:	460f      	mov	r7, r1
 800d006:	f7f3 faf7 	bl	80005f8 <__aeabi_dmul>
 800d00a:	a35f      	add	r3, pc, #380	; (adr r3, 800d188 <__ieee754_log+0x328>)
 800d00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d010:	f7f3 f93c 	bl	800028c <__adddf3>
 800d014:	4632      	mov	r2, r6
 800d016:	463b      	mov	r3, r7
 800d018:	f7f3 faee 	bl	80005f8 <__aeabi_dmul>
 800d01c:	a35c      	add	r3, pc, #368	; (adr r3, 800d190 <__ieee754_log+0x330>)
 800d01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d022:	f7f3 f933 	bl	800028c <__adddf3>
 800d026:	4632      	mov	r2, r6
 800d028:	463b      	mov	r3, r7
 800d02a:	f7f3 fae5 	bl	80005f8 <__aeabi_dmul>
 800d02e:	a35a      	add	r3, pc, #360	; (adr r3, 800d198 <__ieee754_log+0x338>)
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	f7f3 f92a 	bl	800028c <__adddf3>
 800d038:	4642      	mov	r2, r8
 800d03a:	464b      	mov	r3, r9
 800d03c:	f7f3 fadc 	bl	80005f8 <__aeabi_dmul>
 800d040:	a357      	add	r3, pc, #348	; (adr r3, 800d1a0 <__ieee754_log+0x340>)
 800d042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d046:	4680      	mov	r8, r0
 800d048:	4689      	mov	r9, r1
 800d04a:	4630      	mov	r0, r6
 800d04c:	4639      	mov	r1, r7
 800d04e:	f7f3 fad3 	bl	80005f8 <__aeabi_dmul>
 800d052:	a355      	add	r3, pc, #340	; (adr r3, 800d1a8 <__ieee754_log+0x348>)
 800d054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d058:	f7f3 f918 	bl	800028c <__adddf3>
 800d05c:	4632      	mov	r2, r6
 800d05e:	463b      	mov	r3, r7
 800d060:	f7f3 faca 	bl	80005f8 <__aeabi_dmul>
 800d064:	a352      	add	r3, pc, #328	; (adr r3, 800d1b0 <__ieee754_log+0x350>)
 800d066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06a:	f7f3 f90f 	bl	800028c <__adddf3>
 800d06e:	4632      	mov	r2, r6
 800d070:	463b      	mov	r3, r7
 800d072:	f7f3 fac1 	bl	80005f8 <__aeabi_dmul>
 800d076:	460b      	mov	r3, r1
 800d078:	4602      	mov	r2, r0
 800d07a:	4649      	mov	r1, r9
 800d07c:	4640      	mov	r0, r8
 800d07e:	f7f3 f905 	bl	800028c <__adddf3>
 800d082:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800d086:	9b01      	ldr	r3, [sp, #4]
 800d088:	3551      	adds	r5, #81	; 0x51
 800d08a:	431d      	orrs	r5, r3
 800d08c:	2d00      	cmp	r5, #0
 800d08e:	4680      	mov	r8, r0
 800d090:	4689      	mov	r9, r1
 800d092:	dd48      	ble.n	800d126 <__ieee754_log+0x2c6>
 800d094:	4b4e      	ldr	r3, [pc, #312]	; (800d1d0 <__ieee754_log+0x370>)
 800d096:	2200      	movs	r2, #0
 800d098:	4650      	mov	r0, sl
 800d09a:	4659      	mov	r1, fp
 800d09c:	f7f3 faac 	bl	80005f8 <__aeabi_dmul>
 800d0a0:	4652      	mov	r2, sl
 800d0a2:	465b      	mov	r3, fp
 800d0a4:	f7f3 faa8 	bl	80005f8 <__aeabi_dmul>
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	4606      	mov	r6, r0
 800d0ae:	460f      	mov	r7, r1
 800d0b0:	4640      	mov	r0, r8
 800d0b2:	4649      	mov	r1, r9
 800d0b4:	f7f3 f8ea 	bl	800028c <__adddf3>
 800d0b8:	ec53 2b18 	vmov	r2, r3, d8
 800d0bc:	f7f3 fa9c 	bl	80005f8 <__aeabi_dmul>
 800d0c0:	4680      	mov	r8, r0
 800d0c2:	4689      	mov	r9, r1
 800d0c4:	b964      	cbnz	r4, 800d0e0 <__ieee754_log+0x280>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	4639      	mov	r1, r7
 800d0ce:	f7f3 f8db 	bl	8000288 <__aeabi_dsub>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	4650      	mov	r0, sl
 800d0d8:	4659      	mov	r1, fp
 800d0da:	f7f3 f8d5 	bl	8000288 <__aeabi_dsub>
 800d0de:	e6d6      	b.n	800ce8e <__ieee754_log+0x2e>
 800d0e0:	a321      	add	r3, pc, #132	; (adr r3, 800d168 <__ieee754_log+0x308>)
 800d0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e6:	ec51 0b19 	vmov	r0, r1, d9
 800d0ea:	f7f3 fa85 	bl	80005f8 <__aeabi_dmul>
 800d0ee:	a320      	add	r3, pc, #128	; (adr r3, 800d170 <__ieee754_log+0x310>)
 800d0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	460d      	mov	r5, r1
 800d0f8:	ec51 0b19 	vmov	r0, r1, d9
 800d0fc:	f7f3 fa7c 	bl	80005f8 <__aeabi_dmul>
 800d100:	4642      	mov	r2, r8
 800d102:	464b      	mov	r3, r9
 800d104:	f7f3 f8c2 	bl	800028c <__adddf3>
 800d108:	4602      	mov	r2, r0
 800d10a:	460b      	mov	r3, r1
 800d10c:	4630      	mov	r0, r6
 800d10e:	4639      	mov	r1, r7
 800d110:	f7f3 f8ba 	bl	8000288 <__aeabi_dsub>
 800d114:	4652      	mov	r2, sl
 800d116:	465b      	mov	r3, fp
 800d118:	f7f3 f8b6 	bl	8000288 <__aeabi_dsub>
 800d11c:	4602      	mov	r2, r0
 800d11e:	460b      	mov	r3, r1
 800d120:	4620      	mov	r0, r4
 800d122:	4629      	mov	r1, r5
 800d124:	e7d9      	b.n	800d0da <__ieee754_log+0x27a>
 800d126:	4602      	mov	r2, r0
 800d128:	460b      	mov	r3, r1
 800d12a:	4650      	mov	r0, sl
 800d12c:	4659      	mov	r1, fp
 800d12e:	f7f3 f8ab 	bl	8000288 <__aeabi_dsub>
 800d132:	ec53 2b18 	vmov	r2, r3, d8
 800d136:	f7f3 fa5f 	bl	80005f8 <__aeabi_dmul>
 800d13a:	4606      	mov	r6, r0
 800d13c:	460f      	mov	r7, r1
 800d13e:	2c00      	cmp	r4, #0
 800d140:	f43f af23 	beq.w	800cf8a <__ieee754_log+0x12a>
 800d144:	a308      	add	r3, pc, #32	; (adr r3, 800d168 <__ieee754_log+0x308>)
 800d146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14a:	ec51 0b19 	vmov	r0, r1, d9
 800d14e:	f7f3 fa53 	bl	80005f8 <__aeabi_dmul>
 800d152:	a307      	add	r3, pc, #28	; (adr r3, 800d170 <__ieee754_log+0x310>)
 800d154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d158:	4604      	mov	r4, r0
 800d15a:	460d      	mov	r5, r1
 800d15c:	ec51 0b19 	vmov	r0, r1, d9
 800d160:	e727      	b.n	800cfb2 <__ieee754_log+0x152>
 800d162:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800d1b8 <__ieee754_log+0x358>
 800d166:	e694      	b.n	800ce92 <__ieee754_log+0x32>
 800d168:	fee00000 	.word	0xfee00000
 800d16c:	3fe62e42 	.word	0x3fe62e42
 800d170:	35793c76 	.word	0x35793c76
 800d174:	3dea39ef 	.word	0x3dea39ef
 800d178:	55555555 	.word	0x55555555
 800d17c:	3fd55555 	.word	0x3fd55555
 800d180:	df3e5244 	.word	0xdf3e5244
 800d184:	3fc2f112 	.word	0x3fc2f112
 800d188:	96cb03de 	.word	0x96cb03de
 800d18c:	3fc74664 	.word	0x3fc74664
 800d190:	94229359 	.word	0x94229359
 800d194:	3fd24924 	.word	0x3fd24924
 800d198:	55555593 	.word	0x55555593
 800d19c:	3fe55555 	.word	0x3fe55555
 800d1a0:	d078c69f 	.word	0xd078c69f
 800d1a4:	3fc39a09 	.word	0x3fc39a09
 800d1a8:	1d8e78af 	.word	0x1d8e78af
 800d1ac:	3fcc71c5 	.word	0x3fcc71c5
 800d1b0:	9997fa04 	.word	0x9997fa04
 800d1b4:	3fd99999 	.word	0x3fd99999
	...
 800d1c0:	c3500000 	.word	0xc3500000
 800d1c4:	43500000 	.word	0x43500000
 800d1c8:	7fefffff 	.word	0x7fefffff
 800d1cc:	3ff00000 	.word	0x3ff00000
 800d1d0:	3fe00000 	.word	0x3fe00000
 800d1d4:	00000000 	.word	0x00000000

0800d1d8 <__ieee754_log10>:
 800d1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1dc:	ec55 4b10 	vmov	r4, r5, d0
 800d1e0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800d1e4:	462b      	mov	r3, r5
 800d1e6:	da2f      	bge.n	800d248 <__ieee754_log10+0x70>
 800d1e8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800d1ec:	4322      	orrs	r2, r4
 800d1ee:	d109      	bne.n	800d204 <__ieee754_log10+0x2c>
 800d1f0:	493b      	ldr	r1, [pc, #236]	; (800d2e0 <__ieee754_log10+0x108>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	2000      	movs	r0, #0
 800d1f8:	f7f3 fb28 	bl	800084c <__aeabi_ddiv>
 800d1fc:	ec41 0b10 	vmov	d0, r0, r1
 800d200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d204:	2d00      	cmp	r5, #0
 800d206:	da09      	bge.n	800d21c <__ieee754_log10+0x44>
 800d208:	ee10 2a10 	vmov	r2, s0
 800d20c:	ee10 0a10 	vmov	r0, s0
 800d210:	4629      	mov	r1, r5
 800d212:	f7f3 f839 	bl	8000288 <__aeabi_dsub>
 800d216:	2200      	movs	r2, #0
 800d218:	2300      	movs	r3, #0
 800d21a:	e7ed      	b.n	800d1f8 <__ieee754_log10+0x20>
 800d21c:	4b31      	ldr	r3, [pc, #196]	; (800d2e4 <__ieee754_log10+0x10c>)
 800d21e:	2200      	movs	r2, #0
 800d220:	4629      	mov	r1, r5
 800d222:	ee10 0a10 	vmov	r0, s0
 800d226:	f7f3 f9e7 	bl	80005f8 <__aeabi_dmul>
 800d22a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800d22e:	4604      	mov	r4, r0
 800d230:	460d      	mov	r5, r1
 800d232:	460b      	mov	r3, r1
 800d234:	492c      	ldr	r1, [pc, #176]	; (800d2e8 <__ieee754_log10+0x110>)
 800d236:	428b      	cmp	r3, r1
 800d238:	dd08      	ble.n	800d24c <__ieee754_log10+0x74>
 800d23a:	4622      	mov	r2, r4
 800d23c:	462b      	mov	r3, r5
 800d23e:	4620      	mov	r0, r4
 800d240:	4629      	mov	r1, r5
 800d242:	f7f3 f823 	bl	800028c <__adddf3>
 800d246:	e7d9      	b.n	800d1fc <__ieee754_log10+0x24>
 800d248:	2200      	movs	r2, #0
 800d24a:	e7f3      	b.n	800d234 <__ieee754_log10+0x5c>
 800d24c:	1518      	asrs	r0, r3, #20
 800d24e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800d252:	4410      	add	r0, r2
 800d254:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800d258:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800d25c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800d260:	f7f3 f960 	bl	8000524 <__aeabi_i2d>
 800d264:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800d268:	3303      	adds	r3, #3
 800d26a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800d26e:	ec45 4b10 	vmov	d0, r4, r5
 800d272:	4606      	mov	r6, r0
 800d274:	460f      	mov	r7, r1
 800d276:	f7ff fdf3 	bl	800ce60 <__ieee754_log>
 800d27a:	a313      	add	r3, pc, #76	; (adr r3, 800d2c8 <__ieee754_log10+0xf0>)
 800d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d280:	4630      	mov	r0, r6
 800d282:	4639      	mov	r1, r7
 800d284:	ec59 8b10 	vmov	r8, r9, d0
 800d288:	f7f3 f9b6 	bl	80005f8 <__aeabi_dmul>
 800d28c:	a310      	add	r3, pc, #64	; (adr r3, 800d2d0 <__ieee754_log10+0xf8>)
 800d28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d292:	4604      	mov	r4, r0
 800d294:	460d      	mov	r5, r1
 800d296:	4640      	mov	r0, r8
 800d298:	4649      	mov	r1, r9
 800d29a:	f7f3 f9ad 	bl	80005f8 <__aeabi_dmul>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	f7f2 fff1 	bl	800028c <__adddf3>
 800d2aa:	a30b      	add	r3, pc, #44	; (adr r3, 800d2d8 <__ieee754_log10+0x100>)
 800d2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	460d      	mov	r5, r1
 800d2b4:	4630      	mov	r0, r6
 800d2b6:	4639      	mov	r1, r7
 800d2b8:	f7f3 f99e 	bl	80005f8 <__aeabi_dmul>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	460b      	mov	r3, r1
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	4629      	mov	r1, r5
 800d2c4:	e7bd      	b.n	800d242 <__ieee754_log10+0x6a>
 800d2c6:	bf00      	nop
 800d2c8:	11f12b36 	.word	0x11f12b36
 800d2cc:	3d59fef3 	.word	0x3d59fef3
 800d2d0:	1526e50e 	.word	0x1526e50e
 800d2d4:	3fdbcb7b 	.word	0x3fdbcb7b
 800d2d8:	509f6000 	.word	0x509f6000
 800d2dc:	3fd34413 	.word	0x3fd34413
 800d2e0:	c3500000 	.word	0xc3500000
 800d2e4:	43500000 	.word	0x43500000
 800d2e8:	7fefffff 	.word	0x7fefffff

0800d2ec <__ieee754_sqrt>:
 800d2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2f0:	ec55 4b10 	vmov	r4, r5, d0
 800d2f4:	4e56      	ldr	r6, [pc, #344]	; (800d450 <__ieee754_sqrt+0x164>)
 800d2f6:	43ae      	bics	r6, r5
 800d2f8:	ee10 0a10 	vmov	r0, s0
 800d2fc:	ee10 3a10 	vmov	r3, s0
 800d300:	4629      	mov	r1, r5
 800d302:	462a      	mov	r2, r5
 800d304:	d110      	bne.n	800d328 <__ieee754_sqrt+0x3c>
 800d306:	ee10 2a10 	vmov	r2, s0
 800d30a:	462b      	mov	r3, r5
 800d30c:	f7f3 f974 	bl	80005f8 <__aeabi_dmul>
 800d310:	4602      	mov	r2, r0
 800d312:	460b      	mov	r3, r1
 800d314:	4620      	mov	r0, r4
 800d316:	4629      	mov	r1, r5
 800d318:	f7f2 ffb8 	bl	800028c <__adddf3>
 800d31c:	4604      	mov	r4, r0
 800d31e:	460d      	mov	r5, r1
 800d320:	ec45 4b10 	vmov	d0, r4, r5
 800d324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d328:	2d00      	cmp	r5, #0
 800d32a:	dc10      	bgt.n	800d34e <__ieee754_sqrt+0x62>
 800d32c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d330:	4330      	orrs	r0, r6
 800d332:	d0f5      	beq.n	800d320 <__ieee754_sqrt+0x34>
 800d334:	b15d      	cbz	r5, 800d34e <__ieee754_sqrt+0x62>
 800d336:	ee10 2a10 	vmov	r2, s0
 800d33a:	462b      	mov	r3, r5
 800d33c:	ee10 0a10 	vmov	r0, s0
 800d340:	f7f2 ffa2 	bl	8000288 <__aeabi_dsub>
 800d344:	4602      	mov	r2, r0
 800d346:	460b      	mov	r3, r1
 800d348:	f7f3 fa80 	bl	800084c <__aeabi_ddiv>
 800d34c:	e7e6      	b.n	800d31c <__ieee754_sqrt+0x30>
 800d34e:	1509      	asrs	r1, r1, #20
 800d350:	d076      	beq.n	800d440 <__ieee754_sqrt+0x154>
 800d352:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d356:	07ce      	lsls	r6, r1, #31
 800d358:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800d35c:	bf5e      	ittt	pl
 800d35e:	0fda      	lsrpl	r2, r3, #31
 800d360:	005b      	lslpl	r3, r3, #1
 800d362:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800d366:	0fda      	lsrs	r2, r3, #31
 800d368:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800d36c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800d370:	2000      	movs	r0, #0
 800d372:	106d      	asrs	r5, r5, #1
 800d374:	005b      	lsls	r3, r3, #1
 800d376:	f04f 0e16 	mov.w	lr, #22
 800d37a:	4684      	mov	ip, r0
 800d37c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d380:	eb0c 0401 	add.w	r4, ip, r1
 800d384:	4294      	cmp	r4, r2
 800d386:	bfde      	ittt	le
 800d388:	1b12      	suble	r2, r2, r4
 800d38a:	eb04 0c01 	addle.w	ip, r4, r1
 800d38e:	1840      	addle	r0, r0, r1
 800d390:	0052      	lsls	r2, r2, #1
 800d392:	f1be 0e01 	subs.w	lr, lr, #1
 800d396:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d39a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d39e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d3a2:	d1ed      	bne.n	800d380 <__ieee754_sqrt+0x94>
 800d3a4:	4671      	mov	r1, lr
 800d3a6:	2720      	movs	r7, #32
 800d3a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d3ac:	4562      	cmp	r2, ip
 800d3ae:	eb04 060e 	add.w	r6, r4, lr
 800d3b2:	dc02      	bgt.n	800d3ba <__ieee754_sqrt+0xce>
 800d3b4:	d113      	bne.n	800d3de <__ieee754_sqrt+0xf2>
 800d3b6:	429e      	cmp	r6, r3
 800d3b8:	d811      	bhi.n	800d3de <__ieee754_sqrt+0xf2>
 800d3ba:	2e00      	cmp	r6, #0
 800d3bc:	eb06 0e04 	add.w	lr, r6, r4
 800d3c0:	da43      	bge.n	800d44a <__ieee754_sqrt+0x15e>
 800d3c2:	f1be 0f00 	cmp.w	lr, #0
 800d3c6:	db40      	blt.n	800d44a <__ieee754_sqrt+0x15e>
 800d3c8:	f10c 0801 	add.w	r8, ip, #1
 800d3cc:	eba2 020c 	sub.w	r2, r2, ip
 800d3d0:	429e      	cmp	r6, r3
 800d3d2:	bf88      	it	hi
 800d3d4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800d3d8:	1b9b      	subs	r3, r3, r6
 800d3da:	4421      	add	r1, r4
 800d3dc:	46c4      	mov	ip, r8
 800d3de:	0052      	lsls	r2, r2, #1
 800d3e0:	3f01      	subs	r7, #1
 800d3e2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d3e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d3ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d3ee:	d1dd      	bne.n	800d3ac <__ieee754_sqrt+0xc0>
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	d006      	beq.n	800d402 <__ieee754_sqrt+0x116>
 800d3f4:	1c4c      	adds	r4, r1, #1
 800d3f6:	bf13      	iteet	ne
 800d3f8:	3101      	addne	r1, #1
 800d3fa:	3001      	addeq	r0, #1
 800d3fc:	4639      	moveq	r1, r7
 800d3fe:	f021 0101 	bicne.w	r1, r1, #1
 800d402:	1043      	asrs	r3, r0, #1
 800d404:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d408:	0849      	lsrs	r1, r1, #1
 800d40a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d40e:	07c2      	lsls	r2, r0, #31
 800d410:	bf48      	it	mi
 800d412:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d416:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800d41a:	460c      	mov	r4, r1
 800d41c:	463d      	mov	r5, r7
 800d41e:	e77f      	b.n	800d320 <__ieee754_sqrt+0x34>
 800d420:	0ada      	lsrs	r2, r3, #11
 800d422:	3815      	subs	r0, #21
 800d424:	055b      	lsls	r3, r3, #21
 800d426:	2a00      	cmp	r2, #0
 800d428:	d0fa      	beq.n	800d420 <__ieee754_sqrt+0x134>
 800d42a:	02d7      	lsls	r7, r2, #11
 800d42c:	d50a      	bpl.n	800d444 <__ieee754_sqrt+0x158>
 800d42e:	f1c1 0420 	rsb	r4, r1, #32
 800d432:	fa23 f404 	lsr.w	r4, r3, r4
 800d436:	1e4d      	subs	r5, r1, #1
 800d438:	408b      	lsls	r3, r1
 800d43a:	4322      	orrs	r2, r4
 800d43c:	1b41      	subs	r1, r0, r5
 800d43e:	e788      	b.n	800d352 <__ieee754_sqrt+0x66>
 800d440:	4608      	mov	r0, r1
 800d442:	e7f0      	b.n	800d426 <__ieee754_sqrt+0x13a>
 800d444:	0052      	lsls	r2, r2, #1
 800d446:	3101      	adds	r1, #1
 800d448:	e7ef      	b.n	800d42a <__ieee754_sqrt+0x13e>
 800d44a:	46e0      	mov	r8, ip
 800d44c:	e7be      	b.n	800d3cc <__ieee754_sqrt+0xe0>
 800d44e:	bf00      	nop
 800d450:	7ff00000 	.word	0x7ff00000
 800d454:	00000000 	.word	0x00000000

0800d458 <atan>:
 800d458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d45c:	ec55 4b10 	vmov	r4, r5, d0
 800d460:	4bc3      	ldr	r3, [pc, #780]	; (800d770 <atan+0x318>)
 800d462:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d466:	429e      	cmp	r6, r3
 800d468:	46ab      	mov	fp, r5
 800d46a:	dd18      	ble.n	800d49e <atan+0x46>
 800d46c:	4bc1      	ldr	r3, [pc, #772]	; (800d774 <atan+0x31c>)
 800d46e:	429e      	cmp	r6, r3
 800d470:	dc01      	bgt.n	800d476 <atan+0x1e>
 800d472:	d109      	bne.n	800d488 <atan+0x30>
 800d474:	b144      	cbz	r4, 800d488 <atan+0x30>
 800d476:	4622      	mov	r2, r4
 800d478:	462b      	mov	r3, r5
 800d47a:	4620      	mov	r0, r4
 800d47c:	4629      	mov	r1, r5
 800d47e:	f7f2 ff05 	bl	800028c <__adddf3>
 800d482:	4604      	mov	r4, r0
 800d484:	460d      	mov	r5, r1
 800d486:	e006      	b.n	800d496 <atan+0x3e>
 800d488:	f1bb 0f00 	cmp.w	fp, #0
 800d48c:	f300 8131 	bgt.w	800d6f2 <atan+0x29a>
 800d490:	a59b      	add	r5, pc, #620	; (adr r5, 800d700 <atan+0x2a8>)
 800d492:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d496:	ec45 4b10 	vmov	d0, r4, r5
 800d49a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d49e:	4bb6      	ldr	r3, [pc, #728]	; (800d778 <atan+0x320>)
 800d4a0:	429e      	cmp	r6, r3
 800d4a2:	dc14      	bgt.n	800d4ce <atan+0x76>
 800d4a4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d4a8:	429e      	cmp	r6, r3
 800d4aa:	dc0d      	bgt.n	800d4c8 <atan+0x70>
 800d4ac:	a396      	add	r3, pc, #600	; (adr r3, 800d708 <atan+0x2b0>)
 800d4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b2:	ee10 0a10 	vmov	r0, s0
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	f7f2 fee8 	bl	800028c <__adddf3>
 800d4bc:	4baf      	ldr	r3, [pc, #700]	; (800d77c <atan+0x324>)
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f7f3 fb2a 	bl	8000b18 <__aeabi_dcmpgt>
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	d1e6      	bne.n	800d496 <atan+0x3e>
 800d4c8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d4cc:	e02b      	b.n	800d526 <atan+0xce>
 800d4ce:	f000 f963 	bl	800d798 <fabs>
 800d4d2:	4bab      	ldr	r3, [pc, #684]	; (800d780 <atan+0x328>)
 800d4d4:	429e      	cmp	r6, r3
 800d4d6:	ec55 4b10 	vmov	r4, r5, d0
 800d4da:	f300 80bf 	bgt.w	800d65c <atan+0x204>
 800d4de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d4e2:	429e      	cmp	r6, r3
 800d4e4:	f300 80a0 	bgt.w	800d628 <atan+0x1d0>
 800d4e8:	ee10 2a10 	vmov	r2, s0
 800d4ec:	ee10 0a10 	vmov	r0, s0
 800d4f0:	462b      	mov	r3, r5
 800d4f2:	4629      	mov	r1, r5
 800d4f4:	f7f2 feca 	bl	800028c <__adddf3>
 800d4f8:	4ba0      	ldr	r3, [pc, #640]	; (800d77c <atan+0x324>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f7f2 fec4 	bl	8000288 <__aeabi_dsub>
 800d500:	2200      	movs	r2, #0
 800d502:	4606      	mov	r6, r0
 800d504:	460f      	mov	r7, r1
 800d506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d50a:	4620      	mov	r0, r4
 800d50c:	4629      	mov	r1, r5
 800d50e:	f7f2 febd 	bl	800028c <__adddf3>
 800d512:	4602      	mov	r2, r0
 800d514:	460b      	mov	r3, r1
 800d516:	4630      	mov	r0, r6
 800d518:	4639      	mov	r1, r7
 800d51a:	f7f3 f997 	bl	800084c <__aeabi_ddiv>
 800d51e:	f04f 0a00 	mov.w	sl, #0
 800d522:	4604      	mov	r4, r0
 800d524:	460d      	mov	r5, r1
 800d526:	4622      	mov	r2, r4
 800d528:	462b      	mov	r3, r5
 800d52a:	4620      	mov	r0, r4
 800d52c:	4629      	mov	r1, r5
 800d52e:	f7f3 f863 	bl	80005f8 <__aeabi_dmul>
 800d532:	4602      	mov	r2, r0
 800d534:	460b      	mov	r3, r1
 800d536:	4680      	mov	r8, r0
 800d538:	4689      	mov	r9, r1
 800d53a:	f7f3 f85d 	bl	80005f8 <__aeabi_dmul>
 800d53e:	a374      	add	r3, pc, #464	; (adr r3, 800d710 <atan+0x2b8>)
 800d540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d544:	4606      	mov	r6, r0
 800d546:	460f      	mov	r7, r1
 800d548:	f7f3 f856 	bl	80005f8 <__aeabi_dmul>
 800d54c:	a372      	add	r3, pc, #456	; (adr r3, 800d718 <atan+0x2c0>)
 800d54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d552:	f7f2 fe9b 	bl	800028c <__adddf3>
 800d556:	4632      	mov	r2, r6
 800d558:	463b      	mov	r3, r7
 800d55a:	f7f3 f84d 	bl	80005f8 <__aeabi_dmul>
 800d55e:	a370      	add	r3, pc, #448	; (adr r3, 800d720 <atan+0x2c8>)
 800d560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d564:	f7f2 fe92 	bl	800028c <__adddf3>
 800d568:	4632      	mov	r2, r6
 800d56a:	463b      	mov	r3, r7
 800d56c:	f7f3 f844 	bl	80005f8 <__aeabi_dmul>
 800d570:	a36d      	add	r3, pc, #436	; (adr r3, 800d728 <atan+0x2d0>)
 800d572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d576:	f7f2 fe89 	bl	800028c <__adddf3>
 800d57a:	4632      	mov	r2, r6
 800d57c:	463b      	mov	r3, r7
 800d57e:	f7f3 f83b 	bl	80005f8 <__aeabi_dmul>
 800d582:	a36b      	add	r3, pc, #428	; (adr r3, 800d730 <atan+0x2d8>)
 800d584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d588:	f7f2 fe80 	bl	800028c <__adddf3>
 800d58c:	4632      	mov	r2, r6
 800d58e:	463b      	mov	r3, r7
 800d590:	f7f3 f832 	bl	80005f8 <__aeabi_dmul>
 800d594:	a368      	add	r3, pc, #416	; (adr r3, 800d738 <atan+0x2e0>)
 800d596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59a:	f7f2 fe77 	bl	800028c <__adddf3>
 800d59e:	4642      	mov	r2, r8
 800d5a0:	464b      	mov	r3, r9
 800d5a2:	f7f3 f829 	bl	80005f8 <__aeabi_dmul>
 800d5a6:	a366      	add	r3, pc, #408	; (adr r3, 800d740 <atan+0x2e8>)
 800d5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ac:	4680      	mov	r8, r0
 800d5ae:	4689      	mov	r9, r1
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	4639      	mov	r1, r7
 800d5b4:	f7f3 f820 	bl	80005f8 <__aeabi_dmul>
 800d5b8:	a363      	add	r3, pc, #396	; (adr r3, 800d748 <atan+0x2f0>)
 800d5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5be:	f7f2 fe63 	bl	8000288 <__aeabi_dsub>
 800d5c2:	4632      	mov	r2, r6
 800d5c4:	463b      	mov	r3, r7
 800d5c6:	f7f3 f817 	bl	80005f8 <__aeabi_dmul>
 800d5ca:	a361      	add	r3, pc, #388	; (adr r3, 800d750 <atan+0x2f8>)
 800d5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d0:	f7f2 fe5a 	bl	8000288 <__aeabi_dsub>
 800d5d4:	4632      	mov	r2, r6
 800d5d6:	463b      	mov	r3, r7
 800d5d8:	f7f3 f80e 	bl	80005f8 <__aeabi_dmul>
 800d5dc:	a35e      	add	r3, pc, #376	; (adr r3, 800d758 <atan+0x300>)
 800d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e2:	f7f2 fe51 	bl	8000288 <__aeabi_dsub>
 800d5e6:	4632      	mov	r2, r6
 800d5e8:	463b      	mov	r3, r7
 800d5ea:	f7f3 f805 	bl	80005f8 <__aeabi_dmul>
 800d5ee:	a35c      	add	r3, pc, #368	; (adr r3, 800d760 <atan+0x308>)
 800d5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f4:	f7f2 fe48 	bl	8000288 <__aeabi_dsub>
 800d5f8:	4632      	mov	r2, r6
 800d5fa:	463b      	mov	r3, r7
 800d5fc:	f7f2 fffc 	bl	80005f8 <__aeabi_dmul>
 800d600:	4602      	mov	r2, r0
 800d602:	460b      	mov	r3, r1
 800d604:	4640      	mov	r0, r8
 800d606:	4649      	mov	r1, r9
 800d608:	f7f2 fe40 	bl	800028c <__adddf3>
 800d60c:	4622      	mov	r2, r4
 800d60e:	462b      	mov	r3, r5
 800d610:	f7f2 fff2 	bl	80005f8 <__aeabi_dmul>
 800d614:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800d618:	4602      	mov	r2, r0
 800d61a:	460b      	mov	r3, r1
 800d61c:	d14b      	bne.n	800d6b6 <atan+0x25e>
 800d61e:	4620      	mov	r0, r4
 800d620:	4629      	mov	r1, r5
 800d622:	f7f2 fe31 	bl	8000288 <__aeabi_dsub>
 800d626:	e72c      	b.n	800d482 <atan+0x2a>
 800d628:	ee10 0a10 	vmov	r0, s0
 800d62c:	4b53      	ldr	r3, [pc, #332]	; (800d77c <atan+0x324>)
 800d62e:	2200      	movs	r2, #0
 800d630:	4629      	mov	r1, r5
 800d632:	f7f2 fe29 	bl	8000288 <__aeabi_dsub>
 800d636:	4b51      	ldr	r3, [pc, #324]	; (800d77c <atan+0x324>)
 800d638:	4606      	mov	r6, r0
 800d63a:	460f      	mov	r7, r1
 800d63c:	2200      	movs	r2, #0
 800d63e:	4620      	mov	r0, r4
 800d640:	4629      	mov	r1, r5
 800d642:	f7f2 fe23 	bl	800028c <__adddf3>
 800d646:	4602      	mov	r2, r0
 800d648:	460b      	mov	r3, r1
 800d64a:	4630      	mov	r0, r6
 800d64c:	4639      	mov	r1, r7
 800d64e:	f7f3 f8fd 	bl	800084c <__aeabi_ddiv>
 800d652:	f04f 0a01 	mov.w	sl, #1
 800d656:	4604      	mov	r4, r0
 800d658:	460d      	mov	r5, r1
 800d65a:	e764      	b.n	800d526 <atan+0xce>
 800d65c:	4b49      	ldr	r3, [pc, #292]	; (800d784 <atan+0x32c>)
 800d65e:	429e      	cmp	r6, r3
 800d660:	da1d      	bge.n	800d69e <atan+0x246>
 800d662:	ee10 0a10 	vmov	r0, s0
 800d666:	4b48      	ldr	r3, [pc, #288]	; (800d788 <atan+0x330>)
 800d668:	2200      	movs	r2, #0
 800d66a:	4629      	mov	r1, r5
 800d66c:	f7f2 fe0c 	bl	8000288 <__aeabi_dsub>
 800d670:	4b45      	ldr	r3, [pc, #276]	; (800d788 <atan+0x330>)
 800d672:	4606      	mov	r6, r0
 800d674:	460f      	mov	r7, r1
 800d676:	2200      	movs	r2, #0
 800d678:	4620      	mov	r0, r4
 800d67a:	4629      	mov	r1, r5
 800d67c:	f7f2 ffbc 	bl	80005f8 <__aeabi_dmul>
 800d680:	4b3e      	ldr	r3, [pc, #248]	; (800d77c <atan+0x324>)
 800d682:	2200      	movs	r2, #0
 800d684:	f7f2 fe02 	bl	800028c <__adddf3>
 800d688:	4602      	mov	r2, r0
 800d68a:	460b      	mov	r3, r1
 800d68c:	4630      	mov	r0, r6
 800d68e:	4639      	mov	r1, r7
 800d690:	f7f3 f8dc 	bl	800084c <__aeabi_ddiv>
 800d694:	f04f 0a02 	mov.w	sl, #2
 800d698:	4604      	mov	r4, r0
 800d69a:	460d      	mov	r5, r1
 800d69c:	e743      	b.n	800d526 <atan+0xce>
 800d69e:	462b      	mov	r3, r5
 800d6a0:	ee10 2a10 	vmov	r2, s0
 800d6a4:	4939      	ldr	r1, [pc, #228]	; (800d78c <atan+0x334>)
 800d6a6:	2000      	movs	r0, #0
 800d6a8:	f7f3 f8d0 	bl	800084c <__aeabi_ddiv>
 800d6ac:	f04f 0a03 	mov.w	sl, #3
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	460d      	mov	r5, r1
 800d6b4:	e737      	b.n	800d526 <atan+0xce>
 800d6b6:	4b36      	ldr	r3, [pc, #216]	; (800d790 <atan+0x338>)
 800d6b8:	4e36      	ldr	r6, [pc, #216]	; (800d794 <atan+0x33c>)
 800d6ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d6be:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d6c2:	e9da 2300 	ldrd	r2, r3, [sl]
 800d6c6:	f7f2 fddf 	bl	8000288 <__aeabi_dsub>
 800d6ca:	4622      	mov	r2, r4
 800d6cc:	462b      	mov	r3, r5
 800d6ce:	f7f2 fddb 	bl	8000288 <__aeabi_dsub>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d6da:	f7f2 fdd5 	bl	8000288 <__aeabi_dsub>
 800d6de:	f1bb 0f00 	cmp.w	fp, #0
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	460d      	mov	r5, r1
 800d6e6:	f6bf aed6 	bge.w	800d496 <atan+0x3e>
 800d6ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6ee:	461d      	mov	r5, r3
 800d6f0:	e6d1      	b.n	800d496 <atan+0x3e>
 800d6f2:	a51d      	add	r5, pc, #116	; (adr r5, 800d768 <atan+0x310>)
 800d6f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d6f8:	e6cd      	b.n	800d496 <atan+0x3e>
 800d6fa:	bf00      	nop
 800d6fc:	f3af 8000 	nop.w
 800d700:	54442d18 	.word	0x54442d18
 800d704:	bff921fb 	.word	0xbff921fb
 800d708:	8800759c 	.word	0x8800759c
 800d70c:	7e37e43c 	.word	0x7e37e43c
 800d710:	e322da11 	.word	0xe322da11
 800d714:	3f90ad3a 	.word	0x3f90ad3a
 800d718:	24760deb 	.word	0x24760deb
 800d71c:	3fa97b4b 	.word	0x3fa97b4b
 800d720:	a0d03d51 	.word	0xa0d03d51
 800d724:	3fb10d66 	.word	0x3fb10d66
 800d728:	c54c206e 	.word	0xc54c206e
 800d72c:	3fb745cd 	.word	0x3fb745cd
 800d730:	920083ff 	.word	0x920083ff
 800d734:	3fc24924 	.word	0x3fc24924
 800d738:	5555550d 	.word	0x5555550d
 800d73c:	3fd55555 	.word	0x3fd55555
 800d740:	2c6a6c2f 	.word	0x2c6a6c2f
 800d744:	bfa2b444 	.word	0xbfa2b444
 800d748:	52defd9a 	.word	0x52defd9a
 800d74c:	3fadde2d 	.word	0x3fadde2d
 800d750:	af749a6d 	.word	0xaf749a6d
 800d754:	3fb3b0f2 	.word	0x3fb3b0f2
 800d758:	fe231671 	.word	0xfe231671
 800d75c:	3fbc71c6 	.word	0x3fbc71c6
 800d760:	9998ebc4 	.word	0x9998ebc4
 800d764:	3fc99999 	.word	0x3fc99999
 800d768:	54442d18 	.word	0x54442d18
 800d76c:	3ff921fb 	.word	0x3ff921fb
 800d770:	440fffff 	.word	0x440fffff
 800d774:	7ff00000 	.word	0x7ff00000
 800d778:	3fdbffff 	.word	0x3fdbffff
 800d77c:	3ff00000 	.word	0x3ff00000
 800d780:	3ff2ffff 	.word	0x3ff2ffff
 800d784:	40038000 	.word	0x40038000
 800d788:	3ff80000 	.word	0x3ff80000
 800d78c:	bff00000 	.word	0xbff00000
 800d790:	0800fd40 	.word	0x0800fd40
 800d794:	0800fd20 	.word	0x0800fd20

0800d798 <fabs>:
 800d798:	ec51 0b10 	vmov	r0, r1, d0
 800d79c:	ee10 2a10 	vmov	r2, s0
 800d7a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d7a4:	ec43 2b10 	vmov	d0, r2, r3
 800d7a8:	4770      	bx	lr
 800d7aa:	0000      	movs	r0, r0
 800d7ac:	0000      	movs	r0, r0
	...

0800d7b0 <nan>:
 800d7b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d7b8 <nan+0x8>
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop
 800d7b8:	00000000 	.word	0x00000000
 800d7bc:	7ff80000 	.word	0x7ff80000

0800d7c0 <_init>:
 800d7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7c2:	bf00      	nop
 800d7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7c6:	bc08      	pop	{r3}
 800d7c8:	469e      	mov	lr, r3
 800d7ca:	4770      	bx	lr

0800d7cc <_fini>:
 800d7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ce:	bf00      	nop
 800d7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7d2:	bc08      	pop	{r3}
 800d7d4:	469e      	mov	lr, r3
 800d7d6:	4770      	bx	lr
