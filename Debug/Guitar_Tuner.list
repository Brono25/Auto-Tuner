
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000466c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004838  08004838  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004838  08004838  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004838  08004838  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800483c  0800483c  0001483c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c10  20000060  080048a0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008c70  080048a0  00028c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123cf  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002566  00000000  00000000  0003245f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  000349c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  000359e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023682  00000000  00000000  000368e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001149e  00000000  00000000  00059f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deb2f  00000000  00000000  0006b400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  00149f2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043cc  00000000  00000000  00149ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001229  00000000  00000000  0014e3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000060 	.word	0x20000060
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080047e0 	.word	0x080047e0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000064 	.word	0x20000064
 80001c8:	080047e0 	.word	0x080047e0

080001cc <HAL_ADC_ConvHalfCpltCallback>:

	counter++;
}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]

	callback_state = 2;
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80001d6:	2202      	movs	r2, #2
 80001d8:	601a      	str	r2, [r3, #0]

}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	20000088 	.word	0x20000088

080001ec <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	callback_state = 1;
 80001f4:	4b06      	ldr	r3, [pc, #24]	; (8000210 <HAL_ADC_ConvCpltCallback+0x24>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80001fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000202:	f002 fc53 	bl	8002aac <HAL_GPIO_TogglePin>

}
 8000206:	bf00      	nop
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	20000088 	.word	0x20000088

08000214 <process_dsp>:

void process_dsp()
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0

	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	e014      	b.n	800024a <process_dsp+0x36>
	{
		in_buff_f32[i] = (float32_t)in_buff[i];
 8000220:	4b13      	ldr	r3, [pc, #76]	; (8000270 <process_dsp+0x5c>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	005b      	lsls	r3, r3, #1
 8000228:	4413      	add	r3, r2
 800022a:	881b      	ldrh	r3, [r3, #0]
 800022c:	b299      	uxth	r1, r3
 800022e:	4b11      	ldr	r3, [pc, #68]	; (8000274 <process_dsp+0x60>)
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	009b      	lsls	r3, r3, #2
 8000236:	4413      	add	r3, r2
 8000238:	ee07 1a90 	vmov	s15, r1
 800023c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000240:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3301      	adds	r3, #1
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f640 3283 	movw	r2, #2947	; 0xb83
 8000250:	4293      	cmp	r3, r2
 8000252:	dde5      	ble.n	8000220 <process_dsp+0xc>

	}

	arm_fir_f32 (&fir_settings, in_buff_f32, out_buff_f32, BLOCK_SIZE_FLOAT);
 8000254:	4b07      	ldr	r3, [pc, #28]	; (8000274 <process_dsp+0x60>)
 8000256:	6819      	ldr	r1, [r3, #0]
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <process_dsp+0x64>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	f640 3384 	movw	r3, #2948	; 0xb84
 8000260:	4806      	ldr	r0, [pc, #24]	; (800027c <process_dsp+0x68>)
 8000262:	f004 f82d 	bl	80042c0 <arm_fir_f32>

}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	2000007c 	.word	0x2000007c
 8000274:	20000080 	.word	0x20000080
 8000278:	20000084 	.word	0x20000084
 800027c:	200000a0 	.word	0x200000a0

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fb94 	bl	80009b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f83d 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f97f 	bl	8000590 <MX_GPIO_Init>
  MX_DMA_Init();
 8000292:	f000 f957 	bl	8000544 <MX_DMA_Init>
  MX_ADC1_Init();
 8000296:	f000 f887 	bl	80003a8 <MX_ADC1_Init>
  MX_TIM6_Init();
 800029a:	f000 f91d 	bl	80004d8 <MX_TIM6_Init>
  MX_DAC1_Init();
 800029e:	f000 f8e9 	bl	8000474 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 80002a2:	4811      	ldr	r0, [pc, #68]	; (80002e8 <main+0x68>)
 80002a4:	f003 fde0 	bl	8003e68 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim6, TIM_CHANNEL_6);
 80002a8:	2114      	movs	r1, #20
 80002aa:	480f      	ldr	r0, [pc, #60]	; (80002e8 <main+0x68>)
 80002ac:	f003 fe28 	bl	8003f00 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, FULL_BUFFER_LEN);
 80002b0:	f241 7208 	movw	r2, #5896	; 0x1708
 80002b4:	490d      	ldr	r1, [pc, #52]	; (80002ec <main+0x6c>)
 80002b6:	480e      	ldr	r0, [pc, #56]	; (80002f0 <main+0x70>)
 80002b8:	f000 ff24 	bl	8001104 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)dac_buff,  FULL_BUFFER_LEN, DAC_ALIGN_12B_R);
 80002bc:	2300      	movs	r3, #0
 80002be:	9300      	str	r3, [sp, #0]
 80002c0:	f241 7308 	movw	r3, #5896	; 0x1708
 80002c4:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <main+0x74>)
 80002c6:	2100      	movs	r1, #0
 80002c8:	480b      	ldr	r0, [pc, #44]	; (80002f8 <main+0x78>)
 80002ca:	f001 fdd7 	bl	8001e7c <HAL_DAC_Start_DMA>

  arm_fir_init_f32(&fir_settings, NUMBER_TAPS, &fir_taps[0], &fir_state[0], BLOCK_SIZE_FLOAT);
 80002ce:	f640 3384 	movw	r3, #2948	; 0xb84
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <main+0x7c>)
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <main+0x80>)
 80002d8:	2115      	movs	r1, #21
 80002da:	480a      	ldr	r0, [pc, #40]	; (8000304 <main+0x84>)
 80002dc:	f003 ffde 	bl	800429c <arm_fir_init_f32>
  {


    /* USER CODE END WHILE */

	  process_dsp();
 80002e0:	f7ff ff98 	bl	8000214 <process_dsp>
 80002e4:	e7fc      	b.n	80002e0 <main+0x60>
 80002e6:	bf00      	nop
 80002e8:	20003000 	.word	0x20003000
 80002ec:	2000304c 	.word	0x2000304c
 80002f0:	200000f4 	.word	0x200000f4
 80002f4:	20005e5c 	.word	0x20005e5c
 80002f8:	2000008c 	.word	0x2000008c
 80002fc:	20000158 	.word	0x20000158
 8000300:	20000000 	.word	0x20000000
 8000304:	200000a0 	.word	0x200000a0

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b096      	sub	sp, #88	; 0x58
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0314 	add.w	r3, r7, #20
 8000312:	2244      	movs	r2, #68	; 0x44
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f004 fa5a 	bl	80047d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	463b      	mov	r3, r7
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800032a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800032e:	f002 fbe5 	bl	8002afc <HAL_PWREx_ControlVoltageScaling>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000338:	f000 f976 	bl	8000628 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800033c:	2301      	movs	r3, #1
 800033e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000340:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000344:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000346:	2302      	movs	r3, #2
 8000348:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034a:	2303      	movs	r3, #3
 800034c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 6;
 800034e:	2306      	movs	r3, #6
 8000350:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000352:	2350      	movs	r3, #80	; 0x50
 8000354:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000356:	2307      	movs	r3, #7
 8000358:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800035a:	2302      	movs	r3, #2
 800035c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800035e:	2304      	movs	r3, #4
 8000360:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	f107 0314 	add.w	r3, r7, #20
 8000366:	4618      	mov	r0, r3
 8000368:	f002 fc1e 	bl	8002ba8 <HAL_RCC_OscConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000372:	f000 f959 	bl	8000628 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000376:	230f      	movs	r3, #15
 8000378:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037a:	2303      	movs	r3, #3
 800037c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800038a:	463b      	mov	r3, r7
 800038c:	2104      	movs	r1, #4
 800038e:	4618      	mov	r0, r3
 8000390:	f003 f81c 	bl	80033cc <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800039a:	f000 f945 	bl	8000628 <Error_Handler>
  }
}
 800039e:	bf00      	nop
 80003a0:	3758      	adds	r7, #88	; 0x58
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
	...

080003a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ae:	463b      	mov	r3, r7
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
 80003b8:	60da      	str	r2, [r3, #12]
 80003ba:	611a      	str	r2, [r3, #16]
 80003bc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003be:	4b2a      	ldr	r3, [pc, #168]	; (8000468 <MX_ADC1_Init+0xc0>)
 80003c0:	4a2a      	ldr	r2, [pc, #168]	; (800046c <MX_ADC1_Init+0xc4>)
 80003c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003c4:	4b28      	ldr	r3, [pc, #160]	; (8000468 <MX_ADC1_Init+0xc0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003ca:	4b27      	ldr	r3, [pc, #156]	; (8000468 <MX_ADC1_Init+0xc0>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003d0:	4b25      	ldr	r3, [pc, #148]	; (8000468 <MX_ADC1_Init+0xc0>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003d6:	4b24      	ldr	r3, [pc, #144]	; (8000468 <MX_ADC1_Init+0xc0>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003dc:	4b22      	ldr	r3, [pc, #136]	; (8000468 <MX_ADC1_Init+0xc0>)
 80003de:	2204      	movs	r2, #4
 80003e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003e2:	4b21      	ldr	r3, [pc, #132]	; (8000468 <MX_ADC1_Init+0xc0>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003e8:	4b1f      	ldr	r3, [pc, #124]	; (8000468 <MX_ADC1_Init+0xc0>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80003ee:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <MX_ADC1_Init+0xc0>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003f4:	4b1c      	ldr	r3, [pc, #112]	; (8000468 <MX_ADC1_Init+0xc0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80003fc:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <MX_ADC1_Init+0xc0>)
 80003fe:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8000402:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <MX_ADC1_Init+0xc0>)
 8000406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800040a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <MX_ADC1_Init+0xc0>)
 800040e:	2201      	movs	r2, #1
 8000410:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <MX_ADC1_Init+0xc0>)
 8000416:	2200      	movs	r2, #0
 8000418:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800041a:	4b13      	ldr	r3, [pc, #76]	; (8000468 <MX_ADC1_Init+0xc0>)
 800041c:	2200      	movs	r2, #0
 800041e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000422:	4811      	ldr	r0, [pc, #68]	; (8000468 <MX_ADC1_Init+0xc0>)
 8000424:	f000 fd26 	bl	8000e74 <HAL_ADC_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800042e:	f000 f8fb 	bl	8000628 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_ADC1_Init+0xc8>)
 8000434:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000436:	2306      	movs	r3, #6
 8000438:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800043a:	2300      	movs	r3, #0
 800043c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800043e:	237f      	movs	r3, #127	; 0x7f
 8000440:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000442:	2304      	movs	r3, #4
 8000444:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044a:	463b      	mov	r3, r7
 800044c:	4619      	mov	r1, r3
 800044e:	4806      	ldr	r0, [pc, #24]	; (8000468 <MX_ADC1_Init+0xc0>)
 8000450:	f000 fee6 	bl	8001220 <HAL_ADC_ConfigChannel>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800045a:	f000 f8e5 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	3718      	adds	r7, #24
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	200000f4 	.word	0x200000f4
 800046c:	50040000 	.word	0x50040000
 8000470:	14f00020 	.word	0x14f00020

08000474 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2224      	movs	r2, #36	; 0x24
 800047e:	2100      	movs	r1, #0
 8000480:	4618      	mov	r0, r3
 8000482:	f004 f9a5 	bl	80047d0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <MX_DAC1_Init+0x5c>)
 8000488:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <MX_DAC1_Init+0x60>)
 800048a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800048c:	4810      	ldr	r0, [pc, #64]	; (80004d0 <MX_DAC1_Init+0x5c>)
 800048e:	f001 fcd2 	bl	8001e36 <HAL_DAC_Init>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000498:	f000 f8c6 	bl	8000628 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800049c:	2300      	movs	r3, #0
 800049e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80004a0:	2304      	movs	r3, #4
 80004a2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	4619      	mov	r1, r3
 80004b6:	4806      	ldr	r0, [pc, #24]	; (80004d0 <MX_DAC1_Init+0x5c>)
 80004b8:	f001 fdca 	bl	8002050 <HAL_DAC_ConfigChannel>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80004c2:	f000 f8b1 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	3728      	adds	r7, #40	; 0x28
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	2000008c 	.word	0x2000008c
 80004d4:	40007400 	.word	0x40007400

080004d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_TIM6_Init+0x64>)
 80004ea:	4a15      	ldr	r2, [pc, #84]	; (8000540 <MX_TIM6_Init+0x68>)
 80004ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_TIM6_Init+0x64>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_TIM6_Init+0x64>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000 - 1;
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <MX_TIM6_Init+0x64>)
 80004fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000500:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_TIM6_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <MX_TIM6_Init+0x64>)
 800050a:	f003 fc55 	bl	8003db8 <HAL_TIM_Base_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000514:	f000 f888 	bl	8000628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000518:	2320      	movs	r3, #32
 800051a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	4619      	mov	r1, r3
 8000524:	4805      	ldr	r0, [pc, #20]	; (800053c <MX_TIM6_Init+0x64>)
 8000526:	f003 fe53 	bl	80041d0 <HAL_TIMEx_MasterConfigSynchronization>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000530:	f000 f87a 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20003000 	.word	0x20003000
 8000540:	40001000 	.word	0x40001000

08000544 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <MX_DMA_Init+0x48>)
 800054c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800054e:	4a0f      	ldr	r2, [pc, #60]	; (800058c <MX_DMA_Init+0x48>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6493      	str	r3, [r2, #72]	; 0x48
 8000556:	4b0d      	ldr	r3, [pc, #52]	; (800058c <MX_DMA_Init+0x48>)
 8000558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	200b      	movs	r0, #11
 8000568:	f001 fc2f 	bl	8001dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800056c:	200b      	movs	r0, #11
 800056e:	f001 fc48 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	200d      	movs	r0, #13
 8000578:	f001 fc27 	bl	8001dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800057c:	200d      	movs	r0, #13
 800057e:	f001 fc40 	bl	8001e02 <HAL_NVIC_EnableIRQ>

}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000

08000590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a6:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_GPIO_Init+0x94>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	4a1e      	ldr	r2, [pc, #120]	; (8000624 <MX_GPIO_Init+0x94>)
 80005ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_GPIO_Init+0x94>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_GPIO_Init+0x94>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	4a18      	ldr	r2, [pc, #96]	; (8000624 <MX_GPIO_Init+0x94>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_GPIO_Init+0x94>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_GPIO_Init+0x94>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <MX_GPIO_Init+0x94>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_GPIO_Init+0x94>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f8:	f002 fa40 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80005fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000600:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4619      	mov	r1, r3
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f002 f8b6 	bl	8002788 <HAL_GPIO_Init>

}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000

08000628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000630:	e7fe      	b.n	8000630 <Error_Handler+0x8>
	...

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <HAL_MspInit+0x44>)
 800063c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800063e:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <HAL_MspInit+0x44>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6613      	str	r3, [r2, #96]	; 0x60
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <HAL_MspInit+0x44>)
 8000648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HAL_MspInit+0x44>)
 8000654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000656:	4a08      	ldr	r2, [pc, #32]	; (8000678 <HAL_MspInit+0x44>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	6593      	str	r3, [r2, #88]	; 0x58
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_MspInit+0x44>)
 8000660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000

0800067c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0a0      	sub	sp, #128	; 0x80
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	225c      	movs	r2, #92	; 0x5c
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f004 f897 	bl	80047d0 <memset>
  if(hadc->Instance==ADC1)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a3b      	ldr	r2, [pc, #236]	; (8000794 <HAL_ADC_MspInit+0x118>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d16f      	bne.n	800078c <HAL_ADC_MspInit+0x110>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006b6:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80006b8:	2303      	movs	r3, #3
 80006ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 6;
 80006bc:	2306      	movs	r3, #6
 80006be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 43;
 80006c0:	232b      	movs	r3, #43	; 0x2b
 80006c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006c4:	2307      	movs	r3, #7
 80006c6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 f862 	bl	80037a4 <HAL_RCCEx_PeriphCLKConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80006e6:	f7ff ff9f 	bl	8000628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <HAL_ADC_MspInit+0x11c>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a2a      	ldr	r2, [pc, #168]	; (8000798 <HAL_ADC_MspInit+0x11c>)
 80006f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <HAL_ADC_MspInit+0x11c>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <HAL_ADC_MspInit+0x11c>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a24      	ldr	r2, [pc, #144]	; (8000798 <HAL_ADC_MspInit+0x11c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <HAL_ADC_MspInit+0x11c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800071a:	2301      	movs	r3, #1
 800071c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800071e:	230b      	movs	r3, #11
 8000720:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800072a:	4619      	mov	r1, r3
 800072c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000730:	f002 f82a 	bl	8002788 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <HAL_ADC_MspInit+0x120>)
 8000736:	4a1a      	ldr	r2, [pc, #104]	; (80007a0 <HAL_ADC_MspInit+0x124>)
 8000738:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <HAL_ADC_MspInit+0x120>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <HAL_ADC_MspInit+0x120>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_ADC_MspInit+0x120>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <HAL_ADC_MspInit+0x120>)
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_ADC_MspInit+0x120>)
 8000754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000758:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <HAL_ADC_MspInit+0x120>)
 800075c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000760:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <HAL_ADC_MspInit+0x120>)
 8000764:	2220      	movs	r2, #32
 8000766:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_ADC_MspInit+0x120>)
 800076a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800076e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000770:	480a      	ldr	r0, [pc, #40]	; (800079c <HAL_ADC_MspInit+0x120>)
 8000772:	f001 fe11 	bl	8002398 <HAL_DMA_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 800077c:	f7ff ff54 	bl	8000628 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a06      	ldr	r2, [pc, #24]	; (800079c <HAL_ADC_MspInit+0x120>)
 8000784:	64da      	str	r2, [r3, #76]	; 0x4c
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <HAL_ADC_MspInit+0x120>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800078c:	bf00      	nop
 800078e:	3780      	adds	r7, #128	; 0x80
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	50040000 	.word	0x50040000
 8000798:	40021000 	.word	0x40021000
 800079c:	20002fb8 	.word	0x20002fb8
 80007a0:	40020008 	.word	0x40020008

080007a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a2b      	ldr	r2, [pc, #172]	; (8000870 <HAL_DAC_MspInit+0xcc>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d14f      	bne.n	8000866 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <HAL_DAC_MspInit+0xd0>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ca:	4a2a      	ldr	r2, [pc, #168]	; (8000874 <HAL_DAC_MspInit+0xd0>)
 80007cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007d0:	6593      	str	r3, [r2, #88]	; 0x58
 80007d2:	4b28      	ldr	r3, [pc, #160]	; (8000874 <HAL_DAC_MspInit+0xd0>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b25      	ldr	r3, [pc, #148]	; (8000874 <HAL_DAC_MspInit+0xd0>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a24      	ldr	r2, [pc, #144]	; (8000874 <HAL_DAC_MspInit+0xd0>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <HAL_DAC_MspInit+0xd0>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007f6:	2310      	movs	r3, #16
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fa:	2303      	movs	r3, #3
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f001 ffbc 	bl	8002788 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <HAL_DAC_MspInit+0xd4>)
 8000812:	4a1a      	ldr	r2, [pc, #104]	; (800087c <HAL_DAC_MspInit+0xd8>)
 8000814:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <HAL_DAC_MspInit+0xd4>)
 8000818:	2206      	movs	r2, #6
 800081a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <HAL_DAC_MspInit+0xd4>)
 800081e:	2210      	movs	r2, #16
 8000820:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_DAC_MspInit+0xd4>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <HAL_DAC_MspInit+0xd4>)
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_DAC_MspInit+0xd4>)
 8000830:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000834:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <HAL_DAC_MspInit+0xd4>)
 8000838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800083c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <HAL_DAC_MspInit+0xd4>)
 8000840:	2220      	movs	r2, #32
 8000842:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_DAC_MspInit+0xd4>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800084a:	480b      	ldr	r0, [pc, #44]	; (8000878 <HAL_DAC_MspInit+0xd4>)
 800084c:	f001 fda4 	bl	8002398 <HAL_DMA_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000856:	f7ff fee7 	bl	8000628 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a06      	ldr	r2, [pc, #24]	; (8000878 <HAL_DAC_MspInit+0xd4>)
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	4a05      	ldr	r2, [pc, #20]	; (8000878 <HAL_DAC_MspInit+0xd4>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40007400 	.word	0x40007400
 8000874:	40021000 	.word	0x40021000
 8000878:	200000ac 	.word	0x200000ac
 800087c:	40020030 	.word	0x40020030

08000880 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_TIM_Base_MspInit+0x38>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d10b      	bne.n	80008aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_TIM_Base_MspInit+0x3c>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000896:	4a09      	ldr	r2, [pc, #36]	; (80008bc <HAL_TIM_Base_MspInit+0x3c>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6593      	str	r3, [r2, #88]	; 0x58
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <HAL_TIM_Base_MspInit+0x3c>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40001000 	.word	0x40001000
 80008bc:	40021000 	.word	0x40021000

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler+0x4>

080008d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <UsageFault_Handler+0x4>

080008de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090c:	f000 f8a6 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <DMA1_Channel1_IRQHandler+0x10>)
 800091a:	f001 fe55 	bl	80025c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20002fb8 	.word	0x20002fb8

08000928 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <DMA1_Channel3_IRQHandler+0x10>)
 800092e:	f001 fe4b 	bl	80025c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000ac 	.word	0x200000ac

0800093c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <SystemInit+0x20>)
 8000942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <SystemInit+0x20>)
 8000948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800094c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000998 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000964:	f7ff ffea 	bl	800093c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <LoopForever+0x6>)
  ldr r1, =_edata
 800096a:	490d      	ldr	r1, [pc, #52]	; (80009a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <LoopForever+0xe>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000980:	4c0a      	ldr	r4, [pc, #40]	; (80009ac <LoopForever+0x16>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098e:	f003 fefb 	bl	8004788 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000992:	f7ff fc75 	bl	8000280 <main>

08000996 <LoopForever>:

LoopForever:
    b LoopForever
 8000996:	e7fe      	b.n	8000996 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000998:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009a4:	08004840 	.word	0x08004840
  ldr r2, =_sbss
 80009a8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009ac:	20008c70 	.word	0x20008c70

080009b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_IRQHandler>

080009b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009b8:	2300      	movs	r3, #0
 80009ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009bc:	2003      	movs	r0, #3
 80009be:	f001 f9f9 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009c2:	200f      	movs	r0, #15
 80009c4:	f000 f80e 	bl	80009e4 <HAL_InitTick>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d002      	beq.n	80009d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	71fb      	strb	r3, [r7, #7]
 80009d2:	e001      	b.n	80009d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009d4:	f7ff fe2e 	bl	8000634 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d8:	79fb      	ldrb	r3, [r7, #7]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <HAL_InitTick+0x6c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d023      	beq.n	8000a40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <HAL_InitTick+0x70>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_InitTick+0x6c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 fa05 	bl	8001e1e <HAL_SYSTICK_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10f      	bne.n	8000a3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d809      	bhi.n	8000a34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a28:	f001 f9cf 	bl	8001dca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_InitTick+0x74>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
 8000a32:	e007      	b.n	8000a44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	73fb      	strb	r3, [r7, #15]
 8000a38:	e004      	b.n	8000a44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	73fb      	strb	r3, [r7, #15]
 8000a3e:	e001      	b.n	8000a44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000005c 	.word	0x2000005c
 8000a54:	20000054 	.word	0x20000054
 8000a58:	20000058 	.word	0x20000058

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	2000005c 	.word	0x2000005c
 8000a80:	20008c6c 	.word	0x20008c6c

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20008c6c 	.word	0x20008c6c

08000a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa4:	f7ff ffee 	bl	8000a84 <HAL_GetTick>
 8000aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ab4:	d005      	beq.n	8000ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_Delay+0x44>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4413      	add	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ac2:	bf00      	nop
 8000ac4:	f7ff ffde 	bl	8000a84 <HAL_GetTick>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d8f7      	bhi.n	8000ac4 <HAL_Delay+0x28>
  {
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000005c 	.word	0x2000005c

08000ae4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	431a      	orrs	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	609a      	str	r2, [r3, #8]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	609a      	str	r2, [r3, #8]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	3360      	adds	r3, #96	; 0x60
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <LL_ADC_SetOffset+0x44>)
 8000b6e:	4013      	ands	r3, r2
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000b76:	683a      	ldr	r2, [r7, #0]
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000b84:	bf00      	nop
 8000b86:	371c      	adds	r7, #28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	03fff000 	.word	0x03fff000

08000b94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3360      	adds	r3, #96	; 0x60
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3360      	adds	r3, #96	; 0x60
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	431a      	orrs	r2, r3
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000bea:	bf00      	nop
 8000bec:	371c      	adds	r7, #28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e000      	b.n	8000c10 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3330      	adds	r3, #48	; 0x30
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	f003 030c 	and.w	r3, r3, #12
 8000c38:	4413      	add	r3, r2
 8000c3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	f003 031f 	and.w	r3, r3, #31
 8000c46:	211f      	movs	r1, #31
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	401a      	ands	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	0e9b      	lsrs	r3, r3, #26
 8000c54:	f003 011f 	and.w	r1, r3, #31
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	f003 031f 	and.w	r3, r3, #31
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	431a      	orrs	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c68:	bf00      	nop
 8000c6a:	371c      	adds	r7, #28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3314      	adds	r3, #20
 8000c84:	461a      	mov	r2, r3
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	0e5b      	lsrs	r3, r3, #25
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	4413      	add	r3, r2
 8000c92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	0d1b      	lsrs	r3, r3, #20
 8000c9c:	f003 031f 	and.w	r3, r3, #31
 8000ca0:	2107      	movs	r1, #7
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	401a      	ands	r2, r3
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	0d1b      	lsrs	r3, r3, #20
 8000cae:	f003 031f 	and.w	r3, r3, #31
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000cbe:	bf00      	nop
 8000cc0:	371c      	adds	r7, #28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f003 0318 	and.w	r3, r3, #24
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000cf0:	40d9      	lsrs	r1, r3
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	400b      	ands	r3, r1
 8000cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	0007ffff 	.word	0x0007ffff

08000d14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000d24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	6093      	str	r3, [r2, #8]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d4c:	d101      	bne.n	8000d52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e000      	b.n	8000d54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000d70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000d9c:	d101      	bne.n	8000da2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000dc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dc4:	f043 0201 	orr.w	r2, r3, #1
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d101      	bne.n	8000df0 <LL_ADC_IsEnabled+0x18>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <LL_ADC_IsEnabled+0x1a>
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e12:	f043 0204 	orr.w	r2, r3, #4
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	d101      	bne.n	8000e3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f003 0308 	and.w	r3, r3, #8
 8000e5c:	2b08      	cmp	r3, #8
 8000e5e:	d101      	bne.n	8000e64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000e60:	2301      	movs	r3, #1
 8000e62:	e000      	b.n	8000e66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e12c      	b.n	80010e8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d109      	bne.n	8000eb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff fbed 	bl	800067c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff3f 	bl	8000d38 <LL_ADC_IsDeepPowerDownEnabled>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d004      	beq.n	8000eca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff25 	bl	8000d14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff5a 	bl	8000d88 <LL_ADC_IsInternalRegulatorEnabled>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d115      	bne.n	8000f06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff3e 	bl	8000d60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ee4:	4b82      	ldr	r3, [pc, #520]	; (80010f0 <HAL_ADC_Init+0x27c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	099b      	lsrs	r3, r3, #6
 8000eea:	4a82      	ldr	r2, [pc, #520]	; (80010f4 <HAL_ADC_Init+0x280>)
 8000eec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef0:	099b      	lsrs	r3, r3, #6
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000ef8:	e002      	b.n	8000f00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f9      	bne.n	8000efa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff3c 	bl	8000d88 <LL_ADC_IsInternalRegulatorEnabled>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10d      	bne.n	8000f32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1a:	f043 0210 	orr.w	r2, r3, #16
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	f043 0201 	orr.w	r2, r3, #1
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff75 	bl	8000e26 <LL_ADC_REG_IsConversionOngoing>
 8000f3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f040 80c5 	bne.w	80010d6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f040 80c1 	bne.w	80010d6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f58:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f5c:	f043 0202 	orr.w	r2, r3, #2
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff35 	bl	8000dd8 <LL_ADC_IsEnabled>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10b      	bne.n	8000f8c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f74:	4860      	ldr	r0, [pc, #384]	; (80010f8 <HAL_ADC_Init+0x284>)
 8000f76:	f7ff ff2f 	bl	8000dd8 <LL_ADC_IsEnabled>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d105      	bne.n	8000f8c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	4619      	mov	r1, r3
 8000f86:	485d      	ldr	r0, [pc, #372]	; (80010fc <HAL_ADC_Init+0x288>)
 8000f88:	f7ff fdac 	bl	8000ae4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7e5b      	ldrb	r3, [r3, #25]
 8000f90:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f96:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000f9c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000fa2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000faa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	045b      	lsls	r3, r3, #17
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d009      	beq.n	8000fe4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	4b45      	ldr	r3, [pc, #276]	; (8001100 <HAL_ADC_Init+0x28c>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6812      	ldr	r2, [r2, #0]
 8000ff2:	69b9      	ldr	r1, [r7, #24]
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff12 	bl	8000e26 <LL_ADC_REG_IsConversionOngoing>
 8001002:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff1f 	bl	8000e4c <LL_ADC_INJ_IsConversionOngoing>
 800100e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d13d      	bne.n	8001092 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d13a      	bne.n	8001092 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001020:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001028:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001038:	f023 0302 	bic.w	r3, r3, #2
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	69b9      	ldr	r1, [r7, #24]
 8001042:	430b      	orrs	r3, r1
 8001044:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800104c:	2b01      	cmp	r3, #1
 800104e:	d118      	bne.n	8001082 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800105a:	f023 0304 	bic.w	r3, r3, #4
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001066:	4311      	orrs	r1, r2
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800106c:	4311      	orrs	r1, r2
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001072:	430a      	orrs	r2, r1
 8001074:	431a      	orrs	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0201 	orr.w	r2, r2, #1
 800107e:	611a      	str	r2, [r3, #16]
 8001080:	e007      	b.n	8001092 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 0201 	bic.w	r2, r2, #1
 8001090:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d10c      	bne.n	80010b4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	f023 010f 	bic.w	r1, r3, #15
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	1e5a      	subs	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
 80010b2:	e007      	b.n	80010c4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 020f 	bic.w	r2, r2, #15
 80010c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c8:	f023 0303 	bic.w	r3, r3, #3
 80010cc:	f043 0201 	orr.w	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	655a      	str	r2, [r3, #84]	; 0x54
 80010d4:	e007      	b.n	80010e6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010da:	f043 0210 	orr.w	r2, r3, #16
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80010e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000054 	.word	0x20000054
 80010f4:	053e2d63 	.word	0x053e2d63
 80010f8:	50040000 	.word	0x50040000
 80010fc:	50040300 	.word	0x50040300
 8001100:	fff0c007 	.word	0xfff0c007

08001104 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fe86 	bl	8000e26 <LL_ADC_REG_IsConversionOngoing>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d167      	bne.n	80011f0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001126:	2b01      	cmp	r3, #1
 8001128:	d101      	bne.n	800112e <HAL_ADC_Start_DMA+0x2a>
 800112a:	2302      	movs	r3, #2
 800112c:	e063      	b.n	80011f6 <HAL_ADC_Start_DMA+0xf2>
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f000 fc52 	bl	80019e0 <ADC_Enable>
 800113c:	4603      	mov	r3, r0
 800113e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d14f      	bne.n	80011e6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800114a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800114e:	f023 0301 	bic.w	r3, r3, #1
 8001152:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d006      	beq.n	8001174 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	f023 0206 	bic.w	r2, r3, #6
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	659a      	str	r2, [r3, #88]	; 0x58
 8001172:	e002      	b.n	800117a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a20      	ldr	r2, [pc, #128]	; (8001200 <HAL_ADC_Start_DMA+0xfc>)
 8001180:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <HAL_ADC_Start_DMA+0x100>)
 8001188:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <HAL_ADC_Start_DMA+0x104>)
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	221c      	movs	r2, #28
 8001198:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f042 0210 	orr.w	r2, r2, #16
 80011b0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f042 0201 	orr.w	r2, r2, #1
 80011c0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3340      	adds	r3, #64	; 0x40
 80011cc:	4619      	mov	r1, r3
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f001 f999 	bl	8002508 <HAL_DMA_Start_IT>
 80011d6:	4603      	mov	r3, r0
 80011d8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fe0d 	bl	8000dfe <LL_ADC_REG_StartConversion>
 80011e4:	e006      	b.n	80011f4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80011ee:	e001      	b.n	80011f4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011f0:	2302      	movs	r3, #2
 80011f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	08001aed 	.word	0x08001aed
 8001204:	08001bc5 	.word	0x08001bc5
 8001208:	08001be1 	.word	0x08001be1

0800120c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0b6      	sub	sp, #216	; 0xd8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_ADC_ConfigChannel+0x22>
 800123e:	2302      	movs	r3, #2
 8001240:	e3b9      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x796>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fde9 	bl	8000e26 <LL_ADC_REG_IsConversionOngoing>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	f040 839e 	bne.w	8001998 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b05      	cmp	r3, #5
 8001262:	d824      	bhi.n	80012ae <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	3b02      	subs	r3, #2
 800126a:	2b03      	cmp	r3, #3
 800126c:	d81b      	bhi.n	80012a6 <HAL_ADC_ConfigChannel+0x86>
 800126e:	a201      	add	r2, pc, #4	; (adr r2, 8001274 <HAL_ADC_ConfigChannel+0x54>)
 8001270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001274:	08001285 	.word	0x08001285
 8001278:	0800128d 	.word	0x0800128d
 800127c:	08001295 	.word	0x08001295
 8001280:	0800129d 	.word	0x0800129d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	220c      	movs	r2, #12
 8001288:	605a      	str	r2, [r3, #4]
          break;
 800128a:	e011      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2212      	movs	r2, #18
 8001290:	605a      	str	r2, [r3, #4]
          break;
 8001292:	e00d      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	2218      	movs	r2, #24
 8001298:	605a      	str	r2, [r3, #4]
          break;
 800129a:	e009      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a2:	605a      	str	r2, [r3, #4]
          break;
 80012a4:	e004      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2206      	movs	r2, #6
 80012aa:	605a      	str	r2, [r3, #4]
          break;
 80012ac:	e000      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80012ae:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	f7ff fcad 	bl	8000c1c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fdad 	bl	8000e26 <LL_ADC_REG_IsConversionOngoing>
 80012cc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fdb9 	bl	8000e4c <LL_ADC_INJ_IsConversionOngoing>
 80012da:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f040 81a6 	bne.w	8001634 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f040 81a1 	bne.w	8001634 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6818      	ldr	r0, [r3, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	6819      	ldr	r1, [r3, #0]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	461a      	mov	r2, r3
 8001300:	f7ff fcb8 	bl	8000c74 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	695a      	ldr	r2, [r3, #20]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b04      	cmp	r3, #4
 8001324:	d00a      	beq.n	800133c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	6919      	ldr	r1, [r3, #16]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001336:	f7ff fc09 	bl	8000b4c <LL_ADC_SetOffset>
 800133a:	e17b      	b.n	8001634 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fc26 	bl	8000b94 <LL_ADC_GetOffsetChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10a      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x148>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fc1b 	bl	8000b94 <LL_ADC_GetOffsetChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	0e9b      	lsrs	r3, r3, #26
 8001362:	f003 021f 	and.w	r2, r3, #31
 8001366:	e01e      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x186>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fc10 	bl	8000b94 <LL_ADC_GetOffsetChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800138a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800138e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001396:	2320      	movs	r3, #32
 8001398:	e004      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800139a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800139e:	fab3 f383 	clz	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d105      	bne.n	80013be <HAL_ADC_ConfigChannel+0x19e>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	0e9b      	lsrs	r3, r3, #26
 80013b8:	f003 031f 	and.w	r3, r3, #31
 80013bc:	e018      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x1d0>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80013d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80013da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80013e2:	2320      	movs	r3, #32
 80013e4:	e004      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80013e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013ea:	fab3 f383 	clz	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d106      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fbdf 	bl	8000bc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2101      	movs	r1, #1
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fbc3 	bl	8000b94 <LL_ADC_GetOffsetChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10a      	bne.n	800142e <HAL_ADC_ConfigChannel+0x20e>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2101      	movs	r1, #1
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fbb8 	bl	8000b94 <LL_ADC_GetOffsetChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	0e9b      	lsrs	r3, r3, #26
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	e01e      	b.n	800146c <HAL_ADC_ConfigChannel+0x24c>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2101      	movs	r1, #1
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fbad 	bl	8000b94 <LL_ADC_GetOffsetChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001444:	fa93 f3a3 	rbit	r3, r3
 8001448:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800144c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001450:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001454:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800145c:	2320      	movs	r3, #32
 800145e:	e004      	b.n	800146a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001464:	fab3 f383 	clz	r3, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x264>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	0e9b      	lsrs	r3, r3, #26
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	e018      	b.n	80014b6 <HAL_ADC_ConfigChannel+0x296>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001490:	fa93 f3a3 	rbit	r3, r3
 8001494:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001498:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800149c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80014a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80014a8:	2320      	movs	r3, #32
 80014aa:	e004      	b.n	80014b6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80014ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014b0:	fab3 f383 	clz	r3, r3
 80014b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d106      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	2101      	movs	r1, #1
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fb7c 	bl	8000bc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2102      	movs	r1, #2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fb60 	bl	8000b94 <LL_ADC_GetOffsetChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10a      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x2d4>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2102      	movs	r1, #2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fb55 	bl	8000b94 <LL_ADC_GetOffsetChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	0e9b      	lsrs	r3, r3, #26
 80014ee:	f003 021f 	and.w	r2, r3, #31
 80014f2:	e01e      	b.n	8001532 <HAL_ADC_ConfigChannel+0x312>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2102      	movs	r1, #2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fb4a 	bl	8000b94 <LL_ADC_GetOffsetChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800151a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001522:	2320      	movs	r3, #32
 8001524:	e004      	b.n	8001530 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001526:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800153a:	2b00      	cmp	r3, #0
 800153c:	d105      	bne.n	800154a <HAL_ADC_ConfigChannel+0x32a>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	0e9b      	lsrs	r3, r3, #26
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	e016      	b.n	8001578 <HAL_ADC_ConfigChannel+0x358>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001552:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001556:	fa93 f3a3 	rbit	r3, r3
 800155a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800155c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800155e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001562:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800156a:	2320      	movs	r3, #32
 800156c:	e004      	b.n	8001578 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800156e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001572:	fab3 f383 	clz	r3, r3
 8001576:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001578:	429a      	cmp	r2, r3
 800157a:	d106      	bne.n	800158a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2200      	movs	r2, #0
 8001582:	2102      	movs	r1, #2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fb1b 	bl	8000bc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2103      	movs	r1, #3
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff faff 	bl	8000b94 <LL_ADC_GetOffsetChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10a      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x396>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2103      	movs	r1, #3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff faf4 	bl	8000b94 <LL_ADC_GetOffsetChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	0e9b      	lsrs	r3, r3, #26
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	e017      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x3c6>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2103      	movs	r1, #3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fae9 	bl	8000b94 <LL_ADC_GetOffsetChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015c8:	fa93 f3a3 	rbit	r3, r3
 80015cc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80015ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015d0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80015d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80015d8:	2320      	movs	r3, #32
 80015da:	e003      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80015dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015de:	fab3 f383 	clz	r3, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d105      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x3de>
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	0e9b      	lsrs	r3, r3, #26
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	e011      	b.n	8001622 <HAL_ADC_ConfigChannel+0x402>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001606:	fa93 f3a3 	rbit	r3, r3
 800160a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800160c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800160e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001616:	2320      	movs	r3, #32
 8001618:	e003      	b.n	8001622 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800161a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800161c:	fab3 f383 	clz	r3, r3
 8001620:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001622:	429a      	cmp	r2, r3
 8001624:	d106      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2200      	movs	r2, #0
 800162c:	2103      	movs	r1, #3
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fac6 	bl	8000bc0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fbcd 	bl	8000dd8 <LL_ADC_IsEnabled>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	f040 813f 	bne.w	80018c4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6819      	ldr	r1, [r3, #0]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	461a      	mov	r2, r3
 8001654:	f7ff fb3a 	bl	8000ccc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4a8e      	ldr	r2, [pc, #568]	; (8001898 <HAL_ADC_ConfigChannel+0x678>)
 800165e:	4293      	cmp	r3, r2
 8001660:	f040 8130 	bne.w	80018c4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10b      	bne.n	800168c <HAL_ADC_ConfigChannel+0x46c>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0e9b      	lsrs	r3, r3, #26
 800167a:	3301      	adds	r3, #1
 800167c:	f003 031f 	and.w	r3, r3, #31
 8001680:	2b09      	cmp	r3, #9
 8001682:	bf94      	ite	ls
 8001684:	2301      	movls	r3, #1
 8001686:	2300      	movhi	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	e019      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x4a0>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800169a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800169c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800169e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80016a4:	2320      	movs	r3, #32
 80016a6:	e003      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80016a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016aa:	fab3 f383 	clz	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	2b09      	cmp	r3, #9
 80016b8:	bf94      	ite	ls
 80016ba:	2301      	movls	r3, #1
 80016bc:	2300      	movhi	r3, #0
 80016be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d079      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d107      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x4c0>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	0e9b      	lsrs	r3, r3, #26
 80016d6:	3301      	adds	r3, #1
 80016d8:	069b      	lsls	r3, r3, #26
 80016da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016de:	e015      	b.n	800170c <HAL_ADC_ConfigChannel+0x4ec>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016e8:	fa93 f3a3 	rbit	r3, r3
 80016ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80016ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80016f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80016f8:	2320      	movs	r3, #32
 80016fa:	e003      	b.n	8001704 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80016fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016fe:	fab3 f383 	clz	r3, r3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3301      	adds	r3, #1
 8001706:	069b      	lsls	r3, r3, #26
 8001708:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001714:	2b00      	cmp	r3, #0
 8001716:	d109      	bne.n	800172c <HAL_ADC_ConfigChannel+0x50c>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	0e9b      	lsrs	r3, r3, #26
 800171e:	3301      	adds	r3, #1
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	2101      	movs	r1, #1
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	e017      	b.n	800175c <HAL_ADC_ConfigChannel+0x53c>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800173a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800173c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800173e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001744:	2320      	movs	r3, #32
 8001746:	e003      	b.n	8001750 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	3301      	adds	r3, #1
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	2101      	movs	r1, #1
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	ea42 0103 	orr.w	r1, r2, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10a      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x562>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0e9b      	lsrs	r3, r3, #26
 8001772:	3301      	adds	r3, #1
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	051b      	lsls	r3, r3, #20
 8001780:	e018      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x594>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800179a:	2320      	movs	r3, #32
 800179c:	e003      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800179e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	3301      	adds	r3, #1
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017b4:	430b      	orrs	r3, r1
 80017b6:	e080      	b.n	80018ba <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d107      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x5b4>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	0e9b      	lsrs	r3, r3, #26
 80017ca:	3301      	adds	r3, #1
 80017cc:	069b      	lsls	r3, r3, #26
 80017ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017d2:	e015      	b.n	8001800 <HAL_ADC_ConfigChannel+0x5e0>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017dc:	fa93 f3a3 	rbit	r3, r3
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80017e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80017e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80017ec:	2320      	movs	r3, #32
 80017ee:	e003      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80017f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f2:	fab3 f383 	clz	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	069b      	lsls	r3, r3, #26
 80017fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001808:	2b00      	cmp	r3, #0
 800180a:	d109      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x600>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	0e9b      	lsrs	r3, r3, #26
 8001812:	3301      	adds	r3, #1
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	2101      	movs	r1, #1
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	e017      	b.n	8001850 <HAL_ADC_ConfigChannel+0x630>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	fa93 f3a3 	rbit	r3, r3
 800182c:	61fb      	str	r3, [r7, #28]
  return result;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001838:	2320      	movs	r3, #32
 800183a:	e003      	b.n	8001844 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	3301      	adds	r3, #1
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	2101      	movs	r1, #1
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	ea42 0103 	orr.w	r1, r2, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10d      	bne.n	800187c <HAL_ADC_ConfigChannel+0x65c>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	0e9b      	lsrs	r3, r3, #26
 8001866:	3301      	adds	r3, #1
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	3b1e      	subs	r3, #30
 8001874:	051b      	lsls	r3, r3, #20
 8001876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800187a:	e01d      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x698>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	613b      	str	r3, [r7, #16]
  return result;
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d103      	bne.n	800189c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001894:	2320      	movs	r3, #32
 8001896:	e005      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x684>
 8001898:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	3301      	adds	r3, #1
 80018a6:	f003 021f 	and.w	r2, r3, #31
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	3b1e      	subs	r3, #30
 80018b2:	051b      	lsls	r3, r3, #20
 80018b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018b8:	430b      	orrs	r3, r1
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	6892      	ldr	r2, [r2, #8]
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f9d8 	bl	8000c74 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <HAL_ADC_ConfigChannel+0x7a0>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d06c      	beq.n	80019aa <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018d0:	483c      	ldr	r0, [pc, #240]	; (80019c4 <HAL_ADC_ConfigChannel+0x7a4>)
 80018d2:	f7ff f92d 	bl	8000b30 <LL_ADC_GetCommonPathInternalCh>
 80018d6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a3a      	ldr	r2, [pc, #232]	; (80019c8 <HAL_ADC_ConfigChannel+0x7a8>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d127      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80018e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d121      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a35      	ldr	r2, [pc, #212]	; (80019cc <HAL_ADC_ConfigChannel+0x7ac>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d157      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001902:	4619      	mov	r1, r3
 8001904:	482f      	ldr	r0, [pc, #188]	; (80019c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001906:	f7ff f900 	bl	8000b0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <HAL_ADC_ConfigChannel+0x7b0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	099b      	lsrs	r3, r3, #6
 8001910:	4a30      	ldr	r2, [pc, #192]	; (80019d4 <HAL_ADC_ConfigChannel+0x7b4>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	099b      	lsrs	r3, r3, #6
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001924:	e002      	b.n	800192c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3b01      	subs	r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f9      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001932:	e03a      	b.n	80019aa <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a27      	ldr	r2, [pc, #156]	; (80019d8 <HAL_ADC_ConfigChannel+0x7b8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d113      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x746>
 800193e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001942:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10d      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <HAL_ADC_ConfigChannel+0x7ac>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d12a      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001954:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800195c:	4619      	mov	r1, r3
 800195e:	4819      	ldr	r0, [pc, #100]	; (80019c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001960:	f7ff f8d3 	bl	8000b0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001964:	e021      	b.n	80019aa <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <HAL_ADC_ConfigChannel+0x7bc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d11c      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001970:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d116      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a12      	ldr	r2, [pc, #72]	; (80019cc <HAL_ADC_ConfigChannel+0x7ac>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d111      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001986:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800198a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800198e:	4619      	mov	r1, r3
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001992:	f7ff f8ba 	bl	8000b0a <LL_ADC_SetCommonPathInternalCh>
 8001996:	e008      	b.n	80019aa <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199c:	f043 0220 	orr.w	r2, r3, #32
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80019b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	37d8      	adds	r7, #216	; 0xd8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	80080000 	.word	0x80080000
 80019c4:	50040300 	.word	0x50040300
 80019c8:	c7520000 	.word	0xc7520000
 80019cc:	50040000 	.word	0x50040000
 80019d0:	20000054 	.word	0x20000054
 80019d4:	053e2d63 	.word	0x053e2d63
 80019d8:	cb840000 	.word	0xcb840000
 80019dc:	80000001 	.word	0x80000001

080019e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f9f1 	bl	8000dd8 <LL_ADC_IsEnabled>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d169      	bne.n	8001ad0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	4b36      	ldr	r3, [pc, #216]	; (8001adc <ADC_Enable+0xfc>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00d      	beq.n	8001a26 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	f043 0210 	orr.w	r2, r3, #16
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	f043 0201 	orr.w	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e055      	b.n	8001ad2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f9c0 	bl	8000db0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001a30:	482b      	ldr	r0, [pc, #172]	; (8001ae0 <ADC_Enable+0x100>)
 8001a32:	f7ff f87d 	bl	8000b30 <LL_ADC_GetCommonPathInternalCh>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a40:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <ADC_Enable+0x104>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	099b      	lsrs	r3, r3, #6
 8001a46:	4a28      	ldr	r2, [pc, #160]	; (8001ae8 <ADC_Enable+0x108>)
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001a5a:	e002      	b.n	8001a62 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f9      	bne.n	8001a5c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001a68:	f7ff f80c 	bl	8000a84 <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a6e:	e028      	b.n	8001ac2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff f9af 	bl	8000dd8 <LL_ADC_IsEnabled>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d104      	bne.n	8001a8a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff f993 	bl	8000db0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a8a:	f7fe fffb 	bl	8000a84 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d914      	bls.n	8001ac2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d00d      	beq.n	8001ac2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	f043 0210 	orr.w	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	f043 0201 	orr.w	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e007      	b.n	8001ad2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d1cf      	bne.n	8001a70 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	8000003f 	.word	0x8000003f
 8001ae0:	50040300 	.word	0x50040300
 8001ae4:	20000054 	.word	0x20000054
 8001ae8:	053e2d63 	.word	0x053e2d63

08001aec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d14b      	bne.n	8001b9e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d021      	beq.n	8001b64 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff f866 	bl	8000bf6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d032      	beq.n	8001b96 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d12b      	bne.n	8001b96 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d11f      	bne.n	8001b96 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
 8001b62:	e018      	b.n	8001b96 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d111      	bne.n	8001b96 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8e:	f043 0201 	orr.w	r2, r3, #1
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7fe fb28 	bl	80001ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b9c:	e00e      	b.n	8001bbc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f7ff fb2e 	bl	800120c <HAL_ADC_ErrorCallback>
}
 8001bb0:	e004      	b.n	8001bbc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7fe fafa 	bl	80001cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	f043 0204 	orr.w	r2, r3, #4
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff fb00 	bl	800120c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c46:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__NVIC_GetPriorityGrouping+0x18>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f003 0307 	and.w	r3, r3, #7
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	db0b      	blt.n	8001ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	f003 021f 	and.w	r2, r3, #31
 8001c90:	4907      	ldr	r1, [pc, #28]	; (8001cb0 <__NVIC_EnableIRQ+0x38>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	2001      	movs	r0, #1
 8001c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000e100 	.word	0xe000e100

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	db0a      	blt.n	8001cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	490c      	ldr	r1, [pc, #48]	; (8001d00 <__NVIC_SetPriority+0x4c>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cdc:	e00a      	b.n	8001cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4908      	ldr	r1, [pc, #32]	; (8001d04 <__NVIC_SetPriority+0x50>)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3b04      	subs	r3, #4
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	761a      	strb	r2, [r3, #24]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f1c3 0307 	rsb	r3, r3, #7
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf28      	it	cs
 8001d26:	2304      	movcs	r3, #4
 8001d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d902      	bls.n	8001d38 <NVIC_EncodePriority+0x30>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b03      	subs	r3, #3
 8001d36:	e000      	b.n	8001d3a <NVIC_EncodePriority+0x32>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	4313      	orrs	r3, r2
         );
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d80:	d301      	bcc.n	8001d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00f      	b.n	8001da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <SysTick_Config+0x40>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8e:	210f      	movs	r1, #15
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d94:	f7ff ff8e 	bl	8001cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <SysTick_Config+0x40>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <SysTick_Config+0x40>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	e000e010 	.word	0xe000e010

08001db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff29 	bl	8001c14 <__NVIC_SetPriorityGrouping>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff ff3e 	bl	8001c5c <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff8e 	bl	8001d08 <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5d 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff31 	bl	8001c78 <__NVIC_EnableIRQ>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffa2 	bl	8001d70 <SysTick_Config>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e014      	b.n	8001e72 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	791b      	ldrb	r3, [r3, #4]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d105      	bne.n	8001e5e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7fe fca3 	bl	80007a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2202      	movs	r2, #2
 8001e62:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	795b      	ldrb	r3, [r3, #5]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_DAC_Start_DMA+0x1e>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e0ab      	b.n	8001ff2 <HAL_DAC_Start_DMA+0x176>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d12f      	bne.n	8001f0c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a52      	ldr	r2, [pc, #328]	; (8001ffc <HAL_DAC_Start_DMA+0x180>)
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	4a51      	ldr	r2, [pc, #324]	; (8002000 <HAL_DAC_Start_DMA+0x184>)
 8001eba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4a50      	ldr	r2, [pc, #320]	; (8002004 <HAL_DAC_Start_DMA+0x188>)
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ed2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d013      	beq.n	8001f02 <HAL_DAC_Start_DMA+0x86>
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d845      	bhi.n	8001f6c <HAL_DAC_Start_DMA+0xf0>
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_DAC_Start_DMA+0x72>
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d005      	beq.n	8001ef8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001eec:	e03e      	b.n	8001f6c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3308      	adds	r3, #8
 8001ef4:	613b      	str	r3, [r7, #16]
        break;
 8001ef6:	e03c      	b.n	8001f72 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	330c      	adds	r3, #12
 8001efe:	613b      	str	r3, [r7, #16]
        break;
 8001f00:	e037      	b.n	8001f72 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3310      	adds	r3, #16
 8001f08:	613b      	str	r3, [r7, #16]
        break;
 8001f0a:	e032      	b.n	8001f72 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4a3d      	ldr	r2, [pc, #244]	; (8002008 <HAL_DAC_Start_DMA+0x18c>)
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a3c      	ldr	r2, [pc, #240]	; (800200c <HAL_DAC_Start_DMA+0x190>)
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4a3b      	ldr	r2, [pc, #236]	; (8002010 <HAL_DAC_Start_DMA+0x194>)
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f32:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d013      	beq.n	8001f62 <HAL_DAC_Start_DMA+0xe6>
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d817      	bhi.n	8001f70 <HAL_DAC_Start_DMA+0xf4>
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_DAC_Start_DMA+0xd2>
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d005      	beq.n	8001f58 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001f4c:	e010      	b.n	8001f70 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	3314      	adds	r3, #20
 8001f54:	613b      	str	r3, [r7, #16]
        break;
 8001f56:	e00c      	b.n	8001f72 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3318      	adds	r3, #24
 8001f5e:	613b      	str	r3, [r7, #16]
        break;
 8001f60:	e007      	b.n	8001f72 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	331c      	adds	r3, #28
 8001f68:	613b      	str	r3, [r7, #16]
        break;
 8001f6a:	e002      	b.n	8001f72 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001f6c:	bf00      	nop
 8001f6e:	e000      	b.n	8001f72 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001f70:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d111      	bne.n	8001f9c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f86:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6898      	ldr	r0, [r3, #8]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	f000 fab9 	bl	8002508 <HAL_DMA_Start_IT>
 8001f96:	4603      	mov	r3, r0
 8001f98:	75fb      	strb	r3, [r7, #23]
 8001f9a:	e010      	b.n	8001fbe <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001faa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	68d8      	ldr	r0, [r3, #12]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	f000 faa7 	bl	8002508 <HAL_DMA_Start_IT>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001fc4:	7dfb      	ldrb	r3, [r7, #23]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e005      	b.n	8001ff0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f043 0204 	orr.w	r2, r3, #4
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	08002285 	.word	0x08002285
 8002000:	080022a7 	.word	0x080022a7
 8002004:	080022c3 	.word	0x080022c3
 8002008:	0800232d 	.word	0x0800232d
 800200c:	0800234f 	.word	0x0800234f
 8002010:	0800236b 	.word	0x0800236b

08002014 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	795b      	ldrb	r3, [r3, #5]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_DAC_ConfigChannel+0x1c>
 8002068:	2302      	movs	r3, #2
 800206a:	e107      	b.n	800227c <HAL_DAC_ConfigChannel+0x22c>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2202      	movs	r2, #2
 8002076:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b04      	cmp	r3, #4
 800207e:	d174      	bne.n	800216a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002080:	f7fe fd00 	bl	8000a84 <HAL_GetTick>
 8002084:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d134      	bne.n	80020f6 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800208c:	e011      	b.n	80020b2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800208e:	f7fe fcf9 	bl	8000a84 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d90a      	bls.n	80020b2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f043 0208 	orr.w	r2, r3, #8
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2203      	movs	r2, #3
 80020ac:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e0e4      	b.n	800227c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1e6      	bne.n	800208e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80020c0:	2001      	movs	r0, #1
 80020c2:	f7fe fceb 	bl	8000a9c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	6992      	ldr	r2, [r2, #24]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
 80020d0:	e01e      	b.n	8002110 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80020d2:	f7fe fcd7 	bl	8000a84 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d90a      	bls.n	80020f6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	f043 0208 	orr.w	r2, r3, #8
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2203      	movs	r2, #3
 80020f0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e0c2      	b.n	800227c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	dbe8      	blt.n	80020d2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002100:	2001      	movs	r0, #1
 8002102:	f7fe fccb 	bl	8000a9c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	6992      	ldr	r2, [r2, #24]
 800210e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	ea02 0103 	and.w	r1, r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	409a      	lsls	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	21ff      	movs	r1, #255	; 0xff
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	ea02 0103 	and.w	r1, r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	6a1a      	ldr	r2, [r3, #32]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	409a      	lsls	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d11d      	bne.n	80021ae <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	221f      	movs	r2, #31
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2207      	movs	r2, #7
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6819      	ldr	r1, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	400a      	ands	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6819      	ldr	r1, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	22c0      	movs	r2, #192	; 0xc0
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43da      	mvns	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	400a      	ands	r2, r1
 800226c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f7ff febe 	bl	8002014 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	711a      	strb	r2, [r3, #4]
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f7ff feb7 	bl	8002028 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f043 0204 	orr.w	r2, r3, #4
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f7ff fead 	bl	800203c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	711a      	strb	r2, [r3, #4]
}
 80022e8:	bf00      	nop
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f7ff ffd8 	bl	80022f0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	711a      	strb	r2, [r3, #4]
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f7ff ffd1 	bl	8002304 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f043 0204 	orr.w	r2, r3, #4
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f7ff ffc7 	bl	8002318 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	711a      	strb	r2, [r3, #4]
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e098      	b.n	80024dc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	4b4d      	ldr	r3, [pc, #308]	; (80024e8 <HAL_DMA_Init+0x150>)
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d80f      	bhi.n	80023d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <HAL_DMA_Init+0x154>)
 80023be:	4413      	add	r3, r2
 80023c0:	4a4b      	ldr	r2, [pc, #300]	; (80024f0 <HAL_DMA_Init+0x158>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	009a      	lsls	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a48      	ldr	r2, [pc, #288]	; (80024f4 <HAL_DMA_Init+0x15c>)
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
 80023d4:	e00e      	b.n	80023f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	4b46      	ldr	r3, [pc, #280]	; (80024f8 <HAL_DMA_Init+0x160>)
 80023de:	4413      	add	r3, r2
 80023e0:	4a43      	ldr	r2, [pc, #268]	; (80024f0 <HAL_DMA_Init+0x158>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	009a      	lsls	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a42      	ldr	r2, [pc, #264]	; (80024fc <HAL_DMA_Init+0x164>)
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800240a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002418:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002424:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002430:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800244e:	d039      	beq.n	80024c4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	4a27      	ldr	r2, [pc, #156]	; (80024f4 <HAL_DMA_Init+0x15c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d11a      	bne.n	8002490 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800245a:	4b29      	ldr	r3, [pc, #164]	; (8002500 <HAL_DMA_Init+0x168>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f003 031c 	and.w	r3, r3, #28
 8002466:	210f      	movs	r1, #15
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	4924      	ldr	r1, [pc, #144]	; (8002500 <HAL_DMA_Init+0x168>)
 8002470:	4013      	ands	r3, r2
 8002472:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_DMA_Init+0x168>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	f003 031c 	and.w	r3, r3, #28
 8002484:	fa01 f303 	lsl.w	r3, r1, r3
 8002488:	491d      	ldr	r1, [pc, #116]	; (8002500 <HAL_DMA_Init+0x168>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
 800248e:	e019      	b.n	80024c4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <HAL_DMA_Init+0x16c>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	f003 031c 	and.w	r3, r3, #28
 800249c:	210f      	movs	r1, #15
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	4917      	ldr	r1, [pc, #92]	; (8002504 <HAL_DMA_Init+0x16c>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024aa:	4b16      	ldr	r3, [pc, #88]	; (8002504 <HAL_DMA_Init+0x16c>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6859      	ldr	r1, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f003 031c 	and.w	r3, r3, #28
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	4911      	ldr	r1, [pc, #68]	; (8002504 <HAL_DMA_Init+0x16c>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	40020407 	.word	0x40020407
 80024ec:	bffdfff8 	.word	0xbffdfff8
 80024f0:	cccccccd 	.word	0xcccccccd
 80024f4:	40020000 	.word	0x40020000
 80024f8:	bffdfbf8 	.word	0xbffdfbf8
 80024fc:	40020400 	.word	0x40020400
 8002500:	400200a8 	.word	0x400200a8
 8002504:	400204a8 	.word	0x400204a8

08002508 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_DMA_Start_IT+0x20>
 8002524:	2302      	movs	r3, #2
 8002526:	e04b      	b.n	80025c0 <HAL_DMA_Start_IT+0xb8>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d13a      	bne.n	80025b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f8e0 	bl	8002726 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 020e 	orr.w	r2, r2, #14
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e00f      	b.n	80025a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0204 	bic.w	r2, r2, #4
 800258e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 020a 	orr.w	r2, r2, #10
 800259e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	e005      	b.n	80025be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80025ba:	2302      	movs	r3, #2
 80025bc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025be:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f003 031c 	and.w	r3, r3, #28
 80025e8:	2204      	movs	r2, #4
 80025ea:	409a      	lsls	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d026      	beq.n	8002642 <HAL_DMA_IRQHandler+0x7a>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d021      	beq.n	8002642 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d107      	bne.n	800261c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0204 	bic.w	r2, r2, #4
 800261a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002620:	f003 021c 	and.w	r2, r3, #28
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	2104      	movs	r1, #4
 800262a:	fa01 f202 	lsl.w	r2, r1, r2
 800262e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	2b00      	cmp	r3, #0
 8002636:	d071      	beq.n	800271c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002640:	e06c      	b.n	800271c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f003 031c 	and.w	r3, r3, #28
 800264a:	2202      	movs	r2, #2
 800264c:	409a      	lsls	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d02e      	beq.n	80026b4 <HAL_DMA_IRQHandler+0xec>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d029      	beq.n	80026b4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10b      	bne.n	8002686 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 020a 	bic.w	r2, r2, #10
 800267c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f003 021c 	and.w	r2, r3, #28
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	2102      	movs	r1, #2
 8002694:	fa01 f202 	lsl.w	r2, r1, r2
 8002698:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d038      	beq.n	800271c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026b2:	e033      	b.n	800271c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	f003 031c 	and.w	r3, r3, #28
 80026bc:	2208      	movs	r2, #8
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d02a      	beq.n	800271e <HAL_DMA_IRQHandler+0x156>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d025      	beq.n	800271e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 020e 	bic.w	r2, r2, #14
 80026e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f003 021c 	and.w	r2, r3, #28
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	2101      	movs	r1, #1
 80026f0:	fa01 f202 	lsl.w	r2, r1, r2
 80026f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800271c:	bf00      	nop
 800271e:	bf00      	nop
}
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	f003 021c 	and.w	r2, r3, #28
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2101      	movs	r1, #1
 8002742:	fa01 f202 	lsl.w	r2, r1, r2
 8002746:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b10      	cmp	r3, #16
 8002756:	d108      	bne.n	800276a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002768:	e007      	b.n	800277a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	60da      	str	r2, [r3, #12]
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002796:	e154      	b.n	8002a42 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	2101      	movs	r1, #1
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	4013      	ands	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8146 	beq.w	8002a3c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d005      	beq.n	80027c8 <HAL_GPIO_Init+0x40>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d130      	bne.n	800282a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027fe:	2201      	movs	r2, #1
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4013      	ands	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	f003 0201 	and.w	r2, r3, #1
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b03      	cmp	r3, #3
 8002834:	d017      	beq.n	8002866 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	2203      	movs	r2, #3
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d123      	bne.n	80028ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	08da      	lsrs	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3208      	adds	r2, #8
 800287a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	220f      	movs	r2, #15
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	08da      	lsrs	r2, r3, #3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3208      	adds	r2, #8
 80028b4:	6939      	ldr	r1, [r7, #16]
 80028b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	2203      	movs	r2, #3
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0203 	and.w	r2, r3, #3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80a0 	beq.w	8002a3c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fc:	4b58      	ldr	r3, [pc, #352]	; (8002a60 <HAL_GPIO_Init+0x2d8>)
 80028fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002900:	4a57      	ldr	r2, [pc, #348]	; (8002a60 <HAL_GPIO_Init+0x2d8>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6613      	str	r3, [r2, #96]	; 0x60
 8002908:	4b55      	ldr	r3, [pc, #340]	; (8002a60 <HAL_GPIO_Init+0x2d8>)
 800290a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002914:	4a53      	ldr	r2, [pc, #332]	; (8002a64 <HAL_GPIO_Init+0x2dc>)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	3302      	adds	r3, #2
 800291c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002920:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	220f      	movs	r2, #15
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800293e:	d019      	beq.n	8002974 <HAL_GPIO_Init+0x1ec>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a49      	ldr	r2, [pc, #292]	; (8002a68 <HAL_GPIO_Init+0x2e0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d013      	beq.n	8002970 <HAL_GPIO_Init+0x1e8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a48      	ldr	r2, [pc, #288]	; (8002a6c <HAL_GPIO_Init+0x2e4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d00d      	beq.n	800296c <HAL_GPIO_Init+0x1e4>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a47      	ldr	r2, [pc, #284]	; (8002a70 <HAL_GPIO_Init+0x2e8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d007      	beq.n	8002968 <HAL_GPIO_Init+0x1e0>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a46      	ldr	r2, [pc, #280]	; (8002a74 <HAL_GPIO_Init+0x2ec>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_GPIO_Init+0x1dc>
 8002960:	2304      	movs	r3, #4
 8002962:	e008      	b.n	8002976 <HAL_GPIO_Init+0x1ee>
 8002964:	2307      	movs	r3, #7
 8002966:	e006      	b.n	8002976 <HAL_GPIO_Init+0x1ee>
 8002968:	2303      	movs	r3, #3
 800296a:	e004      	b.n	8002976 <HAL_GPIO_Init+0x1ee>
 800296c:	2302      	movs	r3, #2
 800296e:	e002      	b.n	8002976 <HAL_GPIO_Init+0x1ee>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <HAL_GPIO_Init+0x1ee>
 8002974:	2300      	movs	r3, #0
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	f002 0203 	and.w	r2, r2, #3
 800297c:	0092      	lsls	r2, r2, #2
 800297e:	4093      	lsls	r3, r2
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002986:	4937      	ldr	r1, [pc, #220]	; (8002a64 <HAL_GPIO_Init+0x2dc>)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	089b      	lsrs	r3, r3, #2
 800298c:	3302      	adds	r3, #2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002994:	4b38      	ldr	r3, [pc, #224]	; (8002a78 <HAL_GPIO_Init+0x2f0>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	43db      	mvns	r3, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029b8:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <HAL_GPIO_Init+0x2f0>)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029be:	4b2e      	ldr	r3, [pc, #184]	; (8002a78 <HAL_GPIO_Init+0x2f0>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	43db      	mvns	r3, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029e2:	4a25      	ldr	r2, [pc, #148]	; (8002a78 <HAL_GPIO_Init+0x2f0>)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029e8:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <HAL_GPIO_Init+0x2f0>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a0c:	4a1a      	ldr	r2, [pc, #104]	; (8002a78 <HAL_GPIO_Init+0x2f0>)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a12:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_GPIO_Init+0x2f0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a36:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <HAL_GPIO_Init+0x2f0>)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f47f aea3 	bne.w	8002798 <HAL_GPIO_Init+0x10>
  }
}
 8002a52:	bf00      	nop
 8002a54:	bf00      	nop
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40010000 	.word	0x40010000
 8002a68:	48000400 	.word	0x48000400
 8002a6c:	48000800 	.word	0x48000800
 8002a70:	48000c00 	.word	0x48000c00
 8002a74:	48001000 	.word	0x48001000
 8002a78:	40010400 	.word	0x40010400

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a98:	e002      	b.n	8002aa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002abe:	887a      	ldrh	r2, [r7, #2]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	041a      	lsls	r2, r3, #16
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	43d9      	mvns	r1, r3
 8002aca:	887b      	ldrh	r3, [r7, #2]
 8002acc:	400b      	ands	r3, r1
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	619a      	str	r2, [r3, #24]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40007000 	.word	0x40007000

08002afc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b0a:	d130      	bne.n	8002b6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b18:	d038      	beq.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b22:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2232      	movs	r2, #50	; 0x32
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0c9b      	lsrs	r3, r3, #18
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b40:	e002      	b.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b54:	d102      	bne.n	8002b5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f2      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b68:	d110      	bne.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e00f      	b.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	d007      	beq.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b84:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	20000054 	.word	0x20000054
 8002ba4:	431bde83 	.word	0x431bde83

08002ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e3fe      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bba:	4ba1      	ldr	r3, [pc, #644]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc4:	4b9e      	ldr	r3, [pc, #632]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80e4 	beq.w	8002da4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x4a>
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2b0c      	cmp	r3, #12
 8002be6:	f040 808b 	bne.w	8002d00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	f040 8087 	bne.w	8002d00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bf2:	4b93      	ldr	r3, [pc, #588]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_RCC_OscConfig+0x62>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e3d6      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	4b8c      	ldr	r3, [pc, #560]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d004      	beq.n	8002c24 <HAL_RCC_OscConfig+0x7c>
 8002c1a:	4b89      	ldr	r3, [pc, #548]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c22:	e005      	b.n	8002c30 <HAL_RCC_OscConfig+0x88>
 8002c24:	4b86      	ldr	r3, [pc, #536]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d223      	bcs.n	8002c7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fd53 	bl	80036e4 <RCC_SetFlashLatencyFromMSIRange>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e3b7      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c48:	4b7d      	ldr	r3, [pc, #500]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a7c      	ldr	r2, [pc, #496]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c4e:	f043 0308 	orr.w	r3, r3, #8
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b7a      	ldr	r3, [pc, #488]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	4977      	ldr	r1, [pc, #476]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c66:	4b76      	ldr	r3, [pc, #472]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	4972      	ldr	r1, [pc, #456]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]
 8002c7a:	e025      	b.n	8002cc8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c7c:	4b70      	ldr	r3, [pc, #448]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a6f      	ldr	r2, [pc, #444]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c82:	f043 0308 	orr.w	r3, r3, #8
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b6d      	ldr	r3, [pc, #436]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	496a      	ldr	r1, [pc, #424]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c9a:	4b69      	ldr	r3, [pc, #420]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	4965      	ldr	r1, [pc, #404]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fd13 	bl	80036e4 <RCC_SetFlashLatencyFromMSIRange>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e377      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cc8:	f000 fc80 	bl	80035cc <HAL_RCC_GetSysClockFreq>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	4b5c      	ldr	r3, [pc, #368]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	495a      	ldr	r1, [pc, #360]	; (8002e44 <HAL_RCC_OscConfig+0x29c>)
 8002cda:	5ccb      	ldrb	r3, [r1, r3]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce4:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <HAL_RCC_OscConfig+0x2a0>)
 8002ce6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ce8:	4b58      	ldr	r3, [pc, #352]	; (8002e4c <HAL_RCC_OscConfig+0x2a4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd fe79 	bl	80009e4 <HAL_InitTick>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d052      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	e35b      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d032      	beq.n	8002d6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d08:	4b4d      	ldr	r3, [pc, #308]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a4c      	ldr	r2, [pc, #304]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d14:	f7fd feb6 	bl	8000a84 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d1c:	f7fd feb2 	bl	8000a84 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e344      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d2e:	4b44      	ldr	r3, [pc, #272]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3a:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a40      	ldr	r2, [pc, #256]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d40:	f043 0308 	orr.w	r3, r3, #8
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	493b      	ldr	r1, [pc, #236]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d58:	4b39      	ldr	r3, [pc, #228]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	4936      	ldr	r1, [pc, #216]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
 8002d6c:	e01a      	b.n	8002da4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d6e:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d7a:	f7fd fe83 	bl	8000a84 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d82:	f7fd fe7f 	bl	8000a84 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e311      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d94:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f0      	bne.n	8002d82 <HAL_RCC_OscConfig+0x1da>
 8002da0:	e000      	b.n	8002da4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002da2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d074      	beq.n	8002e9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x21a>
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	2b0c      	cmp	r3, #12
 8002dba:	d10e      	bne.n	8002dda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d10b      	bne.n	8002dda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc2:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d064      	beq.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d160      	bne.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e2ee      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_OscConfig+0x24a>
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	e01d      	b.n	8002e2e <HAL_RCC_OscConfig+0x286>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfa:	d10c      	bne.n	8002e16 <HAL_RCC_OscConfig+0x26e>
 8002dfc:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0f      	ldr	r2, [pc, #60]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0c      	ldr	r2, [pc, #48]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	e00b      	b.n	8002e2e <HAL_RCC_OscConfig+0x286>
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a06      	ldr	r2, [pc, #24]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01c      	beq.n	8002e70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7fd fe25 	bl	8000a84 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e3c:	e011      	b.n	8002e62 <HAL_RCC_OscConfig+0x2ba>
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	080047f8 	.word	0x080047f8
 8002e48:	20000054 	.word	0x20000054
 8002e4c:	20000058 	.word	0x20000058
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fd fe18 	bl	8000a84 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e2aa      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e62:	4baf      	ldr	r3, [pc, #700]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x2a8>
 8002e6e:	e014      	b.n	8002e9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fd fe08 	bl	8000a84 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fd fe04 	bl	8000a84 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e296      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e8a:	4ba5      	ldr	r3, [pc, #660]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2d0>
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d060      	beq.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x310>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d119      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d116      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb8:	4b99      	ldr	r3, [pc, #612]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x328>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e273      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed0:	4b93      	ldr	r3, [pc, #588]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	4990      	ldr	r1, [pc, #576]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee4:	e040      	b.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d023      	beq.n	8002f36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eee:	4b8c      	ldr	r3, [pc, #560]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a8b      	ldr	r2, [pc, #556]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fd fdc3 	bl	8000a84 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f02:	f7fd fdbf 	bl	8000a84 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e251      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f14:	4b82      	ldr	r3, [pc, #520]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f20:	4b7f      	ldr	r3, [pc, #508]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	497c      	ldr	r1, [pc, #496]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]
 8002f34:	e018      	b.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f36:	4b7a      	ldr	r3, [pc, #488]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a79      	ldr	r2, [pc, #484]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7fd fd9f 	bl	8000a84 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4a:	f7fd fd9b 	bl	8000a84 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e22d      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f5c:	4b70      	ldr	r3, [pc, #448]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d03c      	beq.n	8002fee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01c      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7c:	4b68      	ldr	r3, [pc, #416]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f82:	4a67      	ldr	r2, [pc, #412]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fd fd7a 	bl	8000a84 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f94:	f7fd fd76 	bl	8000a84 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e208      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fa6:	4b5e      	ldr	r3, [pc, #376]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ef      	beq.n	8002f94 <HAL_RCC_OscConfig+0x3ec>
 8002fb4:	e01b      	b.n	8002fee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb6:	4b5a      	ldr	r3, [pc, #360]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fbc:	4a58      	ldr	r2, [pc, #352]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc6:	f7fd fd5d 	bl	8000a84 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fce:	f7fd fd59 	bl	8000a84 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e1eb      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fe0:	4b4f      	ldr	r3, [pc, #316]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1ef      	bne.n	8002fce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80a6 	beq.w	8003148 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003000:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10d      	bne.n	8003028 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b44      	ldr	r3, [pc, #272]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	4a43      	ldr	r2, [pc, #268]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	6593      	str	r3, [r2, #88]	; 0x58
 8003018:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003024:	2301      	movs	r3, #1
 8003026:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003028:	4b3e      	ldr	r3, [pc, #248]	; (8003124 <HAL_RCC_OscConfig+0x57c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d118      	bne.n	8003066 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003034:	4b3b      	ldr	r3, [pc, #236]	; (8003124 <HAL_RCC_OscConfig+0x57c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a3a      	ldr	r2, [pc, #232]	; (8003124 <HAL_RCC_OscConfig+0x57c>)
 800303a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003040:	f7fd fd20 	bl	8000a84 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003048:	f7fd fd1c 	bl	8000a84 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e1ae      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800305a:	4b32      	ldr	r3, [pc, #200]	; (8003124 <HAL_RCC_OscConfig+0x57c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d108      	bne.n	8003080 <HAL_RCC_OscConfig+0x4d8>
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	4a2a      	ldr	r2, [pc, #168]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800307e:	e024      	b.n	80030ca <HAL_RCC_OscConfig+0x522>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b05      	cmp	r3, #5
 8003086:	d110      	bne.n	80030aa <HAL_RCC_OscConfig+0x502>
 8003088:	4b25      	ldr	r3, [pc, #148]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	4a24      	ldr	r2, [pc, #144]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8003090:	f043 0304 	orr.w	r3, r3, #4
 8003094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003098:	4b21      	ldr	r3, [pc, #132]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	4a20      	ldr	r2, [pc, #128]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a8:	e00f      	b.n	80030ca <HAL_RCC_OscConfig+0x522>
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b0:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ba:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c0:	4a17      	ldr	r2, [pc, #92]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030c2:	f023 0304 	bic.w	r3, r3, #4
 80030c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d2:	f7fd fcd7 	bl	8000a84 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fd fcd3 	bl	8000a84 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e163      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0ed      	beq.n	80030da <HAL_RCC_OscConfig+0x532>
 80030fe:	e01a      	b.n	8003136 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7fd fcc0 	bl	8000a84 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003106:	e00f      	b.n	8003128 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f7fd fcbc 	bl	8000a84 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	; 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d906      	bls.n	8003128 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e14c      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003128:	4ba5      	ldr	r3, [pc, #660]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e8      	bne.n	8003108 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003136:	7ffb      	ldrb	r3, [r7, #31]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d105      	bne.n	8003148 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313c:	4ba0      	ldr	r3, [pc, #640]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	4a9f      	ldr	r2, [pc, #636]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 8003142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003146:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d03c      	beq.n	80031ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01c      	beq.n	8003196 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800315c:	4b98      	ldr	r3, [pc, #608]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 800315e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003162:	4a97      	ldr	r2, [pc, #604]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316c:	f7fd fc8a 	bl	8000a84 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003174:	f7fd fc86 	bl	8000a84 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e118      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003186:	4b8e      	ldr	r3, [pc, #568]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 8003188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0ef      	beq.n	8003174 <HAL_RCC_OscConfig+0x5cc>
 8003194:	e01b      	b.n	80031ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003196:	4b8a      	ldr	r3, [pc, #552]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 8003198:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800319c:	4a88      	ldr	r2, [pc, #544]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 800319e:	f023 0301 	bic.w	r3, r3, #1
 80031a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a6:	f7fd fc6d 	bl	8000a84 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ae:	f7fd fc69 	bl	8000a84 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e0fb      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031c0:	4b7f      	ldr	r3, [pc, #508]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 80031c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1ef      	bne.n	80031ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 80ef 	beq.w	80033b6 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	2b02      	cmp	r3, #2
 80031de:	f040 80c5 	bne.w	800336c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031e2:	4b77      	ldr	r3, [pc, #476]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 0203 	and.w	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d12c      	bne.n	8003250 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	3b01      	subs	r3, #1
 8003202:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d123      	bne.n	8003250 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003212:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d11b      	bne.n	8003250 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d113      	bne.n	8003250 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	3b01      	subs	r3, #1
 8003236:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d109      	bne.n	8003250 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	3b01      	subs	r3, #1
 800324a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d067      	beq.n	8003320 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b0c      	cmp	r3, #12
 8003254:	d062      	beq.n	800331c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003256:	4b5a      	ldr	r3, [pc, #360]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0a8      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003266:	4b56      	ldr	r3, [pc, #344]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a55      	ldr	r2, [pc, #340]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 800326c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003270:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003272:	f7fd fc07 	bl	8000a84 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327a:	f7fd fc03 	bl	8000a84 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e095      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800328c:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003298:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	4b49      	ldr	r3, [pc, #292]	; (80033c4 <HAL_RCC_OscConfig+0x81c>)
 800329e:	4013      	ands	r3, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032a8:	3a01      	subs	r2, #1
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	4311      	orrs	r1, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032b2:	0212      	lsls	r2, r2, #8
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032ba:	0852      	lsrs	r2, r2, #1
 80032bc:	3a01      	subs	r2, #1
 80032be:	0552      	lsls	r2, r2, #21
 80032c0:	4311      	orrs	r1, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032c6:	0852      	lsrs	r2, r2, #1
 80032c8:	3a01      	subs	r2, #1
 80032ca:	0652      	lsls	r2, r2, #25
 80032cc:	4311      	orrs	r1, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032d2:	06d2      	lsls	r2, r2, #27
 80032d4:	430a      	orrs	r2, r1
 80032d6:	493a      	ldr	r1, [pc, #232]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032dc:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a37      	ldr	r2, [pc, #220]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 80032e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032e8:	4b35      	ldr	r3, [pc, #212]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a34      	ldr	r2, [pc, #208]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 80032ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032f4:	f7fd fbc6 	bl	8000a84 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fd fbc2 	bl	8000a84 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e054      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330e:	4b2c      	ldr	r3, [pc, #176]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800331a:	e04c      	b.n	80033b6 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e04b      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003320:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d144      	bne.n	80033b6 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800332c:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a23      	ldr	r2, [pc, #140]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 8003332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003336:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003338:	4b21      	ldr	r3, [pc, #132]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a20      	ldr	r2, [pc, #128]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 800333e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003342:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003344:	f7fd fb9e 	bl	8000a84 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334c:	f7fd fb9a 	bl	8000a84 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e02c      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335e:	4b18      	ldr	r3, [pc, #96]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x7a4>
 800336a:	e024      	b.n	80033b6 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b0c      	cmp	r3, #12
 8003370:	d01f      	beq.n	80033b2 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003372:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 8003378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800337c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7fd fb81 	bl	8000a84 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003386:	f7fd fb7d 	bl	8000a84 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e00f      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f0      	bne.n	8003386 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	4905      	ldr	r1, [pc, #20]	; (80033c0 <HAL_RCC_OscConfig+0x818>)
 80033aa:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <HAL_RCC_OscConfig+0x820>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	60cb      	str	r3, [r1, #12]
 80033b0:	e001      	b.n	80033b6 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000
 80033c4:	019d808c 	.word	0x019d808c
 80033c8:	feeefffc 	.word	0xfeeefffc

080033cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0e7      	b.n	80035b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e0:	4b75      	ldr	r3, [pc, #468]	; (80035b8 <HAL_RCC_ClockConfig+0x1ec>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d910      	bls.n	8003410 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b72      	ldr	r3, [pc, #456]	; (80035b8 <HAL_RCC_ClockConfig+0x1ec>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 0207 	bic.w	r2, r3, #7
 80033f6:	4970      	ldr	r1, [pc, #448]	; (80035b8 <HAL_RCC_ClockConfig+0x1ec>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b6e      	ldr	r3, [pc, #440]	; (80035b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0cf      	b.n	80035b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d010      	beq.n	800343e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	4b66      	ldr	r3, [pc, #408]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003428:	429a      	cmp	r2, r3
 800342a:	d908      	bls.n	800343e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800342c:	4b63      	ldr	r3, [pc, #396]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4960      	ldr	r1, [pc, #384]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d04c      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d107      	bne.n	8003462 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003452:	4b5a      	ldr	r3, [pc, #360]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d121      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e0a6      	b.n	80035b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800346a:	4b54      	ldr	r3, [pc, #336]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d115      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e09a      	b.n	80035b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d107      	bne.n	8003492 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003482:	4b4e      	ldr	r3, [pc, #312]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e08e      	b.n	80035b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003492:	4b4a      	ldr	r3, [pc, #296]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e086      	b.n	80035b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034a2:	4b46      	ldr	r3, [pc, #280]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f023 0203 	bic.w	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4943      	ldr	r1, [pc, #268]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b4:	f7fd fae6 	bl	8000a84 <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034bc:	f7fd fae2 	bl	8000a84 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e06e      	b.n	80035b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d2:	4b3a      	ldr	r3, [pc, #232]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 020c 	and.w	r2, r3, #12
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d1eb      	bne.n	80034bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d010      	beq.n	8003512 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	4b31      	ldr	r3, [pc, #196]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d208      	bcs.n	8003512 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003500:	4b2e      	ldr	r3, [pc, #184]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	492b      	ldr	r1, [pc, #172]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003512:	4b29      	ldr	r3, [pc, #164]	; (80035b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d210      	bcs.n	8003542 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003520:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 0207 	bic.w	r2, r3, #7
 8003528:	4923      	ldr	r1, [pc, #140]	; (80035b8 <HAL_RCC_ClockConfig+0x1ec>)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003530:	4b21      	ldr	r3, [pc, #132]	; (80035b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d001      	beq.n	8003542 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e036      	b.n	80035b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800354e:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	4918      	ldr	r1, [pc, #96]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 800355c:	4313      	orrs	r3, r2
 800355e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d009      	beq.n	8003580 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4910      	ldr	r1, [pc, #64]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 800357c:	4313      	orrs	r3, r2
 800357e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003580:	f000 f824 	bl	80035cc <HAL_RCC_GetSysClockFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <HAL_RCC_ClockConfig+0x1f0>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	490b      	ldr	r1, [pc, #44]	; (80035c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
 800359c:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <HAL_RCC_ClockConfig+0x1f8>)
 800359e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <HAL_RCC_ClockConfig+0x1fc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fd fa1d 	bl	80009e4 <HAL_InitTick>
 80035aa:	4603      	mov	r3, r0
 80035ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80035ae:	7afb      	ldrb	r3, [r7, #11]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40022000 	.word	0x40022000
 80035bc:	40021000 	.word	0x40021000
 80035c0:	080047f8 	.word	0x080047f8
 80035c4:	20000054 	.word	0x20000054
 80035c8:	20000058 	.word	0x20000058

080035cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b089      	sub	sp, #36	; 0x24
 80035d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035da:	4b3e      	ldr	r3, [pc, #248]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035e4:	4b3b      	ldr	r3, [pc, #236]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x34>
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b0c      	cmp	r3, #12
 80035f8:	d121      	bne.n	800363e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d11e      	bne.n	800363e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003600:	4b34      	ldr	r3, [pc, #208]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d107      	bne.n	800361c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800360c:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800360e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	e005      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800361c:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003628:	4a2b      	ldr	r2, [pc, #172]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003630:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10d      	bne.n	8003654 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800363c:	e00a      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b04      	cmp	r3, #4
 8003642:	d102      	bne.n	800364a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003644:	4b25      	ldr	r3, [pc, #148]	; (80036dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	e004      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d101      	bne.n	8003654 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003650:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003652:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	2b0c      	cmp	r3, #12
 8003658:	d134      	bne.n	80036c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800365a:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d003      	beq.n	8003672 <HAL_RCC_GetSysClockFreq+0xa6>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b03      	cmp	r3, #3
 800366e:	d003      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0xac>
 8003670:	e005      	b.n	800367e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003672:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003674:	617b      	str	r3, [r7, #20]
      break;
 8003676:	e005      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003678:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800367a:	617b      	str	r3, [r7, #20]
      break;
 800367c:	e002      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	617b      	str	r3, [r7, #20]
      break;
 8003682:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	3301      	adds	r3, #1
 8003690:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	fb02 f203 	mul.w	r2, r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036aa:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	0e5b      	lsrs	r3, r3, #25
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	3301      	adds	r3, #1
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036c4:	69bb      	ldr	r3, [r7, #24]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3724      	adds	r7, #36	; 0x24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
 80036d8:	08004808 	.word	0x08004808
 80036dc:	00f42400 	.word	0x00f42400
 80036e0:	016e3600 	.word	0x016e3600

080036e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036ec:	2300      	movs	r3, #0
 80036ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036f0:	4b2a      	ldr	r3, [pc, #168]	; (800379c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036fc:	f7ff f9f0 	bl	8002ae0 <HAL_PWREx_GetVoltageRange>
 8003700:	6178      	str	r0, [r7, #20]
 8003702:	e014      	b.n	800372e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003704:	4b25      	ldr	r3, [pc, #148]	; (800379c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003708:	4a24      	ldr	r2, [pc, #144]	; (800379c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800370a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370e:	6593      	str	r3, [r2, #88]	; 0x58
 8003710:	4b22      	ldr	r3, [pc, #136]	; (800379c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800371c:	f7ff f9e0 	bl	8002ae0 <HAL_PWREx_GetVoltageRange>
 8003720:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003722:	4b1e      	ldr	r3, [pc, #120]	; (800379c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	4a1d      	ldr	r2, [pc, #116]	; (800379c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003734:	d10b      	bne.n	800374e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b80      	cmp	r3, #128	; 0x80
 800373a:	d919      	bls.n	8003770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2ba0      	cmp	r3, #160	; 0xa0
 8003740:	d902      	bls.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003742:	2302      	movs	r3, #2
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	e013      	b.n	8003770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003748:	2301      	movs	r3, #1
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	e010      	b.n	8003770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b80      	cmp	r3, #128	; 0x80
 8003752:	d902      	bls.n	800375a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003754:	2303      	movs	r3, #3
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	e00a      	b.n	8003770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b80      	cmp	r3, #128	; 0x80
 800375e:	d102      	bne.n	8003766 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003760:	2302      	movs	r3, #2
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	e004      	b.n	8003770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b70      	cmp	r3, #112	; 0x70
 800376a:	d101      	bne.n	8003770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800376c:	2301      	movs	r3, #1
 800376e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f023 0207 	bic.w	r2, r3, #7
 8003778:	4909      	ldr	r1, [pc, #36]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	429a      	cmp	r2, r3
 800378c:	d001      	beq.n	8003792 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000
 80037a0:	40022000 	.word	0x40022000

080037a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037ac:	2300      	movs	r3, #0
 80037ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037b0:	2300      	movs	r3, #0
 80037b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d031      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037c8:	d01a      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80037ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037ce:	d814      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d009      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037d8:	d10f      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80037da:	4b5d      	ldr	r3, [pc, #372]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	4a5c      	ldr	r2, [pc, #368]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037e6:	e00c      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f9f0 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037f8:	e003      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	74fb      	strb	r3, [r7, #19]
      break;
 80037fe:	e000      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003802:	7cfb      	ldrb	r3, [r7, #19]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10b      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003808:	4b51      	ldr	r3, [pc, #324]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	494e      	ldr	r1, [pc, #312]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800381e:	e001      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 809e 	beq.w	800396e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003832:	2300      	movs	r3, #0
 8003834:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003836:	4b46      	ldr	r3, [pc, #280]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003846:	2300      	movs	r3, #0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00d      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384c:	4b40      	ldr	r3, [pc, #256]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003850:	4a3f      	ldr	r2, [pc, #252]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003856:	6593      	str	r3, [r2, #88]	; 0x58
 8003858:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800385a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003864:	2301      	movs	r3, #1
 8003866:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003868:	4b3a      	ldr	r3, [pc, #232]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a39      	ldr	r2, [pc, #228]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800386e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003872:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003874:	f7fd f906 	bl	8000a84 <HAL_GetTick>
 8003878:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800387a:	e009      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800387c:	f7fd f902 	bl	8000a84 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d902      	bls.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	74fb      	strb	r3, [r7, #19]
        break;
 800388e:	e005      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003890:	4b30      	ldr	r3, [pc, #192]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0ef      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800389c:	7cfb      	ldrb	r3, [r7, #19]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d15a      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038a2:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01e      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d019      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038ca:	4b21      	ldr	r3, [pc, #132]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d0:	4a1f      	ldr	r2, [pc, #124]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038da:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e0:	4a1b      	ldr	r2, [pc, #108]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038ea:	4a19      	ldr	r2, [pc, #100]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d016      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd f8c2 	bl	8000a84 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003902:	e00b      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003904:	f7fd f8be 	bl	8000a84 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d902      	bls.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	74fb      	strb	r3, [r7, #19]
            break;
 800391a:	e006      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0ec      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800392a:	7cfb      	ldrb	r3, [r7, #19]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	4904      	ldr	r1, [pc, #16]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003946:	e009      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	74bb      	strb	r3, [r7, #18]
 800394c:	e006      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000
 8003954:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800395c:	7c7b      	ldrb	r3, [r7, #17]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d105      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003962:	4b9b      	ldr	r3, [pc, #620]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003966:	4a9a      	ldr	r2, [pc, #616]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800397a:	4b95      	ldr	r3, [pc, #596]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f023 0203 	bic.w	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4991      	ldr	r1, [pc, #580]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800399c:	4b8c      	ldr	r3, [pc, #560]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f023 020c 	bic.w	r2, r3, #12
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	4989      	ldr	r1, [pc, #548]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039be:	4b84      	ldr	r3, [pc, #528]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	4980      	ldr	r1, [pc, #512]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039e0:	4b7b      	ldr	r3, [pc, #492]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	4978      	ldr	r1, [pc, #480]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a02:	4b73      	ldr	r3, [pc, #460]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	496f      	ldr	r1, [pc, #444]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a24:	4b6a      	ldr	r3, [pc, #424]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	4967      	ldr	r1, [pc, #412]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a46:	4b62      	ldr	r3, [pc, #392]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	495e      	ldr	r1, [pc, #376]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a68:	4b59      	ldr	r3, [pc, #356]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a76:	4956      	ldr	r1, [pc, #344]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a8a:	4b51      	ldr	r3, [pc, #324]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	494d      	ldr	r1, [pc, #308]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d028      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003aac:	4b48      	ldr	r3, [pc, #288]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aba:	4945      	ldr	r1, [pc, #276]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aca:	d106      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003acc:	4b40      	ldr	r3, [pc, #256]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4a3f      	ldr	r2, [pc, #252]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ad6:	60d3      	str	r3, [r2, #12]
 8003ad8:	e011      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ade:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ae2:	d10c      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 f872 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8003afa:	7cfb      	ldrb	r3, [r7, #19]
 8003afc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d028      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b0a:	4b31      	ldr	r3, [pc, #196]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b18:	492d      	ldr	r1, [pc, #180]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b28:	d106      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b2a:	4b29      	ldr	r3, [pc, #164]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4a28      	ldr	r2, [pc, #160]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b34:	60d3      	str	r3, [r2, #12]
 8003b36:	e011      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3304      	adds	r3, #4
 8003b46:	2101      	movs	r1, #1
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f843 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b52:	7cfb      	ldrb	r3, [r7, #19]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d01c      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b68:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b76:	4916      	ldr	r1, [pc, #88]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b86:	d10c      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	2102      	movs	r1, #2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f820 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8003b9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ba0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	4904      	ldr	r1, [pc, #16]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000

08003bd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003be2:	4b74      	ldr	r3, [pc, #464]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d018      	beq.n	8003c20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bee:	4b71      	ldr	r3, [pc, #452]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f003 0203 	and.w	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d10d      	bne.n	8003c1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
       ||
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c06:	4b6b      	ldr	r3, [pc, #428]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
       ||
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d047      	beq.n	8003caa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
 8003c1e:	e044      	b.n	8003caa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d018      	beq.n	8003c5a <RCCEx_PLLSAI1_Config+0x86>
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d825      	bhi.n	8003c78 <RCCEx_PLLSAI1_Config+0xa4>
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d002      	beq.n	8003c36 <RCCEx_PLLSAI1_Config+0x62>
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d009      	beq.n	8003c48 <RCCEx_PLLSAI1_Config+0x74>
 8003c34:	e020      	b.n	8003c78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c36:	4b5f      	ldr	r3, [pc, #380]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d11d      	bne.n	8003c7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c46:	e01a      	b.n	8003c7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c48:	4b5a      	ldr	r3, [pc, #360]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d116      	bne.n	8003c82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c58:	e013      	b.n	8003c82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c5a:	4b56      	ldr	r3, [pc, #344]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10f      	bne.n	8003c86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c66:	4b53      	ldr	r3, [pc, #332]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c76:	e006      	b.n	8003c86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c7c:	e004      	b.n	8003c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e002      	b.n	8003c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c82:	bf00      	nop
 8003c84:	e000      	b.n	8003c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c8e:	4b49      	ldr	r3, [pc, #292]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6819      	ldr	r1, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	4943      	ldr	r1, [pc, #268]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d17c      	bne.n	8003daa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cb0:	4b40      	ldr	r3, [pc, #256]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a3f      	ldr	r2, [pc, #252]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbc:	f7fc fee2 	bl	8000a84 <HAL_GetTick>
 8003cc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cc2:	e009      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cc4:	f7fc fede 	bl	8000a84 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d902      	bls.n	8003cd8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	73fb      	strb	r3, [r7, #15]
        break;
 8003cd6:	e005      	b.n	8003ce4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cd8:	4b36      	ldr	r3, [pc, #216]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ef      	bne.n	8003cc4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d15f      	bne.n	8003daa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d110      	bne.n	8003d12 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cf0:	4b30      	ldr	r3, [pc, #192]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003cf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6892      	ldr	r2, [r2, #8]
 8003d00:	0211      	lsls	r1, r2, #8
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68d2      	ldr	r2, [r2, #12]
 8003d06:	06d2      	lsls	r2, r2, #27
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	492a      	ldr	r1, [pc, #168]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	610b      	str	r3, [r1, #16]
 8003d10:	e027      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d112      	bne.n	8003d3e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d18:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6892      	ldr	r2, [r2, #8]
 8003d28:	0211      	lsls	r1, r2, #8
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6912      	ldr	r2, [r2, #16]
 8003d2e:	0852      	lsrs	r2, r2, #1
 8003d30:	3a01      	subs	r2, #1
 8003d32:	0552      	lsls	r2, r2, #21
 8003d34:	430a      	orrs	r2, r1
 8003d36:	491f      	ldr	r1, [pc, #124]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	610b      	str	r3, [r1, #16]
 8003d3c:	e011      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d3e:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6892      	ldr	r2, [r2, #8]
 8003d4e:	0211      	lsls	r1, r2, #8
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6952      	ldr	r2, [r2, #20]
 8003d54:	0852      	lsrs	r2, r2, #1
 8003d56:	3a01      	subs	r2, #1
 8003d58:	0652      	lsls	r2, r2, #25
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	4915      	ldr	r1, [pc, #84]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d62:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a13      	ldr	r2, [pc, #76]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6e:	f7fc fe89 	bl	8000a84 <HAL_GetTick>
 8003d72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d74:	e009      	b.n	8003d8a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d76:	f7fc fe85 	bl	8000a84 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d902      	bls.n	8003d8a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	73fb      	strb	r3, [r7, #15]
          break;
 8003d88:	e005      	b.n	8003d96 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0ef      	beq.n	8003d76 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d106      	bne.n	8003daa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	4903      	ldr	r1, [pc, #12]	; (8003db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000

08003db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e049      	b.n	8003e5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fc fd4e 	bl	8000880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f000 f960 	bl	80040bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d001      	beq.n	8003e80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e033      	b.n	8003ee8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a19      	ldr	r2, [pc, #100]	; (8003ef4 <HAL_TIM_Base_Start+0x8c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d009      	beq.n	8003ea6 <HAL_TIM_Base_Start+0x3e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9a:	d004      	beq.n	8003ea6 <HAL_TIM_Base_Start+0x3e>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a15      	ldr	r2, [pc, #84]	; (8003ef8 <HAL_TIM_Base_Start+0x90>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d115      	bne.n	8003ed2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	4b13      	ldr	r3, [pc, #76]	; (8003efc <HAL_TIM_Base_Start+0x94>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b06      	cmp	r3, #6
 8003eb6:	d015      	beq.n	8003ee4 <HAL_TIM_Base_Start+0x7c>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebe:	d011      	beq.n	8003ee4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed0:	e008      	b.n	8003ee4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0201 	orr.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	e000      	b.n	8003ee6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	00010007 	.word	0x00010007

08003f00 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d109      	bne.n	8003f24 <HAL_TIM_OC_Start+0x24>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e03c      	b.n	8003f9e <HAL_TIM_OC_Start+0x9e>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d109      	bne.n	8003f3e <HAL_TIM_OC_Start+0x3e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	e02f      	b.n	8003f9e <HAL_TIM_OC_Start+0x9e>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d109      	bne.n	8003f58 <HAL_TIM_OC_Start+0x58>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	bf14      	ite	ne
 8003f50:	2301      	movne	r3, #1
 8003f52:	2300      	moveq	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e022      	b.n	8003f9e <HAL_TIM_OC_Start+0x9e>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b0c      	cmp	r3, #12
 8003f5c:	d109      	bne.n	8003f72 <HAL_TIM_OC_Start+0x72>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	bf14      	ite	ne
 8003f6a:	2301      	movne	r3, #1
 8003f6c:	2300      	moveq	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	e015      	b.n	8003f9e <HAL_TIM_OC_Start+0x9e>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d109      	bne.n	8003f8c <HAL_TIM_OC_Start+0x8c>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e008      	b.n	8003f9e <HAL_TIM_OC_Start+0x9e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	bf14      	ite	ne
 8003f98:	2301      	movne	r3, #1
 8003f9a:	2300      	moveq	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e07e      	b.n	80040a4 <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d104      	bne.n	8003fb6 <HAL_TIM_OC_Start+0xb6>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb4:	e023      	b.n	8003ffe <HAL_TIM_OC_Start+0xfe>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d104      	bne.n	8003fc6 <HAL_TIM_OC_Start+0xc6>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc4:	e01b      	b.n	8003ffe <HAL_TIM_OC_Start+0xfe>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d104      	bne.n	8003fd6 <HAL_TIM_OC_Start+0xd6>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fd4:	e013      	b.n	8003ffe <HAL_TIM_OC_Start+0xfe>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b0c      	cmp	r3, #12
 8003fda:	d104      	bne.n	8003fe6 <HAL_TIM_OC_Start+0xe6>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fe4:	e00b      	b.n	8003ffe <HAL_TIM_OC_Start+0xfe>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d104      	bne.n	8003ff6 <HAL_TIM_OC_Start+0xf6>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff4:	e003      	b.n	8003ffe <HAL_TIM_OC_Start+0xfe>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2201      	movs	r2, #1
 8004004:	6839      	ldr	r1, [r7, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f8bc 	bl	8004184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a26      	ldr	r2, [pc, #152]	; (80040ac <HAL_TIM_OC_Start+0x1ac>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d009      	beq.n	800402a <HAL_TIM_OC_Start+0x12a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a25      	ldr	r2, [pc, #148]	; (80040b0 <HAL_TIM_OC_Start+0x1b0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d004      	beq.n	800402a <HAL_TIM_OC_Start+0x12a>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a23      	ldr	r2, [pc, #140]	; (80040b4 <HAL_TIM_OC_Start+0x1b4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d101      	bne.n	800402e <HAL_TIM_OC_Start+0x12e>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <HAL_TIM_OC_Start+0x130>
 800402e:	2300      	movs	r3, #0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004042:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a18      	ldr	r2, [pc, #96]	; (80040ac <HAL_TIM_OC_Start+0x1ac>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_TIM_OC_Start+0x162>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004056:	d004      	beq.n	8004062 <HAL_TIM_OC_Start+0x162>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a14      	ldr	r2, [pc, #80]	; (80040b0 <HAL_TIM_OC_Start+0x1b0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d115      	bne.n	800408e <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <HAL_TIM_OC_Start+0x1b8>)
 800406a:	4013      	ands	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b06      	cmp	r3, #6
 8004072:	d015      	beq.n	80040a0 <HAL_TIM_OC_Start+0x1a0>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407a:	d011      	beq.n	80040a0 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408c:	e008      	b.n	80040a0 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	e000      	b.n	80040a2 <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	40014000 	.word	0x40014000
 80040b4:	40014400 	.word	0x40014400
 80040b8:	00010007 	.word	0x00010007

080040bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a2a      	ldr	r2, [pc, #168]	; (8004178 <TIM_Base_SetConfig+0xbc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_Base_SetConfig+0x20>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040da:	d108      	bne.n	80040ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a21      	ldr	r2, [pc, #132]	; (8004178 <TIM_Base_SetConfig+0xbc>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00b      	beq.n	800410e <TIM_Base_SetConfig+0x52>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fc:	d007      	beq.n	800410e <TIM_Base_SetConfig+0x52>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a1e      	ldr	r2, [pc, #120]	; (800417c <TIM_Base_SetConfig+0xc0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_Base_SetConfig+0x52>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <TIM_Base_SetConfig+0xc4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d108      	bne.n	8004120 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a0c      	ldr	r2, [pc, #48]	; (8004178 <TIM_Base_SetConfig+0xbc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <TIM_Base_SetConfig+0xa0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a0b      	ldr	r2, [pc, #44]	; (800417c <TIM_Base_SetConfig+0xc0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_Base_SetConfig+0xa0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <TIM_Base_SetConfig+0xc4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d103      	bne.n	8004164 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	615a      	str	r2, [r3, #20]
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400

08004184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	2201      	movs	r2, #1
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1a      	ldr	r2, [r3, #32]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	401a      	ands	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	431a      	orrs	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	621a      	str	r2, [r3, #32]
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
	...

080041d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e04f      	b.n	8004288 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a21      	ldr	r2, [pc, #132]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d108      	bne.n	8004224 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004218:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a14      	ldr	r2, [pc, #80]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d009      	beq.n	800425c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004250:	d004      	beq.n	800425c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a10      	ldr	r2, [pc, #64]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d10c      	bne.n	8004276 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004262:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	4313      	orrs	r3, r2
 800426c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	40012c00 	.word	0x40012c00
 8004298:	40014000 	.word	0x40014000

0800429c <arm_fir_init_f32>:
 800429c:	b570      	push	{r4, r5, r6, lr}
 800429e:	9c04      	ldr	r4, [sp, #16]
 80042a0:	6082      	str	r2, [r0, #8]
 80042a2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80042a6:	3c01      	subs	r4, #1
 80042a8:	4605      	mov	r5, r0
 80042aa:	440c      	add	r4, r1
 80042ac:	8001      	strh	r1, [r0, #0]
 80042ae:	461e      	mov	r6, r3
 80042b0:	00a2      	lsls	r2, r4, #2
 80042b2:	4618      	mov	r0, r3
 80042b4:	2100      	movs	r1, #0
 80042b6:	f000 fa8b 	bl	80047d0 <memset>
 80042ba:	606e      	str	r6, [r5, #4]
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
 80042be:	bf00      	nop

080042c0 <arm_fir_f32>:
 80042c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c4:	ed2d 8b10 	vpush	{d8-d15}
 80042c8:	b089      	sub	sp, #36	; 0x24
 80042ca:	4605      	mov	r5, r0
 80042cc:	9003      	str	r0, [sp, #12]
 80042ce:	8800      	ldrh	r0, [r0, #0]
 80042d0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80042d4:	9304      	str	r3, [sp, #16]
 80042d6:	461e      	mov	r6, r3
 80042d8:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80042dc:	3b01      	subs	r3, #1
 80042de:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 80042e2:	08f3      	lsrs	r3, r6, #3
 80042e4:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80042e8:	9001      	str	r0, [sp, #4]
 80042ea:	4625      	mov	r5, r4
 80042ec:	9400      	str	r4, [sp, #0]
 80042ee:	9302      	str	r3, [sp, #8]
 80042f0:	f000 81ee 	beq.w	80046d0 <arm_fir_f32+0x410>
 80042f4:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 80042f8:	469e      	mov	lr, r3
 80042fa:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80042fe:	1f1e      	subs	r6, r3, #4
 8004300:	4604      	mov	r4, r0
 8004302:	9605      	str	r6, [sp, #20]
 8004304:	eb08 0003 	add.w	r0, r8, r3
 8004308:	f004 0a07 	and.w	sl, r4, #7
 800430c:	4613      	mov	r3, r2
 800430e:	f10c 0420 	add.w	r4, ip, #32
 8004312:	f8cd c018 	str.w	ip, [sp, #24]
 8004316:	4684      	mov	ip, r0
 8004318:	4648      	mov	r0, r9
 800431a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800431e:	9107      	str	r1, [sp, #28]
 8004320:	f105 0720 	add.w	r7, r5, #32
 8004324:	f101 0620 	add.w	r6, r1, #32
 8004328:	f102 0520 	add.w	r5, r2, #32
 800432c:	4652      	mov	r2, sl
 800432e:	469a      	mov	sl, r3
 8004330:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8004334:	f847 3c20 	str.w	r3, [r7, #-32]
 8004338:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800433c:	f847 3c1c 	str.w	r3, [r7, #-28]
 8004340:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8004344:	f847 3c18 	str.w	r3, [r7, #-24]
 8004348:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800434c:	f847 3c14 	str.w	r3, [r7, #-20]
 8004350:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8004354:	f847 3c10 	str.w	r3, [r7, #-16]
 8004358:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800435c:	f847 3c0c 	str.w	r3, [r7, #-12]
 8004360:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8004364:	f847 3c08 	str.w	r3, [r7, #-8]
 8004368:	eddf 3af1 	vldr	s7, [pc, #964]	; 8004730 <arm_fir_f32+0x470>
 800436c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004370:	f847 3c04 	str.w	r3, [r7, #-4]
 8004374:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 8004378:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800437c:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8004380:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8004384:	ed14 1a04 	vldr	s2, [r4, #-16]
 8004388:	ed54 0a03 	vldr	s1, [r4, #-12]
 800438c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004390:	1f21      	subs	r1, r4, #4
 8004392:	eef0 8a63 	vmov.f32	s17, s7
 8004396:	eef0 9a63 	vmov.f32	s19, s7
 800439a:	eef0 aa63 	vmov.f32	s21, s7
 800439e:	eef0 ba63 	vmov.f32	s23, s7
 80043a2:	eeb0 ca63 	vmov.f32	s24, s7
 80043a6:	eef0 ca63 	vmov.f32	s25, s7
 80043aa:	eeb0 da63 	vmov.f32	s26, s7
 80043ae:	2800      	cmp	r0, #0
 80043b0:	f000 81e8 	beq.w	8004784 <arm_fir_f32+0x4c4>
 80043b4:	f108 0120 	add.w	r1, r8, #32
 80043b8:	f104 031c 	add.w	r3, r4, #28
 80043bc:	4683      	mov	fp, r0
 80043be:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 80043c2:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 80043c6:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 80043ca:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 80043ce:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 80043d2:	ed11 6a04 	vldr	s12, [r1, #-16]
 80043d6:	ed51 6a03 	vldr	s13, [r1, #-12]
 80043da:	ed11 7a02 	vldr	s14, [r1, #-8]
 80043de:	ed51 7a01 	vldr	s15, [r1, #-4]
 80043e2:	ee23 fa04 	vmul.f32	s30, s6, s8
 80043e6:	ee62 ea84 	vmul.f32	s29, s5, s8
 80043ea:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 80043ee:	ee22 ea04 	vmul.f32	s28, s4, s8
 80043f2:	ee61 da84 	vmul.f32	s27, s3, s8
 80043f6:	ee21 ba04 	vmul.f32	s22, s2, s8
 80043fa:	ee20 aa84 	vmul.f32	s20, s1, s8
 80043fe:	ee20 9a04 	vmul.f32	s18, s0, s8
 8004402:	ee28 4a04 	vmul.f32	s8, s16, s8
 8004406:	ee62 fa24 	vmul.f32	s31, s4, s9
 800440a:	ee3c ca0e 	vadd.f32	s24, s24, s28
 800440e:	ee7b baad 	vadd.f32	s23, s23, s27
 8004412:	ee21 eaa4 	vmul.f32	s28, s3, s9
 8004416:	ee61 da24 	vmul.f32	s27, s2, s9
 800441a:	ee7a aa8b 	vadd.f32	s21, s21, s22
 800441e:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8004422:	ee20 baa4 	vmul.f32	s22, s1, s9
 8004426:	ee20 aa24 	vmul.f32	s20, s0, s9
 800442a:	ee3d da0f 	vadd.f32	s26, s26, s30
 800442e:	ee7c caae 	vadd.f32	s25, s25, s29
 8004432:	ee22 faa4 	vmul.f32	s30, s5, s9
 8004436:	ee78 8a89 	vadd.f32	s17, s17, s18
 800443a:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 800443e:	ee28 9a24 	vmul.f32	s18, s16, s9
 8004442:	ee73 3a84 	vadd.f32	s7, s7, s8
 8004446:	ee63 4a24 	vmul.f32	s9, s6, s9
 800444a:	ee22 4a05 	vmul.f32	s8, s4, s10
 800444e:	ee61 ea05 	vmul.f32	s29, s2, s10
 8004452:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8004456:	ee3d da0f 	vadd.f32	s26, s26, s30
 800445a:	ee7c caaf 	vadd.f32	s25, s25, s31
 800445e:	ee20 fa85 	vmul.f32	s30, s1, s10
 8004462:	ee61 fa85 	vmul.f32	s31, s3, s10
 8004466:	ee3c ea0e 	vadd.f32	s28, s24, s28
 800446a:	ee7b daad 	vadd.f32	s27, s23, s27
 800446e:	ee3a ba8b 	vadd.f32	s22, s21, s22
 8004472:	ee60 ba05 	vmul.f32	s23, s0, s10
 8004476:	ee68 aa05 	vmul.f32	s21, s16, s10
 800447a:	ee39 aa8a 	vadd.f32	s20, s19, s20
 800447e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8004482:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8004486:	ee63 4a05 	vmul.f32	s9, s6, s10
 800448a:	ee22 5a85 	vmul.f32	s10, s5, s10
 800448e:	ee21 9a25 	vmul.f32	s18, s2, s11
 8004492:	ee20 ca25 	vmul.f32	s24, s0, s11
 8004496:	ee3d da04 	vadd.f32	s26, s26, s8
 800449a:	ee7c caaf 	vadd.f32	s25, s25, s31
 800449e:	ee21 4aa5 	vmul.f32	s8, s3, s11
 80044a2:	ee3e ea2e 	vadd.f32	s28, s28, s29
 80044a6:	ed53 1a04 	vldr	s3, [r3, #-16]
 80044aa:	ee60 eaa5 	vmul.f32	s29, s1, s11
 80044ae:	ee7d da8f 	vadd.f32	s27, s27, s30
 80044b2:	ee3b ba2b 	vadd.f32	s22, s22, s23
 80044b6:	ee3a aa2a 	vadd.f32	s20, s20, s21
 80044ba:	ee68 ba25 	vmul.f32	s23, s16, s11
 80044be:	ee63 aa25 	vmul.f32	s21, s6, s11
 80044c2:	ee78 8aa4 	vadd.f32	s17, s17, s9
 80044c6:	ee73 3a85 	vadd.f32	s7, s7, s10
 80044ca:	ee22 5aa5 	vmul.f32	s10, s5, s11
 80044ce:	ee62 5a25 	vmul.f32	s11, s4, s11
 80044d2:	ee61 4a06 	vmul.f32	s9, s2, s12
 80044d6:	ee60 9a86 	vmul.f32	s19, s1, s12
 80044da:	ee60 fa06 	vmul.f32	s31, s0, s12
 80044de:	ed13 1a03 	vldr	s2, [r3, #-12]
 80044e2:	ee23 fa06 	vmul.f32	s30, s6, s12
 80044e6:	ee3d da04 	vadd.f32	s26, s26, s8
 80044ea:	ee7c ca89 	vadd.f32	s25, s25, s18
 80044ee:	ee3e ea2e 	vadd.f32	s28, s28, s29
 80044f2:	ee28 9a06 	vmul.f32	s18, s16, s12
 80044f6:	ee7d da8c 	vadd.f32	s27, s27, s24
 80044fa:	ee3b ba2b 	vadd.f32	s22, s22, s23
 80044fe:	ee22 ca86 	vmul.f32	s24, s5, s12
 8004502:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8004506:	ee78 8a85 	vadd.f32	s17, s17, s10
 800450a:	ee73 3aa5 	vadd.f32	s7, s7, s11
 800450e:	ee62 5a06 	vmul.f32	s11, s4, s12
 8004512:	ee21 6a86 	vmul.f32	s12, s3, s12
 8004516:	ee20 4a26 	vmul.f32	s8, s0, s13
 800451a:	ee63 ea26 	vmul.f32	s29, s6, s13
 800451e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8004522:	ee22 5a26 	vmul.f32	s10, s4, s13
 8004526:	ee3d da24 	vadd.f32	s26, s26, s9
 800452a:	ee7c caa9 	vadd.f32	s25, s25, s19
 800452e:	ee60 4aa6 	vmul.f32	s9, s1, s13
 8004532:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8004536:	ed53 0a02 	vldr	s1, [r3, #-8]
 800453a:	ee68 fa26 	vmul.f32	s31, s16, s13
 800453e:	ee7d da89 	vadd.f32	s27, s27, s18
 8004542:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8004546:	ee78 8aa5 	vadd.f32	s17, s17, s11
 800454a:	ee22 faa6 	vmul.f32	s30, s5, s13
 800454e:	ee73 3a86 	vadd.f32	s7, s7, s12
 8004552:	ee21 6aa6 	vmul.f32	s12, s3, s13
 8004556:	ee61 6a26 	vmul.f32	s13, s2, s13
 800455a:	ee60 aa07 	vmul.f32	s21, s0, s14
 800455e:	ee28 ca07 	vmul.f32	s24, s16, s14
 8004562:	ee63 ba07 	vmul.f32	s23, s6, s14
 8004566:	ee7a 9a05 	vadd.f32	s19, s20, s10
 800456a:	ee78 8a86 	vadd.f32	s17, s17, s12
 800456e:	ee3d da24 	vadd.f32	s26, s26, s9
 8004572:	ee7c ca84 	vadd.f32	s25, s25, s8
 8004576:	ee7d daae 	vadd.f32	s27, s27, s29
 800457a:	ee22 9a07 	vmul.f32	s18, s4, s14
 800457e:	ee62 ea87 	vmul.f32	s29, s5, s14
 8004582:	ee61 5a87 	vmul.f32	s11, s3, s14
 8004586:	ee73 3aa6 	vadd.f32	s7, s7, s13
 800458a:	ed13 0a01 	vldr	s0, [r3, #-4]
 800458e:	ee61 6a07 	vmul.f32	s13, s2, s14
 8004592:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8004596:	ee3b ba0f 	vadd.f32	s22, s22, s30
 800459a:	ee20 7a87 	vmul.f32	s14, s1, s14
 800459e:	ee68 4a27 	vmul.f32	s9, s16, s15
 80045a2:	ee3d da2a 	vadd.f32	s26, s26, s21
 80045a6:	ee7c ca8c 	vadd.f32	s25, s25, s24
 80045aa:	ee23 8a27 	vmul.f32	s16, s6, s15
 80045ae:	ee3e ea2b 	vadd.f32	s28, s28, s23
 80045b2:	ee22 4aa7 	vmul.f32	s8, s5, s15
 80045b6:	ee22 aa27 	vmul.f32	s20, s4, s15
 80045ba:	ee21 5aa7 	vmul.f32	s10, s3, s15
 80045be:	ee21 6a27 	vmul.f32	s12, s2, s15
 80045c2:	ee78 6aa6 	vadd.f32	s13, s17, s13
 80045c6:	ee7d daae 	vadd.f32	s27, s27, s29
 80045ca:	ee60 8aa7 	vmul.f32	s17, s1, s15
 80045ce:	ee3b ba09 	vadd.f32	s22, s22, s18
 80045d2:	ee79 9aa5 	vadd.f32	s19, s19, s11
 80045d6:	ee73 3a87 	vadd.f32	s7, s7, s14
 80045da:	ee60 7a27 	vmul.f32	s15, s0, s15
 80045de:	f1bb 0b01 	subs.w	fp, fp, #1
 80045e2:	f101 0120 	add.w	r1, r1, #32
 80045e6:	ee3d da24 	vadd.f32	s26, s26, s9
 80045ea:	ee7c ca88 	vadd.f32	s25, s25, s16
 80045ee:	ee3e ca04 	vadd.f32	s24, s28, s8
 80045f2:	ee7d ba8a 	vadd.f32	s23, s27, s20
 80045f6:	ee7b aa05 	vadd.f32	s21, s22, s10
 80045fa:	ee79 9a86 	vadd.f32	s19, s19, s12
 80045fe:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8004602:	ee73 3aa7 	vadd.f32	s7, s7, s15
 8004606:	f103 0320 	add.w	r3, r3, #32
 800460a:	f47f aed8 	bne.w	80043be <arm_fir_f32+0xfe>
 800460e:	eb09 0104 	add.w	r1, r9, r4
 8004612:	46e3      	mov	fp, ip
 8004614:	b3a2      	cbz	r2, 8004680 <arm_fir_f32+0x3c0>
 8004616:	4613      	mov	r3, r2
 8004618:	ecbb 6a01 	vldmia	fp!, {s12}
 800461c:	ecf1 7a01 	vldmia	r1!, {s15}
 8004620:	ee23 3a06 	vmul.f32	s6, s6, s12
 8004624:	ee22 4a86 	vmul.f32	s8, s5, s12
 8004628:	ee62 4a06 	vmul.f32	s9, s4, s12
 800462c:	ee21 5a86 	vmul.f32	s10, s3, s12
 8004630:	ee61 5a06 	vmul.f32	s11, s2, s12
 8004634:	ee60 6a86 	vmul.f32	s13, s1, s12
 8004638:	ee20 7a06 	vmul.f32	s14, s0, s12
 800463c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8004640:	3b01      	subs	r3, #1
 8004642:	ee3d da03 	vadd.f32	s26, s26, s6
 8004646:	ee7c ca84 	vadd.f32	s25, s25, s8
 800464a:	eeb0 3a62 	vmov.f32	s6, s5
 800464e:	ee3c ca24 	vadd.f32	s24, s24, s9
 8004652:	eef0 2a42 	vmov.f32	s5, s4
 8004656:	ee7b ba85 	vadd.f32	s23, s23, s10
 800465a:	eeb0 2a61 	vmov.f32	s4, s3
 800465e:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8004662:	eef0 1a41 	vmov.f32	s3, s2
 8004666:	ee79 9aa6 	vadd.f32	s19, s19, s13
 800466a:	eeb0 1a60 	vmov.f32	s2, s1
 800466e:	ee78 8a87 	vadd.f32	s17, s17, s14
 8004672:	eef0 0a40 	vmov.f32	s1, s0
 8004676:	ee73 3a86 	vadd.f32	s7, s7, s12
 800467a:	eeb0 0a67 	vmov.f32	s0, s15
 800467e:	d1cb      	bne.n	8004618 <arm_fir_f32+0x358>
 8004680:	f1be 0e01 	subs.w	lr, lr, #1
 8004684:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 8004688:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 800468c:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8004690:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8004694:	ed45 aa04 	vstr	s21, [r5, #-16]
 8004698:	ed45 9a03 	vstr	s19, [r5, #-12]
 800469c:	ed45 8a02 	vstr	s17, [r5, #-8]
 80046a0:	ed45 3a01 	vstr	s7, [r5, #-4]
 80046a4:	f107 0720 	add.w	r7, r7, #32
 80046a8:	f106 0620 	add.w	r6, r6, #32
 80046ac:	f104 0420 	add.w	r4, r4, #32
 80046b0:	f105 0520 	add.w	r5, r5, #32
 80046b4:	f47f ae3c 	bne.w	8004330 <arm_fir_f32+0x70>
 80046b8:	9b02      	ldr	r3, [sp, #8]
 80046ba:	9800      	ldr	r0, [sp, #0]
 80046bc:	f8dd c018 	ldr.w	ip, [sp, #24]
 80046c0:	9907      	ldr	r1, [sp, #28]
 80046c2:	015b      	lsls	r3, r3, #5
 80046c4:	4652      	mov	r2, sl
 80046c6:	4418      	add	r0, r3
 80046c8:	9000      	str	r0, [sp, #0]
 80046ca:	4419      	add	r1, r3
 80046cc:	449c      	add	ip, r3
 80046ce:	441a      	add	r2, r3
 80046d0:	9b04      	ldr	r3, [sp, #16]
 80046d2:	f013 0e07 	ands.w	lr, r3, #7
 80046d6:	d01f      	beq.n	8004718 <arm_fir_f32+0x458>
 80046d8:	9f00      	ldr	r7, [sp, #0]
 80046da:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80046de:	4676      	mov	r6, lr
 80046e0:	4665      	mov	r5, ip
 80046e2:	f851 3b04 	ldr.w	r3, [r1], #4
 80046e6:	eddf 6a12 	vldr	s13, [pc, #72]	; 8004730 <arm_fir_f32+0x470>
 80046ea:	f847 3b04 	str.w	r3, [r7], #4
 80046ee:	4644      	mov	r4, r8
 80046f0:	464b      	mov	r3, r9
 80046f2:	4628      	mov	r0, r5
 80046f4:	ecb0 7a01 	vldmia	r0!, {s14}
 80046f8:	ecf4 7a01 	vldmia	r4!, {s15}
 80046fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004700:	3b01      	subs	r3, #1
 8004702:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004706:	d1f5      	bne.n	80046f4 <arm_fir_f32+0x434>
 8004708:	3e01      	subs	r6, #1
 800470a:	ece2 6a01 	vstmia	r2!, {s13}
 800470e:	f105 0504 	add.w	r5, r5, #4
 8004712:	d1e6      	bne.n	80046e2 <arm_fir_f32+0x422>
 8004714:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8004718:	9b01      	ldr	r3, [sp, #4]
 800471a:	1e59      	subs	r1, r3, #1
 800471c:	9b03      	ldr	r3, [sp, #12]
 800471e:	088e      	lsrs	r6, r1, #2
 8004720:	685c      	ldr	r4, [r3, #4]
 8004722:	d020      	beq.n	8004766 <arm_fir_f32+0x4a6>
 8004724:	f104 0210 	add.w	r2, r4, #16
 8004728:	f10c 0310 	add.w	r3, ip, #16
 800472c:	4630      	mov	r0, r6
 800472e:	e001      	b.n	8004734 <arm_fir_f32+0x474>
 8004730:	00000000 	.word	0x00000000
 8004734:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8004738:	f842 5c10 	str.w	r5, [r2, #-16]
 800473c:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8004740:	f842 5c0c 	str.w	r5, [r2, #-12]
 8004744:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8004748:	f842 5c08 	str.w	r5, [r2, #-8]
 800474c:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8004750:	f842 5c04 	str.w	r5, [r2, #-4]
 8004754:	3801      	subs	r0, #1
 8004756:	f103 0310 	add.w	r3, r3, #16
 800475a:	f102 0210 	add.w	r2, r2, #16
 800475e:	d1e9      	bne.n	8004734 <arm_fir_f32+0x474>
 8004760:	0133      	lsls	r3, r6, #4
 8004762:	441c      	add	r4, r3
 8004764:	449c      	add	ip, r3
 8004766:	f011 0303 	ands.w	r3, r1, #3
 800476a:	d006      	beq.n	800477a <arm_fir_f32+0x4ba>
 800476c:	4622      	mov	r2, r4
 800476e:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004772:	f842 1b04 	str.w	r1, [r2], #4
 8004776:	3b01      	subs	r3, #1
 8004778:	d1f9      	bne.n	800476e <arm_fir_f32+0x4ae>
 800477a:	b009      	add	sp, #36	; 0x24
 800477c:	ecbd 8b10 	vpop	{d8-d15}
 8004780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004784:	46c3      	mov	fp, r8
 8004786:	e745      	b.n	8004614 <arm_fir_f32+0x354>

08004788 <__libc_init_array>:
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	4d0d      	ldr	r5, [pc, #52]	; (80047c0 <__libc_init_array+0x38>)
 800478c:	4c0d      	ldr	r4, [pc, #52]	; (80047c4 <__libc_init_array+0x3c>)
 800478e:	1b64      	subs	r4, r4, r5
 8004790:	10a4      	asrs	r4, r4, #2
 8004792:	2600      	movs	r6, #0
 8004794:	42a6      	cmp	r6, r4
 8004796:	d109      	bne.n	80047ac <__libc_init_array+0x24>
 8004798:	4d0b      	ldr	r5, [pc, #44]	; (80047c8 <__libc_init_array+0x40>)
 800479a:	4c0c      	ldr	r4, [pc, #48]	; (80047cc <__libc_init_array+0x44>)
 800479c:	f000 f820 	bl	80047e0 <_init>
 80047a0:	1b64      	subs	r4, r4, r5
 80047a2:	10a4      	asrs	r4, r4, #2
 80047a4:	2600      	movs	r6, #0
 80047a6:	42a6      	cmp	r6, r4
 80047a8:	d105      	bne.n	80047b6 <__libc_init_array+0x2e>
 80047aa:	bd70      	pop	{r4, r5, r6, pc}
 80047ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b0:	4798      	blx	r3
 80047b2:	3601      	adds	r6, #1
 80047b4:	e7ee      	b.n	8004794 <__libc_init_array+0xc>
 80047b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ba:	4798      	blx	r3
 80047bc:	3601      	adds	r6, #1
 80047be:	e7f2      	b.n	80047a6 <__libc_init_array+0x1e>
 80047c0:	08004838 	.word	0x08004838
 80047c4:	08004838 	.word	0x08004838
 80047c8:	08004838 	.word	0x08004838
 80047cc:	0800483c 	.word	0x0800483c

080047d0 <memset>:
 80047d0:	4402      	add	r2, r0
 80047d2:	4603      	mov	r3, r0
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d100      	bne.n	80047da <memset+0xa>
 80047d8:	4770      	bx	lr
 80047da:	f803 1b01 	strb.w	r1, [r3], #1
 80047de:	e7f9      	b.n	80047d4 <memset+0x4>

080047e0 <_init>:
 80047e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e2:	bf00      	nop
 80047e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e6:	bc08      	pop	{r3}
 80047e8:	469e      	mov	lr, r3
 80047ea:	4770      	bx	lr

080047ec <_fini>:
 80047ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ee:	bf00      	nop
 80047f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f2:	bc08      	pop	{r3}
 80047f4:	469e      	mov	lr, r3
 80047f6:	4770      	bx	lr
