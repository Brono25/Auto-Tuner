
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013894  08008d28  08008d28  00018d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c5bc  0801c5bc  00030248  2**0
                  CONTENTS
  4 .ARM          00000000  0801c5bc  0801c5bc  00030248  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801c5bc  0801c5bc  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c5bc  0801c5bc  0002c5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c5c0  0801c5c0  0002c5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0801c5c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000722c  20000248  0801c80c  00030248  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007474  0801c80c  00037474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016176  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300c  00000000  00000000  000463ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00049400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  0004a600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024772  00000000  00000000  0004b630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013776  00000000  00000000  0006fda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0c9a  00000000  00000000  00083518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  001641b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a48  00000000  00000000  00164278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000030f6  00000000  00000000  00169cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d10 	.word	0x08008d10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	08008d10 	.word	0x08008d10

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <HAL_ADC_ConvHalfCpltCallback>:
	}
	print_flag++;
}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  in_ptr = &adc_buff[0];
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000c74:	601a      	str	r2, [r3, #0]
  out_ptr = &adc_buff[HLF_BUFFER_LEN];
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000c7a:	601a      	str	r2, [r3, #0]
  callback_state = 1;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000c82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f002 fe43 	bl	8003914 <HAL_GPIO_TogglePin>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200033ac 	.word	0x200033ac
 8000c9c:	20003444 	.word	0x20003444
 8000ca0:	20000274 	.word	0x20000274
 8000ca4:	20004444 	.word	0x20004444
 8000ca8:	20000264 	.word	0x20000264

08000cac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  in_ptr = &adc_buff[HLF_BUFFER_LEN];
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_ADC_ConvCpltCallback+0x30>)
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x34>)
 8000cb8:	601a      	str	r2, [r3, #0]
  out_ptr = &adc_buff[0];
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_ADC_ConvCpltCallback+0x38>)
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000cbe:	601a      	str	r2, [r3, #0]
  callback_state = 1;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_ADC_ConvCpltCallback+0x40>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000cc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cce:	f002 fe21 	bl	8003914 <HAL_GPIO_TogglePin>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200033ac 	.word	0x200033ac
 8000ce0:	20004444 	.word	0x20004444
 8000ce4:	20000274 	.word	0x20000274
 8000ce8:	20003444 	.word	0x20003444
 8000cec:	20000264 	.word	0x20000264

08000cf0 <complexABS>:

float complexABS(float real, float compl) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000cfa:	edc7 0a00 	vstr	s1, [r7]

	return sqrtf(real*real + compl*compl);
 8000cfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d02:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000d06:	edd7 7a00 	vldr	s15, [r7]
 8000d0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d12:	eeb0 0a67 	vmov.f32	s0, s15
 8000d16:	f007 ffd1 	bl	8008cbc <sqrtf>
 8000d1a:	eef0 7a40 	vmov.f32	s15, s0
}
 8000d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <find_frequency>:

void find_frequency()
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
	float max = 0;
 8000d2e:	f04f 0300 	mov.w	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
	int freq_bin = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < HLF_BUFFER_LEN / 2; i++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	e017      	b.n	8000d6e <find_frequency+0x46>
	{
		if (out_dsp_buff[i] > max)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <find_frequency+0x60>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	edd3 7a00 	vldr	s15, [r3]
 8000d4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d56:	d507      	bpl.n	8000d68 <find_frequency+0x40>
		{
			max = out_dsp_buff[i];
 8000d58:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <find_frequency+0x60>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	60fb      	str	r3, [r7, #12]
			freq_bin = i;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < HLF_BUFFER_LEN / 2; i++)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d74:	dbe3      	blt.n	8000d3e <find_frequency+0x16>
		}
	}

	printf("%d \n", freq_bin);
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <find_frequency+0x64>)
 8000d7a:	f005 ff21 	bl	8006bc0 <iprintf>

}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200002f8 	.word	0x200002f8
 8000d8c:	08008d38 	.word	0x08008d38

08000d90 <mag_response>:

void mag_response()
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0

	int freqpoint = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < BLOCK_SIZE_FLOAT; i += 2) {
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	e020      	b.n	8000de2 <mag_response+0x52>
		out_dsp_buff[freqpoint] = complexABS(in_dsp_buff[i], in_dsp_buff[i + 1]);
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <mag_response+0x64>)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	edd3 7a00 	vldr	s15, [r3]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <mag_response+0x64>)
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	ed93 7a00 	vldr	s14, [r3]
 8000dba:	eef0 0a47 	vmov.f32	s1, s14
 8000dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc2:	f7ff ff95 	bl	8000cf0 <complexABS>
 8000dc6:	eef0 7a40 	vmov.f32	s15, s0
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <mag_response+0x68>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	edc3 7a00 	vstr	s15, [r3]
		freqpoint++;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BLOCK_SIZE_FLOAT; i += 2) {
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	3302      	adds	r3, #2
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000de8:	dbda      	blt.n	8000da0 <mag_response+0x10>
	}

}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20005450 	.word	0x20005450
 8000df8:	200002f8 	.word	0x200002f8

08000dfc <process_dsp>:


void process_dsp()
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	e016      	b.n	8000e36 <process_dsp+0x3a>
	{
		in_dsp_buff[i] = (float32_t) in_ptr[i] - DC_BIAS;
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <process_dsp+0xc4>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	ee07 3a90 	vmov	s15, r3
 8000e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e1c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000ec4 <process_dsp+0xc8>
 8000e20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e24:	4a28      	ldr	r2, [pc, #160]	; (8000ec8 <process_dsp+0xcc>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3301      	adds	r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e3c:	dbe4      	blt.n	8000e08 <process_dsp+0xc>
	}

	//arm_fir_f32(&fir_settings, dsp_buff, dsp_buff, BLOCK_SIZE_FLOAT);
	arm_biquad_cascade_df1_f32(&iir_settings, in_dsp_buff, in_dsp_buff, BLOCK_SIZE_FLOAT);
 8000e3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e42:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <process_dsp+0xcc>)
 8000e44:	4920      	ldr	r1, [pc, #128]	; (8000ec8 <process_dsp+0xcc>)
 8000e46:	4821      	ldr	r0, [pc, #132]	; (8000ecc <process_dsp+0xd0>)
 8000e48:	f004 fe6c 	bl	8005b24 <arm_biquad_cascade_df1_f32>

	arm_rfft_fast_f32(&fft_settings, in_dsp_buff, in_dsp_buff, IFFT_OFF);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ec8 <process_dsp+0xcc>)
 8000e50:	491d      	ldr	r1, [pc, #116]	; (8000ec8 <process_dsp+0xcc>)
 8000e52:	481f      	ldr	r0, [pc, #124]	; (8000ed0 <process_dsp+0xd4>)
 8000e54:	f004 f9da 	bl	800520c <arm_rfft_fast_f32>
	mag_response();
 8000e58:	f7ff ff9a 	bl	8000d90 <mag_response>
	find_frequency();
 8000e5c:	f7ff ff64 	bl	8000d28 <find_frequency>

	//print_output(&out_dsp_buff[0], HLF_BUFFER_LEN / 2);
	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	e023      	b.n	8000eae <process_dsp+0xb2>
	{
		in_dsp_buff[i] += DC_BIAS;
 8000e66:	4a18      	ldr	r2, [pc, #96]	; (8000ec8 <process_dsp+0xcc>)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	edd3 7a00 	vldr	s15, [r3]
 8000e72:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000ec4 <process_dsp+0xc8>
 8000e76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e7a:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <process_dsp+0xcc>)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	edc3 7a00 	vstr	s15, [r3]
		out_ptr[i] = (uint16_t) in_dsp_buff[i];
 8000e86:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <process_dsp+0xcc>)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <process_dsp+0xd8>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ea0:	ee17 2a90 	vmov	r2, s15
 8000ea4:	b292      	uxth	r2, r2
 8000ea6:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000eb4:	dbd7      	blt.n	8000e66 <process_dsp+0x6a>
	}

}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200033ac 	.word	0x200033ac
 8000ec4:	45098000 	.word	0x45098000
 8000ec8:	20005450 	.word	0x20005450
 8000ecc:	20005444 	.word	0x20005444
 8000ed0:	20000298 	.word	0x20000298
 8000ed4:	20000274 	.word	0x20000274

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f000 fc9c 	bl	800181a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 f857 	bl	8000f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 f999 	bl	800121c <MX_GPIO_Init>
  MX_DMA_Init();
 8000eea:	f000 f971 	bl	80011d0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000eee:	f000 f8a1 	bl	8001034 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000ef2:	f000 f937 	bl	8001164 <MX_TIM6_Init>
  MX_DAC1_Init();
 8000ef6:	f000 f903 	bl	8001100 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000efa:	481a      	ldr	r0, [pc, #104]	; (8000f64 <main+0x8c>)
 8000efc:	f003 fee8 	bl	8004cd0 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim6, TIM_CHANNEL_6);
 8000f00:	2114      	movs	r1, #20
 8000f02:	4818      	ldr	r0, [pc, #96]	; (8000f64 <main+0x8c>)
 8000f04:	f003 ff30 	bl	8004d68 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, FULL_BUFFER_LEN);
 8000f08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f0c:	4916      	ldr	r1, [pc, #88]	; (8000f68 <main+0x90>)
 8000f0e:	4817      	ldr	r0, [pc, #92]	; (8000f6c <main+0x94>)
 8000f10:	f001 f82c 	bl	8001f6c <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)adc_buff,  FULL_BUFFER_LEN, DAC_ALIGN_12B_R);
 8000f14:	2300      	movs	r3, #0
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1c:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <main+0x90>)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4813      	ldr	r0, [pc, #76]	; (8000f70 <main+0x98>)
 8000f22:	f001 fedf 	bl	8002ce4 <HAL_DAC_Start_DMA>

  arm_fir_init_f32(&fir_settings, NUM_FIR_TAPS, &fir_taps[0], &fir_state[0], BLOCK_SIZE_FLOAT);
 8000f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <main+0x9c>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <main+0xa0>)
 8000f30:	2115      	movs	r1, #21
 8000f32:	4812      	ldr	r0, [pc, #72]	; (8000f7c <main+0xa4>)
 8000f34:	f004 fdd8 	bl	8005ae8 <arm_fir_init_f32>
  arm_biquad_cascade_df1_init_f32(&iir_settings, NUM_STAGES, &iir_taps[0], &iir_state[0]);
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <main+0xa8>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <main+0xac>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4812      	ldr	r0, [pc, #72]	; (8000f88 <main+0xb0>)
 8000f40:	f004 fde4 	bl	8005b0c <arm_biquad_cascade_df1_init_f32>
  arm_rfft_fast_init_f32(&fft_settings, BLOCK_SIZE_FLOAT);
 8000f44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f48:	4810      	ldr	r0, [pc, #64]	; (8000f8c <main+0xb4>)
 8000f4a:	f004 f8db 	bl	8005104 <arm_rfft_fast_init_f32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (callback_state == 1)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <main+0xb8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d1fb      	bne.n	8000f4e <main+0x76>
	  {

		  process_dsp();
 8000f56:	f7ff ff51 	bl	8000dfc <process_dsp>

		  callback_state = 0;
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <main+0xb8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
	  if (callback_state == 1)
 8000f60:	e7f5      	b.n	8000f4e <main+0x76>
 8000f62:	bf00      	nop
 8000f64:	200033f8 	.word	0x200033f8
 8000f68:	20003444 	.word	0x20003444
 8000f6c:	200012f8 	.word	0x200012f8
 8000f70:	20000278 	.word	0x20000278
 8000f74:	2000135c 	.word	0x2000135c
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	2000028c 	.word	0x2000028c
 8000f80:	20007450 	.word	0x20007450
 8000f84:	20000054 	.word	0x20000054
 8000f88:	20005444 	.word	0x20005444
 8000f8c:	20000298 	.word	0x20000298
 8000f90:	20000264 	.word	0x20000264

08000f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b096      	sub	sp, #88	; 0x58
 8000f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2244      	movs	r2, #68	; 0x44
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f005 f99a 	bl	80062dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fb6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fba:	f002 fcd3 	bl	8003964 <HAL_PWREx_ControlVoltageScaling>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fc4:	f000 f976 	bl	80012b4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000fda:	2306      	movs	r3, #6
 8000fdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000fde:	2350      	movs	r3, #80	; 0x50
 8000fe0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 fd0c 	bl	8003a10 <HAL_RCC_OscConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ffe:	f000 f959 	bl	80012b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001002:	230f      	movs	r3, #15
 8001004:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001006:	2303      	movs	r3, #3
 8001008:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	2104      	movs	r1, #4
 800101a:	4618      	mov	r0, r3
 800101c:	f003 f90a 	bl	8004234 <HAL_RCC_ClockConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001026:	f000 f945 	bl	80012b4 <Error_Handler>
  }
}
 800102a:	bf00      	nop
 800102c:	3758      	adds	r7, #88	; 0x58
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <MX_ADC1_Init+0xc0>)
 800104c:	4a2a      	ldr	r2, [pc, #168]	; (80010f8 <MX_ADC1_Init+0xc4>)
 800104e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <MX_ADC1_Init+0xc0>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001056:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <MX_ADC1_Init+0xc0>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <MX_ADC1_Init+0xc0>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <MX_ADC1_Init+0xc0>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <MX_ADC1_Init+0xc0>)
 800106a:	2204      	movs	r2, #4
 800106c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <MX_ADC1_Init+0xc0>)
 8001070:	2200      	movs	r2, #0
 8001072:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <MX_ADC1_Init+0xc0>)
 8001076:	2200      	movs	r2, #0
 8001078:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_ADC1_Init+0xc0>)
 800107c:	2201      	movs	r2, #1
 800107e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <MX_ADC1_Init+0xc0>)
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_ADC1_Init+0xc0>)
 800108a:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_ADC1_Init+0xc0>)
 8001092:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001096:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_ADC1_Init+0xc0>)
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_ADC1_Init+0xc0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_ADC1_Init+0xc0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ae:	4811      	ldr	r0, [pc, #68]	; (80010f4 <MX_ADC1_Init+0xc0>)
 80010b0:	f000 fe14 	bl	8001cdc <HAL_ADC_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80010ba:	f000 f8fb 	bl	80012b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_ADC1_Init+0xc8>)
 80010c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c2:	2306      	movs	r3, #6
 80010c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ca:	237f      	movs	r3, #127	; 0x7f
 80010cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ce:	2304      	movs	r3, #4
 80010d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MX_ADC1_Init+0xc0>)
 80010dc:	f000 ffd4 	bl	8002088 <HAL_ADC_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010e6:	f000 f8e5 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200012f8 	.word	0x200012f8
 80010f8:	50040000 	.word	0x50040000
 80010fc:	14f00020 	.word	0x14f00020

08001100 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2224      	movs	r2, #36	; 0x24
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f005 f8e5 	bl	80062dc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_DAC1_Init+0x5c>)
 8001114:	4a12      	ldr	r2, [pc, #72]	; (8001160 <MX_DAC1_Init+0x60>)
 8001116:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001118:	4810      	ldr	r0, [pc, #64]	; (800115c <MX_DAC1_Init+0x5c>)
 800111a:	f001 fdc0 	bl	8002c9e <HAL_DAC_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001124:	f000 f8c6 	bl	80012b4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800112c:	2304      	movs	r3, #4
 800112e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <MX_DAC1_Init+0x5c>)
 8001144:	f001 feb8 	bl	8002eb8 <HAL_DAC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800114e:	f000 f8b1 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	; 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000278 	.word	0x20000278
 8001160:	40007400 	.word	0x40007400

08001164 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_TIM6_Init+0x64>)
 8001176:	4a15      	ldr	r2, [pc, #84]	; (80011cc <MX_TIM6_Init+0x68>)
 8001178:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_TIM6_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_TIM6_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000 - 1;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_TIM6_Init+0x64>)
 8001188:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800118c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_TIM6_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <MX_TIM6_Init+0x64>)
 8001196:	f003 fd43 	bl	8004c20 <HAL_TIM_Base_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011a0:	f000 f888 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011a4:	2320      	movs	r3, #32
 80011a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_TIM6_Init+0x64>)
 80011b2:	f003 ff41 	bl	8005038 <HAL_TIMEx_MasterConfigSynchronization>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011bc:	f000 f87a 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200033f8 	.word	0x200033f8
 80011cc:	40001000 	.word	0x40001000

080011d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_DMA_Init+0x48>)
 80011d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <MX_DMA_Init+0x48>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6493      	str	r3, [r2, #72]	; 0x48
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <MX_DMA_Init+0x48>)
 80011e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	200b      	movs	r0, #11
 80011f4:	f001 fd1d 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011f8:	200b      	movs	r0, #11
 80011fa:	f001 fd36 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	200d      	movs	r0, #13
 8001204:	f001 fd15 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001208:	200d      	movs	r0, #13
 800120a:	f001 fd2e 	bl	8002c6a <HAL_NVIC_EnableIRQ>

}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <MX_GPIO_Init+0x94>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a1e      	ldr	r2, [pc, #120]	; (80012b0 <MX_GPIO_Init+0x94>)
 8001238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <MX_GPIO_Init+0x94>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <MX_GPIO_Init+0x94>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a18      	ldr	r2, [pc, #96]	; (80012b0 <MX_GPIO_Init+0x94>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <MX_GPIO_Init+0x94>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MX_GPIO_Init+0x94>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_GPIO_Init+0x94>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MX_GPIO_Init+0x94>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001284:	f002 fb2e 	bl	80038e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800128c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a4:	f002 f9a4 	bl	80035f0 <HAL_GPIO_Init>

}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000

080012b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b8:	b672      	cpsid	i
}
 80012ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012bc:	e7fe      	b.n	80012bc <Error_Handler+0x8>
	...

080012c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_MspInit+0x44>)
 80012c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <HAL_MspInit+0x44>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6613      	str	r3, [r2, #96]	; 0x60
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_MspInit+0x44>)
 80012d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_MspInit+0x44>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x44>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x44>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000

08001308 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0a0      	sub	sp, #128	; 0x80
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	225c      	movs	r2, #92	; 0x5c
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f004 ffd7 	bl	80062dc <memset>
  if(hadc->Instance==ADC1)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a3b      	ldr	r2, [pc, #236]	; (8001420 <HAL_ADC_MspInit+0x118>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d16f      	bne.n	8001418 <HAL_ADC_MspInit+0x110>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001338:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800133c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800133e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001342:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001344:	2303      	movs	r3, #3
 8001346:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 6;
 8001348:	2306      	movs	r3, #6
 800134a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 43;
 800134c:	232b      	movs	r3, #43	; 0x2b
 800134e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001350:	2307      	movs	r3, #7
 8001352:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001354:	2302      	movs	r3, #2
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8001358:	2304      	movs	r3, #4
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800135c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4618      	mov	r0, r3
 8001368:	f003 f950 	bl	800460c <HAL_RCCEx_PeriphCLKConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001372:	f7ff ff9f 	bl	80012b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <HAL_ADC_MspInit+0x11c>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	4a2a      	ldr	r2, [pc, #168]	; (8001424 <HAL_ADC_MspInit+0x11c>)
 800137c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001382:	4b28      	ldr	r3, [pc, #160]	; (8001424 <HAL_ADC_MspInit+0x11c>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b25      	ldr	r3, [pc, #148]	; (8001424 <HAL_ADC_MspInit+0x11c>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a24      	ldr	r2, [pc, #144]	; (8001424 <HAL_ADC_MspInit+0x11c>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b22      	ldr	r3, [pc, #136]	; (8001424 <HAL_ADC_MspInit+0x11c>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013a6:	2301      	movs	r3, #1
 80013a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013aa:	230b      	movs	r3, #11
 80013ac:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013bc:	f002 f918 	bl	80035f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <HAL_ADC_MspInit+0x120>)
 80013c2:	4a1a      	ldr	r2, [pc, #104]	; (800142c <HAL_ADC_MspInit+0x124>)
 80013c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <HAL_ADC_MspInit+0x120>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_ADC_MspInit+0x120>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_ADC_MspInit+0x120>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <HAL_ADC_MspInit+0x120>)
 80013da:	2280      	movs	r2, #128	; 0x80
 80013dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_ADC_MspInit+0x120>)
 80013e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_ADC_MspInit+0x120>)
 80013e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_ADC_MspInit+0x120>)
 80013f0:	2220      	movs	r2, #32
 80013f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_ADC_MspInit+0x120>)
 80013f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013fc:	480a      	ldr	r0, [pc, #40]	; (8001428 <HAL_ADC_MspInit+0x120>)
 80013fe:	f001 feff 	bl	8003200 <HAL_DMA_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8001408:	f7ff ff54 	bl	80012b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a06      	ldr	r2, [pc, #24]	; (8001428 <HAL_ADC_MspInit+0x120>)
 8001410:	64da      	str	r2, [r3, #76]	; 0x4c
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <HAL_ADC_MspInit+0x120>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001418:	bf00      	nop
 800141a:	3780      	adds	r7, #128	; 0x80
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	50040000 	.word	0x50040000
 8001424:	40021000 	.word	0x40021000
 8001428:	200033b0 	.word	0x200033b0
 800142c:	40020008 	.word	0x40020008

08001430 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a2b      	ldr	r2, [pc, #172]	; (80014fc <HAL_DAC_MspInit+0xcc>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d14f      	bne.n	80014f2 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001452:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <HAL_DAC_MspInit+0xd0>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	4a2a      	ldr	r2, [pc, #168]	; (8001500 <HAL_DAC_MspInit+0xd0>)
 8001458:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800145c:	6593      	str	r3, [r2, #88]	; 0x58
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <HAL_DAC_MspInit+0xd0>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <HAL_DAC_MspInit+0xd0>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a24      	ldr	r2, [pc, #144]	; (8001500 <HAL_DAC_MspInit+0xd0>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_DAC_MspInit+0xd0>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001482:	2310      	movs	r3, #16
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001486:	2303      	movs	r3, #3
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001498:	f002 f8aa 	bl	80035f0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_DAC_MspInit+0xd4>)
 800149e:	4a1a      	ldr	r2, [pc, #104]	; (8001508 <HAL_DAC_MspInit+0xd8>)
 80014a0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_DAC_MspInit+0xd4>)
 80014a4:	2206      	movs	r2, #6
 80014a6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_DAC_MspInit+0xd4>)
 80014aa:	2210      	movs	r2, #16
 80014ac:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_DAC_MspInit+0xd4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_DAC_MspInit+0xd4>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_DAC_MspInit+0xd4>)
 80014bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c0:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_DAC_MspInit+0xd4>)
 80014c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c8:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_DAC_MspInit+0xd4>)
 80014cc:	2220      	movs	r2, #32
 80014ce:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_DAC_MspInit+0xd4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80014d6:	480b      	ldr	r0, [pc, #44]	; (8001504 <HAL_DAC_MspInit+0xd4>)
 80014d8:	f001 fe92 	bl	8003200 <HAL_DMA_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80014e2:	f7ff fee7 	bl	80012b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_DAC_MspInit+0xd4>)
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	4a05      	ldr	r2, [pc, #20]	; (8001504 <HAL_DAC_MspInit+0xd4>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40007400 	.word	0x40007400
 8001500:	40021000 	.word	0x40021000
 8001504:	200002b0 	.word	0x200002b0
 8001508:	40020030 	.word	0x40020030

0800150c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_TIM_Base_MspInit+0x38>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10b      	bne.n	8001536 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_TIM_Base_MspInit+0x3c>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_TIM_Base_MspInit+0x3c>)
 8001524:	f043 0310 	orr.w	r3, r3, #16
 8001528:	6593      	str	r3, [r2, #88]	; 0x58
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <HAL_TIM_Base_MspInit+0x3c>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40001000 	.word	0x40001000
 8001548:	40021000 	.word	0x40021000

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <NMI_Handler+0x4>

08001552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <HardFault_Handler+0x4>

08001558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <MemManage_Handler+0x4>

0800155e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <UsageFault_Handler+0x4>

0800156a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001598:	f000 f994 	bl	80018c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <DMA1_Channel1_IRQHandler+0x10>)
 80015a6:	f001 ff43 	bl	8003430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200033b0 	.word	0x200033b0

080015b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <DMA1_Channel3_IRQHandler+0x10>)
 80015ba:	f001 ff39 	bl	8003430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200002b0 	.word	0x200002b0

080015c8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <ITM_SendChar+0x48>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <ITM_SendChar+0x48>)
 80015d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015dc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <ITM_SendChar+0x4c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <ITM_SendChar+0x4c>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80015ea:	bf00      	nop
 80015ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f8      	beq.n	80015ec <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80015fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	6013      	str	r3, [r2, #0]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000edfc 	.word	0xe000edfc
 8001614:	e0000e00 	.word	0xe0000e00

08001618 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
	return 1;
 800161c:	2301      	movs	r3, #1
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_kill>:

int _kill(int pid, int sig)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001632:	f004 fe29 	bl	8006288 <__errno>
 8001636:	4603      	mov	r3, r0
 8001638:	2216      	movs	r2, #22
 800163a:	601a      	str	r2, [r3, #0]
	return -1;
 800163c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <_exit>:

void _exit (int status)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001650:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ffe7 	bl	8001628 <_kill>
	while (1) {}		/* Make sure we hang here */
 800165a:	e7fe      	b.n	800165a <_exit+0x12>

0800165c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e00a      	b.n	8001684 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800166e:	f3af 8000 	nop.w
 8001672:	4601      	mov	r1, r0
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	60ba      	str	r2, [r7, #8]
 800167a:	b2ca      	uxtb	r2, r1
 800167c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	dbf0      	blt.n	800166e <_read+0x12>
	}

return len;
 800168c:	687b      	ldr	r3, [r7, #4]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e009      	b.n	80016bc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);   // This sends to the trace
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	60ba      	str	r2, [r7, #8]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff89 	bl	80015c8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dbf1      	blt.n	80016a8 <_write+0x12>
	}
	return len;
 80016c4:	687b      	ldr	r3, [r7, #4]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_close>:

int _close(int file)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
	return -1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f6:	605a      	str	r2, [r3, #4]
	return 0;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_isatty>:

int _isatty(int file)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
	return 1;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
	return 0;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <_sbrk+0x5c>)
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <_sbrk+0x60>)
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <_sbrk+0x64>)
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <_sbrk+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	429a      	cmp	r2, r3
 8001766:	d207      	bcs.n	8001778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001768:	f004 fd8e 	bl	8006288 <__errno>
 800176c:	4603      	mov	r3, r0
 800176e:	220c      	movs	r2, #12
 8001770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001776:	e009      	b.n	800178c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <_sbrk+0x64>)
 8001788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20010000 	.word	0x20010000
 8001798:	00000400 	.word	0x00000400
 800179c:	20000268 	.word	0x20000268
 80017a0:	20007478 	.word	0x20007478

080017a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <SystemInit+0x20>)
 80017aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <SystemInit+0x20>)
 80017b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001800 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017cc:	f7ff ffea 	bl	80017a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d0:	480c      	ldr	r0, [pc, #48]	; (8001804 <LoopForever+0x6>)
  ldr r1, =_edata
 80017d2:	490d      	ldr	r1, [pc, #52]	; (8001808 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <LoopForever+0xe>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d8:	e002      	b.n	80017e0 <LoopCopyDataInit>

080017da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017de:	3304      	adds	r3, #4

080017e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e4:	d3f9      	bcc.n	80017da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017e8:	4c0a      	ldr	r4, [pc, #40]	; (8001814 <LoopForever+0x16>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ec:	e001      	b.n	80017f2 <LoopFillZerobss>

080017ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f0:	3204      	adds	r2, #4

080017f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f4:	d3fb      	bcc.n	80017ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017f6:	f004 fd4d 	bl	8006294 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017fa:	f7ff fb6d 	bl	8000ed8 <main>

080017fe <LoopForever>:

LoopForever:
    b LoopForever
 80017fe:	e7fe      	b.n	80017fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001800:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 800180c:	0801c5c4 	.word	0x0801c5c4
  ldr r2, =_sbss
 8001810:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8001814:	20007474 	.word	0x20007474

08001818 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC1_IRQHandler>

0800181a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001824:	2003      	movs	r0, #3
 8001826:	f001 f9f9 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800182a:	200f      	movs	r0, #15
 800182c:	f000 f80e 	bl	800184c <HAL_InitTick>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	71fb      	strb	r3, [r7, #7]
 800183a:	e001      	b.n	8001840 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800183c:	f7ff fd40 	bl	80012c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001840:	79fb      	ldrb	r3, [r7, #7]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_InitTick+0x6c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d023      	beq.n	80018a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_InitTick+0x70>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <HAL_InitTick+0x6c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f001 fa05 	bl	8002c86 <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10f      	bne.n	80018a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d809      	bhi.n	800189c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001890:	f001 f9cf 	bl	8002c32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_InitTick+0x74>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e007      	b.n	80018ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
 80018a0:	e004      	b.n	80018ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	e001      	b.n	80018ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000070 	.word	0x20000070
 80018bc:	20000068 	.word	0x20000068
 80018c0:	2000006c 	.word	0x2000006c

080018c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x20>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x24>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_IncTick+0x24>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000070 	.word	0x20000070
 80018e8:	20007460 	.word	0x20007460

080018ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_GetTick+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20007460 	.word	0x20007460

08001904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800190c:	f7ff ffee 	bl	80018ec <HAL_GetTick>
 8001910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800191c:	d005      	beq.n	800192a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_Delay+0x44>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4413      	add	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800192a:	bf00      	nop
 800192c:	f7ff ffde 	bl	80018ec <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	429a      	cmp	r2, r3
 800193a:	d8f7      	bhi.n	800192c <HAL_Delay+0x28>
  {
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000070 	.word	0x20000070

0800194c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	609a      	str	r2, [r3, #8]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3360      	adds	r3, #96	; 0x60
 80019c6:	461a      	mov	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <LL_ADC_SetOffset+0x44>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	4313      	orrs	r3, r2
 80019e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019ec:	bf00      	nop
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	03fff000 	.word	0x03fff000

080019fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3360      	adds	r3, #96	; 0x60
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3360      	adds	r3, #96	; 0x60
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a52:	bf00      	nop
 8001a54:	371c      	adds	r7, #28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3330      	adds	r3, #48	; 0x30
 8001a94:	461a      	mov	r2, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	4413      	add	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	211f      	movs	r1, #31
 8001ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	0e9b      	lsrs	r3, r3, #26
 8001abc:	f003 011f 	and.w	r1, r3, #31
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	431a      	orrs	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ad0:	bf00      	nop
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	3314      	adds	r3, #20
 8001aec:	461a      	mov	r2, r3
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	0e5b      	lsrs	r3, r3, #25
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	4413      	add	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	0d1b      	lsrs	r3, r3, #20
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	2107      	movs	r1, #7
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	401a      	ands	r2, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	0d1b      	lsrs	r3, r3, #20
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	431a      	orrs	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b26:	bf00      	nop
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	401a      	ands	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0318 	and.w	r3, r3, #24
 8001b56:	4908      	ldr	r1, [pc, #32]	; (8001b78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b58:	40d9      	lsrs	r1, r3
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	400b      	ands	r3, r1
 8001b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b62:	431a      	orrs	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	0007ffff 	.word	0x0007ffff

08001b7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6093      	str	r3, [r2, #8]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bb4:	d101      	bne.n	8001bba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c04:	d101      	bne.n	8001c0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <LL_ADC_IsEnabled+0x18>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <LL_ADC_IsEnabled+0x1a>
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c7a:	f043 0204 	orr.w	r2, r3, #4
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d101      	bne.n	8001ca6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d101      	bne.n	8001ccc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e12c      	b.n	8001f50 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d109      	bne.n	8001d18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff faff 	bl	8001308 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff3f 	bl	8001ba0 <LL_ADC_IsDeepPowerDownEnabled>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff25 	bl	8001b7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff5a 	bl	8001bf0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d115      	bne.n	8001d6e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ff3e 	bl	8001bc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d4c:	4b82      	ldr	r3, [pc, #520]	; (8001f58 <HAL_ADC_Init+0x27c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	099b      	lsrs	r3, r3, #6
 8001d52:	4a82      	ldr	r2, [pc, #520]	; (8001f5c <HAL_ADC_Init+0x280>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	099b      	lsrs	r3, r3, #6
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d60:	e002      	b.n	8001d68 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f9      	bne.n	8001d62 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff3c 	bl	8001bf0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10d      	bne.n	8001d9a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	f043 0210 	orr.w	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	f043 0201 	orr.w	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff75 	bl	8001c8e <LL_ADC_REG_IsConversionOngoing>
 8001da4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f040 80c5 	bne.w	8001f3e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 80c1 	bne.w	8001f3e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001dc4:	f043 0202 	orr.w	r2, r3, #2
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff35 	bl	8001c40 <LL_ADC_IsEnabled>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ddc:	4860      	ldr	r0, [pc, #384]	; (8001f60 <HAL_ADC_Init+0x284>)
 8001dde:	f7ff ff2f 	bl	8001c40 <LL_ADC_IsEnabled>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d105      	bne.n	8001df4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4619      	mov	r1, r3
 8001dee:	485d      	ldr	r0, [pc, #372]	; (8001f64 <HAL_ADC_Init+0x288>)
 8001df0:	f7ff fdac 	bl	800194c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7e5b      	ldrb	r3, [r3, #25]
 8001df8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dfe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e04:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e0a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e12:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d106      	bne.n	8001e30 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	3b01      	subs	r3, #1
 8001e28:	045b      	lsls	r3, r3, #17
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d009      	beq.n	8001e4c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	4b45      	ldr	r3, [pc, #276]	; (8001f68 <HAL_ADC_Init+0x28c>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	69b9      	ldr	r1, [r7, #24]
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff12 	bl	8001c8e <LL_ADC_REG_IsConversionOngoing>
 8001e6a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff1f 	bl	8001cb4 <LL_ADC_INJ_IsConversionOngoing>
 8001e76:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d13d      	bne.n	8001efa <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d13a      	bne.n	8001efa <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e88:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e90:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ea0:	f023 0302 	bic.w	r3, r3, #2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	69b9      	ldr	r1, [r7, #24]
 8001eaa:	430b      	orrs	r3, r1
 8001eac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d118      	bne.n	8001eea <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ec2:	f023 0304 	bic.w	r3, r3, #4
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ece:	4311      	orrs	r1, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ed4:	4311      	orrs	r1, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001eda:	430a      	orrs	r2, r1
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	611a      	str	r2, [r3, #16]
 8001ee8:	e007      	b.n	8001efa <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0201 	bic.w	r2, r2, #1
 8001ef8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d10c      	bne.n	8001f1c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f023 010f 	bic.w	r1, r3, #15
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	1e5a      	subs	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	631a      	str	r2, [r3, #48]	; 0x30
 8001f1a:	e007      	b.n	8001f2c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 020f 	bic.w	r2, r2, #15
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f30:	f023 0303 	bic.w	r3, r3, #3
 8001f34:	f043 0201 	orr.w	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
 8001f3c:	e007      	b.n	8001f4e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f043 0210 	orr.w	r2, r3, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000068 	.word	0x20000068
 8001f5c:	053e2d63 	.word	0x053e2d63
 8001f60:	50040000 	.word	0x50040000
 8001f64:	50040300 	.word	0x50040300
 8001f68:	fff0c007 	.word	0xfff0c007

08001f6c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fe86 	bl	8001c8e <LL_ADC_REG_IsConversionOngoing>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d167      	bne.n	8002058 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_Start_DMA+0x2a>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e063      	b.n	800205e <HAL_ADC_Start_DMA+0xf2>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 fc52 	bl	8002848 <ADC_Enable>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d14f      	bne.n	800204e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	f023 0206 	bic.w	r2, r3, #6
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	659a      	str	r2, [r3, #88]	; 0x58
 8001fda:	e002      	b.n	8001fe2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4a20      	ldr	r2, [pc, #128]	; (8002068 <HAL_ADC_Start_DMA+0xfc>)
 8001fe8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	4a1f      	ldr	r2, [pc, #124]	; (800206c <HAL_ADC_Start_DMA+0x100>)
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	; (8002070 <HAL_ADC_Start_DMA+0x104>)
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	221c      	movs	r2, #28
 8002000:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0210 	orr.w	r2, r2, #16
 8002018:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	3340      	adds	r3, #64	; 0x40
 8002034:	4619      	mov	r1, r3
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f001 f999 	bl	8003370 <HAL_DMA_Start_IT>
 800203e:	4603      	mov	r3, r0
 8002040:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fe0d 	bl	8001c66 <LL_ADC_REG_StartConversion>
 800204c:	e006      	b.n	800205c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002056:	e001      	b.n	800205c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002058:	2302      	movs	r3, #2
 800205a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800205c:	7dfb      	ldrb	r3, [r7, #23]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	08002955 	.word	0x08002955
 800206c:	08002a2d 	.word	0x08002a2d
 8002070:	08002a49 	.word	0x08002a49

08002074 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b0b6      	sub	sp, #216	; 0xd8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x22>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e3b9      	b.n	800281e <HAL_ADC_ConfigChannel+0x796>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fde9 	bl	8001c8e <LL_ADC_REG_IsConversionOngoing>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 839e 	bne.w	8002800 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b05      	cmp	r3, #5
 80020ca:	d824      	bhi.n	8002116 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	3b02      	subs	r3, #2
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d81b      	bhi.n	800210e <HAL_ADC_ConfigChannel+0x86>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <HAL_ADC_ConfigChannel+0x54>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020f5 	.word	0x080020f5
 80020e4:	080020fd 	.word	0x080020fd
 80020e8:	08002105 	.word	0x08002105
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	220c      	movs	r2, #12
 80020f0:	605a      	str	r2, [r3, #4]
          break;
 80020f2:	e011      	b.n	8002118 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2212      	movs	r2, #18
 80020f8:	605a      	str	r2, [r3, #4]
          break;
 80020fa:	e00d      	b.n	8002118 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2218      	movs	r2, #24
 8002100:	605a      	str	r2, [r3, #4]
          break;
 8002102:	e009      	b.n	8002118 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800210a:	605a      	str	r2, [r3, #4]
          break;
 800210c:	e004      	b.n	8002118 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2206      	movs	r2, #6
 8002112:	605a      	str	r2, [r3, #4]
          break;
 8002114:	e000      	b.n	8002118 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002116:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	f7ff fcad 	bl	8001a84 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fdad 	bl	8001c8e <LL_ADC_REG_IsConversionOngoing>
 8002134:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fdb9 	bl	8001cb4 <LL_ADC_INJ_IsConversionOngoing>
 8002142:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002146:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 81a6 	bne.w	800249c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002150:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002154:	2b00      	cmp	r3, #0
 8002156:	f040 81a1 	bne.w	800249c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6819      	ldr	r1, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	461a      	mov	r2, r3
 8002168:	f7ff fcb8 	bl	8001adc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	08db      	lsrs	r3, r3, #3
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b04      	cmp	r3, #4
 800218c:	d00a      	beq.n	80021a4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6919      	ldr	r1, [r3, #16]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800219e:	f7ff fc09 	bl	80019b4 <LL_ADC_SetOffset>
 80021a2:	e17b      	b.n	800249c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fc26 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x148>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fc1b 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	0e9b      	lsrs	r3, r3, #26
 80021ca:	f003 021f 	and.w	r2, r3, #31
 80021ce:	e01e      	b.n	800220e <HAL_ADC_ConfigChannel+0x186>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fc10 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80021fe:	2320      	movs	r3, #32
 8002200:	e004      	b.n	800220c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002202:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x19e>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	0e9b      	lsrs	r3, r3, #26
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	e018      	b.n	8002258 <HAL_ADC_ConfigChannel+0x1d0>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800223a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800223e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800224a:	2320      	movs	r3, #32
 800224c:	e004      	b.n	8002258 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800224e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002258:	429a      	cmp	r2, r3
 800225a:	d106      	bne.n	800226a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fbdf 	bl	8001a28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2101      	movs	r1, #1
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fbc3 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x20e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2101      	movs	r1, #1
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fbb8 	bl	80019fc <LL_ADC_GetOffsetChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	0e9b      	lsrs	r3, r3, #26
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	e01e      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x24c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2101      	movs	r1, #1
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fbad 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e004      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80022c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x264>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	e018      	b.n	800231e <HAL_ADC_ConfigChannel+0x296>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002300:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002310:	2320      	movs	r3, #32
 8002312:	e004      	b.n	800231e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800231e:	429a      	cmp	r2, r3
 8002320:	d106      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2200      	movs	r2, #0
 8002328:	2101      	movs	r1, #1
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fb7c 	bl	8001a28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2102      	movs	r1, #2
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fb60 	bl	80019fc <LL_ADC_GetOffsetChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10a      	bne.n	800235c <HAL_ADC_ConfigChannel+0x2d4>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2102      	movs	r1, #2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fb55 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	f003 021f 	and.w	r2, r3, #31
 800235a:	e01e      	b.n	800239a <HAL_ADC_ConfigChannel+0x312>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2102      	movs	r1, #2
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fb4a 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800237a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800237e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800238a:	2320      	movs	r3, #32
 800238c:	e004      	b.n	8002398 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800238e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d105      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x32a>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	0e9b      	lsrs	r3, r3, #26
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	e016      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x358>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80023d2:	2320      	movs	r3, #32
 80023d4:	e004      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80023d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d106      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2200      	movs	r2, #0
 80023ea:	2102      	movs	r1, #2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fb1b 	bl	8001a28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2103      	movs	r1, #3
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff faff 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10a      	bne.n	800241e <HAL_ADC_ConfigChannel+0x396>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2103      	movs	r1, #3
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff faf4 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002414:	4603      	mov	r3, r0
 8002416:	0e9b      	lsrs	r3, r3, #26
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	e017      	b.n	800244e <HAL_ADC_ConfigChannel+0x3c6>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2103      	movs	r1, #3
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fae9 	bl	80019fc <LL_ADC_GetOffsetChannel>
 800242a:	4603      	mov	r3, r0
 800242c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002438:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800243a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002440:	2320      	movs	r3, #32
 8002442:	e003      	b.n	800244c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x3de>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0e9b      	lsrs	r3, r3, #26
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	e011      	b.n	800248a <HAL_ADC_ConfigChannel+0x402>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002476:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800247e:	2320      	movs	r3, #32
 8002480:	e003      	b.n	800248a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800248a:	429a      	cmp	r2, r3
 800248c:	d106      	bne.n	800249c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2200      	movs	r2, #0
 8002494:	2103      	movs	r1, #3
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fac6 	bl	8001a28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fbcd 	bl	8001c40 <LL_ADC_IsEnabled>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f040 813f 	bne.w	800272c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6819      	ldr	r1, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	461a      	mov	r2, r3
 80024bc:	f7ff fb3a 	bl	8001b34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4a8e      	ldr	r2, [pc, #568]	; (8002700 <HAL_ADC_ConfigChannel+0x678>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	f040 8130 	bne.w	800272c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10b      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x46c>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	3301      	adds	r3, #1
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	2b09      	cmp	r3, #9
 80024ea:	bf94      	ite	ls
 80024ec:	2301      	movls	r3, #1
 80024ee:	2300      	movhi	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	e019      	b.n	8002528 <HAL_ADC_ConfigChannel+0x4a0>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002504:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800250c:	2320      	movs	r3, #32
 800250e:	e003      	b.n	8002518 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	3301      	adds	r3, #1
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2b09      	cmp	r3, #9
 8002520:	bf94      	ite	ls
 8002522:	2301      	movls	r3, #1
 8002524:	2300      	movhi	r3, #0
 8002526:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002528:	2b00      	cmp	r3, #0
 800252a:	d079      	beq.n	8002620 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x4c0>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0e9b      	lsrs	r3, r3, #26
 800253e:	3301      	adds	r3, #1
 8002540:	069b      	lsls	r3, r3, #26
 8002542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002546:	e015      	b.n	8002574 <HAL_ADC_ConfigChannel+0x4ec>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002558:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800255a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002560:	2320      	movs	r3, #32
 8002562:	e003      	b.n	800256c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	069b      	lsls	r3, r3, #26
 8002570:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x50c>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0e9b      	lsrs	r3, r3, #26
 8002586:	3301      	adds	r3, #1
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2101      	movs	r1, #1
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	e017      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x53c>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80025ac:	2320      	movs	r3, #32
 80025ae:	e003      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80025b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	3301      	adds	r3, #1
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	2101      	movs	r1, #1
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	ea42 0103 	orr.w	r1, r2, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x562>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0e9b      	lsrs	r3, r3, #26
 80025da:	3301      	adds	r3, #1
 80025dc:	f003 021f 	and.w	r2, r3, #31
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	051b      	lsls	r3, r3, #20
 80025e8:	e018      	b.n	800261c <HAL_ADC_ConfigChannel+0x594>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002602:	2320      	movs	r3, #32
 8002604:	e003      	b.n	800260e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	3301      	adds	r3, #1
 8002610:	f003 021f 	and.w	r2, r3, #31
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800261c:	430b      	orrs	r3, r1
 800261e:	e080      	b.n	8002722 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <HAL_ADC_ConfigChannel+0x5b4>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	0e9b      	lsrs	r3, r3, #26
 8002632:	3301      	adds	r3, #1
 8002634:	069b      	lsls	r3, r3, #26
 8002636:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800263a:	e015      	b.n	8002668 <HAL_ADC_ConfigChannel+0x5e0>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002654:	2320      	movs	r3, #32
 8002656:	e003      	b.n	8002660 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	3301      	adds	r3, #1
 8002662:	069b      	lsls	r3, r3, #26
 8002664:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002670:	2b00      	cmp	r3, #0
 8002672:	d109      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x600>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	3301      	adds	r3, #1
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	2101      	movs	r1, #1
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	e017      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x630>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	61fb      	str	r3, [r7, #28]
  return result;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80026a0:	2320      	movs	r3, #32
 80026a2:	e003      	b.n	80026ac <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	2101      	movs	r1, #1
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	ea42 0103 	orr.w	r1, r2, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10d      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x65c>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	3301      	adds	r3, #1
 80026d0:	f003 021f 	and.w	r2, r3, #31
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	3b1e      	subs	r3, #30
 80026dc:	051b      	lsls	r3, r3, #20
 80026de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026e2:	e01d      	b.n	8002720 <HAL_ADC_ConfigChannel+0x698>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	613b      	str	r3, [r7, #16]
  return result;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80026fc:	2320      	movs	r3, #32
 80026fe:	e005      	b.n	800270c <HAL_ADC_ConfigChannel+0x684>
 8002700:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	3301      	adds	r3, #1
 800270e:	f003 021f 	and.w	r2, r3, #31
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	3b1e      	subs	r3, #30
 800271a:	051b      	lsls	r3, r3, #20
 800271c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002720:	430b      	orrs	r3, r1
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	6892      	ldr	r2, [r2, #8]
 8002726:	4619      	mov	r1, r3
 8002728:	f7ff f9d8 	bl	8001adc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b3d      	ldr	r3, [pc, #244]	; (8002828 <HAL_ADC_ConfigChannel+0x7a0>)
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d06c      	beq.n	8002812 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002738:	483c      	ldr	r0, [pc, #240]	; (800282c <HAL_ADC_ConfigChannel+0x7a4>)
 800273a:	f7ff f92d 	bl	8001998 <LL_ADC_GetCommonPathInternalCh>
 800273e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a3a      	ldr	r2, [pc, #232]	; (8002830 <HAL_ADC_ConfigChannel+0x7a8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d127      	bne.n	800279c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800274c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d121      	bne.n	800279c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a35      	ldr	r2, [pc, #212]	; (8002834 <HAL_ADC_ConfigChannel+0x7ac>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d157      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002766:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800276a:	4619      	mov	r1, r3
 800276c:	482f      	ldr	r0, [pc, #188]	; (800282c <HAL_ADC_ConfigChannel+0x7a4>)
 800276e:	f7ff f900 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002772:	4b31      	ldr	r3, [pc, #196]	; (8002838 <HAL_ADC_ConfigChannel+0x7b0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	099b      	lsrs	r3, r3, #6
 8002778:	4a30      	ldr	r2, [pc, #192]	; (800283c <HAL_ADC_ConfigChannel+0x7b4>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	099b      	lsrs	r3, r3, #6
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	4613      	mov	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800278c:	e002      	b.n	8002794 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3b01      	subs	r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f9      	bne.n	800278e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800279a:	e03a      	b.n	8002812 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a27      	ldr	r2, [pc, #156]	; (8002840 <HAL_ADC_ConfigChannel+0x7b8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d113      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x746>
 80027a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10d      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1f      	ldr	r2, [pc, #124]	; (8002834 <HAL_ADC_ConfigChannel+0x7ac>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d12a      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c4:	4619      	mov	r1, r3
 80027c6:	4819      	ldr	r0, [pc, #100]	; (800282c <HAL_ADC_ConfigChannel+0x7a4>)
 80027c8:	f7ff f8d3 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027cc:	e021      	b.n	8002812 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <HAL_ADC_ConfigChannel+0x7bc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d11c      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d116      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a12      	ldr	r2, [pc, #72]	; (8002834 <HAL_ADC_ConfigChannel+0x7ac>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d111      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027f6:	4619      	mov	r1, r3
 80027f8:	480c      	ldr	r0, [pc, #48]	; (800282c <HAL_ADC_ConfigChannel+0x7a4>)
 80027fa:	f7ff f8ba 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
 80027fe:	e008      	b.n	8002812 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002804:	f043 0220 	orr.w	r2, r3, #32
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800281a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800281e:	4618      	mov	r0, r3
 8002820:	37d8      	adds	r7, #216	; 0xd8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	80080000 	.word	0x80080000
 800282c:	50040300 	.word	0x50040300
 8002830:	c7520000 	.word	0xc7520000
 8002834:	50040000 	.word	0x50040000
 8002838:	20000068 	.word	0x20000068
 800283c:	053e2d63 	.word	0x053e2d63
 8002840:	cb840000 	.word	0xcb840000
 8002844:	80000001 	.word	0x80000001

08002848 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002850:	2300      	movs	r3, #0
 8002852:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff f9f1 	bl	8001c40 <LL_ADC_IsEnabled>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d169      	bne.n	8002938 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	4b36      	ldr	r3, [pc, #216]	; (8002944 <ADC_Enable+0xfc>)
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00d      	beq.n	800288e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f043 0210 	orr.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e055      	b.n	800293a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f9c0 	bl	8001c18 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002898:	482b      	ldr	r0, [pc, #172]	; (8002948 <ADC_Enable+0x100>)
 800289a:	f7ff f87d 	bl	8001998 <LL_ADC_GetCommonPathInternalCh>
 800289e:	4603      	mov	r3, r0
 80028a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028a8:	4b28      	ldr	r3, [pc, #160]	; (800294c <ADC_Enable+0x104>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	099b      	lsrs	r3, r3, #6
 80028ae:	4a28      	ldr	r2, [pc, #160]	; (8002950 <ADC_Enable+0x108>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	099b      	lsrs	r3, r3, #6
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80028c2:	e002      	b.n	80028ca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f9      	bne.n	80028c4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028d0:	f7ff f80c 	bl	80018ec <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028d6:	e028      	b.n	800292a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff f9af 	bl	8001c40 <LL_ADC_IsEnabled>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d104      	bne.n	80028f2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff f993 	bl	8001c18 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028f2:	f7fe fffb 	bl	80018ec <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d914      	bls.n	800292a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b01      	cmp	r3, #1
 800290c:	d00d      	beq.n	800292a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f043 0210 	orr.w	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e007      	b.n	800293a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d1cf      	bne.n	80028d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	8000003f 	.word	0x8000003f
 8002948:	50040300 	.word	0x50040300
 800294c:	20000068 	.word	0x20000068
 8002950:	053e2d63 	.word	0x053e2d63

08002954 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800296a:	2b00      	cmp	r3, #0
 800296c:	d14b      	bne.n	8002a06 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002972:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d021      	beq.n	80029cc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff f866 	bl	8001a5e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d032      	beq.n	80029fe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d12b      	bne.n	80029fe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d11f      	bne.n	80029fe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
 80029ca:	e018      	b.n	80029fe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d111      	bne.n	80029fe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d105      	bne.n	80029fe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f7fe f954 	bl	8000cac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a04:	e00e      	b.n	8002a24 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff fb2e 	bl	8002074 <HAL_ADC_ErrorCallback>
}
 8002a18:	e004      	b.n	8002a24 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7fe f914 	bl	8000c68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f043 0204 	orr.w	r2, r3, #4
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7ff fb00 	bl	8002074 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aae:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	60d3      	str	r3, [r2, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <__NVIC_GetPriorityGrouping+0x18>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	f003 0307 	and.w	r3, r3, #7
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	db0b      	blt.n	8002b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	f003 021f 	and.w	r2, r3, #31
 8002af8:	4907      	ldr	r1, [pc, #28]	; (8002b18 <__NVIC_EnableIRQ+0x38>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2001      	movs	r0, #1
 8002b02:	fa00 f202 	lsl.w	r2, r0, r2
 8002b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000e100 	.word	0xe000e100

08002b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db0a      	blt.n	8002b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	490c      	ldr	r1, [pc, #48]	; (8002b68 <__NVIC_SetPriority+0x4c>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	0112      	lsls	r2, r2, #4
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b44:	e00a      	b.n	8002b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4908      	ldr	r1, [pc, #32]	; (8002b6c <__NVIC_SetPriority+0x50>)
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3b04      	subs	r3, #4
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	440b      	add	r3, r1
 8002b5a:	761a      	strb	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000e100 	.word	0xe000e100
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f1c3 0307 	rsb	r3, r3, #7
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	bf28      	it	cs
 8002b8e:	2304      	movcs	r3, #4
 8002b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d902      	bls.n	8002ba0 <NVIC_EncodePriority+0x30>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3b03      	subs	r3, #3
 8002b9e:	e000      	b.n	8002ba2 <NVIC_EncodePriority+0x32>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	4313      	orrs	r3, r2
         );
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be8:	d301      	bcc.n	8002bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00f      	b.n	8002c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <SysTick_Config+0x40>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bfc:	f7ff ff8e 	bl	8002b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <SysTick_Config+0x40>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c06:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <SysTick_Config+0x40>)
 8002c08:	2207      	movs	r2, #7
 8002c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff29 	bl	8002a7c <__NVIC_SetPriorityGrouping>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c44:	f7ff ff3e 	bl	8002ac4 <__NVIC_GetPriorityGrouping>
 8002c48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f7ff ff8e 	bl	8002b70 <NVIC_EncodePriority>
 8002c54:	4602      	mov	r2, r0
 8002c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff5d 	bl	8002b1c <__NVIC_SetPriority>
}
 8002c62:	bf00      	nop
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff31 	bl	8002ae0 <__NVIC_EnableIRQ>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ffa2 	bl	8002bd8 <SysTick_Config>
 8002c94:	4603      	mov	r3, r0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e014      	b.n	8002cda <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	791b      	ldrb	r3, [r3, #4]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d105      	bne.n	8002cc6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7fe fbb5 	bl	8001430 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	795b      	ldrb	r3, [r3, #5]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_DAC_Start_DMA+0x1e>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e0ab      	b.n	8002e5a <HAL_DAC_Start_DMA+0x176>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d12f      	bne.n	8002d74 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_DAC_Start_DMA+0x180>)
 8002d1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a51      	ldr	r2, [pc, #324]	; (8002e68 <HAL_DAC_Start_DMA+0x184>)
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	4a50      	ldr	r2, [pc, #320]	; (8002e6c <HAL_DAC_Start_DMA+0x188>)
 8002d2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d3a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d013      	beq.n	8002d6a <HAL_DAC_Start_DMA+0x86>
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d845      	bhi.n	8002dd4 <HAL_DAC_Start_DMA+0xf0>
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_DAC_Start_DMA+0x72>
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d005      	beq.n	8002d60 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002d54:	e03e      	b.n	8002dd4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	613b      	str	r3, [r7, #16]
        break;
 8002d5e:	e03c      	b.n	8002dda <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	330c      	adds	r3, #12
 8002d66:	613b      	str	r3, [r7, #16]
        break;
 8002d68:	e037      	b.n	8002dda <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3310      	adds	r3, #16
 8002d70:	613b      	str	r3, [r7, #16]
        break;
 8002d72:	e032      	b.n	8002dda <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4a3d      	ldr	r2, [pc, #244]	; (8002e70 <HAL_DAC_Start_DMA+0x18c>)
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4a3c      	ldr	r2, [pc, #240]	; (8002e74 <HAL_DAC_Start_DMA+0x190>)
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4a3b      	ldr	r2, [pc, #236]	; (8002e78 <HAL_DAC_Start_DMA+0x194>)
 8002d8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d013      	beq.n	8002dca <HAL_DAC_Start_DMA+0xe6>
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d817      	bhi.n	8002dd8 <HAL_DAC_Start_DMA+0xf4>
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_DAC_Start_DMA+0xd2>
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d005      	beq.n	8002dc0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002db4:	e010      	b.n	8002dd8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3314      	adds	r3, #20
 8002dbc:	613b      	str	r3, [r7, #16]
        break;
 8002dbe:	e00c      	b.n	8002dda <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3318      	adds	r3, #24
 8002dc6:	613b      	str	r3, [r7, #16]
        break;
 8002dc8:	e007      	b.n	8002dda <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	331c      	adds	r3, #28
 8002dd0:	613b      	str	r3, [r7, #16]
        break;
 8002dd2:	e002      	b.n	8002dda <HAL_DAC_Start_DMA+0xf6>
        break;
 8002dd4:	bf00      	nop
 8002dd6:	e000      	b.n	8002dda <HAL_DAC_Start_DMA+0xf6>
        break;
 8002dd8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d111      	bne.n	8002e04 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6898      	ldr	r0, [r3, #8]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	f000 fab9 	bl	8003370 <HAL_DMA_Start_IT>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	75fb      	strb	r3, [r7, #23]
 8002e02:	e010      	b.n	8002e26 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002e12:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68d8      	ldr	r0, [r3, #12]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	f000 faa7 	bl	8003370 <HAL_DMA_Start_IT>
 8002e22:	4603      	mov	r3, r0
 8002e24:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10c      	bne.n	8002e4c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6819      	ldr	r1, [r3, #0]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	2201      	movs	r2, #1
 8002e40:	409a      	lsls	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e005      	b.n	8002e58 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f043 0204 	orr.w	r2, r3, #4
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	080030ed 	.word	0x080030ed
 8002e68:	0800310f 	.word	0x0800310f
 8002e6c:	0800312b 	.word	0x0800312b
 8002e70:	08003195 	.word	0x08003195
 8002e74:	080031b7 	.word	0x080031b7
 8002e78:	080031d3 	.word	0x080031d3

08002e7c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	795b      	ldrb	r3, [r3, #5]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_DAC_ConfigChannel+0x1c>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e107      	b.n	80030e4 <HAL_DAC_ConfigChannel+0x22c>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2202      	movs	r2, #2
 8002ede:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d174      	bne.n	8002fd2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ee8:	f7fe fd00 	bl	80018ec <HAL_GetTick>
 8002eec:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d134      	bne.n	8002f5e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ef4:	e011      	b.n	8002f1a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ef6:	f7fe fcf9 	bl	80018ec <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d90a      	bls.n	8002f1a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f043 0208 	orr.w	r2, r3, #8
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2203      	movs	r2, #3
 8002f14:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e0e4      	b.n	80030e4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1e6      	bne.n	8002ef6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002f28:	2001      	movs	r0, #1
 8002f2a:	f7fe fceb 	bl	8001904 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	6992      	ldr	r2, [r2, #24]
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
 8002f38:	e01e      	b.n	8002f78 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f3a:	f7fe fcd7 	bl	80018ec <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d90a      	bls.n	8002f5e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f043 0208 	orr.w	r2, r3, #8
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2203      	movs	r2, #3
 8002f58:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0c2      	b.n	80030e4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	dbe8      	blt.n	8002f3a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002f68:	2001      	movs	r0, #1
 8002f6a:	f7fe fccb 	bl	8001904 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	6992      	ldr	r2, [r2, #24]
 8002f76:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	ea02 0103 	and.w	r1, r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	21ff      	movs	r1, #255	; 0xff
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	ea02 0103 	and.w	r1, r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	6a1a      	ldr	r2, [r3, #32]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d11d      	bne.n	8003016 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	221f      	movs	r2, #31
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2207      	movs	r2, #7
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	431a      	orrs	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6819      	ldr	r1, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	400a      	ands	r2, r1
 800307a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	f640 72fc 	movw	r2, #4092	; 0xffc
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6819      	ldr	r1, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	22c0      	movs	r2, #192	; 0xc0
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43da      	mvns	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	400a      	ands	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3720      	adds	r7, #32
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f7ff febe 	bl	8002e7c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	711a      	strb	r2, [r3, #4]
}
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7ff feb7 	bl	8002e90 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003122:	bf00      	nop
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f043 0204 	orr.w	r2, r3, #4
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f7ff fead 	bl	8002ea4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	711a      	strb	r2, [r3, #4]
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f7ff ffd8 	bl	8003158 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	711a      	strb	r2, [r3, #4]
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7ff ffd1 	bl	800316c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f043 0204 	orr.w	r2, r3, #4
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f7ff ffc7 	bl	8003180 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	711a      	strb	r2, [r3, #4]
}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e098      	b.n	8003344 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <HAL_DMA_Init+0x150>)
 800321a:	429a      	cmp	r2, r3
 800321c:	d80f      	bhi.n	800323e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_DMA_Init+0x154>)
 8003226:	4413      	add	r3, r2
 8003228:	4a4b      	ldr	r2, [pc, #300]	; (8003358 <HAL_DMA_Init+0x158>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	009a      	lsls	r2, r3, #2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a48      	ldr	r2, [pc, #288]	; (800335c <HAL_DMA_Init+0x15c>)
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
 800323c:	e00e      	b.n	800325c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	4b46      	ldr	r3, [pc, #280]	; (8003360 <HAL_DMA_Init+0x160>)
 8003246:	4413      	add	r3, r2
 8003248:	4a43      	ldr	r2, [pc, #268]	; (8003358 <HAL_DMA_Init+0x158>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	009a      	lsls	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a42      	ldr	r2, [pc, #264]	; (8003364 <HAL_DMA_Init+0x164>)
 800325a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003280:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003298:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032b6:	d039      	beq.n	800332c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	4a27      	ldr	r2, [pc, #156]	; (800335c <HAL_DMA_Init+0x15c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d11a      	bne.n	80032f8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032c2:	4b29      	ldr	r3, [pc, #164]	; (8003368 <HAL_DMA_Init+0x168>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f003 031c 	and.w	r3, r3, #28
 80032ce:	210f      	movs	r1, #15
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	4924      	ldr	r1, [pc, #144]	; (8003368 <HAL_DMA_Init+0x168>)
 80032d8:	4013      	ands	r3, r2
 80032da:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032dc:	4b22      	ldr	r3, [pc, #136]	; (8003368 <HAL_DMA_Init+0x168>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	f003 031c 	and.w	r3, r3, #28
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	491d      	ldr	r1, [pc, #116]	; (8003368 <HAL_DMA_Init+0x168>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
 80032f6:	e019      	b.n	800332c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032f8:	4b1c      	ldr	r3, [pc, #112]	; (800336c <HAL_DMA_Init+0x16c>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003300:	f003 031c 	and.w	r3, r3, #28
 8003304:	210f      	movs	r1, #15
 8003306:	fa01 f303 	lsl.w	r3, r1, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	4917      	ldr	r1, [pc, #92]	; (800336c <HAL_DMA_Init+0x16c>)
 800330e:	4013      	ands	r3, r2
 8003310:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003312:	4b16      	ldr	r3, [pc, #88]	; (800336c <HAL_DMA_Init+0x16c>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6859      	ldr	r1, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	f003 031c 	and.w	r3, r3, #28
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	4911      	ldr	r1, [pc, #68]	; (800336c <HAL_DMA_Init+0x16c>)
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	40020407 	.word	0x40020407
 8003354:	bffdfff8 	.word	0xbffdfff8
 8003358:	cccccccd 	.word	0xcccccccd
 800335c:	40020000 	.word	0x40020000
 8003360:	bffdfbf8 	.word	0xbffdfbf8
 8003364:	40020400 	.word	0x40020400
 8003368:	400200a8 	.word	0x400200a8
 800336c:	400204a8 	.word	0x400204a8

08003370 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_DMA_Start_IT+0x20>
 800338c:	2302      	movs	r3, #2
 800338e:	e04b      	b.n	8003428 <HAL_DMA_Start_IT+0xb8>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d13a      	bne.n	800341a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0201 	bic.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f8e0 	bl	800358e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 020e 	orr.w	r2, r2, #14
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	e00f      	b.n	8003408 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0204 	bic.w	r2, r2, #4
 80033f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 020a 	orr.w	r2, r2, #10
 8003406:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e005      	b.n	8003426 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003422:	2302      	movs	r3, #2
 8003424:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003426:	7dfb      	ldrb	r3, [r7, #23]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	f003 031c 	and.w	r3, r3, #28
 8003450:	2204      	movs	r2, #4
 8003452:	409a      	lsls	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d026      	beq.n	80034aa <HAL_DMA_IRQHandler+0x7a>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d021      	beq.n	80034aa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d107      	bne.n	8003484 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0204 	bic.w	r2, r2, #4
 8003482:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	f003 021c 	and.w	r2, r3, #28
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	2104      	movs	r1, #4
 8003492:	fa01 f202 	lsl.w	r2, r1, r2
 8003496:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	2b00      	cmp	r3, #0
 800349e:	d071      	beq.n	8003584 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80034a8:	e06c      	b.n	8003584 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f003 031c 	and.w	r3, r3, #28
 80034b2:	2202      	movs	r2, #2
 80034b4:	409a      	lsls	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d02e      	beq.n	800351c <HAL_DMA_IRQHandler+0xec>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d029      	beq.n	800351c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10b      	bne.n	80034ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 020a 	bic.w	r2, r2, #10
 80034e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	f003 021c 	and.w	r2, r3, #28
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2102      	movs	r1, #2
 80034fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003500:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	2b00      	cmp	r3, #0
 8003510:	d038      	beq.n	8003584 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800351a:	e033      	b.n	8003584 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	f003 031c 	and.w	r3, r3, #28
 8003524:	2208      	movs	r2, #8
 8003526:	409a      	lsls	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d02a      	beq.n	8003586 <HAL_DMA_IRQHandler+0x156>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d025      	beq.n	8003586 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 020e 	bic.w	r2, r2, #14
 8003548:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	f003 021c 	and.w	r2, r3, #28
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2101      	movs	r1, #1
 8003558:	fa01 f202 	lsl.w	r2, r1, r2
 800355c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003584:	bf00      	nop
 8003586:	bf00      	nop
}
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800358e:	b480      	push	{r7}
 8003590:	b085      	sub	sp, #20
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	f003 021c 	and.w	r2, r3, #28
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	2101      	movs	r1, #1
 80035aa:	fa01 f202 	lsl.w	r2, r1, r2
 80035ae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d108      	bne.n	80035d2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035d0:	e007      	b.n	80035e2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	60da      	str	r2, [r3, #12]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035fe:	e154      	b.n	80038aa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	4013      	ands	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 8146 	beq.w	80038a4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	2b01      	cmp	r3, #1
 8003622:	d005      	beq.n	8003630 <HAL_GPIO_Init+0x40>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d130      	bne.n	8003692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003666:	2201      	movs	r2, #1
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	f003 0201 	and.w	r2, r3, #1
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b03      	cmp	r3, #3
 800369c:	d017      	beq.n	80036ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	2203      	movs	r2, #3
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4013      	ands	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d123      	bne.n	8003722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	08da      	lsrs	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3208      	adds	r2, #8
 80036e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	220f      	movs	r2, #15
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	08da      	lsrs	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3208      	adds	r2, #8
 800371c:	6939      	ldr	r1, [r7, #16]
 800371e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	2203      	movs	r2, #3
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 0203 	and.w	r2, r3, #3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 80a0 	beq.w	80038a4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003764:	4b58      	ldr	r3, [pc, #352]	; (80038c8 <HAL_GPIO_Init+0x2d8>)
 8003766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003768:	4a57      	ldr	r2, [pc, #348]	; (80038c8 <HAL_GPIO_Init+0x2d8>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	6613      	str	r3, [r2, #96]	; 0x60
 8003770:	4b55      	ldr	r3, [pc, #340]	; (80038c8 <HAL_GPIO_Init+0x2d8>)
 8003772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800377c:	4a53      	ldr	r2, [pc, #332]	; (80038cc <HAL_GPIO_Init+0x2dc>)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	089b      	lsrs	r3, r3, #2
 8003782:	3302      	adds	r3, #2
 8003784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	220f      	movs	r2, #15
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037a6:	d019      	beq.n	80037dc <HAL_GPIO_Init+0x1ec>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a49      	ldr	r2, [pc, #292]	; (80038d0 <HAL_GPIO_Init+0x2e0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d013      	beq.n	80037d8 <HAL_GPIO_Init+0x1e8>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a48      	ldr	r2, [pc, #288]	; (80038d4 <HAL_GPIO_Init+0x2e4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00d      	beq.n	80037d4 <HAL_GPIO_Init+0x1e4>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a47      	ldr	r2, [pc, #284]	; (80038d8 <HAL_GPIO_Init+0x2e8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d007      	beq.n	80037d0 <HAL_GPIO_Init+0x1e0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a46      	ldr	r2, [pc, #280]	; (80038dc <HAL_GPIO_Init+0x2ec>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d101      	bne.n	80037cc <HAL_GPIO_Init+0x1dc>
 80037c8:	2304      	movs	r3, #4
 80037ca:	e008      	b.n	80037de <HAL_GPIO_Init+0x1ee>
 80037cc:	2307      	movs	r3, #7
 80037ce:	e006      	b.n	80037de <HAL_GPIO_Init+0x1ee>
 80037d0:	2303      	movs	r3, #3
 80037d2:	e004      	b.n	80037de <HAL_GPIO_Init+0x1ee>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e002      	b.n	80037de <HAL_GPIO_Init+0x1ee>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_GPIO_Init+0x1ee>
 80037dc:	2300      	movs	r3, #0
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	f002 0203 	and.w	r2, r2, #3
 80037e4:	0092      	lsls	r2, r2, #2
 80037e6:	4093      	lsls	r3, r2
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037ee:	4937      	ldr	r1, [pc, #220]	; (80038cc <HAL_GPIO_Init+0x2dc>)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	3302      	adds	r3, #2
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037fc:	4b38      	ldr	r3, [pc, #224]	; (80038e0 <HAL_GPIO_Init+0x2f0>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	43db      	mvns	r3, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003820:	4a2f      	ldr	r2, [pc, #188]	; (80038e0 <HAL_GPIO_Init+0x2f0>)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003826:	4b2e      	ldr	r3, [pc, #184]	; (80038e0 <HAL_GPIO_Init+0x2f0>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	43db      	mvns	r3, r3
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4013      	ands	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800384a:	4a25      	ldr	r2, [pc, #148]	; (80038e0 <HAL_GPIO_Init+0x2f0>)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003850:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <HAL_GPIO_Init+0x2f0>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	43db      	mvns	r3, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003874:	4a1a      	ldr	r2, [pc, #104]	; (80038e0 <HAL_GPIO_Init+0x2f0>)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800387a:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_GPIO_Init+0x2f0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	43db      	mvns	r3, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800389e:	4a10      	ldr	r2, [pc, #64]	; (80038e0 <HAL_GPIO_Init+0x2f0>)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	3301      	adds	r3, #1
 80038a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f47f aea3 	bne.w	8003600 <HAL_GPIO_Init+0x10>
  }
}
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40010000 	.word	0x40010000
 80038d0:	48000400 	.word	0x48000400
 80038d4:	48000800 	.word	0x48000800
 80038d8:	48000c00 	.word	0x48000c00
 80038dc:	48001000 	.word	0x48001000
 80038e0:	40010400 	.word	0x40010400

080038e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	807b      	strh	r3, [r7, #2]
 80038f0:	4613      	mov	r3, r2
 80038f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038f4:	787b      	ldrb	r3, [r7, #1]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038fa:	887a      	ldrh	r2, [r7, #2]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003900:	e002      	b.n	8003908 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003902:	887a      	ldrh	r2, [r7, #2]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4013      	ands	r3, r2
 800392c:	041a      	lsls	r2, r3, #16
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	43d9      	mvns	r1, r3
 8003932:	887b      	ldrh	r3, [r7, #2]
 8003934:	400b      	ands	r3, r1
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	619a      	str	r2, [r3, #24]
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800394c:	4b04      	ldr	r3, [pc, #16]	; (8003960 <HAL_PWREx_GetVoltageRange+0x18>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40007000 	.word	0x40007000

08003964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003972:	d130      	bne.n	80039d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003974:	4b23      	ldr	r3, [pc, #140]	; (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800397c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003980:	d038      	beq.n	80039f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003982:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800398a:	4a1e      	ldr	r2, [pc, #120]	; (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800398c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003990:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2232      	movs	r2, #50	; 0x32
 8003998:	fb02 f303 	mul.w	r3, r2, r3
 800399c:	4a1b      	ldr	r2, [pc, #108]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0c9b      	lsrs	r3, r3, #18
 80039a4:	3301      	adds	r3, #1
 80039a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039a8:	e002      	b.n	80039b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039bc:	d102      	bne.n	80039c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f2      	bne.n	80039aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d0:	d110      	bne.n	80039f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e00f      	b.n	80039f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e2:	d007      	beq.n	80039f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039ec:	4a05      	ldr	r2, [pc, #20]	; (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40007000 	.word	0x40007000
 8003a08:	20000068 	.word	0x20000068
 8003a0c:	431bde83 	.word	0x431bde83

08003a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e3fe      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a22:	4ba1      	ldr	r3, [pc, #644]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a2c:	4b9e      	ldr	r3, [pc, #632]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 80e4 	beq.w	8003c0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <HAL_RCC_OscConfig+0x4a>
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b0c      	cmp	r3, #12
 8003a4e:	f040 808b 	bne.w	8003b68 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	f040 8087 	bne.w	8003b68 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a5a:	4b93      	ldr	r3, [pc, #588]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_RCC_OscConfig+0x62>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e3d6      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1a      	ldr	r2, [r3, #32]
 8003a76:	4b8c      	ldr	r3, [pc, #560]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <HAL_RCC_OscConfig+0x7c>
 8003a82:	4b89      	ldr	r3, [pc, #548]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a8a:	e005      	b.n	8003a98 <HAL_RCC_OscConfig+0x88>
 8003a8c:	4b86      	ldr	r3, [pc, #536]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d223      	bcs.n	8003ae4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fd53 	bl	800454c <RCC_SetFlashLatencyFromMSIRange>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e3b7      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ab0:	4b7d      	ldr	r3, [pc, #500]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a7c      	ldr	r2, [pc, #496]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003ab6:	f043 0308 	orr.w	r3, r3, #8
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b7a      	ldr	r3, [pc, #488]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	4977      	ldr	r1, [pc, #476]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ace:	4b76      	ldr	r3, [pc, #472]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	4972      	ldr	r1, [pc, #456]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	604b      	str	r3, [r1, #4]
 8003ae2:	e025      	b.n	8003b30 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ae4:	4b70      	ldr	r3, [pc, #448]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a6f      	ldr	r2, [pc, #444]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003aea:	f043 0308 	orr.w	r3, r3, #8
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	4b6d      	ldr	r3, [pc, #436]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	496a      	ldr	r1, [pc, #424]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b02:	4b69      	ldr	r3, [pc, #420]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	4965      	ldr	r1, [pc, #404]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d109      	bne.n	8003b30 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fd13 	bl	800454c <RCC_SetFlashLatencyFromMSIRange>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e377      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b30:	f000 fc80 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b5c      	ldr	r3, [pc, #368]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	495a      	ldr	r1, [pc, #360]	; (8003cac <HAL_RCC_OscConfig+0x29c>)
 8003b42:	5ccb      	ldrb	r3, [r1, r3]
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4c:	4a58      	ldr	r2, [pc, #352]	; (8003cb0 <HAL_RCC_OscConfig+0x2a0>)
 8003b4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b50:	4b58      	ldr	r3, [pc, #352]	; (8003cb4 <HAL_RCC_OscConfig+0x2a4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fd fe79 	bl	800184c <HAL_InitTick>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d052      	beq.n	8003c0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	e35b      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d032      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b70:	4b4d      	ldr	r3, [pc, #308]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a4c      	ldr	r2, [pc, #304]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b7c:	f7fd feb6 	bl	80018ec <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b84:	f7fd feb2 	bl	80018ec <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e344      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b96:	4b44      	ldr	r3, [pc, #272]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ba2:	4b41      	ldr	r3, [pc, #260]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a40      	ldr	r2, [pc, #256]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003ba8:	f043 0308 	orr.w	r3, r3, #8
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b3e      	ldr	r3, [pc, #248]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	493b      	ldr	r1, [pc, #236]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bc0:	4b39      	ldr	r3, [pc, #228]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	4936      	ldr	r1, [pc, #216]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	604b      	str	r3, [r1, #4]
 8003bd4:	e01a      	b.n	8003c0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bd6:	4b34      	ldr	r3, [pc, #208]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a33      	ldr	r2, [pc, #204]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003be2:	f7fd fe83 	bl	80018ec <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bea:	f7fd fe7f 	bl	80018ec <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e311      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bfc:	4b2a      	ldr	r3, [pc, #168]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f0      	bne.n	8003bea <HAL_RCC_OscConfig+0x1da>
 8003c08:	e000      	b.n	8003c0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d074      	beq.n	8003d02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d005      	beq.n	8003c2a <HAL_RCC_OscConfig+0x21a>
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b0c      	cmp	r3, #12
 8003c22:	d10e      	bne.n	8003c42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d10b      	bne.n	8003c42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2a:	4b1f      	ldr	r3, [pc, #124]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d064      	beq.n	8003d00 <HAL_RCC_OscConfig+0x2f0>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d160      	bne.n	8003d00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e2ee      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCC_OscConfig+0x24a>
 8003c4c:	4b16      	ldr	r3, [pc, #88]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	e01d      	b.n	8003c96 <HAL_RCC_OscConfig+0x286>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c62:	d10c      	bne.n	8003c7e <HAL_RCC_OscConfig+0x26e>
 8003c64:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0f      	ldr	r2, [pc, #60]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003c6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	e00b      	b.n	8003c96 <HAL_RCC_OscConfig+0x286>
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a06      	ldr	r2, [pc, #24]	; (8003ca8 <HAL_RCC_OscConfig+0x298>)
 8003c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c94:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01c      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9e:	f7fd fe25 	bl	80018ec <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ca4:	e011      	b.n	8003cca <HAL_RCC_OscConfig+0x2ba>
 8003ca6:	bf00      	nop
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	08008d40 	.word	0x08008d40
 8003cb0:	20000068 	.word	0x20000068
 8003cb4:	2000006c 	.word	0x2000006c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fd fe18 	bl	80018ec <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e2aa      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cca:	4baf      	ldr	r3, [pc, #700]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x2a8>
 8003cd6:	e014      	b.n	8003d02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fd fe08 	bl	80018ec <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce0:	f7fd fe04 	bl	80018ec <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	; 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e296      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cf2:	4ba5      	ldr	r3, [pc, #660]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x2d0>
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d060      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_OscConfig+0x310>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b0c      	cmp	r3, #12
 8003d18:	d119      	bne.n	8003d4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d116      	bne.n	8003d4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d20:	4b99      	ldr	r3, [pc, #612]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_RCC_OscConfig+0x328>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e273      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d38:	4b93      	ldr	r3, [pc, #588]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	061b      	lsls	r3, r3, #24
 8003d46:	4990      	ldr	r1, [pc, #576]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d4c:	e040      	b.n	8003dd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d023      	beq.n	8003d9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d56:	4b8c      	ldr	r3, [pc, #560]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a8b      	ldr	r2, [pc, #556]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d62:	f7fd fdc3 	bl	80018ec <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d6a:	f7fd fdbf 	bl	80018ec <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e251      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d7c:	4b82      	ldr	r3, [pc, #520]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d88:	4b7f      	ldr	r3, [pc, #508]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	497c      	ldr	r1, [pc, #496]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
 8003d9c:	e018      	b.n	8003dd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d9e:	4b7a      	ldr	r3, [pc, #488]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a79      	ldr	r2, [pc, #484]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003daa:	f7fd fd9f 	bl	80018ec <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db2:	f7fd fd9b 	bl	80018ec <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e22d      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dc4:	4b70      	ldr	r3, [pc, #448]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f0      	bne.n	8003db2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d03c      	beq.n	8003e56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01c      	beq.n	8003e1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de4:	4b68      	ldr	r3, [pc, #416]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dea:	4a67      	ldr	r2, [pc, #412]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df4:	f7fd fd7a 	bl	80018ec <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfc:	f7fd fd76 	bl	80018ec <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e208      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e0e:	4b5e      	ldr	r3, [pc, #376]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0ef      	beq.n	8003dfc <HAL_RCC_OscConfig+0x3ec>
 8003e1c:	e01b      	b.n	8003e56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e1e:	4b5a      	ldr	r3, [pc, #360]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e24:	4a58      	ldr	r2, [pc, #352]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2e:	f7fd fd5d 	bl	80018ec <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e36:	f7fd fd59 	bl	80018ec <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e1eb      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e48:	4b4f      	ldr	r3, [pc, #316]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1ef      	bne.n	8003e36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80a6 	beq.w	8003fb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e64:	2300      	movs	r3, #0
 8003e66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e68:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10d      	bne.n	8003e90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e74:	4b44      	ldr	r3, [pc, #272]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	4a43      	ldr	r2, [pc, #268]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e80:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e90:	4b3e      	ldr	r3, [pc, #248]	; (8003f8c <HAL_RCC_OscConfig+0x57c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d118      	bne.n	8003ece <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e9c:	4b3b      	ldr	r3, [pc, #236]	; (8003f8c <HAL_RCC_OscConfig+0x57c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a3a      	ldr	r2, [pc, #232]	; (8003f8c <HAL_RCC_OscConfig+0x57c>)
 8003ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea8:	f7fd fd20 	bl	80018ec <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb0:	f7fd fd1c 	bl	80018ec <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e1ae      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec2:	4b32      	ldr	r3, [pc, #200]	; (8003f8c <HAL_RCC_OscConfig+0x57c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d108      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x4d8>
 8003ed6:	4b2c      	ldr	r3, [pc, #176]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003edc:	4a2a      	ldr	r2, [pc, #168]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ee6:	e024      	b.n	8003f32 <HAL_RCC_OscConfig+0x522>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b05      	cmp	r3, #5
 8003eee:	d110      	bne.n	8003f12 <HAL_RCC_OscConfig+0x502>
 8003ef0:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef6:	4a24      	ldr	r2, [pc, #144]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003ef8:	f043 0304 	orr.w	r3, r3, #4
 8003efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f00:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f06:	4a20      	ldr	r2, [pc, #128]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f10:	e00f      	b.n	8003f32 <HAL_RCC_OscConfig+0x522>
 8003f12:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f18:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f22:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f28:	4a17      	ldr	r2, [pc, #92]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003f2a:	f023 0304 	bic.w	r3, r3, #4
 8003f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d016      	beq.n	8003f68 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3a:	f7fd fcd7 	bl	80018ec <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f40:	e00a      	b.n	8003f58 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f42:	f7fd fcd3 	bl	80018ec <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e163      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_OscConfig+0x578>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0ed      	beq.n	8003f42 <HAL_RCC_OscConfig+0x532>
 8003f66:	e01a      	b.n	8003f9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f68:	f7fd fcc0 	bl	80018ec <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f6e:	e00f      	b.n	8003f90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f70:	f7fd fcbc 	bl	80018ec <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d906      	bls.n	8003f90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e14c      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f90:	4ba5      	ldr	r3, [pc, #660]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e8      	bne.n	8003f70 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f9e:	7ffb      	ldrb	r3, [r7, #31]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d105      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa4:	4ba0      	ldr	r3, [pc, #640]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8003fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa8:	4a9f      	ldr	r2, [pc, #636]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8003faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d03c      	beq.n	8004036 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01c      	beq.n	8003ffe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fc4:	4b98      	ldr	r3, [pc, #608]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8003fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fca:	4a97      	ldr	r2, [pc, #604]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd4:	f7fd fc8a 	bl	80018ec <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fdc:	f7fd fc86 	bl	80018ec <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e118      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fee:	4b8e      	ldr	r3, [pc, #568]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8003ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <HAL_RCC_OscConfig+0x5cc>
 8003ffc:	e01b      	b.n	8004036 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ffe:	4b8a      	ldr	r3, [pc, #552]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8004000:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004004:	4a88      	ldr	r2, [pc, #544]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400e:	f7fd fc6d 	bl	80018ec <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004016:	f7fd fc69 	bl	80018ec <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e0fb      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004028:	4b7f      	ldr	r3, [pc, #508]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 800402a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1ef      	bne.n	8004016 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 80ef 	beq.w	800421e <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	2b02      	cmp	r3, #2
 8004046:	f040 80c5 	bne.w	80041d4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800404a:	4b77      	ldr	r3, [pc, #476]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f003 0203 	and.w	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	429a      	cmp	r2, r3
 800405c:	d12c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	3b01      	subs	r3, #1
 800406a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d123      	bne.n	80040b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d11b      	bne.n	80040b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d113      	bne.n	80040b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	085b      	lsrs	r3, r3, #1
 800409c:	3b01      	subs	r3, #1
 800409e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d109      	bne.n	80040b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	085b      	lsrs	r3, r3, #1
 80040b0:	3b01      	subs	r3, #1
 80040b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d067      	beq.n	8004188 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	2b0c      	cmp	r3, #12
 80040bc:	d062      	beq.n	8004184 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040be:	4b5a      	ldr	r3, [pc, #360]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e0a8      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040ce:	4b56      	ldr	r3, [pc, #344]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a55      	ldr	r2, [pc, #340]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 80040d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040da:	f7fd fc07 	bl	80018ec <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e2:	f7fd fc03 	bl	80018ec <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e095      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f4:	4b4c      	ldr	r3, [pc, #304]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f0      	bne.n	80040e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004100:	4b49      	ldr	r3, [pc, #292]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	4b49      	ldr	r3, [pc, #292]	; (800422c <HAL_RCC_OscConfig+0x81c>)
 8004106:	4013      	ands	r3, r2
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004110:	3a01      	subs	r2, #1
 8004112:	0112      	lsls	r2, r2, #4
 8004114:	4311      	orrs	r1, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800411a:	0212      	lsls	r2, r2, #8
 800411c:	4311      	orrs	r1, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004122:	0852      	lsrs	r2, r2, #1
 8004124:	3a01      	subs	r2, #1
 8004126:	0552      	lsls	r2, r2, #21
 8004128:	4311      	orrs	r1, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800412e:	0852      	lsrs	r2, r2, #1
 8004130:	3a01      	subs	r2, #1
 8004132:	0652      	lsls	r2, r2, #25
 8004134:	4311      	orrs	r1, r2
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800413a:	06d2      	lsls	r2, r2, #27
 800413c:	430a      	orrs	r2, r1
 800413e:	493a      	ldr	r1, [pc, #232]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8004140:	4313      	orrs	r3, r2
 8004142:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004144:	4b38      	ldr	r3, [pc, #224]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a37      	ldr	r2, [pc, #220]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 800414a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800414e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004150:	4b35      	ldr	r3, [pc, #212]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4a34      	ldr	r2, [pc, #208]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8004156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800415a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800415c:	f7fd fbc6 	bl	80018ec <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004164:	f7fd fbc2 	bl	80018ec <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e054      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004176:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004182:	e04c      	b.n	800421e <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e04b      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004188:	4b27      	ldr	r3, [pc, #156]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d144      	bne.n	800421e <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004194:	4b24      	ldr	r3, [pc, #144]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a23      	ldr	r2, [pc, #140]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 800419a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800419e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041a0:	4b21      	ldr	r3, [pc, #132]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a20      	ldr	r2, [pc, #128]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 80041a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041ac:	f7fd fb9e 	bl	80018ec <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fd fb9a 	bl	80018ec <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e02c      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c6:	4b18      	ldr	r3, [pc, #96]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
 80041d2:	e024      	b.n	800421e <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2b0c      	cmp	r3, #12
 80041d8:	d01f      	beq.n	800421a <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041da:	4b13      	ldr	r3, [pc, #76]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 80041e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7fd fb81 	bl	80018ec <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ee:	f7fd fb7d 	bl	80018ec <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e00f      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f0      	bne.n	80041ee <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	4905      	ldr	r1, [pc, #20]	; (8004228 <HAL_RCC_OscConfig+0x818>)
 8004212:	4b07      	ldr	r3, [pc, #28]	; (8004230 <HAL_RCC_OscConfig+0x820>)
 8004214:	4013      	ands	r3, r2
 8004216:	60cb      	str	r3, [r1, #12]
 8004218:	e001      	b.n	800421e <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40021000 	.word	0x40021000
 800422c:	019d808c 	.word	0x019d808c
 8004230:	feeefffc 	.word	0xfeeefffc

08004234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0e7      	b.n	8004418 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004248:	4b75      	ldr	r3, [pc, #468]	; (8004420 <HAL_RCC_ClockConfig+0x1ec>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d910      	bls.n	8004278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b72      	ldr	r3, [pc, #456]	; (8004420 <HAL_RCC_ClockConfig+0x1ec>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 0207 	bic.w	r2, r3, #7
 800425e:	4970      	ldr	r1, [pc, #448]	; (8004420 <HAL_RCC_ClockConfig+0x1ec>)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	4b6e      	ldr	r3, [pc, #440]	; (8004420 <HAL_RCC_ClockConfig+0x1ec>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0cf      	b.n	8004418 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d010      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	4b66      	ldr	r3, [pc, #408]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004290:	429a      	cmp	r2, r3
 8004292:	d908      	bls.n	80042a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004294:	4b63      	ldr	r3, [pc, #396]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	4960      	ldr	r1, [pc, #384]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d04c      	beq.n	800434c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d107      	bne.n	80042ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ba:	4b5a      	ldr	r3, [pc, #360]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d121      	bne.n	800430a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e0a6      	b.n	8004418 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042d2:	4b54      	ldr	r3, [pc, #336]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d115      	bne.n	800430a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e09a      	b.n	8004418 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d107      	bne.n	80042fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042ea:	4b4e      	ldr	r3, [pc, #312]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e08e      	b.n	8004418 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042fa:	4b4a      	ldr	r3, [pc, #296]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e086      	b.n	8004418 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800430a:	4b46      	ldr	r3, [pc, #280]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f023 0203 	bic.w	r2, r3, #3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4943      	ldr	r1, [pc, #268]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 8004318:	4313      	orrs	r3, r2
 800431a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800431c:	f7fd fae6 	bl	80018ec <HAL_GetTick>
 8004320:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004322:	e00a      	b.n	800433a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004324:	f7fd fae2 	bl	80018ec <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004332:	4293      	cmp	r3, r2
 8004334:	d901      	bls.n	800433a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e06e      	b.n	8004418 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433a:	4b3a      	ldr	r3, [pc, #232]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 020c 	and.w	r2, r3, #12
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	429a      	cmp	r2, r3
 800434a:	d1eb      	bne.n	8004324 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d010      	beq.n	800437a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	4b31      	ldr	r3, [pc, #196]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004364:	429a      	cmp	r2, r3
 8004366:	d208      	bcs.n	800437a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004368:	4b2e      	ldr	r3, [pc, #184]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	492b      	ldr	r1, [pc, #172]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800437a:	4b29      	ldr	r3, [pc, #164]	; (8004420 <HAL_RCC_ClockConfig+0x1ec>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d210      	bcs.n	80043aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004388:	4b25      	ldr	r3, [pc, #148]	; (8004420 <HAL_RCC_ClockConfig+0x1ec>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 0207 	bic.w	r2, r3, #7
 8004390:	4923      	ldr	r1, [pc, #140]	; (8004420 <HAL_RCC_ClockConfig+0x1ec>)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	4313      	orrs	r3, r2
 8004396:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004398:	4b21      	ldr	r3, [pc, #132]	; (8004420 <HAL_RCC_ClockConfig+0x1ec>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d001      	beq.n	80043aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e036      	b.n	8004418 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d008      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b6:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	4918      	ldr	r1, [pc, #96]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d009      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043d4:	4b13      	ldr	r3, [pc, #76]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4910      	ldr	r1, [pc, #64]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043e8:	f000 f824 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 80043ec:	4602      	mov	r2, r0
 80043ee:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <HAL_RCC_ClockConfig+0x1f0>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	091b      	lsrs	r3, r3, #4
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	490b      	ldr	r1, [pc, #44]	; (8004428 <HAL_RCC_ClockConfig+0x1f4>)
 80043fa:	5ccb      	ldrb	r3, [r1, r3]
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
 8004404:	4a09      	ldr	r2, [pc, #36]	; (800442c <HAL_RCC_ClockConfig+0x1f8>)
 8004406:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004408:	4b09      	ldr	r3, [pc, #36]	; (8004430 <HAL_RCC_ClockConfig+0x1fc>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f7fd fa1d 	bl	800184c <HAL_InitTick>
 8004412:	4603      	mov	r3, r0
 8004414:	72fb      	strb	r3, [r7, #11]

  return status;
 8004416:	7afb      	ldrb	r3, [r7, #11]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40022000 	.word	0x40022000
 8004424:	40021000 	.word	0x40021000
 8004428:	08008d40 	.word	0x08008d40
 800442c:	20000068 	.word	0x20000068
 8004430:	2000006c 	.word	0x2000006c

08004434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004434:	b480      	push	{r7}
 8004436:	b089      	sub	sp, #36	; 0x24
 8004438:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	2300      	movs	r3, #0
 8004440:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004442:	4b3e      	ldr	r3, [pc, #248]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800444c:	4b3b      	ldr	r3, [pc, #236]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0303 	and.w	r3, r3, #3
 8004454:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_RCC_GetSysClockFreq+0x34>
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b0c      	cmp	r3, #12
 8004460:	d121      	bne.n	80044a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d11e      	bne.n	80044a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004468:	4b34      	ldr	r3, [pc, #208]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d107      	bne.n	8004484 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004474:	4b31      	ldr	r3, [pc, #196]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 8004476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	e005      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004484:	4b2d      	ldr	r3, [pc, #180]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004490:	4a2b      	ldr	r2, [pc, #172]	; (8004540 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004498:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10d      	bne.n	80044bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044a4:	e00a      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d102      	bne.n	80044b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044ac:	4b25      	ldr	r3, [pc, #148]	; (8004544 <HAL_RCC_GetSysClockFreq+0x110>)
 80044ae:	61bb      	str	r3, [r7, #24]
 80044b0:	e004      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d101      	bne.n	80044bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044b8:	4b23      	ldr	r3, [pc, #140]	; (8004548 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b0c      	cmp	r3, #12
 80044c0:	d134      	bne.n	800452c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044c2:	4b1e      	ldr	r3, [pc, #120]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d003      	beq.n	80044da <HAL_RCC_GetSysClockFreq+0xa6>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d003      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0xac>
 80044d8:	e005      	b.n	80044e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044da:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <HAL_RCC_GetSysClockFreq+0x110>)
 80044dc:	617b      	str	r3, [r7, #20]
      break;
 80044de:	e005      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044e0:	4b19      	ldr	r3, [pc, #100]	; (8004548 <HAL_RCC_GetSysClockFreq+0x114>)
 80044e2:	617b      	str	r3, [r7, #20]
      break;
 80044e4:	e002      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	617b      	str	r3, [r7, #20]
      break;
 80044ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044ec:	4b13      	ldr	r3, [pc, #76]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	3301      	adds	r3, #1
 80044f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044fa:	4b10      	ldr	r3, [pc, #64]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	fb02 f203 	mul.w	r2, r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004512:	4b0a      	ldr	r3, [pc, #40]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	0e5b      	lsrs	r3, r3, #25
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	3301      	adds	r3, #1
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	fbb2 f3f3 	udiv	r3, r2, r3
 800452a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800452c:	69bb      	ldr	r3, [r7, #24]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3724      	adds	r7, #36	; 0x24
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
 8004540:	08008d50 	.word	0x08008d50
 8004544:	00f42400 	.word	0x00f42400
 8004548:	016e3600 	.word	0x016e3600

0800454c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004558:	4b2a      	ldr	r3, [pc, #168]	; (8004604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800455a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004564:	f7ff f9f0 	bl	8003948 <HAL_PWREx_GetVoltageRange>
 8004568:	6178      	str	r0, [r7, #20]
 800456a:	e014      	b.n	8004596 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800456c:	4b25      	ldr	r3, [pc, #148]	; (8004604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004570:	4a24      	ldr	r2, [pc, #144]	; (8004604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004576:	6593      	str	r3, [r2, #88]	; 0x58
 8004578:	4b22      	ldr	r3, [pc, #136]	; (8004604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004584:	f7ff f9e0 	bl	8003948 <HAL_PWREx_GetVoltageRange>
 8004588:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800458a:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800458c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458e:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004594:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800459c:	d10b      	bne.n	80045b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b80      	cmp	r3, #128	; 0x80
 80045a2:	d919      	bls.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2ba0      	cmp	r3, #160	; 0xa0
 80045a8:	d902      	bls.n	80045b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045aa:	2302      	movs	r3, #2
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	e013      	b.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045b0:	2301      	movs	r3, #1
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	e010      	b.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b80      	cmp	r3, #128	; 0x80
 80045ba:	d902      	bls.n	80045c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045bc:	2303      	movs	r3, #3
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	e00a      	b.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b80      	cmp	r3, #128	; 0x80
 80045c6:	d102      	bne.n	80045ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045c8:	2302      	movs	r3, #2
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	e004      	b.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b70      	cmp	r3, #112	; 0x70
 80045d2:	d101      	bne.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045d4:	2301      	movs	r3, #1
 80045d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f023 0207 	bic.w	r2, r3, #7
 80045e0:	4909      	ldr	r1, [pc, #36]	; (8004608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045e8:	4b07      	ldr	r3, [pc, #28]	; (8004608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d001      	beq.n	80045fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40021000 	.word	0x40021000
 8004608:	40022000 	.word	0x40022000

0800460c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004614:	2300      	movs	r3, #0
 8004616:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004618:	2300      	movs	r3, #0
 800461a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004624:	2b00      	cmp	r3, #0
 8004626:	d031      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004630:	d01a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004632:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004636:	d814      	bhi.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004638:	2b00      	cmp	r3, #0
 800463a:	d009      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800463c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004640:	d10f      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004642:	4b5d      	ldr	r3, [pc, #372]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	4a5c      	ldr	r2, [pc, #368]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800464c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800464e:	e00c      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3304      	adds	r3, #4
 8004654:	2100      	movs	r1, #0
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f9f0 	bl	8004a3c <RCCEx_PLLSAI1_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004660:	e003      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	74fb      	strb	r3, [r7, #19]
      break;
 8004666:	e000      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800466a:	7cfb      	ldrb	r3, [r7, #19]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004670:	4b51      	ldr	r3, [pc, #324]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004676:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	494e      	ldr	r1, [pc, #312]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004686:	e001      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 809e 	beq.w	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469a:	2300      	movs	r3, #0
 800469c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800469e:	4b46      	ldr	r3, [pc, #280]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00d      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b4:	4b40      	ldr	r3, [pc, #256]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b8:	4a3f      	ldr	r2, [pc, #252]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046be:	6593      	str	r3, [r2, #88]	; 0x58
 80046c0:	4b3d      	ldr	r3, [pc, #244]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046cc:	2301      	movs	r3, #1
 80046ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046d0:	4b3a      	ldr	r3, [pc, #232]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a39      	ldr	r2, [pc, #228]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046dc:	f7fd f906 	bl	80018ec <HAL_GetTick>
 80046e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046e2:	e009      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e4:	f7fd f902 	bl	80018ec <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d902      	bls.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	74fb      	strb	r3, [r7, #19]
        break;
 80046f6:	e005      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046f8:	4b30      	ldr	r3, [pc, #192]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0ef      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004704:	7cfb      	ldrb	r3, [r7, #19]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d15a      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800470a:	4b2b      	ldr	r3, [pc, #172]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004714:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01e      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	429a      	cmp	r2, r3
 8004724:	d019      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004726:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004730:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004732:	4b21      	ldr	r3, [pc, #132]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004738:	4a1f      	ldr	r2, [pc, #124]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800473a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004742:	4b1d      	ldr	r3, [pc, #116]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004748:	4a1b      	ldr	r2, [pc, #108]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800474a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004752:	4a19      	ldr	r2, [pc, #100]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d016      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fd f8c2 	bl	80018ec <HAL_GetTick>
 8004768:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800476a:	e00b      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476c:	f7fd f8be 	bl	80018ec <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	; 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d902      	bls.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	74fb      	strb	r3, [r7, #19]
            break;
 8004782:	e006      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0ec      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004792:	7cfb      	ldrb	r3, [r7, #19]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10b      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004798:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a6:	4904      	ldr	r1, [pc, #16]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047ae:	e009      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	74bb      	strb	r3, [r7, #18]
 80047b4:	e006      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80047b6:	bf00      	nop
 80047b8:	40021000 	.word	0x40021000
 80047bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c0:	7cfb      	ldrb	r3, [r7, #19]
 80047c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047c4:	7c7b      	ldrb	r3, [r7, #17]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d105      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ca:	4b9b      	ldr	r3, [pc, #620]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ce:	4a9a      	ldr	r2, [pc, #616]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047e2:	4b95      	ldr	r3, [pc, #596]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e8:	f023 0203 	bic.w	r2, r3, #3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	4991      	ldr	r1, [pc, #580]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004804:	4b8c      	ldr	r3, [pc, #560]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	f023 020c 	bic.w	r2, r3, #12
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	4989      	ldr	r1, [pc, #548]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004826:	4b84      	ldr	r3, [pc, #528]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	4980      	ldr	r1, [pc, #512]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004848:	4b7b      	ldr	r3, [pc, #492]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	4978      	ldr	r1, [pc, #480]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800486a:	4b73      	ldr	r3, [pc, #460]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004870:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004878:	496f      	ldr	r1, [pc, #444]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800488c:	4b6a      	ldr	r3, [pc, #424]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004892:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	4967      	ldr	r1, [pc, #412]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048ae:	4b62      	ldr	r3, [pc, #392]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	495e      	ldr	r1, [pc, #376]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048d0:	4b59      	ldr	r3, [pc, #356]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048de:	4956      	ldr	r1, [pc, #344]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048f2:	4b51      	ldr	r3, [pc, #324]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	494d      	ldr	r1, [pc, #308]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d028      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004914:	4b48      	ldr	r3, [pc, #288]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004922:	4945      	ldr	r1, [pc, #276]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004932:	d106      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004934:	4b40      	ldr	r3, [pc, #256]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	4a3f      	ldr	r2, [pc, #252]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800493a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800493e:	60d3      	str	r3, [r2, #12]
 8004940:	e011      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004946:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800494a:	d10c      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3304      	adds	r3, #4
 8004950:	2101      	movs	r1, #1
 8004952:	4618      	mov	r0, r3
 8004954:	f000 f872 	bl	8004a3c <RCCEx_PLLSAI1_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800495c:	7cfb      	ldrb	r3, [r7, #19]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004962:	7cfb      	ldrb	r3, [r7, #19]
 8004964:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d028      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004972:	4b31      	ldr	r3, [pc, #196]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004978:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004980:	492d      	ldr	r1, [pc, #180]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004990:	d106      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004992:	4b29      	ldr	r3, [pc, #164]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	4a28      	ldr	r2, [pc, #160]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004998:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800499c:	60d3      	str	r3, [r2, #12]
 800499e:	e011      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3304      	adds	r3, #4
 80049ae:	2101      	movs	r1, #1
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 f843 	bl	8004a3c <RCCEx_PLLSAI1_Config>
 80049b6:	4603      	mov	r3, r0
 80049b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049ba:	7cfb      	ldrb	r3, [r7, #19]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80049c0:	7cfb      	ldrb	r3, [r7, #19]
 80049c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d01c      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049d0:	4b19      	ldr	r3, [pc, #100]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049de:	4916      	ldr	r1, [pc, #88]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ee:	d10c      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	2102      	movs	r1, #2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 f820 	bl	8004a3c <RCCEx_PLLSAI1_Config>
 80049fc:	4603      	mov	r3, r0
 80049fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004a06:	7cfb      	ldrb	r3, [r7, #19]
 8004a08:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a16:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a24:	4904      	ldr	r1, [pc, #16]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40021000 	.word	0x40021000

08004a3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a4a:	4b74      	ldr	r3, [pc, #464]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d018      	beq.n	8004a88 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a56:	4b71      	ldr	r3, [pc, #452]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f003 0203 	and.w	r2, r3, #3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d10d      	bne.n	8004a82 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
       ||
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a6e:	4b6b      	ldr	r3, [pc, #428]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	091b      	lsrs	r3, r3, #4
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
       ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d047      	beq.n	8004b12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
 8004a86:	e044      	b.n	8004b12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d018      	beq.n	8004ac2 <RCCEx_PLLSAI1_Config+0x86>
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d825      	bhi.n	8004ae0 <RCCEx_PLLSAI1_Config+0xa4>
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d002      	beq.n	8004a9e <RCCEx_PLLSAI1_Config+0x62>
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d009      	beq.n	8004ab0 <RCCEx_PLLSAI1_Config+0x74>
 8004a9c:	e020      	b.n	8004ae0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a9e:	4b5f      	ldr	r3, [pc, #380]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d11d      	bne.n	8004ae6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aae:	e01a      	b.n	8004ae6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ab0:	4b5a      	ldr	r3, [pc, #360]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d116      	bne.n	8004aea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac0:	e013      	b.n	8004aea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ac2:	4b56      	ldr	r3, [pc, #344]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10f      	bne.n	8004aee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ace:	4b53      	ldr	r3, [pc, #332]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ade:	e006      	b.n	8004aee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae4:	e004      	b.n	8004af0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e002      	b.n	8004af0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aea:	bf00      	nop
 8004aec:	e000      	b.n	8004af0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aee:	bf00      	nop
    }

    if(status == HAL_OK)
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10d      	bne.n	8004b12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004af6:	4b49      	ldr	r3, [pc, #292]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6819      	ldr	r1, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	430b      	orrs	r3, r1
 8004b0c:	4943      	ldr	r1, [pc, #268]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d17c      	bne.n	8004c12 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b18:	4b40      	ldr	r3, [pc, #256]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a3f      	ldr	r2, [pc, #252]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b24:	f7fc fee2 	bl	80018ec <HAL_GetTick>
 8004b28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b2a:	e009      	b.n	8004b40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b2c:	f7fc fede 	bl	80018ec <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d902      	bls.n	8004b40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b3e:	e005      	b.n	8004b4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b40:	4b36      	ldr	r3, [pc, #216]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1ef      	bne.n	8004b2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d15f      	bne.n	8004c12 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d110      	bne.n	8004b7a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b58:	4b30      	ldr	r3, [pc, #192]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004b60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6892      	ldr	r2, [r2, #8]
 8004b68:	0211      	lsls	r1, r2, #8
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68d2      	ldr	r2, [r2, #12]
 8004b6e:	06d2      	lsls	r2, r2, #27
 8004b70:	430a      	orrs	r2, r1
 8004b72:	492a      	ldr	r1, [pc, #168]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	610b      	str	r3, [r1, #16]
 8004b78:	e027      	b.n	8004bca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d112      	bne.n	8004ba6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b80:	4b26      	ldr	r3, [pc, #152]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6892      	ldr	r2, [r2, #8]
 8004b90:	0211      	lsls	r1, r2, #8
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6912      	ldr	r2, [r2, #16]
 8004b96:	0852      	lsrs	r2, r2, #1
 8004b98:	3a01      	subs	r2, #1
 8004b9a:	0552      	lsls	r2, r2, #21
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	491f      	ldr	r1, [pc, #124]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	610b      	str	r3, [r1, #16]
 8004ba4:	e011      	b.n	8004bca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ba6:	4b1d      	ldr	r3, [pc, #116]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6892      	ldr	r2, [r2, #8]
 8004bb6:	0211      	lsls	r1, r2, #8
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6952      	ldr	r2, [r2, #20]
 8004bbc:	0852      	lsrs	r2, r2, #1
 8004bbe:	3a01      	subs	r2, #1
 8004bc0:	0652      	lsls	r2, r2, #25
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	4915      	ldr	r1, [pc, #84]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bca:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bd4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd6:	f7fc fe89 	bl	80018ec <HAL_GetTick>
 8004bda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bdc:	e009      	b.n	8004bf2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bde:	f7fc fe85 	bl	80018ec <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d902      	bls.n	8004bf2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	73fb      	strb	r3, [r7, #15]
          break;
 8004bf0:	e005      	b.n	8004bfe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0ef      	beq.n	8004bde <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d106      	bne.n	8004c12 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	4903      	ldr	r1, [pc, #12]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40021000 	.word	0x40021000

08004c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e049      	b.n	8004cc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc fc60 	bl	800150c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	f000 f960 	bl	8004f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d001      	beq.n	8004ce8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e033      	b.n	8004d50 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <HAL_TIM_Base_Start+0x8c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d009      	beq.n	8004d0e <HAL_TIM_Base_Start+0x3e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d02:	d004      	beq.n	8004d0e <HAL_TIM_Base_Start+0x3e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a15      	ldr	r2, [pc, #84]	; (8004d60 <HAL_TIM_Base_Start+0x90>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d115      	bne.n	8004d3a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <HAL_TIM_Base_Start+0x94>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b06      	cmp	r3, #6
 8004d1e:	d015      	beq.n	8004d4c <HAL_TIM_Base_Start+0x7c>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d26:	d011      	beq.n	8004d4c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d38:	e008      	b.n	8004d4c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0201 	orr.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	e000      	b.n	8004d4e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	40012c00 	.word	0x40012c00
 8004d60:	40014000 	.word	0x40014000
 8004d64:	00010007 	.word	0x00010007

08004d68 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <HAL_TIM_OC_Start+0x24>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	e03c      	b.n	8004e06 <HAL_TIM_OC_Start+0x9e>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d109      	bne.n	8004da6 <HAL_TIM_OC_Start+0x3e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	bf14      	ite	ne
 8004d9e:	2301      	movne	r3, #1
 8004da0:	2300      	moveq	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	e02f      	b.n	8004e06 <HAL_TIM_OC_Start+0x9e>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d109      	bne.n	8004dc0 <HAL_TIM_OC_Start+0x58>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	bf14      	ite	ne
 8004db8:	2301      	movne	r3, #1
 8004dba:	2300      	moveq	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	e022      	b.n	8004e06 <HAL_TIM_OC_Start+0x9e>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b0c      	cmp	r3, #12
 8004dc4:	d109      	bne.n	8004dda <HAL_TIM_OC_Start+0x72>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	bf14      	ite	ne
 8004dd2:	2301      	movne	r3, #1
 8004dd4:	2300      	moveq	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	e015      	b.n	8004e06 <HAL_TIM_OC_Start+0x9e>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d109      	bne.n	8004df4 <HAL_TIM_OC_Start+0x8c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e008      	b.n	8004e06 <HAL_TIM_OC_Start+0x9e>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	bf14      	ite	ne
 8004e00:	2301      	movne	r3, #1
 8004e02:	2300      	moveq	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e07e      	b.n	8004f0c <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <HAL_TIM_OC_Start+0xb6>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e1c:	e023      	b.n	8004e66 <HAL_TIM_OC_Start+0xfe>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d104      	bne.n	8004e2e <HAL_TIM_OC_Start+0xc6>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e2c:	e01b      	b.n	8004e66 <HAL_TIM_OC_Start+0xfe>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d104      	bne.n	8004e3e <HAL_TIM_OC_Start+0xd6>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e3c:	e013      	b.n	8004e66 <HAL_TIM_OC_Start+0xfe>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b0c      	cmp	r3, #12
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_OC_Start+0xe6>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e4c:	e00b      	b.n	8004e66 <HAL_TIM_OC_Start+0xfe>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_OC_Start+0xf6>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e5c:	e003      	b.n	8004e66 <HAL_TIM_OC_Start+0xfe>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2202      	movs	r2, #2
 8004e62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	6839      	ldr	r1, [r7, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 f8bc 	bl	8004fec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a26      	ldr	r2, [pc, #152]	; (8004f14 <HAL_TIM_OC_Start+0x1ac>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d009      	beq.n	8004e92 <HAL_TIM_OC_Start+0x12a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a25      	ldr	r2, [pc, #148]	; (8004f18 <HAL_TIM_OC_Start+0x1b0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d004      	beq.n	8004e92 <HAL_TIM_OC_Start+0x12a>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a23      	ldr	r2, [pc, #140]	; (8004f1c <HAL_TIM_OC_Start+0x1b4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_OC_Start+0x12e>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <HAL_TIM_OC_Start+0x130>
 8004e96:	2300      	movs	r3, #0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d007      	beq.n	8004eac <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eaa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a18      	ldr	r2, [pc, #96]	; (8004f14 <HAL_TIM_OC_Start+0x1ac>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d009      	beq.n	8004eca <HAL_TIM_OC_Start+0x162>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebe:	d004      	beq.n	8004eca <HAL_TIM_OC_Start+0x162>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a14      	ldr	r2, [pc, #80]	; (8004f18 <HAL_TIM_OC_Start+0x1b0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d115      	bne.n	8004ef6 <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <HAL_TIM_OC_Start+0x1b8>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b06      	cmp	r3, #6
 8004eda:	d015      	beq.n	8004f08 <HAL_TIM_OC_Start+0x1a0>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee2:	d011      	beq.n	8004f08 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0201 	orr.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef4:	e008      	b.n	8004f08 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f042 0201 	orr.w	r2, r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	e000      	b.n	8004f0a <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40012c00 	.word	0x40012c00
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40014400 	.word	0x40014400
 8004f20:	00010007 	.word	0x00010007

08004f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a2a      	ldr	r2, [pc, #168]	; (8004fe0 <TIM_Base_SetConfig+0xbc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d003      	beq.n	8004f44 <TIM_Base_SetConfig+0x20>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f42:	d108      	bne.n	8004f56 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a21      	ldr	r2, [pc, #132]	; (8004fe0 <TIM_Base_SetConfig+0xbc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00b      	beq.n	8004f76 <TIM_Base_SetConfig+0x52>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f64:	d007      	beq.n	8004f76 <TIM_Base_SetConfig+0x52>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a1e      	ldr	r2, [pc, #120]	; (8004fe4 <TIM_Base_SetConfig+0xc0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_Base_SetConfig+0x52>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1d      	ldr	r2, [pc, #116]	; (8004fe8 <TIM_Base_SetConfig+0xc4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d108      	bne.n	8004f88 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a0c      	ldr	r2, [pc, #48]	; (8004fe0 <TIM_Base_SetConfig+0xbc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d007      	beq.n	8004fc4 <TIM_Base_SetConfig+0xa0>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a0b      	ldr	r2, [pc, #44]	; (8004fe4 <TIM_Base_SetConfig+0xc0>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_Base_SetConfig+0xa0>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a0a      	ldr	r2, [pc, #40]	; (8004fe8 <TIM_Base_SetConfig+0xc4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d103      	bne.n	8004fcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	615a      	str	r2, [r3, #20]
}
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40014400 	.word	0x40014400

08004fec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	2201      	movs	r2, #1
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1a      	ldr	r2, [r3, #32]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	43db      	mvns	r3, r3
 800500e:	401a      	ands	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1a      	ldr	r2, [r3, #32]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 031f 	and.w	r3, r3, #31
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	fa01 f303 	lsl.w	r3, r1, r3
 8005024:	431a      	orrs	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	621a      	str	r2, [r3, #32]
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800504c:	2302      	movs	r3, #2
 800504e:	e04f      	b.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a21      	ldr	r2, [pc, #132]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d108      	bne.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005080:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a14      	ldr	r2, [pc, #80]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d009      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b8:	d004      	beq.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a10      	ldr	r2, [pc, #64]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10c      	bne.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40014000 	.word	0x40014000

08005104 <arm_rfft_fast_init_f32>:
 8005104:	084b      	lsrs	r3, r1, #1
 8005106:	2b80      	cmp	r3, #128	; 0x80
 8005108:	b410      	push	{r4}
 800510a:	8201      	strh	r1, [r0, #16]
 800510c:	8003      	strh	r3, [r0, #0]
 800510e:	d047      	beq.n	80051a0 <arm_rfft_fast_init_f32+0x9c>
 8005110:	d917      	bls.n	8005142 <arm_rfft_fast_init_f32+0x3e>
 8005112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005116:	d03d      	beq.n	8005194 <arm_rfft_fast_init_f32+0x90>
 8005118:	d929      	bls.n	800516e <arm_rfft_fast_init_f32+0x6a>
 800511a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511e:	d020      	beq.n	8005162 <arm_rfft_fast_init_f32+0x5e>
 8005120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005124:	d113      	bne.n	800514e <arm_rfft_fast_init_f32+0x4a>
 8005126:	4921      	ldr	r1, [pc, #132]	; (80051ac <arm_rfft_fast_init_f32+0xa8>)
 8005128:	4a21      	ldr	r2, [pc, #132]	; (80051b0 <arm_rfft_fast_init_f32+0xac>)
 800512a:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <arm_rfft_fast_init_f32+0xb0>)
 800512c:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8005130:	8184      	strh	r4, [r0, #12]
 8005132:	6081      	str	r1, [r0, #8]
 8005134:	6042      	str	r2, [r0, #4]
 8005136:	6143      	str	r3, [r0, #20]
 8005138:	2000      	movs	r0, #0
 800513a:	b240      	sxtb	r0, r0
 800513c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	2b20      	cmp	r3, #32
 8005144:	d01c      	beq.n	8005180 <arm_rfft_fast_init_f32+0x7c>
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d006      	beq.n	8005158 <arm_rfft_fast_init_f32+0x54>
 800514a:	2b10      	cmp	r3, #16
 800514c:	d01d      	beq.n	800518a <arm_rfft_fast_init_f32+0x86>
 800514e:	20ff      	movs	r0, #255	; 0xff
 8005150:	b240      	sxtb	r0, r0
 8005152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	2438      	movs	r4, #56	; 0x38
 800515a:	4917      	ldr	r1, [pc, #92]	; (80051b8 <arm_rfft_fast_init_f32+0xb4>)
 800515c:	4a17      	ldr	r2, [pc, #92]	; (80051bc <arm_rfft_fast_init_f32+0xb8>)
 800515e:	4b18      	ldr	r3, [pc, #96]	; (80051c0 <arm_rfft_fast_init_f32+0xbc>)
 8005160:	e7e6      	b.n	8005130 <arm_rfft_fast_init_f32+0x2c>
 8005162:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8005166:	4917      	ldr	r1, [pc, #92]	; (80051c4 <arm_rfft_fast_init_f32+0xc0>)
 8005168:	4a17      	ldr	r2, [pc, #92]	; (80051c8 <arm_rfft_fast_init_f32+0xc4>)
 800516a:	4b18      	ldr	r3, [pc, #96]	; (80051cc <arm_rfft_fast_init_f32+0xc8>)
 800516c:	e7e0      	b.n	8005130 <arm_rfft_fast_init_f32+0x2c>
 800516e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005172:	d1ec      	bne.n	800514e <arm_rfft_fast_init_f32+0x4a>
 8005174:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8005178:	4915      	ldr	r1, [pc, #84]	; (80051d0 <arm_rfft_fast_init_f32+0xcc>)
 800517a:	4a16      	ldr	r2, [pc, #88]	; (80051d4 <arm_rfft_fast_init_f32+0xd0>)
 800517c:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <arm_rfft_fast_init_f32+0xd4>)
 800517e:	e7d7      	b.n	8005130 <arm_rfft_fast_init_f32+0x2c>
 8005180:	2430      	movs	r4, #48	; 0x30
 8005182:	4916      	ldr	r1, [pc, #88]	; (80051dc <arm_rfft_fast_init_f32+0xd8>)
 8005184:	4a16      	ldr	r2, [pc, #88]	; (80051e0 <arm_rfft_fast_init_f32+0xdc>)
 8005186:	4b17      	ldr	r3, [pc, #92]	; (80051e4 <arm_rfft_fast_init_f32+0xe0>)
 8005188:	e7d2      	b.n	8005130 <arm_rfft_fast_init_f32+0x2c>
 800518a:	2414      	movs	r4, #20
 800518c:	4916      	ldr	r1, [pc, #88]	; (80051e8 <arm_rfft_fast_init_f32+0xe4>)
 800518e:	4a17      	ldr	r2, [pc, #92]	; (80051ec <arm_rfft_fast_init_f32+0xe8>)
 8005190:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <arm_rfft_fast_init_f32+0xec>)
 8005192:	e7cd      	b.n	8005130 <arm_rfft_fast_init_f32+0x2c>
 8005194:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8005198:	4916      	ldr	r1, [pc, #88]	; (80051f4 <arm_rfft_fast_init_f32+0xf0>)
 800519a:	4a17      	ldr	r2, [pc, #92]	; (80051f8 <arm_rfft_fast_init_f32+0xf4>)
 800519c:	4b17      	ldr	r3, [pc, #92]	; (80051fc <arm_rfft_fast_init_f32+0xf8>)
 800519e:	e7c7      	b.n	8005130 <arm_rfft_fast_init_f32+0x2c>
 80051a0:	24d0      	movs	r4, #208	; 0xd0
 80051a2:	4917      	ldr	r1, [pc, #92]	; (8005200 <arm_rfft_fast_init_f32+0xfc>)
 80051a4:	4a17      	ldr	r2, [pc, #92]	; (8005204 <arm_rfft_fast_init_f32+0x100>)
 80051a6:	4b18      	ldr	r3, [pc, #96]	; (8005208 <arm_rfft_fast_init_f32+0x104>)
 80051a8:	e7c2      	b.n	8005130 <arm_rfft_fast_init_f32+0x2c>
 80051aa:	bf00      	nop
 80051ac:	08017b88 	.word	0x08017b88
 80051b0:	08008d80 	.word	0x08008d80
 80051b4:	0800eef0 	.word	0x0800eef0
 80051b8:	0800ce80 	.word	0x0800ce80
 80051bc:	08019948 	.word	0x08019948
 80051c0:	0801be38 	.word	0x0801be38
 80051c4:	08015870 	.word	0x08015870
 80051c8:	08013770 	.word	0x08013770
 80051cc:	0800cef0 	.word	0x0800cef0
 80051d0:	0801bac8 	.word	0x0801bac8
 80051d4:	08012ef0 	.word	0x08012ef0
 80051d8:	08019b48 	.word	0x08019b48
 80051dc:	08016728 	.word	0x08016728
 80051e0:	08015770 	.word	0x08015770
 80051e4:	0800cd80 	.word	0x0800cd80
 80051e8:	08016680 	.word	0x08016680
 80051ec:	080136f0 	.word	0x080136f0
 80051f0:	080166a8 	.word	0x080166a8
 80051f4:	0801a348 	.word	0x0801a348
 80051f8:	08016b88 	.word	0x08016b88
 80051fc:	0801a6c8 	.word	0x0801a6c8
 8005200:	0801c038 	.word	0x0801c038
 8005204:	08016788 	.word	0x08016788
 8005208:	0801b6c8 	.word	0x0801b6c8

0800520c <arm_rfft_fast_f32>:
 800520c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005210:	8a06      	ldrh	r6, [r0, #16]
 8005212:	0876      	lsrs	r6, r6, #1
 8005214:	4607      	mov	r7, r0
 8005216:	4615      	mov	r5, r2
 8005218:	8006      	strh	r6, [r0, #0]
 800521a:	460c      	mov	r4, r1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d15c      	bne.n	80052da <arm_rfft_fast_f32+0xce>
 8005220:	461a      	mov	r2, r3
 8005222:	2301      	movs	r3, #1
 8005224:	f000 fbe6 	bl	80059f4 <arm_cfft_f32>
 8005228:	edd4 7a00 	vldr	s15, [r4]
 800522c:	ed94 7a01 	vldr	s14, [r4, #4]
 8005230:	883e      	ldrh	r6, [r7, #0]
 8005232:	6978      	ldr	r0, [r7, #20]
 8005234:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005238:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800523c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8005240:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005244:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005248:	3e01      	subs	r6, #1
 800524a:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800524e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005252:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8005256:	ed85 7a00 	vstr	s14, [r5]
 800525a:	edc5 7a01 	vstr	s15, [r5, #4]
 800525e:	3010      	adds	r0, #16
 8005260:	f105 0210 	add.w	r2, r5, #16
 8005264:	3b08      	subs	r3, #8
 8005266:	f104 0110 	add.w	r1, r4, #16
 800526a:	ed51 4a02 	vldr	s9, [r1, #-8]
 800526e:	ed93 5a02 	vldr	s10, [r3, #8]
 8005272:	ed11 7a01 	vldr	s14, [r1, #-4]
 8005276:	ed10 6a02 	vldr	s12, [r0, #-8]
 800527a:	edd3 5a03 	vldr	s11, [r3, #12]
 800527e:	ed50 6a01 	vldr	s13, [r0, #-4]
 8005282:	ee75 7a64 	vsub.f32	s15, s10, s9
 8005286:	ee35 4a87 	vadd.f32	s8, s11, s14
 800528a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800528e:	ee77 5a65 	vsub.f32	s11, s14, s11
 8005292:	ee66 4a27 	vmul.f32	s9, s12, s15
 8005296:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800529a:	ee34 5a85 	vadd.f32	s10, s9, s10
 800529e:	ee26 6a04 	vmul.f32	s12, s12, s8
 80052a2:	ee66 6a84 	vmul.f32	s13, s13, s8
 80052a6:	ee77 7a25 	vadd.f32	s15, s14, s11
 80052aa:	ee76 6a85 	vadd.f32	s13, s13, s10
 80052ae:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80052b2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80052b6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80052ba:	3e01      	subs	r6, #1
 80052bc:	ed42 6a02 	vstr	s13, [r2, #-8]
 80052c0:	ed42 7a01 	vstr	s15, [r2, #-4]
 80052c4:	f1a3 0308 	sub.w	r3, r3, #8
 80052c8:	f101 0108 	add.w	r1, r1, #8
 80052cc:	f100 0008 	add.w	r0, r0, #8
 80052d0:	f102 0208 	add.w	r2, r2, #8
 80052d4:	d1c9      	bne.n	800526a <arm_rfft_fast_f32+0x5e>
 80052d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052da:	edd1 7a00 	vldr	s15, [r1]
 80052de:	edd1 6a01 	vldr	s13, [r1, #4]
 80052e2:	6941      	ldr	r1, [r0, #20]
 80052e4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80052e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80052ec:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80052f0:	ee27 7a23 	vmul.f32	s14, s14, s7
 80052f4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80052f8:	3e01      	subs	r6, #1
 80052fa:	ed82 7a00 	vstr	s14, [r2]
 80052fe:	edc2 7a01 	vstr	s15, [r2, #4]
 8005302:	00f0      	lsls	r0, r6, #3
 8005304:	b3ee      	cbz	r6, 8005382 <arm_rfft_fast_f32+0x176>
 8005306:	3808      	subs	r0, #8
 8005308:	f101 0e10 	add.w	lr, r1, #16
 800530c:	4420      	add	r0, r4
 800530e:	f104 0110 	add.w	r1, r4, #16
 8005312:	f102 0c10 	add.w	ip, r2, #16
 8005316:	ed90 7a02 	vldr	s14, [r0, #8]
 800531a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800531e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8005322:	ed90 4a03 	vldr	s8, [r0, #12]
 8005326:	ed11 5a01 	vldr	s10, [r1, #-4]
 800532a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800532e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8005332:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005336:	ee26 3a27 	vmul.f32	s6, s12, s15
 800533a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800533e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005342:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8005346:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800534a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800534e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005352:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8005356:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800535a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800535e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005362:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005366:	3e01      	subs	r6, #1
 8005368:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800536c:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8005370:	f1a0 0008 	sub.w	r0, r0, #8
 8005374:	f101 0108 	add.w	r1, r1, #8
 8005378:	f10e 0e08 	add.w	lr, lr, #8
 800537c:	f10c 0c08 	add.w	ip, ip, #8
 8005380:	d1c9      	bne.n	8005316 <arm_rfft_fast_f32+0x10a>
 8005382:	4638      	mov	r0, r7
 8005384:	4629      	mov	r1, r5
 8005386:	461a      	mov	r2, r3
 8005388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800538c:	2301      	movs	r3, #1
 800538e:	f000 bb31 	b.w	80059f4 <arm_cfft_f32>
 8005392:	bf00      	nop

08005394 <arm_cfft_radix8by2_f32>:
 8005394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005398:	ed2d 8b08 	vpush	{d8-d11}
 800539c:	f8b0 e000 	ldrh.w	lr, [r0]
 80053a0:	6842      	ldr	r2, [r0, #4]
 80053a2:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80053a6:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80053aa:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80053ae:	4607      	mov	r7, r0
 80053b0:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80053b4:	f000 80af 	beq.w	8005516 <arm_cfft_radix8by2_f32+0x182>
 80053b8:	3310      	adds	r3, #16
 80053ba:	18ce      	adds	r6, r1, r3
 80053bc:	3210      	adds	r2, #16
 80053be:	4443      	add	r3, r8
 80053c0:	f101 0510 	add.w	r5, r1, #16
 80053c4:	f108 0410 	add.w	r4, r8, #16
 80053c8:	ed54 1a04 	vldr	s3, [r4, #-16]
 80053cc:	ed13 4a04 	vldr	s8, [r3, #-16]
 80053d0:	ed53 3a03 	vldr	s7, [r3, #-12]
 80053d4:	ed53 5a02 	vldr	s11, [r3, #-8]
 80053d8:	ed13 5a01 	vldr	s10, [r3, #-4]
 80053dc:	ed54 6a03 	vldr	s13, [r4, #-12]
 80053e0:	ed14 0a02 	vldr	s0, [r4, #-8]
 80053e4:	ed16 2a04 	vldr	s4, [r6, #-16]
 80053e8:	ed56 2a03 	vldr	s5, [r6, #-12]
 80053ec:	ed15 6a03 	vldr	s12, [r5, #-12]
 80053f0:	ed15 7a01 	vldr	s14, [r5, #-4]
 80053f4:	ed15 3a04 	vldr	s6, [r5, #-16]
 80053f8:	ed54 7a01 	vldr	s15, [r4, #-4]
 80053fc:	ed56 0a02 	vldr	s1, [r6, #-8]
 8005400:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005404:	ed55 4a02 	vldr	s9, [r5, #-8]
 8005408:	ee73 ba21 	vadd.f32	s23, s6, s3
 800540c:	ee36 ba26 	vadd.f32	s22, s12, s13
 8005410:	ee37 aa27 	vadd.f32	s20, s14, s15
 8005414:	ee72 9a04 	vadd.f32	s19, s4, s8
 8005418:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800541c:	ee31 8a05 	vadd.f32	s16, s2, s10
 8005420:	ee74 aa80 	vadd.f32	s21, s9, s0
 8005424:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8005428:	ed45 ba04 	vstr	s23, [r5, #-16]
 800542c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8005430:	ed45 aa02 	vstr	s21, [r5, #-8]
 8005434:	ed05 aa01 	vstr	s20, [r5, #-4]
 8005438:	ed06 8a01 	vstr	s16, [r6, #-4]
 800543c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005440:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005444:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005448:	ee76 6a66 	vsub.f32	s13, s12, s13
 800544c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005450:	ed12 6a03 	vldr	s12, [r2, #-12]
 8005454:	ed52 2a04 	vldr	s5, [r2, #-16]
 8005458:	ee33 3a61 	vsub.f32	s6, s6, s3
 800545c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005460:	ee26 8a86 	vmul.f32	s16, s13, s12
 8005464:	ee24 2a06 	vmul.f32	s4, s8, s12
 8005468:	ee63 1a22 	vmul.f32	s3, s6, s5
 800546c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005470:	ee23 3a06 	vmul.f32	s6, s6, s12
 8005474:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8005478:	ee23 6a86 	vmul.f32	s12, s7, s12
 800547c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005480:	ee36 6a04 	vadd.f32	s12, s12, s8
 8005484:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005488:	ee72 3a63 	vsub.f32	s7, s4, s7
 800548c:	ee71 2a88 	vadd.f32	s5, s3, s16
 8005490:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005494:	ed44 2a04 	vstr	s5, [r4, #-16]
 8005498:	ed43 3a04 	vstr	s7, [r3, #-16]
 800549c:	ed03 6a03 	vstr	s12, [r3, #-12]
 80054a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054a4:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80054a8:	ed12 7a01 	vldr	s14, [r2, #-4]
 80054ac:	ed52 5a02 	vldr	s11, [r2, #-8]
 80054b0:	ee35 6a41 	vsub.f32	s12, s10, s2
 80054b4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80054b8:	ee67 3a87 	vmul.f32	s7, s15, s14
 80054bc:	ee26 5a87 	vmul.f32	s10, s13, s14
 80054c0:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80054c4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80054c8:	ee64 4a87 	vmul.f32	s9, s9, s14
 80054cc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80054d0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80054d4:	ee26 6a25 	vmul.f32	s12, s12, s11
 80054d8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80054dc:	ee74 5a23 	vadd.f32	s11, s8, s7
 80054e0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80054e4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80054e8:	f1be 0e01 	subs.w	lr, lr, #1
 80054ec:	ed44 5a02 	vstr	s11, [r4, #-8]
 80054f0:	f105 0510 	add.w	r5, r5, #16
 80054f4:	ed44 7a01 	vstr	s15, [r4, #-4]
 80054f8:	f106 0610 	add.w	r6, r6, #16
 80054fc:	ed03 6a02 	vstr	s12, [r3, #-8]
 8005500:	ed03 7a01 	vstr	s14, [r3, #-4]
 8005504:	f102 0210 	add.w	r2, r2, #16
 8005508:	f104 0410 	add.w	r4, r4, #16
 800550c:	f103 0310 	add.w	r3, r3, #16
 8005510:	f47f af5a 	bne.w	80053c8 <arm_cfft_radix8by2_f32+0x34>
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	fa1f f48c 	uxth.w	r4, ip
 800551a:	4608      	mov	r0, r1
 800551c:	2302      	movs	r3, #2
 800551e:	4621      	mov	r1, r4
 8005520:	f000 fbd0 	bl	8005cc4 <arm_radix8_butterfly_f32>
 8005524:	ecbd 8b08 	vpop	{d8-d11}
 8005528:	4640      	mov	r0, r8
 800552a:	4621      	mov	r1, r4
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	2302      	movs	r3, #2
 8005530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005534:	f000 bbc6 	b.w	8005cc4 <arm_radix8_butterfly_f32>

08005538 <arm_cfft_radix8by4_f32>:
 8005538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553c:	ed2d 8b0a 	vpush	{d8-d12}
 8005540:	8802      	ldrh	r2, [r0, #0]
 8005542:	ed91 6a00 	vldr	s12, [r1]
 8005546:	b08f      	sub	sp, #60	; 0x3c
 8005548:	460f      	mov	r7, r1
 800554a:	0852      	lsrs	r2, r2, #1
 800554c:	0093      	lsls	r3, r2, #2
 800554e:	900c      	str	r0, [sp, #48]	; 0x30
 8005550:	9103      	str	r1, [sp, #12]
 8005552:	6841      	ldr	r1, [r0, #4]
 8005554:	ed97 7a01 	vldr	s14, [r7, #4]
 8005558:	4638      	mov	r0, r7
 800555a:	4418      	add	r0, r3
 800555c:	4606      	mov	r6, r0
 800555e:	9009      	str	r0, [sp, #36]	; 0x24
 8005560:	4418      	add	r0, r3
 8005562:	edd0 6a00 	vldr	s13, [r0]
 8005566:	edd6 3a00 	vldr	s7, [r6]
 800556a:	edd6 2a01 	vldr	s5, [r6, #4]
 800556e:	edd0 7a01 	vldr	s15, [r0, #4]
 8005572:	900a      	str	r0, [sp, #40]	; 0x28
 8005574:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005578:	4604      	mov	r4, r0
 800557a:	4625      	mov	r5, r4
 800557c:	441c      	add	r4, r3
 800557e:	ed94 4a00 	vldr	s8, [r4]
 8005582:	ed94 5a01 	vldr	s10, [r4, #4]
 8005586:	9401      	str	r4, [sp, #4]
 8005588:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800558c:	4630      	mov	r0, r6
 800558e:	ee74 4a24 	vadd.f32	s9, s8, s9
 8005592:	463e      	mov	r6, r7
 8005594:	ee14 ea90 	vmov	lr, s9
 8005598:	ee76 6a66 	vsub.f32	s13, s12, s13
 800559c:	f846 eb08 	str.w	lr, [r6], #8
 80055a0:	ee37 6a27 	vadd.f32	s12, s14, s15
 80055a4:	edd0 4a01 	vldr	s9, [r0, #4]
 80055a8:	9604      	str	r6, [sp, #16]
 80055aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055ae:	9e01      	ldr	r6, [sp, #4]
 80055b0:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80055b4:	ed96 2a01 	vldr	s4, [r6, #4]
 80055b8:	ee36 7a24 	vadd.f32	s14, s12, s9
 80055bc:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80055c0:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80055c4:	ee36 6a62 	vsub.f32	s12, s12, s5
 80055c8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80055cc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80055d0:	ee73 3a45 	vsub.f32	s7, s6, s10
 80055d4:	4604      	mov	r4, r0
 80055d6:	ee36 6a45 	vsub.f32	s12, s12, s10
 80055da:	ee75 6a26 	vadd.f32	s13, s10, s13
 80055de:	46a3      	mov	fp, r4
 80055e0:	ee37 7a02 	vadd.f32	s14, s14, s4
 80055e4:	ee34 5a84 	vadd.f32	s10, s9, s8
 80055e8:	ee13 8a90 	vmov	r8, s7
 80055ec:	46a4      	mov	ip, r4
 80055ee:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80055f2:	ed87 7a01 	vstr	s14, [r7, #4]
 80055f6:	f84b 8b08 	str.w	r8, [fp], #8
 80055fa:	f1ac 0704 	sub.w	r7, ip, #4
 80055fe:	ed8c 5a01 	vstr	s10, [ip, #4]
 8005602:	f101 0c08 	add.w	ip, r1, #8
 8005606:	462c      	mov	r4, r5
 8005608:	f8cd c014 	str.w	ip, [sp, #20]
 800560c:	ee15 ca90 	vmov	ip, s11
 8005610:	f844 cb08 	str.w	ip, [r4], #8
 8005614:	9407      	str	r4, [sp, #28]
 8005616:	f101 0410 	add.w	r4, r1, #16
 800561a:	ed85 6a01 	vstr	s12, [r5, #4]
 800561e:	0852      	lsrs	r2, r2, #1
 8005620:	9402      	str	r4, [sp, #8]
 8005622:	462c      	mov	r4, r5
 8005624:	f101 0518 	add.w	r5, r1, #24
 8005628:	920b      	str	r2, [sp, #44]	; 0x2c
 800562a:	46b2      	mov	sl, r6
 800562c:	9506      	str	r5, [sp, #24]
 800562e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8005632:	3a02      	subs	r2, #2
 8005634:	ee16 5a90 	vmov	r5, s13
 8005638:	46b6      	mov	lr, r6
 800563a:	4630      	mov	r0, r6
 800563c:	0852      	lsrs	r2, r2, #1
 800563e:	f84a 5b08 	str.w	r5, [sl], #8
 8005642:	f1a0 0604 	sub.w	r6, r0, #4
 8005646:	edce 7a01 	vstr	s15, [lr, #4]
 800564a:	9208      	str	r2, [sp, #32]
 800564c:	f000 8130 	beq.w	80058b0 <arm_cfft_radix8by4_f32+0x378>
 8005650:	4691      	mov	r9, r2
 8005652:	9a03      	ldr	r2, [sp, #12]
 8005654:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005658:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800565c:	3b08      	subs	r3, #8
 800565e:	f102 0510 	add.w	r5, r2, #16
 8005662:	f101 0c20 	add.w	ip, r1, #32
 8005666:	f1a4 020c 	sub.w	r2, r4, #12
 800566a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800566e:	4433      	add	r3, r6
 8005670:	3410      	adds	r4, #16
 8005672:	4650      	mov	r0, sl
 8005674:	4659      	mov	r1, fp
 8005676:	ed55 3a02 	vldr	s7, [r5, #-8]
 800567a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800567e:	ed91 7a00 	vldr	s14, [r1]
 8005682:	edd0 7a00 	vldr	s15, [r0]
 8005686:	ed15 4a01 	vldr	s8, [r5, #-4]
 800568a:	ed54 5a01 	vldr	s11, [r4, #-4]
 800568e:	edd0 6a01 	vldr	s13, [r0, #4]
 8005692:	ed91 6a01 	vldr	s12, [r1, #4]
 8005696:	ee33 8a85 	vadd.f32	s16, s7, s10
 800569a:	ee34 0a25 	vadd.f32	s0, s8, s11
 800569e:	ee78 4a07 	vadd.f32	s9, s16, s14
 80056a2:	ee74 5a65 	vsub.f32	s11, s8, s11
 80056a6:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80056aa:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80056ae:	ed45 4a02 	vstr	s9, [r5, #-8]
 80056b2:	edd1 4a01 	vldr	s9, [r1, #4]
 80056b6:	ed90 4a01 	vldr	s8, [r0, #4]
 80056ba:	ee70 4a24 	vadd.f32	s9, s0, s9
 80056be:	ee76 aa05 	vadd.f32	s21, s12, s10
 80056c2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80056c6:	ee35 aac7 	vsub.f32	s20, s11, s14
 80056ca:	ed45 4a01 	vstr	s9, [r5, #-4]
 80056ce:	edd6 1a00 	vldr	s3, [r6]
 80056d2:	edd7 0a00 	vldr	s1, [r7]
 80056d6:	ed92 4a02 	vldr	s8, [r2, #8]
 80056da:	edd3 3a02 	vldr	s7, [r3, #8]
 80056de:	ed93 2a01 	vldr	s4, [r3, #4]
 80056e2:	ed16 1a01 	vldr	s2, [r6, #-4]
 80056e6:	edd2 2a01 	vldr	s5, [r2, #4]
 80056ea:	ed57 9a01 	vldr	s19, [r7, #-4]
 80056ee:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80056f2:	ee39 3a81 	vadd.f32	s6, s19, s2
 80056f6:	ee74 8a84 	vadd.f32	s17, s9, s8
 80056fa:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80056fe:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8005702:	ee7a aae6 	vsub.f32	s21, s21, s13
 8005706:	ee18 aa90 	vmov	sl, s17
 800570a:	f847 a908 	str.w	sl, [r7], #-8
 800570e:	edd2 8a01 	vldr	s17, [r2, #4]
 8005712:	ed93 9a01 	vldr	s18, [r3, #4]
 8005716:	ee73 8a28 	vadd.f32	s17, s6, s17
 800571a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800571e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005722:	ee74 0a63 	vsub.f32	s1, s8, s7
 8005726:	edc7 8a01 	vstr	s17, [r7, #4]
 800572a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800572e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8005732:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8005736:	ee6a ba28 	vmul.f32	s23, s20, s17
 800573a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800573e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8005742:	ee30 9a81 	vadd.f32	s18, s1, s2
 8005746:	ee79 9a82 	vadd.f32	s19, s19, s4
 800574a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800574e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8005752:	ee69 baa8 	vmul.f32	s23, s19, s17
 8005756:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800575a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800575e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8005762:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8005766:	ee1c aa10 	vmov	sl, s24
 800576a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800576e:	f841 ab08 	str.w	sl, [r1], #8
 8005772:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8005776:	ee3b bacb 	vsub.f32	s22, s23, s22
 800577a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800577e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005782:	ed01 aa01 	vstr	s20, [r1, #-4]
 8005786:	edc2 8a01 	vstr	s17, [r2, #4]
 800578a:	ed82 ba02 	vstr	s22, [r2, #8]
 800578e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8005792:	ee74 3a63 	vsub.f32	s7, s8, s7
 8005796:	ee38 8a47 	vsub.f32	s16, s16, s14
 800579a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800579e:	ee30 0a46 	vsub.f32	s0, s0, s12
 80057a2:	ee33 3a42 	vsub.f32	s6, s6, s4
 80057a6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80057aa:	ee30 0a66 	vsub.f32	s0, s0, s13
 80057ae:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80057b2:	ee63 8a04 	vmul.f32	s17, s6, s8
 80057b6:	ee28 aa24 	vmul.f32	s20, s16, s9
 80057ba:	ee60 9a04 	vmul.f32	s19, s0, s8
 80057be:	ee28 8a04 	vmul.f32	s16, s16, s8
 80057c2:	ee20 0a24 	vmul.f32	s0, s0, s9
 80057c6:	ee63 3a84 	vmul.f32	s7, s7, s8
 80057ca:	ee39 4a68 	vsub.f32	s8, s18, s17
 80057ce:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80057d2:	ee14 aa10 	vmov	sl, s8
 80057d6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80057da:	ee63 4a24 	vmul.f32	s9, s6, s9
 80057de:	ed44 9a02 	vstr	s19, [r4, #-8]
 80057e2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80057e6:	ed04 0a01 	vstr	s0, [r4, #-4]
 80057ea:	f846 a908 	str.w	sl, [r6], #-8
 80057ee:	ee35 6a46 	vsub.f32	s12, s10, s12
 80057f2:	ee35 7a87 	vadd.f32	s14, s11, s14
 80057f6:	edc6 3a01 	vstr	s7, [r6, #4]
 80057fa:	ee76 6a86 	vadd.f32	s13, s13, s12
 80057fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005802:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8005806:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800580a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800580e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005812:	ee72 2a62 	vsub.f32	s5, s4, s5
 8005816:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800581a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800581e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005822:	ee62 0a86 	vmul.f32	s1, s5, s12
 8005826:	ee66 6a86 	vmul.f32	s13, s13, s12
 800582a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800582e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8005832:	ee62 2a87 	vmul.f32	s5, s5, s14
 8005836:	ee21 1a07 	vmul.f32	s2, s2, s14
 800583a:	ee15 aa90 	vmov	sl, s11
 800583e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005842:	f840 ab08 	str.w	sl, [r0], #8
 8005846:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800584a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800584e:	f1b9 0901 	subs.w	r9, r9, #1
 8005852:	ed40 7a01 	vstr	s15, [r0, #-4]
 8005856:	f105 0508 	add.w	r5, r5, #8
 800585a:	ed83 1a02 	vstr	s2, [r3, #8]
 800585e:	edc3 2a01 	vstr	s5, [r3, #4]
 8005862:	f108 0808 	add.w	r8, r8, #8
 8005866:	f1a2 0208 	sub.w	r2, r2, #8
 800586a:	f10c 0c10 	add.w	ip, ip, #16
 800586e:	f104 0408 	add.w	r4, r4, #8
 8005872:	f10e 0e18 	add.w	lr, lr, #24
 8005876:	f1a3 0308 	sub.w	r3, r3, #8
 800587a:	f47f aefc 	bne.w	8005676 <arm_cfft_radix8by4_f32+0x13e>
 800587e:	9908      	ldr	r1, [sp, #32]
 8005880:	9802      	ldr	r0, [sp, #8]
 8005882:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8005886:	00cb      	lsls	r3, r1, #3
 8005888:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800588c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005890:	9102      	str	r1, [sp, #8]
 8005892:	9904      	ldr	r1, [sp, #16]
 8005894:	4419      	add	r1, r3
 8005896:	9104      	str	r1, [sp, #16]
 8005898:	9905      	ldr	r1, [sp, #20]
 800589a:	4419      	add	r1, r3
 800589c:	9105      	str	r1, [sp, #20]
 800589e:	9907      	ldr	r1, [sp, #28]
 80058a0:	449b      	add	fp, r3
 80058a2:	4419      	add	r1, r3
 80058a4:	449a      	add	sl, r3
 80058a6:	9b06      	ldr	r3, [sp, #24]
 80058a8:	9107      	str	r1, [sp, #28]
 80058aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058ae:	9306      	str	r3, [sp, #24]
 80058b0:	9a04      	ldr	r2, [sp, #16]
 80058b2:	9807      	ldr	r0, [sp, #28]
 80058b4:	edd2 3a00 	vldr	s7, [r2]
 80058b8:	ed90 4a00 	vldr	s8, [r0]
 80058bc:	eddb 7a00 	vldr	s15, [fp]
 80058c0:	ed9a 3a00 	vldr	s6, [sl]
 80058c4:	edd2 4a01 	vldr	s9, [r2, #4]
 80058c8:	ed90 7a01 	vldr	s14, [r0, #4]
 80058cc:	ed9b 2a01 	vldr	s4, [fp, #4]
 80058d0:	edda 5a01 	vldr	s11, [sl, #4]
 80058d4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80058d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80058da:	ee73 6a84 	vadd.f32	s13, s7, s8
 80058de:	ee34 6a87 	vadd.f32	s12, s9, s14
 80058e2:	ee36 5aa7 	vadd.f32	s10, s13, s15
 80058e6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80058ea:	ee33 5a05 	vadd.f32	s10, s6, s10
 80058ee:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80058f2:	ed82 5a00 	vstr	s10, [r2]
 80058f6:	ed9b 5a01 	vldr	s10, [fp, #4]
 80058fa:	edda 4a01 	vldr	s9, [sl, #4]
 80058fe:	ee36 5a05 	vadd.f32	s10, s12, s10
 8005902:	ee72 3a04 	vadd.f32	s7, s4, s8
 8005906:	ee35 5a24 	vadd.f32	s10, s10, s9
 800590a:	ee77 4a67 	vsub.f32	s9, s14, s15
 800590e:	ed82 5a01 	vstr	s10, [r2, #4]
 8005912:	9a05      	ldr	r2, [sp, #20]
 8005914:	ee34 5a83 	vadd.f32	s10, s9, s6
 8005918:	edd2 1a00 	vldr	s3, [r2]
 800591c:	edd2 2a01 	vldr	s5, [r2, #4]
 8005920:	9a02      	ldr	r2, [sp, #8]
 8005922:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8005926:	ee36 6a42 	vsub.f32	s12, s12, s4
 800592a:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800592e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005932:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005936:	ee25 5a21 	vmul.f32	s10, s10, s3
 800593a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800593e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005942:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005946:	edcb 2a00 	vstr	s5, [fp]
 800594a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800594e:	edd2 3a01 	vldr	s7, [r2, #4]
 8005952:	ed92 5a00 	vldr	s10, [r2]
 8005956:	9a06      	ldr	r2, [sp, #24]
 8005958:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800595c:	ee36 6a65 	vsub.f32	s12, s12, s11
 8005960:	ee66 4a85 	vmul.f32	s9, s13, s10
 8005964:	ee26 5a05 	vmul.f32	s10, s12, s10
 8005968:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800596c:	ee26 6a23 	vmul.f32	s12, s12, s7
 8005970:	ee75 6a66 	vsub.f32	s13, s10, s13
 8005974:	ee34 6a86 	vadd.f32	s12, s9, s12
 8005978:	ee34 4a42 	vsub.f32	s8, s8, s4
 800597c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005980:	edc0 6a01 	vstr	s13, [r0, #4]
 8005984:	ed80 6a00 	vstr	s12, [r0]
 8005988:	ed92 6a01 	vldr	s12, [r2, #4]
 800598c:	9803      	ldr	r0, [sp, #12]
 800598e:	ee77 7a43 	vsub.f32	s15, s14, s6
 8005992:	ee75 5a84 	vadd.f32	s11, s11, s8
 8005996:	ed92 7a00 	vldr	s14, [r2]
 800599a:	ee65 6a87 	vmul.f32	s13, s11, s14
 800599e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059a2:	ee65 5a86 	vmul.f32	s11, s11, s12
 80059a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80059aa:	ee77 5a65 	vsub.f32	s11, s14, s11
 80059ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b2:	edca 5a01 	vstr	s11, [sl, #4]
 80059b6:	edca 7a00 	vstr	s15, [sl]
 80059ba:	6872      	ldr	r2, [r6, #4]
 80059bc:	4621      	mov	r1, r4
 80059be:	2304      	movs	r3, #4
 80059c0:	f000 f980 	bl	8005cc4 <arm_radix8_butterfly_f32>
 80059c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059c6:	6872      	ldr	r2, [r6, #4]
 80059c8:	4621      	mov	r1, r4
 80059ca:	2304      	movs	r3, #4
 80059cc:	f000 f97a 	bl	8005cc4 <arm_radix8_butterfly_f32>
 80059d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80059d2:	6872      	ldr	r2, [r6, #4]
 80059d4:	4621      	mov	r1, r4
 80059d6:	2304      	movs	r3, #4
 80059d8:	f000 f974 	bl	8005cc4 <arm_radix8_butterfly_f32>
 80059dc:	9801      	ldr	r0, [sp, #4]
 80059de:	6872      	ldr	r2, [r6, #4]
 80059e0:	4621      	mov	r1, r4
 80059e2:	2304      	movs	r3, #4
 80059e4:	b00f      	add	sp, #60	; 0x3c
 80059e6:	ecbd 8b0a 	vpop	{d8-d12}
 80059ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ee:	f000 b969 	b.w	8005cc4 <arm_radix8_butterfly_f32>
 80059f2:	bf00      	nop

080059f4 <arm_cfft_f32>:
 80059f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f8:	2a01      	cmp	r2, #1
 80059fa:	4606      	mov	r6, r0
 80059fc:	4617      	mov	r7, r2
 80059fe:	460c      	mov	r4, r1
 8005a00:	4698      	mov	r8, r3
 8005a02:	8805      	ldrh	r5, [r0, #0]
 8005a04:	d054      	beq.n	8005ab0 <arm_cfft_f32+0xbc>
 8005a06:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8005a0a:	d04c      	beq.n	8005aa6 <arm_cfft_f32+0xb2>
 8005a0c:	d916      	bls.n	8005a3c <arm_cfft_f32+0x48>
 8005a0e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005a12:	d01a      	beq.n	8005a4a <arm_cfft_f32+0x56>
 8005a14:	d95c      	bls.n	8005ad0 <arm_cfft_f32+0xdc>
 8005a16:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8005a1a:	d044      	beq.n	8005aa6 <arm_cfft_f32+0xb2>
 8005a1c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005a20:	d105      	bne.n	8005a2e <arm_cfft_f32+0x3a>
 8005a22:	4620      	mov	r0, r4
 8005a24:	4629      	mov	r1, r5
 8005a26:	6872      	ldr	r2, [r6, #4]
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f000 f94b 	bl	8005cc4 <arm_radix8_butterfly_f32>
 8005a2e:	f1b8 0f00 	cmp.w	r8, #0
 8005a32:	d111      	bne.n	8005a58 <arm_cfft_f32+0x64>
 8005a34:	2f01      	cmp	r7, #1
 8005a36:	d016      	beq.n	8005a66 <arm_cfft_f32+0x72>
 8005a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a3c:	2d20      	cmp	r5, #32
 8005a3e:	d032      	beq.n	8005aa6 <arm_cfft_f32+0xb2>
 8005a40:	d94a      	bls.n	8005ad8 <arm_cfft_f32+0xe4>
 8005a42:	2d40      	cmp	r5, #64	; 0x40
 8005a44:	d0ed      	beq.n	8005a22 <arm_cfft_f32+0x2e>
 8005a46:	2d80      	cmp	r5, #128	; 0x80
 8005a48:	d1f1      	bne.n	8005a2e <arm_cfft_f32+0x3a>
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	f7ff fca1 	bl	8005394 <arm_cfft_radix8by2_f32>
 8005a52:	f1b8 0f00 	cmp.w	r8, #0
 8005a56:	d0ed      	beq.n	8005a34 <arm_cfft_f32+0x40>
 8005a58:	4620      	mov	r0, r4
 8005a5a:	89b1      	ldrh	r1, [r6, #12]
 8005a5c:	68b2      	ldr	r2, [r6, #8]
 8005a5e:	f7fa fbb7 	bl	80001d0 <arm_bitreversal_32>
 8005a62:	2f01      	cmp	r7, #1
 8005a64:	d1e8      	bne.n	8005a38 <arm_cfft_f32+0x44>
 8005a66:	ee07 5a90 	vmov	s15, r5
 8005a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005a72:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8005a76:	2d00      	cmp	r5, #0
 8005a78:	d0de      	beq.n	8005a38 <arm_cfft_f32+0x44>
 8005a7a:	f104 0108 	add.w	r1, r4, #8
 8005a7e:	2300      	movs	r3, #0
 8005a80:	3301      	adds	r3, #1
 8005a82:	429d      	cmp	r5, r3
 8005a84:	f101 0108 	add.w	r1, r1, #8
 8005a88:	ed11 7a04 	vldr	s14, [r1, #-16]
 8005a8c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005a90:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005a94:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005a98:	ed01 7a04 	vstr	s14, [r1, #-16]
 8005a9c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8005aa0:	d1ee      	bne.n	8005a80 <arm_cfft_f32+0x8c>
 8005aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	f7ff fd45 	bl	8005538 <arm_cfft_radix8by4_f32>
 8005aae:	e7be      	b.n	8005a2e <arm_cfft_f32+0x3a>
 8005ab0:	b1ad      	cbz	r5, 8005ade <arm_cfft_f32+0xea>
 8005ab2:	f101 030c 	add.w	r3, r1, #12
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	ed53 7a02 	vldr	s15, [r3, #-8]
 8005abc:	3201      	adds	r2, #1
 8005abe:	eef1 7a67 	vneg.f32	s15, s15
 8005ac2:	4295      	cmp	r5, r2
 8005ac4:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005ac8:	f103 0308 	add.w	r3, r3, #8
 8005acc:	d1f4      	bne.n	8005ab8 <arm_cfft_f32+0xc4>
 8005ace:	e79a      	b.n	8005a06 <arm_cfft_f32+0x12>
 8005ad0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8005ad4:	d0a5      	beq.n	8005a22 <arm_cfft_f32+0x2e>
 8005ad6:	e7aa      	b.n	8005a2e <arm_cfft_f32+0x3a>
 8005ad8:	2d10      	cmp	r5, #16
 8005ada:	d0b6      	beq.n	8005a4a <arm_cfft_f32+0x56>
 8005adc:	e7a7      	b.n	8005a2e <arm_cfft_f32+0x3a>
 8005ade:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8005ae2:	d894      	bhi.n	8005a0e <arm_cfft_f32+0x1a>
 8005ae4:	e7aa      	b.n	8005a3c <arm_cfft_f32+0x48>
 8005ae6:	bf00      	nop

08005ae8 <arm_fir_init_f32>:
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	9c04      	ldr	r4, [sp, #16]
 8005aec:	6082      	str	r2, [r0, #8]
 8005aee:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8005af2:	3c01      	subs	r4, #1
 8005af4:	4605      	mov	r5, r0
 8005af6:	440c      	add	r4, r1
 8005af8:	8001      	strh	r1, [r0, #0]
 8005afa:	461e      	mov	r6, r3
 8005afc:	00a2      	lsls	r2, r4, #2
 8005afe:	4618      	mov	r0, r3
 8005b00:	2100      	movs	r1, #0
 8005b02:	f000 fbeb 	bl	80062dc <memset>
 8005b06:	606e      	str	r6, [r5, #4]
 8005b08:	bd70      	pop	{r4, r5, r6, pc}
 8005b0a:	bf00      	nop

08005b0c <arm_biquad_cascade_df1_init_f32>:
 8005b0c:	b538      	push	{r3, r4, r5, lr}
 8005b0e:	4604      	mov	r4, r0
 8005b10:	6082      	str	r2, [r0, #8]
 8005b12:	6001      	str	r1, [r0, #0]
 8005b14:	461d      	mov	r5, r3
 8005b16:	010a      	lsls	r2, r1, #4
 8005b18:	4618      	mov	r0, r3
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	f000 fbde 	bl	80062dc <memset>
 8005b20:	6065      	str	r5, [r4, #4]
 8005b22:	bd38      	pop	{r3, r4, r5, pc}

08005b24 <arm_biquad_cascade_df1_f32>:
 8005b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b28:	ed2d 8b02 	vpush	{d8}
 8005b2c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005b30:	6886      	ldr	r6, [r0, #8]
 8005b32:	6845      	ldr	r5, [r0, #4]
 8005b34:	6807      	ldr	r7, [r0, #0]
 8005b36:	4696      	mov	lr, r2
 8005b38:	ea4f 180c 	mov.w	r8, ip, lsl #4
 8005b3c:	f003 0203 	and.w	r2, r3, #3
 8005b40:	eb0e 0908 	add.w	r9, lr, r8
 8005b44:	3614      	adds	r6, #20
 8005b46:	3510      	adds	r5, #16
 8005b48:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8005b4c:	ed56 1a04 	vldr	s3, [r6, #-16]
 8005b50:	ed16 1a03 	vldr	s2, [r6, #-12]
 8005b54:	ed56 0a02 	vldr	s1, [r6, #-8]
 8005b58:	ed16 0a01 	vldr	s0, [r6, #-4]
 8005b5c:	ed15 8a04 	vldr	s16, [r5, #-16]
 8005b60:	ed55 8a03 	vldr	s17, [r5, #-12]
 8005b64:	ed15 7a02 	vldr	s14, [r5, #-8]
 8005b68:	ed55 7a01 	vldr	s15, [r5, #-4]
 8005b6c:	f1bc 0f00 	cmp.w	ip, #0
 8005b70:	f000 80a5 	beq.w	8005cbe <arm_biquad_cascade_df1_f32+0x19a>
 8005b74:	f101 0010 	add.w	r0, r1, #16
 8005b78:	f10e 0310 	add.w	r3, lr, #16
 8005b7c:	4664      	mov	r4, ip
 8005b7e:	ed50 3a04 	vldr	s7, [r0, #-16]
 8005b82:	ee21 6a88 	vmul.f32	s12, s3, s16
 8005b86:	ee22 5a23 	vmul.f32	s10, s4, s7
 8005b8a:	ee61 8a28 	vmul.f32	s17, s2, s17
 8005b8e:	ee35 6a06 	vadd.f32	s12, s10, s12
 8005b92:	ee60 6a87 	vmul.f32	s13, s1, s14
 8005b96:	ee36 6a28 	vadd.f32	s12, s12, s17
 8005b9a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005b9e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005ba2:	ee61 6aa3 	vmul.f32	s13, s3, s7
 8005ba6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8005baa:	ee21 8a08 	vmul.f32	s16, s2, s16
 8005bae:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005bb2:	ed50 2a03 	vldr	s5, [r0, #-12]
 8005bb6:	ee22 6a22 	vmul.f32	s12, s4, s5
 8005bba:	ee60 5aa7 	vmul.f32	s11, s1, s15
 8005bbe:	ee36 6a26 	vadd.f32	s12, s12, s13
 8005bc2:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005bc6:	ee76 6a08 	vadd.f32	s13, s12, s16
 8005bca:	ee21 3aa2 	vmul.f32	s6, s3, s5
 8005bce:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8005bd2:	ee21 8a23 	vmul.f32	s16, s2, s7
 8005bd6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005bda:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005bde:	ed03 7a03 	vstr	s14, [r3, #-12]
 8005be2:	ed50 8a02 	vldr	s17, [r0, #-8]
 8005be6:	ee62 3a28 	vmul.f32	s7, s4, s17
 8005bea:	ee20 6a87 	vmul.f32	s12, s1, s14
 8005bee:	ee33 3a83 	vadd.f32	s6, s7, s6
 8005bf2:	ee21 4aa8 	vmul.f32	s8, s3, s17
 8005bf6:	ee73 6a08 	vadd.f32	s13, s6, s16
 8005bfa:	ee61 2a22 	vmul.f32	s5, s2, s5
 8005bfe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005c02:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0a:	3c01      	subs	r4, #1
 8005c0c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005c10:	ed10 8a01 	vldr	s16, [r0, #-4]
 8005c14:	ee62 3a08 	vmul.f32	s7, s4, s16
 8005c18:	ee60 6aa7 	vmul.f32	s13, s1, s15
 8005c1c:	ee73 3a84 	vadd.f32	s7, s7, s8
 8005c20:	f100 0010 	add.w	r0, r0, #16
 8005c24:	ee33 4aa2 	vadd.f32	s8, s7, s5
 8005c28:	f103 0310 	add.w	r3, r3, #16
 8005c2c:	ee34 4a26 	vadd.f32	s8, s8, s13
 8005c30:	ee34 7a07 	vadd.f32	s14, s8, s14
 8005c34:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8005c38:	d1a1      	bne.n	8005b7e <arm_biquad_cascade_df1_f32+0x5a>
 8005c3a:	4441      	add	r1, r8
 8005c3c:	4648      	mov	r0, r9
 8005c3e:	b3aa      	cbz	r2, 8005cac <arm_biquad_cascade_df1_f32+0x188>
 8005c40:	4613      	mov	r3, r2
 8005c42:	e003      	b.n	8005c4c <arm_biquad_cascade_df1_f32+0x128>
 8005c44:	eeb0 7a45 	vmov.f32	s14, s10
 8005c48:	eeb0 8a43 	vmov.f32	s16, s6
 8005c4c:	ecb1 3a01 	vldmia	r1!, {s6}
 8005c50:	ee21 6a88 	vmul.f32	s12, s3, s16
 8005c54:	ee62 3a03 	vmul.f32	s7, s4, s6
 8005c58:	ee61 8a28 	vmul.f32	s17, s2, s17
 8005c5c:	ee33 4a86 	vadd.f32	s8, s7, s12
 8005c60:	ee60 4a87 	vmul.f32	s9, s1, s14
 8005c64:	ee34 6a28 	vadd.f32	s12, s8, s17
 8005c68:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005c6c:	ee76 4a24 	vadd.f32	s9, s12, s9
 8005c70:	3b01      	subs	r3, #1
 8005c72:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8005c76:	eef0 8a48 	vmov.f32	s17, s16
 8005c7a:	eef0 7a47 	vmov.f32	s15, s14
 8005c7e:	eca0 5a01 	vstmia	r0!, {s10}
 8005c82:	d1df      	bne.n	8005c44 <arm_biquad_cascade_df1_f32+0x120>
 8005c84:	3f01      	subs	r7, #1
 8005c86:	ed05 3a04 	vstr	s6, [r5, #-16]
 8005c8a:	ed05 8a03 	vstr	s16, [r5, #-12]
 8005c8e:	ed05 5a02 	vstr	s10, [r5, #-8]
 8005c92:	ed05 7a01 	vstr	s14, [r5, #-4]
 8005c96:	f106 0614 	add.w	r6, r6, #20
 8005c9a:	f105 0510 	add.w	r5, r5, #16
 8005c9e:	4671      	mov	r1, lr
 8005ca0:	f47f af52 	bne.w	8005b48 <arm_biquad_cascade_df1_f32+0x24>
 8005ca4:	ecbd 8b02 	vpop	{d8}
 8005ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cac:	eeb0 5a47 	vmov.f32	s10, s14
 8005cb0:	eeb0 3a48 	vmov.f32	s6, s16
 8005cb4:	eeb0 7a67 	vmov.f32	s14, s15
 8005cb8:	eeb0 8a68 	vmov.f32	s16, s17
 8005cbc:	e7e2      	b.n	8005c84 <arm_biquad_cascade_df1_f32+0x160>
 8005cbe:	4670      	mov	r0, lr
 8005cc0:	e7bd      	b.n	8005c3e <arm_biquad_cascade_df1_f32+0x11a>
 8005cc2:	bf00      	nop

08005cc4 <arm_radix8_butterfly_f32>:
 8005cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc8:	ed2d 8b10 	vpush	{d8-d15}
 8005ccc:	b09d      	sub	sp, #116	; 0x74
 8005cce:	461c      	mov	r4, r3
 8005cd0:	ed9f bac8 	vldr	s22, [pc, #800]	; 8005ff4 <arm_radix8_butterfly_f32+0x330>
 8005cd4:	921a      	str	r2, [sp, #104]	; 0x68
 8005cd6:	1d03      	adds	r3, r0, #4
 8005cd8:	4682      	mov	sl, r0
 8005cda:	4689      	mov	r9, r1
 8005cdc:	468b      	mov	fp, r1
 8005cde:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ce0:	9400      	str	r4, [sp, #0]
 8005ce2:	469e      	mov	lr, r3
 8005ce4:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8005ce8:	005a      	lsls	r2, r3, #1
 8005cea:	18d6      	adds	r6, r2, r3
 8005cec:	18f5      	adds	r5, r6, r3
 8005cee:	9203      	str	r2, [sp, #12]
 8005cf0:	195a      	adds	r2, r3, r5
 8005cf2:	18d0      	adds	r0, r2, r3
 8005cf4:	00df      	lsls	r7, r3, #3
 8005cf6:	1819      	adds	r1, r3, r0
 8005cf8:	463c      	mov	r4, r7
 8005cfa:	9701      	str	r7, [sp, #4]
 8005cfc:	4457      	add	r7, sl
 8005cfe:	930c      	str	r3, [sp, #48]	; 0x30
 8005d00:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8005d0a:	eb07 0c04 	add.w	ip, r7, r4
 8005d0e:	9c00      	ldr	r4, [sp, #0]
 8005d10:	9302      	str	r3, [sp, #8]
 8005d12:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8005d16:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8005d1a:	3204      	adds	r2, #4
 8005d1c:	3104      	adds	r1, #4
 8005d1e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8005d22:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d26:	f04f 0800 	mov.w	r8, #0
 8005d2a:	eddc 7a00 	vldr	s15, [ip]
 8005d2e:	edd7 6a00 	vldr	s13, [r7]
 8005d32:	edd6 3a00 	vldr	s7, [r6]
 8005d36:	ed5e aa01 	vldr	s21, [lr, #-4]
 8005d3a:	edd5 4a00 	vldr	s9, [r5]
 8005d3e:	ed90 2a00 	vldr	s4, [r0]
 8005d42:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005d46:	ed51 0a01 	vldr	s1, [r1, #-4]
 8005d4a:	ee77 8a82 	vadd.f32	s17, s15, s4
 8005d4e:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8005d52:	ee76 1a87 	vadd.f32	s3, s13, s14
 8005d56:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8005d5a:	ee31 6a84 	vadd.f32	s12, s3, s8
 8005d5e:	ee33 5a28 	vadd.f32	s10, s6, s17
 8005d62:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005d66:	ee75 6a06 	vadd.f32	s13, s10, s12
 8005d6a:	ee35 5a46 	vsub.f32	s10, s10, s12
 8005d6e:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8005d72:	ed85 5a00 	vstr	s10, [r5]
 8005d76:	ed96 1a01 	vldr	s2, [r6, #4]
 8005d7a:	edd7 5a01 	vldr	s11, [r7, #4]
 8005d7e:	ed92 aa00 	vldr	s20, [r2]
 8005d82:	ed91 6a00 	vldr	s12, [r1]
 8005d86:	ed9e 9a00 	vldr	s18, [lr]
 8005d8a:	ed95 5a01 	vldr	s10, [r5, #4]
 8005d8e:	eddc 6a01 	vldr	s13, [ip, #4]
 8005d92:	edd0 9a01 	vldr	s19, [r0, #4]
 8005d96:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8005d9a:	ee71 2a46 	vsub.f32	s5, s2, s12
 8005d9e:	ee75 3aca 	vsub.f32	s7, s11, s20
 8005da2:	ee37 0a60 	vsub.f32	s0, s14, s1
 8005da6:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8005daa:	ee37 7a20 	vadd.f32	s14, s14, s1
 8005dae:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8005db2:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8005db6:	ee79 3a05 	vadd.f32	s7, s18, s10
 8005dba:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8005dbe:	ee39 5a45 	vsub.f32	s10, s18, s10
 8005dc2:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8005dc6:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8005dca:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8005dce:	ee31 6a06 	vadd.f32	s12, s2, s12
 8005dd2:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8005dd6:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8005dda:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8005dde:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8005de2:	ee33 3a68 	vsub.f32	s6, s6, s17
 8005de6:	ee36 0a88 	vadd.f32	s0, s13, s16
 8005dea:	ee75 8a86 	vadd.f32	s17, s11, s12
 8005dee:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8005df2:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8005df6:	ee75 6a62 	vsub.f32	s13, s10, s5
 8005dfa:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8005dfe:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8005e02:	ee33 1a89 	vadd.f32	s2, s7, s18
 8005e06:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8005e0a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8005e0e:	ee75 4a22 	vadd.f32	s9, s10, s5
 8005e12:	ee32 5a27 	vadd.f32	s10, s4, s15
 8005e16:	ee72 7a67 	vsub.f32	s15, s4, s15
 8005e1a:	ee33 8a06 	vadd.f32	s16, s6, s12
 8005e1e:	ee75 2a87 	vadd.f32	s5, s11, s14
 8005e22:	ee31 9a28 	vadd.f32	s18, s2, s17
 8005e26:	ee33 6a46 	vsub.f32	s12, s6, s12
 8005e2a:	ee74 0a61 	vsub.f32	s1, s8, s3
 8005e2e:	ee33 2a80 	vadd.f32	s4, s7, s0
 8005e32:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8005e36:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8005e3a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005e3e:	ee31 1a68 	vsub.f32	s2, s2, s17
 8005e42:	ee34 4a21 	vadd.f32	s8, s8, s3
 8005e46:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8005e4a:	ee74 4a85 	vadd.f32	s9, s9, s10
 8005e4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005e52:	44d8      	add	r8, fp
 8005e54:	45c1      	cmp	r9, r8
 8005e56:	ed8e 9a00 	vstr	s18, [lr]
 8005e5a:	ed85 1a01 	vstr	s2, [r5, #4]
 8005e5e:	449e      	add	lr, r3
 8005e60:	ed8c 8a00 	vstr	s16, [ip]
 8005e64:	441d      	add	r5, r3
 8005e66:	ed80 6a00 	vstr	s12, [r0]
 8005e6a:	edcc 0a01 	vstr	s1, [ip, #4]
 8005e6e:	ed80 4a01 	vstr	s8, [r0, #4]
 8005e72:	449c      	add	ip, r3
 8005e74:	ed87 2a00 	vstr	s4, [r7]
 8005e78:	4418      	add	r0, r3
 8005e7a:	ed41 3a01 	vstr	s7, [r1, #-4]
 8005e7e:	ed42 2a01 	vstr	s5, [r2, #-4]
 8005e82:	ed86 7a00 	vstr	s14, [r6]
 8005e86:	ed87 3a01 	vstr	s6, [r7, #4]
 8005e8a:	edc1 4a00 	vstr	s9, [r1]
 8005e8e:	441f      	add	r7, r3
 8005e90:	edc2 5a00 	vstr	s11, [r2]
 8005e94:	4419      	add	r1, r3
 8005e96:	edc6 6a01 	vstr	s13, [r6, #4]
 8005e9a:	441a      	add	r2, r3
 8005e9c:	441e      	add	r6, r3
 8005e9e:	f63f af44 	bhi.w	8005d2a <arm_radix8_butterfly_f32+0x66>
 8005ea2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ea4:	2907      	cmp	r1, #7
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f240 81e9 	bls.w	800627e <arm_radix8_butterfly_f32+0x5ba>
 8005eac:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8005eb0:	193e      	adds	r6, r7, r4
 8005eb2:	1935      	adds	r5, r6, r4
 8005eb4:	9c03      	ldr	r4, [sp, #12]
 8005eb6:	9000      	str	r0, [sp, #0]
 8005eb8:	4622      	mov	r2, r4
 8005eba:	3201      	adds	r2, #1
 8005ebc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005ec0:	9900      	ldr	r1, [sp, #0]
 8005ec2:	1828      	adds	r0, r5, r0
 8005ec4:	eb00 0e01 	add.w	lr, r0, r1
 8005ec8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005eca:	440a      	add	r2, r1
 8005ecc:	eb04 0c01 	add.w	ip, r4, r1
 8005ed0:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8005ed4:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8005ed8:	9a00      	ldr	r2, [sp, #0]
 8005eda:	940f      	str	r4, [sp, #60]	; 0x3c
 8005edc:	00ed      	lsls	r5, r5, #3
 8005ede:	9511      	str	r5, [sp, #68]	; 0x44
 8005ee0:	00d5      	lsls	r5, r2, #3
 8005ee2:	950d      	str	r5, [sp, #52]	; 0x34
 8005ee4:	9d01      	ldr	r5, [sp, #4]
 8005ee6:	3508      	adds	r5, #8
 8005ee8:	9516      	str	r5, [sp, #88]	; 0x58
 8005eea:	9d02      	ldr	r5, [sp, #8]
 8005eec:	3508      	adds	r5, #8
 8005eee:	0114      	lsls	r4, r2, #4
 8005ef0:	9517      	str	r5, [sp, #92]	; 0x5c
 8005ef2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ef4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005ef6:	940e      	str	r4, [sp, #56]	; 0x38
 8005ef8:	00c0      	lsls	r0, r0, #3
 8005efa:	9010      	str	r0, [sp, #64]	; 0x40
 8005efc:	18aa      	adds	r2, r5, r2
 8005efe:	9207      	str	r2, [sp, #28]
 8005f00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005f04:	18aa      	adds	r2, r5, r2
 8005f06:	9208      	str	r2, [sp, #32]
 8005f08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005f0a:	18aa      	adds	r2, r5, r2
 8005f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f0e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005f12:	f10e 0204 	add.w	r2, lr, #4
 8005f16:	920a      	str	r2, [sp, #40]	; 0x28
 8005f18:	00c9      	lsls	r1, r1, #3
 8005f1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f1c:	310c      	adds	r1, #12
 8005f1e:	00f6      	lsls	r6, r6, #3
 8005f20:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8005f24:	9114      	str	r1, [sp, #80]	; 0x50
 8005f26:	18a9      	adds	r1, r5, r2
 8005f28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f2a:	9612      	str	r6, [sp, #72]	; 0x48
 8005f2c:	00ff      	lsls	r7, r7, #3
 8005f2e:	19ae      	adds	r6, r5, r6
 8005f30:	3008      	adds	r0, #8
 8005f32:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8005f36:	9606      	str	r6, [sp, #24]
 8005f38:	9019      	str	r0, [sp, #100]	; 0x64
 8005f3a:	18aa      	adds	r2, r5, r2
 8005f3c:	0164      	lsls	r4, r4, #5
 8005f3e:	19ee      	adds	r6, r5, r7
 8005f40:	f10c 000c 	add.w	r0, ip, #12
 8005f44:	9713      	str	r7, [sp, #76]	; 0x4c
 8005f46:	9604      	str	r6, [sp, #16]
 8005f48:	9015      	str	r0, [sp, #84]	; 0x54
 8005f4a:	9103      	str	r1, [sp, #12]
 8005f4c:	9205      	str	r2, [sp, #20]
 8005f4e:	f104 0208 	add.w	r2, r4, #8
 8005f52:	9218      	str	r2, [sp, #96]	; 0x60
 8005f54:	f04f 0801 	mov.w	r8, #1
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f102 0108 	add.w	r1, r2, #8
 8005f5e:	460f      	mov	r7, r1
 8005f60:	910b      	str	r1, [sp, #44]	; 0x2c
 8005f62:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f64:	188e      	adds	r6, r1, r2
 8005f66:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005f68:	188d      	adds	r5, r1, r2
 8005f6a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005f6c:	188c      	adds	r4, r1, r2
 8005f6e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005f70:	1888      	adds	r0, r1, r2
 8005f72:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005f74:	eb01 0c02 	add.w	ip, r1, r2
 8005f78:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005f7a:	440a      	add	r2, r1
 8005f7c:	9903      	ldr	r1, [sp, #12]
 8005f7e:	edd1 fa00 	vldr	s31, [r1]
 8005f82:	9905      	ldr	r1, [sp, #20]
 8005f84:	ed91 fa00 	vldr	s30, [r1]
 8005f88:	9904      	ldr	r1, [sp, #16]
 8005f8a:	edd1 ea00 	vldr	s29, [r1]
 8005f8e:	9906      	ldr	r1, [sp, #24]
 8005f90:	ed91 ea00 	vldr	s28, [r1]
 8005f94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f96:	edd1 da00 	vldr	s27, [r1]
 8005f9a:	9908      	ldr	r1, [sp, #32]
 8005f9c:	ed91 da00 	vldr	s26, [r1]
 8005fa0:	9907      	ldr	r1, [sp, #28]
 8005fa2:	edd1 ca00 	vldr	s25, [r1]
 8005fa6:	9903      	ldr	r1, [sp, #12]
 8005fa8:	ed91 ca01 	vldr	s24, [r1, #4]
 8005fac:	9905      	ldr	r1, [sp, #20]
 8005fae:	edd1 ba01 	vldr	s23, [r1, #4]
 8005fb2:	9904      	ldr	r1, [sp, #16]
 8005fb4:	edd1 aa01 	vldr	s21, [r1, #4]
 8005fb8:	9906      	ldr	r1, [sp, #24]
 8005fba:	ed91 aa01 	vldr	s20, [r1, #4]
 8005fbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fc0:	edd1 7a01 	vldr	s15, [r1, #4]
 8005fc4:	9908      	ldr	r1, [sp, #32]
 8005fc6:	edcd 7a00 	vstr	s15, [sp]
 8005fca:	edd1 7a01 	vldr	s15, [r1, #4]
 8005fce:	9907      	ldr	r1, [sp, #28]
 8005fd0:	edcd 7a01 	vstr	s15, [sp, #4]
 8005fd4:	edd1 7a01 	vldr	s15, [r1, #4]
 8005fd8:	eb0a 0e07 	add.w	lr, sl, r7
 8005fdc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005fde:	edcd 7a02 	vstr	s15, [sp, #8]
 8005fe2:	eb0c 010a 	add.w	r1, ip, sl
 8005fe6:	4456      	add	r6, sl
 8005fe8:	4455      	add	r5, sl
 8005fea:	4454      	add	r4, sl
 8005fec:	4450      	add	r0, sl
 8005fee:	4452      	add	r2, sl
 8005ff0:	46c4      	mov	ip, r8
 8005ff2:	e001      	b.n	8005ff8 <arm_radix8_butterfly_f32+0x334>
 8005ff4:	3f3504f3 	.word	0x3f3504f3
 8005ff8:	ed96 5a00 	vldr	s10, [r6]
 8005ffc:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006000:	ed11 6a01 	vldr	s12, [r1, #-4]
 8006004:	edd0 7a00 	vldr	s15, [r0]
 8006008:	ed17 7a01 	vldr	s14, [r7, #-4]
 800600c:	edde 3a00 	vldr	s7, [lr]
 8006010:	ed94 3a00 	vldr	s6, [r4]
 8006014:	ed95 2a00 	vldr	s4, [r5]
 8006018:	ed9e 0a01 	vldr	s0, [lr, #4]
 800601c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006020:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006024:	ee33 4a29 	vadd.f32	s8, s6, s19
 8006028:	ee77 4a87 	vadd.f32	s9, s15, s14
 800602c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006030:	ee71 6a24 	vadd.f32	s13, s2, s9
 8006034:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006038:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800603c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006040:	ed8e 6a00 	vstr	s12, [lr]
 8006044:	edd0 8a01 	vldr	s17, [r0, #4]
 8006048:	ed95 9a01 	vldr	s18, [r5, #4]
 800604c:	edd1 2a00 	vldr	s5, [r1]
 8006050:	ed97 7a00 	vldr	s14, [r7]
 8006054:	edd4 0a01 	vldr	s1, [r4, #4]
 8006058:	ed96 6a01 	vldr	s12, [r6, #4]
 800605c:	edd2 5a00 	vldr	s11, [r2]
 8006060:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006064:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006068:	ee39 5a62 	vsub.f32	s10, s18, s5
 800606c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8006070:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006074:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006078:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800607c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006080:	ee75 8a69 	vsub.f32	s17, s10, s19
 8006084:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006088:	ee35 5a29 	vadd.f32	s10, s10, s19
 800608c:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006090:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006094:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8006098:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800609c:	ee32 9a08 	vadd.f32	s18, s4, s16
 80060a0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80060a4:	ee32 2a48 	vsub.f32	s4, s4, s16
 80060a8:	ee71 4a64 	vsub.f32	s9, s2, s9
 80060ac:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80060b0:	ee32 1a87 	vadd.f32	s2, s5, s14
 80060b4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80060b8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80060bc:	ee30 6a46 	vsub.f32	s12, s0, s12
 80060c0:	ee73 0a29 	vadd.f32	s1, s6, s19
 80060c4:	ee36 0a28 	vadd.f32	s0, s12, s17
 80060c8:	ee33 3a69 	vsub.f32	s6, s6, s19
 80060cc:	ee32 7a64 	vsub.f32	s14, s4, s9
 80060d0:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80060d4:	ee36 6a68 	vsub.f32	s12, s12, s17
 80060d8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80060dc:	ee75 8a85 	vadd.f32	s17, s11, s10
 80060e0:	ee74 3a22 	vadd.f32	s7, s8, s5
 80060e4:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80060e8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80060ec:	ee79 1a41 	vsub.f32	s3, s18, s2
 80060f0:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80060f4:	ee76 5a43 	vsub.f32	s11, s12, s6
 80060f8:	ee74 2a62 	vsub.f32	s5, s8, s5
 80060fc:	ee72 4a24 	vadd.f32	s9, s4, s9
 8006100:	ee30 4a60 	vsub.f32	s8, s0, s1
 8006104:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8006108:	ee30 0a20 	vadd.f32	s0, s0, s1
 800610c:	ee77 9a85 	vadd.f32	s19, s15, s10
 8006110:	ee36 6a03 	vadd.f32	s12, s12, s6
 8006114:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006118:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800611c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8006120:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8006124:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8006128:	ee39 1a01 	vadd.f32	s2, s18, s2
 800612c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8006130:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8006134:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8006138:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800613c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8006140:	ee35 3a03 	vadd.f32	s6, s10, s6
 8006144:	ee72 6a66 	vsub.f32	s13, s4, s13
 8006148:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800614c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8006150:	ed9d 4a02 	vldr	s8, [sp, #8]
 8006154:	ed8e 1a01 	vstr	s2, [lr, #4]
 8006158:	ee77 3a63 	vsub.f32	s7, s14, s7
 800615c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8006160:	ed9d 7a01 	vldr	s14, [sp, #4]
 8006164:	ed86 3a00 	vstr	s6, [r6]
 8006168:	ee30 9a89 	vadd.f32	s18, s1, s18
 800616c:	ee32 2a05 	vadd.f32	s4, s4, s10
 8006170:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8006174:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8006178:	ee67 2a22 	vmul.f32	s5, s14, s5
 800617c:	ee64 1a00 	vmul.f32	s3, s8, s0
 8006180:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006184:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8006188:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800618c:	ee64 8a28 	vmul.f32	s17, s8, s17
 8006190:	ed9d 4a00 	vldr	s8, [sp]
 8006194:	edc6 6a01 	vstr	s13, [r6, #4]
 8006198:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800619c:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80061a0:	ee64 9a29 	vmul.f32	s19, s8, s19
 80061a4:	ee24 4a25 	vmul.f32	s8, s8, s11
 80061a8:	ee30 7a87 	vadd.f32	s14, s1, s14
 80061ac:	ee74 4a84 	vadd.f32	s9, s9, s8
 80061b0:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80061b4:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80061b8:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80061bc:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80061c0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80061c4:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80061c8:	ee75 1a21 	vadd.f32	s3, s10, s3
 80061cc:	ee30 0a68 	vsub.f32	s0, s0, s17
 80061d0:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80061d4:	ee70 0a84 	vadd.f32	s1, s1, s8
 80061d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80061dc:	44dc      	add	ip, fp
 80061de:	45e1      	cmp	r9, ip
 80061e0:	ed84 9a00 	vstr	s18, [r4]
 80061e4:	edc4 3a01 	vstr	s7, [r4, #4]
 80061e8:	449e      	add	lr, r3
 80061ea:	ed02 7a01 	vstr	s14, [r2, #-4]
 80061ee:	edc2 2a00 	vstr	s5, [r2]
 80061f2:	441e      	add	r6, r3
 80061f4:	ed85 2a00 	vstr	s4, [r5]
 80061f8:	ed85 8a01 	vstr	s16, [r5, #4]
 80061fc:	441c      	add	r4, r3
 80061fe:	ed47 1a01 	vstr	s3, [r7, #-4]
 8006202:	ed87 0a00 	vstr	s0, [r7]
 8006206:	441a      	add	r2, r3
 8006208:	ed41 4a01 	vstr	s9, [r1, #-4]
 800620c:	edc1 9a00 	vstr	s19, [r1]
 8006210:	441d      	add	r5, r3
 8006212:	edc0 0a00 	vstr	s1, [r0]
 8006216:	441f      	add	r7, r3
 8006218:	ed80 6a01 	vstr	s12, [r0, #4]
 800621c:	4419      	add	r1, r3
 800621e:	4418      	add	r0, r3
 8006220:	f63f aeea 	bhi.w	8005ff8 <arm_radix8_butterfly_f32+0x334>
 8006224:	9a03      	ldr	r2, [sp, #12]
 8006226:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006228:	440a      	add	r2, r1
 800622a:	9203      	str	r2, [sp, #12]
 800622c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800622e:	9a05      	ldr	r2, [sp, #20]
 8006230:	440a      	add	r2, r1
 8006232:	9205      	str	r2, [sp, #20]
 8006234:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006236:	9a04      	ldr	r2, [sp, #16]
 8006238:	440a      	add	r2, r1
 800623a:	9204      	str	r2, [sp, #16]
 800623c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800623e:	9a06      	ldr	r2, [sp, #24]
 8006240:	440a      	add	r2, r1
 8006242:	9206      	str	r2, [sp, #24]
 8006244:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006248:	440a      	add	r2, r1
 800624a:	9209      	str	r2, [sp, #36]	; 0x24
 800624c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800624e:	9a08      	ldr	r2, [sp, #32]
 8006250:	440a      	add	r2, r1
 8006252:	9208      	str	r2, [sp, #32]
 8006254:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006256:	9a07      	ldr	r2, [sp, #28]
 8006258:	440a      	add	r2, r1
 800625a:	9207      	str	r2, [sp, #28]
 800625c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800625e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006260:	f108 0801 	add.w	r8, r8, #1
 8006264:	3208      	adds	r2, #8
 8006266:	4588      	cmp	r8, r1
 8006268:	920a      	str	r2, [sp, #40]	; 0x28
 800626a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800626c:	f47f ae75 	bne.w	8005f5a <arm_radix8_butterfly_f32+0x296>
 8006270:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	46c3      	mov	fp, r8
 8006278:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 800627c:	e532      	b.n	8005ce4 <arm_radix8_butterfly_f32+0x20>
 800627e:	b01d      	add	sp, #116	; 0x74
 8006280:	ecbd 8b10 	vpop	{d8-d15}
 8006284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006288 <__errno>:
 8006288:	4b01      	ldr	r3, [pc, #4]	; (8006290 <__errno+0x8>)
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	20000074 	.word	0x20000074

08006294 <__libc_init_array>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	4d0d      	ldr	r5, [pc, #52]	; (80062cc <__libc_init_array+0x38>)
 8006298:	4c0d      	ldr	r4, [pc, #52]	; (80062d0 <__libc_init_array+0x3c>)
 800629a:	1b64      	subs	r4, r4, r5
 800629c:	10a4      	asrs	r4, r4, #2
 800629e:	2600      	movs	r6, #0
 80062a0:	42a6      	cmp	r6, r4
 80062a2:	d109      	bne.n	80062b8 <__libc_init_array+0x24>
 80062a4:	4d0b      	ldr	r5, [pc, #44]	; (80062d4 <__libc_init_array+0x40>)
 80062a6:	4c0c      	ldr	r4, [pc, #48]	; (80062d8 <__libc_init_array+0x44>)
 80062a8:	f002 fd32 	bl	8008d10 <_init>
 80062ac:	1b64      	subs	r4, r4, r5
 80062ae:	10a4      	asrs	r4, r4, #2
 80062b0:	2600      	movs	r6, #0
 80062b2:	42a6      	cmp	r6, r4
 80062b4:	d105      	bne.n	80062c2 <__libc_init_array+0x2e>
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062bc:	4798      	blx	r3
 80062be:	3601      	adds	r6, #1
 80062c0:	e7ee      	b.n	80062a0 <__libc_init_array+0xc>
 80062c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c6:	4798      	blx	r3
 80062c8:	3601      	adds	r6, #1
 80062ca:	e7f2      	b.n	80062b2 <__libc_init_array+0x1e>
 80062cc:	0801c5bc 	.word	0x0801c5bc
 80062d0:	0801c5bc 	.word	0x0801c5bc
 80062d4:	0801c5bc 	.word	0x0801c5bc
 80062d8:	0801c5c0 	.word	0x0801c5c0

080062dc <memset>:
 80062dc:	4402      	add	r2, r0
 80062de:	4603      	mov	r3, r0
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d100      	bne.n	80062e6 <memset+0xa>
 80062e4:	4770      	bx	lr
 80062e6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ea:	e7f9      	b.n	80062e0 <memset+0x4>

080062ec <__cvt>:
 80062ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062f0:	ec55 4b10 	vmov	r4, r5, d0
 80062f4:	2d00      	cmp	r5, #0
 80062f6:	460e      	mov	r6, r1
 80062f8:	4619      	mov	r1, r3
 80062fa:	462b      	mov	r3, r5
 80062fc:	bfbb      	ittet	lt
 80062fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006302:	461d      	movlt	r5, r3
 8006304:	2300      	movge	r3, #0
 8006306:	232d      	movlt	r3, #45	; 0x2d
 8006308:	700b      	strb	r3, [r1, #0]
 800630a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800630c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006310:	4691      	mov	r9, r2
 8006312:	f023 0820 	bic.w	r8, r3, #32
 8006316:	bfbc      	itt	lt
 8006318:	4622      	movlt	r2, r4
 800631a:	4614      	movlt	r4, r2
 800631c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006320:	d005      	beq.n	800632e <__cvt+0x42>
 8006322:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006326:	d100      	bne.n	800632a <__cvt+0x3e>
 8006328:	3601      	adds	r6, #1
 800632a:	2102      	movs	r1, #2
 800632c:	e000      	b.n	8006330 <__cvt+0x44>
 800632e:	2103      	movs	r1, #3
 8006330:	ab03      	add	r3, sp, #12
 8006332:	9301      	str	r3, [sp, #4]
 8006334:	ab02      	add	r3, sp, #8
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	ec45 4b10 	vmov	d0, r4, r5
 800633c:	4653      	mov	r3, sl
 800633e:	4632      	mov	r2, r6
 8006340:	f000 fda2 	bl	8006e88 <_dtoa_r>
 8006344:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006348:	4607      	mov	r7, r0
 800634a:	d102      	bne.n	8006352 <__cvt+0x66>
 800634c:	f019 0f01 	tst.w	r9, #1
 8006350:	d022      	beq.n	8006398 <__cvt+0xac>
 8006352:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006356:	eb07 0906 	add.w	r9, r7, r6
 800635a:	d110      	bne.n	800637e <__cvt+0x92>
 800635c:	783b      	ldrb	r3, [r7, #0]
 800635e:	2b30      	cmp	r3, #48	; 0x30
 8006360:	d10a      	bne.n	8006378 <__cvt+0x8c>
 8006362:	2200      	movs	r2, #0
 8006364:	2300      	movs	r3, #0
 8006366:	4620      	mov	r0, r4
 8006368:	4629      	mov	r1, r5
 800636a:	f7fa fc0d 	bl	8000b88 <__aeabi_dcmpeq>
 800636e:	b918      	cbnz	r0, 8006378 <__cvt+0x8c>
 8006370:	f1c6 0601 	rsb	r6, r6, #1
 8006374:	f8ca 6000 	str.w	r6, [sl]
 8006378:	f8da 3000 	ldr.w	r3, [sl]
 800637c:	4499      	add	r9, r3
 800637e:	2200      	movs	r2, #0
 8006380:	2300      	movs	r3, #0
 8006382:	4620      	mov	r0, r4
 8006384:	4629      	mov	r1, r5
 8006386:	f7fa fbff 	bl	8000b88 <__aeabi_dcmpeq>
 800638a:	b108      	cbz	r0, 8006390 <__cvt+0xa4>
 800638c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006390:	2230      	movs	r2, #48	; 0x30
 8006392:	9b03      	ldr	r3, [sp, #12]
 8006394:	454b      	cmp	r3, r9
 8006396:	d307      	bcc.n	80063a8 <__cvt+0xbc>
 8006398:	9b03      	ldr	r3, [sp, #12]
 800639a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800639c:	1bdb      	subs	r3, r3, r7
 800639e:	4638      	mov	r0, r7
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	b004      	add	sp, #16
 80063a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a8:	1c59      	adds	r1, r3, #1
 80063aa:	9103      	str	r1, [sp, #12]
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	e7f0      	b.n	8006392 <__cvt+0xa6>

080063b0 <__exponent>:
 80063b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063b2:	4603      	mov	r3, r0
 80063b4:	2900      	cmp	r1, #0
 80063b6:	bfb8      	it	lt
 80063b8:	4249      	neglt	r1, r1
 80063ba:	f803 2b02 	strb.w	r2, [r3], #2
 80063be:	bfb4      	ite	lt
 80063c0:	222d      	movlt	r2, #45	; 0x2d
 80063c2:	222b      	movge	r2, #43	; 0x2b
 80063c4:	2909      	cmp	r1, #9
 80063c6:	7042      	strb	r2, [r0, #1]
 80063c8:	dd2a      	ble.n	8006420 <__exponent+0x70>
 80063ca:	f10d 0407 	add.w	r4, sp, #7
 80063ce:	46a4      	mov	ip, r4
 80063d0:	270a      	movs	r7, #10
 80063d2:	46a6      	mov	lr, r4
 80063d4:	460a      	mov	r2, r1
 80063d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80063da:	fb07 1516 	mls	r5, r7, r6, r1
 80063de:	3530      	adds	r5, #48	; 0x30
 80063e0:	2a63      	cmp	r2, #99	; 0x63
 80063e2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80063e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80063ea:	4631      	mov	r1, r6
 80063ec:	dcf1      	bgt.n	80063d2 <__exponent+0x22>
 80063ee:	3130      	adds	r1, #48	; 0x30
 80063f0:	f1ae 0502 	sub.w	r5, lr, #2
 80063f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80063f8:	1c44      	adds	r4, r0, #1
 80063fa:	4629      	mov	r1, r5
 80063fc:	4561      	cmp	r1, ip
 80063fe:	d30a      	bcc.n	8006416 <__exponent+0x66>
 8006400:	f10d 0209 	add.w	r2, sp, #9
 8006404:	eba2 020e 	sub.w	r2, r2, lr
 8006408:	4565      	cmp	r5, ip
 800640a:	bf88      	it	hi
 800640c:	2200      	movhi	r2, #0
 800640e:	4413      	add	r3, r2
 8006410:	1a18      	subs	r0, r3, r0
 8006412:	b003      	add	sp, #12
 8006414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800641a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800641e:	e7ed      	b.n	80063fc <__exponent+0x4c>
 8006420:	2330      	movs	r3, #48	; 0x30
 8006422:	3130      	adds	r1, #48	; 0x30
 8006424:	7083      	strb	r3, [r0, #2]
 8006426:	70c1      	strb	r1, [r0, #3]
 8006428:	1d03      	adds	r3, r0, #4
 800642a:	e7f1      	b.n	8006410 <__exponent+0x60>

0800642c <_printf_float>:
 800642c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006430:	ed2d 8b02 	vpush	{d8}
 8006434:	b08d      	sub	sp, #52	; 0x34
 8006436:	460c      	mov	r4, r1
 8006438:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800643c:	4616      	mov	r6, r2
 800643e:	461f      	mov	r7, r3
 8006440:	4605      	mov	r5, r0
 8006442:	f001 fcc5 	bl	8007dd0 <_localeconv_r>
 8006446:	f8d0 a000 	ldr.w	sl, [r0]
 800644a:	4650      	mov	r0, sl
 800644c:	f7f9 ff20 	bl	8000290 <strlen>
 8006450:	2300      	movs	r3, #0
 8006452:	930a      	str	r3, [sp, #40]	; 0x28
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	9305      	str	r3, [sp, #20]
 8006458:	f8d8 3000 	ldr.w	r3, [r8]
 800645c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006460:	3307      	adds	r3, #7
 8006462:	f023 0307 	bic.w	r3, r3, #7
 8006466:	f103 0208 	add.w	r2, r3, #8
 800646a:	f8c8 2000 	str.w	r2, [r8]
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006476:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800647a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800647e:	9307      	str	r3, [sp, #28]
 8006480:	f8cd 8018 	str.w	r8, [sp, #24]
 8006484:	ee08 0a10 	vmov	s16, r0
 8006488:	4b9f      	ldr	r3, [pc, #636]	; (8006708 <_printf_float+0x2dc>)
 800648a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800648e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006492:	f7fa fbab 	bl	8000bec <__aeabi_dcmpun>
 8006496:	bb88      	cbnz	r0, 80064fc <_printf_float+0xd0>
 8006498:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800649c:	4b9a      	ldr	r3, [pc, #616]	; (8006708 <_printf_float+0x2dc>)
 800649e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064a2:	f7fa fb85 	bl	8000bb0 <__aeabi_dcmple>
 80064a6:	bb48      	cbnz	r0, 80064fc <_printf_float+0xd0>
 80064a8:	2200      	movs	r2, #0
 80064aa:	2300      	movs	r3, #0
 80064ac:	4640      	mov	r0, r8
 80064ae:	4649      	mov	r1, r9
 80064b0:	f7fa fb74 	bl	8000b9c <__aeabi_dcmplt>
 80064b4:	b110      	cbz	r0, 80064bc <_printf_float+0x90>
 80064b6:	232d      	movs	r3, #45	; 0x2d
 80064b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064bc:	4b93      	ldr	r3, [pc, #588]	; (800670c <_printf_float+0x2e0>)
 80064be:	4894      	ldr	r0, [pc, #592]	; (8006710 <_printf_float+0x2e4>)
 80064c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80064c4:	bf94      	ite	ls
 80064c6:	4698      	movls	r8, r3
 80064c8:	4680      	movhi	r8, r0
 80064ca:	2303      	movs	r3, #3
 80064cc:	6123      	str	r3, [r4, #16]
 80064ce:	9b05      	ldr	r3, [sp, #20]
 80064d0:	f023 0204 	bic.w	r2, r3, #4
 80064d4:	6022      	str	r2, [r4, #0]
 80064d6:	f04f 0900 	mov.w	r9, #0
 80064da:	9700      	str	r7, [sp, #0]
 80064dc:	4633      	mov	r3, r6
 80064de:	aa0b      	add	r2, sp, #44	; 0x2c
 80064e0:	4621      	mov	r1, r4
 80064e2:	4628      	mov	r0, r5
 80064e4:	f000 f9d8 	bl	8006898 <_printf_common>
 80064e8:	3001      	adds	r0, #1
 80064ea:	f040 8090 	bne.w	800660e <_printf_float+0x1e2>
 80064ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064f2:	b00d      	add	sp, #52	; 0x34
 80064f4:	ecbd 8b02 	vpop	{d8}
 80064f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fc:	4642      	mov	r2, r8
 80064fe:	464b      	mov	r3, r9
 8006500:	4640      	mov	r0, r8
 8006502:	4649      	mov	r1, r9
 8006504:	f7fa fb72 	bl	8000bec <__aeabi_dcmpun>
 8006508:	b140      	cbz	r0, 800651c <_printf_float+0xf0>
 800650a:	464b      	mov	r3, r9
 800650c:	2b00      	cmp	r3, #0
 800650e:	bfbc      	itt	lt
 8006510:	232d      	movlt	r3, #45	; 0x2d
 8006512:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006516:	487f      	ldr	r0, [pc, #508]	; (8006714 <_printf_float+0x2e8>)
 8006518:	4b7f      	ldr	r3, [pc, #508]	; (8006718 <_printf_float+0x2ec>)
 800651a:	e7d1      	b.n	80064c0 <_printf_float+0x94>
 800651c:	6863      	ldr	r3, [r4, #4]
 800651e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006522:	9206      	str	r2, [sp, #24]
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	d13f      	bne.n	80065a8 <_printf_float+0x17c>
 8006528:	2306      	movs	r3, #6
 800652a:	6063      	str	r3, [r4, #4]
 800652c:	9b05      	ldr	r3, [sp, #20]
 800652e:	6861      	ldr	r1, [r4, #4]
 8006530:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006534:	2300      	movs	r3, #0
 8006536:	9303      	str	r3, [sp, #12]
 8006538:	ab0a      	add	r3, sp, #40	; 0x28
 800653a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800653e:	ab09      	add	r3, sp, #36	; 0x24
 8006540:	ec49 8b10 	vmov	d0, r8, r9
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	6022      	str	r2, [r4, #0]
 8006548:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800654c:	4628      	mov	r0, r5
 800654e:	f7ff fecd 	bl	80062ec <__cvt>
 8006552:	9b06      	ldr	r3, [sp, #24]
 8006554:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006556:	2b47      	cmp	r3, #71	; 0x47
 8006558:	4680      	mov	r8, r0
 800655a:	d108      	bne.n	800656e <_printf_float+0x142>
 800655c:	1cc8      	adds	r0, r1, #3
 800655e:	db02      	blt.n	8006566 <_printf_float+0x13a>
 8006560:	6863      	ldr	r3, [r4, #4]
 8006562:	4299      	cmp	r1, r3
 8006564:	dd41      	ble.n	80065ea <_printf_float+0x1be>
 8006566:	f1ab 0b02 	sub.w	fp, fp, #2
 800656a:	fa5f fb8b 	uxtb.w	fp, fp
 800656e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006572:	d820      	bhi.n	80065b6 <_printf_float+0x18a>
 8006574:	3901      	subs	r1, #1
 8006576:	465a      	mov	r2, fp
 8006578:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800657c:	9109      	str	r1, [sp, #36]	; 0x24
 800657e:	f7ff ff17 	bl	80063b0 <__exponent>
 8006582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006584:	1813      	adds	r3, r2, r0
 8006586:	2a01      	cmp	r2, #1
 8006588:	4681      	mov	r9, r0
 800658a:	6123      	str	r3, [r4, #16]
 800658c:	dc02      	bgt.n	8006594 <_printf_float+0x168>
 800658e:	6822      	ldr	r2, [r4, #0]
 8006590:	07d2      	lsls	r2, r2, #31
 8006592:	d501      	bpl.n	8006598 <_printf_float+0x16c>
 8006594:	3301      	adds	r3, #1
 8006596:	6123      	str	r3, [r4, #16]
 8006598:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800659c:	2b00      	cmp	r3, #0
 800659e:	d09c      	beq.n	80064da <_printf_float+0xae>
 80065a0:	232d      	movs	r3, #45	; 0x2d
 80065a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065a6:	e798      	b.n	80064da <_printf_float+0xae>
 80065a8:	9a06      	ldr	r2, [sp, #24]
 80065aa:	2a47      	cmp	r2, #71	; 0x47
 80065ac:	d1be      	bne.n	800652c <_printf_float+0x100>
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1bc      	bne.n	800652c <_printf_float+0x100>
 80065b2:	2301      	movs	r3, #1
 80065b4:	e7b9      	b.n	800652a <_printf_float+0xfe>
 80065b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80065ba:	d118      	bne.n	80065ee <_printf_float+0x1c2>
 80065bc:	2900      	cmp	r1, #0
 80065be:	6863      	ldr	r3, [r4, #4]
 80065c0:	dd0b      	ble.n	80065da <_printf_float+0x1ae>
 80065c2:	6121      	str	r1, [r4, #16]
 80065c4:	b913      	cbnz	r3, 80065cc <_printf_float+0x1a0>
 80065c6:	6822      	ldr	r2, [r4, #0]
 80065c8:	07d0      	lsls	r0, r2, #31
 80065ca:	d502      	bpl.n	80065d2 <_printf_float+0x1a6>
 80065cc:	3301      	adds	r3, #1
 80065ce:	440b      	add	r3, r1
 80065d0:	6123      	str	r3, [r4, #16]
 80065d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80065d4:	f04f 0900 	mov.w	r9, #0
 80065d8:	e7de      	b.n	8006598 <_printf_float+0x16c>
 80065da:	b913      	cbnz	r3, 80065e2 <_printf_float+0x1b6>
 80065dc:	6822      	ldr	r2, [r4, #0]
 80065de:	07d2      	lsls	r2, r2, #31
 80065e0:	d501      	bpl.n	80065e6 <_printf_float+0x1ba>
 80065e2:	3302      	adds	r3, #2
 80065e4:	e7f4      	b.n	80065d0 <_printf_float+0x1a4>
 80065e6:	2301      	movs	r3, #1
 80065e8:	e7f2      	b.n	80065d0 <_printf_float+0x1a4>
 80065ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80065ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f0:	4299      	cmp	r1, r3
 80065f2:	db05      	blt.n	8006600 <_printf_float+0x1d4>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	6121      	str	r1, [r4, #16]
 80065f8:	07d8      	lsls	r0, r3, #31
 80065fa:	d5ea      	bpl.n	80065d2 <_printf_float+0x1a6>
 80065fc:	1c4b      	adds	r3, r1, #1
 80065fe:	e7e7      	b.n	80065d0 <_printf_float+0x1a4>
 8006600:	2900      	cmp	r1, #0
 8006602:	bfd4      	ite	le
 8006604:	f1c1 0202 	rsble	r2, r1, #2
 8006608:	2201      	movgt	r2, #1
 800660a:	4413      	add	r3, r2
 800660c:	e7e0      	b.n	80065d0 <_printf_float+0x1a4>
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	055a      	lsls	r2, r3, #21
 8006612:	d407      	bmi.n	8006624 <_printf_float+0x1f8>
 8006614:	6923      	ldr	r3, [r4, #16]
 8006616:	4642      	mov	r2, r8
 8006618:	4631      	mov	r1, r6
 800661a:	4628      	mov	r0, r5
 800661c:	47b8      	blx	r7
 800661e:	3001      	adds	r0, #1
 8006620:	d12c      	bne.n	800667c <_printf_float+0x250>
 8006622:	e764      	b.n	80064ee <_printf_float+0xc2>
 8006624:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006628:	f240 80e0 	bls.w	80067ec <_printf_float+0x3c0>
 800662c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006630:	2200      	movs	r2, #0
 8006632:	2300      	movs	r3, #0
 8006634:	f7fa faa8 	bl	8000b88 <__aeabi_dcmpeq>
 8006638:	2800      	cmp	r0, #0
 800663a:	d034      	beq.n	80066a6 <_printf_float+0x27a>
 800663c:	4a37      	ldr	r2, [pc, #220]	; (800671c <_printf_float+0x2f0>)
 800663e:	2301      	movs	r3, #1
 8006640:	4631      	mov	r1, r6
 8006642:	4628      	mov	r0, r5
 8006644:	47b8      	blx	r7
 8006646:	3001      	adds	r0, #1
 8006648:	f43f af51 	beq.w	80064ee <_printf_float+0xc2>
 800664c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006650:	429a      	cmp	r2, r3
 8006652:	db02      	blt.n	800665a <_printf_float+0x22e>
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	07d8      	lsls	r0, r3, #31
 8006658:	d510      	bpl.n	800667c <_printf_float+0x250>
 800665a:	ee18 3a10 	vmov	r3, s16
 800665e:	4652      	mov	r2, sl
 8006660:	4631      	mov	r1, r6
 8006662:	4628      	mov	r0, r5
 8006664:	47b8      	blx	r7
 8006666:	3001      	adds	r0, #1
 8006668:	f43f af41 	beq.w	80064ee <_printf_float+0xc2>
 800666c:	f04f 0800 	mov.w	r8, #0
 8006670:	f104 091a 	add.w	r9, r4, #26
 8006674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006676:	3b01      	subs	r3, #1
 8006678:	4543      	cmp	r3, r8
 800667a:	dc09      	bgt.n	8006690 <_printf_float+0x264>
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	079b      	lsls	r3, r3, #30
 8006680:	f100 8105 	bmi.w	800688e <_printf_float+0x462>
 8006684:	68e0      	ldr	r0, [r4, #12]
 8006686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006688:	4298      	cmp	r0, r3
 800668a:	bfb8      	it	lt
 800668c:	4618      	movlt	r0, r3
 800668e:	e730      	b.n	80064f2 <_printf_float+0xc6>
 8006690:	2301      	movs	r3, #1
 8006692:	464a      	mov	r2, r9
 8006694:	4631      	mov	r1, r6
 8006696:	4628      	mov	r0, r5
 8006698:	47b8      	blx	r7
 800669a:	3001      	adds	r0, #1
 800669c:	f43f af27 	beq.w	80064ee <_printf_float+0xc2>
 80066a0:	f108 0801 	add.w	r8, r8, #1
 80066a4:	e7e6      	b.n	8006674 <_printf_float+0x248>
 80066a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	dc39      	bgt.n	8006720 <_printf_float+0x2f4>
 80066ac:	4a1b      	ldr	r2, [pc, #108]	; (800671c <_printf_float+0x2f0>)
 80066ae:	2301      	movs	r3, #1
 80066b0:	4631      	mov	r1, r6
 80066b2:	4628      	mov	r0, r5
 80066b4:	47b8      	blx	r7
 80066b6:	3001      	adds	r0, #1
 80066b8:	f43f af19 	beq.w	80064ee <_printf_float+0xc2>
 80066bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066c0:	4313      	orrs	r3, r2
 80066c2:	d102      	bne.n	80066ca <_printf_float+0x29e>
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	07d9      	lsls	r1, r3, #31
 80066c8:	d5d8      	bpl.n	800667c <_printf_float+0x250>
 80066ca:	ee18 3a10 	vmov	r3, s16
 80066ce:	4652      	mov	r2, sl
 80066d0:	4631      	mov	r1, r6
 80066d2:	4628      	mov	r0, r5
 80066d4:	47b8      	blx	r7
 80066d6:	3001      	adds	r0, #1
 80066d8:	f43f af09 	beq.w	80064ee <_printf_float+0xc2>
 80066dc:	f04f 0900 	mov.w	r9, #0
 80066e0:	f104 0a1a 	add.w	sl, r4, #26
 80066e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e6:	425b      	negs	r3, r3
 80066e8:	454b      	cmp	r3, r9
 80066ea:	dc01      	bgt.n	80066f0 <_printf_float+0x2c4>
 80066ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ee:	e792      	b.n	8006616 <_printf_float+0x1ea>
 80066f0:	2301      	movs	r3, #1
 80066f2:	4652      	mov	r2, sl
 80066f4:	4631      	mov	r1, r6
 80066f6:	4628      	mov	r0, r5
 80066f8:	47b8      	blx	r7
 80066fa:	3001      	adds	r0, #1
 80066fc:	f43f aef7 	beq.w	80064ee <_printf_float+0xc2>
 8006700:	f109 0901 	add.w	r9, r9, #1
 8006704:	e7ee      	b.n	80066e4 <_printf_float+0x2b8>
 8006706:	bf00      	nop
 8006708:	7fefffff 	.word	0x7fefffff
 800670c:	0801c1dc 	.word	0x0801c1dc
 8006710:	0801c1e0 	.word	0x0801c1e0
 8006714:	0801c1e8 	.word	0x0801c1e8
 8006718:	0801c1e4 	.word	0x0801c1e4
 800671c:	0801c1ec 	.word	0x0801c1ec
 8006720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006722:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006724:	429a      	cmp	r2, r3
 8006726:	bfa8      	it	ge
 8006728:	461a      	movge	r2, r3
 800672a:	2a00      	cmp	r2, #0
 800672c:	4691      	mov	r9, r2
 800672e:	dc37      	bgt.n	80067a0 <_printf_float+0x374>
 8006730:	f04f 0b00 	mov.w	fp, #0
 8006734:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006738:	f104 021a 	add.w	r2, r4, #26
 800673c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800673e:	9305      	str	r3, [sp, #20]
 8006740:	eba3 0309 	sub.w	r3, r3, r9
 8006744:	455b      	cmp	r3, fp
 8006746:	dc33      	bgt.n	80067b0 <_printf_float+0x384>
 8006748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800674c:	429a      	cmp	r2, r3
 800674e:	db3b      	blt.n	80067c8 <_printf_float+0x39c>
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	07da      	lsls	r2, r3, #31
 8006754:	d438      	bmi.n	80067c8 <_printf_float+0x39c>
 8006756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006758:	9b05      	ldr	r3, [sp, #20]
 800675a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	eba2 0901 	sub.w	r9, r2, r1
 8006762:	4599      	cmp	r9, r3
 8006764:	bfa8      	it	ge
 8006766:	4699      	movge	r9, r3
 8006768:	f1b9 0f00 	cmp.w	r9, #0
 800676c:	dc35      	bgt.n	80067da <_printf_float+0x3ae>
 800676e:	f04f 0800 	mov.w	r8, #0
 8006772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006776:	f104 0a1a 	add.w	sl, r4, #26
 800677a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800677e:	1a9b      	subs	r3, r3, r2
 8006780:	eba3 0309 	sub.w	r3, r3, r9
 8006784:	4543      	cmp	r3, r8
 8006786:	f77f af79 	ble.w	800667c <_printf_float+0x250>
 800678a:	2301      	movs	r3, #1
 800678c:	4652      	mov	r2, sl
 800678e:	4631      	mov	r1, r6
 8006790:	4628      	mov	r0, r5
 8006792:	47b8      	blx	r7
 8006794:	3001      	adds	r0, #1
 8006796:	f43f aeaa 	beq.w	80064ee <_printf_float+0xc2>
 800679a:	f108 0801 	add.w	r8, r8, #1
 800679e:	e7ec      	b.n	800677a <_printf_float+0x34e>
 80067a0:	4613      	mov	r3, r2
 80067a2:	4631      	mov	r1, r6
 80067a4:	4642      	mov	r2, r8
 80067a6:	4628      	mov	r0, r5
 80067a8:	47b8      	blx	r7
 80067aa:	3001      	adds	r0, #1
 80067ac:	d1c0      	bne.n	8006730 <_printf_float+0x304>
 80067ae:	e69e      	b.n	80064ee <_printf_float+0xc2>
 80067b0:	2301      	movs	r3, #1
 80067b2:	4631      	mov	r1, r6
 80067b4:	4628      	mov	r0, r5
 80067b6:	9205      	str	r2, [sp, #20]
 80067b8:	47b8      	blx	r7
 80067ba:	3001      	adds	r0, #1
 80067bc:	f43f ae97 	beq.w	80064ee <_printf_float+0xc2>
 80067c0:	9a05      	ldr	r2, [sp, #20]
 80067c2:	f10b 0b01 	add.w	fp, fp, #1
 80067c6:	e7b9      	b.n	800673c <_printf_float+0x310>
 80067c8:	ee18 3a10 	vmov	r3, s16
 80067cc:	4652      	mov	r2, sl
 80067ce:	4631      	mov	r1, r6
 80067d0:	4628      	mov	r0, r5
 80067d2:	47b8      	blx	r7
 80067d4:	3001      	adds	r0, #1
 80067d6:	d1be      	bne.n	8006756 <_printf_float+0x32a>
 80067d8:	e689      	b.n	80064ee <_printf_float+0xc2>
 80067da:	9a05      	ldr	r2, [sp, #20]
 80067dc:	464b      	mov	r3, r9
 80067de:	4442      	add	r2, r8
 80067e0:	4631      	mov	r1, r6
 80067e2:	4628      	mov	r0, r5
 80067e4:	47b8      	blx	r7
 80067e6:	3001      	adds	r0, #1
 80067e8:	d1c1      	bne.n	800676e <_printf_float+0x342>
 80067ea:	e680      	b.n	80064ee <_printf_float+0xc2>
 80067ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ee:	2a01      	cmp	r2, #1
 80067f0:	dc01      	bgt.n	80067f6 <_printf_float+0x3ca>
 80067f2:	07db      	lsls	r3, r3, #31
 80067f4:	d538      	bpl.n	8006868 <_printf_float+0x43c>
 80067f6:	2301      	movs	r3, #1
 80067f8:	4642      	mov	r2, r8
 80067fa:	4631      	mov	r1, r6
 80067fc:	4628      	mov	r0, r5
 80067fe:	47b8      	blx	r7
 8006800:	3001      	adds	r0, #1
 8006802:	f43f ae74 	beq.w	80064ee <_printf_float+0xc2>
 8006806:	ee18 3a10 	vmov	r3, s16
 800680a:	4652      	mov	r2, sl
 800680c:	4631      	mov	r1, r6
 800680e:	4628      	mov	r0, r5
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	f43f ae6b 	beq.w	80064ee <_printf_float+0xc2>
 8006818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800681c:	2200      	movs	r2, #0
 800681e:	2300      	movs	r3, #0
 8006820:	f7fa f9b2 	bl	8000b88 <__aeabi_dcmpeq>
 8006824:	b9d8      	cbnz	r0, 800685e <_printf_float+0x432>
 8006826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006828:	f108 0201 	add.w	r2, r8, #1
 800682c:	3b01      	subs	r3, #1
 800682e:	4631      	mov	r1, r6
 8006830:	4628      	mov	r0, r5
 8006832:	47b8      	blx	r7
 8006834:	3001      	adds	r0, #1
 8006836:	d10e      	bne.n	8006856 <_printf_float+0x42a>
 8006838:	e659      	b.n	80064ee <_printf_float+0xc2>
 800683a:	2301      	movs	r3, #1
 800683c:	4652      	mov	r2, sl
 800683e:	4631      	mov	r1, r6
 8006840:	4628      	mov	r0, r5
 8006842:	47b8      	blx	r7
 8006844:	3001      	adds	r0, #1
 8006846:	f43f ae52 	beq.w	80064ee <_printf_float+0xc2>
 800684a:	f108 0801 	add.w	r8, r8, #1
 800684e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006850:	3b01      	subs	r3, #1
 8006852:	4543      	cmp	r3, r8
 8006854:	dcf1      	bgt.n	800683a <_printf_float+0x40e>
 8006856:	464b      	mov	r3, r9
 8006858:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800685c:	e6dc      	b.n	8006618 <_printf_float+0x1ec>
 800685e:	f04f 0800 	mov.w	r8, #0
 8006862:	f104 0a1a 	add.w	sl, r4, #26
 8006866:	e7f2      	b.n	800684e <_printf_float+0x422>
 8006868:	2301      	movs	r3, #1
 800686a:	4642      	mov	r2, r8
 800686c:	e7df      	b.n	800682e <_printf_float+0x402>
 800686e:	2301      	movs	r3, #1
 8006870:	464a      	mov	r2, r9
 8006872:	4631      	mov	r1, r6
 8006874:	4628      	mov	r0, r5
 8006876:	47b8      	blx	r7
 8006878:	3001      	adds	r0, #1
 800687a:	f43f ae38 	beq.w	80064ee <_printf_float+0xc2>
 800687e:	f108 0801 	add.w	r8, r8, #1
 8006882:	68e3      	ldr	r3, [r4, #12]
 8006884:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006886:	1a5b      	subs	r3, r3, r1
 8006888:	4543      	cmp	r3, r8
 800688a:	dcf0      	bgt.n	800686e <_printf_float+0x442>
 800688c:	e6fa      	b.n	8006684 <_printf_float+0x258>
 800688e:	f04f 0800 	mov.w	r8, #0
 8006892:	f104 0919 	add.w	r9, r4, #25
 8006896:	e7f4      	b.n	8006882 <_printf_float+0x456>

08006898 <_printf_common>:
 8006898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800689c:	4616      	mov	r6, r2
 800689e:	4699      	mov	r9, r3
 80068a0:	688a      	ldr	r2, [r1, #8]
 80068a2:	690b      	ldr	r3, [r1, #16]
 80068a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068a8:	4293      	cmp	r3, r2
 80068aa:	bfb8      	it	lt
 80068ac:	4613      	movlt	r3, r2
 80068ae:	6033      	str	r3, [r6, #0]
 80068b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068b4:	4607      	mov	r7, r0
 80068b6:	460c      	mov	r4, r1
 80068b8:	b10a      	cbz	r2, 80068be <_printf_common+0x26>
 80068ba:	3301      	adds	r3, #1
 80068bc:	6033      	str	r3, [r6, #0]
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	0699      	lsls	r1, r3, #26
 80068c2:	bf42      	ittt	mi
 80068c4:	6833      	ldrmi	r3, [r6, #0]
 80068c6:	3302      	addmi	r3, #2
 80068c8:	6033      	strmi	r3, [r6, #0]
 80068ca:	6825      	ldr	r5, [r4, #0]
 80068cc:	f015 0506 	ands.w	r5, r5, #6
 80068d0:	d106      	bne.n	80068e0 <_printf_common+0x48>
 80068d2:	f104 0a19 	add.w	sl, r4, #25
 80068d6:	68e3      	ldr	r3, [r4, #12]
 80068d8:	6832      	ldr	r2, [r6, #0]
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	42ab      	cmp	r3, r5
 80068de:	dc26      	bgt.n	800692e <_printf_common+0x96>
 80068e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068e4:	1e13      	subs	r3, r2, #0
 80068e6:	6822      	ldr	r2, [r4, #0]
 80068e8:	bf18      	it	ne
 80068ea:	2301      	movne	r3, #1
 80068ec:	0692      	lsls	r2, r2, #26
 80068ee:	d42b      	bmi.n	8006948 <_printf_common+0xb0>
 80068f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068f4:	4649      	mov	r1, r9
 80068f6:	4638      	mov	r0, r7
 80068f8:	47c0      	blx	r8
 80068fa:	3001      	adds	r0, #1
 80068fc:	d01e      	beq.n	800693c <_printf_common+0xa4>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	68e5      	ldr	r5, [r4, #12]
 8006902:	6832      	ldr	r2, [r6, #0]
 8006904:	f003 0306 	and.w	r3, r3, #6
 8006908:	2b04      	cmp	r3, #4
 800690a:	bf08      	it	eq
 800690c:	1aad      	subeq	r5, r5, r2
 800690e:	68a3      	ldr	r3, [r4, #8]
 8006910:	6922      	ldr	r2, [r4, #16]
 8006912:	bf0c      	ite	eq
 8006914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006918:	2500      	movne	r5, #0
 800691a:	4293      	cmp	r3, r2
 800691c:	bfc4      	itt	gt
 800691e:	1a9b      	subgt	r3, r3, r2
 8006920:	18ed      	addgt	r5, r5, r3
 8006922:	2600      	movs	r6, #0
 8006924:	341a      	adds	r4, #26
 8006926:	42b5      	cmp	r5, r6
 8006928:	d11a      	bne.n	8006960 <_printf_common+0xc8>
 800692a:	2000      	movs	r0, #0
 800692c:	e008      	b.n	8006940 <_printf_common+0xa8>
 800692e:	2301      	movs	r3, #1
 8006930:	4652      	mov	r2, sl
 8006932:	4649      	mov	r1, r9
 8006934:	4638      	mov	r0, r7
 8006936:	47c0      	blx	r8
 8006938:	3001      	adds	r0, #1
 800693a:	d103      	bne.n	8006944 <_printf_common+0xac>
 800693c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006944:	3501      	adds	r5, #1
 8006946:	e7c6      	b.n	80068d6 <_printf_common+0x3e>
 8006948:	18e1      	adds	r1, r4, r3
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	2030      	movs	r0, #48	; 0x30
 800694e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006952:	4422      	add	r2, r4
 8006954:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800695c:	3302      	adds	r3, #2
 800695e:	e7c7      	b.n	80068f0 <_printf_common+0x58>
 8006960:	2301      	movs	r3, #1
 8006962:	4622      	mov	r2, r4
 8006964:	4649      	mov	r1, r9
 8006966:	4638      	mov	r0, r7
 8006968:	47c0      	blx	r8
 800696a:	3001      	adds	r0, #1
 800696c:	d0e6      	beq.n	800693c <_printf_common+0xa4>
 800696e:	3601      	adds	r6, #1
 8006970:	e7d9      	b.n	8006926 <_printf_common+0x8e>
	...

08006974 <_printf_i>:
 8006974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	460c      	mov	r4, r1
 800697a:	4691      	mov	r9, r2
 800697c:	7e27      	ldrb	r7, [r4, #24]
 800697e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006980:	2f78      	cmp	r7, #120	; 0x78
 8006982:	4680      	mov	r8, r0
 8006984:	469a      	mov	sl, r3
 8006986:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800698a:	d807      	bhi.n	800699c <_printf_i+0x28>
 800698c:	2f62      	cmp	r7, #98	; 0x62
 800698e:	d80a      	bhi.n	80069a6 <_printf_i+0x32>
 8006990:	2f00      	cmp	r7, #0
 8006992:	f000 80d8 	beq.w	8006b46 <_printf_i+0x1d2>
 8006996:	2f58      	cmp	r7, #88	; 0x58
 8006998:	f000 80a3 	beq.w	8006ae2 <_printf_i+0x16e>
 800699c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069a4:	e03a      	b.n	8006a1c <_printf_i+0xa8>
 80069a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069aa:	2b15      	cmp	r3, #21
 80069ac:	d8f6      	bhi.n	800699c <_printf_i+0x28>
 80069ae:	a001      	add	r0, pc, #4	; (adr r0, 80069b4 <_printf_i+0x40>)
 80069b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80069b4:	08006a0d 	.word	0x08006a0d
 80069b8:	08006a21 	.word	0x08006a21
 80069bc:	0800699d 	.word	0x0800699d
 80069c0:	0800699d 	.word	0x0800699d
 80069c4:	0800699d 	.word	0x0800699d
 80069c8:	0800699d 	.word	0x0800699d
 80069cc:	08006a21 	.word	0x08006a21
 80069d0:	0800699d 	.word	0x0800699d
 80069d4:	0800699d 	.word	0x0800699d
 80069d8:	0800699d 	.word	0x0800699d
 80069dc:	0800699d 	.word	0x0800699d
 80069e0:	08006b2d 	.word	0x08006b2d
 80069e4:	08006a51 	.word	0x08006a51
 80069e8:	08006b0f 	.word	0x08006b0f
 80069ec:	0800699d 	.word	0x0800699d
 80069f0:	0800699d 	.word	0x0800699d
 80069f4:	08006b4f 	.word	0x08006b4f
 80069f8:	0800699d 	.word	0x0800699d
 80069fc:	08006a51 	.word	0x08006a51
 8006a00:	0800699d 	.word	0x0800699d
 8006a04:	0800699d 	.word	0x0800699d
 8006a08:	08006b17 	.word	0x08006b17
 8006a0c:	680b      	ldr	r3, [r1, #0]
 8006a0e:	1d1a      	adds	r2, r3, #4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	600a      	str	r2, [r1, #0]
 8006a14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e0a3      	b.n	8006b68 <_printf_i+0x1f4>
 8006a20:	6825      	ldr	r5, [r4, #0]
 8006a22:	6808      	ldr	r0, [r1, #0]
 8006a24:	062e      	lsls	r6, r5, #24
 8006a26:	f100 0304 	add.w	r3, r0, #4
 8006a2a:	d50a      	bpl.n	8006a42 <_printf_i+0xce>
 8006a2c:	6805      	ldr	r5, [r0, #0]
 8006a2e:	600b      	str	r3, [r1, #0]
 8006a30:	2d00      	cmp	r5, #0
 8006a32:	da03      	bge.n	8006a3c <_printf_i+0xc8>
 8006a34:	232d      	movs	r3, #45	; 0x2d
 8006a36:	426d      	negs	r5, r5
 8006a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a3c:	485e      	ldr	r0, [pc, #376]	; (8006bb8 <_printf_i+0x244>)
 8006a3e:	230a      	movs	r3, #10
 8006a40:	e019      	b.n	8006a76 <_printf_i+0x102>
 8006a42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006a46:	6805      	ldr	r5, [r0, #0]
 8006a48:	600b      	str	r3, [r1, #0]
 8006a4a:	bf18      	it	ne
 8006a4c:	b22d      	sxthne	r5, r5
 8006a4e:	e7ef      	b.n	8006a30 <_printf_i+0xbc>
 8006a50:	680b      	ldr	r3, [r1, #0]
 8006a52:	6825      	ldr	r5, [r4, #0]
 8006a54:	1d18      	adds	r0, r3, #4
 8006a56:	6008      	str	r0, [r1, #0]
 8006a58:	0628      	lsls	r0, r5, #24
 8006a5a:	d501      	bpl.n	8006a60 <_printf_i+0xec>
 8006a5c:	681d      	ldr	r5, [r3, #0]
 8006a5e:	e002      	b.n	8006a66 <_printf_i+0xf2>
 8006a60:	0669      	lsls	r1, r5, #25
 8006a62:	d5fb      	bpl.n	8006a5c <_printf_i+0xe8>
 8006a64:	881d      	ldrh	r5, [r3, #0]
 8006a66:	4854      	ldr	r0, [pc, #336]	; (8006bb8 <_printf_i+0x244>)
 8006a68:	2f6f      	cmp	r7, #111	; 0x6f
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2308      	moveq	r3, #8
 8006a6e:	230a      	movne	r3, #10
 8006a70:	2100      	movs	r1, #0
 8006a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a76:	6866      	ldr	r6, [r4, #4]
 8006a78:	60a6      	str	r6, [r4, #8]
 8006a7a:	2e00      	cmp	r6, #0
 8006a7c:	bfa2      	ittt	ge
 8006a7e:	6821      	ldrge	r1, [r4, #0]
 8006a80:	f021 0104 	bicge.w	r1, r1, #4
 8006a84:	6021      	strge	r1, [r4, #0]
 8006a86:	b90d      	cbnz	r5, 8006a8c <_printf_i+0x118>
 8006a88:	2e00      	cmp	r6, #0
 8006a8a:	d04d      	beq.n	8006b28 <_printf_i+0x1b4>
 8006a8c:	4616      	mov	r6, r2
 8006a8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a92:	fb03 5711 	mls	r7, r3, r1, r5
 8006a96:	5dc7      	ldrb	r7, [r0, r7]
 8006a98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a9c:	462f      	mov	r7, r5
 8006a9e:	42bb      	cmp	r3, r7
 8006aa0:	460d      	mov	r5, r1
 8006aa2:	d9f4      	bls.n	8006a8e <_printf_i+0x11a>
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d10b      	bne.n	8006ac0 <_printf_i+0x14c>
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	07df      	lsls	r7, r3, #31
 8006aac:	d508      	bpl.n	8006ac0 <_printf_i+0x14c>
 8006aae:	6923      	ldr	r3, [r4, #16]
 8006ab0:	6861      	ldr	r1, [r4, #4]
 8006ab2:	4299      	cmp	r1, r3
 8006ab4:	bfde      	ittt	le
 8006ab6:	2330      	movle	r3, #48	; 0x30
 8006ab8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006abc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006ac0:	1b92      	subs	r2, r2, r6
 8006ac2:	6122      	str	r2, [r4, #16]
 8006ac4:	f8cd a000 	str.w	sl, [sp]
 8006ac8:	464b      	mov	r3, r9
 8006aca:	aa03      	add	r2, sp, #12
 8006acc:	4621      	mov	r1, r4
 8006ace:	4640      	mov	r0, r8
 8006ad0:	f7ff fee2 	bl	8006898 <_printf_common>
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d14c      	bne.n	8006b72 <_printf_i+0x1fe>
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006adc:	b004      	add	sp, #16
 8006ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae2:	4835      	ldr	r0, [pc, #212]	; (8006bb8 <_printf_i+0x244>)
 8006ae4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	680e      	ldr	r6, [r1, #0]
 8006aec:	061f      	lsls	r7, r3, #24
 8006aee:	f856 5b04 	ldr.w	r5, [r6], #4
 8006af2:	600e      	str	r6, [r1, #0]
 8006af4:	d514      	bpl.n	8006b20 <_printf_i+0x1ac>
 8006af6:	07d9      	lsls	r1, r3, #31
 8006af8:	bf44      	itt	mi
 8006afa:	f043 0320 	orrmi.w	r3, r3, #32
 8006afe:	6023      	strmi	r3, [r4, #0]
 8006b00:	b91d      	cbnz	r5, 8006b0a <_printf_i+0x196>
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	f023 0320 	bic.w	r3, r3, #32
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	2310      	movs	r3, #16
 8006b0c:	e7b0      	b.n	8006a70 <_printf_i+0xfc>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	f043 0320 	orr.w	r3, r3, #32
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	2378      	movs	r3, #120	; 0x78
 8006b18:	4828      	ldr	r0, [pc, #160]	; (8006bbc <_printf_i+0x248>)
 8006b1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b1e:	e7e3      	b.n	8006ae8 <_printf_i+0x174>
 8006b20:	065e      	lsls	r6, r3, #25
 8006b22:	bf48      	it	mi
 8006b24:	b2ad      	uxthmi	r5, r5
 8006b26:	e7e6      	b.n	8006af6 <_printf_i+0x182>
 8006b28:	4616      	mov	r6, r2
 8006b2a:	e7bb      	b.n	8006aa4 <_printf_i+0x130>
 8006b2c:	680b      	ldr	r3, [r1, #0]
 8006b2e:	6826      	ldr	r6, [r4, #0]
 8006b30:	6960      	ldr	r0, [r4, #20]
 8006b32:	1d1d      	adds	r5, r3, #4
 8006b34:	600d      	str	r5, [r1, #0]
 8006b36:	0635      	lsls	r5, r6, #24
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	d501      	bpl.n	8006b40 <_printf_i+0x1cc>
 8006b3c:	6018      	str	r0, [r3, #0]
 8006b3e:	e002      	b.n	8006b46 <_printf_i+0x1d2>
 8006b40:	0671      	lsls	r1, r6, #25
 8006b42:	d5fb      	bpl.n	8006b3c <_printf_i+0x1c8>
 8006b44:	8018      	strh	r0, [r3, #0]
 8006b46:	2300      	movs	r3, #0
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	4616      	mov	r6, r2
 8006b4c:	e7ba      	b.n	8006ac4 <_printf_i+0x150>
 8006b4e:	680b      	ldr	r3, [r1, #0]
 8006b50:	1d1a      	adds	r2, r3, #4
 8006b52:	600a      	str	r2, [r1, #0]
 8006b54:	681e      	ldr	r6, [r3, #0]
 8006b56:	6862      	ldr	r2, [r4, #4]
 8006b58:	2100      	movs	r1, #0
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	f7f9 fba0 	bl	80002a0 <memchr>
 8006b60:	b108      	cbz	r0, 8006b66 <_printf_i+0x1f2>
 8006b62:	1b80      	subs	r0, r0, r6
 8006b64:	6060      	str	r0, [r4, #4]
 8006b66:	6863      	ldr	r3, [r4, #4]
 8006b68:	6123      	str	r3, [r4, #16]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b70:	e7a8      	b.n	8006ac4 <_printf_i+0x150>
 8006b72:	6923      	ldr	r3, [r4, #16]
 8006b74:	4632      	mov	r2, r6
 8006b76:	4649      	mov	r1, r9
 8006b78:	4640      	mov	r0, r8
 8006b7a:	47d0      	blx	sl
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d0ab      	beq.n	8006ad8 <_printf_i+0x164>
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	079b      	lsls	r3, r3, #30
 8006b84:	d413      	bmi.n	8006bae <_printf_i+0x23a>
 8006b86:	68e0      	ldr	r0, [r4, #12]
 8006b88:	9b03      	ldr	r3, [sp, #12]
 8006b8a:	4298      	cmp	r0, r3
 8006b8c:	bfb8      	it	lt
 8006b8e:	4618      	movlt	r0, r3
 8006b90:	e7a4      	b.n	8006adc <_printf_i+0x168>
 8006b92:	2301      	movs	r3, #1
 8006b94:	4632      	mov	r2, r6
 8006b96:	4649      	mov	r1, r9
 8006b98:	4640      	mov	r0, r8
 8006b9a:	47d0      	blx	sl
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d09b      	beq.n	8006ad8 <_printf_i+0x164>
 8006ba0:	3501      	adds	r5, #1
 8006ba2:	68e3      	ldr	r3, [r4, #12]
 8006ba4:	9903      	ldr	r1, [sp, #12]
 8006ba6:	1a5b      	subs	r3, r3, r1
 8006ba8:	42ab      	cmp	r3, r5
 8006baa:	dcf2      	bgt.n	8006b92 <_printf_i+0x21e>
 8006bac:	e7eb      	b.n	8006b86 <_printf_i+0x212>
 8006bae:	2500      	movs	r5, #0
 8006bb0:	f104 0619 	add.w	r6, r4, #25
 8006bb4:	e7f5      	b.n	8006ba2 <_printf_i+0x22e>
 8006bb6:	bf00      	nop
 8006bb8:	0801c1ee 	.word	0x0801c1ee
 8006bbc:	0801c1ff 	.word	0x0801c1ff

08006bc0 <iprintf>:
 8006bc0:	b40f      	push	{r0, r1, r2, r3}
 8006bc2:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <iprintf+0x2c>)
 8006bc4:	b513      	push	{r0, r1, r4, lr}
 8006bc6:	681c      	ldr	r4, [r3, #0]
 8006bc8:	b124      	cbz	r4, 8006bd4 <iprintf+0x14>
 8006bca:	69a3      	ldr	r3, [r4, #24]
 8006bcc:	b913      	cbnz	r3, 8006bd4 <iprintf+0x14>
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f001 f860 	bl	8007c94 <__sinit>
 8006bd4:	ab05      	add	r3, sp, #20
 8006bd6:	9a04      	ldr	r2, [sp, #16]
 8006bd8:	68a1      	ldr	r1, [r4, #8]
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f001 fddb 	bl	8008798 <_vfiprintf_r>
 8006be2:	b002      	add	sp, #8
 8006be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be8:	b004      	add	sp, #16
 8006bea:	4770      	bx	lr
 8006bec:	20000074 	.word	0x20000074

08006bf0 <__swbuf_r>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	460e      	mov	r6, r1
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	b118      	cbz	r0, 8006c02 <__swbuf_r+0x12>
 8006bfa:	6983      	ldr	r3, [r0, #24]
 8006bfc:	b90b      	cbnz	r3, 8006c02 <__swbuf_r+0x12>
 8006bfe:	f001 f849 	bl	8007c94 <__sinit>
 8006c02:	4b21      	ldr	r3, [pc, #132]	; (8006c88 <__swbuf_r+0x98>)
 8006c04:	429c      	cmp	r4, r3
 8006c06:	d12b      	bne.n	8006c60 <__swbuf_r+0x70>
 8006c08:	686c      	ldr	r4, [r5, #4]
 8006c0a:	69a3      	ldr	r3, [r4, #24]
 8006c0c:	60a3      	str	r3, [r4, #8]
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	071a      	lsls	r2, r3, #28
 8006c12:	d52f      	bpl.n	8006c74 <__swbuf_r+0x84>
 8006c14:	6923      	ldr	r3, [r4, #16]
 8006c16:	b36b      	cbz	r3, 8006c74 <__swbuf_r+0x84>
 8006c18:	6923      	ldr	r3, [r4, #16]
 8006c1a:	6820      	ldr	r0, [r4, #0]
 8006c1c:	1ac0      	subs	r0, r0, r3
 8006c1e:	6963      	ldr	r3, [r4, #20]
 8006c20:	b2f6      	uxtb	r6, r6
 8006c22:	4283      	cmp	r3, r0
 8006c24:	4637      	mov	r7, r6
 8006c26:	dc04      	bgt.n	8006c32 <__swbuf_r+0x42>
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f000 ff9e 	bl	8007b6c <_fflush_r>
 8006c30:	bb30      	cbnz	r0, 8006c80 <__swbuf_r+0x90>
 8006c32:	68a3      	ldr	r3, [r4, #8]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	60a3      	str	r3, [r4, #8]
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	6022      	str	r2, [r4, #0]
 8006c3e:	701e      	strb	r6, [r3, #0]
 8006c40:	6963      	ldr	r3, [r4, #20]
 8006c42:	3001      	adds	r0, #1
 8006c44:	4283      	cmp	r3, r0
 8006c46:	d004      	beq.n	8006c52 <__swbuf_r+0x62>
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	07db      	lsls	r3, r3, #31
 8006c4c:	d506      	bpl.n	8006c5c <__swbuf_r+0x6c>
 8006c4e:	2e0a      	cmp	r6, #10
 8006c50:	d104      	bne.n	8006c5c <__swbuf_r+0x6c>
 8006c52:	4621      	mov	r1, r4
 8006c54:	4628      	mov	r0, r5
 8006c56:	f000 ff89 	bl	8007b6c <_fflush_r>
 8006c5a:	b988      	cbnz	r0, 8006c80 <__swbuf_r+0x90>
 8006c5c:	4638      	mov	r0, r7
 8006c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c60:	4b0a      	ldr	r3, [pc, #40]	; (8006c8c <__swbuf_r+0x9c>)
 8006c62:	429c      	cmp	r4, r3
 8006c64:	d101      	bne.n	8006c6a <__swbuf_r+0x7a>
 8006c66:	68ac      	ldr	r4, [r5, #8]
 8006c68:	e7cf      	b.n	8006c0a <__swbuf_r+0x1a>
 8006c6a:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <__swbuf_r+0xa0>)
 8006c6c:	429c      	cmp	r4, r3
 8006c6e:	bf08      	it	eq
 8006c70:	68ec      	ldreq	r4, [r5, #12]
 8006c72:	e7ca      	b.n	8006c0a <__swbuf_r+0x1a>
 8006c74:	4621      	mov	r1, r4
 8006c76:	4628      	mov	r0, r5
 8006c78:	f000 f80c 	bl	8006c94 <__swsetup_r>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d0cb      	beq.n	8006c18 <__swbuf_r+0x28>
 8006c80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006c84:	e7ea      	b.n	8006c5c <__swbuf_r+0x6c>
 8006c86:	bf00      	nop
 8006c88:	0801c2c4 	.word	0x0801c2c4
 8006c8c:	0801c2e4 	.word	0x0801c2e4
 8006c90:	0801c2a4 	.word	0x0801c2a4

08006c94 <__swsetup_r>:
 8006c94:	4b32      	ldr	r3, [pc, #200]	; (8006d60 <__swsetup_r+0xcc>)
 8006c96:	b570      	push	{r4, r5, r6, lr}
 8006c98:	681d      	ldr	r5, [r3, #0]
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	460c      	mov	r4, r1
 8006c9e:	b125      	cbz	r5, 8006caa <__swsetup_r+0x16>
 8006ca0:	69ab      	ldr	r3, [r5, #24]
 8006ca2:	b913      	cbnz	r3, 8006caa <__swsetup_r+0x16>
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f000 fff5 	bl	8007c94 <__sinit>
 8006caa:	4b2e      	ldr	r3, [pc, #184]	; (8006d64 <__swsetup_r+0xd0>)
 8006cac:	429c      	cmp	r4, r3
 8006cae:	d10f      	bne.n	8006cd0 <__swsetup_r+0x3c>
 8006cb0:	686c      	ldr	r4, [r5, #4]
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cb8:	0719      	lsls	r1, r3, #28
 8006cba:	d42c      	bmi.n	8006d16 <__swsetup_r+0x82>
 8006cbc:	06dd      	lsls	r5, r3, #27
 8006cbe:	d411      	bmi.n	8006ce4 <__swsetup_r+0x50>
 8006cc0:	2309      	movs	r3, #9
 8006cc2:	6033      	str	r3, [r6, #0]
 8006cc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cc8:	81a3      	strh	r3, [r4, #12]
 8006cca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cce:	e03e      	b.n	8006d4e <__swsetup_r+0xba>
 8006cd0:	4b25      	ldr	r3, [pc, #148]	; (8006d68 <__swsetup_r+0xd4>)
 8006cd2:	429c      	cmp	r4, r3
 8006cd4:	d101      	bne.n	8006cda <__swsetup_r+0x46>
 8006cd6:	68ac      	ldr	r4, [r5, #8]
 8006cd8:	e7eb      	b.n	8006cb2 <__swsetup_r+0x1e>
 8006cda:	4b24      	ldr	r3, [pc, #144]	; (8006d6c <__swsetup_r+0xd8>)
 8006cdc:	429c      	cmp	r4, r3
 8006cde:	bf08      	it	eq
 8006ce0:	68ec      	ldreq	r4, [r5, #12]
 8006ce2:	e7e6      	b.n	8006cb2 <__swsetup_r+0x1e>
 8006ce4:	0758      	lsls	r0, r3, #29
 8006ce6:	d512      	bpl.n	8006d0e <__swsetup_r+0x7a>
 8006ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cea:	b141      	cbz	r1, 8006cfe <__swsetup_r+0x6a>
 8006cec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cf0:	4299      	cmp	r1, r3
 8006cf2:	d002      	beq.n	8006cfa <__swsetup_r+0x66>
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f001 fc7b 	bl	80085f0 <_free_r>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	6363      	str	r3, [r4, #52]	; 0x34
 8006cfe:	89a3      	ldrh	r3, [r4, #12]
 8006d00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d04:	81a3      	strh	r3, [r4, #12]
 8006d06:	2300      	movs	r3, #0
 8006d08:	6063      	str	r3, [r4, #4]
 8006d0a:	6923      	ldr	r3, [r4, #16]
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	f043 0308 	orr.w	r3, r3, #8
 8006d14:	81a3      	strh	r3, [r4, #12]
 8006d16:	6923      	ldr	r3, [r4, #16]
 8006d18:	b94b      	cbnz	r3, 8006d2e <__swsetup_r+0x9a>
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d24:	d003      	beq.n	8006d2e <__swsetup_r+0x9a>
 8006d26:	4621      	mov	r1, r4
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f001 f87d 	bl	8007e28 <__smakebuf_r>
 8006d2e:	89a0      	ldrh	r0, [r4, #12]
 8006d30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d34:	f010 0301 	ands.w	r3, r0, #1
 8006d38:	d00a      	beq.n	8006d50 <__swsetup_r+0xbc>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60a3      	str	r3, [r4, #8]
 8006d3e:	6963      	ldr	r3, [r4, #20]
 8006d40:	425b      	negs	r3, r3
 8006d42:	61a3      	str	r3, [r4, #24]
 8006d44:	6923      	ldr	r3, [r4, #16]
 8006d46:	b943      	cbnz	r3, 8006d5a <__swsetup_r+0xc6>
 8006d48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d4c:	d1ba      	bne.n	8006cc4 <__swsetup_r+0x30>
 8006d4e:	bd70      	pop	{r4, r5, r6, pc}
 8006d50:	0781      	lsls	r1, r0, #30
 8006d52:	bf58      	it	pl
 8006d54:	6963      	ldrpl	r3, [r4, #20]
 8006d56:	60a3      	str	r3, [r4, #8]
 8006d58:	e7f4      	b.n	8006d44 <__swsetup_r+0xb0>
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	e7f7      	b.n	8006d4e <__swsetup_r+0xba>
 8006d5e:	bf00      	nop
 8006d60:	20000074 	.word	0x20000074
 8006d64:	0801c2c4 	.word	0x0801c2c4
 8006d68:	0801c2e4 	.word	0x0801c2e4
 8006d6c:	0801c2a4 	.word	0x0801c2a4

08006d70 <quorem>:
 8006d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d74:	6903      	ldr	r3, [r0, #16]
 8006d76:	690c      	ldr	r4, [r1, #16]
 8006d78:	42a3      	cmp	r3, r4
 8006d7a:	4607      	mov	r7, r0
 8006d7c:	f2c0 8081 	blt.w	8006e82 <quorem+0x112>
 8006d80:	3c01      	subs	r4, #1
 8006d82:	f101 0814 	add.w	r8, r1, #20
 8006d86:	f100 0514 	add.w	r5, r0, #20
 8006d8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d8e:	9301      	str	r3, [sp, #4]
 8006d90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006da0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006da4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006da8:	d331      	bcc.n	8006e0e <quorem+0x9e>
 8006daa:	f04f 0e00 	mov.w	lr, #0
 8006dae:	4640      	mov	r0, r8
 8006db0:	46ac      	mov	ip, r5
 8006db2:	46f2      	mov	sl, lr
 8006db4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006db8:	b293      	uxth	r3, r2
 8006dba:	fb06 e303 	mla	r3, r6, r3, lr
 8006dbe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	ebaa 0303 	sub.w	r3, sl, r3
 8006dc8:	0c12      	lsrs	r2, r2, #16
 8006dca:	f8dc a000 	ldr.w	sl, [ip]
 8006dce:	fb06 e202 	mla	r2, r6, r2, lr
 8006dd2:	fa13 f38a 	uxtah	r3, r3, sl
 8006dd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006dda:	fa1f fa82 	uxth.w	sl, r2
 8006dde:	f8dc 2000 	ldr.w	r2, [ip]
 8006de2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006de6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006df0:	4581      	cmp	r9, r0
 8006df2:	f84c 3b04 	str.w	r3, [ip], #4
 8006df6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006dfa:	d2db      	bcs.n	8006db4 <quorem+0x44>
 8006dfc:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e00:	b92b      	cbnz	r3, 8006e0e <quorem+0x9e>
 8006e02:	9b01      	ldr	r3, [sp, #4]
 8006e04:	3b04      	subs	r3, #4
 8006e06:	429d      	cmp	r5, r3
 8006e08:	461a      	mov	r2, r3
 8006e0a:	d32e      	bcc.n	8006e6a <quorem+0xfa>
 8006e0c:	613c      	str	r4, [r7, #16]
 8006e0e:	4638      	mov	r0, r7
 8006e10:	f001 fade 	bl	80083d0 <__mcmp>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	db24      	blt.n	8006e62 <quorem+0xf2>
 8006e18:	3601      	adds	r6, #1
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	f04f 0c00 	mov.w	ip, #0
 8006e20:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e24:	f8d0 e000 	ldr.w	lr, [r0]
 8006e28:	b293      	uxth	r3, r2
 8006e2a:	ebac 0303 	sub.w	r3, ip, r3
 8006e2e:	0c12      	lsrs	r2, r2, #16
 8006e30:	fa13 f38e 	uxtah	r3, r3, lr
 8006e34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e42:	45c1      	cmp	r9, r8
 8006e44:	f840 3b04 	str.w	r3, [r0], #4
 8006e48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e4c:	d2e8      	bcs.n	8006e20 <quorem+0xb0>
 8006e4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e56:	b922      	cbnz	r2, 8006e62 <quorem+0xf2>
 8006e58:	3b04      	subs	r3, #4
 8006e5a:	429d      	cmp	r5, r3
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	d30a      	bcc.n	8006e76 <quorem+0x106>
 8006e60:	613c      	str	r4, [r7, #16]
 8006e62:	4630      	mov	r0, r6
 8006e64:	b003      	add	sp, #12
 8006e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	3b04      	subs	r3, #4
 8006e6e:	2a00      	cmp	r2, #0
 8006e70:	d1cc      	bne.n	8006e0c <quorem+0x9c>
 8006e72:	3c01      	subs	r4, #1
 8006e74:	e7c7      	b.n	8006e06 <quorem+0x96>
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	3b04      	subs	r3, #4
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	d1f0      	bne.n	8006e60 <quorem+0xf0>
 8006e7e:	3c01      	subs	r4, #1
 8006e80:	e7eb      	b.n	8006e5a <quorem+0xea>
 8006e82:	2000      	movs	r0, #0
 8006e84:	e7ee      	b.n	8006e64 <quorem+0xf4>
	...

08006e88 <_dtoa_r>:
 8006e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8c:	ed2d 8b02 	vpush	{d8}
 8006e90:	ec57 6b10 	vmov	r6, r7, d0
 8006e94:	b095      	sub	sp, #84	; 0x54
 8006e96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e9c:	9105      	str	r1, [sp, #20]
 8006e9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ea8:	b975      	cbnz	r5, 8006ec8 <_dtoa_r+0x40>
 8006eaa:	2010      	movs	r0, #16
 8006eac:	f000 fffc 	bl	8007ea8 <malloc>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	6260      	str	r0, [r4, #36]	; 0x24
 8006eb4:	b920      	cbnz	r0, 8006ec0 <_dtoa_r+0x38>
 8006eb6:	4bb2      	ldr	r3, [pc, #712]	; (8007180 <_dtoa_r+0x2f8>)
 8006eb8:	21ea      	movs	r1, #234	; 0xea
 8006eba:	48b2      	ldr	r0, [pc, #712]	; (8007184 <_dtoa_r+0x2fc>)
 8006ebc:	f001 fe02 	bl	8008ac4 <__assert_func>
 8006ec0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ec4:	6005      	str	r5, [r0, #0]
 8006ec6:	60c5      	str	r5, [r0, #12]
 8006ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eca:	6819      	ldr	r1, [r3, #0]
 8006ecc:	b151      	cbz	r1, 8006ee4 <_dtoa_r+0x5c>
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	604a      	str	r2, [r1, #4]
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	4093      	lsls	r3, r2
 8006ed6:	608b      	str	r3, [r1, #8]
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f001 f83b 	bl	8007f54 <_Bfree>
 8006ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	1e3b      	subs	r3, r7, #0
 8006ee6:	bfb9      	ittee	lt
 8006ee8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006eec:	9303      	strlt	r3, [sp, #12]
 8006eee:	2300      	movge	r3, #0
 8006ef0:	f8c8 3000 	strge.w	r3, [r8]
 8006ef4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006ef8:	4ba3      	ldr	r3, [pc, #652]	; (8007188 <_dtoa_r+0x300>)
 8006efa:	bfbc      	itt	lt
 8006efc:	2201      	movlt	r2, #1
 8006efe:	f8c8 2000 	strlt.w	r2, [r8]
 8006f02:	ea33 0309 	bics.w	r3, r3, r9
 8006f06:	d11b      	bne.n	8006f40 <_dtoa_r+0xb8>
 8006f08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f14:	4333      	orrs	r3, r6
 8006f16:	f000 857a 	beq.w	8007a0e <_dtoa_r+0xb86>
 8006f1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f1c:	b963      	cbnz	r3, 8006f38 <_dtoa_r+0xb0>
 8006f1e:	4b9b      	ldr	r3, [pc, #620]	; (800718c <_dtoa_r+0x304>)
 8006f20:	e024      	b.n	8006f6c <_dtoa_r+0xe4>
 8006f22:	4b9b      	ldr	r3, [pc, #620]	; (8007190 <_dtoa_r+0x308>)
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	3308      	adds	r3, #8
 8006f28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	9800      	ldr	r0, [sp, #0]
 8006f2e:	b015      	add	sp, #84	; 0x54
 8006f30:	ecbd 8b02 	vpop	{d8}
 8006f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f38:	4b94      	ldr	r3, [pc, #592]	; (800718c <_dtoa_r+0x304>)
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	3303      	adds	r3, #3
 8006f3e:	e7f3      	b.n	8006f28 <_dtoa_r+0xa0>
 8006f40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f44:	2200      	movs	r2, #0
 8006f46:	ec51 0b17 	vmov	r0, r1, d7
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006f50:	f7f9 fe1a 	bl	8000b88 <__aeabi_dcmpeq>
 8006f54:	4680      	mov	r8, r0
 8006f56:	b158      	cbz	r0, 8006f70 <_dtoa_r+0xe8>
 8006f58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 8551 	beq.w	8007a08 <_dtoa_r+0xb80>
 8006f66:	488b      	ldr	r0, [pc, #556]	; (8007194 <_dtoa_r+0x30c>)
 8006f68:	6018      	str	r0, [r3, #0]
 8006f6a:	1e43      	subs	r3, r0, #1
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	e7dd      	b.n	8006f2c <_dtoa_r+0xa4>
 8006f70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006f74:	aa12      	add	r2, sp, #72	; 0x48
 8006f76:	a913      	add	r1, sp, #76	; 0x4c
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f001 facd 	bl	8008518 <__d2b>
 8006f7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f82:	4683      	mov	fp, r0
 8006f84:	2d00      	cmp	r5, #0
 8006f86:	d07c      	beq.n	8007082 <_dtoa_r+0x1fa>
 8006f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f8a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006f8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f92:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006f96:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006f9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006f9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006fa2:	4b7d      	ldr	r3, [pc, #500]	; (8007198 <_dtoa_r+0x310>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	4639      	mov	r1, r7
 8006faa:	f7f9 f9cd 	bl	8000348 <__aeabi_dsub>
 8006fae:	a36e      	add	r3, pc, #440	; (adr r3, 8007168 <_dtoa_r+0x2e0>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f7f9 fb80 	bl	80006b8 <__aeabi_dmul>
 8006fb8:	a36d      	add	r3, pc, #436	; (adr r3, 8007170 <_dtoa_r+0x2e8>)
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	f7f9 f9c5 	bl	800034c <__adddf3>
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	460f      	mov	r7, r1
 8006fc8:	f7f9 fb0c 	bl	80005e4 <__aeabi_i2d>
 8006fcc:	a36a      	add	r3, pc, #424	; (adr r3, 8007178 <_dtoa_r+0x2f0>)
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	f7f9 fb71 	bl	80006b8 <__aeabi_dmul>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4630      	mov	r0, r6
 8006fdc:	4639      	mov	r1, r7
 8006fde:	f7f9 f9b5 	bl	800034c <__adddf3>
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	460f      	mov	r7, r1
 8006fe6:	f7f9 fe17 	bl	8000c18 <__aeabi_d2iz>
 8006fea:	2200      	movs	r2, #0
 8006fec:	4682      	mov	sl, r0
 8006fee:	2300      	movs	r3, #0
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	4639      	mov	r1, r7
 8006ff4:	f7f9 fdd2 	bl	8000b9c <__aeabi_dcmplt>
 8006ff8:	b148      	cbz	r0, 800700e <_dtoa_r+0x186>
 8006ffa:	4650      	mov	r0, sl
 8006ffc:	f7f9 faf2 	bl	80005e4 <__aeabi_i2d>
 8007000:	4632      	mov	r2, r6
 8007002:	463b      	mov	r3, r7
 8007004:	f7f9 fdc0 	bl	8000b88 <__aeabi_dcmpeq>
 8007008:	b908      	cbnz	r0, 800700e <_dtoa_r+0x186>
 800700a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800700e:	f1ba 0f16 	cmp.w	sl, #22
 8007012:	d854      	bhi.n	80070be <_dtoa_r+0x236>
 8007014:	4b61      	ldr	r3, [pc, #388]	; (800719c <_dtoa_r+0x314>)
 8007016:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007022:	f7f9 fdbb 	bl	8000b9c <__aeabi_dcmplt>
 8007026:	2800      	cmp	r0, #0
 8007028:	d04b      	beq.n	80070c2 <_dtoa_r+0x23a>
 800702a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800702e:	2300      	movs	r3, #0
 8007030:	930e      	str	r3, [sp, #56]	; 0x38
 8007032:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007034:	1b5d      	subs	r5, r3, r5
 8007036:	1e6b      	subs	r3, r5, #1
 8007038:	9304      	str	r3, [sp, #16]
 800703a:	bf43      	ittte	mi
 800703c:	2300      	movmi	r3, #0
 800703e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007042:	9304      	strmi	r3, [sp, #16]
 8007044:	f04f 0800 	movpl.w	r8, #0
 8007048:	f1ba 0f00 	cmp.w	sl, #0
 800704c:	db3b      	blt.n	80070c6 <_dtoa_r+0x23e>
 800704e:	9b04      	ldr	r3, [sp, #16]
 8007050:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007054:	4453      	add	r3, sl
 8007056:	9304      	str	r3, [sp, #16]
 8007058:	2300      	movs	r3, #0
 800705a:	9306      	str	r3, [sp, #24]
 800705c:	9b05      	ldr	r3, [sp, #20]
 800705e:	2b09      	cmp	r3, #9
 8007060:	d869      	bhi.n	8007136 <_dtoa_r+0x2ae>
 8007062:	2b05      	cmp	r3, #5
 8007064:	bfc4      	itt	gt
 8007066:	3b04      	subgt	r3, #4
 8007068:	9305      	strgt	r3, [sp, #20]
 800706a:	9b05      	ldr	r3, [sp, #20]
 800706c:	f1a3 0302 	sub.w	r3, r3, #2
 8007070:	bfcc      	ite	gt
 8007072:	2500      	movgt	r5, #0
 8007074:	2501      	movle	r5, #1
 8007076:	2b03      	cmp	r3, #3
 8007078:	d869      	bhi.n	800714e <_dtoa_r+0x2c6>
 800707a:	e8df f003 	tbb	[pc, r3]
 800707e:	4e2c      	.short	0x4e2c
 8007080:	5a4c      	.short	0x5a4c
 8007082:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007086:	441d      	add	r5, r3
 8007088:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800708c:	2b20      	cmp	r3, #32
 800708e:	bfc1      	itttt	gt
 8007090:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007094:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007098:	fa09 f303 	lslgt.w	r3, r9, r3
 800709c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80070a0:	bfda      	itte	le
 80070a2:	f1c3 0320 	rsble	r3, r3, #32
 80070a6:	fa06 f003 	lslle.w	r0, r6, r3
 80070aa:	4318      	orrgt	r0, r3
 80070ac:	f7f9 fa8a 	bl	80005c4 <__aeabi_ui2d>
 80070b0:	2301      	movs	r3, #1
 80070b2:	4606      	mov	r6, r0
 80070b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80070b8:	3d01      	subs	r5, #1
 80070ba:	9310      	str	r3, [sp, #64]	; 0x40
 80070bc:	e771      	b.n	8006fa2 <_dtoa_r+0x11a>
 80070be:	2301      	movs	r3, #1
 80070c0:	e7b6      	b.n	8007030 <_dtoa_r+0x1a8>
 80070c2:	900e      	str	r0, [sp, #56]	; 0x38
 80070c4:	e7b5      	b.n	8007032 <_dtoa_r+0x1aa>
 80070c6:	f1ca 0300 	rsb	r3, sl, #0
 80070ca:	9306      	str	r3, [sp, #24]
 80070cc:	2300      	movs	r3, #0
 80070ce:	eba8 080a 	sub.w	r8, r8, sl
 80070d2:	930d      	str	r3, [sp, #52]	; 0x34
 80070d4:	e7c2      	b.n	800705c <_dtoa_r+0x1d4>
 80070d6:	2300      	movs	r3, #0
 80070d8:	9308      	str	r3, [sp, #32]
 80070da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070dc:	2b00      	cmp	r3, #0
 80070de:	dc39      	bgt.n	8007154 <_dtoa_r+0x2cc>
 80070e0:	f04f 0901 	mov.w	r9, #1
 80070e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80070e8:	464b      	mov	r3, r9
 80070ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80070ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80070f0:	2200      	movs	r2, #0
 80070f2:	6042      	str	r2, [r0, #4]
 80070f4:	2204      	movs	r2, #4
 80070f6:	f102 0614 	add.w	r6, r2, #20
 80070fa:	429e      	cmp	r6, r3
 80070fc:	6841      	ldr	r1, [r0, #4]
 80070fe:	d92f      	bls.n	8007160 <_dtoa_r+0x2d8>
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fee7 	bl	8007ed4 <_Balloc>
 8007106:	9000      	str	r0, [sp, #0]
 8007108:	2800      	cmp	r0, #0
 800710a:	d14b      	bne.n	80071a4 <_dtoa_r+0x31c>
 800710c:	4b24      	ldr	r3, [pc, #144]	; (80071a0 <_dtoa_r+0x318>)
 800710e:	4602      	mov	r2, r0
 8007110:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007114:	e6d1      	b.n	8006eba <_dtoa_r+0x32>
 8007116:	2301      	movs	r3, #1
 8007118:	e7de      	b.n	80070d8 <_dtoa_r+0x250>
 800711a:	2300      	movs	r3, #0
 800711c:	9308      	str	r3, [sp, #32]
 800711e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007120:	eb0a 0903 	add.w	r9, sl, r3
 8007124:	f109 0301 	add.w	r3, r9, #1
 8007128:	2b01      	cmp	r3, #1
 800712a:	9301      	str	r3, [sp, #4]
 800712c:	bfb8      	it	lt
 800712e:	2301      	movlt	r3, #1
 8007130:	e7dd      	b.n	80070ee <_dtoa_r+0x266>
 8007132:	2301      	movs	r3, #1
 8007134:	e7f2      	b.n	800711c <_dtoa_r+0x294>
 8007136:	2501      	movs	r5, #1
 8007138:	2300      	movs	r3, #0
 800713a:	9305      	str	r3, [sp, #20]
 800713c:	9508      	str	r5, [sp, #32]
 800713e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007142:	2200      	movs	r2, #0
 8007144:	f8cd 9004 	str.w	r9, [sp, #4]
 8007148:	2312      	movs	r3, #18
 800714a:	9209      	str	r2, [sp, #36]	; 0x24
 800714c:	e7cf      	b.n	80070ee <_dtoa_r+0x266>
 800714e:	2301      	movs	r3, #1
 8007150:	9308      	str	r3, [sp, #32]
 8007152:	e7f4      	b.n	800713e <_dtoa_r+0x2b6>
 8007154:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007158:	f8cd 9004 	str.w	r9, [sp, #4]
 800715c:	464b      	mov	r3, r9
 800715e:	e7c6      	b.n	80070ee <_dtoa_r+0x266>
 8007160:	3101      	adds	r1, #1
 8007162:	6041      	str	r1, [r0, #4]
 8007164:	0052      	lsls	r2, r2, #1
 8007166:	e7c6      	b.n	80070f6 <_dtoa_r+0x26e>
 8007168:	636f4361 	.word	0x636f4361
 800716c:	3fd287a7 	.word	0x3fd287a7
 8007170:	8b60c8b3 	.word	0x8b60c8b3
 8007174:	3fc68a28 	.word	0x3fc68a28
 8007178:	509f79fb 	.word	0x509f79fb
 800717c:	3fd34413 	.word	0x3fd34413
 8007180:	0801c21d 	.word	0x0801c21d
 8007184:	0801c234 	.word	0x0801c234
 8007188:	7ff00000 	.word	0x7ff00000
 800718c:	0801c219 	.word	0x0801c219
 8007190:	0801c210 	.word	0x0801c210
 8007194:	0801c1ed 	.word	0x0801c1ed
 8007198:	3ff80000 	.word	0x3ff80000
 800719c:	0801c390 	.word	0x0801c390
 80071a0:	0801c293 	.word	0x0801c293
 80071a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071a6:	9a00      	ldr	r2, [sp, #0]
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	9b01      	ldr	r3, [sp, #4]
 80071ac:	2b0e      	cmp	r3, #14
 80071ae:	f200 80ad 	bhi.w	800730c <_dtoa_r+0x484>
 80071b2:	2d00      	cmp	r5, #0
 80071b4:	f000 80aa 	beq.w	800730c <_dtoa_r+0x484>
 80071b8:	f1ba 0f00 	cmp.w	sl, #0
 80071bc:	dd36      	ble.n	800722c <_dtoa_r+0x3a4>
 80071be:	4ac3      	ldr	r2, [pc, #780]	; (80074cc <_dtoa_r+0x644>)
 80071c0:	f00a 030f 	and.w	r3, sl, #15
 80071c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071c8:	ed93 7b00 	vldr	d7, [r3]
 80071cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80071d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80071d4:	eeb0 8a47 	vmov.f32	s16, s14
 80071d8:	eef0 8a67 	vmov.f32	s17, s15
 80071dc:	d016      	beq.n	800720c <_dtoa_r+0x384>
 80071de:	4bbc      	ldr	r3, [pc, #752]	; (80074d0 <_dtoa_r+0x648>)
 80071e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071e8:	f7f9 fb90 	bl	800090c <__aeabi_ddiv>
 80071ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071f0:	f007 070f 	and.w	r7, r7, #15
 80071f4:	2503      	movs	r5, #3
 80071f6:	4eb6      	ldr	r6, [pc, #728]	; (80074d0 <_dtoa_r+0x648>)
 80071f8:	b957      	cbnz	r7, 8007210 <_dtoa_r+0x388>
 80071fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071fe:	ec53 2b18 	vmov	r2, r3, d8
 8007202:	f7f9 fb83 	bl	800090c <__aeabi_ddiv>
 8007206:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800720a:	e029      	b.n	8007260 <_dtoa_r+0x3d8>
 800720c:	2502      	movs	r5, #2
 800720e:	e7f2      	b.n	80071f6 <_dtoa_r+0x36e>
 8007210:	07f9      	lsls	r1, r7, #31
 8007212:	d508      	bpl.n	8007226 <_dtoa_r+0x39e>
 8007214:	ec51 0b18 	vmov	r0, r1, d8
 8007218:	e9d6 2300 	ldrd	r2, r3, [r6]
 800721c:	f7f9 fa4c 	bl	80006b8 <__aeabi_dmul>
 8007220:	ec41 0b18 	vmov	d8, r0, r1
 8007224:	3501      	adds	r5, #1
 8007226:	107f      	asrs	r7, r7, #1
 8007228:	3608      	adds	r6, #8
 800722a:	e7e5      	b.n	80071f8 <_dtoa_r+0x370>
 800722c:	f000 80a6 	beq.w	800737c <_dtoa_r+0x4f4>
 8007230:	f1ca 0600 	rsb	r6, sl, #0
 8007234:	4ba5      	ldr	r3, [pc, #660]	; (80074cc <_dtoa_r+0x644>)
 8007236:	4fa6      	ldr	r7, [pc, #664]	; (80074d0 <_dtoa_r+0x648>)
 8007238:	f006 020f 	and.w	r2, r6, #15
 800723c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007248:	f7f9 fa36 	bl	80006b8 <__aeabi_dmul>
 800724c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007250:	1136      	asrs	r6, r6, #4
 8007252:	2300      	movs	r3, #0
 8007254:	2502      	movs	r5, #2
 8007256:	2e00      	cmp	r6, #0
 8007258:	f040 8085 	bne.w	8007366 <_dtoa_r+0x4de>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1d2      	bne.n	8007206 <_dtoa_r+0x37e>
 8007260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 808c 	beq.w	8007380 <_dtoa_r+0x4f8>
 8007268:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800726c:	4b99      	ldr	r3, [pc, #612]	; (80074d4 <_dtoa_r+0x64c>)
 800726e:	2200      	movs	r2, #0
 8007270:	4630      	mov	r0, r6
 8007272:	4639      	mov	r1, r7
 8007274:	f7f9 fc92 	bl	8000b9c <__aeabi_dcmplt>
 8007278:	2800      	cmp	r0, #0
 800727a:	f000 8081 	beq.w	8007380 <_dtoa_r+0x4f8>
 800727e:	9b01      	ldr	r3, [sp, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d07d      	beq.n	8007380 <_dtoa_r+0x4f8>
 8007284:	f1b9 0f00 	cmp.w	r9, #0
 8007288:	dd3c      	ble.n	8007304 <_dtoa_r+0x47c>
 800728a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800728e:	9307      	str	r3, [sp, #28]
 8007290:	2200      	movs	r2, #0
 8007292:	4b91      	ldr	r3, [pc, #580]	; (80074d8 <_dtoa_r+0x650>)
 8007294:	4630      	mov	r0, r6
 8007296:	4639      	mov	r1, r7
 8007298:	f7f9 fa0e 	bl	80006b8 <__aeabi_dmul>
 800729c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072a0:	3501      	adds	r5, #1
 80072a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80072a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80072aa:	4628      	mov	r0, r5
 80072ac:	f7f9 f99a 	bl	80005e4 <__aeabi_i2d>
 80072b0:	4632      	mov	r2, r6
 80072b2:	463b      	mov	r3, r7
 80072b4:	f7f9 fa00 	bl	80006b8 <__aeabi_dmul>
 80072b8:	4b88      	ldr	r3, [pc, #544]	; (80074dc <_dtoa_r+0x654>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	f7f9 f846 	bl	800034c <__adddf3>
 80072c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80072c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072c8:	9303      	str	r3, [sp, #12]
 80072ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d15c      	bne.n	800738a <_dtoa_r+0x502>
 80072d0:	4b83      	ldr	r3, [pc, #524]	; (80074e0 <_dtoa_r+0x658>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	4630      	mov	r0, r6
 80072d6:	4639      	mov	r1, r7
 80072d8:	f7f9 f836 	bl	8000348 <__aeabi_dsub>
 80072dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072e0:	4606      	mov	r6, r0
 80072e2:	460f      	mov	r7, r1
 80072e4:	f7f9 fc78 	bl	8000bd8 <__aeabi_dcmpgt>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	f040 8296 	bne.w	800781a <_dtoa_r+0x992>
 80072ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80072f2:	4630      	mov	r0, r6
 80072f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072f8:	4639      	mov	r1, r7
 80072fa:	f7f9 fc4f 	bl	8000b9c <__aeabi_dcmplt>
 80072fe:	2800      	cmp	r0, #0
 8007300:	f040 8288 	bne.w	8007814 <_dtoa_r+0x98c>
 8007304:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007308:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800730c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800730e:	2b00      	cmp	r3, #0
 8007310:	f2c0 8158 	blt.w	80075c4 <_dtoa_r+0x73c>
 8007314:	f1ba 0f0e 	cmp.w	sl, #14
 8007318:	f300 8154 	bgt.w	80075c4 <_dtoa_r+0x73c>
 800731c:	4b6b      	ldr	r3, [pc, #428]	; (80074cc <_dtoa_r+0x644>)
 800731e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007322:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007328:	2b00      	cmp	r3, #0
 800732a:	f280 80e3 	bge.w	80074f4 <_dtoa_r+0x66c>
 800732e:	9b01      	ldr	r3, [sp, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	f300 80df 	bgt.w	80074f4 <_dtoa_r+0x66c>
 8007336:	f040 826d 	bne.w	8007814 <_dtoa_r+0x98c>
 800733a:	4b69      	ldr	r3, [pc, #420]	; (80074e0 <_dtoa_r+0x658>)
 800733c:	2200      	movs	r2, #0
 800733e:	4640      	mov	r0, r8
 8007340:	4649      	mov	r1, r9
 8007342:	f7f9 f9b9 	bl	80006b8 <__aeabi_dmul>
 8007346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800734a:	f7f9 fc3b 	bl	8000bc4 <__aeabi_dcmpge>
 800734e:	9e01      	ldr	r6, [sp, #4]
 8007350:	4637      	mov	r7, r6
 8007352:	2800      	cmp	r0, #0
 8007354:	f040 8243 	bne.w	80077de <_dtoa_r+0x956>
 8007358:	9d00      	ldr	r5, [sp, #0]
 800735a:	2331      	movs	r3, #49	; 0x31
 800735c:	f805 3b01 	strb.w	r3, [r5], #1
 8007360:	f10a 0a01 	add.w	sl, sl, #1
 8007364:	e23f      	b.n	80077e6 <_dtoa_r+0x95e>
 8007366:	07f2      	lsls	r2, r6, #31
 8007368:	d505      	bpl.n	8007376 <_dtoa_r+0x4ee>
 800736a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800736e:	f7f9 f9a3 	bl	80006b8 <__aeabi_dmul>
 8007372:	3501      	adds	r5, #1
 8007374:	2301      	movs	r3, #1
 8007376:	1076      	asrs	r6, r6, #1
 8007378:	3708      	adds	r7, #8
 800737a:	e76c      	b.n	8007256 <_dtoa_r+0x3ce>
 800737c:	2502      	movs	r5, #2
 800737e:	e76f      	b.n	8007260 <_dtoa_r+0x3d8>
 8007380:	9b01      	ldr	r3, [sp, #4]
 8007382:	f8cd a01c 	str.w	sl, [sp, #28]
 8007386:	930c      	str	r3, [sp, #48]	; 0x30
 8007388:	e78d      	b.n	80072a6 <_dtoa_r+0x41e>
 800738a:	9900      	ldr	r1, [sp, #0]
 800738c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800738e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007390:	4b4e      	ldr	r3, [pc, #312]	; (80074cc <_dtoa_r+0x644>)
 8007392:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007396:	4401      	add	r1, r0
 8007398:	9102      	str	r1, [sp, #8]
 800739a:	9908      	ldr	r1, [sp, #32]
 800739c:	eeb0 8a47 	vmov.f32	s16, s14
 80073a0:	eef0 8a67 	vmov.f32	s17, s15
 80073a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073ac:	2900      	cmp	r1, #0
 80073ae:	d045      	beq.n	800743c <_dtoa_r+0x5b4>
 80073b0:	494c      	ldr	r1, [pc, #304]	; (80074e4 <_dtoa_r+0x65c>)
 80073b2:	2000      	movs	r0, #0
 80073b4:	f7f9 faaa 	bl	800090c <__aeabi_ddiv>
 80073b8:	ec53 2b18 	vmov	r2, r3, d8
 80073bc:	f7f8 ffc4 	bl	8000348 <__aeabi_dsub>
 80073c0:	9d00      	ldr	r5, [sp, #0]
 80073c2:	ec41 0b18 	vmov	d8, r0, r1
 80073c6:	4639      	mov	r1, r7
 80073c8:	4630      	mov	r0, r6
 80073ca:	f7f9 fc25 	bl	8000c18 <__aeabi_d2iz>
 80073ce:	900c      	str	r0, [sp, #48]	; 0x30
 80073d0:	f7f9 f908 	bl	80005e4 <__aeabi_i2d>
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4630      	mov	r0, r6
 80073da:	4639      	mov	r1, r7
 80073dc:	f7f8 ffb4 	bl	8000348 <__aeabi_dsub>
 80073e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073e2:	3330      	adds	r3, #48	; 0x30
 80073e4:	f805 3b01 	strb.w	r3, [r5], #1
 80073e8:	ec53 2b18 	vmov	r2, r3, d8
 80073ec:	4606      	mov	r6, r0
 80073ee:	460f      	mov	r7, r1
 80073f0:	f7f9 fbd4 	bl	8000b9c <__aeabi_dcmplt>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d165      	bne.n	80074c4 <_dtoa_r+0x63c>
 80073f8:	4632      	mov	r2, r6
 80073fa:	463b      	mov	r3, r7
 80073fc:	4935      	ldr	r1, [pc, #212]	; (80074d4 <_dtoa_r+0x64c>)
 80073fe:	2000      	movs	r0, #0
 8007400:	f7f8 ffa2 	bl	8000348 <__aeabi_dsub>
 8007404:	ec53 2b18 	vmov	r2, r3, d8
 8007408:	f7f9 fbc8 	bl	8000b9c <__aeabi_dcmplt>
 800740c:	2800      	cmp	r0, #0
 800740e:	f040 80b9 	bne.w	8007584 <_dtoa_r+0x6fc>
 8007412:	9b02      	ldr	r3, [sp, #8]
 8007414:	429d      	cmp	r5, r3
 8007416:	f43f af75 	beq.w	8007304 <_dtoa_r+0x47c>
 800741a:	4b2f      	ldr	r3, [pc, #188]	; (80074d8 <_dtoa_r+0x650>)
 800741c:	ec51 0b18 	vmov	r0, r1, d8
 8007420:	2200      	movs	r2, #0
 8007422:	f7f9 f949 	bl	80006b8 <__aeabi_dmul>
 8007426:	4b2c      	ldr	r3, [pc, #176]	; (80074d8 <_dtoa_r+0x650>)
 8007428:	ec41 0b18 	vmov	d8, r0, r1
 800742c:	2200      	movs	r2, #0
 800742e:	4630      	mov	r0, r6
 8007430:	4639      	mov	r1, r7
 8007432:	f7f9 f941 	bl	80006b8 <__aeabi_dmul>
 8007436:	4606      	mov	r6, r0
 8007438:	460f      	mov	r7, r1
 800743a:	e7c4      	b.n	80073c6 <_dtoa_r+0x53e>
 800743c:	ec51 0b17 	vmov	r0, r1, d7
 8007440:	f7f9 f93a 	bl	80006b8 <__aeabi_dmul>
 8007444:	9b02      	ldr	r3, [sp, #8]
 8007446:	9d00      	ldr	r5, [sp, #0]
 8007448:	930c      	str	r3, [sp, #48]	; 0x30
 800744a:	ec41 0b18 	vmov	d8, r0, r1
 800744e:	4639      	mov	r1, r7
 8007450:	4630      	mov	r0, r6
 8007452:	f7f9 fbe1 	bl	8000c18 <__aeabi_d2iz>
 8007456:	9011      	str	r0, [sp, #68]	; 0x44
 8007458:	f7f9 f8c4 	bl	80005e4 <__aeabi_i2d>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4630      	mov	r0, r6
 8007462:	4639      	mov	r1, r7
 8007464:	f7f8 ff70 	bl	8000348 <__aeabi_dsub>
 8007468:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800746a:	3330      	adds	r3, #48	; 0x30
 800746c:	f805 3b01 	strb.w	r3, [r5], #1
 8007470:	9b02      	ldr	r3, [sp, #8]
 8007472:	429d      	cmp	r5, r3
 8007474:	4606      	mov	r6, r0
 8007476:	460f      	mov	r7, r1
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	d134      	bne.n	80074e8 <_dtoa_r+0x660>
 800747e:	4b19      	ldr	r3, [pc, #100]	; (80074e4 <_dtoa_r+0x65c>)
 8007480:	ec51 0b18 	vmov	r0, r1, d8
 8007484:	f7f8 ff62 	bl	800034c <__adddf3>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	4630      	mov	r0, r6
 800748e:	4639      	mov	r1, r7
 8007490:	f7f9 fba2 	bl	8000bd8 <__aeabi_dcmpgt>
 8007494:	2800      	cmp	r0, #0
 8007496:	d175      	bne.n	8007584 <_dtoa_r+0x6fc>
 8007498:	ec53 2b18 	vmov	r2, r3, d8
 800749c:	4911      	ldr	r1, [pc, #68]	; (80074e4 <_dtoa_r+0x65c>)
 800749e:	2000      	movs	r0, #0
 80074a0:	f7f8 ff52 	bl	8000348 <__aeabi_dsub>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4630      	mov	r0, r6
 80074aa:	4639      	mov	r1, r7
 80074ac:	f7f9 fb76 	bl	8000b9c <__aeabi_dcmplt>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	f43f af27 	beq.w	8007304 <_dtoa_r+0x47c>
 80074b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074b8:	1e6b      	subs	r3, r5, #1
 80074ba:	930c      	str	r3, [sp, #48]	; 0x30
 80074bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074c0:	2b30      	cmp	r3, #48	; 0x30
 80074c2:	d0f8      	beq.n	80074b6 <_dtoa_r+0x62e>
 80074c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80074c8:	e04a      	b.n	8007560 <_dtoa_r+0x6d8>
 80074ca:	bf00      	nop
 80074cc:	0801c390 	.word	0x0801c390
 80074d0:	0801c368 	.word	0x0801c368
 80074d4:	3ff00000 	.word	0x3ff00000
 80074d8:	40240000 	.word	0x40240000
 80074dc:	401c0000 	.word	0x401c0000
 80074e0:	40140000 	.word	0x40140000
 80074e4:	3fe00000 	.word	0x3fe00000
 80074e8:	4baf      	ldr	r3, [pc, #700]	; (80077a8 <_dtoa_r+0x920>)
 80074ea:	f7f9 f8e5 	bl	80006b8 <__aeabi_dmul>
 80074ee:	4606      	mov	r6, r0
 80074f0:	460f      	mov	r7, r1
 80074f2:	e7ac      	b.n	800744e <_dtoa_r+0x5c6>
 80074f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074f8:	9d00      	ldr	r5, [sp, #0]
 80074fa:	4642      	mov	r2, r8
 80074fc:	464b      	mov	r3, r9
 80074fe:	4630      	mov	r0, r6
 8007500:	4639      	mov	r1, r7
 8007502:	f7f9 fa03 	bl	800090c <__aeabi_ddiv>
 8007506:	f7f9 fb87 	bl	8000c18 <__aeabi_d2iz>
 800750a:	9002      	str	r0, [sp, #8]
 800750c:	f7f9 f86a 	bl	80005e4 <__aeabi_i2d>
 8007510:	4642      	mov	r2, r8
 8007512:	464b      	mov	r3, r9
 8007514:	f7f9 f8d0 	bl	80006b8 <__aeabi_dmul>
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	4630      	mov	r0, r6
 800751e:	4639      	mov	r1, r7
 8007520:	f7f8 ff12 	bl	8000348 <__aeabi_dsub>
 8007524:	9e02      	ldr	r6, [sp, #8]
 8007526:	9f01      	ldr	r7, [sp, #4]
 8007528:	3630      	adds	r6, #48	; 0x30
 800752a:	f805 6b01 	strb.w	r6, [r5], #1
 800752e:	9e00      	ldr	r6, [sp, #0]
 8007530:	1bae      	subs	r6, r5, r6
 8007532:	42b7      	cmp	r7, r6
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	d137      	bne.n	80075aa <_dtoa_r+0x722>
 800753a:	f7f8 ff07 	bl	800034c <__adddf3>
 800753e:	4642      	mov	r2, r8
 8007540:	464b      	mov	r3, r9
 8007542:	4606      	mov	r6, r0
 8007544:	460f      	mov	r7, r1
 8007546:	f7f9 fb47 	bl	8000bd8 <__aeabi_dcmpgt>
 800754a:	b9c8      	cbnz	r0, 8007580 <_dtoa_r+0x6f8>
 800754c:	4642      	mov	r2, r8
 800754e:	464b      	mov	r3, r9
 8007550:	4630      	mov	r0, r6
 8007552:	4639      	mov	r1, r7
 8007554:	f7f9 fb18 	bl	8000b88 <__aeabi_dcmpeq>
 8007558:	b110      	cbz	r0, 8007560 <_dtoa_r+0x6d8>
 800755a:	9b02      	ldr	r3, [sp, #8]
 800755c:	07d9      	lsls	r1, r3, #31
 800755e:	d40f      	bmi.n	8007580 <_dtoa_r+0x6f8>
 8007560:	4620      	mov	r0, r4
 8007562:	4659      	mov	r1, fp
 8007564:	f000 fcf6 	bl	8007f54 <_Bfree>
 8007568:	2300      	movs	r3, #0
 800756a:	702b      	strb	r3, [r5, #0]
 800756c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800756e:	f10a 0001 	add.w	r0, sl, #1
 8007572:	6018      	str	r0, [r3, #0]
 8007574:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007576:	2b00      	cmp	r3, #0
 8007578:	f43f acd8 	beq.w	8006f2c <_dtoa_r+0xa4>
 800757c:	601d      	str	r5, [r3, #0]
 800757e:	e4d5      	b.n	8006f2c <_dtoa_r+0xa4>
 8007580:	f8cd a01c 	str.w	sl, [sp, #28]
 8007584:	462b      	mov	r3, r5
 8007586:	461d      	mov	r5, r3
 8007588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800758c:	2a39      	cmp	r2, #57	; 0x39
 800758e:	d108      	bne.n	80075a2 <_dtoa_r+0x71a>
 8007590:	9a00      	ldr	r2, [sp, #0]
 8007592:	429a      	cmp	r2, r3
 8007594:	d1f7      	bne.n	8007586 <_dtoa_r+0x6fe>
 8007596:	9a07      	ldr	r2, [sp, #28]
 8007598:	9900      	ldr	r1, [sp, #0]
 800759a:	3201      	adds	r2, #1
 800759c:	9207      	str	r2, [sp, #28]
 800759e:	2230      	movs	r2, #48	; 0x30
 80075a0:	700a      	strb	r2, [r1, #0]
 80075a2:	781a      	ldrb	r2, [r3, #0]
 80075a4:	3201      	adds	r2, #1
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	e78c      	b.n	80074c4 <_dtoa_r+0x63c>
 80075aa:	4b7f      	ldr	r3, [pc, #508]	; (80077a8 <_dtoa_r+0x920>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	f7f9 f883 	bl	80006b8 <__aeabi_dmul>
 80075b2:	2200      	movs	r2, #0
 80075b4:	2300      	movs	r3, #0
 80075b6:	4606      	mov	r6, r0
 80075b8:	460f      	mov	r7, r1
 80075ba:	f7f9 fae5 	bl	8000b88 <__aeabi_dcmpeq>
 80075be:	2800      	cmp	r0, #0
 80075c0:	d09b      	beq.n	80074fa <_dtoa_r+0x672>
 80075c2:	e7cd      	b.n	8007560 <_dtoa_r+0x6d8>
 80075c4:	9a08      	ldr	r2, [sp, #32]
 80075c6:	2a00      	cmp	r2, #0
 80075c8:	f000 80c4 	beq.w	8007754 <_dtoa_r+0x8cc>
 80075cc:	9a05      	ldr	r2, [sp, #20]
 80075ce:	2a01      	cmp	r2, #1
 80075d0:	f300 80a8 	bgt.w	8007724 <_dtoa_r+0x89c>
 80075d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	f000 80a0 	beq.w	800771c <_dtoa_r+0x894>
 80075dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075e0:	9e06      	ldr	r6, [sp, #24]
 80075e2:	4645      	mov	r5, r8
 80075e4:	9a04      	ldr	r2, [sp, #16]
 80075e6:	2101      	movs	r1, #1
 80075e8:	441a      	add	r2, r3
 80075ea:	4620      	mov	r0, r4
 80075ec:	4498      	add	r8, r3
 80075ee:	9204      	str	r2, [sp, #16]
 80075f0:	f000 fd6c 	bl	80080cc <__i2b>
 80075f4:	4607      	mov	r7, r0
 80075f6:	2d00      	cmp	r5, #0
 80075f8:	dd0b      	ble.n	8007612 <_dtoa_r+0x78a>
 80075fa:	9b04      	ldr	r3, [sp, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	dd08      	ble.n	8007612 <_dtoa_r+0x78a>
 8007600:	42ab      	cmp	r3, r5
 8007602:	9a04      	ldr	r2, [sp, #16]
 8007604:	bfa8      	it	ge
 8007606:	462b      	movge	r3, r5
 8007608:	eba8 0803 	sub.w	r8, r8, r3
 800760c:	1aed      	subs	r5, r5, r3
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	9b06      	ldr	r3, [sp, #24]
 8007614:	b1fb      	cbz	r3, 8007656 <_dtoa_r+0x7ce>
 8007616:	9b08      	ldr	r3, [sp, #32]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 809f 	beq.w	800775c <_dtoa_r+0x8d4>
 800761e:	2e00      	cmp	r6, #0
 8007620:	dd11      	ble.n	8007646 <_dtoa_r+0x7be>
 8007622:	4639      	mov	r1, r7
 8007624:	4632      	mov	r2, r6
 8007626:	4620      	mov	r0, r4
 8007628:	f000 fe0c 	bl	8008244 <__pow5mult>
 800762c:	465a      	mov	r2, fp
 800762e:	4601      	mov	r1, r0
 8007630:	4607      	mov	r7, r0
 8007632:	4620      	mov	r0, r4
 8007634:	f000 fd60 	bl	80080f8 <__multiply>
 8007638:	4659      	mov	r1, fp
 800763a:	9007      	str	r0, [sp, #28]
 800763c:	4620      	mov	r0, r4
 800763e:	f000 fc89 	bl	8007f54 <_Bfree>
 8007642:	9b07      	ldr	r3, [sp, #28]
 8007644:	469b      	mov	fp, r3
 8007646:	9b06      	ldr	r3, [sp, #24]
 8007648:	1b9a      	subs	r2, r3, r6
 800764a:	d004      	beq.n	8007656 <_dtoa_r+0x7ce>
 800764c:	4659      	mov	r1, fp
 800764e:	4620      	mov	r0, r4
 8007650:	f000 fdf8 	bl	8008244 <__pow5mult>
 8007654:	4683      	mov	fp, r0
 8007656:	2101      	movs	r1, #1
 8007658:	4620      	mov	r0, r4
 800765a:	f000 fd37 	bl	80080cc <__i2b>
 800765e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007660:	2b00      	cmp	r3, #0
 8007662:	4606      	mov	r6, r0
 8007664:	dd7c      	ble.n	8007760 <_dtoa_r+0x8d8>
 8007666:	461a      	mov	r2, r3
 8007668:	4601      	mov	r1, r0
 800766a:	4620      	mov	r0, r4
 800766c:	f000 fdea 	bl	8008244 <__pow5mult>
 8007670:	9b05      	ldr	r3, [sp, #20]
 8007672:	2b01      	cmp	r3, #1
 8007674:	4606      	mov	r6, r0
 8007676:	dd76      	ble.n	8007766 <_dtoa_r+0x8de>
 8007678:	2300      	movs	r3, #0
 800767a:	9306      	str	r3, [sp, #24]
 800767c:	6933      	ldr	r3, [r6, #16]
 800767e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007682:	6918      	ldr	r0, [r3, #16]
 8007684:	f000 fcd2 	bl	800802c <__hi0bits>
 8007688:	f1c0 0020 	rsb	r0, r0, #32
 800768c:	9b04      	ldr	r3, [sp, #16]
 800768e:	4418      	add	r0, r3
 8007690:	f010 001f 	ands.w	r0, r0, #31
 8007694:	f000 8086 	beq.w	80077a4 <_dtoa_r+0x91c>
 8007698:	f1c0 0320 	rsb	r3, r0, #32
 800769c:	2b04      	cmp	r3, #4
 800769e:	dd7f      	ble.n	80077a0 <_dtoa_r+0x918>
 80076a0:	f1c0 001c 	rsb	r0, r0, #28
 80076a4:	9b04      	ldr	r3, [sp, #16]
 80076a6:	4403      	add	r3, r0
 80076a8:	4480      	add	r8, r0
 80076aa:	4405      	add	r5, r0
 80076ac:	9304      	str	r3, [sp, #16]
 80076ae:	f1b8 0f00 	cmp.w	r8, #0
 80076b2:	dd05      	ble.n	80076c0 <_dtoa_r+0x838>
 80076b4:	4659      	mov	r1, fp
 80076b6:	4642      	mov	r2, r8
 80076b8:	4620      	mov	r0, r4
 80076ba:	f000 fe1d 	bl	80082f8 <__lshift>
 80076be:	4683      	mov	fp, r0
 80076c0:	9b04      	ldr	r3, [sp, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	dd05      	ble.n	80076d2 <_dtoa_r+0x84a>
 80076c6:	4631      	mov	r1, r6
 80076c8:	461a      	mov	r2, r3
 80076ca:	4620      	mov	r0, r4
 80076cc:	f000 fe14 	bl	80082f8 <__lshift>
 80076d0:	4606      	mov	r6, r0
 80076d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d069      	beq.n	80077ac <_dtoa_r+0x924>
 80076d8:	4631      	mov	r1, r6
 80076da:	4658      	mov	r0, fp
 80076dc:	f000 fe78 	bl	80083d0 <__mcmp>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	da63      	bge.n	80077ac <_dtoa_r+0x924>
 80076e4:	2300      	movs	r3, #0
 80076e6:	4659      	mov	r1, fp
 80076e8:	220a      	movs	r2, #10
 80076ea:	4620      	mov	r0, r4
 80076ec:	f000 fc54 	bl	8007f98 <__multadd>
 80076f0:	9b08      	ldr	r3, [sp, #32]
 80076f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80076f6:	4683      	mov	fp, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 818f 	beq.w	8007a1c <_dtoa_r+0xb94>
 80076fe:	4639      	mov	r1, r7
 8007700:	2300      	movs	r3, #0
 8007702:	220a      	movs	r2, #10
 8007704:	4620      	mov	r0, r4
 8007706:	f000 fc47 	bl	8007f98 <__multadd>
 800770a:	f1b9 0f00 	cmp.w	r9, #0
 800770e:	4607      	mov	r7, r0
 8007710:	f300 808e 	bgt.w	8007830 <_dtoa_r+0x9a8>
 8007714:	9b05      	ldr	r3, [sp, #20]
 8007716:	2b02      	cmp	r3, #2
 8007718:	dc50      	bgt.n	80077bc <_dtoa_r+0x934>
 800771a:	e089      	b.n	8007830 <_dtoa_r+0x9a8>
 800771c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800771e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007722:	e75d      	b.n	80075e0 <_dtoa_r+0x758>
 8007724:	9b01      	ldr	r3, [sp, #4]
 8007726:	1e5e      	subs	r6, r3, #1
 8007728:	9b06      	ldr	r3, [sp, #24]
 800772a:	42b3      	cmp	r3, r6
 800772c:	bfbf      	itttt	lt
 800772e:	9b06      	ldrlt	r3, [sp, #24]
 8007730:	9606      	strlt	r6, [sp, #24]
 8007732:	1af2      	sublt	r2, r6, r3
 8007734:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007736:	bfb6      	itet	lt
 8007738:	189b      	addlt	r3, r3, r2
 800773a:	1b9e      	subge	r6, r3, r6
 800773c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800773e:	9b01      	ldr	r3, [sp, #4]
 8007740:	bfb8      	it	lt
 8007742:	2600      	movlt	r6, #0
 8007744:	2b00      	cmp	r3, #0
 8007746:	bfb5      	itete	lt
 8007748:	eba8 0503 	sublt.w	r5, r8, r3
 800774c:	9b01      	ldrge	r3, [sp, #4]
 800774e:	2300      	movlt	r3, #0
 8007750:	4645      	movge	r5, r8
 8007752:	e747      	b.n	80075e4 <_dtoa_r+0x75c>
 8007754:	9e06      	ldr	r6, [sp, #24]
 8007756:	9f08      	ldr	r7, [sp, #32]
 8007758:	4645      	mov	r5, r8
 800775a:	e74c      	b.n	80075f6 <_dtoa_r+0x76e>
 800775c:	9a06      	ldr	r2, [sp, #24]
 800775e:	e775      	b.n	800764c <_dtoa_r+0x7c4>
 8007760:	9b05      	ldr	r3, [sp, #20]
 8007762:	2b01      	cmp	r3, #1
 8007764:	dc18      	bgt.n	8007798 <_dtoa_r+0x910>
 8007766:	9b02      	ldr	r3, [sp, #8]
 8007768:	b9b3      	cbnz	r3, 8007798 <_dtoa_r+0x910>
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007770:	b9a3      	cbnz	r3, 800779c <_dtoa_r+0x914>
 8007772:	9b03      	ldr	r3, [sp, #12]
 8007774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007778:	0d1b      	lsrs	r3, r3, #20
 800777a:	051b      	lsls	r3, r3, #20
 800777c:	b12b      	cbz	r3, 800778a <_dtoa_r+0x902>
 800777e:	9b04      	ldr	r3, [sp, #16]
 8007780:	3301      	adds	r3, #1
 8007782:	9304      	str	r3, [sp, #16]
 8007784:	f108 0801 	add.w	r8, r8, #1
 8007788:	2301      	movs	r3, #1
 800778a:	9306      	str	r3, [sp, #24]
 800778c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800778e:	2b00      	cmp	r3, #0
 8007790:	f47f af74 	bne.w	800767c <_dtoa_r+0x7f4>
 8007794:	2001      	movs	r0, #1
 8007796:	e779      	b.n	800768c <_dtoa_r+0x804>
 8007798:	2300      	movs	r3, #0
 800779a:	e7f6      	b.n	800778a <_dtoa_r+0x902>
 800779c:	9b02      	ldr	r3, [sp, #8]
 800779e:	e7f4      	b.n	800778a <_dtoa_r+0x902>
 80077a0:	d085      	beq.n	80076ae <_dtoa_r+0x826>
 80077a2:	4618      	mov	r0, r3
 80077a4:	301c      	adds	r0, #28
 80077a6:	e77d      	b.n	80076a4 <_dtoa_r+0x81c>
 80077a8:	40240000 	.word	0x40240000
 80077ac:	9b01      	ldr	r3, [sp, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	dc38      	bgt.n	8007824 <_dtoa_r+0x99c>
 80077b2:	9b05      	ldr	r3, [sp, #20]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	dd35      	ble.n	8007824 <_dtoa_r+0x99c>
 80077b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80077bc:	f1b9 0f00 	cmp.w	r9, #0
 80077c0:	d10d      	bne.n	80077de <_dtoa_r+0x956>
 80077c2:	4631      	mov	r1, r6
 80077c4:	464b      	mov	r3, r9
 80077c6:	2205      	movs	r2, #5
 80077c8:	4620      	mov	r0, r4
 80077ca:	f000 fbe5 	bl	8007f98 <__multadd>
 80077ce:	4601      	mov	r1, r0
 80077d0:	4606      	mov	r6, r0
 80077d2:	4658      	mov	r0, fp
 80077d4:	f000 fdfc 	bl	80083d0 <__mcmp>
 80077d8:	2800      	cmp	r0, #0
 80077da:	f73f adbd 	bgt.w	8007358 <_dtoa_r+0x4d0>
 80077de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e0:	9d00      	ldr	r5, [sp, #0]
 80077e2:	ea6f 0a03 	mvn.w	sl, r3
 80077e6:	f04f 0800 	mov.w	r8, #0
 80077ea:	4631      	mov	r1, r6
 80077ec:	4620      	mov	r0, r4
 80077ee:	f000 fbb1 	bl	8007f54 <_Bfree>
 80077f2:	2f00      	cmp	r7, #0
 80077f4:	f43f aeb4 	beq.w	8007560 <_dtoa_r+0x6d8>
 80077f8:	f1b8 0f00 	cmp.w	r8, #0
 80077fc:	d005      	beq.n	800780a <_dtoa_r+0x982>
 80077fe:	45b8      	cmp	r8, r7
 8007800:	d003      	beq.n	800780a <_dtoa_r+0x982>
 8007802:	4641      	mov	r1, r8
 8007804:	4620      	mov	r0, r4
 8007806:	f000 fba5 	bl	8007f54 <_Bfree>
 800780a:	4639      	mov	r1, r7
 800780c:	4620      	mov	r0, r4
 800780e:	f000 fba1 	bl	8007f54 <_Bfree>
 8007812:	e6a5      	b.n	8007560 <_dtoa_r+0x6d8>
 8007814:	2600      	movs	r6, #0
 8007816:	4637      	mov	r7, r6
 8007818:	e7e1      	b.n	80077de <_dtoa_r+0x956>
 800781a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800781c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007820:	4637      	mov	r7, r6
 8007822:	e599      	b.n	8007358 <_dtoa_r+0x4d0>
 8007824:	9b08      	ldr	r3, [sp, #32]
 8007826:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 80fd 	beq.w	8007a2a <_dtoa_r+0xba2>
 8007830:	2d00      	cmp	r5, #0
 8007832:	dd05      	ble.n	8007840 <_dtoa_r+0x9b8>
 8007834:	4639      	mov	r1, r7
 8007836:	462a      	mov	r2, r5
 8007838:	4620      	mov	r0, r4
 800783a:	f000 fd5d 	bl	80082f8 <__lshift>
 800783e:	4607      	mov	r7, r0
 8007840:	9b06      	ldr	r3, [sp, #24]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d05c      	beq.n	8007900 <_dtoa_r+0xa78>
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	4620      	mov	r0, r4
 800784a:	f000 fb43 	bl	8007ed4 <_Balloc>
 800784e:	4605      	mov	r5, r0
 8007850:	b928      	cbnz	r0, 800785e <_dtoa_r+0x9d6>
 8007852:	4b80      	ldr	r3, [pc, #512]	; (8007a54 <_dtoa_r+0xbcc>)
 8007854:	4602      	mov	r2, r0
 8007856:	f240 21ea 	movw	r1, #746	; 0x2ea
 800785a:	f7ff bb2e 	b.w	8006eba <_dtoa_r+0x32>
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	3202      	adds	r2, #2
 8007862:	0092      	lsls	r2, r2, #2
 8007864:	f107 010c 	add.w	r1, r7, #12
 8007868:	300c      	adds	r0, #12
 800786a:	f000 fb25 	bl	8007eb8 <memcpy>
 800786e:	2201      	movs	r2, #1
 8007870:	4629      	mov	r1, r5
 8007872:	4620      	mov	r0, r4
 8007874:	f000 fd40 	bl	80082f8 <__lshift>
 8007878:	9b00      	ldr	r3, [sp, #0]
 800787a:	3301      	adds	r3, #1
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	9b00      	ldr	r3, [sp, #0]
 8007880:	444b      	add	r3, r9
 8007882:	9307      	str	r3, [sp, #28]
 8007884:	9b02      	ldr	r3, [sp, #8]
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	46b8      	mov	r8, r7
 800788c:	9306      	str	r3, [sp, #24]
 800788e:	4607      	mov	r7, r0
 8007890:	9b01      	ldr	r3, [sp, #4]
 8007892:	4631      	mov	r1, r6
 8007894:	3b01      	subs	r3, #1
 8007896:	4658      	mov	r0, fp
 8007898:	9302      	str	r3, [sp, #8]
 800789a:	f7ff fa69 	bl	8006d70 <quorem>
 800789e:	4603      	mov	r3, r0
 80078a0:	3330      	adds	r3, #48	; 0x30
 80078a2:	9004      	str	r0, [sp, #16]
 80078a4:	4641      	mov	r1, r8
 80078a6:	4658      	mov	r0, fp
 80078a8:	9308      	str	r3, [sp, #32]
 80078aa:	f000 fd91 	bl	80083d0 <__mcmp>
 80078ae:	463a      	mov	r2, r7
 80078b0:	4681      	mov	r9, r0
 80078b2:	4631      	mov	r1, r6
 80078b4:	4620      	mov	r0, r4
 80078b6:	f000 fda7 	bl	8008408 <__mdiff>
 80078ba:	68c2      	ldr	r2, [r0, #12]
 80078bc:	9b08      	ldr	r3, [sp, #32]
 80078be:	4605      	mov	r5, r0
 80078c0:	bb02      	cbnz	r2, 8007904 <_dtoa_r+0xa7c>
 80078c2:	4601      	mov	r1, r0
 80078c4:	4658      	mov	r0, fp
 80078c6:	f000 fd83 	bl	80083d0 <__mcmp>
 80078ca:	9b08      	ldr	r3, [sp, #32]
 80078cc:	4602      	mov	r2, r0
 80078ce:	4629      	mov	r1, r5
 80078d0:	4620      	mov	r0, r4
 80078d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80078d6:	f000 fb3d 	bl	8007f54 <_Bfree>
 80078da:	9b05      	ldr	r3, [sp, #20]
 80078dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078de:	9d01      	ldr	r5, [sp, #4]
 80078e0:	ea43 0102 	orr.w	r1, r3, r2
 80078e4:	9b06      	ldr	r3, [sp, #24]
 80078e6:	430b      	orrs	r3, r1
 80078e8:	9b08      	ldr	r3, [sp, #32]
 80078ea:	d10d      	bne.n	8007908 <_dtoa_r+0xa80>
 80078ec:	2b39      	cmp	r3, #57	; 0x39
 80078ee:	d029      	beq.n	8007944 <_dtoa_r+0xabc>
 80078f0:	f1b9 0f00 	cmp.w	r9, #0
 80078f4:	dd01      	ble.n	80078fa <_dtoa_r+0xa72>
 80078f6:	9b04      	ldr	r3, [sp, #16]
 80078f8:	3331      	adds	r3, #49	; 0x31
 80078fa:	9a02      	ldr	r2, [sp, #8]
 80078fc:	7013      	strb	r3, [r2, #0]
 80078fe:	e774      	b.n	80077ea <_dtoa_r+0x962>
 8007900:	4638      	mov	r0, r7
 8007902:	e7b9      	b.n	8007878 <_dtoa_r+0x9f0>
 8007904:	2201      	movs	r2, #1
 8007906:	e7e2      	b.n	80078ce <_dtoa_r+0xa46>
 8007908:	f1b9 0f00 	cmp.w	r9, #0
 800790c:	db06      	blt.n	800791c <_dtoa_r+0xa94>
 800790e:	9905      	ldr	r1, [sp, #20]
 8007910:	ea41 0909 	orr.w	r9, r1, r9
 8007914:	9906      	ldr	r1, [sp, #24]
 8007916:	ea59 0101 	orrs.w	r1, r9, r1
 800791a:	d120      	bne.n	800795e <_dtoa_r+0xad6>
 800791c:	2a00      	cmp	r2, #0
 800791e:	ddec      	ble.n	80078fa <_dtoa_r+0xa72>
 8007920:	4659      	mov	r1, fp
 8007922:	2201      	movs	r2, #1
 8007924:	4620      	mov	r0, r4
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	f000 fce6 	bl	80082f8 <__lshift>
 800792c:	4631      	mov	r1, r6
 800792e:	4683      	mov	fp, r0
 8007930:	f000 fd4e 	bl	80083d0 <__mcmp>
 8007934:	2800      	cmp	r0, #0
 8007936:	9b01      	ldr	r3, [sp, #4]
 8007938:	dc02      	bgt.n	8007940 <_dtoa_r+0xab8>
 800793a:	d1de      	bne.n	80078fa <_dtoa_r+0xa72>
 800793c:	07da      	lsls	r2, r3, #31
 800793e:	d5dc      	bpl.n	80078fa <_dtoa_r+0xa72>
 8007940:	2b39      	cmp	r3, #57	; 0x39
 8007942:	d1d8      	bne.n	80078f6 <_dtoa_r+0xa6e>
 8007944:	9a02      	ldr	r2, [sp, #8]
 8007946:	2339      	movs	r3, #57	; 0x39
 8007948:	7013      	strb	r3, [r2, #0]
 800794a:	462b      	mov	r3, r5
 800794c:	461d      	mov	r5, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007954:	2a39      	cmp	r2, #57	; 0x39
 8007956:	d050      	beq.n	80079fa <_dtoa_r+0xb72>
 8007958:	3201      	adds	r2, #1
 800795a:	701a      	strb	r2, [r3, #0]
 800795c:	e745      	b.n	80077ea <_dtoa_r+0x962>
 800795e:	2a00      	cmp	r2, #0
 8007960:	dd03      	ble.n	800796a <_dtoa_r+0xae2>
 8007962:	2b39      	cmp	r3, #57	; 0x39
 8007964:	d0ee      	beq.n	8007944 <_dtoa_r+0xabc>
 8007966:	3301      	adds	r3, #1
 8007968:	e7c7      	b.n	80078fa <_dtoa_r+0xa72>
 800796a:	9a01      	ldr	r2, [sp, #4]
 800796c:	9907      	ldr	r1, [sp, #28]
 800796e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007972:	428a      	cmp	r2, r1
 8007974:	d02a      	beq.n	80079cc <_dtoa_r+0xb44>
 8007976:	4659      	mov	r1, fp
 8007978:	2300      	movs	r3, #0
 800797a:	220a      	movs	r2, #10
 800797c:	4620      	mov	r0, r4
 800797e:	f000 fb0b 	bl	8007f98 <__multadd>
 8007982:	45b8      	cmp	r8, r7
 8007984:	4683      	mov	fp, r0
 8007986:	f04f 0300 	mov.w	r3, #0
 800798a:	f04f 020a 	mov.w	r2, #10
 800798e:	4641      	mov	r1, r8
 8007990:	4620      	mov	r0, r4
 8007992:	d107      	bne.n	80079a4 <_dtoa_r+0xb1c>
 8007994:	f000 fb00 	bl	8007f98 <__multadd>
 8007998:	4680      	mov	r8, r0
 800799a:	4607      	mov	r7, r0
 800799c:	9b01      	ldr	r3, [sp, #4]
 800799e:	3301      	adds	r3, #1
 80079a0:	9301      	str	r3, [sp, #4]
 80079a2:	e775      	b.n	8007890 <_dtoa_r+0xa08>
 80079a4:	f000 faf8 	bl	8007f98 <__multadd>
 80079a8:	4639      	mov	r1, r7
 80079aa:	4680      	mov	r8, r0
 80079ac:	2300      	movs	r3, #0
 80079ae:	220a      	movs	r2, #10
 80079b0:	4620      	mov	r0, r4
 80079b2:	f000 faf1 	bl	8007f98 <__multadd>
 80079b6:	4607      	mov	r7, r0
 80079b8:	e7f0      	b.n	800799c <_dtoa_r+0xb14>
 80079ba:	f1b9 0f00 	cmp.w	r9, #0
 80079be:	9a00      	ldr	r2, [sp, #0]
 80079c0:	bfcc      	ite	gt
 80079c2:	464d      	movgt	r5, r9
 80079c4:	2501      	movle	r5, #1
 80079c6:	4415      	add	r5, r2
 80079c8:	f04f 0800 	mov.w	r8, #0
 80079cc:	4659      	mov	r1, fp
 80079ce:	2201      	movs	r2, #1
 80079d0:	4620      	mov	r0, r4
 80079d2:	9301      	str	r3, [sp, #4]
 80079d4:	f000 fc90 	bl	80082f8 <__lshift>
 80079d8:	4631      	mov	r1, r6
 80079da:	4683      	mov	fp, r0
 80079dc:	f000 fcf8 	bl	80083d0 <__mcmp>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	dcb2      	bgt.n	800794a <_dtoa_r+0xac2>
 80079e4:	d102      	bne.n	80079ec <_dtoa_r+0xb64>
 80079e6:	9b01      	ldr	r3, [sp, #4]
 80079e8:	07db      	lsls	r3, r3, #31
 80079ea:	d4ae      	bmi.n	800794a <_dtoa_r+0xac2>
 80079ec:	462b      	mov	r3, r5
 80079ee:	461d      	mov	r5, r3
 80079f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079f4:	2a30      	cmp	r2, #48	; 0x30
 80079f6:	d0fa      	beq.n	80079ee <_dtoa_r+0xb66>
 80079f8:	e6f7      	b.n	80077ea <_dtoa_r+0x962>
 80079fa:	9a00      	ldr	r2, [sp, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d1a5      	bne.n	800794c <_dtoa_r+0xac4>
 8007a00:	f10a 0a01 	add.w	sl, sl, #1
 8007a04:	2331      	movs	r3, #49	; 0x31
 8007a06:	e779      	b.n	80078fc <_dtoa_r+0xa74>
 8007a08:	4b13      	ldr	r3, [pc, #76]	; (8007a58 <_dtoa_r+0xbd0>)
 8007a0a:	f7ff baaf 	b.w	8006f6c <_dtoa_r+0xe4>
 8007a0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f47f aa86 	bne.w	8006f22 <_dtoa_r+0x9a>
 8007a16:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <_dtoa_r+0xbd4>)
 8007a18:	f7ff baa8 	b.w	8006f6c <_dtoa_r+0xe4>
 8007a1c:	f1b9 0f00 	cmp.w	r9, #0
 8007a20:	dc03      	bgt.n	8007a2a <_dtoa_r+0xba2>
 8007a22:	9b05      	ldr	r3, [sp, #20]
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	f73f aec9 	bgt.w	80077bc <_dtoa_r+0x934>
 8007a2a:	9d00      	ldr	r5, [sp, #0]
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4658      	mov	r0, fp
 8007a30:	f7ff f99e 	bl	8006d70 <quorem>
 8007a34:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007a38:	f805 3b01 	strb.w	r3, [r5], #1
 8007a3c:	9a00      	ldr	r2, [sp, #0]
 8007a3e:	1aaa      	subs	r2, r5, r2
 8007a40:	4591      	cmp	r9, r2
 8007a42:	ddba      	ble.n	80079ba <_dtoa_r+0xb32>
 8007a44:	4659      	mov	r1, fp
 8007a46:	2300      	movs	r3, #0
 8007a48:	220a      	movs	r2, #10
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 faa4 	bl	8007f98 <__multadd>
 8007a50:	4683      	mov	fp, r0
 8007a52:	e7eb      	b.n	8007a2c <_dtoa_r+0xba4>
 8007a54:	0801c293 	.word	0x0801c293
 8007a58:	0801c1ec 	.word	0x0801c1ec
 8007a5c:	0801c210 	.word	0x0801c210

08007a60 <__sflush_r>:
 8007a60:	898a      	ldrh	r2, [r1, #12]
 8007a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a66:	4605      	mov	r5, r0
 8007a68:	0710      	lsls	r0, r2, #28
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	d458      	bmi.n	8007b20 <__sflush_r+0xc0>
 8007a6e:	684b      	ldr	r3, [r1, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	dc05      	bgt.n	8007a80 <__sflush_r+0x20>
 8007a74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dc02      	bgt.n	8007a80 <__sflush_r+0x20>
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a82:	2e00      	cmp	r6, #0
 8007a84:	d0f9      	beq.n	8007a7a <__sflush_r+0x1a>
 8007a86:	2300      	movs	r3, #0
 8007a88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a8c:	682f      	ldr	r7, [r5, #0]
 8007a8e:	602b      	str	r3, [r5, #0]
 8007a90:	d032      	beq.n	8007af8 <__sflush_r+0x98>
 8007a92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	075a      	lsls	r2, r3, #29
 8007a98:	d505      	bpl.n	8007aa6 <__sflush_r+0x46>
 8007a9a:	6863      	ldr	r3, [r4, #4]
 8007a9c:	1ac0      	subs	r0, r0, r3
 8007a9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007aa0:	b10b      	cbz	r3, 8007aa6 <__sflush_r+0x46>
 8007aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007aa4:	1ac0      	subs	r0, r0, r3
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aac:	6a21      	ldr	r1, [r4, #32]
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b0      	blx	r6
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	d106      	bne.n	8007ac6 <__sflush_r+0x66>
 8007ab8:	6829      	ldr	r1, [r5, #0]
 8007aba:	291d      	cmp	r1, #29
 8007abc:	d82c      	bhi.n	8007b18 <__sflush_r+0xb8>
 8007abe:	4a2a      	ldr	r2, [pc, #168]	; (8007b68 <__sflush_r+0x108>)
 8007ac0:	40ca      	lsrs	r2, r1
 8007ac2:	07d6      	lsls	r6, r2, #31
 8007ac4:	d528      	bpl.n	8007b18 <__sflush_r+0xb8>
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	6062      	str	r2, [r4, #4]
 8007aca:	04d9      	lsls	r1, r3, #19
 8007acc:	6922      	ldr	r2, [r4, #16]
 8007ace:	6022      	str	r2, [r4, #0]
 8007ad0:	d504      	bpl.n	8007adc <__sflush_r+0x7c>
 8007ad2:	1c42      	adds	r2, r0, #1
 8007ad4:	d101      	bne.n	8007ada <__sflush_r+0x7a>
 8007ad6:	682b      	ldr	r3, [r5, #0]
 8007ad8:	b903      	cbnz	r3, 8007adc <__sflush_r+0x7c>
 8007ada:	6560      	str	r0, [r4, #84]	; 0x54
 8007adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ade:	602f      	str	r7, [r5, #0]
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	d0ca      	beq.n	8007a7a <__sflush_r+0x1a>
 8007ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ae8:	4299      	cmp	r1, r3
 8007aea:	d002      	beq.n	8007af2 <__sflush_r+0x92>
 8007aec:	4628      	mov	r0, r5
 8007aee:	f000 fd7f 	bl	80085f0 <_free_r>
 8007af2:	2000      	movs	r0, #0
 8007af4:	6360      	str	r0, [r4, #52]	; 0x34
 8007af6:	e7c1      	b.n	8007a7c <__sflush_r+0x1c>
 8007af8:	6a21      	ldr	r1, [r4, #32]
 8007afa:	2301      	movs	r3, #1
 8007afc:	4628      	mov	r0, r5
 8007afe:	47b0      	blx	r6
 8007b00:	1c41      	adds	r1, r0, #1
 8007b02:	d1c7      	bne.n	8007a94 <__sflush_r+0x34>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0c4      	beq.n	8007a94 <__sflush_r+0x34>
 8007b0a:	2b1d      	cmp	r3, #29
 8007b0c:	d001      	beq.n	8007b12 <__sflush_r+0xb2>
 8007b0e:	2b16      	cmp	r3, #22
 8007b10:	d101      	bne.n	8007b16 <__sflush_r+0xb6>
 8007b12:	602f      	str	r7, [r5, #0]
 8007b14:	e7b1      	b.n	8007a7a <__sflush_r+0x1a>
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b1c:	81a3      	strh	r3, [r4, #12]
 8007b1e:	e7ad      	b.n	8007a7c <__sflush_r+0x1c>
 8007b20:	690f      	ldr	r7, [r1, #16]
 8007b22:	2f00      	cmp	r7, #0
 8007b24:	d0a9      	beq.n	8007a7a <__sflush_r+0x1a>
 8007b26:	0793      	lsls	r3, r2, #30
 8007b28:	680e      	ldr	r6, [r1, #0]
 8007b2a:	bf08      	it	eq
 8007b2c:	694b      	ldreq	r3, [r1, #20]
 8007b2e:	600f      	str	r7, [r1, #0]
 8007b30:	bf18      	it	ne
 8007b32:	2300      	movne	r3, #0
 8007b34:	eba6 0807 	sub.w	r8, r6, r7
 8007b38:	608b      	str	r3, [r1, #8]
 8007b3a:	f1b8 0f00 	cmp.w	r8, #0
 8007b3e:	dd9c      	ble.n	8007a7a <__sflush_r+0x1a>
 8007b40:	6a21      	ldr	r1, [r4, #32]
 8007b42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b44:	4643      	mov	r3, r8
 8007b46:	463a      	mov	r2, r7
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b0      	blx	r6
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	dc06      	bgt.n	8007b5e <__sflush_r+0xfe>
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b56:	81a3      	strh	r3, [r4, #12]
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b5c:	e78e      	b.n	8007a7c <__sflush_r+0x1c>
 8007b5e:	4407      	add	r7, r0
 8007b60:	eba8 0800 	sub.w	r8, r8, r0
 8007b64:	e7e9      	b.n	8007b3a <__sflush_r+0xda>
 8007b66:	bf00      	nop
 8007b68:	20400001 	.word	0x20400001

08007b6c <_fflush_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	690b      	ldr	r3, [r1, #16]
 8007b70:	4605      	mov	r5, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	b913      	cbnz	r3, 8007b7c <_fflush_r+0x10>
 8007b76:	2500      	movs	r5, #0
 8007b78:	4628      	mov	r0, r5
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	b118      	cbz	r0, 8007b86 <_fflush_r+0x1a>
 8007b7e:	6983      	ldr	r3, [r0, #24]
 8007b80:	b90b      	cbnz	r3, 8007b86 <_fflush_r+0x1a>
 8007b82:	f000 f887 	bl	8007c94 <__sinit>
 8007b86:	4b14      	ldr	r3, [pc, #80]	; (8007bd8 <_fflush_r+0x6c>)
 8007b88:	429c      	cmp	r4, r3
 8007b8a:	d11b      	bne.n	8007bc4 <_fflush_r+0x58>
 8007b8c:	686c      	ldr	r4, [r5, #4]
 8007b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d0ef      	beq.n	8007b76 <_fflush_r+0xa>
 8007b96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b98:	07d0      	lsls	r0, r2, #31
 8007b9a:	d404      	bmi.n	8007ba6 <_fflush_r+0x3a>
 8007b9c:	0599      	lsls	r1, r3, #22
 8007b9e:	d402      	bmi.n	8007ba6 <_fflush_r+0x3a>
 8007ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ba2:	f000 f91a 	bl	8007dda <__retarget_lock_acquire_recursive>
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	4621      	mov	r1, r4
 8007baa:	f7ff ff59 	bl	8007a60 <__sflush_r>
 8007bae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bb0:	07da      	lsls	r2, r3, #31
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	d4e0      	bmi.n	8007b78 <_fflush_r+0xc>
 8007bb6:	89a3      	ldrh	r3, [r4, #12]
 8007bb8:	059b      	lsls	r3, r3, #22
 8007bba:	d4dd      	bmi.n	8007b78 <_fflush_r+0xc>
 8007bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bbe:	f000 f90d 	bl	8007ddc <__retarget_lock_release_recursive>
 8007bc2:	e7d9      	b.n	8007b78 <_fflush_r+0xc>
 8007bc4:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <_fflush_r+0x70>)
 8007bc6:	429c      	cmp	r4, r3
 8007bc8:	d101      	bne.n	8007bce <_fflush_r+0x62>
 8007bca:	68ac      	ldr	r4, [r5, #8]
 8007bcc:	e7df      	b.n	8007b8e <_fflush_r+0x22>
 8007bce:	4b04      	ldr	r3, [pc, #16]	; (8007be0 <_fflush_r+0x74>)
 8007bd0:	429c      	cmp	r4, r3
 8007bd2:	bf08      	it	eq
 8007bd4:	68ec      	ldreq	r4, [r5, #12]
 8007bd6:	e7da      	b.n	8007b8e <_fflush_r+0x22>
 8007bd8:	0801c2c4 	.word	0x0801c2c4
 8007bdc:	0801c2e4 	.word	0x0801c2e4
 8007be0:	0801c2a4 	.word	0x0801c2a4

08007be4 <std>:
 8007be4:	2300      	movs	r3, #0
 8007be6:	b510      	push	{r4, lr}
 8007be8:	4604      	mov	r4, r0
 8007bea:	e9c0 3300 	strd	r3, r3, [r0]
 8007bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bf2:	6083      	str	r3, [r0, #8]
 8007bf4:	8181      	strh	r1, [r0, #12]
 8007bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8007bf8:	81c2      	strh	r2, [r0, #14]
 8007bfa:	6183      	str	r3, [r0, #24]
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	2208      	movs	r2, #8
 8007c00:	305c      	adds	r0, #92	; 0x5c
 8007c02:	f7fe fb6b 	bl	80062dc <memset>
 8007c06:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <std+0x38>)
 8007c08:	6263      	str	r3, [r4, #36]	; 0x24
 8007c0a:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <std+0x3c>)
 8007c0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c0e:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <std+0x40>)
 8007c10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c12:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <std+0x44>)
 8007c14:	6224      	str	r4, [r4, #32]
 8007c16:	6323      	str	r3, [r4, #48]	; 0x30
 8007c18:	bd10      	pop	{r4, pc}
 8007c1a:	bf00      	nop
 8007c1c:	08008a19 	.word	0x08008a19
 8007c20:	08008a3b 	.word	0x08008a3b
 8007c24:	08008a73 	.word	0x08008a73
 8007c28:	08008a97 	.word	0x08008a97

08007c2c <_cleanup_r>:
 8007c2c:	4901      	ldr	r1, [pc, #4]	; (8007c34 <_cleanup_r+0x8>)
 8007c2e:	f000 b8af 	b.w	8007d90 <_fwalk_reent>
 8007c32:	bf00      	nop
 8007c34:	08007b6d 	.word	0x08007b6d

08007c38 <__sfmoreglue>:
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	1e4a      	subs	r2, r1, #1
 8007c3c:	2568      	movs	r5, #104	; 0x68
 8007c3e:	4355      	muls	r5, r2
 8007c40:	460e      	mov	r6, r1
 8007c42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c46:	f000 fd23 	bl	8008690 <_malloc_r>
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	b140      	cbz	r0, 8007c60 <__sfmoreglue+0x28>
 8007c4e:	2100      	movs	r1, #0
 8007c50:	e9c0 1600 	strd	r1, r6, [r0]
 8007c54:	300c      	adds	r0, #12
 8007c56:	60a0      	str	r0, [r4, #8]
 8007c58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c5c:	f7fe fb3e 	bl	80062dc <memset>
 8007c60:	4620      	mov	r0, r4
 8007c62:	bd70      	pop	{r4, r5, r6, pc}

08007c64 <__sfp_lock_acquire>:
 8007c64:	4801      	ldr	r0, [pc, #4]	; (8007c6c <__sfp_lock_acquire+0x8>)
 8007c66:	f000 b8b8 	b.w	8007dda <__retarget_lock_acquire_recursive>
 8007c6a:	bf00      	nop
 8007c6c:	2000746c 	.word	0x2000746c

08007c70 <__sfp_lock_release>:
 8007c70:	4801      	ldr	r0, [pc, #4]	; (8007c78 <__sfp_lock_release+0x8>)
 8007c72:	f000 b8b3 	b.w	8007ddc <__retarget_lock_release_recursive>
 8007c76:	bf00      	nop
 8007c78:	2000746c 	.word	0x2000746c

08007c7c <__sinit_lock_acquire>:
 8007c7c:	4801      	ldr	r0, [pc, #4]	; (8007c84 <__sinit_lock_acquire+0x8>)
 8007c7e:	f000 b8ac 	b.w	8007dda <__retarget_lock_acquire_recursive>
 8007c82:	bf00      	nop
 8007c84:	20007467 	.word	0x20007467

08007c88 <__sinit_lock_release>:
 8007c88:	4801      	ldr	r0, [pc, #4]	; (8007c90 <__sinit_lock_release+0x8>)
 8007c8a:	f000 b8a7 	b.w	8007ddc <__retarget_lock_release_recursive>
 8007c8e:	bf00      	nop
 8007c90:	20007467 	.word	0x20007467

08007c94 <__sinit>:
 8007c94:	b510      	push	{r4, lr}
 8007c96:	4604      	mov	r4, r0
 8007c98:	f7ff fff0 	bl	8007c7c <__sinit_lock_acquire>
 8007c9c:	69a3      	ldr	r3, [r4, #24]
 8007c9e:	b11b      	cbz	r3, 8007ca8 <__sinit+0x14>
 8007ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ca4:	f7ff bff0 	b.w	8007c88 <__sinit_lock_release>
 8007ca8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cac:	6523      	str	r3, [r4, #80]	; 0x50
 8007cae:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <__sinit+0x68>)
 8007cb0:	4a13      	ldr	r2, [pc, #76]	; (8007d00 <__sinit+0x6c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cb6:	42a3      	cmp	r3, r4
 8007cb8:	bf04      	itt	eq
 8007cba:	2301      	moveq	r3, #1
 8007cbc:	61a3      	streq	r3, [r4, #24]
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 f820 	bl	8007d04 <__sfp>
 8007cc4:	6060      	str	r0, [r4, #4]
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f000 f81c 	bl	8007d04 <__sfp>
 8007ccc:	60a0      	str	r0, [r4, #8]
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f000 f818 	bl	8007d04 <__sfp>
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	60e0      	str	r0, [r4, #12]
 8007cd8:	2104      	movs	r1, #4
 8007cda:	6860      	ldr	r0, [r4, #4]
 8007cdc:	f7ff ff82 	bl	8007be4 <std>
 8007ce0:	68a0      	ldr	r0, [r4, #8]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	2109      	movs	r1, #9
 8007ce6:	f7ff ff7d 	bl	8007be4 <std>
 8007cea:	68e0      	ldr	r0, [r4, #12]
 8007cec:	2202      	movs	r2, #2
 8007cee:	2112      	movs	r1, #18
 8007cf0:	f7ff ff78 	bl	8007be4 <std>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	61a3      	str	r3, [r4, #24]
 8007cf8:	e7d2      	b.n	8007ca0 <__sinit+0xc>
 8007cfa:	bf00      	nop
 8007cfc:	0801c1d8 	.word	0x0801c1d8
 8007d00:	08007c2d 	.word	0x08007c2d

08007d04 <__sfp>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	4607      	mov	r7, r0
 8007d08:	f7ff ffac 	bl	8007c64 <__sfp_lock_acquire>
 8007d0c:	4b1e      	ldr	r3, [pc, #120]	; (8007d88 <__sfp+0x84>)
 8007d0e:	681e      	ldr	r6, [r3, #0]
 8007d10:	69b3      	ldr	r3, [r6, #24]
 8007d12:	b913      	cbnz	r3, 8007d1a <__sfp+0x16>
 8007d14:	4630      	mov	r0, r6
 8007d16:	f7ff ffbd 	bl	8007c94 <__sinit>
 8007d1a:	3648      	adds	r6, #72	; 0x48
 8007d1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	d503      	bpl.n	8007d2c <__sfp+0x28>
 8007d24:	6833      	ldr	r3, [r6, #0]
 8007d26:	b30b      	cbz	r3, 8007d6c <__sfp+0x68>
 8007d28:	6836      	ldr	r6, [r6, #0]
 8007d2a:	e7f7      	b.n	8007d1c <__sfp+0x18>
 8007d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d30:	b9d5      	cbnz	r5, 8007d68 <__sfp+0x64>
 8007d32:	4b16      	ldr	r3, [pc, #88]	; (8007d8c <__sfp+0x88>)
 8007d34:	60e3      	str	r3, [r4, #12]
 8007d36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d3a:	6665      	str	r5, [r4, #100]	; 0x64
 8007d3c:	f000 f84c 	bl	8007dd8 <__retarget_lock_init_recursive>
 8007d40:	f7ff ff96 	bl	8007c70 <__sfp_lock_release>
 8007d44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d4c:	6025      	str	r5, [r4, #0]
 8007d4e:	61a5      	str	r5, [r4, #24]
 8007d50:	2208      	movs	r2, #8
 8007d52:	4629      	mov	r1, r5
 8007d54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d58:	f7fe fac0 	bl	80062dc <memset>
 8007d5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d64:	4620      	mov	r0, r4
 8007d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d68:	3468      	adds	r4, #104	; 0x68
 8007d6a:	e7d9      	b.n	8007d20 <__sfp+0x1c>
 8007d6c:	2104      	movs	r1, #4
 8007d6e:	4638      	mov	r0, r7
 8007d70:	f7ff ff62 	bl	8007c38 <__sfmoreglue>
 8007d74:	4604      	mov	r4, r0
 8007d76:	6030      	str	r0, [r6, #0]
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d1d5      	bne.n	8007d28 <__sfp+0x24>
 8007d7c:	f7ff ff78 	bl	8007c70 <__sfp_lock_release>
 8007d80:	230c      	movs	r3, #12
 8007d82:	603b      	str	r3, [r7, #0]
 8007d84:	e7ee      	b.n	8007d64 <__sfp+0x60>
 8007d86:	bf00      	nop
 8007d88:	0801c1d8 	.word	0x0801c1d8
 8007d8c:	ffff0001 	.word	0xffff0001

08007d90 <_fwalk_reent>:
 8007d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d94:	4606      	mov	r6, r0
 8007d96:	4688      	mov	r8, r1
 8007d98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d9c:	2700      	movs	r7, #0
 8007d9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007da2:	f1b9 0901 	subs.w	r9, r9, #1
 8007da6:	d505      	bpl.n	8007db4 <_fwalk_reent+0x24>
 8007da8:	6824      	ldr	r4, [r4, #0]
 8007daa:	2c00      	cmp	r4, #0
 8007dac:	d1f7      	bne.n	8007d9e <_fwalk_reent+0xe>
 8007dae:	4638      	mov	r0, r7
 8007db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007db4:	89ab      	ldrh	r3, [r5, #12]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d907      	bls.n	8007dca <_fwalk_reent+0x3a>
 8007dba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	d003      	beq.n	8007dca <_fwalk_reent+0x3a>
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	47c0      	blx	r8
 8007dc8:	4307      	orrs	r7, r0
 8007dca:	3568      	adds	r5, #104	; 0x68
 8007dcc:	e7e9      	b.n	8007da2 <_fwalk_reent+0x12>
	...

08007dd0 <_localeconv_r>:
 8007dd0:	4800      	ldr	r0, [pc, #0]	; (8007dd4 <_localeconv_r+0x4>)
 8007dd2:	4770      	bx	lr
 8007dd4:	200001c8 	.word	0x200001c8

08007dd8 <__retarget_lock_init_recursive>:
 8007dd8:	4770      	bx	lr

08007dda <__retarget_lock_acquire_recursive>:
 8007dda:	4770      	bx	lr

08007ddc <__retarget_lock_release_recursive>:
 8007ddc:	4770      	bx	lr

08007dde <__swhatbuf_r>:
 8007dde:	b570      	push	{r4, r5, r6, lr}
 8007de0:	460e      	mov	r6, r1
 8007de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de6:	2900      	cmp	r1, #0
 8007de8:	b096      	sub	sp, #88	; 0x58
 8007dea:	4614      	mov	r4, r2
 8007dec:	461d      	mov	r5, r3
 8007dee:	da07      	bge.n	8007e00 <__swhatbuf_r+0x22>
 8007df0:	2300      	movs	r3, #0
 8007df2:	602b      	str	r3, [r5, #0]
 8007df4:	89b3      	ldrh	r3, [r6, #12]
 8007df6:	061a      	lsls	r2, r3, #24
 8007df8:	d410      	bmi.n	8007e1c <__swhatbuf_r+0x3e>
 8007dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dfe:	e00e      	b.n	8007e1e <__swhatbuf_r+0x40>
 8007e00:	466a      	mov	r2, sp
 8007e02:	f000 fe9f 	bl	8008b44 <_fstat_r>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	dbf2      	blt.n	8007df0 <__swhatbuf_r+0x12>
 8007e0a:	9a01      	ldr	r2, [sp, #4]
 8007e0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e14:	425a      	negs	r2, r3
 8007e16:	415a      	adcs	r2, r3
 8007e18:	602a      	str	r2, [r5, #0]
 8007e1a:	e7ee      	b.n	8007dfa <__swhatbuf_r+0x1c>
 8007e1c:	2340      	movs	r3, #64	; 0x40
 8007e1e:	2000      	movs	r0, #0
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	b016      	add	sp, #88	; 0x58
 8007e24:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e28 <__smakebuf_r>:
 8007e28:	898b      	ldrh	r3, [r1, #12]
 8007e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e2c:	079d      	lsls	r5, r3, #30
 8007e2e:	4606      	mov	r6, r0
 8007e30:	460c      	mov	r4, r1
 8007e32:	d507      	bpl.n	8007e44 <__smakebuf_r+0x1c>
 8007e34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	6123      	str	r3, [r4, #16]
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	6163      	str	r3, [r4, #20]
 8007e40:	b002      	add	sp, #8
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	ab01      	add	r3, sp, #4
 8007e46:	466a      	mov	r2, sp
 8007e48:	f7ff ffc9 	bl	8007dde <__swhatbuf_r>
 8007e4c:	9900      	ldr	r1, [sp, #0]
 8007e4e:	4605      	mov	r5, r0
 8007e50:	4630      	mov	r0, r6
 8007e52:	f000 fc1d 	bl	8008690 <_malloc_r>
 8007e56:	b948      	cbnz	r0, 8007e6c <__smakebuf_r+0x44>
 8007e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e5c:	059a      	lsls	r2, r3, #22
 8007e5e:	d4ef      	bmi.n	8007e40 <__smakebuf_r+0x18>
 8007e60:	f023 0303 	bic.w	r3, r3, #3
 8007e64:	f043 0302 	orr.w	r3, r3, #2
 8007e68:	81a3      	strh	r3, [r4, #12]
 8007e6a:	e7e3      	b.n	8007e34 <__smakebuf_r+0xc>
 8007e6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ea4 <__smakebuf_r+0x7c>)
 8007e6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	6020      	str	r0, [r4, #0]
 8007e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e78:	81a3      	strh	r3, [r4, #12]
 8007e7a:	9b00      	ldr	r3, [sp, #0]
 8007e7c:	6163      	str	r3, [r4, #20]
 8007e7e:	9b01      	ldr	r3, [sp, #4]
 8007e80:	6120      	str	r0, [r4, #16]
 8007e82:	b15b      	cbz	r3, 8007e9c <__smakebuf_r+0x74>
 8007e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f000 fe6d 	bl	8008b68 <_isatty_r>
 8007e8e:	b128      	cbz	r0, 8007e9c <__smakebuf_r+0x74>
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	f023 0303 	bic.w	r3, r3, #3
 8007e96:	f043 0301 	orr.w	r3, r3, #1
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	89a0      	ldrh	r0, [r4, #12]
 8007e9e:	4305      	orrs	r5, r0
 8007ea0:	81a5      	strh	r5, [r4, #12]
 8007ea2:	e7cd      	b.n	8007e40 <__smakebuf_r+0x18>
 8007ea4:	08007c2d 	.word	0x08007c2d

08007ea8 <malloc>:
 8007ea8:	4b02      	ldr	r3, [pc, #8]	; (8007eb4 <malloc+0xc>)
 8007eaa:	4601      	mov	r1, r0
 8007eac:	6818      	ldr	r0, [r3, #0]
 8007eae:	f000 bbef 	b.w	8008690 <_malloc_r>
 8007eb2:	bf00      	nop
 8007eb4:	20000074 	.word	0x20000074

08007eb8 <memcpy>:
 8007eb8:	440a      	add	r2, r1
 8007eba:	4291      	cmp	r1, r2
 8007ebc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007ec0:	d100      	bne.n	8007ec4 <memcpy+0xc>
 8007ec2:	4770      	bx	lr
 8007ec4:	b510      	push	{r4, lr}
 8007ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ece:	4291      	cmp	r1, r2
 8007ed0:	d1f9      	bne.n	8007ec6 <memcpy+0xe>
 8007ed2:	bd10      	pop	{r4, pc}

08007ed4 <_Balloc>:
 8007ed4:	b570      	push	{r4, r5, r6, lr}
 8007ed6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ed8:	4604      	mov	r4, r0
 8007eda:	460d      	mov	r5, r1
 8007edc:	b976      	cbnz	r6, 8007efc <_Balloc+0x28>
 8007ede:	2010      	movs	r0, #16
 8007ee0:	f7ff ffe2 	bl	8007ea8 <malloc>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	6260      	str	r0, [r4, #36]	; 0x24
 8007ee8:	b920      	cbnz	r0, 8007ef4 <_Balloc+0x20>
 8007eea:	4b18      	ldr	r3, [pc, #96]	; (8007f4c <_Balloc+0x78>)
 8007eec:	4818      	ldr	r0, [pc, #96]	; (8007f50 <_Balloc+0x7c>)
 8007eee:	2166      	movs	r1, #102	; 0x66
 8007ef0:	f000 fde8 	bl	8008ac4 <__assert_func>
 8007ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ef8:	6006      	str	r6, [r0, #0]
 8007efa:	60c6      	str	r6, [r0, #12]
 8007efc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007efe:	68f3      	ldr	r3, [r6, #12]
 8007f00:	b183      	cbz	r3, 8007f24 <_Balloc+0x50>
 8007f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f0a:	b9b8      	cbnz	r0, 8007f3c <_Balloc+0x68>
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	fa01 f605 	lsl.w	r6, r1, r5
 8007f12:	1d72      	adds	r2, r6, #5
 8007f14:	0092      	lsls	r2, r2, #2
 8007f16:	4620      	mov	r0, r4
 8007f18:	f000 fb5a 	bl	80085d0 <_calloc_r>
 8007f1c:	b160      	cbz	r0, 8007f38 <_Balloc+0x64>
 8007f1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f22:	e00e      	b.n	8007f42 <_Balloc+0x6e>
 8007f24:	2221      	movs	r2, #33	; 0x21
 8007f26:	2104      	movs	r1, #4
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 fb51 	bl	80085d0 <_calloc_r>
 8007f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f30:	60f0      	str	r0, [r6, #12]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e4      	bne.n	8007f02 <_Balloc+0x2e>
 8007f38:	2000      	movs	r0, #0
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	6802      	ldr	r2, [r0, #0]
 8007f3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f42:	2300      	movs	r3, #0
 8007f44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f48:	e7f7      	b.n	8007f3a <_Balloc+0x66>
 8007f4a:	bf00      	nop
 8007f4c:	0801c21d 	.word	0x0801c21d
 8007f50:	0801c304 	.word	0x0801c304

08007f54 <_Bfree>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f58:	4605      	mov	r5, r0
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	b976      	cbnz	r6, 8007f7c <_Bfree+0x28>
 8007f5e:	2010      	movs	r0, #16
 8007f60:	f7ff ffa2 	bl	8007ea8 <malloc>
 8007f64:	4602      	mov	r2, r0
 8007f66:	6268      	str	r0, [r5, #36]	; 0x24
 8007f68:	b920      	cbnz	r0, 8007f74 <_Bfree+0x20>
 8007f6a:	4b09      	ldr	r3, [pc, #36]	; (8007f90 <_Bfree+0x3c>)
 8007f6c:	4809      	ldr	r0, [pc, #36]	; (8007f94 <_Bfree+0x40>)
 8007f6e:	218a      	movs	r1, #138	; 0x8a
 8007f70:	f000 fda8 	bl	8008ac4 <__assert_func>
 8007f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f78:	6006      	str	r6, [r0, #0]
 8007f7a:	60c6      	str	r6, [r0, #12]
 8007f7c:	b13c      	cbz	r4, 8007f8e <_Bfree+0x3a>
 8007f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f80:	6862      	ldr	r2, [r4, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f88:	6021      	str	r1, [r4, #0]
 8007f8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f8e:	bd70      	pop	{r4, r5, r6, pc}
 8007f90:	0801c21d 	.word	0x0801c21d
 8007f94:	0801c304 	.word	0x0801c304

08007f98 <__multadd>:
 8007f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9c:	690e      	ldr	r6, [r1, #16]
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	4698      	mov	r8, r3
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	f101 0014 	add.w	r0, r1, #20
 8007fa8:	2300      	movs	r3, #0
 8007faa:	6805      	ldr	r5, [r0, #0]
 8007fac:	b2a9      	uxth	r1, r5
 8007fae:	fb02 8101 	mla	r1, r2, r1, r8
 8007fb2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007fb6:	0c2d      	lsrs	r5, r5, #16
 8007fb8:	fb02 c505 	mla	r5, r2, r5, ip
 8007fbc:	b289      	uxth	r1, r1
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007fc4:	429e      	cmp	r6, r3
 8007fc6:	f840 1b04 	str.w	r1, [r0], #4
 8007fca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007fce:	dcec      	bgt.n	8007faa <__multadd+0x12>
 8007fd0:	f1b8 0f00 	cmp.w	r8, #0
 8007fd4:	d022      	beq.n	800801c <__multadd+0x84>
 8007fd6:	68a3      	ldr	r3, [r4, #8]
 8007fd8:	42b3      	cmp	r3, r6
 8007fda:	dc19      	bgt.n	8008010 <__multadd+0x78>
 8007fdc:	6861      	ldr	r1, [r4, #4]
 8007fde:	4638      	mov	r0, r7
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	f7ff ff77 	bl	8007ed4 <_Balloc>
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	b928      	cbnz	r0, 8007ff6 <__multadd+0x5e>
 8007fea:	4602      	mov	r2, r0
 8007fec:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <__multadd+0x8c>)
 8007fee:	480e      	ldr	r0, [pc, #56]	; (8008028 <__multadd+0x90>)
 8007ff0:	21b5      	movs	r1, #181	; 0xb5
 8007ff2:	f000 fd67 	bl	8008ac4 <__assert_func>
 8007ff6:	6922      	ldr	r2, [r4, #16]
 8007ff8:	3202      	adds	r2, #2
 8007ffa:	f104 010c 	add.w	r1, r4, #12
 8007ffe:	0092      	lsls	r2, r2, #2
 8008000:	300c      	adds	r0, #12
 8008002:	f7ff ff59 	bl	8007eb8 <memcpy>
 8008006:	4621      	mov	r1, r4
 8008008:	4638      	mov	r0, r7
 800800a:	f7ff ffa3 	bl	8007f54 <_Bfree>
 800800e:	462c      	mov	r4, r5
 8008010:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008014:	3601      	adds	r6, #1
 8008016:	f8c3 8014 	str.w	r8, [r3, #20]
 800801a:	6126      	str	r6, [r4, #16]
 800801c:	4620      	mov	r0, r4
 800801e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008022:	bf00      	nop
 8008024:	0801c293 	.word	0x0801c293
 8008028:	0801c304 	.word	0x0801c304

0800802c <__hi0bits>:
 800802c:	0c03      	lsrs	r3, r0, #16
 800802e:	041b      	lsls	r3, r3, #16
 8008030:	b9d3      	cbnz	r3, 8008068 <__hi0bits+0x3c>
 8008032:	0400      	lsls	r0, r0, #16
 8008034:	2310      	movs	r3, #16
 8008036:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800803a:	bf04      	itt	eq
 800803c:	0200      	lsleq	r0, r0, #8
 800803e:	3308      	addeq	r3, #8
 8008040:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008044:	bf04      	itt	eq
 8008046:	0100      	lsleq	r0, r0, #4
 8008048:	3304      	addeq	r3, #4
 800804a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800804e:	bf04      	itt	eq
 8008050:	0080      	lsleq	r0, r0, #2
 8008052:	3302      	addeq	r3, #2
 8008054:	2800      	cmp	r0, #0
 8008056:	db05      	blt.n	8008064 <__hi0bits+0x38>
 8008058:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800805c:	f103 0301 	add.w	r3, r3, #1
 8008060:	bf08      	it	eq
 8008062:	2320      	moveq	r3, #32
 8008064:	4618      	mov	r0, r3
 8008066:	4770      	bx	lr
 8008068:	2300      	movs	r3, #0
 800806a:	e7e4      	b.n	8008036 <__hi0bits+0xa>

0800806c <__lo0bits>:
 800806c:	6803      	ldr	r3, [r0, #0]
 800806e:	f013 0207 	ands.w	r2, r3, #7
 8008072:	4601      	mov	r1, r0
 8008074:	d00b      	beq.n	800808e <__lo0bits+0x22>
 8008076:	07da      	lsls	r2, r3, #31
 8008078:	d424      	bmi.n	80080c4 <__lo0bits+0x58>
 800807a:	0798      	lsls	r0, r3, #30
 800807c:	bf49      	itett	mi
 800807e:	085b      	lsrmi	r3, r3, #1
 8008080:	089b      	lsrpl	r3, r3, #2
 8008082:	2001      	movmi	r0, #1
 8008084:	600b      	strmi	r3, [r1, #0]
 8008086:	bf5c      	itt	pl
 8008088:	600b      	strpl	r3, [r1, #0]
 800808a:	2002      	movpl	r0, #2
 800808c:	4770      	bx	lr
 800808e:	b298      	uxth	r0, r3
 8008090:	b9b0      	cbnz	r0, 80080c0 <__lo0bits+0x54>
 8008092:	0c1b      	lsrs	r3, r3, #16
 8008094:	2010      	movs	r0, #16
 8008096:	f013 0fff 	tst.w	r3, #255	; 0xff
 800809a:	bf04      	itt	eq
 800809c:	0a1b      	lsreq	r3, r3, #8
 800809e:	3008      	addeq	r0, #8
 80080a0:	071a      	lsls	r2, r3, #28
 80080a2:	bf04      	itt	eq
 80080a4:	091b      	lsreq	r3, r3, #4
 80080a6:	3004      	addeq	r0, #4
 80080a8:	079a      	lsls	r2, r3, #30
 80080aa:	bf04      	itt	eq
 80080ac:	089b      	lsreq	r3, r3, #2
 80080ae:	3002      	addeq	r0, #2
 80080b0:	07da      	lsls	r2, r3, #31
 80080b2:	d403      	bmi.n	80080bc <__lo0bits+0x50>
 80080b4:	085b      	lsrs	r3, r3, #1
 80080b6:	f100 0001 	add.w	r0, r0, #1
 80080ba:	d005      	beq.n	80080c8 <__lo0bits+0x5c>
 80080bc:	600b      	str	r3, [r1, #0]
 80080be:	4770      	bx	lr
 80080c0:	4610      	mov	r0, r2
 80080c2:	e7e8      	b.n	8008096 <__lo0bits+0x2a>
 80080c4:	2000      	movs	r0, #0
 80080c6:	4770      	bx	lr
 80080c8:	2020      	movs	r0, #32
 80080ca:	4770      	bx	lr

080080cc <__i2b>:
 80080cc:	b510      	push	{r4, lr}
 80080ce:	460c      	mov	r4, r1
 80080d0:	2101      	movs	r1, #1
 80080d2:	f7ff feff 	bl	8007ed4 <_Balloc>
 80080d6:	4602      	mov	r2, r0
 80080d8:	b928      	cbnz	r0, 80080e6 <__i2b+0x1a>
 80080da:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <__i2b+0x24>)
 80080dc:	4805      	ldr	r0, [pc, #20]	; (80080f4 <__i2b+0x28>)
 80080de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80080e2:	f000 fcef 	bl	8008ac4 <__assert_func>
 80080e6:	2301      	movs	r3, #1
 80080e8:	6144      	str	r4, [r0, #20]
 80080ea:	6103      	str	r3, [r0, #16]
 80080ec:	bd10      	pop	{r4, pc}
 80080ee:	bf00      	nop
 80080f0:	0801c293 	.word	0x0801c293
 80080f4:	0801c304 	.word	0x0801c304

080080f8 <__multiply>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	4614      	mov	r4, r2
 80080fe:	690a      	ldr	r2, [r1, #16]
 8008100:	6923      	ldr	r3, [r4, #16]
 8008102:	429a      	cmp	r2, r3
 8008104:	bfb8      	it	lt
 8008106:	460b      	movlt	r3, r1
 8008108:	460d      	mov	r5, r1
 800810a:	bfbc      	itt	lt
 800810c:	4625      	movlt	r5, r4
 800810e:	461c      	movlt	r4, r3
 8008110:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008114:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008118:	68ab      	ldr	r3, [r5, #8]
 800811a:	6869      	ldr	r1, [r5, #4]
 800811c:	eb0a 0709 	add.w	r7, sl, r9
 8008120:	42bb      	cmp	r3, r7
 8008122:	b085      	sub	sp, #20
 8008124:	bfb8      	it	lt
 8008126:	3101      	addlt	r1, #1
 8008128:	f7ff fed4 	bl	8007ed4 <_Balloc>
 800812c:	b930      	cbnz	r0, 800813c <__multiply+0x44>
 800812e:	4602      	mov	r2, r0
 8008130:	4b42      	ldr	r3, [pc, #264]	; (800823c <__multiply+0x144>)
 8008132:	4843      	ldr	r0, [pc, #268]	; (8008240 <__multiply+0x148>)
 8008134:	f240 115d 	movw	r1, #349	; 0x15d
 8008138:	f000 fcc4 	bl	8008ac4 <__assert_func>
 800813c:	f100 0614 	add.w	r6, r0, #20
 8008140:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008144:	4633      	mov	r3, r6
 8008146:	2200      	movs	r2, #0
 8008148:	4543      	cmp	r3, r8
 800814a:	d31e      	bcc.n	800818a <__multiply+0x92>
 800814c:	f105 0c14 	add.w	ip, r5, #20
 8008150:	f104 0314 	add.w	r3, r4, #20
 8008154:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008158:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800815c:	9202      	str	r2, [sp, #8]
 800815e:	ebac 0205 	sub.w	r2, ip, r5
 8008162:	3a15      	subs	r2, #21
 8008164:	f022 0203 	bic.w	r2, r2, #3
 8008168:	3204      	adds	r2, #4
 800816a:	f105 0115 	add.w	r1, r5, #21
 800816e:	458c      	cmp	ip, r1
 8008170:	bf38      	it	cc
 8008172:	2204      	movcc	r2, #4
 8008174:	9201      	str	r2, [sp, #4]
 8008176:	9a02      	ldr	r2, [sp, #8]
 8008178:	9303      	str	r3, [sp, #12]
 800817a:	429a      	cmp	r2, r3
 800817c:	d808      	bhi.n	8008190 <__multiply+0x98>
 800817e:	2f00      	cmp	r7, #0
 8008180:	dc55      	bgt.n	800822e <__multiply+0x136>
 8008182:	6107      	str	r7, [r0, #16]
 8008184:	b005      	add	sp, #20
 8008186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818a:	f843 2b04 	str.w	r2, [r3], #4
 800818e:	e7db      	b.n	8008148 <__multiply+0x50>
 8008190:	f8b3 a000 	ldrh.w	sl, [r3]
 8008194:	f1ba 0f00 	cmp.w	sl, #0
 8008198:	d020      	beq.n	80081dc <__multiply+0xe4>
 800819a:	f105 0e14 	add.w	lr, r5, #20
 800819e:	46b1      	mov	r9, r6
 80081a0:	2200      	movs	r2, #0
 80081a2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80081a6:	f8d9 b000 	ldr.w	fp, [r9]
 80081aa:	b2a1      	uxth	r1, r4
 80081ac:	fa1f fb8b 	uxth.w	fp, fp
 80081b0:	fb0a b101 	mla	r1, sl, r1, fp
 80081b4:	4411      	add	r1, r2
 80081b6:	f8d9 2000 	ldr.w	r2, [r9]
 80081ba:	0c24      	lsrs	r4, r4, #16
 80081bc:	0c12      	lsrs	r2, r2, #16
 80081be:	fb0a 2404 	mla	r4, sl, r4, r2
 80081c2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80081c6:	b289      	uxth	r1, r1
 80081c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80081cc:	45f4      	cmp	ip, lr
 80081ce:	f849 1b04 	str.w	r1, [r9], #4
 80081d2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80081d6:	d8e4      	bhi.n	80081a2 <__multiply+0xaa>
 80081d8:	9901      	ldr	r1, [sp, #4]
 80081da:	5072      	str	r2, [r6, r1]
 80081dc:	9a03      	ldr	r2, [sp, #12]
 80081de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081e2:	3304      	adds	r3, #4
 80081e4:	f1b9 0f00 	cmp.w	r9, #0
 80081e8:	d01f      	beq.n	800822a <__multiply+0x132>
 80081ea:	6834      	ldr	r4, [r6, #0]
 80081ec:	f105 0114 	add.w	r1, r5, #20
 80081f0:	46b6      	mov	lr, r6
 80081f2:	f04f 0a00 	mov.w	sl, #0
 80081f6:	880a      	ldrh	r2, [r1, #0]
 80081f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80081fc:	fb09 b202 	mla	r2, r9, r2, fp
 8008200:	4492      	add	sl, r2
 8008202:	b2a4      	uxth	r4, r4
 8008204:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008208:	f84e 4b04 	str.w	r4, [lr], #4
 800820c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008210:	f8be 2000 	ldrh.w	r2, [lr]
 8008214:	0c24      	lsrs	r4, r4, #16
 8008216:	fb09 2404 	mla	r4, r9, r4, r2
 800821a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800821e:	458c      	cmp	ip, r1
 8008220:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008224:	d8e7      	bhi.n	80081f6 <__multiply+0xfe>
 8008226:	9a01      	ldr	r2, [sp, #4]
 8008228:	50b4      	str	r4, [r6, r2]
 800822a:	3604      	adds	r6, #4
 800822c:	e7a3      	b.n	8008176 <__multiply+0x7e>
 800822e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1a5      	bne.n	8008182 <__multiply+0x8a>
 8008236:	3f01      	subs	r7, #1
 8008238:	e7a1      	b.n	800817e <__multiply+0x86>
 800823a:	bf00      	nop
 800823c:	0801c293 	.word	0x0801c293
 8008240:	0801c304 	.word	0x0801c304

08008244 <__pow5mult>:
 8008244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008248:	4615      	mov	r5, r2
 800824a:	f012 0203 	ands.w	r2, r2, #3
 800824e:	4606      	mov	r6, r0
 8008250:	460f      	mov	r7, r1
 8008252:	d007      	beq.n	8008264 <__pow5mult+0x20>
 8008254:	4c25      	ldr	r4, [pc, #148]	; (80082ec <__pow5mult+0xa8>)
 8008256:	3a01      	subs	r2, #1
 8008258:	2300      	movs	r3, #0
 800825a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800825e:	f7ff fe9b 	bl	8007f98 <__multadd>
 8008262:	4607      	mov	r7, r0
 8008264:	10ad      	asrs	r5, r5, #2
 8008266:	d03d      	beq.n	80082e4 <__pow5mult+0xa0>
 8008268:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800826a:	b97c      	cbnz	r4, 800828c <__pow5mult+0x48>
 800826c:	2010      	movs	r0, #16
 800826e:	f7ff fe1b 	bl	8007ea8 <malloc>
 8008272:	4602      	mov	r2, r0
 8008274:	6270      	str	r0, [r6, #36]	; 0x24
 8008276:	b928      	cbnz	r0, 8008284 <__pow5mult+0x40>
 8008278:	4b1d      	ldr	r3, [pc, #116]	; (80082f0 <__pow5mult+0xac>)
 800827a:	481e      	ldr	r0, [pc, #120]	; (80082f4 <__pow5mult+0xb0>)
 800827c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008280:	f000 fc20 	bl	8008ac4 <__assert_func>
 8008284:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008288:	6004      	str	r4, [r0, #0]
 800828a:	60c4      	str	r4, [r0, #12]
 800828c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008290:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008294:	b94c      	cbnz	r4, 80082aa <__pow5mult+0x66>
 8008296:	f240 2171 	movw	r1, #625	; 0x271
 800829a:	4630      	mov	r0, r6
 800829c:	f7ff ff16 	bl	80080cc <__i2b>
 80082a0:	2300      	movs	r3, #0
 80082a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80082a6:	4604      	mov	r4, r0
 80082a8:	6003      	str	r3, [r0, #0]
 80082aa:	f04f 0900 	mov.w	r9, #0
 80082ae:	07eb      	lsls	r3, r5, #31
 80082b0:	d50a      	bpl.n	80082c8 <__pow5mult+0x84>
 80082b2:	4639      	mov	r1, r7
 80082b4:	4622      	mov	r2, r4
 80082b6:	4630      	mov	r0, r6
 80082b8:	f7ff ff1e 	bl	80080f8 <__multiply>
 80082bc:	4639      	mov	r1, r7
 80082be:	4680      	mov	r8, r0
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7ff fe47 	bl	8007f54 <_Bfree>
 80082c6:	4647      	mov	r7, r8
 80082c8:	106d      	asrs	r5, r5, #1
 80082ca:	d00b      	beq.n	80082e4 <__pow5mult+0xa0>
 80082cc:	6820      	ldr	r0, [r4, #0]
 80082ce:	b938      	cbnz	r0, 80082e0 <__pow5mult+0x9c>
 80082d0:	4622      	mov	r2, r4
 80082d2:	4621      	mov	r1, r4
 80082d4:	4630      	mov	r0, r6
 80082d6:	f7ff ff0f 	bl	80080f8 <__multiply>
 80082da:	6020      	str	r0, [r4, #0]
 80082dc:	f8c0 9000 	str.w	r9, [r0]
 80082e0:	4604      	mov	r4, r0
 80082e2:	e7e4      	b.n	80082ae <__pow5mult+0x6a>
 80082e4:	4638      	mov	r0, r7
 80082e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ea:	bf00      	nop
 80082ec:	0801c458 	.word	0x0801c458
 80082f0:	0801c21d 	.word	0x0801c21d
 80082f4:	0801c304 	.word	0x0801c304

080082f8 <__lshift>:
 80082f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082fc:	460c      	mov	r4, r1
 80082fe:	6849      	ldr	r1, [r1, #4]
 8008300:	6923      	ldr	r3, [r4, #16]
 8008302:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008306:	68a3      	ldr	r3, [r4, #8]
 8008308:	4607      	mov	r7, r0
 800830a:	4691      	mov	r9, r2
 800830c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008310:	f108 0601 	add.w	r6, r8, #1
 8008314:	42b3      	cmp	r3, r6
 8008316:	db0b      	blt.n	8008330 <__lshift+0x38>
 8008318:	4638      	mov	r0, r7
 800831a:	f7ff fddb 	bl	8007ed4 <_Balloc>
 800831e:	4605      	mov	r5, r0
 8008320:	b948      	cbnz	r0, 8008336 <__lshift+0x3e>
 8008322:	4602      	mov	r2, r0
 8008324:	4b28      	ldr	r3, [pc, #160]	; (80083c8 <__lshift+0xd0>)
 8008326:	4829      	ldr	r0, [pc, #164]	; (80083cc <__lshift+0xd4>)
 8008328:	f240 11d9 	movw	r1, #473	; 0x1d9
 800832c:	f000 fbca 	bl	8008ac4 <__assert_func>
 8008330:	3101      	adds	r1, #1
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	e7ee      	b.n	8008314 <__lshift+0x1c>
 8008336:	2300      	movs	r3, #0
 8008338:	f100 0114 	add.w	r1, r0, #20
 800833c:	f100 0210 	add.w	r2, r0, #16
 8008340:	4618      	mov	r0, r3
 8008342:	4553      	cmp	r3, sl
 8008344:	db33      	blt.n	80083ae <__lshift+0xb6>
 8008346:	6920      	ldr	r0, [r4, #16]
 8008348:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800834c:	f104 0314 	add.w	r3, r4, #20
 8008350:	f019 091f 	ands.w	r9, r9, #31
 8008354:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008358:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800835c:	d02b      	beq.n	80083b6 <__lshift+0xbe>
 800835e:	f1c9 0e20 	rsb	lr, r9, #32
 8008362:	468a      	mov	sl, r1
 8008364:	2200      	movs	r2, #0
 8008366:	6818      	ldr	r0, [r3, #0]
 8008368:	fa00 f009 	lsl.w	r0, r0, r9
 800836c:	4302      	orrs	r2, r0
 800836e:	f84a 2b04 	str.w	r2, [sl], #4
 8008372:	f853 2b04 	ldr.w	r2, [r3], #4
 8008376:	459c      	cmp	ip, r3
 8008378:	fa22 f20e 	lsr.w	r2, r2, lr
 800837c:	d8f3      	bhi.n	8008366 <__lshift+0x6e>
 800837e:	ebac 0304 	sub.w	r3, ip, r4
 8008382:	3b15      	subs	r3, #21
 8008384:	f023 0303 	bic.w	r3, r3, #3
 8008388:	3304      	adds	r3, #4
 800838a:	f104 0015 	add.w	r0, r4, #21
 800838e:	4584      	cmp	ip, r0
 8008390:	bf38      	it	cc
 8008392:	2304      	movcc	r3, #4
 8008394:	50ca      	str	r2, [r1, r3]
 8008396:	b10a      	cbz	r2, 800839c <__lshift+0xa4>
 8008398:	f108 0602 	add.w	r6, r8, #2
 800839c:	3e01      	subs	r6, #1
 800839e:	4638      	mov	r0, r7
 80083a0:	612e      	str	r6, [r5, #16]
 80083a2:	4621      	mov	r1, r4
 80083a4:	f7ff fdd6 	bl	8007f54 <_Bfree>
 80083a8:	4628      	mov	r0, r5
 80083aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80083b2:	3301      	adds	r3, #1
 80083b4:	e7c5      	b.n	8008342 <__lshift+0x4a>
 80083b6:	3904      	subs	r1, #4
 80083b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80083c0:	459c      	cmp	ip, r3
 80083c2:	d8f9      	bhi.n	80083b8 <__lshift+0xc0>
 80083c4:	e7ea      	b.n	800839c <__lshift+0xa4>
 80083c6:	bf00      	nop
 80083c8:	0801c293 	.word	0x0801c293
 80083cc:	0801c304 	.word	0x0801c304

080083d0 <__mcmp>:
 80083d0:	b530      	push	{r4, r5, lr}
 80083d2:	6902      	ldr	r2, [r0, #16]
 80083d4:	690c      	ldr	r4, [r1, #16]
 80083d6:	1b12      	subs	r2, r2, r4
 80083d8:	d10e      	bne.n	80083f8 <__mcmp+0x28>
 80083da:	f100 0314 	add.w	r3, r0, #20
 80083de:	3114      	adds	r1, #20
 80083e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80083e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80083e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80083ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80083f0:	42a5      	cmp	r5, r4
 80083f2:	d003      	beq.n	80083fc <__mcmp+0x2c>
 80083f4:	d305      	bcc.n	8008402 <__mcmp+0x32>
 80083f6:	2201      	movs	r2, #1
 80083f8:	4610      	mov	r0, r2
 80083fa:	bd30      	pop	{r4, r5, pc}
 80083fc:	4283      	cmp	r3, r0
 80083fe:	d3f3      	bcc.n	80083e8 <__mcmp+0x18>
 8008400:	e7fa      	b.n	80083f8 <__mcmp+0x28>
 8008402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008406:	e7f7      	b.n	80083f8 <__mcmp+0x28>

08008408 <__mdiff>:
 8008408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	460c      	mov	r4, r1
 800840e:	4606      	mov	r6, r0
 8008410:	4611      	mov	r1, r2
 8008412:	4620      	mov	r0, r4
 8008414:	4617      	mov	r7, r2
 8008416:	f7ff ffdb 	bl	80083d0 <__mcmp>
 800841a:	1e05      	subs	r5, r0, #0
 800841c:	d110      	bne.n	8008440 <__mdiff+0x38>
 800841e:	4629      	mov	r1, r5
 8008420:	4630      	mov	r0, r6
 8008422:	f7ff fd57 	bl	8007ed4 <_Balloc>
 8008426:	b930      	cbnz	r0, 8008436 <__mdiff+0x2e>
 8008428:	4b39      	ldr	r3, [pc, #228]	; (8008510 <__mdiff+0x108>)
 800842a:	4602      	mov	r2, r0
 800842c:	f240 2132 	movw	r1, #562	; 0x232
 8008430:	4838      	ldr	r0, [pc, #224]	; (8008514 <__mdiff+0x10c>)
 8008432:	f000 fb47 	bl	8008ac4 <__assert_func>
 8008436:	2301      	movs	r3, #1
 8008438:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800843c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008440:	bfa4      	itt	ge
 8008442:	463b      	movge	r3, r7
 8008444:	4627      	movge	r7, r4
 8008446:	4630      	mov	r0, r6
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	bfa6      	itte	ge
 800844c:	461c      	movge	r4, r3
 800844e:	2500      	movge	r5, #0
 8008450:	2501      	movlt	r5, #1
 8008452:	f7ff fd3f 	bl	8007ed4 <_Balloc>
 8008456:	b920      	cbnz	r0, 8008462 <__mdiff+0x5a>
 8008458:	4b2d      	ldr	r3, [pc, #180]	; (8008510 <__mdiff+0x108>)
 800845a:	4602      	mov	r2, r0
 800845c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008460:	e7e6      	b.n	8008430 <__mdiff+0x28>
 8008462:	693e      	ldr	r6, [r7, #16]
 8008464:	60c5      	str	r5, [r0, #12]
 8008466:	6925      	ldr	r5, [r4, #16]
 8008468:	f107 0114 	add.w	r1, r7, #20
 800846c:	f104 0914 	add.w	r9, r4, #20
 8008470:	f100 0e14 	add.w	lr, r0, #20
 8008474:	f107 0210 	add.w	r2, r7, #16
 8008478:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800847c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008480:	46f2      	mov	sl, lr
 8008482:	2700      	movs	r7, #0
 8008484:	f859 3b04 	ldr.w	r3, [r9], #4
 8008488:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800848c:	fa1f f883 	uxth.w	r8, r3
 8008490:	fa17 f78b 	uxtah	r7, r7, fp
 8008494:	0c1b      	lsrs	r3, r3, #16
 8008496:	eba7 0808 	sub.w	r8, r7, r8
 800849a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800849e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80084a2:	fa1f f888 	uxth.w	r8, r8
 80084a6:	141f      	asrs	r7, r3, #16
 80084a8:	454d      	cmp	r5, r9
 80084aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80084ae:	f84a 3b04 	str.w	r3, [sl], #4
 80084b2:	d8e7      	bhi.n	8008484 <__mdiff+0x7c>
 80084b4:	1b2b      	subs	r3, r5, r4
 80084b6:	3b15      	subs	r3, #21
 80084b8:	f023 0303 	bic.w	r3, r3, #3
 80084bc:	3304      	adds	r3, #4
 80084be:	3415      	adds	r4, #21
 80084c0:	42a5      	cmp	r5, r4
 80084c2:	bf38      	it	cc
 80084c4:	2304      	movcc	r3, #4
 80084c6:	4419      	add	r1, r3
 80084c8:	4473      	add	r3, lr
 80084ca:	469e      	mov	lr, r3
 80084cc:	460d      	mov	r5, r1
 80084ce:	4565      	cmp	r5, ip
 80084d0:	d30e      	bcc.n	80084f0 <__mdiff+0xe8>
 80084d2:	f10c 0203 	add.w	r2, ip, #3
 80084d6:	1a52      	subs	r2, r2, r1
 80084d8:	f022 0203 	bic.w	r2, r2, #3
 80084dc:	3903      	subs	r1, #3
 80084de:	458c      	cmp	ip, r1
 80084e0:	bf38      	it	cc
 80084e2:	2200      	movcc	r2, #0
 80084e4:	441a      	add	r2, r3
 80084e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80084ea:	b17b      	cbz	r3, 800850c <__mdiff+0x104>
 80084ec:	6106      	str	r6, [r0, #16]
 80084ee:	e7a5      	b.n	800843c <__mdiff+0x34>
 80084f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80084f4:	fa17 f488 	uxtah	r4, r7, r8
 80084f8:	1422      	asrs	r2, r4, #16
 80084fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80084fe:	b2a4      	uxth	r4, r4
 8008500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008504:	f84e 4b04 	str.w	r4, [lr], #4
 8008508:	1417      	asrs	r7, r2, #16
 800850a:	e7e0      	b.n	80084ce <__mdiff+0xc6>
 800850c:	3e01      	subs	r6, #1
 800850e:	e7ea      	b.n	80084e6 <__mdiff+0xde>
 8008510:	0801c293 	.word	0x0801c293
 8008514:	0801c304 	.word	0x0801c304

08008518 <__d2b>:
 8008518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800851c:	4689      	mov	r9, r1
 800851e:	2101      	movs	r1, #1
 8008520:	ec57 6b10 	vmov	r6, r7, d0
 8008524:	4690      	mov	r8, r2
 8008526:	f7ff fcd5 	bl	8007ed4 <_Balloc>
 800852a:	4604      	mov	r4, r0
 800852c:	b930      	cbnz	r0, 800853c <__d2b+0x24>
 800852e:	4602      	mov	r2, r0
 8008530:	4b25      	ldr	r3, [pc, #148]	; (80085c8 <__d2b+0xb0>)
 8008532:	4826      	ldr	r0, [pc, #152]	; (80085cc <__d2b+0xb4>)
 8008534:	f240 310a 	movw	r1, #778	; 0x30a
 8008538:	f000 fac4 	bl	8008ac4 <__assert_func>
 800853c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008544:	bb35      	cbnz	r5, 8008594 <__d2b+0x7c>
 8008546:	2e00      	cmp	r6, #0
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	d028      	beq.n	800859e <__d2b+0x86>
 800854c:	4668      	mov	r0, sp
 800854e:	9600      	str	r6, [sp, #0]
 8008550:	f7ff fd8c 	bl	800806c <__lo0bits>
 8008554:	9900      	ldr	r1, [sp, #0]
 8008556:	b300      	cbz	r0, 800859a <__d2b+0x82>
 8008558:	9a01      	ldr	r2, [sp, #4]
 800855a:	f1c0 0320 	rsb	r3, r0, #32
 800855e:	fa02 f303 	lsl.w	r3, r2, r3
 8008562:	430b      	orrs	r3, r1
 8008564:	40c2      	lsrs	r2, r0
 8008566:	6163      	str	r3, [r4, #20]
 8008568:	9201      	str	r2, [sp, #4]
 800856a:	9b01      	ldr	r3, [sp, #4]
 800856c:	61a3      	str	r3, [r4, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	bf14      	ite	ne
 8008572:	2202      	movne	r2, #2
 8008574:	2201      	moveq	r2, #1
 8008576:	6122      	str	r2, [r4, #16]
 8008578:	b1d5      	cbz	r5, 80085b0 <__d2b+0x98>
 800857a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800857e:	4405      	add	r5, r0
 8008580:	f8c9 5000 	str.w	r5, [r9]
 8008584:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008588:	f8c8 0000 	str.w	r0, [r8]
 800858c:	4620      	mov	r0, r4
 800858e:	b003      	add	sp, #12
 8008590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008598:	e7d5      	b.n	8008546 <__d2b+0x2e>
 800859a:	6161      	str	r1, [r4, #20]
 800859c:	e7e5      	b.n	800856a <__d2b+0x52>
 800859e:	a801      	add	r0, sp, #4
 80085a0:	f7ff fd64 	bl	800806c <__lo0bits>
 80085a4:	9b01      	ldr	r3, [sp, #4]
 80085a6:	6163      	str	r3, [r4, #20]
 80085a8:	2201      	movs	r2, #1
 80085aa:	6122      	str	r2, [r4, #16]
 80085ac:	3020      	adds	r0, #32
 80085ae:	e7e3      	b.n	8008578 <__d2b+0x60>
 80085b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085b8:	f8c9 0000 	str.w	r0, [r9]
 80085bc:	6918      	ldr	r0, [r3, #16]
 80085be:	f7ff fd35 	bl	800802c <__hi0bits>
 80085c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085c6:	e7df      	b.n	8008588 <__d2b+0x70>
 80085c8:	0801c293 	.word	0x0801c293
 80085cc:	0801c304 	.word	0x0801c304

080085d0 <_calloc_r>:
 80085d0:	b513      	push	{r0, r1, r4, lr}
 80085d2:	434a      	muls	r2, r1
 80085d4:	4611      	mov	r1, r2
 80085d6:	9201      	str	r2, [sp, #4]
 80085d8:	f000 f85a 	bl	8008690 <_malloc_r>
 80085dc:	4604      	mov	r4, r0
 80085de:	b118      	cbz	r0, 80085e8 <_calloc_r+0x18>
 80085e0:	9a01      	ldr	r2, [sp, #4]
 80085e2:	2100      	movs	r1, #0
 80085e4:	f7fd fe7a 	bl	80062dc <memset>
 80085e8:	4620      	mov	r0, r4
 80085ea:	b002      	add	sp, #8
 80085ec:	bd10      	pop	{r4, pc}
	...

080085f0 <_free_r>:
 80085f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085f2:	2900      	cmp	r1, #0
 80085f4:	d048      	beq.n	8008688 <_free_r+0x98>
 80085f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fa:	9001      	str	r0, [sp, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008602:	bfb8      	it	lt
 8008604:	18e4      	addlt	r4, r4, r3
 8008606:	f000 fae3 	bl	8008bd0 <__malloc_lock>
 800860a:	4a20      	ldr	r2, [pc, #128]	; (800868c <_free_r+0x9c>)
 800860c:	9801      	ldr	r0, [sp, #4]
 800860e:	6813      	ldr	r3, [r2, #0]
 8008610:	4615      	mov	r5, r2
 8008612:	b933      	cbnz	r3, 8008622 <_free_r+0x32>
 8008614:	6063      	str	r3, [r4, #4]
 8008616:	6014      	str	r4, [r2, #0]
 8008618:	b003      	add	sp, #12
 800861a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800861e:	f000 badd 	b.w	8008bdc <__malloc_unlock>
 8008622:	42a3      	cmp	r3, r4
 8008624:	d90b      	bls.n	800863e <_free_r+0x4e>
 8008626:	6821      	ldr	r1, [r4, #0]
 8008628:	1862      	adds	r2, r4, r1
 800862a:	4293      	cmp	r3, r2
 800862c:	bf04      	itt	eq
 800862e:	681a      	ldreq	r2, [r3, #0]
 8008630:	685b      	ldreq	r3, [r3, #4]
 8008632:	6063      	str	r3, [r4, #4]
 8008634:	bf04      	itt	eq
 8008636:	1852      	addeq	r2, r2, r1
 8008638:	6022      	streq	r2, [r4, #0]
 800863a:	602c      	str	r4, [r5, #0]
 800863c:	e7ec      	b.n	8008618 <_free_r+0x28>
 800863e:	461a      	mov	r2, r3
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	b10b      	cbz	r3, 8008648 <_free_r+0x58>
 8008644:	42a3      	cmp	r3, r4
 8008646:	d9fa      	bls.n	800863e <_free_r+0x4e>
 8008648:	6811      	ldr	r1, [r2, #0]
 800864a:	1855      	adds	r5, r2, r1
 800864c:	42a5      	cmp	r5, r4
 800864e:	d10b      	bne.n	8008668 <_free_r+0x78>
 8008650:	6824      	ldr	r4, [r4, #0]
 8008652:	4421      	add	r1, r4
 8008654:	1854      	adds	r4, r2, r1
 8008656:	42a3      	cmp	r3, r4
 8008658:	6011      	str	r1, [r2, #0]
 800865a:	d1dd      	bne.n	8008618 <_free_r+0x28>
 800865c:	681c      	ldr	r4, [r3, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	6053      	str	r3, [r2, #4]
 8008662:	4421      	add	r1, r4
 8008664:	6011      	str	r1, [r2, #0]
 8008666:	e7d7      	b.n	8008618 <_free_r+0x28>
 8008668:	d902      	bls.n	8008670 <_free_r+0x80>
 800866a:	230c      	movs	r3, #12
 800866c:	6003      	str	r3, [r0, #0]
 800866e:	e7d3      	b.n	8008618 <_free_r+0x28>
 8008670:	6825      	ldr	r5, [r4, #0]
 8008672:	1961      	adds	r1, r4, r5
 8008674:	428b      	cmp	r3, r1
 8008676:	bf04      	itt	eq
 8008678:	6819      	ldreq	r1, [r3, #0]
 800867a:	685b      	ldreq	r3, [r3, #4]
 800867c:	6063      	str	r3, [r4, #4]
 800867e:	bf04      	itt	eq
 8008680:	1949      	addeq	r1, r1, r5
 8008682:	6021      	streq	r1, [r4, #0]
 8008684:	6054      	str	r4, [r2, #4]
 8008686:	e7c7      	b.n	8008618 <_free_r+0x28>
 8008688:	b003      	add	sp, #12
 800868a:	bd30      	pop	{r4, r5, pc}
 800868c:	2000026c 	.word	0x2000026c

08008690 <_malloc_r>:
 8008690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008692:	1ccd      	adds	r5, r1, #3
 8008694:	f025 0503 	bic.w	r5, r5, #3
 8008698:	3508      	adds	r5, #8
 800869a:	2d0c      	cmp	r5, #12
 800869c:	bf38      	it	cc
 800869e:	250c      	movcc	r5, #12
 80086a0:	2d00      	cmp	r5, #0
 80086a2:	4606      	mov	r6, r0
 80086a4:	db01      	blt.n	80086aa <_malloc_r+0x1a>
 80086a6:	42a9      	cmp	r1, r5
 80086a8:	d903      	bls.n	80086b2 <_malloc_r+0x22>
 80086aa:	230c      	movs	r3, #12
 80086ac:	6033      	str	r3, [r6, #0]
 80086ae:	2000      	movs	r0, #0
 80086b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086b2:	f000 fa8d 	bl	8008bd0 <__malloc_lock>
 80086b6:	4921      	ldr	r1, [pc, #132]	; (800873c <_malloc_r+0xac>)
 80086b8:	680a      	ldr	r2, [r1, #0]
 80086ba:	4614      	mov	r4, r2
 80086bc:	b99c      	cbnz	r4, 80086e6 <_malloc_r+0x56>
 80086be:	4f20      	ldr	r7, [pc, #128]	; (8008740 <_malloc_r+0xb0>)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	b923      	cbnz	r3, 80086ce <_malloc_r+0x3e>
 80086c4:	4621      	mov	r1, r4
 80086c6:	4630      	mov	r0, r6
 80086c8:	f000 f996 	bl	80089f8 <_sbrk_r>
 80086cc:	6038      	str	r0, [r7, #0]
 80086ce:	4629      	mov	r1, r5
 80086d0:	4630      	mov	r0, r6
 80086d2:	f000 f991 	bl	80089f8 <_sbrk_r>
 80086d6:	1c43      	adds	r3, r0, #1
 80086d8:	d123      	bne.n	8008722 <_malloc_r+0x92>
 80086da:	230c      	movs	r3, #12
 80086dc:	6033      	str	r3, [r6, #0]
 80086de:	4630      	mov	r0, r6
 80086e0:	f000 fa7c 	bl	8008bdc <__malloc_unlock>
 80086e4:	e7e3      	b.n	80086ae <_malloc_r+0x1e>
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	1b5b      	subs	r3, r3, r5
 80086ea:	d417      	bmi.n	800871c <_malloc_r+0x8c>
 80086ec:	2b0b      	cmp	r3, #11
 80086ee:	d903      	bls.n	80086f8 <_malloc_r+0x68>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	441c      	add	r4, r3
 80086f4:	6025      	str	r5, [r4, #0]
 80086f6:	e004      	b.n	8008702 <_malloc_r+0x72>
 80086f8:	6863      	ldr	r3, [r4, #4]
 80086fa:	42a2      	cmp	r2, r4
 80086fc:	bf0c      	ite	eq
 80086fe:	600b      	streq	r3, [r1, #0]
 8008700:	6053      	strne	r3, [r2, #4]
 8008702:	4630      	mov	r0, r6
 8008704:	f000 fa6a 	bl	8008bdc <__malloc_unlock>
 8008708:	f104 000b 	add.w	r0, r4, #11
 800870c:	1d23      	adds	r3, r4, #4
 800870e:	f020 0007 	bic.w	r0, r0, #7
 8008712:	1ac2      	subs	r2, r0, r3
 8008714:	d0cc      	beq.n	80086b0 <_malloc_r+0x20>
 8008716:	1a1b      	subs	r3, r3, r0
 8008718:	50a3      	str	r3, [r4, r2]
 800871a:	e7c9      	b.n	80086b0 <_malloc_r+0x20>
 800871c:	4622      	mov	r2, r4
 800871e:	6864      	ldr	r4, [r4, #4]
 8008720:	e7cc      	b.n	80086bc <_malloc_r+0x2c>
 8008722:	1cc4      	adds	r4, r0, #3
 8008724:	f024 0403 	bic.w	r4, r4, #3
 8008728:	42a0      	cmp	r0, r4
 800872a:	d0e3      	beq.n	80086f4 <_malloc_r+0x64>
 800872c:	1a21      	subs	r1, r4, r0
 800872e:	4630      	mov	r0, r6
 8008730:	f000 f962 	bl	80089f8 <_sbrk_r>
 8008734:	3001      	adds	r0, #1
 8008736:	d1dd      	bne.n	80086f4 <_malloc_r+0x64>
 8008738:	e7cf      	b.n	80086da <_malloc_r+0x4a>
 800873a:	bf00      	nop
 800873c:	2000026c 	.word	0x2000026c
 8008740:	20000270 	.word	0x20000270

08008744 <__sfputc_r>:
 8008744:	6893      	ldr	r3, [r2, #8]
 8008746:	3b01      	subs	r3, #1
 8008748:	2b00      	cmp	r3, #0
 800874a:	b410      	push	{r4}
 800874c:	6093      	str	r3, [r2, #8]
 800874e:	da08      	bge.n	8008762 <__sfputc_r+0x1e>
 8008750:	6994      	ldr	r4, [r2, #24]
 8008752:	42a3      	cmp	r3, r4
 8008754:	db01      	blt.n	800875a <__sfputc_r+0x16>
 8008756:	290a      	cmp	r1, #10
 8008758:	d103      	bne.n	8008762 <__sfputc_r+0x1e>
 800875a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800875e:	f7fe ba47 	b.w	8006bf0 <__swbuf_r>
 8008762:	6813      	ldr	r3, [r2, #0]
 8008764:	1c58      	adds	r0, r3, #1
 8008766:	6010      	str	r0, [r2, #0]
 8008768:	7019      	strb	r1, [r3, #0]
 800876a:	4608      	mov	r0, r1
 800876c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008770:	4770      	bx	lr

08008772 <__sfputs_r>:
 8008772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008774:	4606      	mov	r6, r0
 8008776:	460f      	mov	r7, r1
 8008778:	4614      	mov	r4, r2
 800877a:	18d5      	adds	r5, r2, r3
 800877c:	42ac      	cmp	r4, r5
 800877e:	d101      	bne.n	8008784 <__sfputs_r+0x12>
 8008780:	2000      	movs	r0, #0
 8008782:	e007      	b.n	8008794 <__sfputs_r+0x22>
 8008784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008788:	463a      	mov	r2, r7
 800878a:	4630      	mov	r0, r6
 800878c:	f7ff ffda 	bl	8008744 <__sfputc_r>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	d1f3      	bne.n	800877c <__sfputs_r+0xa>
 8008794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008798 <_vfiprintf_r>:
 8008798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879c:	460d      	mov	r5, r1
 800879e:	b09d      	sub	sp, #116	; 0x74
 80087a0:	4614      	mov	r4, r2
 80087a2:	4698      	mov	r8, r3
 80087a4:	4606      	mov	r6, r0
 80087a6:	b118      	cbz	r0, 80087b0 <_vfiprintf_r+0x18>
 80087a8:	6983      	ldr	r3, [r0, #24]
 80087aa:	b90b      	cbnz	r3, 80087b0 <_vfiprintf_r+0x18>
 80087ac:	f7ff fa72 	bl	8007c94 <__sinit>
 80087b0:	4b89      	ldr	r3, [pc, #548]	; (80089d8 <_vfiprintf_r+0x240>)
 80087b2:	429d      	cmp	r5, r3
 80087b4:	d11b      	bne.n	80087ee <_vfiprintf_r+0x56>
 80087b6:	6875      	ldr	r5, [r6, #4]
 80087b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087ba:	07d9      	lsls	r1, r3, #31
 80087bc:	d405      	bmi.n	80087ca <_vfiprintf_r+0x32>
 80087be:	89ab      	ldrh	r3, [r5, #12]
 80087c0:	059a      	lsls	r2, r3, #22
 80087c2:	d402      	bmi.n	80087ca <_vfiprintf_r+0x32>
 80087c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087c6:	f7ff fb08 	bl	8007dda <__retarget_lock_acquire_recursive>
 80087ca:	89ab      	ldrh	r3, [r5, #12]
 80087cc:	071b      	lsls	r3, r3, #28
 80087ce:	d501      	bpl.n	80087d4 <_vfiprintf_r+0x3c>
 80087d0:	692b      	ldr	r3, [r5, #16]
 80087d2:	b9eb      	cbnz	r3, 8008810 <_vfiprintf_r+0x78>
 80087d4:	4629      	mov	r1, r5
 80087d6:	4630      	mov	r0, r6
 80087d8:	f7fe fa5c 	bl	8006c94 <__swsetup_r>
 80087dc:	b1c0      	cbz	r0, 8008810 <_vfiprintf_r+0x78>
 80087de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087e0:	07dc      	lsls	r4, r3, #31
 80087e2:	d50e      	bpl.n	8008802 <_vfiprintf_r+0x6a>
 80087e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087e8:	b01d      	add	sp, #116	; 0x74
 80087ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ee:	4b7b      	ldr	r3, [pc, #492]	; (80089dc <_vfiprintf_r+0x244>)
 80087f0:	429d      	cmp	r5, r3
 80087f2:	d101      	bne.n	80087f8 <_vfiprintf_r+0x60>
 80087f4:	68b5      	ldr	r5, [r6, #8]
 80087f6:	e7df      	b.n	80087b8 <_vfiprintf_r+0x20>
 80087f8:	4b79      	ldr	r3, [pc, #484]	; (80089e0 <_vfiprintf_r+0x248>)
 80087fa:	429d      	cmp	r5, r3
 80087fc:	bf08      	it	eq
 80087fe:	68f5      	ldreq	r5, [r6, #12]
 8008800:	e7da      	b.n	80087b8 <_vfiprintf_r+0x20>
 8008802:	89ab      	ldrh	r3, [r5, #12]
 8008804:	0598      	lsls	r0, r3, #22
 8008806:	d4ed      	bmi.n	80087e4 <_vfiprintf_r+0x4c>
 8008808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800880a:	f7ff fae7 	bl	8007ddc <__retarget_lock_release_recursive>
 800880e:	e7e9      	b.n	80087e4 <_vfiprintf_r+0x4c>
 8008810:	2300      	movs	r3, #0
 8008812:	9309      	str	r3, [sp, #36]	; 0x24
 8008814:	2320      	movs	r3, #32
 8008816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800881a:	f8cd 800c 	str.w	r8, [sp, #12]
 800881e:	2330      	movs	r3, #48	; 0x30
 8008820:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089e4 <_vfiprintf_r+0x24c>
 8008824:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008828:	f04f 0901 	mov.w	r9, #1
 800882c:	4623      	mov	r3, r4
 800882e:	469a      	mov	sl, r3
 8008830:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008834:	b10a      	cbz	r2, 800883a <_vfiprintf_r+0xa2>
 8008836:	2a25      	cmp	r2, #37	; 0x25
 8008838:	d1f9      	bne.n	800882e <_vfiprintf_r+0x96>
 800883a:	ebba 0b04 	subs.w	fp, sl, r4
 800883e:	d00b      	beq.n	8008858 <_vfiprintf_r+0xc0>
 8008840:	465b      	mov	r3, fp
 8008842:	4622      	mov	r2, r4
 8008844:	4629      	mov	r1, r5
 8008846:	4630      	mov	r0, r6
 8008848:	f7ff ff93 	bl	8008772 <__sfputs_r>
 800884c:	3001      	adds	r0, #1
 800884e:	f000 80aa 	beq.w	80089a6 <_vfiprintf_r+0x20e>
 8008852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008854:	445a      	add	r2, fp
 8008856:	9209      	str	r2, [sp, #36]	; 0x24
 8008858:	f89a 3000 	ldrb.w	r3, [sl]
 800885c:	2b00      	cmp	r3, #0
 800885e:	f000 80a2 	beq.w	80089a6 <_vfiprintf_r+0x20e>
 8008862:	2300      	movs	r3, #0
 8008864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800886c:	f10a 0a01 	add.w	sl, sl, #1
 8008870:	9304      	str	r3, [sp, #16]
 8008872:	9307      	str	r3, [sp, #28]
 8008874:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008878:	931a      	str	r3, [sp, #104]	; 0x68
 800887a:	4654      	mov	r4, sl
 800887c:	2205      	movs	r2, #5
 800887e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008882:	4858      	ldr	r0, [pc, #352]	; (80089e4 <_vfiprintf_r+0x24c>)
 8008884:	f7f7 fd0c 	bl	80002a0 <memchr>
 8008888:	9a04      	ldr	r2, [sp, #16]
 800888a:	b9d8      	cbnz	r0, 80088c4 <_vfiprintf_r+0x12c>
 800888c:	06d1      	lsls	r1, r2, #27
 800888e:	bf44      	itt	mi
 8008890:	2320      	movmi	r3, #32
 8008892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008896:	0713      	lsls	r3, r2, #28
 8008898:	bf44      	itt	mi
 800889a:	232b      	movmi	r3, #43	; 0x2b
 800889c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088a0:	f89a 3000 	ldrb.w	r3, [sl]
 80088a4:	2b2a      	cmp	r3, #42	; 0x2a
 80088a6:	d015      	beq.n	80088d4 <_vfiprintf_r+0x13c>
 80088a8:	9a07      	ldr	r2, [sp, #28]
 80088aa:	4654      	mov	r4, sl
 80088ac:	2000      	movs	r0, #0
 80088ae:	f04f 0c0a 	mov.w	ip, #10
 80088b2:	4621      	mov	r1, r4
 80088b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088b8:	3b30      	subs	r3, #48	; 0x30
 80088ba:	2b09      	cmp	r3, #9
 80088bc:	d94e      	bls.n	800895c <_vfiprintf_r+0x1c4>
 80088be:	b1b0      	cbz	r0, 80088ee <_vfiprintf_r+0x156>
 80088c0:	9207      	str	r2, [sp, #28]
 80088c2:	e014      	b.n	80088ee <_vfiprintf_r+0x156>
 80088c4:	eba0 0308 	sub.w	r3, r0, r8
 80088c8:	fa09 f303 	lsl.w	r3, r9, r3
 80088cc:	4313      	orrs	r3, r2
 80088ce:	9304      	str	r3, [sp, #16]
 80088d0:	46a2      	mov	sl, r4
 80088d2:	e7d2      	b.n	800887a <_vfiprintf_r+0xe2>
 80088d4:	9b03      	ldr	r3, [sp, #12]
 80088d6:	1d19      	adds	r1, r3, #4
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	9103      	str	r1, [sp, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	bfbb      	ittet	lt
 80088e0:	425b      	neglt	r3, r3
 80088e2:	f042 0202 	orrlt.w	r2, r2, #2
 80088e6:	9307      	strge	r3, [sp, #28]
 80088e8:	9307      	strlt	r3, [sp, #28]
 80088ea:	bfb8      	it	lt
 80088ec:	9204      	strlt	r2, [sp, #16]
 80088ee:	7823      	ldrb	r3, [r4, #0]
 80088f0:	2b2e      	cmp	r3, #46	; 0x2e
 80088f2:	d10c      	bne.n	800890e <_vfiprintf_r+0x176>
 80088f4:	7863      	ldrb	r3, [r4, #1]
 80088f6:	2b2a      	cmp	r3, #42	; 0x2a
 80088f8:	d135      	bne.n	8008966 <_vfiprintf_r+0x1ce>
 80088fa:	9b03      	ldr	r3, [sp, #12]
 80088fc:	1d1a      	adds	r2, r3, #4
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	9203      	str	r2, [sp, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	bfb8      	it	lt
 8008906:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800890a:	3402      	adds	r4, #2
 800890c:	9305      	str	r3, [sp, #20]
 800890e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089f4 <_vfiprintf_r+0x25c>
 8008912:	7821      	ldrb	r1, [r4, #0]
 8008914:	2203      	movs	r2, #3
 8008916:	4650      	mov	r0, sl
 8008918:	f7f7 fcc2 	bl	80002a0 <memchr>
 800891c:	b140      	cbz	r0, 8008930 <_vfiprintf_r+0x198>
 800891e:	2340      	movs	r3, #64	; 0x40
 8008920:	eba0 000a 	sub.w	r0, r0, sl
 8008924:	fa03 f000 	lsl.w	r0, r3, r0
 8008928:	9b04      	ldr	r3, [sp, #16]
 800892a:	4303      	orrs	r3, r0
 800892c:	3401      	adds	r4, #1
 800892e:	9304      	str	r3, [sp, #16]
 8008930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008934:	482c      	ldr	r0, [pc, #176]	; (80089e8 <_vfiprintf_r+0x250>)
 8008936:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800893a:	2206      	movs	r2, #6
 800893c:	f7f7 fcb0 	bl	80002a0 <memchr>
 8008940:	2800      	cmp	r0, #0
 8008942:	d03f      	beq.n	80089c4 <_vfiprintf_r+0x22c>
 8008944:	4b29      	ldr	r3, [pc, #164]	; (80089ec <_vfiprintf_r+0x254>)
 8008946:	bb1b      	cbnz	r3, 8008990 <_vfiprintf_r+0x1f8>
 8008948:	9b03      	ldr	r3, [sp, #12]
 800894a:	3307      	adds	r3, #7
 800894c:	f023 0307 	bic.w	r3, r3, #7
 8008950:	3308      	adds	r3, #8
 8008952:	9303      	str	r3, [sp, #12]
 8008954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008956:	443b      	add	r3, r7
 8008958:	9309      	str	r3, [sp, #36]	; 0x24
 800895a:	e767      	b.n	800882c <_vfiprintf_r+0x94>
 800895c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008960:	460c      	mov	r4, r1
 8008962:	2001      	movs	r0, #1
 8008964:	e7a5      	b.n	80088b2 <_vfiprintf_r+0x11a>
 8008966:	2300      	movs	r3, #0
 8008968:	3401      	adds	r4, #1
 800896a:	9305      	str	r3, [sp, #20]
 800896c:	4619      	mov	r1, r3
 800896e:	f04f 0c0a 	mov.w	ip, #10
 8008972:	4620      	mov	r0, r4
 8008974:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008978:	3a30      	subs	r2, #48	; 0x30
 800897a:	2a09      	cmp	r2, #9
 800897c:	d903      	bls.n	8008986 <_vfiprintf_r+0x1ee>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0c5      	beq.n	800890e <_vfiprintf_r+0x176>
 8008982:	9105      	str	r1, [sp, #20]
 8008984:	e7c3      	b.n	800890e <_vfiprintf_r+0x176>
 8008986:	fb0c 2101 	mla	r1, ip, r1, r2
 800898a:	4604      	mov	r4, r0
 800898c:	2301      	movs	r3, #1
 800898e:	e7f0      	b.n	8008972 <_vfiprintf_r+0x1da>
 8008990:	ab03      	add	r3, sp, #12
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	462a      	mov	r2, r5
 8008996:	4b16      	ldr	r3, [pc, #88]	; (80089f0 <_vfiprintf_r+0x258>)
 8008998:	a904      	add	r1, sp, #16
 800899a:	4630      	mov	r0, r6
 800899c:	f7fd fd46 	bl	800642c <_printf_float>
 80089a0:	4607      	mov	r7, r0
 80089a2:	1c78      	adds	r0, r7, #1
 80089a4:	d1d6      	bne.n	8008954 <_vfiprintf_r+0x1bc>
 80089a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089a8:	07d9      	lsls	r1, r3, #31
 80089aa:	d405      	bmi.n	80089b8 <_vfiprintf_r+0x220>
 80089ac:	89ab      	ldrh	r3, [r5, #12]
 80089ae:	059a      	lsls	r2, r3, #22
 80089b0:	d402      	bmi.n	80089b8 <_vfiprintf_r+0x220>
 80089b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089b4:	f7ff fa12 	bl	8007ddc <__retarget_lock_release_recursive>
 80089b8:	89ab      	ldrh	r3, [r5, #12]
 80089ba:	065b      	lsls	r3, r3, #25
 80089bc:	f53f af12 	bmi.w	80087e4 <_vfiprintf_r+0x4c>
 80089c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089c2:	e711      	b.n	80087e8 <_vfiprintf_r+0x50>
 80089c4:	ab03      	add	r3, sp, #12
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	462a      	mov	r2, r5
 80089ca:	4b09      	ldr	r3, [pc, #36]	; (80089f0 <_vfiprintf_r+0x258>)
 80089cc:	a904      	add	r1, sp, #16
 80089ce:	4630      	mov	r0, r6
 80089d0:	f7fd ffd0 	bl	8006974 <_printf_i>
 80089d4:	e7e4      	b.n	80089a0 <_vfiprintf_r+0x208>
 80089d6:	bf00      	nop
 80089d8:	0801c2c4 	.word	0x0801c2c4
 80089dc:	0801c2e4 	.word	0x0801c2e4
 80089e0:	0801c2a4 	.word	0x0801c2a4
 80089e4:	0801c464 	.word	0x0801c464
 80089e8:	0801c46e 	.word	0x0801c46e
 80089ec:	0800642d 	.word	0x0800642d
 80089f0:	08008773 	.word	0x08008773
 80089f4:	0801c46a 	.word	0x0801c46a

080089f8 <_sbrk_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	4d06      	ldr	r5, [pc, #24]	; (8008a14 <_sbrk_r+0x1c>)
 80089fc:	2300      	movs	r3, #0
 80089fe:	4604      	mov	r4, r0
 8008a00:	4608      	mov	r0, r1
 8008a02:	602b      	str	r3, [r5, #0]
 8008a04:	f7f8 fe98 	bl	8001738 <_sbrk>
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	d102      	bne.n	8008a12 <_sbrk_r+0x1a>
 8008a0c:	682b      	ldr	r3, [r5, #0]
 8008a0e:	b103      	cbz	r3, 8008a12 <_sbrk_r+0x1a>
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
 8008a14:	20007470 	.word	0x20007470

08008a18 <__sread>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a20:	f000 f8e2 	bl	8008be8 <_read_r>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	bfab      	itete	ge
 8008a28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a2c:	181b      	addge	r3, r3, r0
 8008a2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a32:	bfac      	ite	ge
 8008a34:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a36:	81a3      	strhlt	r3, [r4, #12]
 8008a38:	bd10      	pop	{r4, pc}

08008a3a <__swrite>:
 8008a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3e:	461f      	mov	r7, r3
 8008a40:	898b      	ldrh	r3, [r1, #12]
 8008a42:	05db      	lsls	r3, r3, #23
 8008a44:	4605      	mov	r5, r0
 8008a46:	460c      	mov	r4, r1
 8008a48:	4616      	mov	r6, r2
 8008a4a:	d505      	bpl.n	8008a58 <__swrite+0x1e>
 8008a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a50:	2302      	movs	r3, #2
 8008a52:	2200      	movs	r2, #0
 8008a54:	f000 f898 	bl	8008b88 <_lseek_r>
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a62:	81a3      	strh	r3, [r4, #12]
 8008a64:	4632      	mov	r2, r6
 8008a66:	463b      	mov	r3, r7
 8008a68:	4628      	mov	r0, r5
 8008a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6e:	f000 b817 	b.w	8008aa0 <_write_r>

08008a72 <__sseek>:
 8008a72:	b510      	push	{r4, lr}
 8008a74:	460c      	mov	r4, r1
 8008a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a7a:	f000 f885 	bl	8008b88 <_lseek_r>
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	bf15      	itete	ne
 8008a84:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a8e:	81a3      	strheq	r3, [r4, #12]
 8008a90:	bf18      	it	ne
 8008a92:	81a3      	strhne	r3, [r4, #12]
 8008a94:	bd10      	pop	{r4, pc}

08008a96 <__sclose>:
 8008a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a9a:	f000 b831 	b.w	8008b00 <_close_r>
	...

08008aa0 <_write_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d07      	ldr	r5, [pc, #28]	; (8008ac0 <_write_r+0x20>)
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	4608      	mov	r0, r1
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	2200      	movs	r2, #0
 8008aac:	602a      	str	r2, [r5, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f7f8 fdf1 	bl	8001696 <_write>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_write_r+0x1e>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_write_r+0x1e>
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	20007470 	.word	0x20007470

08008ac4 <__assert_func>:
 8008ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ac6:	4614      	mov	r4, r2
 8008ac8:	461a      	mov	r2, r3
 8008aca:	4b09      	ldr	r3, [pc, #36]	; (8008af0 <__assert_func+0x2c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4605      	mov	r5, r0
 8008ad0:	68d8      	ldr	r0, [r3, #12]
 8008ad2:	b14c      	cbz	r4, 8008ae8 <__assert_func+0x24>
 8008ad4:	4b07      	ldr	r3, [pc, #28]	; (8008af4 <__assert_func+0x30>)
 8008ad6:	9100      	str	r1, [sp, #0]
 8008ad8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008adc:	4906      	ldr	r1, [pc, #24]	; (8008af8 <__assert_func+0x34>)
 8008ade:	462b      	mov	r3, r5
 8008ae0:	f000 f81e 	bl	8008b20 <fiprintf>
 8008ae4:	f000 f89f 	bl	8008c26 <abort>
 8008ae8:	4b04      	ldr	r3, [pc, #16]	; (8008afc <__assert_func+0x38>)
 8008aea:	461c      	mov	r4, r3
 8008aec:	e7f3      	b.n	8008ad6 <__assert_func+0x12>
 8008aee:	bf00      	nop
 8008af0:	20000074 	.word	0x20000074
 8008af4:	0801c475 	.word	0x0801c475
 8008af8:	0801c482 	.word	0x0801c482
 8008afc:	0801c4b0 	.word	0x0801c4b0

08008b00 <_close_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	4d06      	ldr	r5, [pc, #24]	; (8008b1c <_close_r+0x1c>)
 8008b04:	2300      	movs	r3, #0
 8008b06:	4604      	mov	r4, r0
 8008b08:	4608      	mov	r0, r1
 8008b0a:	602b      	str	r3, [r5, #0]
 8008b0c:	f7f8 fddf 	bl	80016ce <_close>
 8008b10:	1c43      	adds	r3, r0, #1
 8008b12:	d102      	bne.n	8008b1a <_close_r+0x1a>
 8008b14:	682b      	ldr	r3, [r5, #0]
 8008b16:	b103      	cbz	r3, 8008b1a <_close_r+0x1a>
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	20007470 	.word	0x20007470

08008b20 <fiprintf>:
 8008b20:	b40e      	push	{r1, r2, r3}
 8008b22:	b503      	push	{r0, r1, lr}
 8008b24:	4601      	mov	r1, r0
 8008b26:	ab03      	add	r3, sp, #12
 8008b28:	4805      	ldr	r0, [pc, #20]	; (8008b40 <fiprintf+0x20>)
 8008b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b2e:	6800      	ldr	r0, [r0, #0]
 8008b30:	9301      	str	r3, [sp, #4]
 8008b32:	f7ff fe31 	bl	8008798 <_vfiprintf_r>
 8008b36:	b002      	add	sp, #8
 8008b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b3c:	b003      	add	sp, #12
 8008b3e:	4770      	bx	lr
 8008b40:	20000074 	.word	0x20000074

08008b44 <_fstat_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	4d07      	ldr	r5, [pc, #28]	; (8008b64 <_fstat_r+0x20>)
 8008b48:	2300      	movs	r3, #0
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	4608      	mov	r0, r1
 8008b4e:	4611      	mov	r1, r2
 8008b50:	602b      	str	r3, [r5, #0]
 8008b52:	f7f8 fdc8 	bl	80016e6 <_fstat>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	d102      	bne.n	8008b60 <_fstat_r+0x1c>
 8008b5a:	682b      	ldr	r3, [r5, #0]
 8008b5c:	b103      	cbz	r3, 8008b60 <_fstat_r+0x1c>
 8008b5e:	6023      	str	r3, [r4, #0]
 8008b60:	bd38      	pop	{r3, r4, r5, pc}
 8008b62:	bf00      	nop
 8008b64:	20007470 	.word	0x20007470

08008b68 <_isatty_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4d06      	ldr	r5, [pc, #24]	; (8008b84 <_isatty_r+0x1c>)
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	4604      	mov	r4, r0
 8008b70:	4608      	mov	r0, r1
 8008b72:	602b      	str	r3, [r5, #0]
 8008b74:	f7f8 fdc7 	bl	8001706 <_isatty>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	d102      	bne.n	8008b82 <_isatty_r+0x1a>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	b103      	cbz	r3, 8008b82 <_isatty_r+0x1a>
 8008b80:	6023      	str	r3, [r4, #0]
 8008b82:	bd38      	pop	{r3, r4, r5, pc}
 8008b84:	20007470 	.word	0x20007470

08008b88 <_lseek_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4d07      	ldr	r5, [pc, #28]	; (8008ba8 <_lseek_r+0x20>)
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	4608      	mov	r0, r1
 8008b90:	4611      	mov	r1, r2
 8008b92:	2200      	movs	r2, #0
 8008b94:	602a      	str	r2, [r5, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	f7f8 fdc0 	bl	800171c <_lseek>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d102      	bne.n	8008ba6 <_lseek_r+0x1e>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	b103      	cbz	r3, 8008ba6 <_lseek_r+0x1e>
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	20007470 	.word	0x20007470

08008bac <__ascii_mbtowc>:
 8008bac:	b082      	sub	sp, #8
 8008bae:	b901      	cbnz	r1, 8008bb2 <__ascii_mbtowc+0x6>
 8008bb0:	a901      	add	r1, sp, #4
 8008bb2:	b142      	cbz	r2, 8008bc6 <__ascii_mbtowc+0x1a>
 8008bb4:	b14b      	cbz	r3, 8008bca <__ascii_mbtowc+0x1e>
 8008bb6:	7813      	ldrb	r3, [r2, #0]
 8008bb8:	600b      	str	r3, [r1, #0]
 8008bba:	7812      	ldrb	r2, [r2, #0]
 8008bbc:	1e10      	subs	r0, r2, #0
 8008bbe:	bf18      	it	ne
 8008bc0:	2001      	movne	r0, #1
 8008bc2:	b002      	add	sp, #8
 8008bc4:	4770      	bx	lr
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	e7fb      	b.n	8008bc2 <__ascii_mbtowc+0x16>
 8008bca:	f06f 0001 	mvn.w	r0, #1
 8008bce:	e7f8      	b.n	8008bc2 <__ascii_mbtowc+0x16>

08008bd0 <__malloc_lock>:
 8008bd0:	4801      	ldr	r0, [pc, #4]	; (8008bd8 <__malloc_lock+0x8>)
 8008bd2:	f7ff b902 	b.w	8007dda <__retarget_lock_acquire_recursive>
 8008bd6:	bf00      	nop
 8008bd8:	20007468 	.word	0x20007468

08008bdc <__malloc_unlock>:
 8008bdc:	4801      	ldr	r0, [pc, #4]	; (8008be4 <__malloc_unlock+0x8>)
 8008bde:	f7ff b8fd 	b.w	8007ddc <__retarget_lock_release_recursive>
 8008be2:	bf00      	nop
 8008be4:	20007468 	.word	0x20007468

08008be8 <_read_r>:
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	4d07      	ldr	r5, [pc, #28]	; (8008c08 <_read_r+0x20>)
 8008bec:	4604      	mov	r4, r0
 8008bee:	4608      	mov	r0, r1
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	602a      	str	r2, [r5, #0]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	f7f8 fd30 	bl	800165c <_read>
 8008bfc:	1c43      	adds	r3, r0, #1
 8008bfe:	d102      	bne.n	8008c06 <_read_r+0x1e>
 8008c00:	682b      	ldr	r3, [r5, #0]
 8008c02:	b103      	cbz	r3, 8008c06 <_read_r+0x1e>
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	bd38      	pop	{r3, r4, r5, pc}
 8008c08:	20007470 	.word	0x20007470

08008c0c <__ascii_wctomb>:
 8008c0c:	b149      	cbz	r1, 8008c22 <__ascii_wctomb+0x16>
 8008c0e:	2aff      	cmp	r2, #255	; 0xff
 8008c10:	bf85      	ittet	hi
 8008c12:	238a      	movhi	r3, #138	; 0x8a
 8008c14:	6003      	strhi	r3, [r0, #0]
 8008c16:	700a      	strbls	r2, [r1, #0]
 8008c18:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008c1c:	bf98      	it	ls
 8008c1e:	2001      	movls	r0, #1
 8008c20:	4770      	bx	lr
 8008c22:	4608      	mov	r0, r1
 8008c24:	4770      	bx	lr

08008c26 <abort>:
 8008c26:	b508      	push	{r3, lr}
 8008c28:	2006      	movs	r0, #6
 8008c2a:	f000 f82b 	bl	8008c84 <raise>
 8008c2e:	2001      	movs	r0, #1
 8008c30:	f7f8 fd0a 	bl	8001648 <_exit>

08008c34 <_raise_r>:
 8008c34:	291f      	cmp	r1, #31
 8008c36:	b538      	push	{r3, r4, r5, lr}
 8008c38:	4604      	mov	r4, r0
 8008c3a:	460d      	mov	r5, r1
 8008c3c:	d904      	bls.n	8008c48 <_raise_r+0x14>
 8008c3e:	2316      	movs	r3, #22
 8008c40:	6003      	str	r3, [r0, #0]
 8008c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c4a:	b112      	cbz	r2, 8008c52 <_raise_r+0x1e>
 8008c4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c50:	b94b      	cbnz	r3, 8008c66 <_raise_r+0x32>
 8008c52:	4620      	mov	r0, r4
 8008c54:	f000 f830 	bl	8008cb8 <_getpid_r>
 8008c58:	462a      	mov	r2, r5
 8008c5a:	4601      	mov	r1, r0
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c62:	f000 b817 	b.w	8008c94 <_kill_r>
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d00a      	beq.n	8008c80 <_raise_r+0x4c>
 8008c6a:	1c59      	adds	r1, r3, #1
 8008c6c:	d103      	bne.n	8008c76 <_raise_r+0x42>
 8008c6e:	2316      	movs	r3, #22
 8008c70:	6003      	str	r3, [r0, #0]
 8008c72:	2001      	movs	r0, #1
 8008c74:	e7e7      	b.n	8008c46 <_raise_r+0x12>
 8008c76:	2400      	movs	r4, #0
 8008c78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	4798      	blx	r3
 8008c80:	2000      	movs	r0, #0
 8008c82:	e7e0      	b.n	8008c46 <_raise_r+0x12>

08008c84 <raise>:
 8008c84:	4b02      	ldr	r3, [pc, #8]	; (8008c90 <raise+0xc>)
 8008c86:	4601      	mov	r1, r0
 8008c88:	6818      	ldr	r0, [r3, #0]
 8008c8a:	f7ff bfd3 	b.w	8008c34 <_raise_r>
 8008c8e:	bf00      	nop
 8008c90:	20000074 	.word	0x20000074

08008c94 <_kill_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	4d07      	ldr	r5, [pc, #28]	; (8008cb4 <_kill_r+0x20>)
 8008c98:	2300      	movs	r3, #0
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	602b      	str	r3, [r5, #0]
 8008ca2:	f7f8 fcc1 	bl	8001628 <_kill>
 8008ca6:	1c43      	adds	r3, r0, #1
 8008ca8:	d102      	bne.n	8008cb0 <_kill_r+0x1c>
 8008caa:	682b      	ldr	r3, [r5, #0]
 8008cac:	b103      	cbz	r3, 8008cb0 <_kill_r+0x1c>
 8008cae:	6023      	str	r3, [r4, #0]
 8008cb0:	bd38      	pop	{r3, r4, r5, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20007470 	.word	0x20007470

08008cb8 <_getpid_r>:
 8008cb8:	f7f8 bcae 	b.w	8001618 <_getpid>

08008cbc <sqrtf>:
 8008cbc:	b508      	push	{r3, lr}
 8008cbe:	ed2d 8b02 	vpush	{d8}
 8008cc2:	eeb0 8a40 	vmov.f32	s16, s0
 8008cc6:	f000 f81f 	bl	8008d08 <__ieee754_sqrtf>
 8008cca:	4b0d      	ldr	r3, [pc, #52]	; (8008d00 <sqrtf+0x44>)
 8008ccc:	f993 3000 	ldrsb.w	r3, [r3]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	d011      	beq.n	8008cf8 <sqrtf+0x3c>
 8008cd4:	eeb4 8a48 	vcmp.f32	s16, s16
 8008cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cdc:	d60c      	bvs.n	8008cf8 <sqrtf+0x3c>
 8008cde:	eddf 8a09 	vldr	s17, [pc, #36]	; 8008d04 <sqrtf+0x48>
 8008ce2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cea:	d505      	bpl.n	8008cf8 <sqrtf+0x3c>
 8008cec:	f7fd facc 	bl	8006288 <__errno>
 8008cf0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008cf4:	2321      	movs	r3, #33	; 0x21
 8008cf6:	6003      	str	r3, [r0, #0]
 8008cf8:	ecbd 8b02 	vpop	{d8}
 8008cfc:	bd08      	pop	{r3, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000244 	.word	0x20000244
 8008d04:	00000000 	.word	0x00000000

08008d08 <__ieee754_sqrtf>:
 8008d08:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008d0c:	4770      	bx	lr
	...

08008d10 <_init>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	bf00      	nop
 8008d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d16:	bc08      	pop	{r3}
 8008d18:	469e      	mov	lr, r3
 8008d1a:	4770      	bx	lr

08008d1c <_fini>:
 8008d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1e:	bf00      	nop
 8008d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d22:	bc08      	pop	{r3}
 8008d24:	469e      	mov	lr, r3
 8008d26:	4770      	bx	lr
