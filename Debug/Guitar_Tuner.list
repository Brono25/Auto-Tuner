
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005a6c  08005a6c  00015a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b58  08005b58  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005b58  08005b58  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b58  08005b58  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b5c  08005b5c  00015b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005b60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005db8  20000078  08005bd8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005e30  08005bd8  00025e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013792  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280b  00000000  00000000  0003383a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00036048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  000370f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002423c  00000000  00000000  00038080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011da2  00000000  00000000  0005c2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ded7d  00000000  00000000  0006e05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014cddb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed4  00000000  00000000  0014ce30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a54 	.word	0x08005a54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005a54 	.word	0x08005a54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <HAL_ADC_ConvHalfCpltCallback>:
	counter++;
}


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	in_buff = &adc_buff[0];
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000886:	4a09      	ldr	r2, [pc, #36]	; (80008ac <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000888:	601a      	str	r2, [r3, #0]
	out_buff = &dac_buff[HLF_BUFFER_LEN];
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800088c:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 800088e:	601a      	str	r2, [r3, #0]
	gain = 1;
 8000890:	4909      	ldr	r1, [pc, #36]	; (80008b8 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000892:	f04f 0200 	mov.w	r2, #0
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000898:	e9c1 2300 	strd	r2, r3, [r1]

}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	20000094 	.word	0x20000094
 80008ac:	200001fc 	.word	0x200001fc
 80008b0:	20000098 	.word	0x20000098
 80008b4:	20004714 	.word	0x20004714
 80008b8:	20000000 	.word	0x20000000
 80008bc:	3ff00000 	.word	0x3ff00000

080008c0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	in_buff = &adc_buff[HLF_BUFFER_LEN];
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_ADC_ConvCpltCallback+0x34>)
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <HAL_ADC_ConvCpltCallback+0x38>)
 80008cc:	601a      	str	r2, [r3, #0]
	out_buff = &dac_buff[0];
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_ADC_ConvCpltCallback+0x3c>)
 80008d0:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <HAL_ADC_ConvCpltCallback+0x40>)
 80008d2:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80008d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f002 fd3a 	bl	8003354 <HAL_GPIO_TogglePin>
	gain = 0.5;
 80008e0:	4908      	ldr	r1, [pc, #32]	; (8000904 <HAL_ADC_ConvCpltCallback+0x44>)
 80008e2:	f04f 0200 	mov.w	r2, #0
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_ADC_ConvCpltCallback+0x48>)
 80008e8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000094 	.word	0x20000094
 80008f8:	20001904 	.word	0x20001904
 80008fc:	20000098 	.word	0x20000098
 8000900:	2000300c 	.word	0x2000300c
 8000904:	20000000 	.word	0x20000000
 8000908:	3fe00000 	.word	0x3fe00000

0800090c <process_dsp>:

void process_dsp()
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
	int sum = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	e02a      	b.n	8000972 <process_dsp+0x66>
	{
		out_buff[i] = gain * in_buff[i];
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <process_dsp+0x90>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	4413      	add	r3, r2
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	b29b      	uxth	r3, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff1c 	bl	8000768 <__aeabi_i2d>
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <process_dsp+0x94>)
 8000932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000936:	f7ff fc9b 	bl	8000270 <__aeabi_dmul>
 800093a:	4602      	mov	r2, r0
 800093c:	460b      	mov	r3, r1
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <process_dsp+0x98>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	18d4      	adds	r4, r2, r3
 800094c:	f7ff ff76 	bl	800083c <__aeabi_d2uiz>
 8000950:	4603      	mov	r3, r0
 8000952:	b29b      	uxth	r3, r3
 8000954:	8023      	strh	r3, [r4, #0]
		sum += in_buff[i];
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <process_dsp+0x90>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	b29b      	uxth	r3, r3
 8000964:	461a      	mov	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	f640 3283 	movw	r2, #2947	; 0xb83
 8000978:	4293      	cmp	r3, r2
 800097a:	ddcf      	ble.n	800091c <process_dsp+0x10>
	}
	sum = sum / HLF_BUFFER_LEN;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <process_dsp+0x9c>)
 8000980:	fb82 1203 	smull	r1, r2, r2, r3
 8000984:	1292      	asrs	r2, r2, #10
 8000986:	17db      	asrs	r3, r3, #31
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	607b      	str	r3, [r7, #4]
	printf("%d ", sum);
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	4807      	ldr	r0, [pc, #28]	; (80009ac <process_dsp+0xa0>)
 8000990:	f004 f90a 	bl	8004ba8 <iprintf>
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	20000094 	.word	0x20000094
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000098 	.word	0x20000098
 80009a8:	58ec3369 	.word	0x58ec3369
 80009ac:	08005a7c 	.word	0x08005a7c

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b6:	f000 fc50 	bl	800125a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ba:	f000 f82d 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009be:	f000 f96f 	bl	8000ca0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c2:	f000 f947 	bl	8000c54 <MX_DMA_Init>
  MX_ADC1_Init();
 80009c6:	f000 f877 	bl	8000ab8 <MX_ADC1_Init>
  MX_TIM6_Init();
 80009ca:	f000 f90d 	bl	8000be8 <MX_TIM6_Init>
  MX_DAC1_Init();
 80009ce:	f000 f8d9 	bl	8000b84 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 80009d2:	480c      	ldr	r0, [pc, #48]	; (8000a04 <main+0x54>)
 80009d4:	f003 fe9c 	bl	8004710 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim6, TIM_CHANNEL_6);
 80009d8:	2114      	movs	r1, #20
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <main+0x54>)
 80009dc:	f003 fee4 	bl	80047a8 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, FULL_BUFFER_LEN);
 80009e0:	f241 7208 	movw	r2, #5896	; 0x1708
 80009e4:	4908      	ldr	r1, [pc, #32]	; (8000a08 <main+0x58>)
 80009e6:	4809      	ldr	r0, [pc, #36]	; (8000a0c <main+0x5c>)
 80009e8:	f000 ffe0 	bl	80019ac <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)dac_buff,  FULL_BUFFER_LEN, DAC_ALIGN_12B_R);
 80009ec:	2300      	movs	r3, #0
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	f241 7308 	movw	r3, #5896	; 0x1708
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <main+0x60>)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4806      	ldr	r0, [pc, #24]	; (8000a14 <main+0x64>)
 80009fa:	f001 fe93 	bl	8002724 <HAL_DAC_Start_DMA>
  {


    /* USER CODE END WHILE */

	  process_dsp();
 80009fe:	f7ff ff85 	bl	800090c <process_dsp>
 8000a02:	e7fc      	b.n	80009fe <main+0x4e>
 8000a04:	200001b0 	.word	0x200001b0
 8000a08:	200001fc 	.word	0x200001fc
 8000a0c:	20000104 	.word	0x20000104
 8000a10:	2000300c 	.word	0x2000300c
 8000a14:	200000a8 	.word	0x200000a8

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b096      	sub	sp, #88	; 0x58
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2244      	movs	r2, #68	; 0x44
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f004 f8b6 	bl	8004b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a3e:	f002 fcb1 	bl	80033a4 <HAL_PWREx_ControlVoltageScaling>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a48:	f000 f976 	bl	8000d38 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000a5e:	2306      	movs	r3, #6
 8000a60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000a62:	2350      	movs	r3, #80	; 0x50
 8000a64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a66:	2307      	movs	r3, #7
 8000a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fcea 	bl	8003450 <HAL_RCC_OscConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a82:	f000 f959 	bl	8000d38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	230f      	movs	r3, #15
 8000a88:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f003 f8e8 	bl	8003c74 <HAL_RCC_ClockConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000aaa:	f000 f945 	bl	8000d38 <Error_Handler>
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3758      	adds	r7, #88	; 0x58
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000abe:	463b      	mov	r3, r7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
 8000acc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ace:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000ad0:	4a2a      	ldr	r2, [pc, #168]	; (8000b7c <MX_ADC1_Init+0xc4>)
 8000ad2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ada:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ae6:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aec:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000aee:	2204      	movs	r2, #4
 8000af0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000af2:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000afe:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000b0e:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000b16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b32:	4811      	ldr	r0, [pc, #68]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000b34:	f000 fdf2 	bl	800171c <HAL_ADC_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000b3e:	f000 f8fb 	bl	8000d38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_ADC1_Init+0xc8>)
 8000b44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b46:	2306      	movs	r3, #6
 8000b48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b4e:	237f      	movs	r3, #127	; 0x7f
 8000b50:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b52:	2304      	movs	r3, #4
 8000b54:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <MX_ADC1_Init+0xc0>)
 8000b60:	f000 ffb2 	bl	8001ac8 <HAL_ADC_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000b6a:	f000 f8e5 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000104 	.word	0x20000104
 8000b7c:	50040000 	.word	0x50040000
 8000b80:	14f00020 	.word	0x14f00020

08000b84 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2224      	movs	r2, #36	; 0x24
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f004 f801 	bl	8004b98 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x5c>)
 8000b98:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <MX_DAC1_Init+0x60>)
 8000b9a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b9c:	4810      	ldr	r0, [pc, #64]	; (8000be0 <MX_DAC1_Init+0x5c>)
 8000b9e:	f001 fd9e 	bl	80026de <HAL_DAC_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba8:	f000 f8c6 	bl	8000d38 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <MX_DAC1_Init+0x5c>)
 8000bc8:	f001 fe96 	bl	80028f8 <HAL_DAC_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bd2:	f000 f8b1 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200000a8 	.word	0x200000a8
 8000be4:	40007400 	.word	0x40007400

08000be8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_TIM6_Init+0x64>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <MX_TIM6_Init+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_TIM6_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_TIM6_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000 - 1;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_TIM6_Init+0x64>)
 8000c0c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_TIM6_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c18:	480c      	ldr	r0, [pc, #48]	; (8000c4c <MX_TIM6_Init+0x64>)
 8000c1a:	f003 fd21 	bl	8004660 <HAL_TIM_Base_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c24:	f000 f888 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c28:	2320      	movs	r3, #32
 8000c2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_TIM6_Init+0x64>)
 8000c36:	f003 ff1f 	bl	8004a78 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c40:	f000 f87a 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200001b0 	.word	0x200001b0
 8000c50:	40001000 	.word	0x40001000

08000c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <MX_DMA_Init+0x48>)
 8000c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <MX_DMA_Init+0x48>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6493      	str	r3, [r2, #72]	; 0x48
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <MX_DMA_Init+0x48>)
 8000c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	200b      	movs	r0, #11
 8000c78:	f001 fcfb 	bl	8002672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c7c:	200b      	movs	r0, #11
 8000c7e:	f001 fd14 	bl	80026aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	200d      	movs	r0, #13
 8000c88:	f001 fcf3 	bl	8002672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c8c:	200d      	movs	r0, #13
 8000c8e:	f001 fd0c 	bl	80026aa <HAL_NVIC_EnableIRQ>

}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <MX_GPIO_Init+0x94>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4a1e      	ldr	r2, [pc, #120]	; (8000d34 <MX_GPIO_Init+0x94>)
 8000cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <MX_GPIO_Init+0x94>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <MX_GPIO_Init+0x94>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	4a18      	ldr	r2, [pc, #96]	; (8000d34 <MX_GPIO_Init+0x94>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_GPIO_Init+0x94>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_GPIO_Init+0x94>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <MX_GPIO_Init+0x94>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <MX_GPIO_Init+0x94>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f002 fb0c 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000d0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	4619      	mov	r1, r3
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f002 f982 	bl	8003030 <HAL_GPIO_Init>

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40021000 	.word	0x40021000

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_MspInit+0x44>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_MspInit+0x44>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6613      	str	r3, [r2, #96]	; 0x60
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_MspInit+0x44>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x44>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x44>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x44>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0a0      	sub	sp, #128	; 0x80
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	225c      	movs	r2, #92	; 0x5c
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 fef3 	bl	8004b98 <memset>
  if(hadc->Instance==ADC1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a3b      	ldr	r2, [pc, #236]	; (8000ea4 <HAL_ADC_MspInit+0x118>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d16f      	bne.n	8000e9c <HAL_ADC_MspInit+0x110>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dc0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000dc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dc6:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 6;
 8000dcc:	2306      	movs	r3, #6
 8000dce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 43;
 8000dd0:	232b      	movs	r3, #43	; 0x2b
 8000dd2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000de0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 f92e 	bl	800404c <HAL_RCCEx_PeriphCLKConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000df6:	f7ff ff9f 	bl	8000d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <HAL_ADC_MspInit+0x11c>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	4a2a      	ldr	r2, [pc, #168]	; (8000ea8 <HAL_ADC_MspInit+0x11c>)
 8000e00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e06:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <HAL_ADC_MspInit+0x11c>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b25      	ldr	r3, [pc, #148]	; (8000ea8 <HAL_ADC_MspInit+0x11c>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	4a24      	ldr	r2, [pc, #144]	; (8000ea8 <HAL_ADC_MspInit+0x11c>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1e:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <HAL_ADC_MspInit+0x11c>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e2e:	230b      	movs	r3, #11
 8000e30:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f002 f8f6 	bl	8003030 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_ADC_MspInit+0x120>)
 8000e46:	4a1a      	ldr	r2, [pc, #104]	; (8000eb0 <HAL_ADC_MspInit+0x124>)
 8000e48:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <HAL_ADC_MspInit+0x120>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_ADC_MspInit+0x120>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_ADC_MspInit+0x120>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_ADC_MspInit+0x120>)
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_ADC_MspInit+0x120>)
 8000e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_ADC_MspInit+0x120>)
 8000e6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_ADC_MspInit+0x120>)
 8000e74:	2220      	movs	r2, #32
 8000e76:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_ADC_MspInit+0x120>)
 8000e7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e80:	480a      	ldr	r0, [pc, #40]	; (8000eac <HAL_ADC_MspInit+0x120>)
 8000e82:	f001 fedd 	bl	8002c40 <HAL_DMA_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8000e8c:	f7ff ff54 	bl	8000d38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_ADC_MspInit+0x120>)
 8000e94:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <HAL_ADC_MspInit+0x120>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3780      	adds	r7, #128	; 0x80
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	50040000 	.word	0x50040000
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	20000168 	.word	0x20000168
 8000eb0:	40020008 	.word	0x40020008

08000eb4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a2b      	ldr	r2, [pc, #172]	; (8000f80 <HAL_DAC_MspInit+0xcc>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d14f      	bne.n	8000f76 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <HAL_DAC_MspInit+0xd0>)
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eda:	4a2a      	ldr	r2, [pc, #168]	; (8000f84 <HAL_DAC_MspInit+0xd0>)
 8000edc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee2:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <HAL_DAC_MspInit+0xd0>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <HAL_DAC_MspInit+0xd0>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <HAL_DAC_MspInit+0xd0>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <HAL_DAC_MspInit+0xd0>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f06:	2310      	movs	r3, #16
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f002 f888 	bl	8003030 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_DAC_MspInit+0xd4>)
 8000f22:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <HAL_DAC_MspInit+0xd8>)
 8000f24:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_DAC_MspInit+0xd4>)
 8000f28:	2206      	movs	r2, #6
 8000f2a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_DAC_MspInit+0xd4>)
 8000f2e:	2210      	movs	r2, #16
 8000f30:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_DAC_MspInit+0xd4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <HAL_DAC_MspInit+0xd4>)
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_DAC_MspInit+0xd4>)
 8000f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f44:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <HAL_DAC_MspInit+0xd4>)
 8000f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f4c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_DAC_MspInit+0xd4>)
 8000f50:	2220      	movs	r2, #32
 8000f52:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_DAC_MspInit+0xd4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000f5a:	480b      	ldr	r0, [pc, #44]	; (8000f88 <HAL_DAC_MspInit+0xd4>)
 8000f5c:	f001 fe70 	bl	8002c40 <HAL_DMA_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000f66:	f7ff fee7 	bl	8000d38 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_DAC_MspInit+0xd4>)
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <HAL_DAC_MspInit+0xd4>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	; 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40007400 	.word	0x40007400
 8000f84:	40021000 	.word	0x40021000
 8000f88:	200000bc 	.word	0x200000bc
 8000f8c:	40020030 	.word	0x40020030

08000f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_TIM_Base_MspInit+0x38>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10b      	bne.n	8000fba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_TIM_Base_MspInit+0x3c>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <HAL_TIM_Base_MspInit+0x3c>)
 8000fa8:	f043 0310 	orr.w	r3, r3, #16
 8000fac:	6593      	str	r3, [r2, #88]	; 0x58
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <HAL_TIM_Base_MspInit+0x3c>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40001000 	.word	0x40001000
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <UsageFault_Handler+0x4>

08000fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f972 	bl	8001304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <DMA1_Channel1_IRQHandler+0x10>)
 800102a:	f001 ff21 	bl	8002e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000168 	.word	0x20000168

08001038 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <DMA1_Channel3_IRQHandler+0x10>)
 800103e:	f001 ff17 	bl	8002e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200000bc 	.word	0x200000bc

0800104c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <ITM_SendChar+0x48>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <ITM_SendChar+0x48>)
 800105c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001060:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <ITM_SendChar+0x4c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <ITM_SendChar+0x4c>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800106e:	bf00      	nop
 8001070:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f8      	beq.n	8001070 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800107e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	6013      	str	r3, [r2, #0]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000edfc 	.word	0xe000edfc
 8001098:	e0000e00 	.word	0xe0000e00

0800109c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e00a      	b.n	80010c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ae:	f3af 8000 	nop.w
 80010b2:	4601      	mov	r1, r0
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	60ba      	str	r2, [r7, #8]
 80010ba:	b2ca      	uxtb	r2, r1
 80010bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dbf0      	blt.n	80010ae <_read+0x12>
	}

return len;
 80010cc:	687b      	ldr	r3, [r7, #4]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	e009      	b.n	80010fc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);   // This sends to the trace
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	60ba      	str	r2, [r7, #8]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ffab 	bl	800104c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	3301      	adds	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	dbf1      	blt.n	80010e8 <_write+0x12>
	}
	return len;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <_close>:

int _close(int file)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
	return -1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001136:	605a      	str	r2, [r3, #4]
	return 0;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_isatty>:

int _isatty(int file)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	return 1;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a8:	f003 fccc 	bl	8004b44 <__errno>
 80011ac:	4603      	mov	r3, r0
 80011ae:	220c      	movs	r2, #12
 80011b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011b6:	e009      	b.n	80011cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <_sbrk+0x64>)
 80011c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20010000 	.word	0x20010000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	2000009c 	.word	0x2000009c
 80011e0:	20005e30 	.word	0x20005e30

080011e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <SystemInit+0x20>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <SystemInit+0x20>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001240 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800120c:	f7ff ffea 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <LoopForever+0x6>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	; (8001248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <LoopForever+0xe>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	; (8001254 <LoopForever+0x16>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001236:	f003 fc8b 	bl	8004b50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800123a:	f7ff fbb9 	bl	80009b0 <main>

0800123e <LoopForever>:

LoopForever:
    b LoopForever
 800123e:	e7fe      	b.n	800123e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001240:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800124c:	08005b60 	.word	0x08005b60
  ldr r2, =_sbss
 8001250:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001254:	20005e30 	.word	0x20005e30

08001258 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC1_IRQHandler>

0800125a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f001 f9f9 	bl	800265c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800126a:	200f      	movs	r0, #15
 800126c:	f000 f80e 	bl	800128c <HAL_InitTick>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	e001      	b.n	8001280 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800127c:	f7ff fd62 	bl	8000d44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001280:	79fb      	ldrb	r3, [r7, #7]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_InitTick+0x6c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d023      	beq.n	80012e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_InitTick+0x70>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_InitTick+0x6c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fa05 	bl	80026c6 <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10f      	bne.n	80012e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d809      	bhi.n	80012dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d0:	f001 f9cf 	bl	8002672 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_InitTick+0x74>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e007      	b.n	80012ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e004      	b.n	80012ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e001      	b.n	80012ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000010 	.word	0x20000010
 80012fc:	20000008 	.word	0x20000008
 8001300:	2000000c 	.word	0x2000000c

08001304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_IncTick+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <HAL_IncTick+0x24>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000010 	.word	0x20000010
 8001328:	20005e1c 	.word	0x20005e1c

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20005e1c 	.word	0x20005e1c

08001344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800134c:	f7ff ffee 	bl	800132c <HAL_GetTick>
 8001350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800135c:	d005      	beq.n	800136a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_Delay+0x44>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800136a:	bf00      	nop
 800136c:	f7ff ffde 	bl	800132c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	d8f7      	bhi.n	800136c <HAL_Delay+0x28>
  {
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000010 	.word	0x20000010

0800138c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	609a      	str	r2, [r3, #8]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	609a      	str	r2, [r3, #8]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3360      	adds	r3, #96	; 0x60
 8001406:	461a      	mov	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <LL_ADC_SetOffset+0x44>)
 8001416:	4013      	ands	r3, r2
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	4313      	orrs	r3, r2
 8001424:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800142c:	bf00      	nop
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	03fff000 	.word	0x03fff000

0800143c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3360      	adds	r3, #96	; 0x60
 800144a:	461a      	mov	r2, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800145c:	4618      	mov	r0, r3
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3360      	adds	r3, #96	; 0x60
 8001478:	461a      	mov	r2, r3
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	431a      	orrs	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001492:	bf00      	nop
 8001494:	371c      	adds	r7, #28
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3330      	adds	r3, #48	; 0x30
 80014d4:	461a      	mov	r2, r3
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	f003 030c 	and.w	r3, r3, #12
 80014e0:	4413      	add	r3, r2
 80014e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	211f      	movs	r1, #31
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	401a      	ands	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	0e9b      	lsrs	r3, r3, #26
 80014fc:	f003 011f 	and.w	r1, r3, #31
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f003 031f 	and.w	r3, r3, #31
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	431a      	orrs	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001510:	bf00      	nop
 8001512:	371c      	adds	r7, #28
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800151c:	b480      	push	{r7}
 800151e:	b087      	sub	sp, #28
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3314      	adds	r3, #20
 800152c:	461a      	mov	r2, r3
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	0e5b      	lsrs	r3, r3, #25
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	4413      	add	r3, r2
 800153a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	0d1b      	lsrs	r3, r3, #20
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	2107      	movs	r1, #7
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	401a      	ands	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	0d1b      	lsrs	r3, r3, #20
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	431a      	orrs	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001566:	bf00      	nop
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158c:	43db      	mvns	r3, r3
 800158e:	401a      	ands	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0318 	and.w	r3, r3, #24
 8001596:	4908      	ldr	r1, [pc, #32]	; (80015b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001598:	40d9      	lsrs	r1, r3
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	400b      	ands	r3, r1
 800159e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a2:	431a      	orrs	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	0007ffff 	.word	0x0007ffff

080015bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80015cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6093      	str	r3, [r2, #8]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015f4:	d101      	bne.n	80015fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001618:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800161c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001644:	d101      	bne.n	800164a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001668:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800166c:	f043 0201 	orr.w	r2, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <LL_ADC_IsEnabled+0x18>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <LL_ADC_IsEnabled+0x1a>
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016ba:	f043 0204 	orr.w	r2, r3, #4
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d101      	bne.n	80016e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b08      	cmp	r3, #8
 8001706:	d101      	bne.n	800170c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e12c      	b.n	8001990 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff fb21 	bl	8000d8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff3f 	bl	80015e0 <LL_ADC_IsDeepPowerDownEnabled>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff25 	bl	80015bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff5a 	bl	8001630 <LL_ADC_IsInternalRegulatorEnabled>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d115      	bne.n	80017ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff3e 	bl	8001608 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800178c:	4b82      	ldr	r3, [pc, #520]	; (8001998 <HAL_ADC_Init+0x27c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	099b      	lsrs	r3, r3, #6
 8001792:	4a82      	ldr	r2, [pc, #520]	; (800199c <HAL_ADC_Init+0x280>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	3301      	adds	r3, #1
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017a0:	e002      	b.n	80017a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f9      	bne.n	80017a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff3c 	bl	8001630 <LL_ADC_IsInternalRegulatorEnabled>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10d      	bne.n	80017da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c2:	f043 0210 	orr.w	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	f043 0201 	orr.w	r2, r3, #1
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ff75 	bl	80016ce <LL_ADC_REG_IsConversionOngoing>
 80017e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 80c5 	bne.w	800197e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f040 80c1 	bne.w	800197e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001800:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001804:	f043 0202 	orr.w	r2, r3, #2
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff35 	bl	8001680 <LL_ADC_IsEnabled>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10b      	bne.n	8001834 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800181c:	4860      	ldr	r0, [pc, #384]	; (80019a0 <HAL_ADC_Init+0x284>)
 800181e:	f7ff ff2f 	bl	8001680 <LL_ADC_IsEnabled>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d105      	bne.n	8001834 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4619      	mov	r1, r3
 800182e:	485d      	ldr	r0, [pc, #372]	; (80019a4 <HAL_ADC_Init+0x288>)
 8001830:	f7ff fdac 	bl	800138c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7e5b      	ldrb	r3, [r3, #25]
 8001838:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800183e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001844:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800184a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001852:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d106      	bne.n	8001870 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	3b01      	subs	r3, #1
 8001868:	045b      	lsls	r3, r3, #17
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	d009      	beq.n	800188c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	4b45      	ldr	r3, [pc, #276]	; (80019a8 <HAL_ADC_Init+0x28c>)
 8001894:	4013      	ands	r3, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	69b9      	ldr	r1, [r7, #24]
 800189c:	430b      	orrs	r3, r1
 800189e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff12 	bl	80016ce <LL_ADC_REG_IsConversionOngoing>
 80018aa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff1f 	bl	80016f4 <LL_ADC_INJ_IsConversionOngoing>
 80018b6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d13d      	bne.n	800193a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d13a      	bne.n	800193a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018c8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018d0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018e0:	f023 0302 	bic.w	r3, r3, #2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	69b9      	ldr	r1, [r7, #24]
 80018ea:	430b      	orrs	r3, r1
 80018ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d118      	bne.n	800192a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001902:	f023 0304 	bic.w	r3, r3, #4
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800190e:	4311      	orrs	r1, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001914:	4311      	orrs	r1, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800191a:	430a      	orrs	r2, r1
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	e007      	b.n	800193a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d10c      	bne.n	800195c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	f023 010f 	bic.w	r1, r3, #15
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	1e5a      	subs	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
 800195a:	e007      	b.n	800196c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 020f 	bic.w	r2, r2, #15
 800196a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001970:	f023 0303 	bic.w	r3, r3, #3
 8001974:	f043 0201 	orr.w	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	655a      	str	r2, [r3, #84]	; 0x54
 800197c:	e007      	b.n	800198e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001982:	f043 0210 	orr.w	r2, r3, #16
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800198e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000008 	.word	0x20000008
 800199c:	053e2d63 	.word	0x053e2d63
 80019a0:	50040000 	.word	0x50040000
 80019a4:	50040300 	.word	0x50040300
 80019a8:	fff0c007 	.word	0xfff0c007

080019ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fe86 	bl	80016ce <LL_ADC_REG_IsConversionOngoing>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d167      	bne.n	8001a98 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_Start_DMA+0x2a>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e063      	b.n	8001a9e <HAL_ADC_Start_DMA+0xf2>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 fc52 	bl	8002288 <ADC_Enable>
 80019e4:	4603      	mov	r3, r0
 80019e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d14f      	bne.n	8001a8e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019f6:	f023 0301 	bic.w	r3, r3, #1
 80019fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d006      	beq.n	8001a1c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	f023 0206 	bic.w	r2, r3, #6
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	659a      	str	r2, [r3, #88]	; 0x58
 8001a1a:	e002      	b.n	8001a22 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	4a20      	ldr	r2, [pc, #128]	; (8001aa8 <HAL_ADC_Start_DMA+0xfc>)
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	4a1f      	ldr	r2, [pc, #124]	; (8001aac <HAL_ADC_Start_DMA+0x100>)
 8001a30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <HAL_ADC_Start_DMA+0x104>)
 8001a38:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	221c      	movs	r2, #28
 8001a40:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0210 	orr.w	r2, r2, #16
 8001a58:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0201 	orr.w	r2, r2, #1
 8001a68:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3340      	adds	r3, #64	; 0x40
 8001a74:	4619      	mov	r1, r3
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f001 f999 	bl	8002db0 <HAL_DMA_Start_IT>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fe0d 	bl	80016a6 <LL_ADC_REG_StartConversion>
 8001a8c:	e006      	b.n	8001a9c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a96:	e001      	b.n	8001a9c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	08002395 	.word	0x08002395
 8001aac:	0800246d 	.word	0x0800246d
 8001ab0:	08002489 	.word	0x08002489

08001ab4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0b6      	sub	sp, #216	; 0xd8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x22>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e3b9      	b.n	800225e <HAL_ADC_ConfigChannel+0x796>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fde9 	bl	80016ce <LL_ADC_REG_IsConversionOngoing>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 839e 	bne.w	8002240 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b05      	cmp	r3, #5
 8001b0a:	d824      	bhi.n	8001b56 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	3b02      	subs	r3, #2
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d81b      	bhi.n	8001b4e <HAL_ADC_ConfigChannel+0x86>
 8001b16:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <HAL_ADC_ConfigChannel+0x54>)
 8001b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1c:	08001b2d 	.word	0x08001b2d
 8001b20:	08001b35 	.word	0x08001b35
 8001b24:	08001b3d 	.word	0x08001b3d
 8001b28:	08001b45 	.word	0x08001b45
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	220c      	movs	r2, #12
 8001b30:	605a      	str	r2, [r3, #4]
          break;
 8001b32:	e011      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2212      	movs	r2, #18
 8001b38:	605a      	str	r2, [r3, #4]
          break;
 8001b3a:	e00d      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	2218      	movs	r2, #24
 8001b40:	605a      	str	r2, [r3, #4]
          break;
 8001b42:	e009      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b4a:	605a      	str	r2, [r3, #4]
          break;
 8001b4c:	e004      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2206      	movs	r2, #6
 8001b52:	605a      	str	r2, [r3, #4]
          break;
 8001b54:	e000      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001b56:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6859      	ldr	r1, [r3, #4]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	f7ff fcad 	bl	80014c4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fdad 	bl	80016ce <LL_ADC_REG_IsConversionOngoing>
 8001b74:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fdb9 	bl	80016f4 <LL_ADC_INJ_IsConversionOngoing>
 8001b82:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 81a6 	bne.w	8001edc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f040 81a1 	bne.w	8001edc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	6819      	ldr	r1, [r3, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f7ff fcb8 	bl	800151c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	08db      	lsrs	r3, r3, #3
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d00a      	beq.n	8001be4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6919      	ldr	r1, [r3, #16]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bde:	f7ff fc09 	bl	80013f4 <LL_ADC_SetOffset>
 8001be2:	e17b      	b.n	8001edc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fc26 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10a      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x148>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fc1b 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	0e9b      	lsrs	r3, r3, #26
 8001c0a:	f003 021f 	and.w	r2, r3, #31
 8001c0e:	e01e      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x186>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fc10 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e004      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001c42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d105      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x19e>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0e9b      	lsrs	r3, r3, #26
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	e018      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x1d0>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	e004      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001c8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d106      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fbdf 	bl	8001468 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2101      	movs	r1, #1
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fbc3 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10a      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x20e>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fbb8 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	0e9b      	lsrs	r3, r3, #26
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	e01e      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x24c>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2101      	movs	r1, #1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fbad 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001cf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001cfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001d04:	2320      	movs	r3, #32
 8001d06:	e004      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001d08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d105      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x264>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0e9b      	lsrs	r3, r3, #26
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	e018      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x296>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001d50:	2320      	movs	r3, #32
 8001d52:	e004      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d106      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2200      	movs	r2, #0
 8001d68:	2101      	movs	r1, #1
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fb7c 	bl	8001468 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2102      	movs	r1, #2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fb60 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10a      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x2d4>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fb55 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001d92:	4603      	mov	r3, r0
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	f003 021f 	and.w	r2, r3, #31
 8001d9a:	e01e      	b.n	8001dda <HAL_ADC_ConfigChannel+0x312>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2102      	movs	r1, #2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fb4a 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001dba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001dc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001dca:	2320      	movs	r3, #32
 8001dcc:	e004      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001dce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d105      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x32a>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	0e9b      	lsrs	r3, r3, #26
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	e016      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x358>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001e12:	2320      	movs	r3, #32
 8001e14:	e004      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d106      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fb1b 	bl	8001468 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2103      	movs	r1, #3
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff faff 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10a      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x396>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2103      	movs	r1, #3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff faf4 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	0e9b      	lsrs	r3, r3, #26
 8001e58:	f003 021f 	and.w	r2, r3, #31
 8001e5c:	e017      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x3c6>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2103      	movs	r1, #3
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fae9 	bl	800143c <LL_ADC_GetOffsetChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e78:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001e80:	2320      	movs	r3, #32
 8001e82:	e003      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d105      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x3de>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0e9b      	lsrs	r3, r3, #26
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	e011      	b.n	8001eca <HAL_ADC_ConfigChannel+0x402>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	e003      	b.n	8001eca <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d106      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fac6 	bl	8001468 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fbcd 	bl	8001680 <LL_ADC_IsEnabled>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f040 813f 	bne.w	800216c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6819      	ldr	r1, [r3, #0]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f7ff fb3a 	bl	8001574 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a8e      	ldr	r2, [pc, #568]	; (8002140 <HAL_ADC_ConfigChannel+0x678>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	f040 8130 	bne.w	800216c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10b      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x46c>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0e9b      	lsrs	r3, r3, #26
 8001f22:	3301      	adds	r3, #1
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	2b09      	cmp	r3, #9
 8001f2a:	bf94      	ite	ls
 8001f2c:	2301      	movls	r3, #1
 8001f2e:	2300      	movhi	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	e019      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x4a0>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f44:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	e003      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2b09      	cmp	r3, #9
 8001f60:	bf94      	ite	ls
 8001f62:	2301      	movls	r3, #1
 8001f64:	2300      	movhi	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d079      	beq.n	8002060 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d107      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x4c0>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0e9b      	lsrs	r3, r3, #26
 8001f7e:	3301      	adds	r3, #1
 8001f80:	069b      	lsls	r3, r3, #26
 8001f82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f86:	e015      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x4ec>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f98:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	e003      	b.n	8001fac <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	069b      	lsls	r3, r3, #26
 8001fb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d109      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x50c>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0e9b      	lsrs	r3, r3, #26
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	2101      	movs	r1, #1
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	e017      	b.n	8002004 <HAL_ADC_ConfigChannel+0x53c>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001fec:	2320      	movs	r3, #32
 8001fee:	e003      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	2101      	movs	r1, #1
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	ea42 0103 	orr.w	r1, r2, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10a      	bne.n	800202a <HAL_ADC_ConfigChannel+0x562>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0e9b      	lsrs	r3, r3, #26
 800201a:	3301      	adds	r3, #1
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	051b      	lsls	r3, r3, #20
 8002028:	e018      	b.n	800205c <HAL_ADC_ConfigChannel+0x594>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800203c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002042:	2320      	movs	r3, #32
 8002044:	e003      	b.n	800204e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	3301      	adds	r3, #1
 8002050:	f003 021f 	and.w	r2, r3, #31
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800205c:	430b      	orrs	r3, r1
 800205e:	e080      	b.n	8002162 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002068:	2b00      	cmp	r3, #0
 800206a:	d107      	bne.n	800207c <HAL_ADC_ConfigChannel+0x5b4>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	3301      	adds	r3, #1
 8002074:	069b      	lsls	r3, r3, #26
 8002076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800207a:	e015      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x5e0>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002094:	2320      	movs	r3, #32
 8002096:	e003      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	3301      	adds	r3, #1
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d109      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x600>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	0e9b      	lsrs	r3, r3, #26
 80020ba:	3301      	adds	r3, #1
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	2101      	movs	r1, #1
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	e017      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x630>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	61fb      	str	r3, [r7, #28]
  return result;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e003      	b.n	80020ec <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	3301      	adds	r3, #1
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	ea42 0103 	orr.w	r1, r2, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10d      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x65c>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0e9b      	lsrs	r3, r3, #26
 800210e:	3301      	adds	r3, #1
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	3b1e      	subs	r3, #30
 800211c:	051b      	lsls	r3, r3, #20
 800211e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002122:	e01d      	b.n	8002160 <HAL_ADC_ConfigChannel+0x698>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	613b      	str	r3, [r7, #16]
  return result;
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d103      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800213c:	2320      	movs	r3, #32
 800213e:	e005      	b.n	800214c <HAL_ADC_ConfigChannel+0x684>
 8002140:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	3301      	adds	r3, #1
 800214e:	f003 021f 	and.w	r2, r3, #31
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	3b1e      	subs	r3, #30
 800215a:	051b      	lsls	r3, r3, #20
 800215c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002160:	430b      	orrs	r3, r1
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	6892      	ldr	r2, [r2, #8]
 8002166:	4619      	mov	r1, r3
 8002168:	f7ff f9d8 	bl	800151c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b3d      	ldr	r3, [pc, #244]	; (8002268 <HAL_ADC_ConfigChannel+0x7a0>)
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d06c      	beq.n	8002252 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002178:	483c      	ldr	r0, [pc, #240]	; (800226c <HAL_ADC_ConfigChannel+0x7a4>)
 800217a:	f7ff f92d 	bl	80013d8 <LL_ADC_GetCommonPathInternalCh>
 800217e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a3a      	ldr	r2, [pc, #232]	; (8002270 <HAL_ADC_ConfigChannel+0x7a8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d127      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800218c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d121      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a35      	ldr	r2, [pc, #212]	; (8002274 <HAL_ADC_ConfigChannel+0x7ac>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d157      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021aa:	4619      	mov	r1, r3
 80021ac:	482f      	ldr	r0, [pc, #188]	; (800226c <HAL_ADC_ConfigChannel+0x7a4>)
 80021ae:	f7ff f900 	bl	80013b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_ADC_ConfigChannel+0x7b0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	099b      	lsrs	r3, r3, #6
 80021b8:	4a30      	ldr	r2, [pc, #192]	; (800227c <HAL_ADC_ConfigChannel+0x7b4>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	099b      	lsrs	r3, r3, #6
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021cc:	e002      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f9      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021da:	e03a      	b.n	8002252 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a27      	ldr	r2, [pc, #156]	; (8002280 <HAL_ADC_ConfigChannel+0x7b8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d113      	bne.n	800220e <HAL_ADC_ConfigChannel+0x746>
 80021e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10d      	bne.n	800220e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a1f      	ldr	r2, [pc, #124]	; (8002274 <HAL_ADC_ConfigChannel+0x7ac>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d12a      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002204:	4619      	mov	r1, r3
 8002206:	4819      	ldr	r0, [pc, #100]	; (800226c <HAL_ADC_ConfigChannel+0x7a4>)
 8002208:	f7ff f8d3 	bl	80013b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800220c:	e021      	b.n	8002252 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a1c      	ldr	r2, [pc, #112]	; (8002284 <HAL_ADC_ConfigChannel+0x7bc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d11c      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800221c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d116      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a12      	ldr	r2, [pc, #72]	; (8002274 <HAL_ADC_ConfigChannel+0x7ac>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d111      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800222e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002232:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002236:	4619      	mov	r1, r3
 8002238:	480c      	ldr	r0, [pc, #48]	; (800226c <HAL_ADC_ConfigChannel+0x7a4>)
 800223a:	f7ff f8ba 	bl	80013b2 <LL_ADC_SetCommonPathInternalCh>
 800223e:	e008      	b.n	8002252 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002244:	f043 0220 	orr.w	r2, r3, #32
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800225a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800225e:	4618      	mov	r0, r3
 8002260:	37d8      	adds	r7, #216	; 0xd8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	80080000 	.word	0x80080000
 800226c:	50040300 	.word	0x50040300
 8002270:	c7520000 	.word	0xc7520000
 8002274:	50040000 	.word	0x50040000
 8002278:	20000008 	.word	0x20000008
 800227c:	053e2d63 	.word	0x053e2d63
 8002280:	cb840000 	.word	0xcb840000
 8002284:	80000001 	.word	0x80000001

08002288 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff f9f1 	bl	8001680 <LL_ADC_IsEnabled>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d169      	bne.n	8002378 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	4b36      	ldr	r3, [pc, #216]	; (8002384 <ADC_Enable+0xfc>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00d      	beq.n	80022ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	f043 0210 	orr.w	r2, r3, #16
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	f043 0201 	orr.w	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e055      	b.n	800237a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff f9c0 	bl	8001658 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80022d8:	482b      	ldr	r0, [pc, #172]	; (8002388 <ADC_Enable+0x100>)
 80022da:	f7ff f87d 	bl	80013d8 <LL_ADC_GetCommonPathInternalCh>
 80022de:	4603      	mov	r3, r0
 80022e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022e8:	4b28      	ldr	r3, [pc, #160]	; (800238c <ADC_Enable+0x104>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	099b      	lsrs	r3, r3, #6
 80022ee:	4a28      	ldr	r2, [pc, #160]	; (8002390 <ADC_Enable+0x108>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	099b      	lsrs	r3, r3, #6
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002302:	e002      	b.n	800230a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	3b01      	subs	r3, #1
 8002308:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f9      	bne.n	8002304 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002310:	f7ff f80c 	bl	800132c <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002316:	e028      	b.n	800236a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff f9af 	bl	8001680 <LL_ADC_IsEnabled>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d104      	bne.n	8002332 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff f993 	bl	8001658 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002332:	f7fe fffb 	bl	800132c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d914      	bls.n	800236a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b01      	cmp	r3, #1
 800234c:	d00d      	beq.n	800236a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	f043 0210 	orr.w	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e007      	b.n	800237a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b01      	cmp	r3, #1
 8002376:	d1cf      	bne.n	8002318 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	8000003f 	.word	0x8000003f
 8002388:	50040300 	.word	0x50040300
 800238c:	20000008 	.word	0x20000008
 8002390:	053e2d63 	.word	0x053e2d63

08002394 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d14b      	bne.n	8002446 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d021      	beq.n	800240c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff f866 	bl	800149e <LL_ADC_REG_IsTriggerSourceSWStart>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d032      	beq.n	800243e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d12b      	bne.n	800243e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d11f      	bne.n	800243e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002402:	f043 0201 	orr.w	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
 800240a:	e018      	b.n	800243e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d111      	bne.n	800243e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d105      	bne.n	800243e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f7fe fa3e 	bl	80008c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002444:	e00e      	b.n	8002464 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f7ff fb2e 	bl	8001ab4 <HAL_ADC_ErrorCallback>
}
 8002458:	e004      	b.n	8002464 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4798      	blx	r3
}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f7fe f9fe 	bl	800087c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	f043 0204 	orr.w	r2, r3, #4
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f7ff fb00 	bl	8001ab4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d8:	4013      	ands	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	60d3      	str	r3, [r2, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <__NVIC_GetPriorityGrouping+0x18>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	f003 0307 	and.w	r3, r3, #7
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	2b00      	cmp	r3, #0
 8002530:	db0b      	blt.n	800254a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	f003 021f 	and.w	r2, r3, #31
 8002538:	4907      	ldr	r1, [pc, #28]	; (8002558 <__NVIC_EnableIRQ+0x38>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	2001      	movs	r0, #1
 8002542:	fa00 f202 	lsl.w	r2, r0, r2
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000e100 	.word	0xe000e100

0800255c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	2b00      	cmp	r3, #0
 800256e:	db0a      	blt.n	8002586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	b2da      	uxtb	r2, r3
 8002574:	490c      	ldr	r1, [pc, #48]	; (80025a8 <__NVIC_SetPriority+0x4c>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	0112      	lsls	r2, r2, #4
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	440b      	add	r3, r1
 8002580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002584:	e00a      	b.n	800259c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	4908      	ldr	r1, [pc, #32]	; (80025ac <__NVIC_SetPriority+0x50>)
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	3b04      	subs	r3, #4
 8002594:	0112      	lsls	r2, r2, #4
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	440b      	add	r3, r1
 800259a:	761a      	strb	r2, [r3, #24]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000e100 	.word	0xe000e100
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f1c3 0307 	rsb	r3, r3, #7
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	bf28      	it	cs
 80025ce:	2304      	movcs	r3, #4
 80025d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d902      	bls.n	80025e0 <NVIC_EncodePriority+0x30>
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3b03      	subs	r3, #3
 80025de:	e000      	b.n	80025e2 <NVIC_EncodePriority+0x32>
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43da      	mvns	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	401a      	ands	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	43d9      	mvns	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	4313      	orrs	r3, r2
         );
}
 800260a:	4618      	mov	r0, r3
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002628:	d301      	bcc.n	800262e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262a:	2301      	movs	r3, #1
 800262c:	e00f      	b.n	800264e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <SysTick_Config+0x40>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002636:	210f      	movs	r1, #15
 8002638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800263c:	f7ff ff8e 	bl	800255c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <SysTick_Config+0x40>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002646:	4b04      	ldr	r3, [pc, #16]	; (8002658 <SysTick_Config+0x40>)
 8002648:	2207      	movs	r2, #7
 800264a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	e000e010 	.word	0xe000e010

0800265c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ff29 	bl	80024bc <__NVIC_SetPriorityGrouping>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002684:	f7ff ff3e 	bl	8002504 <__NVIC_GetPriorityGrouping>
 8002688:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	f7ff ff8e 	bl	80025b0 <NVIC_EncodePriority>
 8002694:	4602      	mov	r2, r0
 8002696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff5d 	bl	800255c <__NVIC_SetPriority>
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff31 	bl	8002520 <__NVIC_EnableIRQ>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ffa2 	bl	8002618 <SysTick_Config>
 80026d4:	4603      	mov	r3, r0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e014      	b.n	800271a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	791b      	ldrb	r3, [r3, #4]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d105      	bne.n	8002706 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7fe fbd7 	bl	8000eb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2202      	movs	r2, #2
 800270a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	795b      	ldrb	r3, [r3, #5]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_DAC_Start_DMA+0x1e>
 800273e:	2302      	movs	r3, #2
 8002740:	e0ab      	b.n	800289a <HAL_DAC_Start_DMA+0x176>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2202      	movs	r2, #2
 800274c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d12f      	bne.n	80027b4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	4a52      	ldr	r2, [pc, #328]	; (80028a4 <HAL_DAC_Start_DMA+0x180>)
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a51      	ldr	r2, [pc, #324]	; (80028a8 <HAL_DAC_Start_DMA+0x184>)
 8002762:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a50      	ldr	r2, [pc, #320]	; (80028ac <HAL_DAC_Start_DMA+0x188>)
 800276a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800277a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	2b08      	cmp	r3, #8
 8002780:	d013      	beq.n	80027aa <HAL_DAC_Start_DMA+0x86>
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	2b08      	cmp	r3, #8
 8002786:	d845      	bhi.n	8002814 <HAL_DAC_Start_DMA+0xf0>
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_DAC_Start_DMA+0x72>
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	2b04      	cmp	r3, #4
 8002792:	d005      	beq.n	80027a0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002794:	e03e      	b.n	8002814 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3308      	adds	r3, #8
 800279c:	613b      	str	r3, [r7, #16]
        break;
 800279e:	e03c      	b.n	800281a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	330c      	adds	r3, #12
 80027a6:	613b      	str	r3, [r7, #16]
        break;
 80027a8:	e037      	b.n	800281a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	3310      	adds	r3, #16
 80027b0:	613b      	str	r3, [r7, #16]
        break;
 80027b2:	e032      	b.n	800281a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a3d      	ldr	r2, [pc, #244]	; (80028b0 <HAL_DAC_Start_DMA+0x18c>)
 80027ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4a3c      	ldr	r2, [pc, #240]	; (80028b4 <HAL_DAC_Start_DMA+0x190>)
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4a3b      	ldr	r2, [pc, #236]	; (80028b8 <HAL_DAC_Start_DMA+0x194>)
 80027ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027da:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d013      	beq.n	800280a <HAL_DAC_Start_DMA+0xe6>
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d817      	bhi.n	8002818 <HAL_DAC_Start_DMA+0xf4>
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_DAC_Start_DMA+0xd2>
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d005      	beq.n	8002800 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80027f4:	e010      	b.n	8002818 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3314      	adds	r3, #20
 80027fc:	613b      	str	r3, [r7, #16]
        break;
 80027fe:	e00c      	b.n	800281a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3318      	adds	r3, #24
 8002806:	613b      	str	r3, [r7, #16]
        break;
 8002808:	e007      	b.n	800281a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	331c      	adds	r3, #28
 8002810:	613b      	str	r3, [r7, #16]
        break;
 8002812:	e002      	b.n	800281a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002814:	bf00      	nop
 8002816:	e000      	b.n	800281a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002818:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d111      	bne.n	8002844 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800282e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6898      	ldr	r0, [r3, #8]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	f000 fab9 	bl	8002db0 <HAL_DMA_Start_IT>
 800283e:	4603      	mov	r3, r0
 8002840:	75fb      	strb	r3, [r7, #23]
 8002842:	e010      	b.n	8002866 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002852:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	68d8      	ldr	r0, [r3, #12]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	f000 faa7 	bl	8002db0 <HAL_DMA_Start_IT>
 8002862:	4603      	mov	r3, r0
 8002864:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800286c:	7dfb      	ldrb	r3, [r7, #23]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10c      	bne.n	800288c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6819      	ldr	r1, [r3, #0]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2201      	movs	r2, #1
 8002880:	409a      	lsls	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	e005      	b.n	8002898 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f043 0204 	orr.w	r2, r3, #4
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002898:	7dfb      	ldrb	r3, [r7, #23]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	08002b2d 	.word	0x08002b2d
 80028a8:	08002b4f 	.word	0x08002b4f
 80028ac:	08002b6b 	.word	0x08002b6b
 80028b0:	08002bd5 	.word	0x08002bd5
 80028b4:	08002bf7 	.word	0x08002bf7
 80028b8:	08002c13 	.word	0x08002c13

080028bc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	795b      	ldrb	r3, [r3, #5]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_DAC_ConfigChannel+0x1c>
 8002910:	2302      	movs	r3, #2
 8002912:	e107      	b.n	8002b24 <HAL_DAC_ConfigChannel+0x22c>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2202      	movs	r2, #2
 800291e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d174      	bne.n	8002a12 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002928:	f7fe fd00 	bl	800132c <HAL_GetTick>
 800292c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d134      	bne.n	800299e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002934:	e011      	b.n	800295a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002936:	f7fe fcf9 	bl	800132c <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d90a      	bls.n	800295a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f043 0208 	orr.w	r2, r3, #8
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2203      	movs	r2, #3
 8002954:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0e4      	b.n	8002b24 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e6      	bne.n	8002936 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002968:	2001      	movs	r0, #1
 800296a:	f7fe fceb 	bl	8001344 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	6992      	ldr	r2, [r2, #24]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
 8002978:	e01e      	b.n	80029b8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800297a:	f7fe fcd7 	bl	800132c <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d90a      	bls.n	800299e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	f043 0208 	orr.w	r2, r3, #8
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2203      	movs	r2, #3
 8002998:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0c2      	b.n	8002b24 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	dbe8      	blt.n	800297a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80029a8:	2001      	movs	r0, #1
 80029aa:	f7fe fccb 	bl	8001344 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	6992      	ldr	r2, [r2, #24]
 80029b6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	ea02 0103 	and.w	r1, r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	69da      	ldr	r2, [r3, #28]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	409a      	lsls	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	21ff      	movs	r1, #255	; 0xff
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	ea02 0103 	and.w	r1, r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	6a1a      	ldr	r2, [r3, #32]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d11d      	bne.n	8002a56 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	221f      	movs	r2, #31
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2207      	movs	r2, #7
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6819      	ldr	r1, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	400a      	ands	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6819      	ldr	r1, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	22c0      	movs	r2, #192	; 0xc0
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43da      	mvns	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	400a      	ands	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3720      	adds	r7, #32
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f7ff febe 	bl	80028bc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2201      	movs	r2, #1
 8002b44:	711a      	strb	r2, [r3, #4]
}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f7ff feb7 	bl	80028d0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f043 0204 	orr.w	r2, r3, #4
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7ff fead 	bl	80028e4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	711a      	strb	r2, [r3, #4]
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7ff ffd8 	bl	8002b98 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2201      	movs	r2, #1
 8002bec:	711a      	strb	r2, [r3, #4]
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f7ff ffd1 	bl	8002bac <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f043 0204 	orr.w	r2, r3, #4
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f7ff ffc7 	bl	8002bc0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	711a      	strb	r2, [r3, #4]
}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e098      	b.n	8002d84 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <HAL_DMA_Init+0x150>)
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d80f      	bhi.n	8002c7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	4b4b      	ldr	r3, [pc, #300]	; (8002d94 <HAL_DMA_Init+0x154>)
 8002c66:	4413      	add	r3, r2
 8002c68:	4a4b      	ldr	r2, [pc, #300]	; (8002d98 <HAL_DMA_Init+0x158>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	009a      	lsls	r2, r3, #2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a48      	ldr	r2, [pc, #288]	; (8002d9c <HAL_DMA_Init+0x15c>)
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c7c:	e00e      	b.n	8002c9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	4b46      	ldr	r3, [pc, #280]	; (8002da0 <HAL_DMA_Init+0x160>)
 8002c86:	4413      	add	r3, r2
 8002c88:	4a43      	ldr	r2, [pc, #268]	; (8002d98 <HAL_DMA_Init+0x158>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	009a      	lsls	r2, r3, #2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a42      	ldr	r2, [pc, #264]	; (8002da4 <HAL_DMA_Init+0x164>)
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cf6:	d039      	beq.n	8002d6c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	4a27      	ldr	r2, [pc, #156]	; (8002d9c <HAL_DMA_Init+0x15c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d11a      	bne.n	8002d38 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d02:	4b29      	ldr	r3, [pc, #164]	; (8002da8 <HAL_DMA_Init+0x168>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f003 031c 	and.w	r3, r3, #28
 8002d0e:	210f      	movs	r1, #15
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	4924      	ldr	r1, [pc, #144]	; (8002da8 <HAL_DMA_Init+0x168>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d1c:	4b22      	ldr	r3, [pc, #136]	; (8002da8 <HAL_DMA_Init+0x168>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d28:	f003 031c 	and.w	r3, r3, #28
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	491d      	ldr	r1, [pc, #116]	; (8002da8 <HAL_DMA_Init+0x168>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
 8002d36:	e019      	b.n	8002d6c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d38:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <HAL_DMA_Init+0x16c>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d40:	f003 031c 	and.w	r3, r3, #28
 8002d44:	210f      	movs	r1, #15
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	4917      	ldr	r1, [pc, #92]	; (8002dac <HAL_DMA_Init+0x16c>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <HAL_DMA_Init+0x16c>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f003 031c 	and.w	r3, r3, #28
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	4911      	ldr	r1, [pc, #68]	; (8002dac <HAL_DMA_Init+0x16c>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	40020407 	.word	0x40020407
 8002d94:	bffdfff8 	.word	0xbffdfff8
 8002d98:	cccccccd 	.word	0xcccccccd
 8002d9c:	40020000 	.word	0x40020000
 8002da0:	bffdfbf8 	.word	0xbffdfbf8
 8002da4:	40020400 	.word	0x40020400
 8002da8:	400200a8 	.word	0x400200a8
 8002dac:	400204a8 	.word	0x400204a8

08002db0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_DMA_Start_IT+0x20>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e04b      	b.n	8002e68 <HAL_DMA_Start_IT+0xb8>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d13a      	bne.n	8002e5a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f8e0 	bl	8002fce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 020e 	orr.w	r2, r2, #14
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	e00f      	b.n	8002e48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0204 	bic.w	r2, r2, #4
 8002e36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 020a 	orr.w	r2, r2, #10
 8002e46:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	e005      	b.n	8002e66 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e62:	2302      	movs	r3, #2
 8002e64:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	f003 031c 	and.w	r3, r3, #28
 8002e90:	2204      	movs	r2, #4
 8002e92:	409a      	lsls	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d026      	beq.n	8002eea <HAL_DMA_IRQHandler+0x7a>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d021      	beq.n	8002eea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d107      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0204 	bic.w	r2, r2, #4
 8002ec2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	f003 021c 	and.w	r2, r3, #28
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2104      	movs	r1, #4
 8002ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d071      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002ee8:	e06c      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	f003 031c 	and.w	r3, r3, #28
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d02e      	beq.n	8002f5c <HAL_DMA_IRQHandler+0xec>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d029      	beq.n	8002f5c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10b      	bne.n	8002f2e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 020a 	bic.w	r2, r2, #10
 8002f24:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	f003 021c 	and.w	r2, r3, #28
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f40:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d038      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f5a:	e033      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	f003 031c 	and.w	r3, r3, #28
 8002f64:	2208      	movs	r2, #8
 8002f66:	409a      	lsls	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d02a      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x156>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d025      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 020e 	bic.w	r2, r2, #14
 8002f88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f003 021c 	and.w	r2, r3, #28
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	2101      	movs	r1, #1
 8002f98:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d004      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
}
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b085      	sub	sp, #20
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	f003 021c 	and.w	r2, r3, #28
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	2101      	movs	r1, #1
 8002fea:	fa01 f202 	lsl.w	r2, r1, r2
 8002fee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d108      	bne.n	8003012 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003010:	e007      	b.n	8003022 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	60da      	str	r2, [r3, #12]
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800303e:	e154      	b.n	80032ea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2101      	movs	r1, #1
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	fa01 f303 	lsl.w	r3, r1, r3
 800304c:	4013      	ands	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 8146 	beq.w	80032e4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d005      	beq.n	8003070 <HAL_GPIO_Init+0x40>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d130      	bne.n	80030d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030a6:	2201      	movs	r2, #1
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f003 0201 	and.w	r2, r3, #1
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d017      	beq.n	800310e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	2203      	movs	r2, #3
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4013      	ands	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d123      	bne.n	8003162 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	08da      	lsrs	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3208      	adds	r2, #8
 8003122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003126:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	220f      	movs	r2, #15
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4013      	ands	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	08da      	lsrs	r2, r3, #3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3208      	adds	r2, #8
 800315c:	6939      	ldr	r1, [r7, #16]
 800315e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	2203      	movs	r2, #3
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0203 	and.w	r2, r3, #3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 80a0 	beq.w	80032e4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a4:	4b58      	ldr	r3, [pc, #352]	; (8003308 <HAL_GPIO_Init+0x2d8>)
 80031a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a8:	4a57      	ldr	r2, [pc, #348]	; (8003308 <HAL_GPIO_Init+0x2d8>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6613      	str	r3, [r2, #96]	; 0x60
 80031b0:	4b55      	ldr	r3, [pc, #340]	; (8003308 <HAL_GPIO_Init+0x2d8>)
 80031b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031bc:	4a53      	ldr	r2, [pc, #332]	; (800330c <HAL_GPIO_Init+0x2dc>)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	3302      	adds	r3, #2
 80031c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	220f      	movs	r2, #15
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031e6:	d019      	beq.n	800321c <HAL_GPIO_Init+0x1ec>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a49      	ldr	r2, [pc, #292]	; (8003310 <HAL_GPIO_Init+0x2e0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d013      	beq.n	8003218 <HAL_GPIO_Init+0x1e8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a48      	ldr	r2, [pc, #288]	; (8003314 <HAL_GPIO_Init+0x2e4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00d      	beq.n	8003214 <HAL_GPIO_Init+0x1e4>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a47      	ldr	r2, [pc, #284]	; (8003318 <HAL_GPIO_Init+0x2e8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d007      	beq.n	8003210 <HAL_GPIO_Init+0x1e0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a46      	ldr	r2, [pc, #280]	; (800331c <HAL_GPIO_Init+0x2ec>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d101      	bne.n	800320c <HAL_GPIO_Init+0x1dc>
 8003208:	2304      	movs	r3, #4
 800320a:	e008      	b.n	800321e <HAL_GPIO_Init+0x1ee>
 800320c:	2307      	movs	r3, #7
 800320e:	e006      	b.n	800321e <HAL_GPIO_Init+0x1ee>
 8003210:	2303      	movs	r3, #3
 8003212:	e004      	b.n	800321e <HAL_GPIO_Init+0x1ee>
 8003214:	2302      	movs	r3, #2
 8003216:	e002      	b.n	800321e <HAL_GPIO_Init+0x1ee>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_GPIO_Init+0x1ee>
 800321c:	2300      	movs	r3, #0
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	f002 0203 	and.w	r2, r2, #3
 8003224:	0092      	lsls	r2, r2, #2
 8003226:	4093      	lsls	r3, r2
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800322e:	4937      	ldr	r1, [pc, #220]	; (800330c <HAL_GPIO_Init+0x2dc>)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	3302      	adds	r3, #2
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800323c:	4b38      	ldr	r3, [pc, #224]	; (8003320 <HAL_GPIO_Init+0x2f0>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	43db      	mvns	r3, r3
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4013      	ands	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003260:	4a2f      	ldr	r2, [pc, #188]	; (8003320 <HAL_GPIO_Init+0x2f0>)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003266:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <HAL_GPIO_Init+0x2f0>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	43db      	mvns	r3, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800328a:	4a25      	ldr	r2, [pc, #148]	; (8003320 <HAL_GPIO_Init+0x2f0>)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003290:	4b23      	ldr	r3, [pc, #140]	; (8003320 <HAL_GPIO_Init+0x2f0>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	43db      	mvns	r3, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032b4:	4a1a      	ldr	r2, [pc, #104]	; (8003320 <HAL_GPIO_Init+0x2f0>)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032ba:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_GPIO_Init+0x2f0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032de:	4a10      	ldr	r2, [pc, #64]	; (8003320 <HAL_GPIO_Init+0x2f0>)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3301      	adds	r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f47f aea3 	bne.w	8003040 <HAL_GPIO_Init+0x10>
  }
}
 80032fa:	bf00      	nop
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	40021000 	.word	0x40021000
 800330c:	40010000 	.word	0x40010000
 8003310:	48000400 	.word	0x48000400
 8003314:	48000800 	.word	0x48000800
 8003318:	48000c00 	.word	0x48000c00
 800331c:	48001000 	.word	0x48001000
 8003320:	40010400 	.word	0x40010400

08003324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
 8003330:	4613      	mov	r3, r2
 8003332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003334:	787b      	ldrb	r3, [r7, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003340:	e002      	b.n	8003348 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4013      	ands	r3, r2
 800336c:	041a      	lsls	r2, r3, #16
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	43d9      	mvns	r1, r3
 8003372:	887b      	ldrh	r3, [r7, #2]
 8003374:	400b      	ands	r3, r1
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	619a      	str	r2, [r3, #24]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40007000 	.word	0x40007000

080033a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b2:	d130      	bne.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033b4:	4b23      	ldr	r3, [pc, #140]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c0:	d038      	beq.n	8003434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033c2:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033ca:	4a1e      	ldr	r2, [pc, #120]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033d2:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2232      	movs	r2, #50	; 0x32
 80033d8:	fb02 f303 	mul.w	r3, r2, r3
 80033dc:	4a1b      	ldr	r2, [pc, #108]	; (800344c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0c9b      	lsrs	r3, r3, #18
 80033e4:	3301      	adds	r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e8:	e002      	b.n	80033f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033f0:	4b14      	ldr	r3, [pc, #80]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fc:	d102      	bne.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f2      	bne.n	80033ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003410:	d110      	bne.n	8003434 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e00f      	b.n	8003436 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003422:	d007      	beq.n	8003434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003424:	4b07      	ldr	r3, [pc, #28]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800342c:	4a05      	ldr	r2, [pc, #20]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003432:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40007000 	.word	0x40007000
 8003448:	20000008 	.word	0x20000008
 800344c:	431bde83 	.word	0x431bde83

08003450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e3fe      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003462:	4ba1      	ldr	r3, [pc, #644]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800346c:	4b9e      	ldr	r3, [pc, #632]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80e4 	beq.w	800364c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <HAL_RCC_OscConfig+0x4a>
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	f040 808b 	bne.w	80035a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b01      	cmp	r3, #1
 8003496:	f040 8087 	bne.w	80035a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800349a:	4b93      	ldr	r3, [pc, #588]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_RCC_OscConfig+0x62>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e3d6      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1a      	ldr	r2, [r3, #32]
 80034b6:	4b8c      	ldr	r3, [pc, #560]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d004      	beq.n	80034cc <HAL_RCC_OscConfig+0x7c>
 80034c2:	4b89      	ldr	r3, [pc, #548]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ca:	e005      	b.n	80034d8 <HAL_RCC_OscConfig+0x88>
 80034cc:	4b86      	ldr	r3, [pc, #536]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d8:	4293      	cmp	r3, r2
 80034da:	d223      	bcs.n	8003524 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fd53 	bl	8003f8c <RCC_SetFlashLatencyFromMSIRange>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e3b7      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034f0:	4b7d      	ldr	r3, [pc, #500]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a7c      	ldr	r2, [pc, #496]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034f6:	f043 0308 	orr.w	r3, r3, #8
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b7a      	ldr	r3, [pc, #488]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	4977      	ldr	r1, [pc, #476]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800350e:	4b76      	ldr	r3, [pc, #472]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	4972      	ldr	r1, [pc, #456]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
 8003522:	e025      	b.n	8003570 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003524:	4b70      	ldr	r3, [pc, #448]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a6f      	ldr	r2, [pc, #444]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800352a:	f043 0308 	orr.w	r3, r3, #8
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b6d      	ldr	r3, [pc, #436]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	496a      	ldr	r1, [pc, #424]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003542:	4b69      	ldr	r3, [pc, #420]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	4965      	ldr	r1, [pc, #404]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fd13 	bl	8003f8c <RCC_SetFlashLatencyFromMSIRange>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e377      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003570:	f000 fc80 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b5c      	ldr	r3, [pc, #368]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	495a      	ldr	r1, [pc, #360]	; (80036ec <HAL_RCC_OscConfig+0x29c>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	4a58      	ldr	r2, [pc, #352]	; (80036f0 <HAL_RCC_OscConfig+0x2a0>)
 800358e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003590:	4b58      	ldr	r3, [pc, #352]	; (80036f4 <HAL_RCC_OscConfig+0x2a4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7fd fe79 	bl	800128c <HAL_InitTick>
 800359a:	4603      	mov	r3, r0
 800359c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d052      	beq.n	800364a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	e35b      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d032      	beq.n	8003616 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035b0:	4b4d      	ldr	r3, [pc, #308]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a4c      	ldr	r2, [pc, #304]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035bc:	f7fd feb6 	bl	800132c <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035c4:	f7fd feb2 	bl	800132c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e344      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035d6:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e2:	4b41      	ldr	r3, [pc, #260]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a40      	ldr	r2, [pc, #256]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035e8:	f043 0308 	orr.w	r3, r3, #8
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	493b      	ldr	r1, [pc, #236]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003600:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	4936      	ldr	r1, [pc, #216]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
 8003614:	e01a      	b.n	800364c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003616:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a33      	ldr	r2, [pc, #204]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003622:	f7fd fe83 	bl	800132c <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800362a:	f7fd fe7f 	bl	800132c <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e311      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800363c:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x1da>
 8003648:	e000      	b.n	800364c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800364a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d074      	beq.n	8003742 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b08      	cmp	r3, #8
 800365c:	d005      	beq.n	800366a <HAL_RCC_OscConfig+0x21a>
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d10e      	bne.n	8003682 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d10b      	bne.n	8003682 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366a:	4b1f      	ldr	r3, [pc, #124]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d064      	beq.n	8003740 <HAL_RCC_OscConfig+0x2f0>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d160      	bne.n	8003740 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e2ee      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x24a>
 800368c:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a15      	ldr	r2, [pc, #84]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	e01d      	b.n	80036d6 <HAL_RCC_OscConfig+0x286>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a2:	d10c      	bne.n	80036be <HAL_RCC_OscConfig+0x26e>
 80036a4:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0f      	ldr	r2, [pc, #60]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	e00b      	b.n	80036d6 <HAL_RCC_OscConfig+0x286>
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a09      	ldr	r2, [pc, #36]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a06      	ldr	r2, [pc, #24]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01c      	beq.n	8003718 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7fd fe25 	bl	800132c <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e4:	e011      	b.n	800370a <HAL_RCC_OscConfig+0x2ba>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	08005a80 	.word	0x08005a80
 80036f0:	20000008 	.word	0x20000008
 80036f4:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f8:	f7fd fe18 	bl	800132c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	; 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e2aa      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800370a:	4baf      	ldr	r3, [pc, #700]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x2a8>
 8003716:	e014      	b.n	8003742 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fd fe08 	bl	800132c <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003720:	f7fd fe04 	bl	800132c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e296      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003732:	4ba5      	ldr	r3, [pc, #660]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x2d0>
 800373e:	e000      	b.n	8003742 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d060      	beq.n	8003810 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b04      	cmp	r3, #4
 8003752:	d005      	beq.n	8003760 <HAL_RCC_OscConfig+0x310>
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b0c      	cmp	r3, #12
 8003758:	d119      	bne.n	800378e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d116      	bne.n	800378e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003760:	4b99      	ldr	r3, [pc, #612]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_OscConfig+0x328>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e273      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003778:	4b93      	ldr	r3, [pc, #588]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	061b      	lsls	r3, r3, #24
 8003786:	4990      	ldr	r1, [pc, #576]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800378c:	e040      	b.n	8003810 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d023      	beq.n	80037de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003796:	4b8c      	ldr	r3, [pc, #560]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a8b      	ldr	r2, [pc, #556]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fd fdc3 	bl	800132c <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037aa:	f7fd fdbf 	bl	800132c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e251      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037bc:	4b82      	ldr	r3, [pc, #520]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c8:	4b7f      	ldr	r3, [pc, #508]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	061b      	lsls	r3, r3, #24
 80037d6:	497c      	ldr	r1, [pc, #496]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
 80037dc:	e018      	b.n	8003810 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037de:	4b7a      	ldr	r3, [pc, #488]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a79      	ldr	r2, [pc, #484]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80037e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fd fd9f 	bl	800132c <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f2:	f7fd fd9b 	bl	800132c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e22d      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003804:	4b70      	ldr	r3, [pc, #448]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f0      	bne.n	80037f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d03c      	beq.n	8003896 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01c      	beq.n	800385e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003824:	4b68      	ldr	r3, [pc, #416]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382a:	4a67      	ldr	r2, [pc, #412]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003834:	f7fd fd7a 	bl	800132c <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800383c:	f7fd fd76 	bl	800132c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e208      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800384e:	4b5e      	ldr	r3, [pc, #376]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ef      	beq.n	800383c <HAL_RCC_OscConfig+0x3ec>
 800385c:	e01b      	b.n	8003896 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385e:	4b5a      	ldr	r3, [pc, #360]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003864:	4a58      	ldr	r2, [pc, #352]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386e:	f7fd fd5d 	bl	800132c <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003876:	f7fd fd59 	bl	800132c <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e1eb      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003888:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800388a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1ef      	bne.n	8003876 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80a6 	beq.w	80039f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a4:	2300      	movs	r3, #0
 80038a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038a8:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10d      	bne.n	80038d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b4:	4b44      	ldr	r3, [pc, #272]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	4a43      	ldr	r2, [pc, #268]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80038ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038be:	6593      	str	r3, [r2, #88]	; 0x58
 80038c0:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038cc:	2301      	movs	r3, #1
 80038ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d0:	4b3e      	ldr	r3, [pc, #248]	; (80039cc <HAL_RCC_OscConfig+0x57c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d118      	bne.n	800390e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038dc:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <HAL_RCC_OscConfig+0x57c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a3a      	ldr	r2, [pc, #232]	; (80039cc <HAL_RCC_OscConfig+0x57c>)
 80038e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e8:	f7fd fd20 	bl	800132c <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f0:	f7fd fd1c 	bl	800132c <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e1ae      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003902:	4b32      	ldr	r3, [pc, #200]	; (80039cc <HAL_RCC_OscConfig+0x57c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d108      	bne.n	8003928 <HAL_RCC_OscConfig+0x4d8>
 8003916:	4b2c      	ldr	r3, [pc, #176]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	4a2a      	ldr	r2, [pc, #168]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003926:	e024      	b.n	8003972 <HAL_RCC_OscConfig+0x522>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b05      	cmp	r3, #5
 800392e:	d110      	bne.n	8003952 <HAL_RCC_OscConfig+0x502>
 8003930:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	4a24      	ldr	r2, [pc, #144]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003938:	f043 0304 	orr.w	r3, r3, #4
 800393c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	4a20      	ldr	r2, [pc, #128]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003950:	e00f      	b.n	8003972 <HAL_RCC_OscConfig+0x522>
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003958:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003962:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	4a17      	ldr	r2, [pc, #92]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800396a:	f023 0304 	bic.w	r3, r3, #4
 800396e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d016      	beq.n	80039a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397a:	f7fd fcd7 	bl	800132c <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003980:	e00a      	b.n	8003998 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003982:	f7fd fcd3 	bl	800132c <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003990:	4293      	cmp	r3, r2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e163      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0ed      	beq.n	8003982 <HAL_RCC_OscConfig+0x532>
 80039a6:	e01a      	b.n	80039de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fd fcc0 	bl	800132c <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039ae:	e00f      	b.n	80039d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fd fcbc 	bl	800132c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d906      	bls.n	80039d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e14c      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039d0:	4ba5      	ldr	r3, [pc, #660]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e8      	bne.n	80039b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039de:	7ffb      	ldrb	r3, [r7, #31]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d105      	bne.n	80039f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e4:	4ba0      	ldr	r3, [pc, #640]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 80039e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e8:	4a9f      	ldr	r2, [pc, #636]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 80039ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d03c      	beq.n	8003a76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01c      	beq.n	8003a3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a04:	4b98      	ldr	r3, [pc, #608]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a0a:	4a97      	ldr	r2, [pc, #604]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a14:	f7fd fc8a 	bl	800132c <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a1c:	f7fd fc86 	bl	800132c <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e118      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a2e:	4b8e      	ldr	r3, [pc, #568]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ef      	beq.n	8003a1c <HAL_RCC_OscConfig+0x5cc>
 8003a3c:	e01b      	b.n	8003a76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a3e:	4b8a      	ldr	r3, [pc, #552]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a44:	4a88      	ldr	r2, [pc, #544]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4e:	f7fd fc6d 	bl	800132c <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a56:	f7fd fc69 	bl	800132c <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0fb      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a68:	4b7f      	ldr	r3, [pc, #508]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1ef      	bne.n	8003a56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 80ef 	beq.w	8003c5e <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	f040 80c5 	bne.w	8003c14 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a8a:	4b77      	ldr	r3, [pc, #476]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f003 0203 	and.w	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d12c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d123      	bne.n	8003af8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d11b      	bne.n	8003af8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d113      	bne.n	8003af8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	3b01      	subs	r3, #1
 8003ade:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d109      	bne.n	8003af8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	3b01      	subs	r3, #1
 8003af2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d067      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b0c      	cmp	r3, #12
 8003afc:	d062      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003afe:	4b5a      	ldr	r3, [pc, #360]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e0a8      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b0e:	4b56      	ldr	r3, [pc, #344]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a55      	ldr	r2, [pc, #340]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003b14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b18:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b1a:	f7fd fc07 	bl	800132c <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b22:	f7fd fc03 	bl	800132c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e095      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b34:	4b4c      	ldr	r3, [pc, #304]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f0      	bne.n	8003b22 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b40:	4b49      	ldr	r3, [pc, #292]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	4b49      	ldr	r3, [pc, #292]	; (8003c6c <HAL_RCC_OscConfig+0x81c>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b50:	3a01      	subs	r2, #1
 8003b52:	0112      	lsls	r2, r2, #4
 8003b54:	4311      	orrs	r1, r2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b5a:	0212      	lsls	r2, r2, #8
 8003b5c:	4311      	orrs	r1, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b62:	0852      	lsrs	r2, r2, #1
 8003b64:	3a01      	subs	r2, #1
 8003b66:	0552      	lsls	r2, r2, #21
 8003b68:	4311      	orrs	r1, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b6e:	0852      	lsrs	r2, r2, #1
 8003b70:	3a01      	subs	r2, #1
 8003b72:	0652      	lsls	r2, r2, #25
 8003b74:	4311      	orrs	r1, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b7a:	06d2      	lsls	r2, r2, #27
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	493a      	ldr	r1, [pc, #232]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b84:	4b38      	ldr	r3, [pc, #224]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a37      	ldr	r2, [pc, #220]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b90:	4b35      	ldr	r3, [pc, #212]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a34      	ldr	r2, [pc, #208]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b9c:	f7fd fbc6 	bl	800132c <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fd fbc2 	bl	800132c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e054      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb6:	4b2c      	ldr	r3, [pc, #176]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bc2:	e04c      	b.n	8003c5e <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e04b      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc8:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d144      	bne.n	8003c5e <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bd4:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a23      	ldr	r2, [pc, #140]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003be0:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4a20      	ldr	r2, [pc, #128]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bec:	f7fd fb9e 	bl	800132c <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7fd fb9a 	bl	800132c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e02c      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c06:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x7a4>
 8003c12:	e024      	b.n	8003c5e <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d01f      	beq.n	8003c5a <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003c20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c26:	f7fd fb81 	bl	800132c <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2e:	f7fd fb7d 	bl	800132c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e00f      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c40:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f0      	bne.n	8003c2e <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	4905      	ldr	r1, [pc, #20]	; (8003c68 <HAL_RCC_OscConfig+0x818>)
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <HAL_RCC_OscConfig+0x820>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	60cb      	str	r3, [r1, #12]
 8003c58:	e001      	b.n	8003c5e <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	019d808c 	.word	0x019d808c
 8003c70:	feeefffc 	.word	0xfeeefffc

08003c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0e7      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c88:	4b75      	ldr	r3, [pc, #468]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d910      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b72      	ldr	r3, [pc, #456]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 0207 	bic.w	r2, r3, #7
 8003c9e:	4970      	ldr	r1, [pc, #448]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b6e      	ldr	r3, [pc, #440]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0cf      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d010      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	4b66      	ldr	r3, [pc, #408]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d908      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd4:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4960      	ldr	r1, [pc, #384]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d04c      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfa:	4b5a      	ldr	r3, [pc, #360]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d121      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e0a6      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d12:	4b54      	ldr	r3, [pc, #336]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d115      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e09a      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d107      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d2a:	4b4e      	ldr	r3, [pc, #312]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e08e      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d3a:	4b4a      	ldr	r3, [pc, #296]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e086      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d4a:	4b46      	ldr	r3, [pc, #280]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f023 0203 	bic.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4943      	ldr	r1, [pc, #268]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5c:	f7fd fae6 	bl	800132c <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d64:	f7fd fae2 	bl	800132c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e06e      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	4b3a      	ldr	r3, [pc, #232]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 020c 	and.w	r2, r3, #12
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d1eb      	bne.n	8003d64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d010      	beq.n	8003dba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	4b31      	ldr	r3, [pc, #196]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d208      	bcs.n	8003dba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da8:	4b2e      	ldr	r3, [pc, #184]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	492b      	ldr	r1, [pc, #172]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dba:	4b29      	ldr	r3, [pc, #164]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d210      	bcs.n	8003dea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc8:	4b25      	ldr	r3, [pc, #148]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f023 0207 	bic.w	r2, r3, #7
 8003dd0:	4923      	ldr	r1, [pc, #140]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd8:	4b21      	ldr	r3, [pc, #132]	; (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d001      	beq.n	8003dea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e036      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d008      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df6:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	4918      	ldr	r1, [pc, #96]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d009      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e14:	4b13      	ldr	r3, [pc, #76]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4910      	ldr	r1, [pc, #64]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e28:	f000 f824 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	490b      	ldr	r1, [pc, #44]	; (8003e68 <HAL_RCC_ClockConfig+0x1f4>)
 8003e3a:	5ccb      	ldrb	r3, [r1, r3]
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
 8003e44:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <HAL_RCC_ClockConfig+0x1f8>)
 8003e46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e48:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <HAL_RCC_ClockConfig+0x1fc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fd fa1d 	bl	800128c <HAL_InitTick>
 8003e52:	4603      	mov	r3, r0
 8003e54:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e56:	7afb      	ldrb	r3, [r7, #11]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40022000 	.word	0x40022000
 8003e64:	40021000 	.word	0x40021000
 8003e68:	08005a80 	.word	0x08005a80
 8003e6c:	20000008 	.word	0x20000008
 8003e70:	2000000c 	.word	0x2000000c

08003e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	; 0x24
 8003e78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e82:	4b3e      	ldr	r3, [pc, #248]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e8c:	4b3b      	ldr	r3, [pc, #236]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b0c      	cmp	r3, #12
 8003ea0:	d121      	bne.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d11e      	bne.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ea8:	4b34      	ldr	r3, [pc, #208]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d107      	bne.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003eb4:	4b31      	ldr	r3, [pc, #196]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	e005      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ec4:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ed0:	4a2b      	ldr	r2, [pc, #172]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10d      	bne.n	8003efc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ee4:	e00a      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d102      	bne.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eec:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	e004      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d101      	bne.n	8003efc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ef8:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8003efa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	d134      	bne.n	8003f6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f02:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_GetSysClockFreq+0xa6>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d003      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0xac>
 8003f18:	e005      	b.n	8003f26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f1c:	617b      	str	r3, [r7, #20]
      break;
 8003f1e:	e005      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f20:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f22:	617b      	str	r3, [r7, #20]
      break;
 8003f24:	e002      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	617b      	str	r3, [r7, #20]
      break;
 8003f2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f2c:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	3301      	adds	r3, #1
 8003f38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	0a1b      	lsrs	r3, r3, #8
 8003f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	fb02 f203 	mul.w	r2, r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	0e5b      	lsrs	r3, r3, #25
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f6c:	69bb      	ldr	r3, [r7, #24]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3724      	adds	r7, #36	; 0x24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	08005a90 	.word	0x08005a90
 8003f84:	00f42400 	.word	0x00f42400
 8003f88:	016e3600 	.word	0x016e3600

08003f8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f98:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fa4:	f7ff f9f0 	bl	8003388 <HAL_PWREx_GetVoltageRange>
 8003fa8:	6178      	str	r0, [r7, #20]
 8003faa:	e014      	b.n	8003fd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fac:	4b25      	ldr	r3, [pc, #148]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	4a24      	ldr	r2, [pc, #144]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fc4:	f7ff f9e0 	bl	8003388 <HAL_PWREx_GetVoltageRange>
 8003fc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fca:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fdc:	d10b      	bne.n	8003ff6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b80      	cmp	r3, #128	; 0x80
 8003fe2:	d919      	bls.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2ba0      	cmp	r3, #160	; 0xa0
 8003fe8:	d902      	bls.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fea:	2302      	movs	r3, #2
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	e013      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e010      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d902      	bls.n	8004002 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	e00a      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d102      	bne.n	800400e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004008:	2302      	movs	r3, #2
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	e004      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b70      	cmp	r3, #112	; 0x70
 8004012:	d101      	bne.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004014:	2301      	movs	r3, #1
 8004016:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f023 0207 	bic.w	r2, r3, #7
 8004020:	4909      	ldr	r1, [pc, #36]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	429a      	cmp	r2, r3
 8004034:	d001      	beq.n	800403a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	40022000 	.word	0x40022000

0800404c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004054:	2300      	movs	r3, #0
 8004056:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004058:	2300      	movs	r3, #0
 800405a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004064:	2b00      	cmp	r3, #0
 8004066:	d031      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004070:	d01a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004072:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004076:	d814      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800407c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004080:	d10f      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004082:	4b5d      	ldr	r3, [pc, #372]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	4a5c      	ldr	r2, [pc, #368]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800408e:	e00c      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	2100      	movs	r1, #0
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f9f0 	bl	800447c <RCCEx_PLLSAI1_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040a0:	e003      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	74fb      	strb	r3, [r7, #19]
      break;
 80040a6:	e000      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80040a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040b0:	4b51      	ldr	r3, [pc, #324]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	494e      	ldr	r1, [pc, #312]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040c6:	e001      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 809e 	beq.w	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040da:	2300      	movs	r3, #0
 80040dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040de:	4b46      	ldr	r3, [pc, #280]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80040ee:	2300      	movs	r3, #0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00d      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f4:	4b40      	ldr	r3, [pc, #256]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	4a3f      	ldr	r2, [pc, #252]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004100:	4b3d      	ldr	r3, [pc, #244]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800410c:	2301      	movs	r3, #1
 800410e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004110:	4b3a      	ldr	r3, [pc, #232]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a39      	ldr	r2, [pc, #228]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800411c:	f7fd f906 	bl	800132c <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004122:	e009      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004124:	f7fd f902 	bl	800132c <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d902      	bls.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	74fb      	strb	r3, [r7, #19]
        break;
 8004136:	e005      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004138:	4b30      	ldr	r3, [pc, #192]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0ef      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d15a      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800414a:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004154:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01e      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	429a      	cmp	r2, r3
 8004164:	d019      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004166:	4b24      	ldr	r3, [pc, #144]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004170:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004172:	4b21      	ldr	r3, [pc, #132]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004178:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800417a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004182:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004188:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800418a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004192:	4a19      	ldr	r2, [pc, #100]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d016      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fd f8c2 	bl	800132c <HAL_GetTick>
 80041a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041aa:	e00b      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ac:	f7fd f8be 	bl	800132c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d902      	bls.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	74fb      	strb	r3, [r7, #19]
            break;
 80041c2:	e006      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0ec      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80041d2:	7cfb      	ldrb	r3, [r7, #19]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10b      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d8:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	4904      	ldr	r1, [pc, #16]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041ee:	e009      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041f0:	7cfb      	ldrb	r3, [r7, #19]
 80041f2:	74bb      	strb	r3, [r7, #18]
 80041f4:	e006      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004204:	7c7b      	ldrb	r3, [r7, #17]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d105      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800420a:	4b9b      	ldr	r3, [pc, #620]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420e:	4a9a      	ldr	r2, [pc, #616]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004214:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004222:	4b95      	ldr	r3, [pc, #596]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	f023 0203 	bic.w	r2, r3, #3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	4991      	ldr	r1, [pc, #580]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004244:	4b8c      	ldr	r3, [pc, #560]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f023 020c 	bic.w	r2, r3, #12
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	4989      	ldr	r1, [pc, #548]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004266:	4b84      	ldr	r3, [pc, #528]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	4980      	ldr	r1, [pc, #512]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004288:	4b7b      	ldr	r3, [pc, #492]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	4978      	ldr	r1, [pc, #480]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042aa:	4b73      	ldr	r3, [pc, #460]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	496f      	ldr	r1, [pc, #444]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042cc:	4b6a      	ldr	r3, [pc, #424]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	4967      	ldr	r1, [pc, #412]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042ee:	4b62      	ldr	r3, [pc, #392]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	495e      	ldr	r1, [pc, #376]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004310:	4b59      	ldr	r3, [pc, #356]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431e:	4956      	ldr	r1, [pc, #344]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004332:	4b51      	ldr	r3, [pc, #324]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	494d      	ldr	r1, [pc, #308]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d028      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004354:	4b48      	ldr	r3, [pc, #288]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004362:	4945      	ldr	r1, [pc, #276]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004372:	d106      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004374:	4b40      	ldr	r3, [pc, #256]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4a3f      	ldr	r2, [pc, #252]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800437a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800437e:	60d3      	str	r3, [r2, #12]
 8004380:	e011      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004386:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800438a:	d10c      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	2101      	movs	r1, #1
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f872 	bl	800447c <RCCEx_PLLSAI1_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800439c:	7cfb      	ldrb	r3, [r7, #19]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80043a2:	7cfb      	ldrb	r3, [r7, #19]
 80043a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d028      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043b2:	4b31      	ldr	r3, [pc, #196]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c0:	492d      	ldr	r1, [pc, #180]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043d0:	d106      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043d2:	4b29      	ldr	r3, [pc, #164]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4a28      	ldr	r2, [pc, #160]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043dc:	60d3      	str	r3, [r2, #12]
 80043de:	e011      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043e8:	d10c      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3304      	adds	r3, #4
 80043ee:	2101      	movs	r1, #1
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 f843 	bl	800447c <RCCEx_PLLSAI1_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043fa:	7cfb      	ldrb	r3, [r7, #19]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01c      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004410:	4b19      	ldr	r3, [pc, #100]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004416:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441e:	4916      	ldr	r1, [pc, #88]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800442e:	d10c      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	2102      	movs	r1, #2
 8004436:	4618      	mov	r0, r3
 8004438:	f000 f820 	bl	800447c <RCCEx_PLLSAI1_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004456:	4b08      	ldr	r3, [pc, #32]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	4904      	ldr	r1, [pc, #16]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800446c:	7cbb      	ldrb	r3, [r7, #18]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000

0800447c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800448a:	4b74      	ldr	r3, [pc, #464]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d018      	beq.n	80044c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004496:	4b71      	ldr	r3, [pc, #452]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0203 	and.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d10d      	bne.n	80044c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
       ||
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044ae:	4b6b      	ldr	r3, [pc, #428]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
       ||
 80044be:	429a      	cmp	r2, r3
 80044c0:	d047      	beq.n	8004552 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]
 80044c6:	e044      	b.n	8004552 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d018      	beq.n	8004502 <RCCEx_PLLSAI1_Config+0x86>
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d825      	bhi.n	8004520 <RCCEx_PLLSAI1_Config+0xa4>
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d002      	beq.n	80044de <RCCEx_PLLSAI1_Config+0x62>
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d009      	beq.n	80044f0 <RCCEx_PLLSAI1_Config+0x74>
 80044dc:	e020      	b.n	8004520 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044de:	4b5f      	ldr	r3, [pc, #380]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d11d      	bne.n	8004526 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ee:	e01a      	b.n	8004526 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044f0:	4b5a      	ldr	r3, [pc, #360]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d116      	bne.n	800452a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004500:	e013      	b.n	800452a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004502:	4b56      	ldr	r3, [pc, #344]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10f      	bne.n	800452e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800450e:	4b53      	ldr	r3, [pc, #332]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800451e:	e006      	b.n	800452e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
      break;
 8004524:	e004      	b.n	8004530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004526:	bf00      	nop
 8004528:	e002      	b.n	8004530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800452a:	bf00      	nop
 800452c:	e000      	b.n	8004530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800452e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10d      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004536:	4b49      	ldr	r3, [pc, #292]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6819      	ldr	r1, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	3b01      	subs	r3, #1
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	430b      	orrs	r3, r1
 800454c:	4943      	ldr	r1, [pc, #268]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 800454e:	4313      	orrs	r3, r2
 8004550:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d17c      	bne.n	8004652 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004558:	4b40      	ldr	r3, [pc, #256]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a3f      	ldr	r2, [pc, #252]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 800455e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004564:	f7fc fee2 	bl	800132c <HAL_GetTick>
 8004568:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800456a:	e009      	b.n	8004580 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800456c:	f7fc fede 	bl	800132c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d902      	bls.n	8004580 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	73fb      	strb	r3, [r7, #15]
        break;
 800457e:	e005      	b.n	800458c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004580:	4b36      	ldr	r3, [pc, #216]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1ef      	bne.n	800456c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d15f      	bne.n	8004652 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d110      	bne.n	80045ba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004598:	4b30      	ldr	r3, [pc, #192]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80045a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6892      	ldr	r2, [r2, #8]
 80045a8:	0211      	lsls	r1, r2, #8
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	68d2      	ldr	r2, [r2, #12]
 80045ae:	06d2      	lsls	r2, r2, #27
 80045b0:	430a      	orrs	r2, r1
 80045b2:	492a      	ldr	r1, [pc, #168]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	610b      	str	r3, [r1, #16]
 80045b8:	e027      	b.n	800460a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d112      	bne.n	80045e6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045c0:	4b26      	ldr	r3, [pc, #152]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6892      	ldr	r2, [r2, #8]
 80045d0:	0211      	lsls	r1, r2, #8
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6912      	ldr	r2, [r2, #16]
 80045d6:	0852      	lsrs	r2, r2, #1
 80045d8:	3a01      	subs	r2, #1
 80045da:	0552      	lsls	r2, r2, #21
 80045dc:	430a      	orrs	r2, r1
 80045de:	491f      	ldr	r1, [pc, #124]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	610b      	str	r3, [r1, #16]
 80045e4:	e011      	b.n	800460a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045e6:	4b1d      	ldr	r3, [pc, #116]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6892      	ldr	r2, [r2, #8]
 80045f6:	0211      	lsls	r1, r2, #8
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6952      	ldr	r2, [r2, #20]
 80045fc:	0852      	lsrs	r2, r2, #1
 80045fe:	3a01      	subs	r2, #1
 8004600:	0652      	lsls	r2, r2, #25
 8004602:	430a      	orrs	r2, r1
 8004604:	4915      	ldr	r1, [pc, #84]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800460a:	4b14      	ldr	r3, [pc, #80]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a13      	ldr	r2, [pc, #76]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004610:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004614:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004616:	f7fc fe89 	bl	800132c <HAL_GetTick>
 800461a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800461c:	e009      	b.n	8004632 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800461e:	f7fc fe85 	bl	800132c <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d902      	bls.n	8004632 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	73fb      	strb	r3, [r7, #15]
          break;
 8004630:	e005      	b.n	800463e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004632:	4b0a      	ldr	r3, [pc, #40]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0ef      	beq.n	800461e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	4903      	ldr	r1, [pc, #12]	; (800465c <RCCEx_PLLSAI1_Config+0x1e0>)
 800464e:	4313      	orrs	r3, r2
 8004650:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004652:	7bfb      	ldrb	r3, [r7, #15]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40021000 	.word	0x40021000

08004660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e049      	b.n	8004706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fc fc82 	bl	8000f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	4619      	mov	r1, r3
 800469e:	4610      	mov	r0, r2
 80046a0:	f000 f960 	bl	8004964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	d001      	beq.n	8004728 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e033      	b.n	8004790 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a19      	ldr	r2, [pc, #100]	; (800479c <HAL_TIM_Base_Start+0x8c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d009      	beq.n	800474e <HAL_TIM_Base_Start+0x3e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004742:	d004      	beq.n	800474e <HAL_TIM_Base_Start+0x3e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <HAL_TIM_Base_Start+0x90>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d115      	bne.n	800477a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <HAL_TIM_Base_Start+0x94>)
 8004756:	4013      	ands	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b06      	cmp	r3, #6
 800475e:	d015      	beq.n	800478c <HAL_TIM_Base_Start+0x7c>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004766:	d011      	beq.n	800478c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004778:	e008      	b.n	800478c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	e000      	b.n	800478e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40014000 	.word	0x40014000
 80047a4:	00010007 	.word	0x00010007

080047a8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <HAL_TIM_OC_Start+0x24>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	e03c      	b.n	8004846 <HAL_TIM_OC_Start+0x9e>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d109      	bne.n	80047e6 <HAL_TIM_OC_Start+0x3e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b01      	cmp	r3, #1
 80047dc:	bf14      	ite	ne
 80047de:	2301      	movne	r3, #1
 80047e0:	2300      	moveq	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	e02f      	b.n	8004846 <HAL_TIM_OC_Start+0x9e>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d109      	bne.n	8004800 <HAL_TIM_OC_Start+0x58>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	e022      	b.n	8004846 <HAL_TIM_OC_Start+0x9e>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b0c      	cmp	r3, #12
 8004804:	d109      	bne.n	800481a <HAL_TIM_OC_Start+0x72>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	bf14      	ite	ne
 8004812:	2301      	movne	r3, #1
 8004814:	2300      	moveq	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	e015      	b.n	8004846 <HAL_TIM_OC_Start+0x9e>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b10      	cmp	r3, #16
 800481e:	d109      	bne.n	8004834 <HAL_TIM_OC_Start+0x8c>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	bf14      	ite	ne
 800482c:	2301      	movne	r3, #1
 800482e:	2300      	moveq	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	e008      	b.n	8004846 <HAL_TIM_OC_Start+0x9e>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	bf14      	ite	ne
 8004840:	2301      	movne	r3, #1
 8004842:	2300      	moveq	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e07e      	b.n	800494c <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d104      	bne.n	800485e <HAL_TIM_OC_Start+0xb6>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800485c:	e023      	b.n	80048a6 <HAL_TIM_OC_Start+0xfe>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b04      	cmp	r3, #4
 8004862:	d104      	bne.n	800486e <HAL_TIM_OC_Start+0xc6>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800486c:	e01b      	b.n	80048a6 <HAL_TIM_OC_Start+0xfe>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b08      	cmp	r3, #8
 8004872:	d104      	bne.n	800487e <HAL_TIM_OC_Start+0xd6>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800487c:	e013      	b.n	80048a6 <HAL_TIM_OC_Start+0xfe>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b0c      	cmp	r3, #12
 8004882:	d104      	bne.n	800488e <HAL_TIM_OC_Start+0xe6>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800488c:	e00b      	b.n	80048a6 <HAL_TIM_OC_Start+0xfe>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b10      	cmp	r3, #16
 8004892:	d104      	bne.n	800489e <HAL_TIM_OC_Start+0xf6>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800489c:	e003      	b.n	80048a6 <HAL_TIM_OC_Start+0xfe>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2202      	movs	r2, #2
 80048a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2201      	movs	r2, #1
 80048ac:	6839      	ldr	r1, [r7, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f8bc 	bl	8004a2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a26      	ldr	r2, [pc, #152]	; (8004954 <HAL_TIM_OC_Start+0x1ac>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d009      	beq.n	80048d2 <HAL_TIM_OC_Start+0x12a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a25      	ldr	r2, [pc, #148]	; (8004958 <HAL_TIM_OC_Start+0x1b0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d004      	beq.n	80048d2 <HAL_TIM_OC_Start+0x12a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a23      	ldr	r2, [pc, #140]	; (800495c <HAL_TIM_OC_Start+0x1b4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d101      	bne.n	80048d6 <HAL_TIM_OC_Start+0x12e>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <HAL_TIM_OC_Start+0x130>
 80048d6:	2300      	movs	r3, #0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a18      	ldr	r2, [pc, #96]	; (8004954 <HAL_TIM_OC_Start+0x1ac>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d009      	beq.n	800490a <HAL_TIM_OC_Start+0x162>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fe:	d004      	beq.n	800490a <HAL_TIM_OC_Start+0x162>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a14      	ldr	r2, [pc, #80]	; (8004958 <HAL_TIM_OC_Start+0x1b0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d115      	bne.n	8004936 <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	4b13      	ldr	r3, [pc, #76]	; (8004960 <HAL_TIM_OC_Start+0x1b8>)
 8004912:	4013      	ands	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b06      	cmp	r3, #6
 800491a:	d015      	beq.n	8004948 <HAL_TIM_OC_Start+0x1a0>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004922:	d011      	beq.n	8004948 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004934:	e008      	b.n	8004948 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f042 0201 	orr.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	e000      	b.n	800494a <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004948:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40012c00 	.word	0x40012c00
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	00010007 	.word	0x00010007

08004964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a2a      	ldr	r2, [pc, #168]	; (8004a20 <TIM_Base_SetConfig+0xbc>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <TIM_Base_SetConfig+0x20>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004982:	d108      	bne.n	8004996 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a21      	ldr	r2, [pc, #132]	; (8004a20 <TIM_Base_SetConfig+0xbc>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00b      	beq.n	80049b6 <TIM_Base_SetConfig+0x52>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a4:	d007      	beq.n	80049b6 <TIM_Base_SetConfig+0x52>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <TIM_Base_SetConfig+0xc0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d003      	beq.n	80049b6 <TIM_Base_SetConfig+0x52>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <TIM_Base_SetConfig+0xc4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d108      	bne.n	80049c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a0c      	ldr	r2, [pc, #48]	; (8004a20 <TIM_Base_SetConfig+0xbc>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d007      	beq.n	8004a04 <TIM_Base_SetConfig+0xa0>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a0b      	ldr	r2, [pc, #44]	; (8004a24 <TIM_Base_SetConfig+0xc0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d003      	beq.n	8004a04 <TIM_Base_SetConfig+0xa0>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <TIM_Base_SetConfig+0xc4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d103      	bne.n	8004a0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	615a      	str	r2, [r3, #20]
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40012c00 	.word	0x40012c00
 8004a24:	40014000 	.word	0x40014000
 8004a28:	40014400 	.word	0x40014400

08004a2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	2201      	movs	r2, #1
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a1a      	ldr	r2, [r3, #32]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	401a      	ands	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a1a      	ldr	r2, [r3, #32]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	fa01 f303 	lsl.w	r3, r1, r3
 8004a64:	431a      	orrs	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e04f      	b.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d108      	bne.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ac0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a14      	ldr	r2, [pc, #80]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d009      	beq.n	8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af8:	d004      	beq.n	8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a10      	ldr	r2, [pc, #64]	; (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d10c      	bne.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40012c00 	.word	0x40012c00
 8004b40:	40014000 	.word	0x40014000

08004b44 <__errno>:
 8004b44:	4b01      	ldr	r3, [pc, #4]	; (8004b4c <__errno+0x8>)
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	20000014 	.word	0x20000014

08004b50 <__libc_init_array>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	4d0d      	ldr	r5, [pc, #52]	; (8004b88 <__libc_init_array+0x38>)
 8004b54:	4c0d      	ldr	r4, [pc, #52]	; (8004b8c <__libc_init_array+0x3c>)
 8004b56:	1b64      	subs	r4, r4, r5
 8004b58:	10a4      	asrs	r4, r4, #2
 8004b5a:	2600      	movs	r6, #0
 8004b5c:	42a6      	cmp	r6, r4
 8004b5e:	d109      	bne.n	8004b74 <__libc_init_array+0x24>
 8004b60:	4d0b      	ldr	r5, [pc, #44]	; (8004b90 <__libc_init_array+0x40>)
 8004b62:	4c0c      	ldr	r4, [pc, #48]	; (8004b94 <__libc_init_array+0x44>)
 8004b64:	f000 ff76 	bl	8005a54 <_init>
 8004b68:	1b64      	subs	r4, r4, r5
 8004b6a:	10a4      	asrs	r4, r4, #2
 8004b6c:	2600      	movs	r6, #0
 8004b6e:	42a6      	cmp	r6, r4
 8004b70:	d105      	bne.n	8004b7e <__libc_init_array+0x2e>
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b78:	4798      	blx	r3
 8004b7a:	3601      	adds	r6, #1
 8004b7c:	e7ee      	b.n	8004b5c <__libc_init_array+0xc>
 8004b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b82:	4798      	blx	r3
 8004b84:	3601      	adds	r6, #1
 8004b86:	e7f2      	b.n	8004b6e <__libc_init_array+0x1e>
 8004b88:	08005b58 	.word	0x08005b58
 8004b8c:	08005b58 	.word	0x08005b58
 8004b90:	08005b58 	.word	0x08005b58
 8004b94:	08005b5c 	.word	0x08005b5c

08004b98 <memset>:
 8004b98:	4402      	add	r2, r0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d100      	bne.n	8004ba2 <memset+0xa>
 8004ba0:	4770      	bx	lr
 8004ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba6:	e7f9      	b.n	8004b9c <memset+0x4>

08004ba8 <iprintf>:
 8004ba8:	b40f      	push	{r0, r1, r2, r3}
 8004baa:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <iprintf+0x2c>)
 8004bac:	b513      	push	{r0, r1, r4, lr}
 8004bae:	681c      	ldr	r4, [r3, #0]
 8004bb0:	b124      	cbz	r4, 8004bbc <iprintf+0x14>
 8004bb2:	69a3      	ldr	r3, [r4, #24]
 8004bb4:	b913      	cbnz	r3, 8004bbc <iprintf+0x14>
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f000 f9e8 	bl	8004f8c <__sinit>
 8004bbc:	ab05      	add	r3, sp, #20
 8004bbe:	9a04      	ldr	r2, [sp, #16]
 8004bc0:	68a1      	ldr	r1, [r4, #8]
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f000 fbb9 	bl	800533c <_vfiprintf_r>
 8004bca:	b002      	add	sp, #8
 8004bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd0:	b004      	add	sp, #16
 8004bd2:	4770      	bx	lr
 8004bd4:	20000014 	.word	0x20000014

08004bd8 <__swbuf_r>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	460e      	mov	r6, r1
 8004bdc:	4614      	mov	r4, r2
 8004bde:	4605      	mov	r5, r0
 8004be0:	b118      	cbz	r0, 8004bea <__swbuf_r+0x12>
 8004be2:	6983      	ldr	r3, [r0, #24]
 8004be4:	b90b      	cbnz	r3, 8004bea <__swbuf_r+0x12>
 8004be6:	f000 f9d1 	bl	8004f8c <__sinit>
 8004bea:	4b21      	ldr	r3, [pc, #132]	; (8004c70 <__swbuf_r+0x98>)
 8004bec:	429c      	cmp	r4, r3
 8004bee:	d12b      	bne.n	8004c48 <__swbuf_r+0x70>
 8004bf0:	686c      	ldr	r4, [r5, #4]
 8004bf2:	69a3      	ldr	r3, [r4, #24]
 8004bf4:	60a3      	str	r3, [r4, #8]
 8004bf6:	89a3      	ldrh	r3, [r4, #12]
 8004bf8:	071a      	lsls	r2, r3, #28
 8004bfa:	d52f      	bpl.n	8004c5c <__swbuf_r+0x84>
 8004bfc:	6923      	ldr	r3, [r4, #16]
 8004bfe:	b36b      	cbz	r3, 8004c5c <__swbuf_r+0x84>
 8004c00:	6923      	ldr	r3, [r4, #16]
 8004c02:	6820      	ldr	r0, [r4, #0]
 8004c04:	1ac0      	subs	r0, r0, r3
 8004c06:	6963      	ldr	r3, [r4, #20]
 8004c08:	b2f6      	uxtb	r6, r6
 8004c0a:	4283      	cmp	r3, r0
 8004c0c:	4637      	mov	r7, r6
 8004c0e:	dc04      	bgt.n	8004c1a <__swbuf_r+0x42>
 8004c10:	4621      	mov	r1, r4
 8004c12:	4628      	mov	r0, r5
 8004c14:	f000 f926 	bl	8004e64 <_fflush_r>
 8004c18:	bb30      	cbnz	r0, 8004c68 <__swbuf_r+0x90>
 8004c1a:	68a3      	ldr	r3, [r4, #8]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	60a3      	str	r3, [r4, #8]
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	6022      	str	r2, [r4, #0]
 8004c26:	701e      	strb	r6, [r3, #0]
 8004c28:	6963      	ldr	r3, [r4, #20]
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	4283      	cmp	r3, r0
 8004c2e:	d004      	beq.n	8004c3a <__swbuf_r+0x62>
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	07db      	lsls	r3, r3, #31
 8004c34:	d506      	bpl.n	8004c44 <__swbuf_r+0x6c>
 8004c36:	2e0a      	cmp	r6, #10
 8004c38:	d104      	bne.n	8004c44 <__swbuf_r+0x6c>
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f000 f911 	bl	8004e64 <_fflush_r>
 8004c42:	b988      	cbnz	r0, 8004c68 <__swbuf_r+0x90>
 8004c44:	4638      	mov	r0, r7
 8004c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <__swbuf_r+0x9c>)
 8004c4a:	429c      	cmp	r4, r3
 8004c4c:	d101      	bne.n	8004c52 <__swbuf_r+0x7a>
 8004c4e:	68ac      	ldr	r4, [r5, #8]
 8004c50:	e7cf      	b.n	8004bf2 <__swbuf_r+0x1a>
 8004c52:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <__swbuf_r+0xa0>)
 8004c54:	429c      	cmp	r4, r3
 8004c56:	bf08      	it	eq
 8004c58:	68ec      	ldreq	r4, [r5, #12]
 8004c5a:	e7ca      	b.n	8004bf2 <__swbuf_r+0x1a>
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 f80c 	bl	8004c7c <__swsetup_r>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d0cb      	beq.n	8004c00 <__swbuf_r+0x28>
 8004c68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004c6c:	e7ea      	b.n	8004c44 <__swbuf_r+0x6c>
 8004c6e:	bf00      	nop
 8004c70:	08005ae4 	.word	0x08005ae4
 8004c74:	08005b04 	.word	0x08005b04
 8004c78:	08005ac4 	.word	0x08005ac4

08004c7c <__swsetup_r>:
 8004c7c:	4b32      	ldr	r3, [pc, #200]	; (8004d48 <__swsetup_r+0xcc>)
 8004c7e:	b570      	push	{r4, r5, r6, lr}
 8004c80:	681d      	ldr	r5, [r3, #0]
 8004c82:	4606      	mov	r6, r0
 8004c84:	460c      	mov	r4, r1
 8004c86:	b125      	cbz	r5, 8004c92 <__swsetup_r+0x16>
 8004c88:	69ab      	ldr	r3, [r5, #24]
 8004c8a:	b913      	cbnz	r3, 8004c92 <__swsetup_r+0x16>
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f000 f97d 	bl	8004f8c <__sinit>
 8004c92:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <__swsetup_r+0xd0>)
 8004c94:	429c      	cmp	r4, r3
 8004c96:	d10f      	bne.n	8004cb8 <__swsetup_r+0x3c>
 8004c98:	686c      	ldr	r4, [r5, #4]
 8004c9a:	89a3      	ldrh	r3, [r4, #12]
 8004c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ca0:	0719      	lsls	r1, r3, #28
 8004ca2:	d42c      	bmi.n	8004cfe <__swsetup_r+0x82>
 8004ca4:	06dd      	lsls	r5, r3, #27
 8004ca6:	d411      	bmi.n	8004ccc <__swsetup_r+0x50>
 8004ca8:	2309      	movs	r3, #9
 8004caa:	6033      	str	r3, [r6, #0]
 8004cac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cb0:	81a3      	strh	r3, [r4, #12]
 8004cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cb6:	e03e      	b.n	8004d36 <__swsetup_r+0xba>
 8004cb8:	4b25      	ldr	r3, [pc, #148]	; (8004d50 <__swsetup_r+0xd4>)
 8004cba:	429c      	cmp	r4, r3
 8004cbc:	d101      	bne.n	8004cc2 <__swsetup_r+0x46>
 8004cbe:	68ac      	ldr	r4, [r5, #8]
 8004cc0:	e7eb      	b.n	8004c9a <__swsetup_r+0x1e>
 8004cc2:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <__swsetup_r+0xd8>)
 8004cc4:	429c      	cmp	r4, r3
 8004cc6:	bf08      	it	eq
 8004cc8:	68ec      	ldreq	r4, [r5, #12]
 8004cca:	e7e6      	b.n	8004c9a <__swsetup_r+0x1e>
 8004ccc:	0758      	lsls	r0, r3, #29
 8004cce:	d512      	bpl.n	8004cf6 <__swsetup_r+0x7a>
 8004cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cd2:	b141      	cbz	r1, 8004ce6 <__swsetup_r+0x6a>
 8004cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cd8:	4299      	cmp	r1, r3
 8004cda:	d002      	beq.n	8004ce2 <__swsetup_r+0x66>
 8004cdc:	4630      	mov	r0, r6
 8004cde:	f000 fa59 	bl	8005194 <_free_r>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	6363      	str	r3, [r4, #52]	; 0x34
 8004ce6:	89a3      	ldrh	r3, [r4, #12]
 8004ce8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004cec:	81a3      	strh	r3, [r4, #12]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	6063      	str	r3, [r4, #4]
 8004cf2:	6923      	ldr	r3, [r4, #16]
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	89a3      	ldrh	r3, [r4, #12]
 8004cf8:	f043 0308 	orr.w	r3, r3, #8
 8004cfc:	81a3      	strh	r3, [r4, #12]
 8004cfe:	6923      	ldr	r3, [r4, #16]
 8004d00:	b94b      	cbnz	r3, 8004d16 <__swsetup_r+0x9a>
 8004d02:	89a3      	ldrh	r3, [r4, #12]
 8004d04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d0c:	d003      	beq.n	8004d16 <__swsetup_r+0x9a>
 8004d0e:	4621      	mov	r1, r4
 8004d10:	4630      	mov	r0, r6
 8004d12:	f000 f9ff 	bl	8005114 <__smakebuf_r>
 8004d16:	89a0      	ldrh	r0, [r4, #12]
 8004d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d1c:	f010 0301 	ands.w	r3, r0, #1
 8004d20:	d00a      	beq.n	8004d38 <__swsetup_r+0xbc>
 8004d22:	2300      	movs	r3, #0
 8004d24:	60a3      	str	r3, [r4, #8]
 8004d26:	6963      	ldr	r3, [r4, #20]
 8004d28:	425b      	negs	r3, r3
 8004d2a:	61a3      	str	r3, [r4, #24]
 8004d2c:	6923      	ldr	r3, [r4, #16]
 8004d2e:	b943      	cbnz	r3, 8004d42 <__swsetup_r+0xc6>
 8004d30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d34:	d1ba      	bne.n	8004cac <__swsetup_r+0x30>
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
 8004d38:	0781      	lsls	r1, r0, #30
 8004d3a:	bf58      	it	pl
 8004d3c:	6963      	ldrpl	r3, [r4, #20]
 8004d3e:	60a3      	str	r3, [r4, #8]
 8004d40:	e7f4      	b.n	8004d2c <__swsetup_r+0xb0>
 8004d42:	2000      	movs	r0, #0
 8004d44:	e7f7      	b.n	8004d36 <__swsetup_r+0xba>
 8004d46:	bf00      	nop
 8004d48:	20000014 	.word	0x20000014
 8004d4c:	08005ae4 	.word	0x08005ae4
 8004d50:	08005b04 	.word	0x08005b04
 8004d54:	08005ac4 	.word	0x08005ac4

08004d58 <__sflush_r>:
 8004d58:	898a      	ldrh	r2, [r1, #12]
 8004d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d5e:	4605      	mov	r5, r0
 8004d60:	0710      	lsls	r0, r2, #28
 8004d62:	460c      	mov	r4, r1
 8004d64:	d458      	bmi.n	8004e18 <__sflush_r+0xc0>
 8004d66:	684b      	ldr	r3, [r1, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	dc05      	bgt.n	8004d78 <__sflush_r+0x20>
 8004d6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	dc02      	bgt.n	8004d78 <__sflush_r+0x20>
 8004d72:	2000      	movs	r0, #0
 8004d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d7a:	2e00      	cmp	r6, #0
 8004d7c:	d0f9      	beq.n	8004d72 <__sflush_r+0x1a>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d84:	682f      	ldr	r7, [r5, #0]
 8004d86:	602b      	str	r3, [r5, #0]
 8004d88:	d032      	beq.n	8004df0 <__sflush_r+0x98>
 8004d8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d8c:	89a3      	ldrh	r3, [r4, #12]
 8004d8e:	075a      	lsls	r2, r3, #29
 8004d90:	d505      	bpl.n	8004d9e <__sflush_r+0x46>
 8004d92:	6863      	ldr	r3, [r4, #4]
 8004d94:	1ac0      	subs	r0, r0, r3
 8004d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d98:	b10b      	cbz	r3, 8004d9e <__sflush_r+0x46>
 8004d9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d9c:	1ac0      	subs	r0, r0, r3
 8004d9e:	2300      	movs	r3, #0
 8004da0:	4602      	mov	r2, r0
 8004da2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004da4:	6a21      	ldr	r1, [r4, #32]
 8004da6:	4628      	mov	r0, r5
 8004da8:	47b0      	blx	r6
 8004daa:	1c43      	adds	r3, r0, #1
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	d106      	bne.n	8004dbe <__sflush_r+0x66>
 8004db0:	6829      	ldr	r1, [r5, #0]
 8004db2:	291d      	cmp	r1, #29
 8004db4:	d82c      	bhi.n	8004e10 <__sflush_r+0xb8>
 8004db6:	4a2a      	ldr	r2, [pc, #168]	; (8004e60 <__sflush_r+0x108>)
 8004db8:	40ca      	lsrs	r2, r1
 8004dba:	07d6      	lsls	r6, r2, #31
 8004dbc:	d528      	bpl.n	8004e10 <__sflush_r+0xb8>
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	6062      	str	r2, [r4, #4]
 8004dc2:	04d9      	lsls	r1, r3, #19
 8004dc4:	6922      	ldr	r2, [r4, #16]
 8004dc6:	6022      	str	r2, [r4, #0]
 8004dc8:	d504      	bpl.n	8004dd4 <__sflush_r+0x7c>
 8004dca:	1c42      	adds	r2, r0, #1
 8004dcc:	d101      	bne.n	8004dd2 <__sflush_r+0x7a>
 8004dce:	682b      	ldr	r3, [r5, #0]
 8004dd0:	b903      	cbnz	r3, 8004dd4 <__sflush_r+0x7c>
 8004dd2:	6560      	str	r0, [r4, #84]	; 0x54
 8004dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dd6:	602f      	str	r7, [r5, #0]
 8004dd8:	2900      	cmp	r1, #0
 8004dda:	d0ca      	beq.n	8004d72 <__sflush_r+0x1a>
 8004ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004de0:	4299      	cmp	r1, r3
 8004de2:	d002      	beq.n	8004dea <__sflush_r+0x92>
 8004de4:	4628      	mov	r0, r5
 8004de6:	f000 f9d5 	bl	8005194 <_free_r>
 8004dea:	2000      	movs	r0, #0
 8004dec:	6360      	str	r0, [r4, #52]	; 0x34
 8004dee:	e7c1      	b.n	8004d74 <__sflush_r+0x1c>
 8004df0:	6a21      	ldr	r1, [r4, #32]
 8004df2:	2301      	movs	r3, #1
 8004df4:	4628      	mov	r0, r5
 8004df6:	47b0      	blx	r6
 8004df8:	1c41      	adds	r1, r0, #1
 8004dfa:	d1c7      	bne.n	8004d8c <__sflush_r+0x34>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0c4      	beq.n	8004d8c <__sflush_r+0x34>
 8004e02:	2b1d      	cmp	r3, #29
 8004e04:	d001      	beq.n	8004e0a <__sflush_r+0xb2>
 8004e06:	2b16      	cmp	r3, #22
 8004e08:	d101      	bne.n	8004e0e <__sflush_r+0xb6>
 8004e0a:	602f      	str	r7, [r5, #0]
 8004e0c:	e7b1      	b.n	8004d72 <__sflush_r+0x1a>
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e14:	81a3      	strh	r3, [r4, #12]
 8004e16:	e7ad      	b.n	8004d74 <__sflush_r+0x1c>
 8004e18:	690f      	ldr	r7, [r1, #16]
 8004e1a:	2f00      	cmp	r7, #0
 8004e1c:	d0a9      	beq.n	8004d72 <__sflush_r+0x1a>
 8004e1e:	0793      	lsls	r3, r2, #30
 8004e20:	680e      	ldr	r6, [r1, #0]
 8004e22:	bf08      	it	eq
 8004e24:	694b      	ldreq	r3, [r1, #20]
 8004e26:	600f      	str	r7, [r1, #0]
 8004e28:	bf18      	it	ne
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	eba6 0807 	sub.w	r8, r6, r7
 8004e30:	608b      	str	r3, [r1, #8]
 8004e32:	f1b8 0f00 	cmp.w	r8, #0
 8004e36:	dd9c      	ble.n	8004d72 <__sflush_r+0x1a>
 8004e38:	6a21      	ldr	r1, [r4, #32]
 8004e3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e3c:	4643      	mov	r3, r8
 8004e3e:	463a      	mov	r2, r7
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b0      	blx	r6
 8004e44:	2800      	cmp	r0, #0
 8004e46:	dc06      	bgt.n	8004e56 <__sflush_r+0xfe>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e4e:	81a3      	strh	r3, [r4, #12]
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e54:	e78e      	b.n	8004d74 <__sflush_r+0x1c>
 8004e56:	4407      	add	r7, r0
 8004e58:	eba8 0800 	sub.w	r8, r8, r0
 8004e5c:	e7e9      	b.n	8004e32 <__sflush_r+0xda>
 8004e5e:	bf00      	nop
 8004e60:	20400001 	.word	0x20400001

08004e64 <_fflush_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	690b      	ldr	r3, [r1, #16]
 8004e68:	4605      	mov	r5, r0
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	b913      	cbnz	r3, 8004e74 <_fflush_r+0x10>
 8004e6e:	2500      	movs	r5, #0
 8004e70:	4628      	mov	r0, r5
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	b118      	cbz	r0, 8004e7e <_fflush_r+0x1a>
 8004e76:	6983      	ldr	r3, [r0, #24]
 8004e78:	b90b      	cbnz	r3, 8004e7e <_fflush_r+0x1a>
 8004e7a:	f000 f887 	bl	8004f8c <__sinit>
 8004e7e:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <_fflush_r+0x6c>)
 8004e80:	429c      	cmp	r4, r3
 8004e82:	d11b      	bne.n	8004ebc <_fflush_r+0x58>
 8004e84:	686c      	ldr	r4, [r5, #4]
 8004e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0ef      	beq.n	8004e6e <_fflush_r+0xa>
 8004e8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e90:	07d0      	lsls	r0, r2, #31
 8004e92:	d404      	bmi.n	8004e9e <_fflush_r+0x3a>
 8004e94:	0599      	lsls	r1, r3, #22
 8004e96:	d402      	bmi.n	8004e9e <_fflush_r+0x3a>
 8004e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e9a:	f000 f915 	bl	80050c8 <__retarget_lock_acquire_recursive>
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	f7ff ff59 	bl	8004d58 <__sflush_r>
 8004ea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ea8:	07da      	lsls	r2, r3, #31
 8004eaa:	4605      	mov	r5, r0
 8004eac:	d4e0      	bmi.n	8004e70 <_fflush_r+0xc>
 8004eae:	89a3      	ldrh	r3, [r4, #12]
 8004eb0:	059b      	lsls	r3, r3, #22
 8004eb2:	d4dd      	bmi.n	8004e70 <_fflush_r+0xc>
 8004eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eb6:	f000 f908 	bl	80050ca <__retarget_lock_release_recursive>
 8004eba:	e7d9      	b.n	8004e70 <_fflush_r+0xc>
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <_fflush_r+0x70>)
 8004ebe:	429c      	cmp	r4, r3
 8004ec0:	d101      	bne.n	8004ec6 <_fflush_r+0x62>
 8004ec2:	68ac      	ldr	r4, [r5, #8]
 8004ec4:	e7df      	b.n	8004e86 <_fflush_r+0x22>
 8004ec6:	4b04      	ldr	r3, [pc, #16]	; (8004ed8 <_fflush_r+0x74>)
 8004ec8:	429c      	cmp	r4, r3
 8004eca:	bf08      	it	eq
 8004ecc:	68ec      	ldreq	r4, [r5, #12]
 8004ece:	e7da      	b.n	8004e86 <_fflush_r+0x22>
 8004ed0:	08005ae4 	.word	0x08005ae4
 8004ed4:	08005b04 	.word	0x08005b04
 8004ed8:	08005ac4 	.word	0x08005ac4

08004edc <std>:
 8004edc:	2300      	movs	r3, #0
 8004ede:	b510      	push	{r4, lr}
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004eea:	6083      	str	r3, [r0, #8]
 8004eec:	8181      	strh	r1, [r0, #12]
 8004eee:	6643      	str	r3, [r0, #100]	; 0x64
 8004ef0:	81c2      	strh	r2, [r0, #14]
 8004ef2:	6183      	str	r3, [r0, #24]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	305c      	adds	r0, #92	; 0x5c
 8004efa:	f7ff fe4d 	bl	8004b98 <memset>
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <std+0x38>)
 8004f00:	6263      	str	r3, [r4, #36]	; 0x24
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <std+0x3c>)
 8004f04:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f06:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <std+0x40>)
 8004f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f0a:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <std+0x44>)
 8004f0c:	6224      	str	r4, [r4, #32]
 8004f0e:	6323      	str	r3, [r4, #48]	; 0x30
 8004f10:	bd10      	pop	{r4, pc}
 8004f12:	bf00      	nop
 8004f14:	080058e5 	.word	0x080058e5
 8004f18:	08005907 	.word	0x08005907
 8004f1c:	0800593f 	.word	0x0800593f
 8004f20:	08005963 	.word	0x08005963

08004f24 <_cleanup_r>:
 8004f24:	4901      	ldr	r1, [pc, #4]	; (8004f2c <_cleanup_r+0x8>)
 8004f26:	f000 b8af 	b.w	8005088 <_fwalk_reent>
 8004f2a:	bf00      	nop
 8004f2c:	08004e65 	.word	0x08004e65

08004f30 <__sfmoreglue>:
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	1e4a      	subs	r2, r1, #1
 8004f34:	2568      	movs	r5, #104	; 0x68
 8004f36:	4355      	muls	r5, r2
 8004f38:	460e      	mov	r6, r1
 8004f3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f3e:	f000 f979 	bl	8005234 <_malloc_r>
 8004f42:	4604      	mov	r4, r0
 8004f44:	b140      	cbz	r0, 8004f58 <__sfmoreglue+0x28>
 8004f46:	2100      	movs	r1, #0
 8004f48:	e9c0 1600 	strd	r1, r6, [r0]
 8004f4c:	300c      	adds	r0, #12
 8004f4e:	60a0      	str	r0, [r4, #8]
 8004f50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f54:	f7ff fe20 	bl	8004b98 <memset>
 8004f58:	4620      	mov	r0, r4
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}

08004f5c <__sfp_lock_acquire>:
 8004f5c:	4801      	ldr	r0, [pc, #4]	; (8004f64 <__sfp_lock_acquire+0x8>)
 8004f5e:	f000 b8b3 	b.w	80050c8 <__retarget_lock_acquire_recursive>
 8004f62:	bf00      	nop
 8004f64:	20005e28 	.word	0x20005e28

08004f68 <__sfp_lock_release>:
 8004f68:	4801      	ldr	r0, [pc, #4]	; (8004f70 <__sfp_lock_release+0x8>)
 8004f6a:	f000 b8ae 	b.w	80050ca <__retarget_lock_release_recursive>
 8004f6e:	bf00      	nop
 8004f70:	20005e28 	.word	0x20005e28

08004f74 <__sinit_lock_acquire>:
 8004f74:	4801      	ldr	r0, [pc, #4]	; (8004f7c <__sinit_lock_acquire+0x8>)
 8004f76:	f000 b8a7 	b.w	80050c8 <__retarget_lock_acquire_recursive>
 8004f7a:	bf00      	nop
 8004f7c:	20005e23 	.word	0x20005e23

08004f80 <__sinit_lock_release>:
 8004f80:	4801      	ldr	r0, [pc, #4]	; (8004f88 <__sinit_lock_release+0x8>)
 8004f82:	f000 b8a2 	b.w	80050ca <__retarget_lock_release_recursive>
 8004f86:	bf00      	nop
 8004f88:	20005e23 	.word	0x20005e23

08004f8c <__sinit>:
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	4604      	mov	r4, r0
 8004f90:	f7ff fff0 	bl	8004f74 <__sinit_lock_acquire>
 8004f94:	69a3      	ldr	r3, [r4, #24]
 8004f96:	b11b      	cbz	r3, 8004fa0 <__sinit+0x14>
 8004f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f9c:	f7ff bff0 	b.w	8004f80 <__sinit_lock_release>
 8004fa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004fa4:	6523      	str	r3, [r4, #80]	; 0x50
 8004fa6:	4b13      	ldr	r3, [pc, #76]	; (8004ff4 <__sinit+0x68>)
 8004fa8:	4a13      	ldr	r2, [pc, #76]	; (8004ff8 <__sinit+0x6c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	62a2      	str	r2, [r4, #40]	; 0x28
 8004fae:	42a3      	cmp	r3, r4
 8004fb0:	bf04      	itt	eq
 8004fb2:	2301      	moveq	r3, #1
 8004fb4:	61a3      	streq	r3, [r4, #24]
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 f820 	bl	8004ffc <__sfp>
 8004fbc:	6060      	str	r0, [r4, #4]
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	f000 f81c 	bl	8004ffc <__sfp>
 8004fc4:	60a0      	str	r0, [r4, #8]
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f000 f818 	bl	8004ffc <__sfp>
 8004fcc:	2200      	movs	r2, #0
 8004fce:	60e0      	str	r0, [r4, #12]
 8004fd0:	2104      	movs	r1, #4
 8004fd2:	6860      	ldr	r0, [r4, #4]
 8004fd4:	f7ff ff82 	bl	8004edc <std>
 8004fd8:	68a0      	ldr	r0, [r4, #8]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	2109      	movs	r1, #9
 8004fde:	f7ff ff7d 	bl	8004edc <std>
 8004fe2:	68e0      	ldr	r0, [r4, #12]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	2112      	movs	r1, #18
 8004fe8:	f7ff ff78 	bl	8004edc <std>
 8004fec:	2301      	movs	r3, #1
 8004fee:	61a3      	str	r3, [r4, #24]
 8004ff0:	e7d2      	b.n	8004f98 <__sinit+0xc>
 8004ff2:	bf00      	nop
 8004ff4:	08005ac0 	.word	0x08005ac0
 8004ff8:	08004f25 	.word	0x08004f25

08004ffc <__sfp>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	4607      	mov	r7, r0
 8005000:	f7ff ffac 	bl	8004f5c <__sfp_lock_acquire>
 8005004:	4b1e      	ldr	r3, [pc, #120]	; (8005080 <__sfp+0x84>)
 8005006:	681e      	ldr	r6, [r3, #0]
 8005008:	69b3      	ldr	r3, [r6, #24]
 800500a:	b913      	cbnz	r3, 8005012 <__sfp+0x16>
 800500c:	4630      	mov	r0, r6
 800500e:	f7ff ffbd 	bl	8004f8c <__sinit>
 8005012:	3648      	adds	r6, #72	; 0x48
 8005014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005018:	3b01      	subs	r3, #1
 800501a:	d503      	bpl.n	8005024 <__sfp+0x28>
 800501c:	6833      	ldr	r3, [r6, #0]
 800501e:	b30b      	cbz	r3, 8005064 <__sfp+0x68>
 8005020:	6836      	ldr	r6, [r6, #0]
 8005022:	e7f7      	b.n	8005014 <__sfp+0x18>
 8005024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005028:	b9d5      	cbnz	r5, 8005060 <__sfp+0x64>
 800502a:	4b16      	ldr	r3, [pc, #88]	; (8005084 <__sfp+0x88>)
 800502c:	60e3      	str	r3, [r4, #12]
 800502e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005032:	6665      	str	r5, [r4, #100]	; 0x64
 8005034:	f000 f847 	bl	80050c6 <__retarget_lock_init_recursive>
 8005038:	f7ff ff96 	bl	8004f68 <__sfp_lock_release>
 800503c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005040:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005044:	6025      	str	r5, [r4, #0]
 8005046:	61a5      	str	r5, [r4, #24]
 8005048:	2208      	movs	r2, #8
 800504a:	4629      	mov	r1, r5
 800504c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005050:	f7ff fda2 	bl	8004b98 <memset>
 8005054:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005058:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800505c:	4620      	mov	r0, r4
 800505e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005060:	3468      	adds	r4, #104	; 0x68
 8005062:	e7d9      	b.n	8005018 <__sfp+0x1c>
 8005064:	2104      	movs	r1, #4
 8005066:	4638      	mov	r0, r7
 8005068:	f7ff ff62 	bl	8004f30 <__sfmoreglue>
 800506c:	4604      	mov	r4, r0
 800506e:	6030      	str	r0, [r6, #0]
 8005070:	2800      	cmp	r0, #0
 8005072:	d1d5      	bne.n	8005020 <__sfp+0x24>
 8005074:	f7ff ff78 	bl	8004f68 <__sfp_lock_release>
 8005078:	230c      	movs	r3, #12
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	e7ee      	b.n	800505c <__sfp+0x60>
 800507e:	bf00      	nop
 8005080:	08005ac0 	.word	0x08005ac0
 8005084:	ffff0001 	.word	0xffff0001

08005088 <_fwalk_reent>:
 8005088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800508c:	4606      	mov	r6, r0
 800508e:	4688      	mov	r8, r1
 8005090:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005094:	2700      	movs	r7, #0
 8005096:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800509a:	f1b9 0901 	subs.w	r9, r9, #1
 800509e:	d505      	bpl.n	80050ac <_fwalk_reent+0x24>
 80050a0:	6824      	ldr	r4, [r4, #0]
 80050a2:	2c00      	cmp	r4, #0
 80050a4:	d1f7      	bne.n	8005096 <_fwalk_reent+0xe>
 80050a6:	4638      	mov	r0, r7
 80050a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ac:	89ab      	ldrh	r3, [r5, #12]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d907      	bls.n	80050c2 <_fwalk_reent+0x3a>
 80050b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050b6:	3301      	adds	r3, #1
 80050b8:	d003      	beq.n	80050c2 <_fwalk_reent+0x3a>
 80050ba:	4629      	mov	r1, r5
 80050bc:	4630      	mov	r0, r6
 80050be:	47c0      	blx	r8
 80050c0:	4307      	orrs	r7, r0
 80050c2:	3568      	adds	r5, #104	; 0x68
 80050c4:	e7e9      	b.n	800509a <_fwalk_reent+0x12>

080050c6 <__retarget_lock_init_recursive>:
 80050c6:	4770      	bx	lr

080050c8 <__retarget_lock_acquire_recursive>:
 80050c8:	4770      	bx	lr

080050ca <__retarget_lock_release_recursive>:
 80050ca:	4770      	bx	lr

080050cc <__swhatbuf_r>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	460e      	mov	r6, r1
 80050d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d4:	2900      	cmp	r1, #0
 80050d6:	b096      	sub	sp, #88	; 0x58
 80050d8:	4614      	mov	r4, r2
 80050da:	461d      	mov	r5, r3
 80050dc:	da07      	bge.n	80050ee <__swhatbuf_r+0x22>
 80050de:	2300      	movs	r3, #0
 80050e0:	602b      	str	r3, [r5, #0]
 80050e2:	89b3      	ldrh	r3, [r6, #12]
 80050e4:	061a      	lsls	r2, r3, #24
 80050e6:	d410      	bmi.n	800510a <__swhatbuf_r+0x3e>
 80050e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ec:	e00e      	b.n	800510c <__swhatbuf_r+0x40>
 80050ee:	466a      	mov	r2, sp
 80050f0:	f000 fc5e 	bl	80059b0 <_fstat_r>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	dbf2      	blt.n	80050de <__swhatbuf_r+0x12>
 80050f8:	9a01      	ldr	r2, [sp, #4]
 80050fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80050fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005102:	425a      	negs	r2, r3
 8005104:	415a      	adcs	r2, r3
 8005106:	602a      	str	r2, [r5, #0]
 8005108:	e7ee      	b.n	80050e8 <__swhatbuf_r+0x1c>
 800510a:	2340      	movs	r3, #64	; 0x40
 800510c:	2000      	movs	r0, #0
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	b016      	add	sp, #88	; 0x58
 8005112:	bd70      	pop	{r4, r5, r6, pc}

08005114 <__smakebuf_r>:
 8005114:	898b      	ldrh	r3, [r1, #12]
 8005116:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005118:	079d      	lsls	r5, r3, #30
 800511a:	4606      	mov	r6, r0
 800511c:	460c      	mov	r4, r1
 800511e:	d507      	bpl.n	8005130 <__smakebuf_r+0x1c>
 8005120:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	6123      	str	r3, [r4, #16]
 8005128:	2301      	movs	r3, #1
 800512a:	6163      	str	r3, [r4, #20]
 800512c:	b002      	add	sp, #8
 800512e:	bd70      	pop	{r4, r5, r6, pc}
 8005130:	ab01      	add	r3, sp, #4
 8005132:	466a      	mov	r2, sp
 8005134:	f7ff ffca 	bl	80050cc <__swhatbuf_r>
 8005138:	9900      	ldr	r1, [sp, #0]
 800513a:	4605      	mov	r5, r0
 800513c:	4630      	mov	r0, r6
 800513e:	f000 f879 	bl	8005234 <_malloc_r>
 8005142:	b948      	cbnz	r0, 8005158 <__smakebuf_r+0x44>
 8005144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005148:	059a      	lsls	r2, r3, #22
 800514a:	d4ef      	bmi.n	800512c <__smakebuf_r+0x18>
 800514c:	f023 0303 	bic.w	r3, r3, #3
 8005150:	f043 0302 	orr.w	r3, r3, #2
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	e7e3      	b.n	8005120 <__smakebuf_r+0xc>
 8005158:	4b0d      	ldr	r3, [pc, #52]	; (8005190 <__smakebuf_r+0x7c>)
 800515a:	62b3      	str	r3, [r6, #40]	; 0x28
 800515c:	89a3      	ldrh	r3, [r4, #12]
 800515e:	6020      	str	r0, [r4, #0]
 8005160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005164:	81a3      	strh	r3, [r4, #12]
 8005166:	9b00      	ldr	r3, [sp, #0]
 8005168:	6163      	str	r3, [r4, #20]
 800516a:	9b01      	ldr	r3, [sp, #4]
 800516c:	6120      	str	r0, [r4, #16]
 800516e:	b15b      	cbz	r3, 8005188 <__smakebuf_r+0x74>
 8005170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005174:	4630      	mov	r0, r6
 8005176:	f000 fc2d 	bl	80059d4 <_isatty_r>
 800517a:	b128      	cbz	r0, 8005188 <__smakebuf_r+0x74>
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	f023 0303 	bic.w	r3, r3, #3
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	81a3      	strh	r3, [r4, #12]
 8005188:	89a0      	ldrh	r0, [r4, #12]
 800518a:	4305      	orrs	r5, r0
 800518c:	81a5      	strh	r5, [r4, #12]
 800518e:	e7cd      	b.n	800512c <__smakebuf_r+0x18>
 8005190:	08004f25 	.word	0x08004f25

08005194 <_free_r>:
 8005194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005196:	2900      	cmp	r1, #0
 8005198:	d048      	beq.n	800522c <_free_r+0x98>
 800519a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800519e:	9001      	str	r0, [sp, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f1a1 0404 	sub.w	r4, r1, #4
 80051a6:	bfb8      	it	lt
 80051a8:	18e4      	addlt	r4, r4, r3
 80051aa:	f000 fc35 	bl	8005a18 <__malloc_lock>
 80051ae:	4a20      	ldr	r2, [pc, #128]	; (8005230 <_free_r+0x9c>)
 80051b0:	9801      	ldr	r0, [sp, #4]
 80051b2:	6813      	ldr	r3, [r2, #0]
 80051b4:	4615      	mov	r5, r2
 80051b6:	b933      	cbnz	r3, 80051c6 <_free_r+0x32>
 80051b8:	6063      	str	r3, [r4, #4]
 80051ba:	6014      	str	r4, [r2, #0]
 80051bc:	b003      	add	sp, #12
 80051be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051c2:	f000 bc2f 	b.w	8005a24 <__malloc_unlock>
 80051c6:	42a3      	cmp	r3, r4
 80051c8:	d90b      	bls.n	80051e2 <_free_r+0x4e>
 80051ca:	6821      	ldr	r1, [r4, #0]
 80051cc:	1862      	adds	r2, r4, r1
 80051ce:	4293      	cmp	r3, r2
 80051d0:	bf04      	itt	eq
 80051d2:	681a      	ldreq	r2, [r3, #0]
 80051d4:	685b      	ldreq	r3, [r3, #4]
 80051d6:	6063      	str	r3, [r4, #4]
 80051d8:	bf04      	itt	eq
 80051da:	1852      	addeq	r2, r2, r1
 80051dc:	6022      	streq	r2, [r4, #0]
 80051de:	602c      	str	r4, [r5, #0]
 80051e0:	e7ec      	b.n	80051bc <_free_r+0x28>
 80051e2:	461a      	mov	r2, r3
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	b10b      	cbz	r3, 80051ec <_free_r+0x58>
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	d9fa      	bls.n	80051e2 <_free_r+0x4e>
 80051ec:	6811      	ldr	r1, [r2, #0]
 80051ee:	1855      	adds	r5, r2, r1
 80051f0:	42a5      	cmp	r5, r4
 80051f2:	d10b      	bne.n	800520c <_free_r+0x78>
 80051f4:	6824      	ldr	r4, [r4, #0]
 80051f6:	4421      	add	r1, r4
 80051f8:	1854      	adds	r4, r2, r1
 80051fa:	42a3      	cmp	r3, r4
 80051fc:	6011      	str	r1, [r2, #0]
 80051fe:	d1dd      	bne.n	80051bc <_free_r+0x28>
 8005200:	681c      	ldr	r4, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	6053      	str	r3, [r2, #4]
 8005206:	4421      	add	r1, r4
 8005208:	6011      	str	r1, [r2, #0]
 800520a:	e7d7      	b.n	80051bc <_free_r+0x28>
 800520c:	d902      	bls.n	8005214 <_free_r+0x80>
 800520e:	230c      	movs	r3, #12
 8005210:	6003      	str	r3, [r0, #0]
 8005212:	e7d3      	b.n	80051bc <_free_r+0x28>
 8005214:	6825      	ldr	r5, [r4, #0]
 8005216:	1961      	adds	r1, r4, r5
 8005218:	428b      	cmp	r3, r1
 800521a:	bf04      	itt	eq
 800521c:	6819      	ldreq	r1, [r3, #0]
 800521e:	685b      	ldreq	r3, [r3, #4]
 8005220:	6063      	str	r3, [r4, #4]
 8005222:	bf04      	itt	eq
 8005224:	1949      	addeq	r1, r1, r5
 8005226:	6021      	streq	r1, [r4, #0]
 8005228:	6054      	str	r4, [r2, #4]
 800522a:	e7c7      	b.n	80051bc <_free_r+0x28>
 800522c:	b003      	add	sp, #12
 800522e:	bd30      	pop	{r4, r5, pc}
 8005230:	200000a0 	.word	0x200000a0

08005234 <_malloc_r>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	1ccd      	adds	r5, r1, #3
 8005238:	f025 0503 	bic.w	r5, r5, #3
 800523c:	3508      	adds	r5, #8
 800523e:	2d0c      	cmp	r5, #12
 8005240:	bf38      	it	cc
 8005242:	250c      	movcc	r5, #12
 8005244:	2d00      	cmp	r5, #0
 8005246:	4606      	mov	r6, r0
 8005248:	db01      	blt.n	800524e <_malloc_r+0x1a>
 800524a:	42a9      	cmp	r1, r5
 800524c:	d903      	bls.n	8005256 <_malloc_r+0x22>
 800524e:	230c      	movs	r3, #12
 8005250:	6033      	str	r3, [r6, #0]
 8005252:	2000      	movs	r0, #0
 8005254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005256:	f000 fbdf 	bl	8005a18 <__malloc_lock>
 800525a:	4921      	ldr	r1, [pc, #132]	; (80052e0 <_malloc_r+0xac>)
 800525c:	680a      	ldr	r2, [r1, #0]
 800525e:	4614      	mov	r4, r2
 8005260:	b99c      	cbnz	r4, 800528a <_malloc_r+0x56>
 8005262:	4f20      	ldr	r7, [pc, #128]	; (80052e4 <_malloc_r+0xb0>)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	b923      	cbnz	r3, 8005272 <_malloc_r+0x3e>
 8005268:	4621      	mov	r1, r4
 800526a:	4630      	mov	r0, r6
 800526c:	f000 fb2a 	bl	80058c4 <_sbrk_r>
 8005270:	6038      	str	r0, [r7, #0]
 8005272:	4629      	mov	r1, r5
 8005274:	4630      	mov	r0, r6
 8005276:	f000 fb25 	bl	80058c4 <_sbrk_r>
 800527a:	1c43      	adds	r3, r0, #1
 800527c:	d123      	bne.n	80052c6 <_malloc_r+0x92>
 800527e:	230c      	movs	r3, #12
 8005280:	6033      	str	r3, [r6, #0]
 8005282:	4630      	mov	r0, r6
 8005284:	f000 fbce 	bl	8005a24 <__malloc_unlock>
 8005288:	e7e3      	b.n	8005252 <_malloc_r+0x1e>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	1b5b      	subs	r3, r3, r5
 800528e:	d417      	bmi.n	80052c0 <_malloc_r+0x8c>
 8005290:	2b0b      	cmp	r3, #11
 8005292:	d903      	bls.n	800529c <_malloc_r+0x68>
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	441c      	add	r4, r3
 8005298:	6025      	str	r5, [r4, #0]
 800529a:	e004      	b.n	80052a6 <_malloc_r+0x72>
 800529c:	6863      	ldr	r3, [r4, #4]
 800529e:	42a2      	cmp	r2, r4
 80052a0:	bf0c      	ite	eq
 80052a2:	600b      	streq	r3, [r1, #0]
 80052a4:	6053      	strne	r3, [r2, #4]
 80052a6:	4630      	mov	r0, r6
 80052a8:	f000 fbbc 	bl	8005a24 <__malloc_unlock>
 80052ac:	f104 000b 	add.w	r0, r4, #11
 80052b0:	1d23      	adds	r3, r4, #4
 80052b2:	f020 0007 	bic.w	r0, r0, #7
 80052b6:	1ac2      	subs	r2, r0, r3
 80052b8:	d0cc      	beq.n	8005254 <_malloc_r+0x20>
 80052ba:	1a1b      	subs	r3, r3, r0
 80052bc:	50a3      	str	r3, [r4, r2]
 80052be:	e7c9      	b.n	8005254 <_malloc_r+0x20>
 80052c0:	4622      	mov	r2, r4
 80052c2:	6864      	ldr	r4, [r4, #4]
 80052c4:	e7cc      	b.n	8005260 <_malloc_r+0x2c>
 80052c6:	1cc4      	adds	r4, r0, #3
 80052c8:	f024 0403 	bic.w	r4, r4, #3
 80052cc:	42a0      	cmp	r0, r4
 80052ce:	d0e3      	beq.n	8005298 <_malloc_r+0x64>
 80052d0:	1a21      	subs	r1, r4, r0
 80052d2:	4630      	mov	r0, r6
 80052d4:	f000 faf6 	bl	80058c4 <_sbrk_r>
 80052d8:	3001      	adds	r0, #1
 80052da:	d1dd      	bne.n	8005298 <_malloc_r+0x64>
 80052dc:	e7cf      	b.n	800527e <_malloc_r+0x4a>
 80052de:	bf00      	nop
 80052e0:	200000a0 	.word	0x200000a0
 80052e4:	200000a4 	.word	0x200000a4

080052e8 <__sfputc_r>:
 80052e8:	6893      	ldr	r3, [r2, #8]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	b410      	push	{r4}
 80052f0:	6093      	str	r3, [r2, #8]
 80052f2:	da08      	bge.n	8005306 <__sfputc_r+0x1e>
 80052f4:	6994      	ldr	r4, [r2, #24]
 80052f6:	42a3      	cmp	r3, r4
 80052f8:	db01      	blt.n	80052fe <__sfputc_r+0x16>
 80052fa:	290a      	cmp	r1, #10
 80052fc:	d103      	bne.n	8005306 <__sfputc_r+0x1e>
 80052fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005302:	f7ff bc69 	b.w	8004bd8 <__swbuf_r>
 8005306:	6813      	ldr	r3, [r2, #0]
 8005308:	1c58      	adds	r0, r3, #1
 800530a:	6010      	str	r0, [r2, #0]
 800530c:	7019      	strb	r1, [r3, #0]
 800530e:	4608      	mov	r0, r1
 8005310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005314:	4770      	bx	lr

08005316 <__sfputs_r>:
 8005316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005318:	4606      	mov	r6, r0
 800531a:	460f      	mov	r7, r1
 800531c:	4614      	mov	r4, r2
 800531e:	18d5      	adds	r5, r2, r3
 8005320:	42ac      	cmp	r4, r5
 8005322:	d101      	bne.n	8005328 <__sfputs_r+0x12>
 8005324:	2000      	movs	r0, #0
 8005326:	e007      	b.n	8005338 <__sfputs_r+0x22>
 8005328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800532c:	463a      	mov	r2, r7
 800532e:	4630      	mov	r0, r6
 8005330:	f7ff ffda 	bl	80052e8 <__sfputc_r>
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	d1f3      	bne.n	8005320 <__sfputs_r+0xa>
 8005338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800533c <_vfiprintf_r>:
 800533c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005340:	460d      	mov	r5, r1
 8005342:	b09d      	sub	sp, #116	; 0x74
 8005344:	4614      	mov	r4, r2
 8005346:	4698      	mov	r8, r3
 8005348:	4606      	mov	r6, r0
 800534a:	b118      	cbz	r0, 8005354 <_vfiprintf_r+0x18>
 800534c:	6983      	ldr	r3, [r0, #24]
 800534e:	b90b      	cbnz	r3, 8005354 <_vfiprintf_r+0x18>
 8005350:	f7ff fe1c 	bl	8004f8c <__sinit>
 8005354:	4b89      	ldr	r3, [pc, #548]	; (800557c <_vfiprintf_r+0x240>)
 8005356:	429d      	cmp	r5, r3
 8005358:	d11b      	bne.n	8005392 <_vfiprintf_r+0x56>
 800535a:	6875      	ldr	r5, [r6, #4]
 800535c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800535e:	07d9      	lsls	r1, r3, #31
 8005360:	d405      	bmi.n	800536e <_vfiprintf_r+0x32>
 8005362:	89ab      	ldrh	r3, [r5, #12]
 8005364:	059a      	lsls	r2, r3, #22
 8005366:	d402      	bmi.n	800536e <_vfiprintf_r+0x32>
 8005368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800536a:	f7ff fead 	bl	80050c8 <__retarget_lock_acquire_recursive>
 800536e:	89ab      	ldrh	r3, [r5, #12]
 8005370:	071b      	lsls	r3, r3, #28
 8005372:	d501      	bpl.n	8005378 <_vfiprintf_r+0x3c>
 8005374:	692b      	ldr	r3, [r5, #16]
 8005376:	b9eb      	cbnz	r3, 80053b4 <_vfiprintf_r+0x78>
 8005378:	4629      	mov	r1, r5
 800537a:	4630      	mov	r0, r6
 800537c:	f7ff fc7e 	bl	8004c7c <__swsetup_r>
 8005380:	b1c0      	cbz	r0, 80053b4 <_vfiprintf_r+0x78>
 8005382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005384:	07dc      	lsls	r4, r3, #31
 8005386:	d50e      	bpl.n	80053a6 <_vfiprintf_r+0x6a>
 8005388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800538c:	b01d      	add	sp, #116	; 0x74
 800538e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005392:	4b7b      	ldr	r3, [pc, #492]	; (8005580 <_vfiprintf_r+0x244>)
 8005394:	429d      	cmp	r5, r3
 8005396:	d101      	bne.n	800539c <_vfiprintf_r+0x60>
 8005398:	68b5      	ldr	r5, [r6, #8]
 800539a:	e7df      	b.n	800535c <_vfiprintf_r+0x20>
 800539c:	4b79      	ldr	r3, [pc, #484]	; (8005584 <_vfiprintf_r+0x248>)
 800539e:	429d      	cmp	r5, r3
 80053a0:	bf08      	it	eq
 80053a2:	68f5      	ldreq	r5, [r6, #12]
 80053a4:	e7da      	b.n	800535c <_vfiprintf_r+0x20>
 80053a6:	89ab      	ldrh	r3, [r5, #12]
 80053a8:	0598      	lsls	r0, r3, #22
 80053aa:	d4ed      	bmi.n	8005388 <_vfiprintf_r+0x4c>
 80053ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053ae:	f7ff fe8c 	bl	80050ca <__retarget_lock_release_recursive>
 80053b2:	e7e9      	b.n	8005388 <_vfiprintf_r+0x4c>
 80053b4:	2300      	movs	r3, #0
 80053b6:	9309      	str	r3, [sp, #36]	; 0x24
 80053b8:	2320      	movs	r3, #32
 80053ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053be:	f8cd 800c 	str.w	r8, [sp, #12]
 80053c2:	2330      	movs	r3, #48	; 0x30
 80053c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005588 <_vfiprintf_r+0x24c>
 80053c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053cc:	f04f 0901 	mov.w	r9, #1
 80053d0:	4623      	mov	r3, r4
 80053d2:	469a      	mov	sl, r3
 80053d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053d8:	b10a      	cbz	r2, 80053de <_vfiprintf_r+0xa2>
 80053da:	2a25      	cmp	r2, #37	; 0x25
 80053dc:	d1f9      	bne.n	80053d2 <_vfiprintf_r+0x96>
 80053de:	ebba 0b04 	subs.w	fp, sl, r4
 80053e2:	d00b      	beq.n	80053fc <_vfiprintf_r+0xc0>
 80053e4:	465b      	mov	r3, fp
 80053e6:	4622      	mov	r2, r4
 80053e8:	4629      	mov	r1, r5
 80053ea:	4630      	mov	r0, r6
 80053ec:	f7ff ff93 	bl	8005316 <__sfputs_r>
 80053f0:	3001      	adds	r0, #1
 80053f2:	f000 80aa 	beq.w	800554a <_vfiprintf_r+0x20e>
 80053f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053f8:	445a      	add	r2, fp
 80053fa:	9209      	str	r2, [sp, #36]	; 0x24
 80053fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80a2 	beq.w	800554a <_vfiprintf_r+0x20e>
 8005406:	2300      	movs	r3, #0
 8005408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800540c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005410:	f10a 0a01 	add.w	sl, sl, #1
 8005414:	9304      	str	r3, [sp, #16]
 8005416:	9307      	str	r3, [sp, #28]
 8005418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800541c:	931a      	str	r3, [sp, #104]	; 0x68
 800541e:	4654      	mov	r4, sl
 8005420:	2205      	movs	r2, #5
 8005422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005426:	4858      	ldr	r0, [pc, #352]	; (8005588 <_vfiprintf_r+0x24c>)
 8005428:	f7fa fed2 	bl	80001d0 <memchr>
 800542c:	9a04      	ldr	r2, [sp, #16]
 800542e:	b9d8      	cbnz	r0, 8005468 <_vfiprintf_r+0x12c>
 8005430:	06d1      	lsls	r1, r2, #27
 8005432:	bf44      	itt	mi
 8005434:	2320      	movmi	r3, #32
 8005436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800543a:	0713      	lsls	r3, r2, #28
 800543c:	bf44      	itt	mi
 800543e:	232b      	movmi	r3, #43	; 0x2b
 8005440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005444:	f89a 3000 	ldrb.w	r3, [sl]
 8005448:	2b2a      	cmp	r3, #42	; 0x2a
 800544a:	d015      	beq.n	8005478 <_vfiprintf_r+0x13c>
 800544c:	9a07      	ldr	r2, [sp, #28]
 800544e:	4654      	mov	r4, sl
 8005450:	2000      	movs	r0, #0
 8005452:	f04f 0c0a 	mov.w	ip, #10
 8005456:	4621      	mov	r1, r4
 8005458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800545c:	3b30      	subs	r3, #48	; 0x30
 800545e:	2b09      	cmp	r3, #9
 8005460:	d94e      	bls.n	8005500 <_vfiprintf_r+0x1c4>
 8005462:	b1b0      	cbz	r0, 8005492 <_vfiprintf_r+0x156>
 8005464:	9207      	str	r2, [sp, #28]
 8005466:	e014      	b.n	8005492 <_vfiprintf_r+0x156>
 8005468:	eba0 0308 	sub.w	r3, r0, r8
 800546c:	fa09 f303 	lsl.w	r3, r9, r3
 8005470:	4313      	orrs	r3, r2
 8005472:	9304      	str	r3, [sp, #16]
 8005474:	46a2      	mov	sl, r4
 8005476:	e7d2      	b.n	800541e <_vfiprintf_r+0xe2>
 8005478:	9b03      	ldr	r3, [sp, #12]
 800547a:	1d19      	adds	r1, r3, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	9103      	str	r1, [sp, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	bfbb      	ittet	lt
 8005484:	425b      	neglt	r3, r3
 8005486:	f042 0202 	orrlt.w	r2, r2, #2
 800548a:	9307      	strge	r3, [sp, #28]
 800548c:	9307      	strlt	r3, [sp, #28]
 800548e:	bfb8      	it	lt
 8005490:	9204      	strlt	r2, [sp, #16]
 8005492:	7823      	ldrb	r3, [r4, #0]
 8005494:	2b2e      	cmp	r3, #46	; 0x2e
 8005496:	d10c      	bne.n	80054b2 <_vfiprintf_r+0x176>
 8005498:	7863      	ldrb	r3, [r4, #1]
 800549a:	2b2a      	cmp	r3, #42	; 0x2a
 800549c:	d135      	bne.n	800550a <_vfiprintf_r+0x1ce>
 800549e:	9b03      	ldr	r3, [sp, #12]
 80054a0:	1d1a      	adds	r2, r3, #4
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	9203      	str	r2, [sp, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bfb8      	it	lt
 80054aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80054ae:	3402      	adds	r4, #2
 80054b0:	9305      	str	r3, [sp, #20]
 80054b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005598 <_vfiprintf_r+0x25c>
 80054b6:	7821      	ldrb	r1, [r4, #0]
 80054b8:	2203      	movs	r2, #3
 80054ba:	4650      	mov	r0, sl
 80054bc:	f7fa fe88 	bl	80001d0 <memchr>
 80054c0:	b140      	cbz	r0, 80054d4 <_vfiprintf_r+0x198>
 80054c2:	2340      	movs	r3, #64	; 0x40
 80054c4:	eba0 000a 	sub.w	r0, r0, sl
 80054c8:	fa03 f000 	lsl.w	r0, r3, r0
 80054cc:	9b04      	ldr	r3, [sp, #16]
 80054ce:	4303      	orrs	r3, r0
 80054d0:	3401      	adds	r4, #1
 80054d2:	9304      	str	r3, [sp, #16]
 80054d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d8:	482c      	ldr	r0, [pc, #176]	; (800558c <_vfiprintf_r+0x250>)
 80054da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054de:	2206      	movs	r2, #6
 80054e0:	f7fa fe76 	bl	80001d0 <memchr>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d03f      	beq.n	8005568 <_vfiprintf_r+0x22c>
 80054e8:	4b29      	ldr	r3, [pc, #164]	; (8005590 <_vfiprintf_r+0x254>)
 80054ea:	bb1b      	cbnz	r3, 8005534 <_vfiprintf_r+0x1f8>
 80054ec:	9b03      	ldr	r3, [sp, #12]
 80054ee:	3307      	adds	r3, #7
 80054f0:	f023 0307 	bic.w	r3, r3, #7
 80054f4:	3308      	adds	r3, #8
 80054f6:	9303      	str	r3, [sp, #12]
 80054f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054fa:	443b      	add	r3, r7
 80054fc:	9309      	str	r3, [sp, #36]	; 0x24
 80054fe:	e767      	b.n	80053d0 <_vfiprintf_r+0x94>
 8005500:	fb0c 3202 	mla	r2, ip, r2, r3
 8005504:	460c      	mov	r4, r1
 8005506:	2001      	movs	r0, #1
 8005508:	e7a5      	b.n	8005456 <_vfiprintf_r+0x11a>
 800550a:	2300      	movs	r3, #0
 800550c:	3401      	adds	r4, #1
 800550e:	9305      	str	r3, [sp, #20]
 8005510:	4619      	mov	r1, r3
 8005512:	f04f 0c0a 	mov.w	ip, #10
 8005516:	4620      	mov	r0, r4
 8005518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800551c:	3a30      	subs	r2, #48	; 0x30
 800551e:	2a09      	cmp	r2, #9
 8005520:	d903      	bls.n	800552a <_vfiprintf_r+0x1ee>
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0c5      	beq.n	80054b2 <_vfiprintf_r+0x176>
 8005526:	9105      	str	r1, [sp, #20]
 8005528:	e7c3      	b.n	80054b2 <_vfiprintf_r+0x176>
 800552a:	fb0c 2101 	mla	r1, ip, r1, r2
 800552e:	4604      	mov	r4, r0
 8005530:	2301      	movs	r3, #1
 8005532:	e7f0      	b.n	8005516 <_vfiprintf_r+0x1da>
 8005534:	ab03      	add	r3, sp, #12
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	462a      	mov	r2, r5
 800553a:	4b16      	ldr	r3, [pc, #88]	; (8005594 <_vfiprintf_r+0x258>)
 800553c:	a904      	add	r1, sp, #16
 800553e:	4630      	mov	r0, r6
 8005540:	f3af 8000 	nop.w
 8005544:	4607      	mov	r7, r0
 8005546:	1c78      	adds	r0, r7, #1
 8005548:	d1d6      	bne.n	80054f8 <_vfiprintf_r+0x1bc>
 800554a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800554c:	07d9      	lsls	r1, r3, #31
 800554e:	d405      	bmi.n	800555c <_vfiprintf_r+0x220>
 8005550:	89ab      	ldrh	r3, [r5, #12]
 8005552:	059a      	lsls	r2, r3, #22
 8005554:	d402      	bmi.n	800555c <_vfiprintf_r+0x220>
 8005556:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005558:	f7ff fdb7 	bl	80050ca <__retarget_lock_release_recursive>
 800555c:	89ab      	ldrh	r3, [r5, #12]
 800555e:	065b      	lsls	r3, r3, #25
 8005560:	f53f af12 	bmi.w	8005388 <_vfiprintf_r+0x4c>
 8005564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005566:	e711      	b.n	800538c <_vfiprintf_r+0x50>
 8005568:	ab03      	add	r3, sp, #12
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	462a      	mov	r2, r5
 800556e:	4b09      	ldr	r3, [pc, #36]	; (8005594 <_vfiprintf_r+0x258>)
 8005570:	a904      	add	r1, sp, #16
 8005572:	4630      	mov	r0, r6
 8005574:	f000 f880 	bl	8005678 <_printf_i>
 8005578:	e7e4      	b.n	8005544 <_vfiprintf_r+0x208>
 800557a:	bf00      	nop
 800557c:	08005ae4 	.word	0x08005ae4
 8005580:	08005b04 	.word	0x08005b04
 8005584:	08005ac4 	.word	0x08005ac4
 8005588:	08005b24 	.word	0x08005b24
 800558c:	08005b2e 	.word	0x08005b2e
 8005590:	00000000 	.word	0x00000000
 8005594:	08005317 	.word	0x08005317
 8005598:	08005b2a 	.word	0x08005b2a

0800559c <_printf_common>:
 800559c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a0:	4616      	mov	r6, r2
 80055a2:	4699      	mov	r9, r3
 80055a4:	688a      	ldr	r2, [r1, #8]
 80055a6:	690b      	ldr	r3, [r1, #16]
 80055a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055ac:	4293      	cmp	r3, r2
 80055ae:	bfb8      	it	lt
 80055b0:	4613      	movlt	r3, r2
 80055b2:	6033      	str	r3, [r6, #0]
 80055b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055b8:	4607      	mov	r7, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	b10a      	cbz	r2, 80055c2 <_printf_common+0x26>
 80055be:	3301      	adds	r3, #1
 80055c0:	6033      	str	r3, [r6, #0]
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	0699      	lsls	r1, r3, #26
 80055c6:	bf42      	ittt	mi
 80055c8:	6833      	ldrmi	r3, [r6, #0]
 80055ca:	3302      	addmi	r3, #2
 80055cc:	6033      	strmi	r3, [r6, #0]
 80055ce:	6825      	ldr	r5, [r4, #0]
 80055d0:	f015 0506 	ands.w	r5, r5, #6
 80055d4:	d106      	bne.n	80055e4 <_printf_common+0x48>
 80055d6:	f104 0a19 	add.w	sl, r4, #25
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	6832      	ldr	r2, [r6, #0]
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	42ab      	cmp	r3, r5
 80055e2:	dc26      	bgt.n	8005632 <_printf_common+0x96>
 80055e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055e8:	1e13      	subs	r3, r2, #0
 80055ea:	6822      	ldr	r2, [r4, #0]
 80055ec:	bf18      	it	ne
 80055ee:	2301      	movne	r3, #1
 80055f0:	0692      	lsls	r2, r2, #26
 80055f2:	d42b      	bmi.n	800564c <_printf_common+0xb0>
 80055f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055f8:	4649      	mov	r1, r9
 80055fa:	4638      	mov	r0, r7
 80055fc:	47c0      	blx	r8
 80055fe:	3001      	adds	r0, #1
 8005600:	d01e      	beq.n	8005640 <_printf_common+0xa4>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	68e5      	ldr	r5, [r4, #12]
 8005606:	6832      	ldr	r2, [r6, #0]
 8005608:	f003 0306 	and.w	r3, r3, #6
 800560c:	2b04      	cmp	r3, #4
 800560e:	bf08      	it	eq
 8005610:	1aad      	subeq	r5, r5, r2
 8005612:	68a3      	ldr	r3, [r4, #8]
 8005614:	6922      	ldr	r2, [r4, #16]
 8005616:	bf0c      	ite	eq
 8005618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800561c:	2500      	movne	r5, #0
 800561e:	4293      	cmp	r3, r2
 8005620:	bfc4      	itt	gt
 8005622:	1a9b      	subgt	r3, r3, r2
 8005624:	18ed      	addgt	r5, r5, r3
 8005626:	2600      	movs	r6, #0
 8005628:	341a      	adds	r4, #26
 800562a:	42b5      	cmp	r5, r6
 800562c:	d11a      	bne.n	8005664 <_printf_common+0xc8>
 800562e:	2000      	movs	r0, #0
 8005630:	e008      	b.n	8005644 <_printf_common+0xa8>
 8005632:	2301      	movs	r3, #1
 8005634:	4652      	mov	r2, sl
 8005636:	4649      	mov	r1, r9
 8005638:	4638      	mov	r0, r7
 800563a:	47c0      	blx	r8
 800563c:	3001      	adds	r0, #1
 800563e:	d103      	bne.n	8005648 <_printf_common+0xac>
 8005640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005648:	3501      	adds	r5, #1
 800564a:	e7c6      	b.n	80055da <_printf_common+0x3e>
 800564c:	18e1      	adds	r1, r4, r3
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	2030      	movs	r0, #48	; 0x30
 8005652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005656:	4422      	add	r2, r4
 8005658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800565c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005660:	3302      	adds	r3, #2
 8005662:	e7c7      	b.n	80055f4 <_printf_common+0x58>
 8005664:	2301      	movs	r3, #1
 8005666:	4622      	mov	r2, r4
 8005668:	4649      	mov	r1, r9
 800566a:	4638      	mov	r0, r7
 800566c:	47c0      	blx	r8
 800566e:	3001      	adds	r0, #1
 8005670:	d0e6      	beq.n	8005640 <_printf_common+0xa4>
 8005672:	3601      	adds	r6, #1
 8005674:	e7d9      	b.n	800562a <_printf_common+0x8e>
	...

08005678 <_printf_i>:
 8005678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	460c      	mov	r4, r1
 800567e:	4691      	mov	r9, r2
 8005680:	7e27      	ldrb	r7, [r4, #24]
 8005682:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005684:	2f78      	cmp	r7, #120	; 0x78
 8005686:	4680      	mov	r8, r0
 8005688:	469a      	mov	sl, r3
 800568a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800568e:	d807      	bhi.n	80056a0 <_printf_i+0x28>
 8005690:	2f62      	cmp	r7, #98	; 0x62
 8005692:	d80a      	bhi.n	80056aa <_printf_i+0x32>
 8005694:	2f00      	cmp	r7, #0
 8005696:	f000 80d8 	beq.w	800584a <_printf_i+0x1d2>
 800569a:	2f58      	cmp	r7, #88	; 0x58
 800569c:	f000 80a3 	beq.w	80057e6 <_printf_i+0x16e>
 80056a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056a8:	e03a      	b.n	8005720 <_printf_i+0xa8>
 80056aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056ae:	2b15      	cmp	r3, #21
 80056b0:	d8f6      	bhi.n	80056a0 <_printf_i+0x28>
 80056b2:	a001      	add	r0, pc, #4	; (adr r0, 80056b8 <_printf_i+0x40>)
 80056b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80056b8:	08005711 	.word	0x08005711
 80056bc:	08005725 	.word	0x08005725
 80056c0:	080056a1 	.word	0x080056a1
 80056c4:	080056a1 	.word	0x080056a1
 80056c8:	080056a1 	.word	0x080056a1
 80056cc:	080056a1 	.word	0x080056a1
 80056d0:	08005725 	.word	0x08005725
 80056d4:	080056a1 	.word	0x080056a1
 80056d8:	080056a1 	.word	0x080056a1
 80056dc:	080056a1 	.word	0x080056a1
 80056e0:	080056a1 	.word	0x080056a1
 80056e4:	08005831 	.word	0x08005831
 80056e8:	08005755 	.word	0x08005755
 80056ec:	08005813 	.word	0x08005813
 80056f0:	080056a1 	.word	0x080056a1
 80056f4:	080056a1 	.word	0x080056a1
 80056f8:	08005853 	.word	0x08005853
 80056fc:	080056a1 	.word	0x080056a1
 8005700:	08005755 	.word	0x08005755
 8005704:	080056a1 	.word	0x080056a1
 8005708:	080056a1 	.word	0x080056a1
 800570c:	0800581b 	.word	0x0800581b
 8005710:	680b      	ldr	r3, [r1, #0]
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	600a      	str	r2, [r1, #0]
 8005718:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800571c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005720:	2301      	movs	r3, #1
 8005722:	e0a3      	b.n	800586c <_printf_i+0x1f4>
 8005724:	6825      	ldr	r5, [r4, #0]
 8005726:	6808      	ldr	r0, [r1, #0]
 8005728:	062e      	lsls	r6, r5, #24
 800572a:	f100 0304 	add.w	r3, r0, #4
 800572e:	d50a      	bpl.n	8005746 <_printf_i+0xce>
 8005730:	6805      	ldr	r5, [r0, #0]
 8005732:	600b      	str	r3, [r1, #0]
 8005734:	2d00      	cmp	r5, #0
 8005736:	da03      	bge.n	8005740 <_printf_i+0xc8>
 8005738:	232d      	movs	r3, #45	; 0x2d
 800573a:	426d      	negs	r5, r5
 800573c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005740:	485e      	ldr	r0, [pc, #376]	; (80058bc <_printf_i+0x244>)
 8005742:	230a      	movs	r3, #10
 8005744:	e019      	b.n	800577a <_printf_i+0x102>
 8005746:	f015 0f40 	tst.w	r5, #64	; 0x40
 800574a:	6805      	ldr	r5, [r0, #0]
 800574c:	600b      	str	r3, [r1, #0]
 800574e:	bf18      	it	ne
 8005750:	b22d      	sxthne	r5, r5
 8005752:	e7ef      	b.n	8005734 <_printf_i+0xbc>
 8005754:	680b      	ldr	r3, [r1, #0]
 8005756:	6825      	ldr	r5, [r4, #0]
 8005758:	1d18      	adds	r0, r3, #4
 800575a:	6008      	str	r0, [r1, #0]
 800575c:	0628      	lsls	r0, r5, #24
 800575e:	d501      	bpl.n	8005764 <_printf_i+0xec>
 8005760:	681d      	ldr	r5, [r3, #0]
 8005762:	e002      	b.n	800576a <_printf_i+0xf2>
 8005764:	0669      	lsls	r1, r5, #25
 8005766:	d5fb      	bpl.n	8005760 <_printf_i+0xe8>
 8005768:	881d      	ldrh	r5, [r3, #0]
 800576a:	4854      	ldr	r0, [pc, #336]	; (80058bc <_printf_i+0x244>)
 800576c:	2f6f      	cmp	r7, #111	; 0x6f
 800576e:	bf0c      	ite	eq
 8005770:	2308      	moveq	r3, #8
 8005772:	230a      	movne	r3, #10
 8005774:	2100      	movs	r1, #0
 8005776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800577a:	6866      	ldr	r6, [r4, #4]
 800577c:	60a6      	str	r6, [r4, #8]
 800577e:	2e00      	cmp	r6, #0
 8005780:	bfa2      	ittt	ge
 8005782:	6821      	ldrge	r1, [r4, #0]
 8005784:	f021 0104 	bicge.w	r1, r1, #4
 8005788:	6021      	strge	r1, [r4, #0]
 800578a:	b90d      	cbnz	r5, 8005790 <_printf_i+0x118>
 800578c:	2e00      	cmp	r6, #0
 800578e:	d04d      	beq.n	800582c <_printf_i+0x1b4>
 8005790:	4616      	mov	r6, r2
 8005792:	fbb5 f1f3 	udiv	r1, r5, r3
 8005796:	fb03 5711 	mls	r7, r3, r1, r5
 800579a:	5dc7      	ldrb	r7, [r0, r7]
 800579c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057a0:	462f      	mov	r7, r5
 80057a2:	42bb      	cmp	r3, r7
 80057a4:	460d      	mov	r5, r1
 80057a6:	d9f4      	bls.n	8005792 <_printf_i+0x11a>
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d10b      	bne.n	80057c4 <_printf_i+0x14c>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	07df      	lsls	r7, r3, #31
 80057b0:	d508      	bpl.n	80057c4 <_printf_i+0x14c>
 80057b2:	6923      	ldr	r3, [r4, #16]
 80057b4:	6861      	ldr	r1, [r4, #4]
 80057b6:	4299      	cmp	r1, r3
 80057b8:	bfde      	ittt	le
 80057ba:	2330      	movle	r3, #48	; 0x30
 80057bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057c0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80057c4:	1b92      	subs	r2, r2, r6
 80057c6:	6122      	str	r2, [r4, #16]
 80057c8:	f8cd a000 	str.w	sl, [sp]
 80057cc:	464b      	mov	r3, r9
 80057ce:	aa03      	add	r2, sp, #12
 80057d0:	4621      	mov	r1, r4
 80057d2:	4640      	mov	r0, r8
 80057d4:	f7ff fee2 	bl	800559c <_printf_common>
 80057d8:	3001      	adds	r0, #1
 80057da:	d14c      	bne.n	8005876 <_printf_i+0x1fe>
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057e0:	b004      	add	sp, #16
 80057e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e6:	4835      	ldr	r0, [pc, #212]	; (80058bc <_printf_i+0x244>)
 80057e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	680e      	ldr	r6, [r1, #0]
 80057f0:	061f      	lsls	r7, r3, #24
 80057f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80057f6:	600e      	str	r6, [r1, #0]
 80057f8:	d514      	bpl.n	8005824 <_printf_i+0x1ac>
 80057fa:	07d9      	lsls	r1, r3, #31
 80057fc:	bf44      	itt	mi
 80057fe:	f043 0320 	orrmi.w	r3, r3, #32
 8005802:	6023      	strmi	r3, [r4, #0]
 8005804:	b91d      	cbnz	r5, 800580e <_printf_i+0x196>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	f023 0320 	bic.w	r3, r3, #32
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	2310      	movs	r3, #16
 8005810:	e7b0      	b.n	8005774 <_printf_i+0xfc>
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	f043 0320 	orr.w	r3, r3, #32
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	2378      	movs	r3, #120	; 0x78
 800581c:	4828      	ldr	r0, [pc, #160]	; (80058c0 <_printf_i+0x248>)
 800581e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005822:	e7e3      	b.n	80057ec <_printf_i+0x174>
 8005824:	065e      	lsls	r6, r3, #25
 8005826:	bf48      	it	mi
 8005828:	b2ad      	uxthmi	r5, r5
 800582a:	e7e6      	b.n	80057fa <_printf_i+0x182>
 800582c:	4616      	mov	r6, r2
 800582e:	e7bb      	b.n	80057a8 <_printf_i+0x130>
 8005830:	680b      	ldr	r3, [r1, #0]
 8005832:	6826      	ldr	r6, [r4, #0]
 8005834:	6960      	ldr	r0, [r4, #20]
 8005836:	1d1d      	adds	r5, r3, #4
 8005838:	600d      	str	r5, [r1, #0]
 800583a:	0635      	lsls	r5, r6, #24
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	d501      	bpl.n	8005844 <_printf_i+0x1cc>
 8005840:	6018      	str	r0, [r3, #0]
 8005842:	e002      	b.n	800584a <_printf_i+0x1d2>
 8005844:	0671      	lsls	r1, r6, #25
 8005846:	d5fb      	bpl.n	8005840 <_printf_i+0x1c8>
 8005848:	8018      	strh	r0, [r3, #0]
 800584a:	2300      	movs	r3, #0
 800584c:	6123      	str	r3, [r4, #16]
 800584e:	4616      	mov	r6, r2
 8005850:	e7ba      	b.n	80057c8 <_printf_i+0x150>
 8005852:	680b      	ldr	r3, [r1, #0]
 8005854:	1d1a      	adds	r2, r3, #4
 8005856:	600a      	str	r2, [r1, #0]
 8005858:	681e      	ldr	r6, [r3, #0]
 800585a:	6862      	ldr	r2, [r4, #4]
 800585c:	2100      	movs	r1, #0
 800585e:	4630      	mov	r0, r6
 8005860:	f7fa fcb6 	bl	80001d0 <memchr>
 8005864:	b108      	cbz	r0, 800586a <_printf_i+0x1f2>
 8005866:	1b80      	subs	r0, r0, r6
 8005868:	6060      	str	r0, [r4, #4]
 800586a:	6863      	ldr	r3, [r4, #4]
 800586c:	6123      	str	r3, [r4, #16]
 800586e:	2300      	movs	r3, #0
 8005870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005874:	e7a8      	b.n	80057c8 <_printf_i+0x150>
 8005876:	6923      	ldr	r3, [r4, #16]
 8005878:	4632      	mov	r2, r6
 800587a:	4649      	mov	r1, r9
 800587c:	4640      	mov	r0, r8
 800587e:	47d0      	blx	sl
 8005880:	3001      	adds	r0, #1
 8005882:	d0ab      	beq.n	80057dc <_printf_i+0x164>
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	079b      	lsls	r3, r3, #30
 8005888:	d413      	bmi.n	80058b2 <_printf_i+0x23a>
 800588a:	68e0      	ldr	r0, [r4, #12]
 800588c:	9b03      	ldr	r3, [sp, #12]
 800588e:	4298      	cmp	r0, r3
 8005890:	bfb8      	it	lt
 8005892:	4618      	movlt	r0, r3
 8005894:	e7a4      	b.n	80057e0 <_printf_i+0x168>
 8005896:	2301      	movs	r3, #1
 8005898:	4632      	mov	r2, r6
 800589a:	4649      	mov	r1, r9
 800589c:	4640      	mov	r0, r8
 800589e:	47d0      	blx	sl
 80058a0:	3001      	adds	r0, #1
 80058a2:	d09b      	beq.n	80057dc <_printf_i+0x164>
 80058a4:	3501      	adds	r5, #1
 80058a6:	68e3      	ldr	r3, [r4, #12]
 80058a8:	9903      	ldr	r1, [sp, #12]
 80058aa:	1a5b      	subs	r3, r3, r1
 80058ac:	42ab      	cmp	r3, r5
 80058ae:	dcf2      	bgt.n	8005896 <_printf_i+0x21e>
 80058b0:	e7eb      	b.n	800588a <_printf_i+0x212>
 80058b2:	2500      	movs	r5, #0
 80058b4:	f104 0619 	add.w	r6, r4, #25
 80058b8:	e7f5      	b.n	80058a6 <_printf_i+0x22e>
 80058ba:	bf00      	nop
 80058bc:	08005b35 	.word	0x08005b35
 80058c0:	08005b46 	.word	0x08005b46

080058c4 <_sbrk_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	4d06      	ldr	r5, [pc, #24]	; (80058e0 <_sbrk_r+0x1c>)
 80058c8:	2300      	movs	r3, #0
 80058ca:	4604      	mov	r4, r0
 80058cc:	4608      	mov	r0, r1
 80058ce:	602b      	str	r3, [r5, #0]
 80058d0:	f7fb fc52 	bl	8001178 <_sbrk>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d102      	bne.n	80058de <_sbrk_r+0x1a>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	b103      	cbz	r3, 80058de <_sbrk_r+0x1a>
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	20005e2c 	.word	0x20005e2c

080058e4 <__sread>:
 80058e4:	b510      	push	{r4, lr}
 80058e6:	460c      	mov	r4, r1
 80058e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ec:	f000 f8a0 	bl	8005a30 <_read_r>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	bfab      	itete	ge
 80058f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058f6:	89a3      	ldrhlt	r3, [r4, #12]
 80058f8:	181b      	addge	r3, r3, r0
 80058fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058fe:	bfac      	ite	ge
 8005900:	6563      	strge	r3, [r4, #84]	; 0x54
 8005902:	81a3      	strhlt	r3, [r4, #12]
 8005904:	bd10      	pop	{r4, pc}

08005906 <__swrite>:
 8005906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800590a:	461f      	mov	r7, r3
 800590c:	898b      	ldrh	r3, [r1, #12]
 800590e:	05db      	lsls	r3, r3, #23
 8005910:	4605      	mov	r5, r0
 8005912:	460c      	mov	r4, r1
 8005914:	4616      	mov	r6, r2
 8005916:	d505      	bpl.n	8005924 <__swrite+0x1e>
 8005918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800591c:	2302      	movs	r3, #2
 800591e:	2200      	movs	r2, #0
 8005920:	f000 f868 	bl	80059f4 <_lseek_r>
 8005924:	89a3      	ldrh	r3, [r4, #12]
 8005926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800592a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800592e:	81a3      	strh	r3, [r4, #12]
 8005930:	4632      	mov	r2, r6
 8005932:	463b      	mov	r3, r7
 8005934:	4628      	mov	r0, r5
 8005936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800593a:	f000 b817 	b.w	800596c <_write_r>

0800593e <__sseek>:
 800593e:	b510      	push	{r4, lr}
 8005940:	460c      	mov	r4, r1
 8005942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005946:	f000 f855 	bl	80059f4 <_lseek_r>
 800594a:	1c43      	adds	r3, r0, #1
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	bf15      	itete	ne
 8005950:	6560      	strne	r0, [r4, #84]	; 0x54
 8005952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800595a:	81a3      	strheq	r3, [r4, #12]
 800595c:	bf18      	it	ne
 800595e:	81a3      	strhne	r3, [r4, #12]
 8005960:	bd10      	pop	{r4, pc}

08005962 <__sclose>:
 8005962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005966:	f000 b813 	b.w	8005990 <_close_r>
	...

0800596c <_write_r>:
 800596c:	b538      	push	{r3, r4, r5, lr}
 800596e:	4d07      	ldr	r5, [pc, #28]	; (800598c <_write_r+0x20>)
 8005970:	4604      	mov	r4, r0
 8005972:	4608      	mov	r0, r1
 8005974:	4611      	mov	r1, r2
 8005976:	2200      	movs	r2, #0
 8005978:	602a      	str	r2, [r5, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	f7fb fbab 	bl	80010d6 <_write>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	d102      	bne.n	800598a <_write_r+0x1e>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	b103      	cbz	r3, 800598a <_write_r+0x1e>
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	20005e2c 	.word	0x20005e2c

08005990 <_close_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d06      	ldr	r5, [pc, #24]	; (80059ac <_close_r+0x1c>)
 8005994:	2300      	movs	r3, #0
 8005996:	4604      	mov	r4, r0
 8005998:	4608      	mov	r0, r1
 800599a:	602b      	str	r3, [r5, #0]
 800599c:	f7fb fbb7 	bl	800110e <_close>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d102      	bne.n	80059aa <_close_r+0x1a>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	b103      	cbz	r3, 80059aa <_close_r+0x1a>
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	20005e2c 	.word	0x20005e2c

080059b0 <_fstat_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	4d07      	ldr	r5, [pc, #28]	; (80059d0 <_fstat_r+0x20>)
 80059b4:	2300      	movs	r3, #0
 80059b6:	4604      	mov	r4, r0
 80059b8:	4608      	mov	r0, r1
 80059ba:	4611      	mov	r1, r2
 80059bc:	602b      	str	r3, [r5, #0]
 80059be:	f7fb fbb2 	bl	8001126 <_fstat>
 80059c2:	1c43      	adds	r3, r0, #1
 80059c4:	d102      	bne.n	80059cc <_fstat_r+0x1c>
 80059c6:	682b      	ldr	r3, [r5, #0]
 80059c8:	b103      	cbz	r3, 80059cc <_fstat_r+0x1c>
 80059ca:	6023      	str	r3, [r4, #0]
 80059cc:	bd38      	pop	{r3, r4, r5, pc}
 80059ce:	bf00      	nop
 80059d0:	20005e2c 	.word	0x20005e2c

080059d4 <_isatty_r>:
 80059d4:	b538      	push	{r3, r4, r5, lr}
 80059d6:	4d06      	ldr	r5, [pc, #24]	; (80059f0 <_isatty_r+0x1c>)
 80059d8:	2300      	movs	r3, #0
 80059da:	4604      	mov	r4, r0
 80059dc:	4608      	mov	r0, r1
 80059de:	602b      	str	r3, [r5, #0]
 80059e0:	f7fb fbb1 	bl	8001146 <_isatty>
 80059e4:	1c43      	adds	r3, r0, #1
 80059e6:	d102      	bne.n	80059ee <_isatty_r+0x1a>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	b103      	cbz	r3, 80059ee <_isatty_r+0x1a>
 80059ec:	6023      	str	r3, [r4, #0]
 80059ee:	bd38      	pop	{r3, r4, r5, pc}
 80059f0:	20005e2c 	.word	0x20005e2c

080059f4 <_lseek_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4d07      	ldr	r5, [pc, #28]	; (8005a14 <_lseek_r+0x20>)
 80059f8:	4604      	mov	r4, r0
 80059fa:	4608      	mov	r0, r1
 80059fc:	4611      	mov	r1, r2
 80059fe:	2200      	movs	r2, #0
 8005a00:	602a      	str	r2, [r5, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	f7fb fbaa 	bl	800115c <_lseek>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d102      	bne.n	8005a12 <_lseek_r+0x1e>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	b103      	cbz	r3, 8005a12 <_lseek_r+0x1e>
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	bd38      	pop	{r3, r4, r5, pc}
 8005a14:	20005e2c 	.word	0x20005e2c

08005a18 <__malloc_lock>:
 8005a18:	4801      	ldr	r0, [pc, #4]	; (8005a20 <__malloc_lock+0x8>)
 8005a1a:	f7ff bb55 	b.w	80050c8 <__retarget_lock_acquire_recursive>
 8005a1e:	bf00      	nop
 8005a20:	20005e24 	.word	0x20005e24

08005a24 <__malloc_unlock>:
 8005a24:	4801      	ldr	r0, [pc, #4]	; (8005a2c <__malloc_unlock+0x8>)
 8005a26:	f7ff bb50 	b.w	80050ca <__retarget_lock_release_recursive>
 8005a2a:	bf00      	nop
 8005a2c:	20005e24 	.word	0x20005e24

08005a30 <_read_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4d07      	ldr	r5, [pc, #28]	; (8005a50 <_read_r+0x20>)
 8005a34:	4604      	mov	r4, r0
 8005a36:	4608      	mov	r0, r1
 8005a38:	4611      	mov	r1, r2
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	602a      	str	r2, [r5, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f7fb fb2c 	bl	800109c <_read>
 8005a44:	1c43      	adds	r3, r0, #1
 8005a46:	d102      	bne.n	8005a4e <_read_r+0x1e>
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	b103      	cbz	r3, 8005a4e <_read_r+0x1e>
 8005a4c:	6023      	str	r3, [r4, #0]
 8005a4e:	bd38      	pop	{r3, r4, r5, pc}
 8005a50:	20005e2c 	.word	0x20005e2c

08005a54 <_init>:
 8005a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a56:	bf00      	nop
 8005a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5a:	bc08      	pop	{r3}
 8005a5c:	469e      	mov	lr, r3
 8005a5e:	4770      	bx	lr

08005a60 <_fini>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	bf00      	nop
 8005a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a66:	bc08      	pop	{r3}
 8005a68:	469e      	mov	lr, r3
 8005a6a:	4770      	bx	lr
