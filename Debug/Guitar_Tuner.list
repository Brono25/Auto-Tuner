
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  08009938  08009938  00019938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f50  08009f50  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009f50  08009f50  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f50  08009f50  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f50  08009f50  00019f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f54  08009f54  00019f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b19c  200001e0  0800a138  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b37c  0800a138  0002b37c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d86  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ccb  00000000  00000000  00035f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00038c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00039da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002500f  00000000  00000000  0003ad80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013371  00000000  00000000  0005fd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e04bb  00000000  00000000  00073100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  001535bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b20  00000000  00000000  00153680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001223  00000000  00000000  001591a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800991c 	.word	0x0800991c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800991c 	.word	0x0800991c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <HAL_ADC_ConvHalfCpltCallback>:
	}
	print_flag++;
}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  in_ptr = &adc_buff[0];
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000c54:	601a      	str	r2, [r3, #0]
  out_ptr = &adc_buff[HLF_BUFFER_LEN];
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000c58:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000c5a:	601a      	str	r2, [r3, #0]
  callback_state = 1;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	200052d0 	.word	0x200052d0
 8000c74:	20007368 	.word	0x20007368
 8000c78:	2000420c 	.word	0x2000420c
 8000c7c:	20008368 	.word	0x20008368
 8000c80:	200001fc 	.word	0x200001fc

08000c84 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  in_ptr = &adc_buff[HLF_BUFFER_LEN];
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <HAL_ADC_ConvCpltCallback+0x28>)
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000c90:	601a      	str	r2, [r3, #0]
  out_ptr = &adc_buff[0];
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_ADC_ConvCpltCallback+0x30>)
 8000c94:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <HAL_ADC_ConvCpltCallback+0x34>)
 8000c96:	601a      	str	r2, [r3, #0]
  callback_state = 1;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_ADC_ConvCpltCallback+0x38>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]

}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200052d0 	.word	0x200052d0
 8000cb0:	20008368 	.word	0x20008368
 8000cb4:	2000420c 	.word	0x2000420c
 8000cb8:	20007368 	.word	0x20007368
 8000cbc:	200001fc 	.word	0x200001fc

08000cc0 <process_dsp>:




void process_dsp()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	e016      	b.n	8000cfa <process_dsp+0x3a>
	{
		in_dsp_buff[i] = (float32_t) in_ptr[i] - DC_BIAS;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <process_dsp+0x6c>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ce0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000d30 <process_dsp+0x70>
 8000ce4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ce8:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <process_dsp+0x74>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d00:	dbe4      	blt.n	8000ccc <process_dsp+0xc>
	}


	float pitch_estimate = 0;
 8000d02:	f04f 0300 	mov.w	r3, #0
 8000d06:	603b      	str	r3, [r7, #0]

	 mpm_mcleod_pitch_method_f32(&in_dsp_buff[0], &pitch_estimate);
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <process_dsp+0x74>)
 8000d0e:	f000 fbed 	bl	80014ec <mpm_mcleod_pitch_method_f32>
     printf("%f \n", pitch_estimate);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fc17 	bl	8000548 <__aeabi_f2d>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <process_dsp+0x78>)
 8000d20:	f005 fab0 	bl	8006284 <iprintf>
	{
		in_dsp_buff[i] += DC_BIAS;
		out_ptr[i] = (uint16_t) in_dsp_buff[i];
	}
*/
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200052d0 	.word	0x200052d0
 8000d30:	45098000 	.word	0x45098000
 8000d34:	20009368 	.word	0x20009368
 8000d38:	08009948 	.word	0x08009948
 8000d3c:	00000000 	.word	0x00000000

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b5b0      	push	{r4, r5, r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d46:	f000 fed2 	bl	8001aee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4a:	f000 f89b 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4e:	f000 f9dd 	bl	800110c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d52:	f000 f9b5 	bl	80010c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d56:	f000 f8e5 	bl	8000f24 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000d5a:	f000 f97b 	bl	8001054 <MX_TIM6_Init>
  MX_DAC1_Init();
 8000d5e:	f000 f947 	bl	8000ff0 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000d62:	4841      	ldr	r0, [pc, #260]	; (8000e68 <main+0x128>)
 8000d64:	f004 f904 	bl	8004f70 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim6, TIM_CHANNEL_6);
 8000d68:	2114      	movs	r1, #20
 8000d6a:	483f      	ldr	r0, [pc, #252]	; (8000e68 <main+0x128>)
 8000d6c:	f004 f94c 	bl	8005008 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, FULL_BUFFER_LEN);
 8000d70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d74:	493d      	ldr	r1, [pc, #244]	; (8000e6c <main+0x12c>)
 8000d76:	483e      	ldr	r0, [pc, #248]	; (8000e70 <main+0x130>)
 8000d78:	f001 fa62 	bl	8002240 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)adc_buff,  FULL_BUFFER_LEN, DAC_ALIGN_12B_R);
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d84:	4a39      	ldr	r2, [pc, #228]	; (8000e6c <main+0x12c>)
 8000d86:	2100      	movs	r1, #0
 8000d88:	483a      	ldr	r0, [pc, #232]	; (8000e74 <main+0x134>)
 8000d8a:	f002 f915 	bl	8002fb8 <HAL_DAC_Start_DMA>


  /*----------------- TEST SIGNAL -----------------*/


	float f = 101;
 8000d8e:	4b3a      	ldr	r3, [pc, #232]	; (8000e78 <main+0x138>)
 8000d90:	607b      	str	r3, [r7, #4]


	float t = 0;
 8000d92:	f04f 0300 	mov.w	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < BLOCK_SIZE; i++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	e03d      	b.n	8000e1a <main+0xda>
	{
		data[i] = cos(2*M_PI*f*t);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff fbd2 	bl	8000548 <__aeabi_f2d>
 8000da4:	a32c      	add	r3, pc, #176	; (adr r3, 8000e58 <main+0x118>)
 8000da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000daa:	f7ff fc25 	bl	80005f8 <__aeabi_dmul>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4614      	mov	r4, r2
 8000db4:	461d      	mov	r5, r3
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f7ff fbc6 	bl	8000548 <__aeabi_f2d>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	4629      	mov	r1, r5
 8000dc4:	f7ff fc18 	bl	80005f8 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	ec43 2b17 	vmov	d7, r2, r3
 8000dd0:	eeb0 0a47 	vmov.f32	s0, s14
 8000dd4:	eef0 0a67 	vmov.f32	s1, s15
 8000dd8:	f007 fad6 	bl	8008388 <cos>
 8000ddc:	ec53 2b10 	vmov	r2, r3, d0
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff fee0 	bl	8000ba8 <__aeabi_d2f>
 8000de8:	4602      	mov	r2, r0
 8000dea:	4924      	ldr	r1, [pc, #144]	; (8000e7c <main+0x13c>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	601a      	str	r2, [r3, #0]

		t += 0.000025;
 8000df4:	68f8      	ldr	r0, [r7, #12]
 8000df6:	f7ff fba7 	bl	8000548 <__aeabi_f2d>
 8000dfa:	a319      	add	r3, pc, #100	; (adr r3, 8000e60 <main+0x120>)
 8000dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e00:	f7ff fa44 	bl	800028c <__adddf3>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	4610      	mov	r0, r2
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f7ff fecc 	bl	8000ba8 <__aeabi_d2f>
 8000e10:	4603      	mov	r3, r0
 8000e12:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < BLOCK_SIZE; i++)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	3301      	adds	r3, #1
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e20:	dbbd      	blt.n	8000d9e <main+0x5e>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (callback_state == 1)
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <main+0x140>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d1fb      	bne.n	8000e22 <main+0xe2>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f002 fec0 	bl	8003bb8 <HAL_GPIO_WritePin>




		  process_dsp();
 8000e38:	f7ff ff42 	bl	8000cc0 <process_dsp>





		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f002 feb7 	bl	8003bb8 <HAL_GPIO_WritePin>
		  callback_state = 0;
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <main+0x140>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
	  if (callback_state == 1)
 8000e50:	e7e7      	b.n	8000e22 <main+0xe2>
 8000e52:	bf00      	nop
 8000e54:	f3af 8000 	nop.w
 8000e58:	54442d18 	.word	0x54442d18
 8000e5c:	401921fb 	.word	0x401921fb
 8000e60:	eb1c432d 	.word	0xeb1c432d
 8000e64:	3efa36e2 	.word	0x3efa36e2
 8000e68:	2000731c 	.word	0x2000731c
 8000e6c:	20007368 	.word	0x20007368
 8000e70:	2000526c 	.word	0x2000526c
 8000e74:	20004210 	.word	0x20004210
 8000e78:	42ca0000 	.word	0x42ca0000
 8000e7c:	2000531c 	.word	0x2000531c
 8000e80:	200001fc 	.word	0x200001fc

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b096      	sub	sp, #88	; 0x58
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	2244      	movs	r2, #68	; 0x44
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f004 fd84 	bl	80059a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ea6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000eaa:	f002 feab 	bl	8003c04 <HAL_PWREx_ControlVoltageScaling>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000eb4:	f000 f976 	bl	80011a4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000eca:	2306      	movs	r3, #6
 8000ecc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000ece:	2350      	movs	r3, #80	; 0x50
 8000ed0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000eda:	2304      	movs	r3, #4
 8000edc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f002 fee4 	bl	8003cb0 <HAL_RCC_OscConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000eee:	f000 f959 	bl	80011a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	2104      	movs	r1, #4
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 fae2 	bl	80044d4 <HAL_RCC_ClockConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f16:	f000 f945 	bl	80011a4 <Error_Handler>
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3758      	adds	r7, #88	; 0x58
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
 8000f38:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f3a:	4b2a      	ldr	r3, [pc, #168]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000f3c:	4a2a      	ldr	r2, [pc, #168]	; (8000fe8 <MX_ADC1_Init+0xc4>)
 8000f3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f40:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f46:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4c:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f52:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000f7a:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000f82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f9e:	4811      	ldr	r0, [pc, #68]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000fa0:	f001 f806 	bl	8001fb0 <HAL_ADC_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000faa:	f000 f8fb 	bl	80011a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_ADC1_Init+0xc8>)
 8000fb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fb2:	2306      	movs	r3, #6
 8000fb4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fba:	237f      	movs	r3, #127	; 0x7f
 8000fbc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <MX_ADC1_Init+0xc0>)
 8000fcc:	f001 f9c6 	bl	800235c <HAL_ADC_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000fd6:	f000 f8e5 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000526c 	.word	0x2000526c
 8000fe8:	50040000 	.word	0x50040000
 8000fec:	14f00020 	.word	0x14f00020

08000ff0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2224      	movs	r2, #36	; 0x24
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f004 fccf 	bl	80059a0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <MX_DAC1_Init+0x5c>)
 8001004:	4a12      	ldr	r2, [pc, #72]	; (8001050 <MX_DAC1_Init+0x60>)
 8001006:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001008:	4810      	ldr	r0, [pc, #64]	; (800104c <MX_DAC1_Init+0x5c>)
 800100a:	f001 ffb2 	bl	8002f72 <HAL_DAC_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001014:	f000 f8c6 	bl	80011a4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800101c:	2304      	movs	r3, #4
 800101e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <MX_DAC1_Init+0x5c>)
 8001034:	f002 f8aa 	bl	800318c <HAL_DAC_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800103e:	f000 f8b1 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20004210 	.word	0x20004210
 8001050:	40007400 	.word	0x40007400

08001054 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_TIM6_Init+0x64>)
 8001066:	4a15      	ldr	r2, [pc, #84]	; (80010bc <MX_TIM6_Init+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_TIM6_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_TIM6_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000 - 1;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_TIM6_Init+0x64>)
 8001078:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800107c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_TIM6_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_TIM6_Init+0x64>)
 8001086:	f003 ff1b 	bl	8004ec0 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001090:	f000 f888 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001094:	2320      	movs	r3, #32
 8001096:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_TIM6_Init+0x64>)
 80010a2:	f004 f919 	bl	80052d8 <HAL_TIMEx_MasterConfigSynchronization>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80010ac:	f000 f87a 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000731c 	.word	0x2000731c
 80010bc:	40001000 	.word	0x40001000

080010c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_DMA_Init+0x48>)
 80010c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ca:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <MX_DMA_Init+0x48>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6493      	str	r3, [r2, #72]	; 0x48
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <MX_DMA_Init+0x48>)
 80010d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	200b      	movs	r0, #11
 80010e4:	f001 ff0f 	bl	8002f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010e8:	200b      	movs	r0, #11
 80010ea:	f001 ff28 	bl	8002f3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	200d      	movs	r0, #13
 80010f4:	f001 ff07 	bl	8002f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010f8:	200d      	movs	r0, #13
 80010fa:	f001 ff20 	bl	8002f3e <HAL_NVIC_EnableIRQ>

}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <MX_GPIO_Init+0x94>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <MX_GPIO_Init+0x94>)
 8001128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <MX_GPIO_Init+0x94>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <MX_GPIO_Init+0x94>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <MX_GPIO_Init+0x94>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_GPIO_Init+0x94>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <MX_GPIO_Init+0x94>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <MX_GPIO_Init+0x94>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_GPIO_Init+0x94>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f002 fd20 	bl	8003bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800117c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f002 fb96 	bl	80038c4 <HAL_GPIO_Init>

}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>

080011ae <mpm_sum_f32>:
	printf("end\n");
}


void mpm_sum_f32(float32_t *pSrc, uint16_t scrLen, float32_t *pRes)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b087      	sub	sp, #28
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	460b      	mov	r3, r1
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	817b      	strh	r3, [r7, #10]
	*pRes = 0;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < scrLen; i++)
 80011c4:	2300      	movs	r3, #0
 80011c6:	82fb      	strh	r3, [r7, #22]
 80011c8:	e010      	b.n	80011ec <mpm_sum_f32+0x3e>
	{
		 *pRes += *pSrc;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	ed93 7a00 	vldr	s14, [r3]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	edd3 7a00 	vldr	s15, [r3]
 80011d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	edc3 7a00 	vstr	s15, [r3]
		 pSrc++;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3304      	adds	r3, #4
 80011e4:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < scrLen; i++)
 80011e6:	8afb      	ldrh	r3, [r7, #22]
 80011e8:	3301      	adds	r3, #1
 80011ea:	82fb      	strh	r3, [r7, #22]
 80011ec:	8afa      	ldrh	r2, [r7, #22]
 80011ee:	897b      	ldrh	r3, [r7, #10]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d3ea      	bcc.n	80011ca <mpm_sum_f32+0x1c>
	}
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	371c      	adds	r7, #28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	0000      	movs	r0, r0
 8001204:	0000      	movs	r0, r0
	...

08001208 <mpm_find_peak_f32>:


void mpm_find_peak_f32(float32_t *pSrc, uint16_t *tau)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	uint16_t flag = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	82fb      	strh	r3, [r7, #22]
	uint16_t valid_peak_flag = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	82bb      	strh	r3, [r7, #20]
	float32_t peak_value = 0;
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	613b      	str	r3, [r7, #16]

	for (uint16_t i = 0; i < BLOCK_SIZE; i++)
 8001220:	2300      	movs	r3, #0
 8001222:	81fb      	strh	r3, [r7, #14]
 8001224:	e038      	b.n	8001298 <mpm_find_peak_f32+0x90>
    {

       if (flag == 0 && *pSrc < 0)
 8001226:	8afb      	ldrh	r3, [r7, #22]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d109      	bne.n	8001240 <mpm_find_peak_f32+0x38>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123a:	d501      	bpl.n	8001240 <mpm_find_peak_f32+0x38>
       {
           flag = 1;
 800123c:	2301      	movs	r3, #1
 800123e:	82fb      	strh	r3, [r7, #22]

       }
       if (flag == 1)
 8001240:	8afb      	ldrh	r3, [r7, #22]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d122      	bne.n	800128c <mpm_find_peak_f32+0x84>
       {
       		if (*pSrc > peak_value && *pSrc > PEAK_THRESHOLD)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001250:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001258:	d515      	bpl.n	8001286 <mpm_find_peak_f32+0x7e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f972 	bl	8000548 <__aeabi_f2d>
 8001264:	a312      	add	r3, pc, #72	; (adr r3, 80012b0 <mpm_find_peak_f32+0xa8>)
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7ff fc55 	bl	8000b18 <__aeabi_dcmpgt>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d008      	beq.n	8001286 <mpm_find_peak_f32+0x7e>
       		{
				peak_value = *pSrc;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	613b      	str	r3, [r7, #16]
              	*tau = i;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	89fa      	ldrh	r2, [r7, #14]
 800127e:	801a      	strh	r2, [r3, #0]
                valid_peak_flag = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	82bb      	strh	r3, [r7, #20]
 8001284:	e002      	b.n	800128c <mpm_find_peak_f32+0x84>

       		} else if (valid_peak_flag == 1)
 8001286:	8abb      	ldrh	r3, [r7, #20]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d00a      	beq.n	80012a2 <mpm_find_peak_f32+0x9a>
       		{
       			return;
       		}
       }
       pSrc++;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3304      	adds	r3, #4
 8001290:	607b      	str	r3, [r7, #4]
	for (uint16_t i = 0; i < BLOCK_SIZE; i++)
 8001292:	89fb      	ldrh	r3, [r7, #14]
 8001294:	3301      	adds	r3, #1
 8001296:	81fb      	strh	r3, [r7, #14]
 8001298:	89fb      	ldrh	r3, [r7, #14]
 800129a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800129e:	d3c2      	bcc.n	8001226 <mpm_find_peak_f32+0x1e>
 80012a0:	e000      	b.n	80012a4 <mpm_find_peak_f32+0x9c>
       			return;
 80012a2:	bf00      	nop
    }
}
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	f3af 8000 	nop.w
 80012b0:	cccccccd 	.word	0xcccccccd
 80012b4:	3feccccc 	.word	0x3feccccc

080012b8 <mpm_NSDF_f32>:


void mpm_NSDF_f32(float32_t *pSrc, float32_t **pDst)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af02      	add	r7, sp, #8
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]

	float32_t *xcorr = &mpm_reserved_memory[1];
 80012c2:	4b34      	ldr	r3, [pc, #208]	; (8001394 <mpm_NSDF_f32+0xdc>)
 80012c4:	613b      	str	r3, [r7, #16]


	arm_correlate_f32(&pSrc[0], BLOCK_SIZE , &pSrc[0], BLOCK_SIZE, xcorr);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f004 f865 	bl	80053a4 <arm_correlate_f32>


	float32_t *r = &xcorr[BLOCK_SIZE - 1];
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80012e0:	331c      	adds	r3, #28
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
	*pDst = r;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e8:	601a      	str	r2, [r3, #0]

	float32_t *xs = &mpm_reserved_memory[0];
 80012ea:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <mpm_NSDF_f32+0xe0>)
 80012ec:	60fb      	str	r3, [r7, #12]
	float32_t *p_xs1 = &xs[0];
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	623b      	str	r3, [r7, #32]
	float32_t *p_xs2 = &xs[BLOCK_SIZE - 1];
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80012f8:	331c      	adds	r3, #28
 80012fa:	61fb      	str	r3, [r7, #28]
	float32_t xs1, xs2;

	arm_mult_f32(&pSrc[0], &pSrc[0],  &xs[0], BLOCK_SIZE);
 80012fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f004 fadb 	bl	80058c0 <arm_mult_f32>
	mpm_sum_f32(&xs[0], BLOCK_SIZE, &xs1);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	461a      	mov	r2, r3
 8001310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f7ff ff4a 	bl	80011ae <mpm_sum_f32>
	xs2 = xs1;
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	61bb      	str	r3, [r7, #24]


	for (uint16_t tau = 0; tau < BLOCK_SIZE  ; tau++)
 800131e:	2300      	movs	r3, #0
 8001320:	82fb      	strh	r3, [r7, #22]
 8001322:	e02d      	b.n	8001380 <mpm_NSDF_f32+0xc8>
	{

		*r = 2 * (*r) / (xs1 + xs2);
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800132e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001332:	edd7 7a06 	vldr	s15, [r7, #24]
 8001336:	ee37 7a27 	vadd.f32	s14, s14, s15
 800133a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	edc3 7a00 	vstr	s15, [r3]

		xs1 = xs1 - (*p_xs1);
 8001344:	ed97 7a02 	vldr	s14, [r7, #8]
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001352:	edc7 7a02 	vstr	s15, [r7, #8]
		xs2 = xs2 - (*p_xs2);
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001364:	edc7 7a06 	vstr	s15, [r7, #24]

		r++;
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	3304      	adds	r3, #4
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
		p_xs1++;
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	3304      	adds	r3, #4
 8001372:	623b      	str	r3, [r7, #32]
		p_xs2--;
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	3b04      	subs	r3, #4
 8001378:	61fb      	str	r3, [r7, #28]
	for (uint16_t tau = 0; tau < BLOCK_SIZE  ; tau++)
 800137a:	8afb      	ldrh	r3, [r7, #22]
 800137c:	3301      	adds	r3, #1
 800137e:	82fb      	strh	r3, [r7, #22]
 8001380:	8afb      	ldrh	r3, [r7, #22]
 8001382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001386:	d3cd      	bcc.n	8001324 <mpm_NSDF_f32+0x6c>
	}
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000204 	.word	0x20000204
 8001398:	20000200 	.word	0x20000200

0800139c <mpm_parabolic_interpolation_f32>:


void mpm_parabolic_interpolation_f32(uint16_t x_pos, float32_t a, float32_t b, float32_t c, float32_t *delta_tau)
{
 800139c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013a0:	b088      	sub	sp, #32
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	ed87 0a04 	vstr	s0, [r7, #16]
 80013aa:	edc7 0a03 	vstr	s1, [r7, #12]
 80013ae:	ed87 1a02 	vstr	s2, [r7, #8]
 80013b2:	6079      	str	r1, [r7, #4]
 80013b4:	82fb      	strh	r3, [r7, #22]
	a = 20*log10(a);
 80013b6:	6938      	ldr	r0, [r7, #16]
 80013b8:	f7ff f8c6 	bl	8000548 <__aeabi_f2d>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	ec43 2b10 	vmov	d0, r2, r3
 80013c4:	f007 f830 	bl	8008428 <log10>
 80013c8:	ec51 0b10 	vmov	r0, r1, d0
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <mpm_parabolic_interpolation_f32+0x144>)
 80013d2:	f7ff f911 	bl	80005f8 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f7ff fbe3 	bl	8000ba8 <__aeabi_d2f>
 80013e2:	4603      	mov	r3, r0
 80013e4:	613b      	str	r3, [r7, #16]
	b = 20*log10(b);
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f7ff f8ae 	bl	8000548 <__aeabi_f2d>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	ec43 2b10 	vmov	d0, r2, r3
 80013f4:	f007 f818 	bl	8008428 <log10>
 80013f8:	ec51 0b10 	vmov	r0, r1, d0
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <mpm_parabolic_interpolation_f32+0x144>)
 8001402:	f7ff f8f9 	bl	80005f8 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff fbcb 	bl	8000ba8 <__aeabi_d2f>
 8001412:	4603      	mov	r3, r0
 8001414:	60fb      	str	r3, [r7, #12]
	c = 20*log10(c);
 8001416:	68b8      	ldr	r0, [r7, #8]
 8001418:	f7ff f896 	bl	8000548 <__aeabi_f2d>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	ec43 2b10 	vmov	d0, r2, r3
 8001424:	f007 f800 	bl	8008428 <log10>
 8001428:	ec51 0b10 	vmov	r0, r1, d0
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <mpm_parabolic_interpolation_f32+0x144>)
 8001432:	f7ff f8e1 	bl	80005f8 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff fbb3 	bl	8000ba8 <__aeabi_d2f>
 8001442:	4603      	mov	r3, r0
 8001444:	60bb      	str	r3, [r7, #8]

	float32_t delta_pos = 0.5 * (a - c) / (1 - 2.0*b + c);
 8001446:	ed97 7a04 	vldr	s14, [r7, #16]
 800144a:	edd7 7a02 	vldr	s15, [r7, #8]
 800144e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001452:	ee17 0a90 	vmov	r0, s15
 8001456:	f7ff f877 	bl	8000548 <__aeabi_f2d>
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <mpm_parabolic_interpolation_f32+0x148>)
 8001460:	f7ff f8ca 	bl	80005f8 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4614      	mov	r4, r2
 800146a:	461d      	mov	r5, r3
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff f86b 	bl	8000548 <__aeabi_f2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	f7fe ff09 	bl	800028c <__adddf3>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	f04f 0000 	mov.w	r0, #0
 8001482:	4919      	ldr	r1, [pc, #100]	; (80014e8 <mpm_parabolic_interpolation_f32+0x14c>)
 8001484:	f7fe ff00 	bl	8000288 <__aeabi_dsub>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4690      	mov	r8, r2
 800148e:	4699      	mov	r9, r3
 8001490:	68b8      	ldr	r0, [r7, #8]
 8001492:	f7ff f859 	bl	8000548 <__aeabi_f2d>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4640      	mov	r0, r8
 800149c:	4649      	mov	r1, r9
 800149e:	f7fe fef5 	bl	800028c <__adddf3>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4620      	mov	r0, r4
 80014a8:	4629      	mov	r1, r5
 80014aa:	f7ff f9cf 	bl	800084c <__aeabi_ddiv>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff fb77 	bl	8000ba8 <__aeabi_d2f>
 80014ba:	4603      	mov	r3, r0
 80014bc:	61fb      	str	r3, [r7, #28]

	*delta_tau = x_pos + delta_pos;
 80014be:	8afb      	ldrh	r3, [r7, #22]
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	edc3 7a00 	vstr	s15, [r3]
}
 80014d6:	bf00      	nop
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014e0:	40340000 	.word	0x40340000
 80014e4:	3fe00000 	.word	0x3fe00000
 80014e8:	3ff00000 	.word	0x3ff00000

080014ec <mpm_mcleod_pitch_method_f32>:


void mpm_mcleod_pitch_method_f32(float32_t *pData, float32_t *pitch_estimate)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]


	float32_t *p_ncorr;

	mpm_NSDF_f32(pData, &p_ncorr);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff fedb 	bl	80012b8 <mpm_NSDF_f32>
	uint16_t tau = 1;
 8001502:	2301      	movs	r3, #1
 8001504:	827b      	strh	r3, [r7, #18]
	mpm_find_peak_f32(p_ncorr, &tau);
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f107 0212 	add.w	r2, r7, #18
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fe7a 	bl	8001208 <mpm_find_peak_f32>



   if (tau > BLOCK_SIZE - 2)
 8001514:	8a7b      	ldrh	r3, [r7, #18]
 8001516:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800151a:	4293      	cmp	r3, r2
 800151c:	d902      	bls.n	8001524 <mpm_mcleod_pitch_method_f32+0x38>
   {
   	tau = BLOCK_SIZE - 2;
 800151e:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8001522:	827b      	strh	r3, [r7, #18]
   }

	uint16_t xp = tau;
 8001524:	8a7b      	ldrh	r3, [r7, #18]
 8001526:	84fb      	strh	r3, [r7, #38]	; 0x26
	float32_t a = p_ncorr[tau - 1];
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	8a7b      	ldrh	r3, [r7, #18]
 800152c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001530:	3b01      	subs	r3, #1
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	623b      	str	r3, [r7, #32]
	float32_t b = p_ncorr[tau];
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	8a7b      	ldrh	r3, [r7, #18]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	61fb      	str	r3, [r7, #28]
	float32_t c = p_ncorr[tau + 1];
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	8a7b      	ldrh	r3, [r7, #18]
 800154a:	3301      	adds	r3, #1
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	61bb      	str	r3, [r7, #24]

	float32_t delta_tau = 0;
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
	mpm_parabolic_interpolation_f32(xp, a, b, c, &delta_tau);
 800155a:	f107 020c 	add.w	r2, r7, #12
 800155e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001560:	4611      	mov	r1, r2
 8001562:	ed97 1a06 	vldr	s2, [r7, #24]
 8001566:	edd7 0a07 	vldr	s1, [r7, #28]
 800156a:	ed97 0a08 	vldr	s0, [r7, #32]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff14 	bl	800139c <mpm_parabolic_interpolation_f32>


	*pitch_estimate = FS / delta_tau;
 8001574:	ed97 7a03 	vldr	s14, [r7, #12]
 8001578:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001590 <mpm_mcleod_pitch_method_f32+0xa4>
 800157c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	edc3 7a00 	vstr	s15, [r3]
}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	471c4000 	.word	0x471c4000

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_MspInit+0x44>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_MspInit+0x44>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6613      	str	r3, [r2, #96]	; 0x60
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_MspInit+0x44>)
 80015a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_MspInit+0x44>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_MspInit+0x44>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6593      	str	r3, [r2, #88]	; 0x58
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_MspInit+0x44>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0a0      	sub	sp, #128	; 0x80
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	225c      	movs	r2, #92	; 0x5c
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f004 f9cf 	bl	80059a0 <memset>
  if(hadc->Instance==ADC1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a3b      	ldr	r2, [pc, #236]	; (80016f4 <HAL_ADC_MspInit+0x118>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d16f      	bne.n	80016ec <HAL_ADC_MspInit+0x110>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800160c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001610:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001612:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001616:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001618:	2303      	movs	r3, #3
 800161a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 6;
 800161c:	2306      	movs	r3, #6
 800161e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 43;
 8001620:	232b      	movs	r3, #43	; 0x2b
 8001622:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001624:	2307      	movs	r3, #7
 8001626:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001628:	2302      	movs	r3, #2
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 800162c:	2304      	movs	r3, #4
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	4618      	mov	r0, r3
 800163c:	f003 f936 	bl	80048ac <HAL_RCCEx_PeriphCLKConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001646:	f7ff fdad 	bl	80011a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800164a:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HAL_ADC_MspInit+0x11c>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	4a2a      	ldr	r2, [pc, #168]	; (80016f8 <HAL_ADC_MspInit+0x11c>)
 8001650:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001656:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <HAL_ADC_MspInit+0x11c>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <HAL_ADC_MspInit+0x11c>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	4a24      	ldr	r2, [pc, #144]	; (80016f8 <HAL_ADC_MspInit+0x11c>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166e:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <HAL_ADC_MspInit+0x11c>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800167a:	2301      	movs	r3, #1
 800167c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800167e:	230b      	movs	r3, #11
 8001680:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800168a:	4619      	mov	r1, r3
 800168c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001690:	f002 f918 	bl	80038c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_ADC_MspInit+0x120>)
 8001696:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <HAL_ADC_MspInit+0x124>)
 8001698:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_ADC_MspInit+0x120>)
 800169c:	2200      	movs	r2, #0
 800169e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_ADC_MspInit+0x120>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_ADC_MspInit+0x120>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <HAL_ADC_MspInit+0x120>)
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_ADC_MspInit+0x120>)
 80016b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_ADC_MspInit+0x120>)
 80016bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_ADC_MspInit+0x120>)
 80016c4:	2220      	movs	r2, #32
 80016c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_ADC_MspInit+0x120>)
 80016ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016d0:	480a      	ldr	r0, [pc, #40]	; (80016fc <HAL_ADC_MspInit+0x120>)
 80016d2:	f001 feff 	bl	80034d4 <HAL_DMA_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 80016dc:	f7ff fd62 	bl	80011a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a06      	ldr	r2, [pc, #24]	; (80016fc <HAL_ADC_MspInit+0x120>)
 80016e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <HAL_ADC_MspInit+0x120>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3780      	adds	r7, #128	; 0x80
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	50040000 	.word	0x50040000
 80016f8:	40021000 	.word	0x40021000
 80016fc:	200052d4 	.word	0x200052d4
 8001700:	40020008 	.word	0x40020008

08001704 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a2b      	ldr	r2, [pc, #172]	; (80017d0 <HAL_DAC_MspInit+0xcc>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d14f      	bne.n	80017c6 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001726:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_DAC_MspInit+0xd0>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	4a2a      	ldr	r2, [pc, #168]	; (80017d4 <HAL_DAC_MspInit+0xd0>)
 800172c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001730:	6593      	str	r3, [r2, #88]	; 0x58
 8001732:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <HAL_DAC_MspInit+0xd0>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <HAL_DAC_MspInit+0xd0>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	4a24      	ldr	r2, [pc, #144]	; (80017d4 <HAL_DAC_MspInit+0xd0>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_DAC_MspInit+0xd0>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001756:	2310      	movs	r3, #16
 8001758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175a:	2303      	movs	r3, #3
 800175c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176c:	f002 f8aa 	bl	80038c4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_DAC_MspInit+0xd4>)
 8001772:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <HAL_DAC_MspInit+0xd8>)
 8001774:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_DAC_MspInit+0xd4>)
 8001778:	2206      	movs	r2, #6
 800177a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <HAL_DAC_MspInit+0xd4>)
 800177e:	2210      	movs	r2, #16
 8001780:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_DAC_MspInit+0xd4>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_DAC_MspInit+0xd4>)
 800178a:	2280      	movs	r2, #128	; 0x80
 800178c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_DAC_MspInit+0xd4>)
 8001790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001794:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <HAL_DAC_MspInit+0xd4>)
 8001798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800179c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_DAC_MspInit+0xd4>)
 80017a0:	2220      	movs	r2, #32
 80017a2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_DAC_MspInit+0xd4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80017aa:	480b      	ldr	r0, [pc, #44]	; (80017d8 <HAL_DAC_MspInit+0xd4>)
 80017ac:	f001 fe92 	bl	80034d4 <HAL_DMA_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80017b6:	f7ff fcf5 	bl	80011a4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_DAC_MspInit+0xd4>)
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <HAL_DAC_MspInit+0xd4>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40007400 	.word	0x40007400
 80017d4:	40021000 	.word	0x40021000
 80017d8:	20004224 	.word	0x20004224
 80017dc:	40020030 	.word	0x40020030

080017e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_TIM_Base_MspInit+0x38>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d10b      	bne.n	800180a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_TIM_Base_MspInit+0x3c>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <HAL_TIM_Base_MspInit+0x3c>)
 80017f8:	f043 0310 	orr.w	r3, r3, #16
 80017fc:	6593      	str	r3, [r2, #88]	; 0x58
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <HAL_TIM_Base_MspInit+0x3c>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40001000 	.word	0x40001000
 800181c:	40021000 	.word	0x40021000

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <NMI_Handler+0x4>

08001826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <MemManage_Handler+0x4>

08001832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <BusFault_Handler+0x4>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <UsageFault_Handler+0x4>

0800183e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186c:	f000 f994 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <DMA1_Channel1_IRQHandler+0x10>)
 800187a:	f001 ff43 	bl	8003704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200052d4 	.word	0x200052d4

08001888 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <DMA1_Channel3_IRQHandler+0x10>)
 800188e:	f001 ff39 	bl	8003704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20004224 	.word	0x20004224

0800189c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <ITM_SendChar+0x48>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <ITM_SendChar+0x48>)
 80018ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <ITM_SendChar+0x4c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a0c      	ldr	r2, [pc, #48]	; (80018e8 <ITM_SendChar+0x4c>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80018be:	bf00      	nop
 80018c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f8      	beq.n	80018c0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80018ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	6013      	str	r3, [r2, #0]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000edfc 	.word	0xe000edfc
 80018e8:	e0000e00 	.word	0xe0000e00

080018ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
	return 1;
 80018f0:	2301      	movs	r3, #1
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_kill>:

int _kill(int pid, int sig)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001906:	f004 f821 	bl	800594c <__errno>
 800190a:	4603      	mov	r3, r0
 800190c:	2216      	movs	r2, #22
 800190e:	601a      	str	r2, [r3, #0]
	return -1;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_exit>:

void _exit (int status)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001924:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ffe7 	bl	80018fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800192e:	e7fe      	b.n	800192e <_exit+0x12>

08001930 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	e00a      	b.n	8001958 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001942:	f3af 8000 	nop.w
 8001946:	4601      	mov	r1, r0
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	60ba      	str	r2, [r7, #8]
 800194e:	b2ca      	uxtb	r2, r1
 8001950:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbf0      	blt.n	8001942 <_read+0x12>
	}

return len;
 8001960:	687b      	ldr	r3, [r7, #4]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	e009      	b.n	8001990 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);   // This sends to the trace
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	60ba      	str	r2, [r7, #8]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff89 	bl	800189c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	dbf1      	blt.n	800197c <_write+0x12>
	}
	return len;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_close>:

int _close(int file)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	return -1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ca:	605a      	str	r2, [r3, #4]
	return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_isatty>:

int _isatty(int file)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
	return 1;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
	return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a14:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <_sbrk+0x5c>)
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <_sbrk+0x60>)
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <_sbrk+0x64>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <_sbrk+0x68>)
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d207      	bcs.n	8001a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a3c:	f003 ff86 	bl	800594c <__errno>
 8001a40:	4603      	mov	r3, r0
 8001a42:	220c      	movs	r2, #12
 8001a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a4a:	e009      	b.n	8001a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <_sbrk+0x64>)
 8001a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20010000 	.word	0x20010000
 8001a6c:	00000400 	.word	0x00000400
 8001a70:	20004200 	.word	0x20004200
 8001a74:	2000b380 	.word	0x2000b380

08001a78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <SystemInit+0x20>)
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <SystemInit+0x20>)
 8001a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa0:	f7ff ffea 	bl	8001a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aa6:	490d      	ldr	r1, [pc, #52]	; (8001adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <LoopForever+0xe>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001abc:	4c0a      	ldr	r4, [pc, #40]	; (8001ae8 <LoopForever+0x16>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aca:	f003 ff45 	bl	8005958 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ace:	f7ff f937 	bl	8000d40 <main>

08001ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ad2:	e7fe      	b.n	8001ad2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001adc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ae0:	08009f58 	.word	0x08009f58
  ldr r2, =_sbss
 8001ae4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ae8:	2000b37c 	.word	0x2000b37c

08001aec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <ADC1_IRQHandler>

08001aee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f001 f9f9 	bl	8002ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afe:	200f      	movs	r0, #15
 8001b00:	f000 f80e 	bl	8001b20 <HAL_InitTick>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	e001      	b.n	8001b14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b10:	f7ff fd40 	bl	8001594 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b14:	79fb      	ldrb	r3, [r7, #7]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_InitTick+0x6c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d023      	beq.n	8001b7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_InitTick+0x70>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_InitTick+0x6c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f001 fa05 	bl	8002f5a <HAL_SYSTICK_Config>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10f      	bne.n	8001b76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d809      	bhi.n	8001b70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b64:	f001 f9cf 	bl	8002f06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_InitTick+0x74>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e007      	b.n	8001b80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e004      	b.n	8001b80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	e001      	b.n	8001b80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	20000000 	.word	0x20000000
 8001b94:	20000004 	.word	0x20000004

08001b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_IncTick+0x20>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x24>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_IncTick+0x24>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	2000b368 	.word	0x2000b368

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	2000b368 	.word	0x2000b368

08001bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff ffee 	bl	8001bc0 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bf0:	d005      	beq.n	8001bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_Delay+0x44>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bfe:	bf00      	nop
 8001c00:	f7ff ffde 	bl	8001bc0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d8f7      	bhi.n	8001c00 <HAL_Delay+0x28>
  {
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000008 	.word	0x20000008

08001c20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	609a      	str	r2, [r3, #8]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3360      	adds	r3, #96	; 0x60
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <LL_ADC_SetOffset+0x44>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cc0:	bf00      	nop
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	03fff000 	.word	0x03fff000

08001cd0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3360      	adds	r3, #96	; 0x60
 8001cde:	461a      	mov	r2, r3
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3360      	adds	r3, #96	; 0x60
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	431a      	orrs	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d26:	bf00      	nop
 8001d28:	371c      	adds	r7, #28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3330      	adds	r3, #48	; 0x30
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	4413      	add	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	211f      	movs	r1, #31
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	0e9b      	lsrs	r3, r3, #26
 8001d90:	f003 011f 	and.w	r1, r3, #31
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001da4:	bf00      	nop
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3314      	adds	r3, #20
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	0e5b      	lsrs	r3, r3, #25
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	4413      	add	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	0d1b      	lsrs	r3, r3, #20
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	2107      	movs	r1, #7
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	401a      	ands	r2, r3
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	0d1b      	lsrs	r3, r3, #20
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	431a      	orrs	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dfa:	bf00      	nop
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e20:	43db      	mvns	r3, r3
 8001e22:	401a      	ands	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0318 	and.w	r3, r3, #24
 8001e2a:	4908      	ldr	r1, [pc, #32]	; (8001e4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e2c:	40d9      	lsrs	r1, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	400b      	ands	r3, r1
 8001e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e36:	431a      	orrs	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	0007ffff 	.word	0x0007ffff

08001e50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6093      	str	r3, [r2, #8]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e88:	d101      	bne.n	8001e8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001eac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ed8:	d101      	bne.n	8001ede <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001efc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <LL_ADC_IsEnabled+0x18>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <LL_ADC_IsEnabled+0x1a>
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f4e:	f043 0204 	orr.w	r2, r3, #4
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d101      	bne.n	8001f7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d101      	bne.n	8001fa0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e12c      	b.n	8002224 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff faff 	bl	80015dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff3f 	bl	8001e74 <LL_ADC_IsDeepPowerDownEnabled>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff25 	bl	8001e50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff5a 	bl	8001ec4 <LL_ADC_IsInternalRegulatorEnabled>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d115      	bne.n	8002042 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ff3e 	bl	8001e9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002020:	4b82      	ldr	r3, [pc, #520]	; (800222c <HAL_ADC_Init+0x27c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	099b      	lsrs	r3, r3, #6
 8002026:	4a82      	ldr	r2, [pc, #520]	; (8002230 <HAL_ADC_Init+0x280>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	3301      	adds	r3, #1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002034:	e002      	b.n	800203c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	3b01      	subs	r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f9      	bne.n	8002036 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff3c 	bl	8001ec4 <LL_ADC_IsInternalRegulatorEnabled>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10d      	bne.n	800206e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002056:	f043 0210 	orr.w	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ff75 	bl	8001f62 <LL_ADC_REG_IsConversionOngoing>
 8002078:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 80c5 	bne.w	8002212 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 80c1 	bne.w	8002212 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002098:	f043 0202 	orr.w	r2, r3, #2
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff35 	bl	8001f14 <LL_ADC_IsEnabled>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10b      	bne.n	80020c8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020b0:	4860      	ldr	r0, [pc, #384]	; (8002234 <HAL_ADC_Init+0x284>)
 80020b2:	f7ff ff2f 	bl	8001f14 <LL_ADC_IsEnabled>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4619      	mov	r1, r3
 80020c2:	485d      	ldr	r0, [pc, #372]	; (8002238 <HAL_ADC_Init+0x288>)
 80020c4:	f7ff fdac 	bl	8001c20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7e5b      	ldrb	r3, [r3, #25]
 80020cc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020d2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80020d8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80020de:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d106      	bne.n	8002104 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	3b01      	subs	r3, #1
 80020fc:	045b      	lsls	r3, r3, #17
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	d009      	beq.n	8002120 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	4b45      	ldr	r3, [pc, #276]	; (800223c <HAL_ADC_Init+0x28c>)
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	69b9      	ldr	r1, [r7, #24]
 8002130:	430b      	orrs	r3, r1
 8002132:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff12 	bl	8001f62 <LL_ADC_REG_IsConversionOngoing>
 800213e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff1f 	bl	8001f88 <LL_ADC_INJ_IsConversionOngoing>
 800214a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d13d      	bne.n	80021ce <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d13a      	bne.n	80021ce <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800215c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002164:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002174:	f023 0302 	bic.w	r3, r3, #2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	69b9      	ldr	r1, [r7, #24]
 800217e:	430b      	orrs	r3, r1
 8002180:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002188:	2b01      	cmp	r3, #1
 800218a:	d118      	bne.n	80021be <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002196:	f023 0304 	bic.w	r3, r3, #4
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021a2:	4311      	orrs	r1, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021a8:	4311      	orrs	r1, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021ae:	430a      	orrs	r2, r1
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	611a      	str	r2, [r3, #16]
 80021bc:	e007      	b.n	80021ce <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0201 	bic.w	r2, r2, #1
 80021cc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d10c      	bne.n	80021f0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f023 010f 	bic.w	r1, r3, #15
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	1e5a      	subs	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	631a      	str	r2, [r3, #48]	; 0x30
 80021ee:	e007      	b.n	8002200 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 020f 	bic.w	r2, r2, #15
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	f023 0303 	bic.w	r3, r3, #3
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
 8002210:	e007      	b.n	8002222 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	f043 0210 	orr.w	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002222:	7ffb      	ldrb	r3, [r7, #31]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000000 	.word	0x20000000
 8002230:	053e2d63 	.word	0x053e2d63
 8002234:	50040000 	.word	0x50040000
 8002238:	50040300 	.word	0x50040300
 800223c:	fff0c007 	.word	0xfff0c007

08002240 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fe86 	bl	8001f62 <LL_ADC_REG_IsConversionOngoing>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d167      	bne.n	800232c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_ADC_Start_DMA+0x2a>
 8002266:	2302      	movs	r3, #2
 8002268:	e063      	b.n	8002332 <HAL_ADC_Start_DMA+0xf2>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fc52 	bl	8002b1c <ADC_Enable>
 8002278:	4603      	mov	r3, r0
 800227a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d14f      	bne.n	8002322 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002286:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	f023 0206 	bic.w	r2, r3, #6
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	659a      	str	r2, [r3, #88]	; 0x58
 80022ae:	e002      	b.n	80022b6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ba:	4a20      	ldr	r2, [pc, #128]	; (800233c <HAL_ADC_Start_DMA+0xfc>)
 80022bc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	4a1f      	ldr	r2, [pc, #124]	; (8002340 <HAL_ADC_Start_DMA+0x100>)
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	4a1e      	ldr	r2, [pc, #120]	; (8002344 <HAL_ADC_Start_DMA+0x104>)
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	221c      	movs	r2, #28
 80022d4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0210 	orr.w	r2, r2, #16
 80022ec:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0201 	orr.w	r2, r2, #1
 80022fc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	3340      	adds	r3, #64	; 0x40
 8002308:	4619      	mov	r1, r3
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f001 f999 	bl	8003644 <HAL_DMA_Start_IT>
 8002312:	4603      	mov	r3, r0
 8002314:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fe0d 	bl	8001f3a <LL_ADC_REG_StartConversion>
 8002320:	e006      	b.n	8002330 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800232a:	e001      	b.n	8002330 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800232c:	2302      	movs	r3, #2
 800232e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002330:	7dfb      	ldrb	r3, [r7, #23]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	08002c29 	.word	0x08002c29
 8002340:	08002d01 	.word	0x08002d01
 8002344:	08002d1d 	.word	0x08002d1d

08002348 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b0b6      	sub	sp, #216	; 0xd8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_ADC_ConfigChannel+0x22>
 800237a:	2302      	movs	r3, #2
 800237c:	e3b9      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x796>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fde9 	bl	8001f62 <LL_ADC_REG_IsConversionOngoing>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 839e 	bne.w	8002ad4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b05      	cmp	r3, #5
 800239e:	d824      	bhi.n	80023ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	3b02      	subs	r3, #2
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d81b      	bhi.n	80023e2 <HAL_ADC_ConfigChannel+0x86>
 80023aa:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <HAL_ADC_ConfigChannel+0x54>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	080023c9 	.word	0x080023c9
 80023b8:	080023d1 	.word	0x080023d1
 80023bc:	080023d9 	.word	0x080023d9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	220c      	movs	r2, #12
 80023c4:	605a      	str	r2, [r3, #4]
          break;
 80023c6:	e011      	b.n	80023ec <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2212      	movs	r2, #18
 80023cc:	605a      	str	r2, [r3, #4]
          break;
 80023ce:	e00d      	b.n	80023ec <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2218      	movs	r2, #24
 80023d4:	605a      	str	r2, [r3, #4]
          break;
 80023d6:	e009      	b.n	80023ec <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023de:	605a      	str	r2, [r3, #4]
          break;
 80023e0:	e004      	b.n	80023ec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2206      	movs	r2, #6
 80023e6:	605a      	str	r2, [r3, #4]
          break;
 80023e8:	e000      	b.n	80023ec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80023ea:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	f7ff fcad 	bl	8001d58 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fdad 	bl	8001f62 <LL_ADC_REG_IsConversionOngoing>
 8002408:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fdb9 	bl	8001f88 <LL_ADC_INJ_IsConversionOngoing>
 8002416:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800241a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800241e:	2b00      	cmp	r3, #0
 8002420:	f040 81a6 	bne.w	8002770 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002428:	2b00      	cmp	r3, #0
 800242a:	f040 81a1 	bne.w	8002770 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6819      	ldr	r1, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	461a      	mov	r2, r3
 800243c:	f7ff fcb8 	bl	8001db0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	08db      	lsrs	r3, r3, #3
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b04      	cmp	r3, #4
 8002460:	d00a      	beq.n	8002478 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6919      	ldr	r1, [r3, #16]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002472:	f7ff fc09 	bl	8001c88 <LL_ADC_SetOffset>
 8002476:	e17b      	b.n	8002770 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fc26 	bl	8001cd0 <LL_ADC_GetOffsetChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10a      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x148>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fc1b 	bl	8001cd0 <LL_ADC_GetOffsetChannel>
 800249a:	4603      	mov	r3, r0
 800249c:	0e9b      	lsrs	r3, r3, #26
 800249e:	f003 021f 	and.w	r2, r3, #31
 80024a2:	e01e      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x186>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fc10 	bl	8001cd0 <LL_ADC_GetOffsetChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80024d2:	2320      	movs	r3, #32
 80024d4:	e004      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80024d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x19e>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	0e9b      	lsrs	r3, r3, #26
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	e018      	b.n	800252c <HAL_ADC_ConfigChannel+0x1d0>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800250e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002512:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800251e:	2320      	movs	r3, #32
 8002520:	e004      	b.n	800252c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002522:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800252c:	429a      	cmp	r2, r3
 800252e:	d106      	bne.n	800253e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2200      	movs	r2, #0
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fbdf 	bl	8001cfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2101      	movs	r1, #1
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fbc3 	bl	8001cd0 <LL_ADC_GetOffsetChannel>
 800254a:	4603      	mov	r3, r0
 800254c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10a      	bne.n	800256a <HAL_ADC_ConfigChannel+0x20e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fbb8 	bl	8001cd0 <LL_ADC_GetOffsetChannel>
 8002560:	4603      	mov	r3, r0
 8002562:	0e9b      	lsrs	r3, r3, #26
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	e01e      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x24c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2101      	movs	r1, #1
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fbad 	bl	8001cd0 <LL_ADC_GetOffsetChannel>
 8002576:	4603      	mov	r3, r0
 8002578:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002588:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800258c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e004      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800259c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x264>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0e9b      	lsrs	r3, r3, #26
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	e018      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x296>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80025dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80025e4:	2320      	movs	r3, #32
 80025e6:	e004      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80025e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d106      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	2101      	movs	r1, #1
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fb7c 	bl	8001cfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2102      	movs	r1, #2
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fb60 	bl	8001cd0 <LL_ADC_GetOffsetChannel>
 8002610:	4603      	mov	r3, r0
 8002612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10a      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x2d4>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2102      	movs	r1, #2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fb55 	bl	8001cd0 <LL_ADC_GetOffsetChannel>
 8002626:	4603      	mov	r3, r0
 8002628:	0e9b      	lsrs	r3, r3, #26
 800262a:	f003 021f 	and.w	r2, r3, #31
 800262e:	e01e      	b.n	800266e <HAL_ADC_ConfigChannel+0x312>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2102      	movs	r1, #2
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fb4a 	bl	8001cd0 <LL_ADC_GetOffsetChannel>
 800263c:	4603      	mov	r3, r0
 800263e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800264e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002656:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800265e:	2320      	movs	r3, #32
 8002660:	e004      	b.n	800266c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002662:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002676:	2b00      	cmp	r3, #0
 8002678:	d105      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x32a>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	0e9b      	lsrs	r3, r3, #26
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	e016      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x358>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800269a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800269e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80026a6:	2320      	movs	r3, #32
 80026a8:	e004      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80026aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d106      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	2102      	movs	r1, #2
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fb1b 	bl	8001cfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2103      	movs	r1, #3
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff faff 	bl	8001cd0 <LL_ADC_GetOffsetChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x396>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2103      	movs	r1, #3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff faf4 	bl	8001cd0 <LL_ADC_GetOffsetChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	0e9b      	lsrs	r3, r3, #26
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	e017      	b.n	8002722 <HAL_ADC_ConfigChannel+0x3c6>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2103      	movs	r1, #3
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fae9 	bl	8001cd0 <LL_ADC_GetOffsetChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800270a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800270c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800270e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002714:	2320      	movs	r3, #32
 8002716:	e003      	b.n	8002720 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	2b00      	cmp	r3, #0
 800272c:	d105      	bne.n	800273a <HAL_ADC_ConfigChannel+0x3de>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	e011      	b.n	800275e <HAL_ADC_ConfigChannel+0x402>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800274a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800274c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002752:	2320      	movs	r3, #32
 8002754:	e003      	b.n	800275e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800275e:	429a      	cmp	r2, r3
 8002760:	d106      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2200      	movs	r2, #0
 8002768:	2103      	movs	r1, #3
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fac6 	bl	8001cfc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fbcd 	bl	8001f14 <LL_ADC_IsEnabled>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	f040 813f 	bne.w	8002a00 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6819      	ldr	r1, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	461a      	mov	r2, r3
 8002790:	f7ff fb3a 	bl	8001e08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a8e      	ldr	r2, [pc, #568]	; (80029d4 <HAL_ADC_ConfigChannel+0x678>)
 800279a:	4293      	cmp	r3, r2
 800279c:	f040 8130 	bne.w	8002a00 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10b      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x46c>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	3301      	adds	r3, #1
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	2b09      	cmp	r3, #9
 80027be:	bf94      	ite	ls
 80027c0:	2301      	movls	r3, #1
 80027c2:	2300      	movhi	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	e019      	b.n	80027fc <HAL_ADC_ConfigChannel+0x4a0>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80027d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80027da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80027e0:	2320      	movs	r3, #32
 80027e2:	e003      	b.n	80027ec <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80027e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2b09      	cmp	r3, #9
 80027f4:	bf94      	ite	ls
 80027f6:	2301      	movls	r3, #1
 80027f8:	2300      	movhi	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d079      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_ADC_ConfigChannel+0x4c0>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	0e9b      	lsrs	r3, r3, #26
 8002812:	3301      	adds	r3, #1
 8002814:	069b      	lsls	r3, r3, #26
 8002816:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800281a:	e015      	b.n	8002848 <HAL_ADC_ConfigChannel+0x4ec>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800282a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800282c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800282e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002834:	2320      	movs	r3, #32
 8002836:	e003      	b.n	8002840 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	3301      	adds	r3, #1
 8002842:	069b      	lsls	r3, r3, #26
 8002844:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002850:	2b00      	cmp	r3, #0
 8002852:	d109      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x50c>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	0e9b      	lsrs	r3, r3, #26
 800285a:	3301      	adds	r3, #1
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	e017      	b.n	8002898 <HAL_ADC_ConfigChannel+0x53c>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002878:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800287a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002880:	2320      	movs	r3, #32
 8002882:	e003      	b.n	800288c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	ea42 0103 	orr.w	r1, r2, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <HAL_ADC_ConfigChannel+0x562>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	3301      	adds	r3, #1
 80028b0:	f003 021f 	and.w	r2, r3, #31
 80028b4:	4613      	mov	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4413      	add	r3, r2
 80028ba:	051b      	lsls	r3, r3, #20
 80028bc:	e018      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x594>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80028d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80028d6:	2320      	movs	r3, #32
 80028d8:	e003      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80028da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028f0:	430b      	orrs	r3, r1
 80028f2:	e080      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d107      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x5b4>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	0e9b      	lsrs	r3, r3, #26
 8002906:	3301      	adds	r3, #1
 8002908:	069b      	lsls	r3, r3, #26
 800290a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800290e:	e015      	b.n	800293c <HAL_ADC_ConfigChannel+0x5e0>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002928:	2320      	movs	r3, #32
 800292a:	e003      	b.n	8002934 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	3301      	adds	r3, #1
 8002936:	069b      	lsls	r3, r3, #26
 8002938:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <HAL_ADC_ConfigChannel+0x600>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0e9b      	lsrs	r3, r3, #26
 800294e:	3301      	adds	r3, #1
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	e017      	b.n	800298c <HAL_ADC_ConfigChannel+0x630>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	61fb      	str	r3, [r7, #28]
  return result;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002974:	2320      	movs	r3, #32
 8002976:	e003      	b.n	8002980 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	3301      	adds	r3, #1
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	2101      	movs	r1, #1
 8002988:	fa01 f303 	lsl.w	r3, r1, r3
 800298c:	ea42 0103 	orr.w	r1, r2, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10d      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x65c>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0e9b      	lsrs	r3, r3, #26
 80029a2:	3301      	adds	r3, #1
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	3b1e      	subs	r3, #30
 80029b0:	051b      	lsls	r3, r3, #20
 80029b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029b6:	e01d      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x698>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	613b      	str	r3, [r7, #16]
  return result;
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d103      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80029d0:	2320      	movs	r3, #32
 80029d2:	e005      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x684>
 80029d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f003 021f 	and.w	r2, r3, #31
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	3b1e      	subs	r3, #30
 80029ee:	051b      	lsls	r3, r3, #20
 80029f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f4:	430b      	orrs	r3, r1
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	6892      	ldr	r2, [r2, #8]
 80029fa:	4619      	mov	r1, r3
 80029fc:	f7ff f9d8 	bl	8001db0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <HAL_ADC_ConfigChannel+0x7a0>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d06c      	beq.n	8002ae6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a0c:	483c      	ldr	r0, [pc, #240]	; (8002b00 <HAL_ADC_ConfigChannel+0x7a4>)
 8002a0e:	f7ff f92d 	bl	8001c6c <LL_ADC_GetCommonPathInternalCh>
 8002a12:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a3a      	ldr	r2, [pc, #232]	; (8002b04 <HAL_ADC_ConfigChannel+0x7a8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d127      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d121      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a35      	ldr	r2, [pc, #212]	; (8002b08 <HAL_ADC_ConfigChannel+0x7ac>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d157      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a3e:	4619      	mov	r1, r3
 8002a40:	482f      	ldr	r0, [pc, #188]	; (8002b00 <HAL_ADC_ConfigChannel+0x7a4>)
 8002a42:	f7ff f900 	bl	8001c46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a46:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <HAL_ADC_ConfigChannel+0x7b0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	099b      	lsrs	r3, r3, #6
 8002a4c:	4a30      	ldr	r2, [pc, #192]	; (8002b10 <HAL_ADC_ConfigChannel+0x7b4>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	099b      	lsrs	r3, r3, #6
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	4613      	mov	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a60:	e002      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f9      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a6e:	e03a      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a27      	ldr	r2, [pc, #156]	; (8002b14 <HAL_ADC_ConfigChannel+0x7b8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d113      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x746>
 8002a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10d      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <HAL_ADC_ConfigChannel+0x7ac>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d12a      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4819      	ldr	r0, [pc, #100]	; (8002b00 <HAL_ADC_ConfigChannel+0x7a4>)
 8002a9c:	f7ff f8d3 	bl	8001c46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aa0:	e021      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <HAL_ADC_ConfigChannel+0x7bc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d11c      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002aac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d116      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <HAL_ADC_ConfigChannel+0x7ac>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d111      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ac6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aca:	4619      	mov	r1, r3
 8002acc:	480c      	ldr	r0, [pc, #48]	; (8002b00 <HAL_ADC_ConfigChannel+0x7a4>)
 8002ace:	f7ff f8ba 	bl	8001c46 <LL_ADC_SetCommonPathInternalCh>
 8002ad2:	e008      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002aee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	37d8      	adds	r7, #216	; 0xd8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	80080000 	.word	0x80080000
 8002b00:	50040300 	.word	0x50040300
 8002b04:	c7520000 	.word	0xc7520000
 8002b08:	50040000 	.word	0x50040000
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	053e2d63 	.word	0x053e2d63
 8002b14:	cb840000 	.word	0xcb840000
 8002b18:	80000001 	.word	0x80000001

08002b1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff f9f1 	bl	8001f14 <LL_ADC_IsEnabled>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d169      	bne.n	8002c0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <ADC_Enable+0xfc>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	f043 0210 	orr.w	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	f043 0201 	orr.w	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e055      	b.n	8002c0e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff f9c0 	bl	8001eec <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b6c:	482b      	ldr	r0, [pc, #172]	; (8002c1c <ADC_Enable+0x100>)
 8002b6e:	f7ff f87d 	bl	8001c6c <LL_ADC_GetCommonPathInternalCh>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d013      	beq.n	8002ba4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b7c:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <ADC_Enable+0x104>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	4a28      	ldr	r2, [pc, #160]	; (8002c24 <ADC_Enable+0x108>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002b96:	e002      	b.n	8002b9e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f9      	bne.n	8002b98 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ba4:	f7ff f80c 	bl	8001bc0 <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002baa:	e028      	b.n	8002bfe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff f9af 	bl	8001f14 <LL_ADC_IsEnabled>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff f993 	bl	8001eec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bc6:	f7fe fffb 	bl	8001bc0 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d914      	bls.n	8002bfe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d00d      	beq.n	8002bfe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f043 0210 	orr.w	r2, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e007      	b.n	8002c0e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d1cf      	bne.n	8002bac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	8000003f 	.word	0x8000003f
 8002c1c:	50040300 	.word	0x50040300
 8002c20:	20000000 	.word	0x20000000
 8002c24:	053e2d63 	.word	0x053e2d63

08002c28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d14b      	bne.n	8002cda <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d021      	beq.n	8002ca0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff f866 	bl	8001d32 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d032      	beq.n	8002cd2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d12b      	bne.n	8002cd2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d11f      	bne.n	8002cd2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	f043 0201 	orr.w	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
 8002c9e:	e018      	b.n	8002cd2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d111      	bne.n	8002cd2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d105      	bne.n	8002cd2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7fd ffd6 	bl	8000c84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cd8:	e00e      	b.n	8002cf8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f7ff fb2e 	bl	8002348 <HAL_ADC_ErrorCallback>
}
 8002cec:	e004      	b.n	8002cf8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7fd ff9a 	bl	8000c48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	f043 0204 	orr.w	r2, r3, #4
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f7ff fb00 	bl	8002348 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d82:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	60d3      	str	r3, [r2, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	f003 0307 	and.w	r3, r3, #7
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	db0b      	blt.n	8002dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	f003 021f 	and.w	r2, r3, #31
 8002dcc:	4907      	ldr	r1, [pc, #28]	; (8002dec <__NVIC_EnableIRQ+0x38>)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000e100 	.word	0xe000e100

08002df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	6039      	str	r1, [r7, #0]
 8002dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	db0a      	blt.n	8002e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	490c      	ldr	r1, [pc, #48]	; (8002e3c <__NVIC_SetPriority+0x4c>)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	0112      	lsls	r2, r2, #4
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	440b      	add	r3, r1
 8002e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e18:	e00a      	b.n	8002e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4908      	ldr	r1, [pc, #32]	; (8002e40 <__NVIC_SetPriority+0x50>)
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	3b04      	subs	r3, #4
 8002e28:	0112      	lsls	r2, r2, #4
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	761a      	strb	r2, [r3, #24]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000e100 	.word	0xe000e100
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b089      	sub	sp, #36	; 0x24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f1c3 0307 	rsb	r3, r3, #7
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	bf28      	it	cs
 8002e62:	2304      	movcs	r3, #4
 8002e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d902      	bls.n	8002e74 <NVIC_EncodePriority+0x30>
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3b03      	subs	r3, #3
 8002e72:	e000      	b.n	8002e76 <NVIC_EncodePriority+0x32>
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43da      	mvns	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	401a      	ands	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	43d9      	mvns	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	4313      	orrs	r3, r2
         );
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ebc:	d301      	bcc.n	8002ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e00f      	b.n	8002ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <SysTick_Config+0x40>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eca:	210f      	movs	r1, #15
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ed0:	f7ff ff8e 	bl	8002df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <SysTick_Config+0x40>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eda:	4b04      	ldr	r3, [pc, #16]	; (8002eec <SysTick_Config+0x40>)
 8002edc:	2207      	movs	r2, #7
 8002ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	e000e010 	.word	0xe000e010

08002ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff ff29 	bl	8002d50 <__NVIC_SetPriorityGrouping>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f18:	f7ff ff3e 	bl	8002d98 <__NVIC_GetPriorityGrouping>
 8002f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	6978      	ldr	r0, [r7, #20]
 8002f24:	f7ff ff8e 	bl	8002e44 <NVIC_EncodePriority>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff5d 	bl	8002df0 <__NVIC_SetPriority>
}
 8002f36:	bf00      	nop
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	4603      	mov	r3, r0
 8002f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff31 	bl	8002db4 <__NVIC_EnableIRQ>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ffa2 	bl	8002eac <SysTick_Config>
 8002f68:	4603      	mov	r3, r0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e014      	b.n	8002fae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	791b      	ldrb	r3, [r3, #4]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d105      	bne.n	8002f9a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7fe fbb5 	bl	8001704 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	795b      	ldrb	r3, [r3, #5]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_DAC_Start_DMA+0x1e>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e0ab      	b.n	800312e <HAL_DAC_Start_DMA+0x176>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d12f      	bne.n	8003048 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_DAC_Start_DMA+0x180>)
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a51      	ldr	r2, [pc, #324]	; (800313c <HAL_DAC_Start_DMA+0x184>)
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4a50      	ldr	r2, [pc, #320]	; (8003140 <HAL_DAC_Start_DMA+0x188>)
 8002ffe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800300e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	2b08      	cmp	r3, #8
 8003014:	d013      	beq.n	800303e <HAL_DAC_Start_DMA+0x86>
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	2b08      	cmp	r3, #8
 800301a:	d845      	bhi.n	80030a8 <HAL_DAC_Start_DMA+0xf0>
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_DAC_Start_DMA+0x72>
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d005      	beq.n	8003034 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003028:	e03e      	b.n	80030a8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3308      	adds	r3, #8
 8003030:	613b      	str	r3, [r7, #16]
        break;
 8003032:	e03c      	b.n	80030ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	613b      	str	r3, [r7, #16]
        break;
 800303c:	e037      	b.n	80030ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3310      	adds	r3, #16
 8003044:	613b      	str	r3, [r7, #16]
        break;
 8003046:	e032      	b.n	80030ae <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a3d      	ldr	r2, [pc, #244]	; (8003144 <HAL_DAC_Start_DMA+0x18c>)
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a3c      	ldr	r2, [pc, #240]	; (8003148 <HAL_DAC_Start_DMA+0x190>)
 8003056:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4a3b      	ldr	r2, [pc, #236]	; (800314c <HAL_DAC_Start_DMA+0x194>)
 800305e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800306e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	2b08      	cmp	r3, #8
 8003074:	d013      	beq.n	800309e <HAL_DAC_Start_DMA+0xe6>
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	2b08      	cmp	r3, #8
 800307a:	d817      	bhi.n	80030ac <HAL_DAC_Start_DMA+0xf4>
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_DAC_Start_DMA+0xd2>
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	2b04      	cmp	r3, #4
 8003086:	d005      	beq.n	8003094 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003088:	e010      	b.n	80030ac <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3314      	adds	r3, #20
 8003090:	613b      	str	r3, [r7, #16]
        break;
 8003092:	e00c      	b.n	80030ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3318      	adds	r3, #24
 800309a:	613b      	str	r3, [r7, #16]
        break;
 800309c:	e007      	b.n	80030ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	331c      	adds	r3, #28
 80030a4:	613b      	str	r3, [r7, #16]
        break;
 80030a6:	e002      	b.n	80030ae <HAL_DAC_Start_DMA+0xf6>
        break;
 80030a8:	bf00      	nop
 80030aa:	e000      	b.n	80030ae <HAL_DAC_Start_DMA+0xf6>
        break;
 80030ac:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d111      	bne.n	80030d8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6898      	ldr	r0, [r3, #8]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	f000 fab9 	bl	8003644 <HAL_DMA_Start_IT>
 80030d2:	4603      	mov	r3, r0
 80030d4:	75fb      	strb	r3, [r7, #23]
 80030d6:	e010      	b.n	80030fa <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80030e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	68d8      	ldr	r0, [r3, #12]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	f000 faa7 	bl	8003644 <HAL_DMA_Start_IT>
 80030f6:	4603      	mov	r3, r0
 80030f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003100:	7dfb      	ldrb	r3, [r7, #23]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10c      	bne.n	8003120 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6819      	ldr	r1, [r3, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2201      	movs	r2, #1
 8003114:	409a      	lsls	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	e005      	b.n	800312c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f043 0204 	orr.w	r2, r3, #4
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800312c:	7dfb      	ldrb	r3, [r7, #23]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	080033c1 	.word	0x080033c1
 800313c:	080033e3 	.word	0x080033e3
 8003140:	080033ff 	.word	0x080033ff
 8003144:	08003469 	.word	0x08003469
 8003148:	0800348b 	.word	0x0800348b
 800314c:	080034a7 	.word	0x080034a7

08003150 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	795b      	ldrb	r3, [r3, #5]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_DAC_ConfigChannel+0x1c>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e107      	b.n	80033b8 <HAL_DAC_ConfigChannel+0x22c>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2202      	movs	r2, #2
 80031b2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d174      	bne.n	80032a6 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80031bc:	f7fe fd00 	bl	8001bc0 <HAL_GetTick>
 80031c0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d134      	bne.n	8003232 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031c8:	e011      	b.n	80031ee <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031ca:	f7fe fcf9 	bl	8001bc0 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d90a      	bls.n	80031ee <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f043 0208 	orr.w	r2, r3, #8
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2203      	movs	r2, #3
 80031e8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e0e4      	b.n	80033b8 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e6      	bne.n	80031ca <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80031fc:	2001      	movs	r0, #1
 80031fe:	f7fe fceb 	bl	8001bd8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	6992      	ldr	r2, [r2, #24]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
 800320c:	e01e      	b.n	800324c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800320e:	f7fe fcd7 	bl	8001bc0 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d90a      	bls.n	8003232 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f043 0208 	orr.w	r2, r3, #8
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2203      	movs	r2, #3
 800322c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e0c2      	b.n	80033b8 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003238:	2b00      	cmp	r3, #0
 800323a:	dbe8      	blt.n	800320e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800323c:	2001      	movs	r0, #1
 800323e:	f7fe fccb 	bl	8001bd8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	6992      	ldr	r2, [r2, #24]
 800324a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800325c:	fa01 f303 	lsl.w	r3, r1, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	ea02 0103 	and.w	r1, r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	409a      	lsls	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	21ff      	movs	r1, #255	; 0xff
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	ea02 0103 	and.w	r1, r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	6a1a      	ldr	r2, [r3, #32]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	409a      	lsls	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d11d      	bne.n	80032ea <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	221f      	movs	r2, #31
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2207      	movs	r2, #7
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	431a      	orrs	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6819      	ldr	r1, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43da      	mvns	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	400a      	ands	r2, r1
 800334e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	22c0      	movs	r2, #192	; 0xc0
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43da      	mvns	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	400a      	ands	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f7ff febe 	bl	8003150 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	711a      	strb	r2, [r3, #4]
}
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f7ff feb7 	bl	8003164 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f043 0204 	orr.w	r2, r3, #4
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7ff fead 	bl	8003178 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	711a      	strb	r2, [r3, #4]
}
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f7ff ffd8 	bl	800342c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	711a      	strb	r2, [r3, #4]
}
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f7ff ffd1 	bl	8003440 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f043 0204 	orr.w	r2, r3, #4
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7ff ffc7 	bl	8003454 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	711a      	strb	r2, [r3, #4]
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e098      	b.n	8003618 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	4b4d      	ldr	r3, [pc, #308]	; (8003624 <HAL_DMA_Init+0x150>)
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d80f      	bhi.n	8003512 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	4b4b      	ldr	r3, [pc, #300]	; (8003628 <HAL_DMA_Init+0x154>)
 80034fa:	4413      	add	r3, r2
 80034fc:	4a4b      	ldr	r2, [pc, #300]	; (800362c <HAL_DMA_Init+0x158>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	009a      	lsls	r2, r3, #2
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a48      	ldr	r2, [pc, #288]	; (8003630 <HAL_DMA_Init+0x15c>)
 800350e:	641a      	str	r2, [r3, #64]	; 0x40
 8003510:	e00e      	b.n	8003530 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	4b46      	ldr	r3, [pc, #280]	; (8003634 <HAL_DMA_Init+0x160>)
 800351a:	4413      	add	r3, r2
 800351c:	4a43      	ldr	r2, [pc, #268]	; (800362c <HAL_DMA_Init+0x158>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	009a      	lsls	r2, r3, #2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a42      	ldr	r2, [pc, #264]	; (8003638 <HAL_DMA_Init+0x164>)
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003554:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003560:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800358a:	d039      	beq.n	8003600 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	4a27      	ldr	r2, [pc, #156]	; (8003630 <HAL_DMA_Init+0x15c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d11a      	bne.n	80035cc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003596:	4b29      	ldr	r3, [pc, #164]	; (800363c <HAL_DMA_Init+0x168>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f003 031c 	and.w	r3, r3, #28
 80035a2:	210f      	movs	r1, #15
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	4924      	ldr	r1, [pc, #144]	; (800363c <HAL_DMA_Init+0x168>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035b0:	4b22      	ldr	r3, [pc, #136]	; (800363c <HAL_DMA_Init+0x168>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	f003 031c 	and.w	r3, r3, #28
 80035c0:	fa01 f303 	lsl.w	r3, r1, r3
 80035c4:	491d      	ldr	r1, [pc, #116]	; (800363c <HAL_DMA_Init+0x168>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	600b      	str	r3, [r1, #0]
 80035ca:	e019      	b.n	8003600 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035cc:	4b1c      	ldr	r3, [pc, #112]	; (8003640 <HAL_DMA_Init+0x16c>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d4:	f003 031c 	and.w	r3, r3, #28
 80035d8:	210f      	movs	r1, #15
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	4917      	ldr	r1, [pc, #92]	; (8003640 <HAL_DMA_Init+0x16c>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035e6:	4b16      	ldr	r3, [pc, #88]	; (8003640 <HAL_DMA_Init+0x16c>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	f003 031c 	and.w	r3, r3, #28
 80035f6:	fa01 f303 	lsl.w	r3, r1, r3
 80035fa:	4911      	ldr	r1, [pc, #68]	; (8003640 <HAL_DMA_Init+0x16c>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	40020407 	.word	0x40020407
 8003628:	bffdfff8 	.word	0xbffdfff8
 800362c:	cccccccd 	.word	0xcccccccd
 8003630:	40020000 	.word	0x40020000
 8003634:	bffdfbf8 	.word	0xbffdfbf8
 8003638:	40020400 	.word	0x40020400
 800363c:	400200a8 	.word	0x400200a8
 8003640:	400204a8 	.word	0x400204a8

08003644 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_DMA_Start_IT+0x20>
 8003660:	2302      	movs	r3, #2
 8003662:	e04b      	b.n	80036fc <HAL_DMA_Start_IT+0xb8>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d13a      	bne.n	80036ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f8e0 	bl	8003862 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 020e 	orr.w	r2, r2, #14
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e00f      	b.n	80036dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0204 	bic.w	r2, r2, #4
 80036ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 020a 	orr.w	r2, r2, #10
 80036da:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	e005      	b.n	80036fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
 80036f8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	f003 031c 	and.w	r3, r3, #28
 8003724:	2204      	movs	r2, #4
 8003726:	409a      	lsls	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4013      	ands	r3, r2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d026      	beq.n	800377e <HAL_DMA_IRQHandler+0x7a>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	d021      	beq.n	800377e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d107      	bne.n	8003758 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0204 	bic.w	r2, r2, #4
 8003756:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	f003 021c 	and.w	r2, r3, #28
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	2104      	movs	r1, #4
 8003766:	fa01 f202 	lsl.w	r2, r1, r2
 800376a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	2b00      	cmp	r3, #0
 8003772:	d071      	beq.n	8003858 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800377c:	e06c      	b.n	8003858 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	f003 031c 	and.w	r3, r3, #28
 8003786:	2202      	movs	r2, #2
 8003788:	409a      	lsls	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d02e      	beq.n	80037f0 <HAL_DMA_IRQHandler+0xec>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d029      	beq.n	80037f0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10b      	bne.n	80037c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 020a 	bic.w	r2, r2, #10
 80037b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f003 021c 	and.w	r2, r3, #28
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	2102      	movs	r1, #2
 80037d0:	fa01 f202 	lsl.w	r2, r1, r2
 80037d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d038      	beq.n	8003858 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037ee:	e033      	b.n	8003858 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f4:	f003 031c 	and.w	r3, r3, #28
 80037f8:	2208      	movs	r2, #8
 80037fa:	409a      	lsls	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d02a      	beq.n	800385a <HAL_DMA_IRQHandler+0x156>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d025      	beq.n	800385a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 020e 	bic.w	r2, r2, #14
 800381c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f003 021c 	and.w	r2, r3, #28
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	2101      	movs	r1, #1
 800382c:	fa01 f202 	lsl.w	r2, r1, r2
 8003830:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	2b00      	cmp	r3, #0
 800384e:	d004      	beq.n	800385a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003858:	bf00      	nop
 800385a:	bf00      	nop
}
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003874:	f003 021c 	and.w	r2, r3, #28
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	2101      	movs	r1, #1
 800387e:	fa01 f202 	lsl.w	r2, r1, r2
 8003882:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b10      	cmp	r3, #16
 8003892:	d108      	bne.n	80038a6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038a4:	e007      	b.n	80038b6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	60da      	str	r2, [r3, #12]
}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038d2:	e154      	b.n	8003b7e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	2101      	movs	r1, #1
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	fa01 f303 	lsl.w	r3, r1, r3
 80038e0:	4013      	ands	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8146 	beq.w	8003b78 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d005      	beq.n	8003904 <HAL_GPIO_Init+0x40>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d130      	bne.n	8003966 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	2203      	movs	r2, #3
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4013      	ands	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800393a:	2201      	movs	r2, #1
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43db      	mvns	r3, r3
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4013      	ands	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	f003 0201 	and.w	r2, r3, #1
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b03      	cmp	r3, #3
 8003970:	d017      	beq.n	80039a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	2203      	movs	r2, #3
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4013      	ands	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d123      	bne.n	80039f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	08da      	lsrs	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3208      	adds	r2, #8
 80039b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	220f      	movs	r2, #15
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4013      	ands	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	08da      	lsrs	r2, r3, #3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3208      	adds	r2, #8
 80039f0:	6939      	ldr	r1, [r7, #16]
 80039f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	2203      	movs	r2, #3
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0203 	and.w	r2, r3, #3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 80a0 	beq.w	8003b78 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a38:	4b58      	ldr	r3, [pc, #352]	; (8003b9c <HAL_GPIO_Init+0x2d8>)
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3c:	4a57      	ldr	r2, [pc, #348]	; (8003b9c <HAL_GPIO_Init+0x2d8>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6613      	str	r3, [r2, #96]	; 0x60
 8003a44:	4b55      	ldr	r3, [pc, #340]	; (8003b9c <HAL_GPIO_Init+0x2d8>)
 8003a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a50:	4a53      	ldr	r2, [pc, #332]	; (8003ba0 <HAL_GPIO_Init+0x2dc>)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	3302      	adds	r3, #2
 8003a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	220f      	movs	r2, #15
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a7a:	d019      	beq.n	8003ab0 <HAL_GPIO_Init+0x1ec>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a49      	ldr	r2, [pc, #292]	; (8003ba4 <HAL_GPIO_Init+0x2e0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d013      	beq.n	8003aac <HAL_GPIO_Init+0x1e8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a48      	ldr	r2, [pc, #288]	; (8003ba8 <HAL_GPIO_Init+0x2e4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00d      	beq.n	8003aa8 <HAL_GPIO_Init+0x1e4>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a47      	ldr	r2, [pc, #284]	; (8003bac <HAL_GPIO_Init+0x2e8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d007      	beq.n	8003aa4 <HAL_GPIO_Init+0x1e0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a46      	ldr	r2, [pc, #280]	; (8003bb0 <HAL_GPIO_Init+0x2ec>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d101      	bne.n	8003aa0 <HAL_GPIO_Init+0x1dc>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	e008      	b.n	8003ab2 <HAL_GPIO_Init+0x1ee>
 8003aa0:	2307      	movs	r3, #7
 8003aa2:	e006      	b.n	8003ab2 <HAL_GPIO_Init+0x1ee>
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e004      	b.n	8003ab2 <HAL_GPIO_Init+0x1ee>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e002      	b.n	8003ab2 <HAL_GPIO_Init+0x1ee>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <HAL_GPIO_Init+0x1ee>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	f002 0203 	and.w	r2, r2, #3
 8003ab8:	0092      	lsls	r2, r2, #2
 8003aba:	4093      	lsls	r3, r2
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ac2:	4937      	ldr	r1, [pc, #220]	; (8003ba0 <HAL_GPIO_Init+0x2dc>)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	3302      	adds	r3, #2
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ad0:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <HAL_GPIO_Init+0x2f0>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003af4:	4a2f      	ldr	r2, [pc, #188]	; (8003bb4 <HAL_GPIO_Init+0x2f0>)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003afa:	4b2e      	ldr	r3, [pc, #184]	; (8003bb4 <HAL_GPIO_Init+0x2f0>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	43db      	mvns	r3, r3
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4013      	ands	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b1e:	4a25      	ldr	r2, [pc, #148]	; (8003bb4 <HAL_GPIO_Init+0x2f0>)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b24:	4b23      	ldr	r3, [pc, #140]	; (8003bb4 <HAL_GPIO_Init+0x2f0>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4013      	ands	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b48:	4a1a      	ldr	r2, [pc, #104]	; (8003bb4 <HAL_GPIO_Init+0x2f0>)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b4e:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <HAL_GPIO_Init+0x2f0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b72:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <HAL_GPIO_Init+0x2f0>)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f47f aea3 	bne.w	80038d4 <HAL_GPIO_Init+0x10>
  }
}
 8003b8e:	bf00      	nop
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	48000400 	.word	0x48000400
 8003ba8:	48000800 	.word	0x48000800
 8003bac:	48000c00 	.word	0x48000c00
 8003bb0:	48001000 	.word	0x48001000
 8003bb4:	40010400 	.word	0x40010400

08003bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	807b      	strh	r3, [r7, #2]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bc8:	787b      	ldrb	r3, [r7, #1]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bce:	887a      	ldrh	r2, [r7, #2]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bd4:	e002      	b.n	8003bdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bec:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <HAL_PWREx_GetVoltageRange+0x18>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40007000 	.word	0x40007000

08003c04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c12:	d130      	bne.n	8003c76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c14:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c20:	d038      	beq.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c22:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c2a:	4a1e      	ldr	r2, [pc, #120]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c32:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2232      	movs	r2, #50	; 0x32
 8003c38:	fb02 f303 	mul.w	r3, r2, r3
 8003c3c:	4a1b      	ldr	r2, [pc, #108]	; (8003cac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	0c9b      	lsrs	r3, r3, #18
 8003c44:	3301      	adds	r3, #1
 8003c46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c48:	e002      	b.n	8003c50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c50:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5c:	d102      	bne.n	8003c64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f2      	bne.n	8003c4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c64:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c70:	d110      	bne.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e00f      	b.n	8003c96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c82:	d007      	beq.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c84:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c8c:	4a05      	ldr	r2, [pc, #20]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40007000 	.word	0x40007000
 8003ca8:	20000000 	.word	0x20000000
 8003cac:	431bde83 	.word	0x431bde83

08003cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e3fe      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc2:	4ba1      	ldr	r3, [pc, #644]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ccc:	4b9e      	ldr	r3, [pc, #632]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80e4 	beq.w	8003eac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_RCC_OscConfig+0x4a>
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b0c      	cmp	r3, #12
 8003cee:	f040 808b 	bne.w	8003e08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	f040 8087 	bne.w	8003e08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cfa:	4b93      	ldr	r3, [pc, #588]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <HAL_RCC_OscConfig+0x62>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e3d6      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1a      	ldr	r2, [r3, #32]
 8003d16:	4b8c      	ldr	r3, [pc, #560]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d004      	beq.n	8003d2c <HAL_RCC_OscConfig+0x7c>
 8003d22:	4b89      	ldr	r3, [pc, #548]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2a:	e005      	b.n	8003d38 <HAL_RCC_OscConfig+0x88>
 8003d2c:	4b86      	ldr	r3, [pc, #536]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d32:	091b      	lsrs	r3, r3, #4
 8003d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d223      	bcs.n	8003d84 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fd53 	bl	80047ec <RCC_SetFlashLatencyFromMSIRange>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e3b7      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d50:	4b7d      	ldr	r3, [pc, #500]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7c      	ldr	r2, [pc, #496]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d56:	f043 0308 	orr.w	r3, r3, #8
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	4b7a      	ldr	r3, [pc, #488]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	4977      	ldr	r1, [pc, #476]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d6e:	4b76      	ldr	r3, [pc, #472]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	4972      	ldr	r1, [pc, #456]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]
 8003d82:	e025      	b.n	8003dd0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d84:	4b70      	ldr	r3, [pc, #448]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a6f      	ldr	r2, [pc, #444]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d8a:	f043 0308 	orr.w	r3, r3, #8
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	4b6d      	ldr	r3, [pc, #436]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	496a      	ldr	r1, [pc, #424]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003da2:	4b69      	ldr	r3, [pc, #420]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	4965      	ldr	r1, [pc, #404]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d109      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fd13 	bl	80047ec <RCC_SetFlashLatencyFromMSIRange>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e377      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dd0:	f000 fc80 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b5c      	ldr	r3, [pc, #368]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	495a      	ldr	r1, [pc, #360]	; (8003f4c <HAL_RCC_OscConfig+0x29c>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dec:	4a58      	ldr	r2, [pc, #352]	; (8003f50 <HAL_RCC_OscConfig+0x2a0>)
 8003dee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003df0:	4b58      	ldr	r3, [pc, #352]	; (8003f54 <HAL_RCC_OscConfig+0x2a4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fd fe93 	bl	8001b20 <HAL_InitTick>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d052      	beq.n	8003eaa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	e35b      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d032      	beq.n	8003e76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e10:	4b4d      	ldr	r3, [pc, #308]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a4c      	ldr	r2, [pc, #304]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e1c:	f7fd fed0 	bl	8001bc0 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e24:	f7fd fecc 	bl	8001bc0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e344      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e36:	4b44      	ldr	r3, [pc, #272]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e42:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a40      	ldr	r2, [pc, #256]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003e48:	f043 0308 	orr.w	r3, r3, #8
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	493b      	ldr	r1, [pc, #236]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e60:	4b39      	ldr	r3, [pc, #228]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	4936      	ldr	r1, [pc, #216]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	604b      	str	r3, [r1, #4]
 8003e74:	e01a      	b.n	8003eac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e76:	4b34      	ldr	r3, [pc, #208]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a33      	ldr	r2, [pc, #204]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e82:	f7fd fe9d 	bl	8001bc0 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e8a:	f7fd fe99 	bl	8001bc0 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e311      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e9c:	4b2a      	ldr	r3, [pc, #168]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <HAL_RCC_OscConfig+0x1da>
 8003ea8:	e000      	b.n	8003eac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003eaa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d074      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d005      	beq.n	8003eca <HAL_RCC_OscConfig+0x21a>
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b0c      	cmp	r3, #12
 8003ec2:	d10e      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d10b      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eca:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d064      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x2f0>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d160      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e2ee      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eea:	d106      	bne.n	8003efa <HAL_RCC_OscConfig+0x24a>
 8003eec:	4b16      	ldr	r3, [pc, #88]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a15      	ldr	r2, [pc, #84]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	e01d      	b.n	8003f36 <HAL_RCC_OscConfig+0x286>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f02:	d10c      	bne.n	8003f1e <HAL_RCC_OscConfig+0x26e>
 8003f04:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a0f      	ldr	r2, [pc, #60]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0c      	ldr	r2, [pc, #48]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	e00b      	b.n	8003f36 <HAL_RCC_OscConfig+0x286>
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a06      	ldr	r2, [pc, #24]	; (8003f48 <HAL_RCC_OscConfig+0x298>)
 8003f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01c      	beq.n	8003f78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3e:	f7fd fe3f 	bl	8001bc0 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f44:	e011      	b.n	8003f6a <HAL_RCC_OscConfig+0x2ba>
 8003f46:	bf00      	nop
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	08009950 	.word	0x08009950
 8003f50:	20000000 	.word	0x20000000
 8003f54:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f58:	f7fd fe32 	bl	8001bc0 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e2aa      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6a:	4baf      	ldr	r3, [pc, #700]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x2a8>
 8003f76:	e014      	b.n	8003fa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fd fe22 	bl	8001bc0 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f80:	f7fd fe1e 	bl	8001bc0 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	; 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e296      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f92:	4ba5      	ldr	r3, [pc, #660]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x2d0>
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d060      	beq.n	8004070 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x310>
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b0c      	cmp	r3, #12
 8003fb8:	d119      	bne.n	8003fee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d116      	bne.n	8003fee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fc0:	4b99      	ldr	r3, [pc, #612]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x328>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e273      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd8:	4b93      	ldr	r3, [pc, #588]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	061b      	lsls	r3, r3, #24
 8003fe6:	4990      	ldr	r1, [pc, #576]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fec:	e040      	b.n	8004070 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d023      	beq.n	800403e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff6:	4b8c      	ldr	r3, [pc, #560]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a8b      	ldr	r2, [pc, #556]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8003ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004002:	f7fd fddd 	bl	8001bc0 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800400a:	f7fd fdd9 	bl	8001bc0 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e251      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800401c:	4b82      	ldr	r3, [pc, #520]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004028:	4b7f      	ldr	r3, [pc, #508]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	061b      	lsls	r3, r3, #24
 8004036:	497c      	ldr	r1, [pc, #496]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8004038:	4313      	orrs	r3, r2
 800403a:	604b      	str	r3, [r1, #4]
 800403c:	e018      	b.n	8004070 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800403e:	4b7a      	ldr	r3, [pc, #488]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a79      	ldr	r2, [pc, #484]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8004044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404a:	f7fd fdb9 	bl	8001bc0 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004052:	f7fd fdb5 	bl	8001bc0 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e22d      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004064:	4b70      	ldr	r3, [pc, #448]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1f0      	bne.n	8004052 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d03c      	beq.n	80040f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01c      	beq.n	80040be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004084:	4b68      	ldr	r3, [pc, #416]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8004086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800408a:	4a67      	ldr	r2, [pc, #412]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fd fd94 	bl	8001bc0 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409c:	f7fd fd90 	bl	8001bc0 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e208      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040ae:	4b5e      	ldr	r3, [pc, #376]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 80040b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0ef      	beq.n	800409c <HAL_RCC_OscConfig+0x3ec>
 80040bc:	e01b      	b.n	80040f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040be:	4b5a      	ldr	r3, [pc, #360]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 80040c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c4:	4a58      	ldr	r2, [pc, #352]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ce:	f7fd fd77 	bl	8001bc0 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d6:	f7fd fd73 	bl	8001bc0 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e1eb      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040e8:	4b4f      	ldr	r3, [pc, #316]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1ef      	bne.n	80040d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80a6 	beq.w	8004250 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004104:	2300      	movs	r3, #0
 8004106:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004108:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10d      	bne.n	8004130 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004114:	4b44      	ldr	r3, [pc, #272]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	4a43      	ldr	r2, [pc, #268]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 800411a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411e:	6593      	str	r3, [r2, #88]	; 0x58
 8004120:	4b41      	ldr	r3, [pc, #260]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412c:	2301      	movs	r3, #1
 800412e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004130:	4b3e      	ldr	r3, [pc, #248]	; (800422c <HAL_RCC_OscConfig+0x57c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d118      	bne.n	800416e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800413c:	4b3b      	ldr	r3, [pc, #236]	; (800422c <HAL_RCC_OscConfig+0x57c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a3a      	ldr	r2, [pc, #232]	; (800422c <HAL_RCC_OscConfig+0x57c>)
 8004142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004146:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004148:	f7fd fd3a 	bl	8001bc0 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004150:	f7fd fd36 	bl	8001bc0 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e1ae      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004162:	4b32      	ldr	r3, [pc, #200]	; (800422c <HAL_RCC_OscConfig+0x57c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d108      	bne.n	8004188 <HAL_RCC_OscConfig+0x4d8>
 8004176:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	4a2a      	ldr	r2, [pc, #168]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004186:	e024      	b.n	80041d2 <HAL_RCC_OscConfig+0x522>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	2b05      	cmp	r3, #5
 800418e:	d110      	bne.n	80041b2 <HAL_RCC_OscConfig+0x502>
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004196:	4a24      	ldr	r2, [pc, #144]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 8004198:	f043 0304 	orr.w	r3, r3, #4
 800419c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041a0:	4b21      	ldr	r3, [pc, #132]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	4a20      	ldr	r2, [pc, #128]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041b0:	e00f      	b.n	80041d2 <HAL_RCC_OscConfig+0x522>
 80041b2:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 80041b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b8:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 80041ba:	f023 0301 	bic.w	r3, r3, #1
 80041be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c2:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 80041c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c8:	4a17      	ldr	r2, [pc, #92]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 80041ca:	f023 0304 	bic.w	r3, r3, #4
 80041ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041da:	f7fd fcf1 	bl	8001bc0 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e0:	e00a      	b.n	80041f8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e2:	f7fd fced 	bl	8001bc0 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e163      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCC_OscConfig+0x578>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0ed      	beq.n	80041e2 <HAL_RCC_OscConfig+0x532>
 8004206:	e01a      	b.n	800423e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004208:	f7fd fcda 	bl	8001bc0 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800420e:	e00f      	b.n	8004230 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004210:	f7fd fcd6 	bl	8001bc0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d906      	bls.n	8004230 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e14c      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
 8004226:	bf00      	nop
 8004228:	40021000 	.word	0x40021000
 800422c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004230:	4ba5      	ldr	r3, [pc, #660]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e8      	bne.n	8004210 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800423e:	7ffb      	ldrb	r3, [r7, #31]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004244:	4ba0      	ldr	r3, [pc, #640]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	4a9f      	ldr	r2, [pc, #636]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 800424a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d03c      	beq.n	80042d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01c      	beq.n	800429e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004264:	4b98      	ldr	r3, [pc, #608]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 8004266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800426a:	4a97      	ldr	r2, [pc, #604]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fd fca4 	bl	8001bc0 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800427c:	f7fd fca0 	bl	8001bc0 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e118      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800428e:	4b8e      	ldr	r3, [pc, #568]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 8004290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ef      	beq.n	800427c <HAL_RCC_OscConfig+0x5cc>
 800429c:	e01b      	b.n	80042d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800429e:	4b8a      	ldr	r3, [pc, #552]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 80042a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a4:	4a88      	ldr	r2, [pc, #544]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ae:	f7fd fc87 	bl	8001bc0 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042b6:	f7fd fc83 	bl	8001bc0 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e0fb      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042c8:	4b7f      	ldr	r3, [pc, #508]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 80042ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1ef      	bne.n	80042b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80ef 	beq.w	80044be <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	f040 80c5 	bne.w	8004474 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042ea:	4b77      	ldr	r3, [pc, #476]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f003 0203 	and.w	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d12c      	bne.n	8004358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	3b01      	subs	r3, #1
 800430a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800430c:	429a      	cmp	r2, r3
 800430e:	d123      	bne.n	8004358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d11b      	bne.n	8004358 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d113      	bne.n	8004358 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433a:	085b      	lsrs	r3, r3, #1
 800433c:	3b01      	subs	r3, #1
 800433e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004340:	429a      	cmp	r2, r3
 8004342:	d109      	bne.n	8004358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	3b01      	subs	r3, #1
 8004352:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d067      	beq.n	8004428 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d062      	beq.n	8004424 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800435e:	4b5a      	ldr	r3, [pc, #360]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e0a8      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800436e:	4b56      	ldr	r3, [pc, #344]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a55      	ldr	r2, [pc, #340]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 8004374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004378:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800437a:	f7fd fc21 	bl	8001bc0 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004382:	f7fd fc1d 	bl	8001bc0 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e095      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004394:	4b4c      	ldr	r3, [pc, #304]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f0      	bne.n	8004382 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043a0:	4b49      	ldr	r3, [pc, #292]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	4b49      	ldr	r3, [pc, #292]	; (80044cc <HAL_RCC_OscConfig+0x81c>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043b0:	3a01      	subs	r2, #1
 80043b2:	0112      	lsls	r2, r2, #4
 80043b4:	4311      	orrs	r1, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043ba:	0212      	lsls	r2, r2, #8
 80043bc:	4311      	orrs	r1, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043c2:	0852      	lsrs	r2, r2, #1
 80043c4:	3a01      	subs	r2, #1
 80043c6:	0552      	lsls	r2, r2, #21
 80043c8:	4311      	orrs	r1, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043ce:	0852      	lsrs	r2, r2, #1
 80043d0:	3a01      	subs	r2, #1
 80043d2:	0652      	lsls	r2, r2, #25
 80043d4:	4311      	orrs	r1, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043da:	06d2      	lsls	r2, r2, #27
 80043dc:	430a      	orrs	r2, r1
 80043de:	493a      	ldr	r1, [pc, #232]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043e4:	4b38      	ldr	r3, [pc, #224]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a37      	ldr	r2, [pc, #220]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 80043ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043f0:	4b35      	ldr	r3, [pc, #212]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4a34      	ldr	r2, [pc, #208]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043fc:	f7fd fbe0 	bl	8001bc0 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004404:	f7fd fbdc 	bl	8001bc0 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e054      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004416:	4b2c      	ldr	r3, [pc, #176]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004422:	e04c      	b.n	80044be <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e04b      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004428:	4b27      	ldr	r3, [pc, #156]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d144      	bne.n	80044be <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004434:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 800443a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800443e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004440:	4b21      	ldr	r3, [pc, #132]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 8004446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800444a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800444c:	f7fd fbb8 	bl	8001bc0 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004454:	f7fd fbb4 	bl	8001bc0 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e02c      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004466:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0x7a4>
 8004472:	e024      	b.n	80044be <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d01f      	beq.n	80044ba <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447a:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 8004480:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004486:	f7fd fb9b 	bl	8001bc0 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448e:	f7fd fb97 	bl	8001bc0 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e00f      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044a0:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f0      	bne.n	800448e <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	4905      	ldr	r1, [pc, #20]	; (80044c8 <HAL_RCC_OscConfig+0x818>)
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <HAL_RCC_OscConfig+0x820>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	60cb      	str	r3, [r1, #12]
 80044b8:	e001      	b.n	80044be <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3720      	adds	r7, #32
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40021000 	.word	0x40021000
 80044cc:	019d808c 	.word	0x019d808c
 80044d0:	feeefffc 	.word	0xfeeefffc

080044d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0e7      	b.n	80046b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044e8:	4b75      	ldr	r3, [pc, #468]	; (80046c0 <HAL_RCC_ClockConfig+0x1ec>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d910      	bls.n	8004518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b72      	ldr	r3, [pc, #456]	; (80046c0 <HAL_RCC_ClockConfig+0x1ec>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 0207 	bic.w	r2, r3, #7
 80044fe:	4970      	ldr	r1, [pc, #448]	; (80046c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b6e      	ldr	r3, [pc, #440]	; (80046c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0cf      	b.n	80046b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d010      	beq.n	8004546 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	4b66      	ldr	r3, [pc, #408]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004530:	429a      	cmp	r2, r3
 8004532:	d908      	bls.n	8004546 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004534:	4b63      	ldr	r3, [pc, #396]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4960      	ldr	r1, [pc, #384]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d04c      	beq.n	80045ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455a:	4b5a      	ldr	r3, [pc, #360]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d121      	bne.n	80045aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e0a6      	b.n	80046b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d107      	bne.n	8004582 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004572:	4b54      	ldr	r3, [pc, #336]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d115      	bne.n	80045aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e09a      	b.n	80046b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d107      	bne.n	800459a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800458a:	4b4e      	ldr	r3, [pc, #312]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d109      	bne.n	80045aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e08e      	b.n	80046b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800459a:	4b4a      	ldr	r3, [pc, #296]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e086      	b.n	80046b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045aa:	4b46      	ldr	r3, [pc, #280]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f023 0203 	bic.w	r2, r3, #3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	4943      	ldr	r1, [pc, #268]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045bc:	f7fd fb00 	bl	8001bc0 <HAL_GetTick>
 80045c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c2:	e00a      	b.n	80045da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c4:	f7fd fafc 	bl	8001bc0 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e06e      	b.n	80046b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045da:	4b3a      	ldr	r3, [pc, #232]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 020c 	and.w	r2, r3, #12
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d1eb      	bne.n	80045c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d010      	beq.n	800461a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	4b31      	ldr	r3, [pc, #196]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004604:	429a      	cmp	r2, r3
 8004606:	d208      	bcs.n	800461a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004608:	4b2e      	ldr	r3, [pc, #184]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	492b      	ldr	r1, [pc, #172]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800461a:	4b29      	ldr	r3, [pc, #164]	; (80046c0 <HAL_RCC_ClockConfig+0x1ec>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d210      	bcs.n	800464a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004628:	4b25      	ldr	r3, [pc, #148]	; (80046c0 <HAL_RCC_ClockConfig+0x1ec>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f023 0207 	bic.w	r2, r3, #7
 8004630:	4923      	ldr	r1, [pc, #140]	; (80046c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	4313      	orrs	r3, r2
 8004636:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004638:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <HAL_RCC_ClockConfig+0x1ec>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d001      	beq.n	800464a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e036      	b.n	80046b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d008      	beq.n	8004668 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004656:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	4918      	ldr	r1, [pc, #96]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004664:	4313      	orrs	r3, r2
 8004666:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004674:	4b13      	ldr	r3, [pc, #76]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	4910      	ldr	r1, [pc, #64]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004684:	4313      	orrs	r3, r2
 8004686:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004688:	f000 f824 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 800468c:	4602      	mov	r2, r0
 800468e:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	091b      	lsrs	r3, r3, #4
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	490b      	ldr	r1, [pc, #44]	; (80046c8 <HAL_RCC_ClockConfig+0x1f4>)
 800469a:	5ccb      	ldrb	r3, [r1, r3]
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
 80046a4:	4a09      	ldr	r2, [pc, #36]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 80046a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <HAL_RCC_ClockConfig+0x1fc>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fd fa37 	bl	8001b20 <HAL_InitTick>
 80046b2:	4603      	mov	r3, r0
 80046b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80046b6:	7afb      	ldrb	r3, [r7, #11]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40022000 	.word	0x40022000
 80046c4:	40021000 	.word	0x40021000
 80046c8:	08009950 	.word	0x08009950
 80046cc:	20000000 	.word	0x20000000
 80046d0:	20000004 	.word	0x20000004

080046d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b089      	sub	sp, #36	; 0x24
 80046d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	2300      	movs	r3, #0
 80046e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046e2:	4b3e      	ldr	r3, [pc, #248]	; (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046ec:	4b3b      	ldr	r3, [pc, #236]	; (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x34>
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	2b0c      	cmp	r3, #12
 8004700:	d121      	bne.n	8004746 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d11e      	bne.n	8004746 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004708:	4b34      	ldr	r3, [pc, #208]	; (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d107      	bne.n	8004724 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004714:	4b31      	ldr	r3, [pc, #196]	; (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800471a:	0a1b      	lsrs	r3, r3, #8
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	e005      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004724:	4b2d      	ldr	r3, [pc, #180]	; (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	091b      	lsrs	r3, r3, #4
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004730:	4a2b      	ldr	r2, [pc, #172]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004738:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10d      	bne.n	800475c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004744:	e00a      	b.n	800475c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	2b04      	cmp	r3, #4
 800474a:	d102      	bne.n	8004752 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800474c:	4b25      	ldr	r3, [pc, #148]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800474e:	61bb      	str	r3, [r7, #24]
 8004750:	e004      	b.n	800475c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b08      	cmp	r3, #8
 8004756:	d101      	bne.n	800475c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004758:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800475a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b0c      	cmp	r3, #12
 8004760:	d134      	bne.n	80047cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004762:	4b1e      	ldr	r3, [pc, #120]	; (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d003      	beq.n	800477a <HAL_RCC_GetSysClockFreq+0xa6>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b03      	cmp	r3, #3
 8004776:	d003      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0xac>
 8004778:	e005      	b.n	8004786 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800477a:	4b1a      	ldr	r3, [pc, #104]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800477c:	617b      	str	r3, [r7, #20]
      break;
 800477e:	e005      	b.n	800478c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004780:	4b19      	ldr	r3, [pc, #100]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004782:	617b      	str	r3, [r7, #20]
      break;
 8004784:	e002      	b.n	800478c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	617b      	str	r3, [r7, #20]
      break;
 800478a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800478c:	4b13      	ldr	r3, [pc, #76]	; (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	3301      	adds	r3, #1
 8004798:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	fb02 f203 	mul.w	r2, r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047b2:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <HAL_RCC_GetSysClockFreq+0x108>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	0e5b      	lsrs	r3, r3, #25
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	3301      	adds	r3, #1
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047cc:	69bb      	ldr	r3, [r7, #24]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3724      	adds	r7, #36	; 0x24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40021000 	.word	0x40021000
 80047e0:	08009960 	.word	0x08009960
 80047e4:	00f42400 	.word	0x00f42400
 80047e8:	016e3600 	.word	0x016e3600

080047ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047f4:	2300      	movs	r3, #0
 80047f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047f8:	4b2a      	ldr	r3, [pc, #168]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004804:	f7ff f9f0 	bl	8003be8 <HAL_PWREx_GetVoltageRange>
 8004808:	6178      	str	r0, [r7, #20]
 800480a:	e014      	b.n	8004836 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800480c:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	4a24      	ldr	r2, [pc, #144]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004816:	6593      	str	r3, [r2, #88]	; 0x58
 8004818:	4b22      	ldr	r3, [pc, #136]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800481a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004824:	f7ff f9e0 	bl	8003be8 <HAL_PWREx_GetVoltageRange>
 8004828:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800482a:	4b1e      	ldr	r3, [pc, #120]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004834:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483c:	d10b      	bne.n	8004856 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b80      	cmp	r3, #128	; 0x80
 8004842:	d919      	bls.n	8004878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2ba0      	cmp	r3, #160	; 0xa0
 8004848:	d902      	bls.n	8004850 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800484a:	2302      	movs	r3, #2
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	e013      	b.n	8004878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004850:	2301      	movs	r3, #1
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	e010      	b.n	8004878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b80      	cmp	r3, #128	; 0x80
 800485a:	d902      	bls.n	8004862 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800485c:	2303      	movs	r3, #3
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	e00a      	b.n	8004878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b80      	cmp	r3, #128	; 0x80
 8004866:	d102      	bne.n	800486e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004868:	2302      	movs	r3, #2
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	e004      	b.n	8004878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b70      	cmp	r3, #112	; 0x70
 8004872:	d101      	bne.n	8004878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004874:	2301      	movs	r3, #1
 8004876:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f023 0207 	bic.w	r2, r3, #7
 8004880:	4909      	ldr	r1, [pc, #36]	; (80048a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004888:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	429a      	cmp	r2, r3
 8004894:	d001      	beq.n	800489a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40022000 	.word	0x40022000

080048ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048b4:	2300      	movs	r3, #0
 80048b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048b8:	2300      	movs	r3, #0
 80048ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d031      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048d0:	d01a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80048d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048d6:	d814      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d009      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80048dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048e0:	d10f      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80048e2:	4b5d      	ldr	r3, [pc, #372]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	4a5c      	ldr	r2, [pc, #368]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048ee:	e00c      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3304      	adds	r3, #4
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f9f0 	bl	8004cdc <RCCEx_PLLSAI1_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004900:	e003      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	74fb      	strb	r3, [r7, #19]
      break;
 8004906:	e000      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800490a:	7cfb      	ldrb	r3, [r7, #19]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004910:	4b51      	ldr	r3, [pc, #324]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491e:	494e      	ldr	r1, [pc, #312]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004926:	e001      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004928:	7cfb      	ldrb	r3, [r7, #19]
 800492a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 809e 	beq.w	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800493a:	2300      	movs	r3, #0
 800493c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800493e:	4b46      	ldr	r3, [pc, #280]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800494e:	2300      	movs	r3, #0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004954:	4b40      	ldr	r3, [pc, #256]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004958:	4a3f      	ldr	r2, [pc, #252]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800495a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495e:	6593      	str	r3, [r2, #88]	; 0x58
 8004960:	4b3d      	ldr	r3, [pc, #244]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496c:	2301      	movs	r3, #1
 800496e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004970:	4b3a      	ldr	r3, [pc, #232]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a39      	ldr	r2, [pc, #228]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800497c:	f7fd f920 	bl	8001bc0 <HAL_GetTick>
 8004980:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004982:	e009      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004984:	f7fd f91c 	bl	8001bc0 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d902      	bls.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	74fb      	strb	r3, [r7, #19]
        break;
 8004996:	e005      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004998:	4b30      	ldr	r3, [pc, #192]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0ef      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80049a4:	7cfb      	ldrb	r3, [r7, #19]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d15a      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049aa:	4b2b      	ldr	r3, [pc, #172]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01e      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d019      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049c6:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049d2:	4b21      	ldr	r3, [pc, #132]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	4a1f      	ldr	r2, [pc, #124]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049e2:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e8:	4a1b      	ldr	r2, [pc, #108]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049f2:	4a19      	ldr	r2, [pc, #100]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d016      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fd f8dc 	bl	8001bc0 <HAL_GetTick>
 8004a08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0c:	f7fd f8d8 	bl	8001bc0 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d902      	bls.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	74fb      	strb	r3, [r7, #19]
            break;
 8004a22:	e006      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0ec      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004a32:	7cfb      	ldrb	r3, [r7, #19]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10b      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a38:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a46:	4904      	ldr	r1, [pc, #16]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a4e:	e009      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a50:	7cfb      	ldrb	r3, [r7, #19]
 8004a52:	74bb      	strb	r3, [r7, #18]
 8004a54:	e006      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004a56:	bf00      	nop
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a64:	7c7b      	ldrb	r3, [r7, #17]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d105      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a6a:	4b9b      	ldr	r3, [pc, #620]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6e:	4a9a      	ldr	r2, [pc, #616]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a82:	4b95      	ldr	r3, [pc, #596]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a88:	f023 0203 	bic.w	r2, r3, #3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	4991      	ldr	r1, [pc, #580]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aa4:	4b8c      	ldr	r3, [pc, #560]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f023 020c 	bic.w	r2, r3, #12
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	4989      	ldr	r1, [pc, #548]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ac6:	4b84      	ldr	r3, [pc, #528]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	4980      	ldr	r1, [pc, #512]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ae8:	4b7b      	ldr	r3, [pc, #492]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	4978      	ldr	r1, [pc, #480]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b0a:	4b73      	ldr	r3, [pc, #460]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b18:	496f      	ldr	r1, [pc, #444]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b2c:	4b6a      	ldr	r3, [pc, #424]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	4967      	ldr	r1, [pc, #412]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b4e:	4b62      	ldr	r3, [pc, #392]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	495e      	ldr	r1, [pc, #376]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b70:	4b59      	ldr	r3, [pc, #356]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7e:	4956      	ldr	r1, [pc, #344]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b92:	4b51      	ldr	r3, [pc, #324]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	494d      	ldr	r1, [pc, #308]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d028      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bb4:	4b48      	ldr	r3, [pc, #288]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc2:	4945      	ldr	r1, [pc, #276]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd2:	d106      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd4:	4b40      	ldr	r3, [pc, #256]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4a3f      	ldr	r2, [pc, #252]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bde:	60d3      	str	r3, [r2, #12]
 8004be0:	e011      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bea:	d10c      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 f872 	bl	8004cdc <RCCEx_PLLSAI1_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bfc:	7cfb      	ldrb	r3, [r7, #19]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004c02:	7cfb      	ldrb	r3, [r7, #19]
 8004c04:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d028      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c12:	4b31      	ldr	r3, [pc, #196]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c20:	492d      	ldr	r1, [pc, #180]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c30:	d106      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c32:	4b29      	ldr	r3, [pc, #164]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c3c:	60d3      	str	r3, [r2, #12]
 8004c3e:	e011      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c48:	d10c      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	2101      	movs	r1, #1
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 f843 	bl	8004cdc <RCCEx_PLLSAI1_Config>
 8004c56:	4603      	mov	r3, r0
 8004c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c5a:	7cfb      	ldrb	r3, [r7, #19]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004c60:	7cfb      	ldrb	r3, [r7, #19]
 8004c62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01c      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c70:	4b19      	ldr	r3, [pc, #100]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7e:	4916      	ldr	r1, [pc, #88]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c8e:	d10c      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	2102      	movs	r1, #2
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f820 	bl	8004cdc <RCCEx_PLLSAI1_Config>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ca0:	7cfb      	ldrb	r3, [r7, #19]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004ca6:	7cfb      	ldrb	r3, [r7, #19]
 8004ca8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cb6:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc4:	4904      	ldr	r1, [pc, #16]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ccc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40021000 	.word	0x40021000

08004cdc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cea:	4b74      	ldr	r3, [pc, #464]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d018      	beq.n	8004d28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cf6:	4b71      	ldr	r3, [pc, #452]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0203 	and.w	r2, r3, #3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d10d      	bne.n	8004d22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
       ||
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d009      	beq.n	8004d22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d0e:	4b6b      	ldr	r3, [pc, #428]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	091b      	lsrs	r3, r3, #4
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d047      	beq.n	8004db2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	73fb      	strb	r3, [r7, #15]
 8004d26:	e044      	b.n	8004db2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d018      	beq.n	8004d62 <RCCEx_PLLSAI1_Config+0x86>
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d825      	bhi.n	8004d80 <RCCEx_PLLSAI1_Config+0xa4>
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d002      	beq.n	8004d3e <RCCEx_PLLSAI1_Config+0x62>
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d009      	beq.n	8004d50 <RCCEx_PLLSAI1_Config+0x74>
 8004d3c:	e020      	b.n	8004d80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d3e:	4b5f      	ldr	r3, [pc, #380]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d11d      	bne.n	8004d86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d4e:	e01a      	b.n	8004d86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d50:	4b5a      	ldr	r3, [pc, #360]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d116      	bne.n	8004d8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d60:	e013      	b.n	8004d8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d62:	4b56      	ldr	r3, [pc, #344]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10f      	bne.n	8004d8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d6e:	4b53      	ldr	r3, [pc, #332]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d7e:	e006      	b.n	8004d8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	73fb      	strb	r3, [r7, #15]
      break;
 8004d84:	e004      	b.n	8004d90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d86:	bf00      	nop
 8004d88:	e002      	b.n	8004d90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d8a:	bf00      	nop
 8004d8c:	e000      	b.n	8004d90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10d      	bne.n	8004db2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d96:	4b49      	ldr	r3, [pc, #292]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6819      	ldr	r1, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	430b      	orrs	r3, r1
 8004dac:	4943      	ldr	r1, [pc, #268]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d17c      	bne.n	8004eb2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004db8:	4b40      	ldr	r3, [pc, #256]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a3f      	ldr	r2, [pc, #252]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc4:	f7fc fefc 	bl	8001bc0 <HAL_GetTick>
 8004dc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dca:	e009      	b.n	8004de0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dcc:	f7fc fef8 	bl	8001bc0 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d902      	bls.n	8004de0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	73fb      	strb	r3, [r7, #15]
        break;
 8004dde:	e005      	b.n	8004dec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004de0:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1ef      	bne.n	8004dcc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d15f      	bne.n	8004eb2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d110      	bne.n	8004e1a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004df8:	4b30      	ldr	r3, [pc, #192]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004e00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6892      	ldr	r2, [r2, #8]
 8004e08:	0211      	lsls	r1, r2, #8
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	68d2      	ldr	r2, [r2, #12]
 8004e0e:	06d2      	lsls	r2, r2, #27
 8004e10:	430a      	orrs	r2, r1
 8004e12:	492a      	ldr	r1, [pc, #168]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	610b      	str	r3, [r1, #16]
 8004e18:	e027      	b.n	8004e6a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d112      	bne.n	8004e46 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e20:	4b26      	ldr	r3, [pc, #152]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6892      	ldr	r2, [r2, #8]
 8004e30:	0211      	lsls	r1, r2, #8
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6912      	ldr	r2, [r2, #16]
 8004e36:	0852      	lsrs	r2, r2, #1
 8004e38:	3a01      	subs	r2, #1
 8004e3a:	0552      	lsls	r2, r2, #21
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	491f      	ldr	r1, [pc, #124]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	610b      	str	r3, [r1, #16]
 8004e44:	e011      	b.n	8004e6a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e46:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6892      	ldr	r2, [r2, #8]
 8004e56:	0211      	lsls	r1, r2, #8
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6952      	ldr	r2, [r2, #20]
 8004e5c:	0852      	lsrs	r2, r2, #1
 8004e5e:	3a01      	subs	r2, #1
 8004e60:	0652      	lsls	r2, r2, #25
 8004e62:	430a      	orrs	r2, r1
 8004e64:	4915      	ldr	r1, [pc, #84]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e6a:	4b14      	ldr	r3, [pc, #80]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a13      	ldr	r2, [pc, #76]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e76:	f7fc fea3 	bl	8001bc0 <HAL_GetTick>
 8004e7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e7c:	e009      	b.n	8004e92 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e7e:	f7fc fe9f 	bl	8001bc0 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d902      	bls.n	8004e92 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	73fb      	strb	r3, [r7, #15]
          break;
 8004e90:	e005      	b.n	8004e9e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e92:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0ef      	beq.n	8004e7e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d106      	bne.n	8004eb2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	4903      	ldr	r1, [pc, #12]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40021000 	.word	0x40021000

08004ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e049      	b.n	8004f66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fc fc7a 	bl	80017e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3304      	adds	r3, #4
 8004efc:	4619      	mov	r1, r3
 8004efe:	4610      	mov	r0, r2
 8004f00:	f000 f960 	bl	80051c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d001      	beq.n	8004f88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e033      	b.n	8004ff0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a19      	ldr	r2, [pc, #100]	; (8004ffc <HAL_TIM_Base_Start+0x8c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d009      	beq.n	8004fae <HAL_TIM_Base_Start+0x3e>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa2:	d004      	beq.n	8004fae <HAL_TIM_Base_Start+0x3e>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a15      	ldr	r2, [pc, #84]	; (8005000 <HAL_TIM_Base_Start+0x90>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d115      	bne.n	8004fda <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	4b13      	ldr	r3, [pc, #76]	; (8005004 <HAL_TIM_Base_Start+0x94>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b06      	cmp	r3, #6
 8004fbe:	d015      	beq.n	8004fec <HAL_TIM_Base_Start+0x7c>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc6:	d011      	beq.n	8004fec <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd8:	e008      	b.n	8004fec <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0201 	orr.w	r2, r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e000      	b.n	8004fee <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40014000 	.word	0x40014000
 8005004:	00010007 	.word	0x00010007

08005008 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <HAL_TIM_OC_Start+0x24>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b01      	cmp	r3, #1
 8005022:	bf14      	ite	ne
 8005024:	2301      	movne	r3, #1
 8005026:	2300      	moveq	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	e03c      	b.n	80050a6 <HAL_TIM_OC_Start+0x9e>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b04      	cmp	r3, #4
 8005030:	d109      	bne.n	8005046 <HAL_TIM_OC_Start+0x3e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b01      	cmp	r3, #1
 800503c:	bf14      	ite	ne
 800503e:	2301      	movne	r3, #1
 8005040:	2300      	moveq	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	e02f      	b.n	80050a6 <HAL_TIM_OC_Start+0x9e>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b08      	cmp	r3, #8
 800504a:	d109      	bne.n	8005060 <HAL_TIM_OC_Start+0x58>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	e022      	b.n	80050a6 <HAL_TIM_OC_Start+0x9e>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b0c      	cmp	r3, #12
 8005064:	d109      	bne.n	800507a <HAL_TIM_OC_Start+0x72>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b01      	cmp	r3, #1
 8005070:	bf14      	ite	ne
 8005072:	2301      	movne	r3, #1
 8005074:	2300      	moveq	r3, #0
 8005076:	b2db      	uxtb	r3, r3
 8005078:	e015      	b.n	80050a6 <HAL_TIM_OC_Start+0x9e>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b10      	cmp	r3, #16
 800507e:	d109      	bne.n	8005094 <HAL_TIM_OC_Start+0x8c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	bf14      	ite	ne
 800508c:	2301      	movne	r3, #1
 800508e:	2300      	moveq	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e008      	b.n	80050a6 <HAL_TIM_OC_Start+0x9e>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b01      	cmp	r3, #1
 800509e:	bf14      	ite	ne
 80050a0:	2301      	movne	r3, #1
 80050a2:	2300      	moveq	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e07e      	b.n	80051ac <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <HAL_TIM_OC_Start+0xb6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050bc:	e023      	b.n	8005106 <HAL_TIM_OC_Start+0xfe>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_OC_Start+0xc6>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050cc:	e01b      	b.n	8005106 <HAL_TIM_OC_Start+0xfe>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d104      	bne.n	80050de <HAL_TIM_OC_Start+0xd6>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050dc:	e013      	b.n	8005106 <HAL_TIM_OC_Start+0xfe>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b0c      	cmp	r3, #12
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_OC_Start+0xe6>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050ec:	e00b      	b.n	8005106 <HAL_TIM_OC_Start+0xfe>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_OC_Start+0xf6>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050fc:	e003      	b.n	8005106 <HAL_TIM_OC_Start+0xfe>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2201      	movs	r2, #1
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f8bc 	bl	800528c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a26      	ldr	r2, [pc, #152]	; (80051b4 <HAL_TIM_OC_Start+0x1ac>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d009      	beq.n	8005132 <HAL_TIM_OC_Start+0x12a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a25      	ldr	r2, [pc, #148]	; (80051b8 <HAL_TIM_OC_Start+0x1b0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d004      	beq.n	8005132 <HAL_TIM_OC_Start+0x12a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a23      	ldr	r2, [pc, #140]	; (80051bc <HAL_TIM_OC_Start+0x1b4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d101      	bne.n	8005136 <HAL_TIM_OC_Start+0x12e>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <HAL_TIM_OC_Start+0x130>
 8005136:	2300      	movs	r3, #0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d007      	beq.n	800514c <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800514a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a18      	ldr	r2, [pc, #96]	; (80051b4 <HAL_TIM_OC_Start+0x1ac>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d009      	beq.n	800516a <HAL_TIM_OC_Start+0x162>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515e:	d004      	beq.n	800516a <HAL_TIM_OC_Start+0x162>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a14      	ldr	r2, [pc, #80]	; (80051b8 <HAL_TIM_OC_Start+0x1b0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d115      	bne.n	8005196 <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <HAL_TIM_OC_Start+0x1b8>)
 8005172:	4013      	ands	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b06      	cmp	r3, #6
 800517a:	d015      	beq.n	80051a8 <HAL_TIM_OC_Start+0x1a0>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005182:	d011      	beq.n	80051a8 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005194:	e008      	b.n	80051a8 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0201 	orr.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	e000      	b.n	80051aa <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40012c00 	.word	0x40012c00
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400
 80051c0:	00010007 	.word	0x00010007

080051c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a2a      	ldr	r2, [pc, #168]	; (8005280 <TIM_Base_SetConfig+0xbc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_Base_SetConfig+0x20>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e2:	d108      	bne.n	80051f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a21      	ldr	r2, [pc, #132]	; (8005280 <TIM_Base_SetConfig+0xbc>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00b      	beq.n	8005216 <TIM_Base_SetConfig+0x52>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d007      	beq.n	8005216 <TIM_Base_SetConfig+0x52>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a1e      	ldr	r2, [pc, #120]	; (8005284 <TIM_Base_SetConfig+0xc0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d003      	beq.n	8005216 <TIM_Base_SetConfig+0x52>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <TIM_Base_SetConfig+0xc4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d108      	bne.n	8005228 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	4313      	orrs	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <TIM_Base_SetConfig+0xbc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d007      	beq.n	8005264 <TIM_Base_SetConfig+0xa0>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a0b      	ldr	r2, [pc, #44]	; (8005284 <TIM_Base_SetConfig+0xc0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_Base_SetConfig+0xa0>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <TIM_Base_SetConfig+0xc4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d103      	bne.n	800526c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	615a      	str	r2, [r3, #20]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40012c00 	.word	0x40012c00
 8005284:	40014000 	.word	0x40014000
 8005288:	40014400 	.word	0x40014400

0800528c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 031f 	and.w	r3, r3, #31
 800529e:	2201      	movs	r2, #1
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a1a      	ldr	r2, [r3, #32]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	43db      	mvns	r3, r3
 80052ae:	401a      	ands	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1a      	ldr	r2, [r3, #32]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f003 031f 	and.w	r3, r3, #31
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	fa01 f303 	lsl.w	r3, r1, r3
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e04f      	b.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a21      	ldr	r2, [pc, #132]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d108      	bne.n	800532c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005320:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a14      	ldr	r2, [pc, #80]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d009      	beq.n	8005364 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005358:	d004      	beq.n	8005364 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a10      	ldr	r2, [pc, #64]	; (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d10c      	bne.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800536a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	4313      	orrs	r3, r2
 8005374:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	40012c00 	.word	0x40012c00
 80053a0:	40014000 	.word	0x40014000

080053a4 <arm_correlate_f32>:
 80053a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a8:	b087      	sub	sp, #28
 80053aa:	4299      	cmp	r1, r3
 80053ac:	4684      	mov	ip, r0
 80053ae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80053b0:	f0c0 80a7 	bcc.w	8005502 <arm_correlate_f32+0x15e>
 80053b4:	ebc3 0e01 	rsb	lr, r3, r1
 80053b8:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 80053bc:	2704      	movs	r7, #4
 80053be:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 80053c2:	3101      	adds	r1, #1
 80053c4:	3801      	subs	r0, #1
 80053c6:	1ac9      	subs	r1, r1, r3
 80053c8:	1e5e      	subs	r6, r3, #1
 80053ca:	9100      	str	r1, [sp, #0]
 80053cc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80053d0:	d055      	beq.n	800547e <arm_correlate_f32+0xda>
 80053d2:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8005584 <arm_correlate_f32+0x1e0>
 80053d6:	f1a0 0804 	sub.w	r8, r0, #4
 80053da:	46f1      	mov	r9, lr
 80053dc:	4664      	mov	r4, ip
 80053de:	2501      	movs	r5, #1
 80053e0:	f015 0103 	ands.w	r1, r5, #3
 80053e4:	d009      	beq.n	80053fa <arm_correlate_f32+0x56>
 80053e6:	ecf4 6a01 	vldmia	r4!, {s13}
 80053ea:	ecb0 7a01 	vldmia	r0!, {s14}
 80053ee:	ee26 7a87 	vmul.f32	s14, s13, s14
 80053f2:	3901      	subs	r1, #1
 80053f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053f8:	d1f5      	bne.n	80053e6 <arm_correlate_f32+0x42>
 80053fa:	3501      	adds	r5, #1
 80053fc:	429d      	cmp	r5, r3
 80053fe:	edc9 7a00 	vstr	s15, [r9]
 8005402:	4640      	mov	r0, r8
 8005404:	44b9      	add	r9, r7
 8005406:	d038      	beq.n	800547a <arm_correlate_f32+0xd6>
 8005408:	ea5f 0a95 	movs.w	sl, r5, lsr #2
 800540c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8005584 <arm_correlate_f32+0x1e0>
 8005410:	f000 8253 	beq.w	80058ba <arm_correlate_f32+0x516>
 8005414:	f10c 0010 	add.w	r0, ip, #16
 8005418:	f108 0110 	add.w	r1, r8, #16
 800541c:	4654      	mov	r4, sl
 800541e:	ed51 6a04 	vldr	s13, [r1, #-16]
 8005422:	ed10 4a04 	vldr	s8, [r0, #-16]
 8005426:	ed50 3a03 	vldr	s7, [r0, #-12]
 800542a:	ed11 5a03 	vldr	s10, [r1, #-12]
 800542e:	ed50 4a02 	vldr	s9, [r0, #-8]
 8005432:	ed11 6a02 	vldr	s12, [r1, #-8]
 8005436:	ed50 5a01 	vldr	s11, [r0, #-4]
 800543a:	ed11 7a01 	vldr	s14, [r1, #-4]
 800543e:	ee24 4a26 	vmul.f32	s8, s8, s13
 8005442:	ee23 5a85 	vmul.f32	s10, s7, s10
 8005446:	ee74 6a27 	vadd.f32	s13, s8, s15
 800544a:	ee24 6a86 	vmul.f32	s12, s9, s12
 800544e:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005452:	ee25 7a87 	vmul.f32	s14, s11, s14
 8005456:	ee76 7a26 	vadd.f32	s15, s12, s13
 800545a:	3c01      	subs	r4, #1
 800545c:	f100 0010 	add.w	r0, r0, #16
 8005460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005464:	f101 0110 	add.w	r1, r1, #16
 8005468:	d1d9      	bne.n	800541e <arm_correlate_f32+0x7a>
 800546a:	ea4f 100a 	mov.w	r0, sl, lsl #4
 800546e:	eb0c 0400 	add.w	r4, ip, r0
 8005472:	4440      	add	r0, r8
 8005474:	f1a8 0804 	sub.w	r8, r8, #4
 8005478:	e7b2      	b.n	80053e0 <arm_correlate_f32+0x3c>
 800547a:	fb07 ee06 	mla	lr, r7, r6, lr
 800547e:	2b03      	cmp	r3, #3
 8005480:	9900      	ldr	r1, [sp, #0]
 8005482:	d84d      	bhi.n	8005520 <arm_correlate_f32+0x17c>
 8005484:	2900      	cmp	r1, #0
 8005486:	f000 81d4 	beq.w	8005832 <arm_correlate_f32+0x48e>
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 81d6 	beq.w	800583c <arm_correlate_f32+0x498>
 8005490:	2e00      	cmp	r6, #0
 8005492:	f000 81df 	beq.w	8005854 <arm_correlate_f32+0x4b0>
 8005496:	2b02      	cmp	r3, #2
 8005498:	9b00      	ldr	r3, [sp, #0]
 800549a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800549e:	f000 81ef 	beq.w	8005880 <arm_correlate_f32+0x4dc>
 80054a2:	eddf 4a38 	vldr	s9, [pc, #224]	; 8005584 <arm_correlate_f32+0x1e0>
 80054a6:	eb0c 0503 	add.w	r5, ip, r3
 80054aa:	4664      	mov	r4, ip
 80054ac:	f10c 0004 	add.w	r0, ip, #4
 80054b0:	4671      	mov	r1, lr
 80054b2:	ecb4 5a01 	vldmia	r4!, {s10}
 80054b6:	ed92 6a00 	vldr	s12, [r2]
 80054ba:	edd0 7a00 	vldr	s15, [r0]
 80054be:	edd2 6a01 	vldr	s13, [r2, #4]
 80054c2:	edd0 5a01 	vldr	s11, [r0, #4]
 80054c6:	ed92 7a02 	vldr	s14, [r2, #8]
 80054ca:	ee25 6a06 	vmul.f32	s12, s10, s12
 80054ce:	3004      	adds	r0, #4
 80054d0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80054d4:	ee36 6a24 	vadd.f32	s12, s12, s9
 80054d8:	ee25 7a87 	vmul.f32	s14, s11, s14
 80054dc:	ee76 7a26 	vadd.f32	s15, s12, s13
 80054e0:	42ac      	cmp	r4, r5
 80054e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054e6:	edc1 7a00 	vstr	s15, [r1]
 80054ea:	4439      	add	r1, r7
 80054ec:	d1e1      	bne.n	80054b2 <arm_correlate_f32+0x10e>
 80054ee:	9900      	ldr	r1, [sp, #0]
 80054f0:	449c      	add	ip, r3
 80054f2:	fb07 ee01 	mla	lr, r7, r1, lr
 80054f6:	2e00      	cmp	r6, #0
 80054f8:	f040 814c 	bne.w	8005794 <arm_correlate_f32+0x3f0>
 80054fc:	b007      	add	sp, #28
 80054fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005502:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8005506:	3802      	subs	r0, #2
 8005508:	4666      	mov	r6, ip
 800550a:	4408      	add	r0, r1
 800550c:	460d      	mov	r5, r1
 800550e:	4694      	mov	ip, r2
 8005510:	4619      	mov	r1, r3
 8005512:	eb04 0e80 	add.w	lr, r4, r0, lsl #2
 8005516:	4632      	mov	r2, r6
 8005518:	f06f 0703 	mvn.w	r7, #3
 800551c:	462b      	mov	r3, r5
 800551e:	e74e      	b.n	80053be <arm_correlate_f32+0x1a>
 8005520:	0889      	lsrs	r1, r1, #2
 8005522:	9101      	str	r1, [sp, #4]
 8005524:	f000 8187 	beq.w	8005836 <arm_correlate_f32+0x492>
 8005528:	0109      	lsls	r1, r1, #4
 800552a:	ea4f 0a93 	mov.w	sl, r3, lsr #2
 800552e:	9102      	str	r1, [sp, #8]
 8005530:	ea4f 1b0a 	mov.w	fp, sl, lsl #4
 8005534:	310c      	adds	r1, #12
 8005536:	4461      	add	r1, ip
 8005538:	f003 0903 	and.w	r9, r3, #3
 800553c:	eb02 000b 	add.w	r0, r2, fp
 8005540:	f102 0410 	add.w	r4, r2, #16
 8005544:	f10c 050c 	add.w	r5, ip, #12
 8005548:	46f0      	mov	r8, lr
 800554a:	f8cd e00c 	str.w	lr, [sp, #12]
 800554e:	9604      	str	r6, [sp, #16]
 8005550:	f8cd c014 	str.w	ip, [sp, #20]
 8005554:	464e      	mov	r6, r9
 8005556:	468e      	mov	lr, r1
 8005558:	4681      	mov	r9, r0
 800555a:	46a4      	mov	ip, r4
 800555c:	eddf 5a09 	vldr	s11, [pc, #36]	; 8005584 <arm_correlate_f32+0x1e0>
 8005560:	ed55 2a03 	vldr	s5, [r5, #-12]
 8005564:	ed15 2a02 	vldr	s4, [r5, #-8]
 8005568:	ed55 1a01 	vldr	s3, [r5, #-4]
 800556c:	ed95 5a00 	vldr	s10, [r5]
 8005570:	eef0 4a65 	vmov.f32	s9, s11
 8005574:	eef0 3a65 	vmov.f32	s7, s11
 8005578:	eeb0 1a65 	vmov.f32	s2, s11
 800557c:	4661      	mov	r1, ip
 800557e:	4628      	mov	r0, r5
 8005580:	4654      	mov	r4, sl
 8005582:	e004      	b.n	800558e <arm_correlate_f32+0x1ea>
 8005584:	00000000 	.word	0x00000000
 8005588:	3010      	adds	r0, #16
 800558a:	ed90 5a00 	vldr	s10, [r0]
 800558e:	ed11 6a04 	vldr	s12, [r1, #-16]
 8005592:	ed51 6a03 	vldr	s13, [r1, #-12]
 8005596:	ed11 7a02 	vldr	s14, [r1, #-8]
 800559a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800559e:	ee62 0a86 	vmul.f32	s1, s5, s12
 80055a2:	ee22 3a06 	vmul.f32	s6, s4, s12
 80055a6:	ee21 4a86 	vmul.f32	s8, s3, s12
 80055aa:	edd0 2a01 	vldr	s5, [r0, #4]
 80055ae:	ee25 6a06 	vmul.f32	s12, s10, s12
 80055b2:	ee30 1a81 	vadd.f32	s2, s1, s2
 80055b6:	ee73 3a23 	vadd.f32	s7, s6, s7
 80055ba:	ee62 0a26 	vmul.f32	s1, s4, s13
 80055be:	ee21 3aa6 	vmul.f32	s6, s3, s13
 80055c2:	ee74 4a24 	vadd.f32	s9, s8, s9
 80055c6:	ee76 5a25 	vadd.f32	s11, s12, s11
 80055ca:	ed90 2a02 	vldr	s4, [r0, #8]
 80055ce:	ee25 6a26 	vmul.f32	s12, s10, s13
 80055d2:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80055d6:	ee30 1a81 	vadd.f32	s2, s1, s2
 80055da:	ee73 3a23 	vadd.f32	s7, s6, s7
 80055de:	ee61 0a87 	vmul.f32	s1, s3, s14
 80055e2:	ee25 4a07 	vmul.f32	s8, s10, s14
 80055e6:	ee76 4a24 	vadd.f32	s9, s12, s9
 80055ea:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80055ee:	edd0 1a03 	vldr	s3, [r0, #12]
 80055f2:	ee62 6a87 	vmul.f32	s13, s5, s14
 80055f6:	ee22 7a07 	vmul.f32	s14, s4, s14
 80055fa:	ee25 5a27 	vmul.f32	s10, s10, s15
 80055fe:	ee34 6a23 	vadd.f32	s12, s8, s7
 8005602:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005606:	ee62 3aa7 	vmul.f32	s7, s5, s15
 800560a:	ee62 4a27 	vmul.f32	s9, s4, s15
 800560e:	ee30 3a81 	vadd.f32	s6, s1, s2
 8005612:	ee37 7a25 	vadd.f32	s14, s14, s11
 8005616:	ee61 7aa7 	vmul.f32	s15, s3, s15
 800561a:	3c01      	subs	r4, #1
 800561c:	f101 0110 	add.w	r1, r1, #16
 8005620:	ee35 1a03 	vadd.f32	s2, s10, s6
 8005624:	ee73 3a86 	vadd.f32	s7, s7, s12
 8005628:	ee74 4aa6 	vadd.f32	s9, s9, s13
 800562c:	ee77 5a87 	vadd.f32	s11, s15, s14
 8005630:	d1aa      	bne.n	8005588 <arm_correlate_f32+0x1e4>
 8005632:	eb05 000b 	add.w	r0, r5, fp
 8005636:	b1ee      	cbz	r6, 8005674 <arm_correlate_f32+0x2d0>
 8005638:	4631      	mov	r1, r6
 800563a:	464c      	mov	r4, r9
 800563c:	ecf4 7a01 	vldmia	r4!, {s15}
 8005640:	ecb0 7a01 	vldmia	r0!, {s14}
 8005644:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8005648:	ee22 6a27 	vmul.f32	s12, s4, s15
 800564c:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8005650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005654:	3901      	subs	r1, #1
 8005656:	ee31 1a22 	vadd.f32	s2, s2, s5
 800565a:	ee73 3a86 	vadd.f32	s7, s7, s12
 800565e:	eef0 2a42 	vmov.f32	s5, s4
 8005662:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8005666:	eeb0 2a61 	vmov.f32	s4, s3
 800566a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800566e:	eef0 1a47 	vmov.f32	s3, s14
 8005672:	d1e3      	bne.n	800563c <arm_correlate_f32+0x298>
 8005674:	eb08 0107 	add.w	r1, r8, r7
 8005678:	19c8      	adds	r0, r1, r7
 800567a:	3510      	adds	r5, #16
 800567c:	ed88 1a00 	vstr	s2, [r8]
 8005680:	4575      	cmp	r5, lr
 8005682:	eb00 0807 	add.w	r8, r0, r7
 8005686:	edc1 3a00 	vstr	s7, [r1]
 800568a:	edc0 4a00 	vstr	s9, [r0]
 800568e:	edc8 5a00 	vstr	s11, [r8]
 8005692:	44b8      	add	r8, r7
 8005694:	f47f af62 	bne.w	800555c <arm_correlate_f32+0x1b8>
 8005698:	f8dd c014 	ldr.w	ip, [sp, #20]
 800569c:	9802      	ldr	r0, [sp, #8]
 800569e:	9c01      	ldr	r4, [sp, #4]
 80056a0:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80056a4:	9e04      	ldr	r6, [sp, #16]
 80056a6:	00b9      	lsls	r1, r7, #2
 80056a8:	4460      	add	r0, ip
 80056aa:	4605      	mov	r5, r0
 80056ac:	fb04 ee01 	mla	lr, r4, r1, lr
 80056b0:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80056b4:	9900      	ldr	r1, [sp, #0]
 80056b6:	f011 0103 	ands.w	r1, r1, #3
 80056ba:	9101      	str	r1, [sp, #4]
 80056bc:	d064      	beq.n	8005788 <arm_correlate_f32+0x3e4>
 80056be:	ea4f 0b93 	mov.w	fp, r3, lsr #2
 80056c2:	3101      	adds	r1, #1
 80056c4:	4441      	add	r1, r8
 80056c6:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 80056ca:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 80056ce:	f108 0801 	add.w	r8, r8, #1
 80056d2:	f003 0003 	and.w	r0, r3, #3
 80056d6:	f102 0410 	add.w	r4, r2, #16
 80056da:	eb02 030a 	add.w	r3, r2, sl
 80056de:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
 80056e2:	46f1      	mov	r9, lr
 80056e4:	f8cd e008 	str.w	lr, [sp, #8]
 80056e8:	9603      	str	r6, [sp, #12]
 80056ea:	f8cd c010 	str.w	ip, [sp, #16]
 80056ee:	460e      	mov	r6, r1
 80056f0:	469c      	mov	ip, r3
 80056f2:	46a6      	mov	lr, r4
 80056f4:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 8005584 <arm_correlate_f32+0x1e0>
 80056f8:	f105 0110 	add.w	r1, r5, #16
 80056fc:	4673      	mov	r3, lr
 80056fe:	465c      	mov	r4, fp
 8005700:	ed53 6a04 	vldr	s13, [r3, #-16]
 8005704:	ed11 4a04 	vldr	s8, [r1, #-16]
 8005708:	ed51 3a03 	vldr	s7, [r1, #-12]
 800570c:	ed13 5a03 	vldr	s10, [r3, #-12]
 8005710:	ed51 4a02 	vldr	s9, [r1, #-8]
 8005714:	ed13 6a02 	vldr	s12, [r3, #-8]
 8005718:	ed51 5a01 	vldr	s11, [r1, #-4]
 800571c:	ed13 7a01 	vldr	s14, [r3, #-4]
 8005720:	ee24 4a26 	vmul.f32	s8, s8, s13
 8005724:	ee23 5a85 	vmul.f32	s10, s7, s10
 8005728:	ee74 6a27 	vadd.f32	s13, s8, s15
 800572c:	ee24 6a86 	vmul.f32	s12, s9, s12
 8005730:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005734:	ee25 7a87 	vmul.f32	s14, s11, s14
 8005738:	ee76 7a26 	vadd.f32	s15, s12, s13
 800573c:	3c01      	subs	r4, #1
 800573e:	f101 0110 	add.w	r1, r1, #16
 8005742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005746:	f103 0310 	add.w	r3, r3, #16
 800574a:	d1d9      	bne.n	8005700 <arm_correlate_f32+0x35c>
 800574c:	4455      	add	r5, sl
 800574e:	b158      	cbz	r0, 8005768 <arm_correlate_f32+0x3c4>
 8005750:	4603      	mov	r3, r0
 8005752:	4661      	mov	r1, ip
 8005754:	ecf5 6a01 	vldmia	r5!, {s13}
 8005758:	ecb1 7a01 	vldmia	r1!, {s14}
 800575c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8005760:	3b01      	subs	r3, #1
 8005762:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005766:	d1f5      	bne.n	8005754 <arm_correlate_f32+0x3b0>
 8005768:	4645      	mov	r5, r8
 800576a:	f108 0804 	add.w	r8, r8, #4
 800576e:	45b0      	cmp	r8, r6
 8005770:	edc9 7a00 	vstr	s15, [r9]
 8005774:	44b9      	add	r9, r7
 8005776:	d1bd      	bne.n	80056f4 <arm_correlate_f32+0x350>
 8005778:	f8dd e008 	ldr.w	lr, [sp, #8]
 800577c:	9b01      	ldr	r3, [sp, #4]
 800577e:	9e03      	ldr	r6, [sp, #12]
 8005780:	f8dd c010 	ldr.w	ip, [sp, #16]
 8005784:	fb07 ee03 	mla	lr, r7, r3, lr
 8005788:	9b00      	ldr	r3, [sp, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	449c      	add	ip, r3
 800578e:	2e00      	cmp	r6, #0
 8005790:	f43f aeb4 	beq.w	80054fc <arm_correlate_f32+0x158>
 8005794:	08b4      	lsrs	r4, r6, #2
 8005796:	ed5f 7a85 	vldr	s15, [pc, #-532]	; 8005584 <arm_correlate_f32+0x1e0>
 800579a:	d047      	beq.n	800582c <arm_correlate_f32+0x488>
 800579c:	f10c 0110 	add.w	r1, ip, #16
 80057a0:	f102 0310 	add.w	r3, r2, #16
 80057a4:	4620      	mov	r0, r4
 80057a6:	ed53 6a04 	vldr	s13, [r3, #-16]
 80057aa:	ed11 4a04 	vldr	s8, [r1, #-16]
 80057ae:	ed51 3a03 	vldr	s7, [r1, #-12]
 80057b2:	ed13 5a03 	vldr	s10, [r3, #-12]
 80057b6:	ed51 4a02 	vldr	s9, [r1, #-8]
 80057ba:	ed13 6a02 	vldr	s12, [r3, #-8]
 80057be:	ed51 5a01 	vldr	s11, [r1, #-4]
 80057c2:	ed13 7a01 	vldr	s14, [r3, #-4]
 80057c6:	ee24 4a26 	vmul.f32	s8, s8, s13
 80057ca:	ee23 5a85 	vmul.f32	s10, s7, s10
 80057ce:	ee74 6a27 	vadd.f32	s13, s8, s15
 80057d2:	ee24 6a86 	vmul.f32	s12, s9, s12
 80057d6:	ee75 6a26 	vadd.f32	s13, s10, s13
 80057da:	ee25 7a87 	vmul.f32	s14, s11, s14
 80057de:	ee76 7a26 	vadd.f32	s15, s12, s13
 80057e2:	3801      	subs	r0, #1
 80057e4:	f101 0110 	add.w	r1, r1, #16
 80057e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ec:	f103 0310 	add.w	r3, r3, #16
 80057f0:	d1d9      	bne.n	80057a6 <arm_correlate_f32+0x402>
 80057f2:	0121      	lsls	r1, r4, #4
 80057f4:	eb0c 0001 	add.w	r0, ip, r1
 80057f8:	4411      	add	r1, r2
 80057fa:	f016 0303 	ands.w	r3, r6, #3
 80057fe:	d009      	beq.n	8005814 <arm_correlate_f32+0x470>
 8005800:	ecf0 6a01 	vldmia	r0!, {s13}
 8005804:	ecb1 7a01 	vldmia	r1!, {s14}
 8005808:	ee26 7a87 	vmul.f32	s14, s13, s14
 800580c:	3b01      	subs	r3, #1
 800580e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005812:	d1f5      	bne.n	8005800 <arm_correlate_f32+0x45c>
 8005814:	3e01      	subs	r6, #1
 8005816:	edce 7a00 	vstr	s15, [lr]
 800581a:	f10c 0c04 	add.w	ip, ip, #4
 800581e:	44be      	add	lr, r7
 8005820:	f43f ae6c 	beq.w	80054fc <arm_correlate_f32+0x158>
 8005824:	08b4      	lsrs	r4, r6, #2
 8005826:	ed5f 7aa9 	vldr	s15, [pc, #-676]	; 8005584 <arm_correlate_f32+0x1e0>
 800582a:	d1b7      	bne.n	800579c <arm_correlate_f32+0x3f8>
 800582c:	4611      	mov	r1, r2
 800582e:	4660      	mov	r0, ip
 8005830:	e7e3      	b.n	80057fa <arm_correlate_f32+0x456>
 8005832:	460b      	mov	r3, r1
 8005834:	e7aa      	b.n	800578c <arm_correlate_f32+0x3e8>
 8005836:	4688      	mov	r8, r1
 8005838:	4665      	mov	r5, ip
 800583a:	e73b      	b.n	80056b4 <arm_correlate_f32+0x310>
 800583c:	9900      	ldr	r1, [sp, #0]
 800583e:	2000      	movs	r0, #0
 8005840:	4673      	mov	r3, lr
 8005842:	3901      	subs	r1, #1
 8005844:	6018      	str	r0, [r3, #0]
 8005846:	443b      	add	r3, r7
 8005848:	d1fb      	bne.n	8005842 <arm_correlate_f32+0x49e>
 800584a:	9900      	ldr	r1, [sp, #0]
 800584c:	fb07 ee01 	mla	lr, r7, r1, lr
 8005850:	008b      	lsls	r3, r1, #2
 8005852:	e79b      	b.n	800578c <arm_correlate_f32+0x3e8>
 8005854:	9b00      	ldr	r3, [sp, #0]
 8005856:	ed5f 6ab5 	vldr	s13, [pc, #-724]	; 8005584 <arm_correlate_f32+0x1e0>
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	eb0c 0403 	add.w	r4, ip, r3
 8005860:	4660      	mov	r0, ip
 8005862:	4671      	mov	r1, lr
 8005864:	ecb0 7a01 	vldmia	r0!, {s14}
 8005868:	edd2 7a00 	vldr	s15, [r2]
 800586c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005870:	42a0      	cmp	r0, r4
 8005872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005876:	edc1 7a00 	vstr	s15, [r1]
 800587a:	4439      	add	r1, r7
 800587c:	d1f2      	bne.n	8005864 <arm_correlate_f32+0x4c0>
 800587e:	e636      	b.n	80054ee <arm_correlate_f32+0x14a>
 8005880:	ed5f 5ac0 	vldr	s11, [pc, #-768]	; 8005584 <arm_correlate_f32+0x1e0>
 8005884:	eb0c 0403 	add.w	r4, ip, r3
 8005888:	4661      	mov	r1, ip
 800588a:	4670      	mov	r0, lr
 800588c:	ed91 6a00 	vldr	s12, [r1]
 8005890:	ed92 7a00 	vldr	s14, [r2]
 8005894:	edd1 6a01 	vldr	s13, [r1, #4]
 8005898:	edd2 7a01 	vldr	s15, [r2, #4]
 800589c:	3104      	adds	r1, #4
 800589e:	ee26 7a07 	vmul.f32	s14, s12, s14
 80058a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058a6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80058aa:	42a1      	cmp	r1, r4
 80058ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058b0:	edc0 7a00 	vstr	s15, [r0]
 80058b4:	4438      	add	r0, r7
 80058b6:	d1e9      	bne.n	800588c <arm_correlate_f32+0x4e8>
 80058b8:	e619      	b.n	80054ee <arm_correlate_f32+0x14a>
 80058ba:	4664      	mov	r4, ip
 80058bc:	e5da      	b.n	8005474 <arm_correlate_f32+0xd0>
 80058be:	bf00      	nop

080058c0 <arm_mult_f32>:
 80058c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058c2:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 80058c6:	d033      	beq.n	8005930 <arm_mult_f32+0x70>
 80058c8:	f100 0610 	add.w	r6, r0, #16
 80058cc:	f101 0510 	add.w	r5, r1, #16
 80058d0:	f102 0410 	add.w	r4, r2, #16
 80058d4:	4677      	mov	r7, lr
 80058d6:	ed16 6a04 	vldr	s12, [r6, #-16]
 80058da:	ed55 4a04 	vldr	s9, [r5, #-16]
 80058de:	ed56 6a02 	vldr	s13, [r6, #-8]
 80058e2:	ed15 5a02 	vldr	s10, [r5, #-8]
 80058e6:	ed16 7a03 	vldr	s14, [r6, #-12]
 80058ea:	ed55 5a03 	vldr	s11, [r5, #-12]
 80058ee:	ed56 7a01 	vldr	s15, [r6, #-4]
 80058f2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80058f6:	ee66 6a85 	vmul.f32	s13, s13, s10
 80058fa:	ed04 6a04 	vstr	s12, [r4, #-16]
 80058fe:	ed15 6a01 	vldr	s12, [r5, #-4]
 8005902:	ed44 6a02 	vstr	s13, [r4, #-8]
 8005906:	ee27 7a25 	vmul.f32	s14, s14, s11
 800590a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800590e:	3f01      	subs	r7, #1
 8005910:	ed04 7a03 	vstr	s14, [r4, #-12]
 8005914:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005918:	f106 0610 	add.w	r6, r6, #16
 800591c:	f105 0510 	add.w	r5, r5, #16
 8005920:	f104 0410 	add.w	r4, r4, #16
 8005924:	d1d7      	bne.n	80058d6 <arm_mult_f32+0x16>
 8005926:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800592a:	4420      	add	r0, r4
 800592c:	4421      	add	r1, r4
 800592e:	4422      	add	r2, r4
 8005930:	f013 0303 	ands.w	r3, r3, #3
 8005934:	d009      	beq.n	800594a <arm_mult_f32+0x8a>
 8005936:	ecf0 7a01 	vldmia	r0!, {s15}
 800593a:	ecb1 7a01 	vldmia	r1!, {s14}
 800593e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005942:	3b01      	subs	r3, #1
 8005944:	ece2 7a01 	vstmia	r2!, {s15}
 8005948:	d1f5      	bne.n	8005936 <arm_mult_f32+0x76>
 800594a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800594c <__errno>:
 800594c:	4b01      	ldr	r3, [pc, #4]	; (8005954 <__errno+0x8>)
 800594e:	6818      	ldr	r0, [r3, #0]
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	2000000c 	.word	0x2000000c

08005958 <__libc_init_array>:
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	4d0d      	ldr	r5, [pc, #52]	; (8005990 <__libc_init_array+0x38>)
 800595c:	4c0d      	ldr	r4, [pc, #52]	; (8005994 <__libc_init_array+0x3c>)
 800595e:	1b64      	subs	r4, r4, r5
 8005960:	10a4      	asrs	r4, r4, #2
 8005962:	2600      	movs	r6, #0
 8005964:	42a6      	cmp	r6, r4
 8005966:	d109      	bne.n	800597c <__libc_init_array+0x24>
 8005968:	4d0b      	ldr	r5, [pc, #44]	; (8005998 <__libc_init_array+0x40>)
 800596a:	4c0c      	ldr	r4, [pc, #48]	; (800599c <__libc_init_array+0x44>)
 800596c:	f003 ffd6 	bl	800991c <_init>
 8005970:	1b64      	subs	r4, r4, r5
 8005972:	10a4      	asrs	r4, r4, #2
 8005974:	2600      	movs	r6, #0
 8005976:	42a6      	cmp	r6, r4
 8005978:	d105      	bne.n	8005986 <__libc_init_array+0x2e>
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005980:	4798      	blx	r3
 8005982:	3601      	adds	r6, #1
 8005984:	e7ee      	b.n	8005964 <__libc_init_array+0xc>
 8005986:	f855 3b04 	ldr.w	r3, [r5], #4
 800598a:	4798      	blx	r3
 800598c:	3601      	adds	r6, #1
 800598e:	e7f2      	b.n	8005976 <__libc_init_array+0x1e>
 8005990:	08009f50 	.word	0x08009f50
 8005994:	08009f50 	.word	0x08009f50
 8005998:	08009f50 	.word	0x08009f50
 800599c:	08009f54 	.word	0x08009f54

080059a0 <memset>:
 80059a0:	4402      	add	r2, r0
 80059a2:	4603      	mov	r3, r0
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d100      	bne.n	80059aa <memset+0xa>
 80059a8:	4770      	bx	lr
 80059aa:	f803 1b01 	strb.w	r1, [r3], #1
 80059ae:	e7f9      	b.n	80059a4 <memset+0x4>

080059b0 <__cvt>:
 80059b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059b4:	ec55 4b10 	vmov	r4, r5, d0
 80059b8:	2d00      	cmp	r5, #0
 80059ba:	460e      	mov	r6, r1
 80059bc:	4619      	mov	r1, r3
 80059be:	462b      	mov	r3, r5
 80059c0:	bfbb      	ittet	lt
 80059c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80059c6:	461d      	movlt	r5, r3
 80059c8:	2300      	movge	r3, #0
 80059ca:	232d      	movlt	r3, #45	; 0x2d
 80059cc:	700b      	strb	r3, [r1, #0]
 80059ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80059d4:	4691      	mov	r9, r2
 80059d6:	f023 0820 	bic.w	r8, r3, #32
 80059da:	bfbc      	itt	lt
 80059dc:	4622      	movlt	r2, r4
 80059de:	4614      	movlt	r4, r2
 80059e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059e4:	d005      	beq.n	80059f2 <__cvt+0x42>
 80059e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80059ea:	d100      	bne.n	80059ee <__cvt+0x3e>
 80059ec:	3601      	adds	r6, #1
 80059ee:	2102      	movs	r1, #2
 80059f0:	e000      	b.n	80059f4 <__cvt+0x44>
 80059f2:	2103      	movs	r1, #3
 80059f4:	ab03      	add	r3, sp, #12
 80059f6:	9301      	str	r3, [sp, #4]
 80059f8:	ab02      	add	r3, sp, #8
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	ec45 4b10 	vmov	d0, r4, r5
 8005a00:	4653      	mov	r3, sl
 8005a02:	4632      	mov	r2, r6
 8005a04:	f000 fda4 	bl	8006550 <_dtoa_r>
 8005a08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	d102      	bne.n	8005a16 <__cvt+0x66>
 8005a10:	f019 0f01 	tst.w	r9, #1
 8005a14:	d022      	beq.n	8005a5c <__cvt+0xac>
 8005a16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a1a:	eb07 0906 	add.w	r9, r7, r6
 8005a1e:	d110      	bne.n	8005a42 <__cvt+0x92>
 8005a20:	783b      	ldrb	r3, [r7, #0]
 8005a22:	2b30      	cmp	r3, #48	; 0x30
 8005a24:	d10a      	bne.n	8005a3c <__cvt+0x8c>
 8005a26:	2200      	movs	r2, #0
 8005a28:	2300      	movs	r3, #0
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	f7fb f84b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a32:	b918      	cbnz	r0, 8005a3c <__cvt+0x8c>
 8005a34:	f1c6 0601 	rsb	r6, r6, #1
 8005a38:	f8ca 6000 	str.w	r6, [sl]
 8005a3c:	f8da 3000 	ldr.w	r3, [sl]
 8005a40:	4499      	add	r9, r3
 8005a42:	2200      	movs	r2, #0
 8005a44:	2300      	movs	r3, #0
 8005a46:	4620      	mov	r0, r4
 8005a48:	4629      	mov	r1, r5
 8005a4a:	f7fb f83d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a4e:	b108      	cbz	r0, 8005a54 <__cvt+0xa4>
 8005a50:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a54:	2230      	movs	r2, #48	; 0x30
 8005a56:	9b03      	ldr	r3, [sp, #12]
 8005a58:	454b      	cmp	r3, r9
 8005a5a:	d307      	bcc.n	8005a6c <__cvt+0xbc>
 8005a5c:	9b03      	ldr	r3, [sp, #12]
 8005a5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a60:	1bdb      	subs	r3, r3, r7
 8005a62:	4638      	mov	r0, r7
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	b004      	add	sp, #16
 8005a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6c:	1c59      	adds	r1, r3, #1
 8005a6e:	9103      	str	r1, [sp, #12]
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	e7f0      	b.n	8005a56 <__cvt+0xa6>

08005a74 <__exponent>:
 8005a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a76:	4603      	mov	r3, r0
 8005a78:	2900      	cmp	r1, #0
 8005a7a:	bfb8      	it	lt
 8005a7c:	4249      	neglt	r1, r1
 8005a7e:	f803 2b02 	strb.w	r2, [r3], #2
 8005a82:	bfb4      	ite	lt
 8005a84:	222d      	movlt	r2, #45	; 0x2d
 8005a86:	222b      	movge	r2, #43	; 0x2b
 8005a88:	2909      	cmp	r1, #9
 8005a8a:	7042      	strb	r2, [r0, #1]
 8005a8c:	dd2a      	ble.n	8005ae4 <__exponent+0x70>
 8005a8e:	f10d 0407 	add.w	r4, sp, #7
 8005a92:	46a4      	mov	ip, r4
 8005a94:	270a      	movs	r7, #10
 8005a96:	46a6      	mov	lr, r4
 8005a98:	460a      	mov	r2, r1
 8005a9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a9e:	fb07 1516 	mls	r5, r7, r6, r1
 8005aa2:	3530      	adds	r5, #48	; 0x30
 8005aa4:	2a63      	cmp	r2, #99	; 0x63
 8005aa6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005aaa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005aae:	4631      	mov	r1, r6
 8005ab0:	dcf1      	bgt.n	8005a96 <__exponent+0x22>
 8005ab2:	3130      	adds	r1, #48	; 0x30
 8005ab4:	f1ae 0502 	sub.w	r5, lr, #2
 8005ab8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005abc:	1c44      	adds	r4, r0, #1
 8005abe:	4629      	mov	r1, r5
 8005ac0:	4561      	cmp	r1, ip
 8005ac2:	d30a      	bcc.n	8005ada <__exponent+0x66>
 8005ac4:	f10d 0209 	add.w	r2, sp, #9
 8005ac8:	eba2 020e 	sub.w	r2, r2, lr
 8005acc:	4565      	cmp	r5, ip
 8005ace:	bf88      	it	hi
 8005ad0:	2200      	movhi	r2, #0
 8005ad2:	4413      	add	r3, r2
 8005ad4:	1a18      	subs	r0, r3, r0
 8005ad6:	b003      	add	sp, #12
 8005ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ade:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ae2:	e7ed      	b.n	8005ac0 <__exponent+0x4c>
 8005ae4:	2330      	movs	r3, #48	; 0x30
 8005ae6:	3130      	adds	r1, #48	; 0x30
 8005ae8:	7083      	strb	r3, [r0, #2]
 8005aea:	70c1      	strb	r1, [r0, #3]
 8005aec:	1d03      	adds	r3, r0, #4
 8005aee:	e7f1      	b.n	8005ad4 <__exponent+0x60>

08005af0 <_printf_float>:
 8005af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af4:	ed2d 8b02 	vpush	{d8}
 8005af8:	b08d      	sub	sp, #52	; 0x34
 8005afa:	460c      	mov	r4, r1
 8005afc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b00:	4616      	mov	r6, r2
 8005b02:	461f      	mov	r7, r3
 8005b04:	4605      	mov	r5, r0
 8005b06:	f001 fcc7 	bl	8007498 <_localeconv_r>
 8005b0a:	f8d0 a000 	ldr.w	sl, [r0]
 8005b0e:	4650      	mov	r0, sl
 8005b10:	f7fa fb5e 	bl	80001d0 <strlen>
 8005b14:	2300      	movs	r3, #0
 8005b16:	930a      	str	r3, [sp, #40]	; 0x28
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	9305      	str	r3, [sp, #20]
 8005b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b24:	3307      	adds	r3, #7
 8005b26:	f023 0307 	bic.w	r3, r3, #7
 8005b2a:	f103 0208 	add.w	r2, r3, #8
 8005b2e:	f8c8 2000 	str.w	r2, [r8]
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b42:	9307      	str	r3, [sp, #28]
 8005b44:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b48:	ee08 0a10 	vmov	s16, r0
 8005b4c:	4b9f      	ldr	r3, [pc, #636]	; (8005dcc <_printf_float+0x2dc>)
 8005b4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b56:	f7fa ffe9 	bl	8000b2c <__aeabi_dcmpun>
 8005b5a:	bb88      	cbnz	r0, 8005bc0 <_printf_float+0xd0>
 8005b5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b60:	4b9a      	ldr	r3, [pc, #616]	; (8005dcc <_printf_float+0x2dc>)
 8005b62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b66:	f7fa ffc3 	bl	8000af0 <__aeabi_dcmple>
 8005b6a:	bb48      	cbnz	r0, 8005bc0 <_printf_float+0xd0>
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2300      	movs	r3, #0
 8005b70:	4640      	mov	r0, r8
 8005b72:	4649      	mov	r1, r9
 8005b74:	f7fa ffb2 	bl	8000adc <__aeabi_dcmplt>
 8005b78:	b110      	cbz	r0, 8005b80 <_printf_float+0x90>
 8005b7a:	232d      	movs	r3, #45	; 0x2d
 8005b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b80:	4b93      	ldr	r3, [pc, #588]	; (8005dd0 <_printf_float+0x2e0>)
 8005b82:	4894      	ldr	r0, [pc, #592]	; (8005dd4 <_printf_float+0x2e4>)
 8005b84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b88:	bf94      	ite	ls
 8005b8a:	4698      	movls	r8, r3
 8005b8c:	4680      	movhi	r8, r0
 8005b8e:	2303      	movs	r3, #3
 8005b90:	6123      	str	r3, [r4, #16]
 8005b92:	9b05      	ldr	r3, [sp, #20]
 8005b94:	f023 0204 	bic.w	r2, r3, #4
 8005b98:	6022      	str	r2, [r4, #0]
 8005b9a:	f04f 0900 	mov.w	r9, #0
 8005b9e:	9700      	str	r7, [sp, #0]
 8005ba0:	4633      	mov	r3, r6
 8005ba2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f000 f9d8 	bl	8005f5c <_printf_common>
 8005bac:	3001      	adds	r0, #1
 8005bae:	f040 8090 	bne.w	8005cd2 <_printf_float+0x1e2>
 8005bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bb6:	b00d      	add	sp, #52	; 0x34
 8005bb8:	ecbd 8b02 	vpop	{d8}
 8005bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc0:	4642      	mov	r2, r8
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	4640      	mov	r0, r8
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	f7fa ffb0 	bl	8000b2c <__aeabi_dcmpun>
 8005bcc:	b140      	cbz	r0, 8005be0 <_printf_float+0xf0>
 8005bce:	464b      	mov	r3, r9
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	bfbc      	itt	lt
 8005bd4:	232d      	movlt	r3, #45	; 0x2d
 8005bd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005bda:	487f      	ldr	r0, [pc, #508]	; (8005dd8 <_printf_float+0x2e8>)
 8005bdc:	4b7f      	ldr	r3, [pc, #508]	; (8005ddc <_printf_float+0x2ec>)
 8005bde:	e7d1      	b.n	8005b84 <_printf_float+0x94>
 8005be0:	6863      	ldr	r3, [r4, #4]
 8005be2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005be6:	9206      	str	r2, [sp, #24]
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	d13f      	bne.n	8005c6c <_printf_float+0x17c>
 8005bec:	2306      	movs	r3, #6
 8005bee:	6063      	str	r3, [r4, #4]
 8005bf0:	9b05      	ldr	r3, [sp, #20]
 8005bf2:	6861      	ldr	r1, [r4, #4]
 8005bf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	9303      	str	r3, [sp, #12]
 8005bfc:	ab0a      	add	r3, sp, #40	; 0x28
 8005bfe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c02:	ab09      	add	r3, sp, #36	; 0x24
 8005c04:	ec49 8b10 	vmov	d0, r8, r9
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	6022      	str	r2, [r4, #0]
 8005c0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c10:	4628      	mov	r0, r5
 8005c12:	f7ff fecd 	bl	80059b0 <__cvt>
 8005c16:	9b06      	ldr	r3, [sp, #24]
 8005c18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c1a:	2b47      	cmp	r3, #71	; 0x47
 8005c1c:	4680      	mov	r8, r0
 8005c1e:	d108      	bne.n	8005c32 <_printf_float+0x142>
 8005c20:	1cc8      	adds	r0, r1, #3
 8005c22:	db02      	blt.n	8005c2a <_printf_float+0x13a>
 8005c24:	6863      	ldr	r3, [r4, #4]
 8005c26:	4299      	cmp	r1, r3
 8005c28:	dd41      	ble.n	8005cae <_printf_float+0x1be>
 8005c2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c2e:	fa5f fb8b 	uxtb.w	fp, fp
 8005c32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c36:	d820      	bhi.n	8005c7a <_printf_float+0x18a>
 8005c38:	3901      	subs	r1, #1
 8005c3a:	465a      	mov	r2, fp
 8005c3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c40:	9109      	str	r1, [sp, #36]	; 0x24
 8005c42:	f7ff ff17 	bl	8005a74 <__exponent>
 8005c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c48:	1813      	adds	r3, r2, r0
 8005c4a:	2a01      	cmp	r2, #1
 8005c4c:	4681      	mov	r9, r0
 8005c4e:	6123      	str	r3, [r4, #16]
 8005c50:	dc02      	bgt.n	8005c58 <_printf_float+0x168>
 8005c52:	6822      	ldr	r2, [r4, #0]
 8005c54:	07d2      	lsls	r2, r2, #31
 8005c56:	d501      	bpl.n	8005c5c <_printf_float+0x16c>
 8005c58:	3301      	adds	r3, #1
 8005c5a:	6123      	str	r3, [r4, #16]
 8005c5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d09c      	beq.n	8005b9e <_printf_float+0xae>
 8005c64:	232d      	movs	r3, #45	; 0x2d
 8005c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c6a:	e798      	b.n	8005b9e <_printf_float+0xae>
 8005c6c:	9a06      	ldr	r2, [sp, #24]
 8005c6e:	2a47      	cmp	r2, #71	; 0x47
 8005c70:	d1be      	bne.n	8005bf0 <_printf_float+0x100>
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1bc      	bne.n	8005bf0 <_printf_float+0x100>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e7b9      	b.n	8005bee <_printf_float+0xfe>
 8005c7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c7e:	d118      	bne.n	8005cb2 <_printf_float+0x1c2>
 8005c80:	2900      	cmp	r1, #0
 8005c82:	6863      	ldr	r3, [r4, #4]
 8005c84:	dd0b      	ble.n	8005c9e <_printf_float+0x1ae>
 8005c86:	6121      	str	r1, [r4, #16]
 8005c88:	b913      	cbnz	r3, 8005c90 <_printf_float+0x1a0>
 8005c8a:	6822      	ldr	r2, [r4, #0]
 8005c8c:	07d0      	lsls	r0, r2, #31
 8005c8e:	d502      	bpl.n	8005c96 <_printf_float+0x1a6>
 8005c90:	3301      	adds	r3, #1
 8005c92:	440b      	add	r3, r1
 8005c94:	6123      	str	r3, [r4, #16]
 8005c96:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c98:	f04f 0900 	mov.w	r9, #0
 8005c9c:	e7de      	b.n	8005c5c <_printf_float+0x16c>
 8005c9e:	b913      	cbnz	r3, 8005ca6 <_printf_float+0x1b6>
 8005ca0:	6822      	ldr	r2, [r4, #0]
 8005ca2:	07d2      	lsls	r2, r2, #31
 8005ca4:	d501      	bpl.n	8005caa <_printf_float+0x1ba>
 8005ca6:	3302      	adds	r3, #2
 8005ca8:	e7f4      	b.n	8005c94 <_printf_float+0x1a4>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e7f2      	b.n	8005c94 <_printf_float+0x1a4>
 8005cae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb4:	4299      	cmp	r1, r3
 8005cb6:	db05      	blt.n	8005cc4 <_printf_float+0x1d4>
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	6121      	str	r1, [r4, #16]
 8005cbc:	07d8      	lsls	r0, r3, #31
 8005cbe:	d5ea      	bpl.n	8005c96 <_printf_float+0x1a6>
 8005cc0:	1c4b      	adds	r3, r1, #1
 8005cc2:	e7e7      	b.n	8005c94 <_printf_float+0x1a4>
 8005cc4:	2900      	cmp	r1, #0
 8005cc6:	bfd4      	ite	le
 8005cc8:	f1c1 0202 	rsble	r2, r1, #2
 8005ccc:	2201      	movgt	r2, #1
 8005cce:	4413      	add	r3, r2
 8005cd0:	e7e0      	b.n	8005c94 <_printf_float+0x1a4>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	055a      	lsls	r2, r3, #21
 8005cd6:	d407      	bmi.n	8005ce8 <_printf_float+0x1f8>
 8005cd8:	6923      	ldr	r3, [r4, #16]
 8005cda:	4642      	mov	r2, r8
 8005cdc:	4631      	mov	r1, r6
 8005cde:	4628      	mov	r0, r5
 8005ce0:	47b8      	blx	r7
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d12c      	bne.n	8005d40 <_printf_float+0x250>
 8005ce6:	e764      	b.n	8005bb2 <_printf_float+0xc2>
 8005ce8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cec:	f240 80e0 	bls.w	8005eb0 <_printf_float+0x3c0>
 8005cf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f7fa fee6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d034      	beq.n	8005d6a <_printf_float+0x27a>
 8005d00:	4a37      	ldr	r2, [pc, #220]	; (8005de0 <_printf_float+0x2f0>)
 8005d02:	2301      	movs	r3, #1
 8005d04:	4631      	mov	r1, r6
 8005d06:	4628      	mov	r0, r5
 8005d08:	47b8      	blx	r7
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	f43f af51 	beq.w	8005bb2 <_printf_float+0xc2>
 8005d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d14:	429a      	cmp	r2, r3
 8005d16:	db02      	blt.n	8005d1e <_printf_float+0x22e>
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	07d8      	lsls	r0, r3, #31
 8005d1c:	d510      	bpl.n	8005d40 <_printf_float+0x250>
 8005d1e:	ee18 3a10 	vmov	r3, s16
 8005d22:	4652      	mov	r2, sl
 8005d24:	4631      	mov	r1, r6
 8005d26:	4628      	mov	r0, r5
 8005d28:	47b8      	blx	r7
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	f43f af41 	beq.w	8005bb2 <_printf_float+0xc2>
 8005d30:	f04f 0800 	mov.w	r8, #0
 8005d34:	f104 091a 	add.w	r9, r4, #26
 8005d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	4543      	cmp	r3, r8
 8005d3e:	dc09      	bgt.n	8005d54 <_printf_float+0x264>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	079b      	lsls	r3, r3, #30
 8005d44:	f100 8105 	bmi.w	8005f52 <_printf_float+0x462>
 8005d48:	68e0      	ldr	r0, [r4, #12]
 8005d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d4c:	4298      	cmp	r0, r3
 8005d4e:	bfb8      	it	lt
 8005d50:	4618      	movlt	r0, r3
 8005d52:	e730      	b.n	8005bb6 <_printf_float+0xc6>
 8005d54:	2301      	movs	r3, #1
 8005d56:	464a      	mov	r2, r9
 8005d58:	4631      	mov	r1, r6
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	47b8      	blx	r7
 8005d5e:	3001      	adds	r0, #1
 8005d60:	f43f af27 	beq.w	8005bb2 <_printf_float+0xc2>
 8005d64:	f108 0801 	add.w	r8, r8, #1
 8005d68:	e7e6      	b.n	8005d38 <_printf_float+0x248>
 8005d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	dc39      	bgt.n	8005de4 <_printf_float+0x2f4>
 8005d70:	4a1b      	ldr	r2, [pc, #108]	; (8005de0 <_printf_float+0x2f0>)
 8005d72:	2301      	movs	r3, #1
 8005d74:	4631      	mov	r1, r6
 8005d76:	4628      	mov	r0, r5
 8005d78:	47b8      	blx	r7
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	f43f af19 	beq.w	8005bb2 <_printf_float+0xc2>
 8005d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d84:	4313      	orrs	r3, r2
 8005d86:	d102      	bne.n	8005d8e <_printf_float+0x29e>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	07d9      	lsls	r1, r3, #31
 8005d8c:	d5d8      	bpl.n	8005d40 <_printf_float+0x250>
 8005d8e:	ee18 3a10 	vmov	r3, s16
 8005d92:	4652      	mov	r2, sl
 8005d94:	4631      	mov	r1, r6
 8005d96:	4628      	mov	r0, r5
 8005d98:	47b8      	blx	r7
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	f43f af09 	beq.w	8005bb2 <_printf_float+0xc2>
 8005da0:	f04f 0900 	mov.w	r9, #0
 8005da4:	f104 0a1a 	add.w	sl, r4, #26
 8005da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005daa:	425b      	negs	r3, r3
 8005dac:	454b      	cmp	r3, r9
 8005dae:	dc01      	bgt.n	8005db4 <_printf_float+0x2c4>
 8005db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005db2:	e792      	b.n	8005cda <_printf_float+0x1ea>
 8005db4:	2301      	movs	r3, #1
 8005db6:	4652      	mov	r2, sl
 8005db8:	4631      	mov	r1, r6
 8005dba:	4628      	mov	r0, r5
 8005dbc:	47b8      	blx	r7
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	f43f aef7 	beq.w	8005bb2 <_printf_float+0xc2>
 8005dc4:	f109 0901 	add.w	r9, r9, #1
 8005dc8:	e7ee      	b.n	8005da8 <_printf_float+0x2b8>
 8005dca:	bf00      	nop
 8005dcc:	7fefffff 	.word	0x7fefffff
 8005dd0:	08009994 	.word	0x08009994
 8005dd4:	08009998 	.word	0x08009998
 8005dd8:	080099a0 	.word	0x080099a0
 8005ddc:	0800999c 	.word	0x0800999c
 8005de0:	080099a4 	.word	0x080099a4
 8005de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005de6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005de8:	429a      	cmp	r2, r3
 8005dea:	bfa8      	it	ge
 8005dec:	461a      	movge	r2, r3
 8005dee:	2a00      	cmp	r2, #0
 8005df0:	4691      	mov	r9, r2
 8005df2:	dc37      	bgt.n	8005e64 <_printf_float+0x374>
 8005df4:	f04f 0b00 	mov.w	fp, #0
 8005df8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dfc:	f104 021a 	add.w	r2, r4, #26
 8005e00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e02:	9305      	str	r3, [sp, #20]
 8005e04:	eba3 0309 	sub.w	r3, r3, r9
 8005e08:	455b      	cmp	r3, fp
 8005e0a:	dc33      	bgt.n	8005e74 <_printf_float+0x384>
 8005e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e10:	429a      	cmp	r2, r3
 8005e12:	db3b      	blt.n	8005e8c <_printf_float+0x39c>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	07da      	lsls	r2, r3, #31
 8005e18:	d438      	bmi.n	8005e8c <_printf_float+0x39c>
 8005e1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e1c:	9b05      	ldr	r3, [sp, #20]
 8005e1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	eba2 0901 	sub.w	r9, r2, r1
 8005e26:	4599      	cmp	r9, r3
 8005e28:	bfa8      	it	ge
 8005e2a:	4699      	movge	r9, r3
 8005e2c:	f1b9 0f00 	cmp.w	r9, #0
 8005e30:	dc35      	bgt.n	8005e9e <_printf_float+0x3ae>
 8005e32:	f04f 0800 	mov.w	r8, #0
 8005e36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e3a:	f104 0a1a 	add.w	sl, r4, #26
 8005e3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e42:	1a9b      	subs	r3, r3, r2
 8005e44:	eba3 0309 	sub.w	r3, r3, r9
 8005e48:	4543      	cmp	r3, r8
 8005e4a:	f77f af79 	ble.w	8005d40 <_printf_float+0x250>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	4652      	mov	r2, sl
 8005e52:	4631      	mov	r1, r6
 8005e54:	4628      	mov	r0, r5
 8005e56:	47b8      	blx	r7
 8005e58:	3001      	adds	r0, #1
 8005e5a:	f43f aeaa 	beq.w	8005bb2 <_printf_float+0xc2>
 8005e5e:	f108 0801 	add.w	r8, r8, #1
 8005e62:	e7ec      	b.n	8005e3e <_printf_float+0x34e>
 8005e64:	4613      	mov	r3, r2
 8005e66:	4631      	mov	r1, r6
 8005e68:	4642      	mov	r2, r8
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	47b8      	blx	r7
 8005e6e:	3001      	adds	r0, #1
 8005e70:	d1c0      	bne.n	8005df4 <_printf_float+0x304>
 8005e72:	e69e      	b.n	8005bb2 <_printf_float+0xc2>
 8005e74:	2301      	movs	r3, #1
 8005e76:	4631      	mov	r1, r6
 8005e78:	4628      	mov	r0, r5
 8005e7a:	9205      	str	r2, [sp, #20]
 8005e7c:	47b8      	blx	r7
 8005e7e:	3001      	adds	r0, #1
 8005e80:	f43f ae97 	beq.w	8005bb2 <_printf_float+0xc2>
 8005e84:	9a05      	ldr	r2, [sp, #20]
 8005e86:	f10b 0b01 	add.w	fp, fp, #1
 8005e8a:	e7b9      	b.n	8005e00 <_printf_float+0x310>
 8005e8c:	ee18 3a10 	vmov	r3, s16
 8005e90:	4652      	mov	r2, sl
 8005e92:	4631      	mov	r1, r6
 8005e94:	4628      	mov	r0, r5
 8005e96:	47b8      	blx	r7
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d1be      	bne.n	8005e1a <_printf_float+0x32a>
 8005e9c:	e689      	b.n	8005bb2 <_printf_float+0xc2>
 8005e9e:	9a05      	ldr	r2, [sp, #20]
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	4442      	add	r2, r8
 8005ea4:	4631      	mov	r1, r6
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	47b8      	blx	r7
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d1c1      	bne.n	8005e32 <_printf_float+0x342>
 8005eae:	e680      	b.n	8005bb2 <_printf_float+0xc2>
 8005eb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eb2:	2a01      	cmp	r2, #1
 8005eb4:	dc01      	bgt.n	8005eba <_printf_float+0x3ca>
 8005eb6:	07db      	lsls	r3, r3, #31
 8005eb8:	d538      	bpl.n	8005f2c <_printf_float+0x43c>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	4642      	mov	r2, r8
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	47b8      	blx	r7
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	f43f ae74 	beq.w	8005bb2 <_printf_float+0xc2>
 8005eca:	ee18 3a10 	vmov	r3, s16
 8005ece:	4652      	mov	r2, sl
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	47b8      	blx	r7
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	f43f ae6b 	beq.w	8005bb2 <_printf_float+0xc2>
 8005edc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f7fa fdf0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ee8:	b9d8      	cbnz	r0, 8005f22 <_printf_float+0x432>
 8005eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eec:	f108 0201 	add.w	r2, r8, #1
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	47b8      	blx	r7
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d10e      	bne.n	8005f1a <_printf_float+0x42a>
 8005efc:	e659      	b.n	8005bb2 <_printf_float+0xc2>
 8005efe:	2301      	movs	r3, #1
 8005f00:	4652      	mov	r2, sl
 8005f02:	4631      	mov	r1, r6
 8005f04:	4628      	mov	r0, r5
 8005f06:	47b8      	blx	r7
 8005f08:	3001      	adds	r0, #1
 8005f0a:	f43f ae52 	beq.w	8005bb2 <_printf_float+0xc2>
 8005f0e:	f108 0801 	add.w	r8, r8, #1
 8005f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f14:	3b01      	subs	r3, #1
 8005f16:	4543      	cmp	r3, r8
 8005f18:	dcf1      	bgt.n	8005efe <_printf_float+0x40e>
 8005f1a:	464b      	mov	r3, r9
 8005f1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f20:	e6dc      	b.n	8005cdc <_printf_float+0x1ec>
 8005f22:	f04f 0800 	mov.w	r8, #0
 8005f26:	f104 0a1a 	add.w	sl, r4, #26
 8005f2a:	e7f2      	b.n	8005f12 <_printf_float+0x422>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	4642      	mov	r2, r8
 8005f30:	e7df      	b.n	8005ef2 <_printf_float+0x402>
 8005f32:	2301      	movs	r3, #1
 8005f34:	464a      	mov	r2, r9
 8005f36:	4631      	mov	r1, r6
 8005f38:	4628      	mov	r0, r5
 8005f3a:	47b8      	blx	r7
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	f43f ae38 	beq.w	8005bb2 <_printf_float+0xc2>
 8005f42:	f108 0801 	add.w	r8, r8, #1
 8005f46:	68e3      	ldr	r3, [r4, #12]
 8005f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f4a:	1a5b      	subs	r3, r3, r1
 8005f4c:	4543      	cmp	r3, r8
 8005f4e:	dcf0      	bgt.n	8005f32 <_printf_float+0x442>
 8005f50:	e6fa      	b.n	8005d48 <_printf_float+0x258>
 8005f52:	f04f 0800 	mov.w	r8, #0
 8005f56:	f104 0919 	add.w	r9, r4, #25
 8005f5a:	e7f4      	b.n	8005f46 <_printf_float+0x456>

08005f5c <_printf_common>:
 8005f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f60:	4616      	mov	r6, r2
 8005f62:	4699      	mov	r9, r3
 8005f64:	688a      	ldr	r2, [r1, #8]
 8005f66:	690b      	ldr	r3, [r1, #16]
 8005f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	bfb8      	it	lt
 8005f70:	4613      	movlt	r3, r2
 8005f72:	6033      	str	r3, [r6, #0]
 8005f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f78:	4607      	mov	r7, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	b10a      	cbz	r2, 8005f82 <_printf_common+0x26>
 8005f7e:	3301      	adds	r3, #1
 8005f80:	6033      	str	r3, [r6, #0]
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	0699      	lsls	r1, r3, #26
 8005f86:	bf42      	ittt	mi
 8005f88:	6833      	ldrmi	r3, [r6, #0]
 8005f8a:	3302      	addmi	r3, #2
 8005f8c:	6033      	strmi	r3, [r6, #0]
 8005f8e:	6825      	ldr	r5, [r4, #0]
 8005f90:	f015 0506 	ands.w	r5, r5, #6
 8005f94:	d106      	bne.n	8005fa4 <_printf_common+0x48>
 8005f96:	f104 0a19 	add.w	sl, r4, #25
 8005f9a:	68e3      	ldr	r3, [r4, #12]
 8005f9c:	6832      	ldr	r2, [r6, #0]
 8005f9e:	1a9b      	subs	r3, r3, r2
 8005fa0:	42ab      	cmp	r3, r5
 8005fa2:	dc26      	bgt.n	8005ff2 <_printf_common+0x96>
 8005fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fa8:	1e13      	subs	r3, r2, #0
 8005faa:	6822      	ldr	r2, [r4, #0]
 8005fac:	bf18      	it	ne
 8005fae:	2301      	movne	r3, #1
 8005fb0:	0692      	lsls	r2, r2, #26
 8005fb2:	d42b      	bmi.n	800600c <_printf_common+0xb0>
 8005fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fb8:	4649      	mov	r1, r9
 8005fba:	4638      	mov	r0, r7
 8005fbc:	47c0      	blx	r8
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d01e      	beq.n	8006000 <_printf_common+0xa4>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	68e5      	ldr	r5, [r4, #12]
 8005fc6:	6832      	ldr	r2, [r6, #0]
 8005fc8:	f003 0306 	and.w	r3, r3, #6
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	bf08      	it	eq
 8005fd0:	1aad      	subeq	r5, r5, r2
 8005fd2:	68a3      	ldr	r3, [r4, #8]
 8005fd4:	6922      	ldr	r2, [r4, #16]
 8005fd6:	bf0c      	ite	eq
 8005fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fdc:	2500      	movne	r5, #0
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	bfc4      	itt	gt
 8005fe2:	1a9b      	subgt	r3, r3, r2
 8005fe4:	18ed      	addgt	r5, r5, r3
 8005fe6:	2600      	movs	r6, #0
 8005fe8:	341a      	adds	r4, #26
 8005fea:	42b5      	cmp	r5, r6
 8005fec:	d11a      	bne.n	8006024 <_printf_common+0xc8>
 8005fee:	2000      	movs	r0, #0
 8005ff0:	e008      	b.n	8006004 <_printf_common+0xa8>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	4652      	mov	r2, sl
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	47c0      	blx	r8
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d103      	bne.n	8006008 <_printf_common+0xac>
 8006000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006008:	3501      	adds	r5, #1
 800600a:	e7c6      	b.n	8005f9a <_printf_common+0x3e>
 800600c:	18e1      	adds	r1, r4, r3
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	2030      	movs	r0, #48	; 0x30
 8006012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006016:	4422      	add	r2, r4
 8006018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800601c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006020:	3302      	adds	r3, #2
 8006022:	e7c7      	b.n	8005fb4 <_printf_common+0x58>
 8006024:	2301      	movs	r3, #1
 8006026:	4622      	mov	r2, r4
 8006028:	4649      	mov	r1, r9
 800602a:	4638      	mov	r0, r7
 800602c:	47c0      	blx	r8
 800602e:	3001      	adds	r0, #1
 8006030:	d0e6      	beq.n	8006000 <_printf_common+0xa4>
 8006032:	3601      	adds	r6, #1
 8006034:	e7d9      	b.n	8005fea <_printf_common+0x8e>
	...

08006038 <_printf_i>:
 8006038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800603c:	460c      	mov	r4, r1
 800603e:	4691      	mov	r9, r2
 8006040:	7e27      	ldrb	r7, [r4, #24]
 8006042:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006044:	2f78      	cmp	r7, #120	; 0x78
 8006046:	4680      	mov	r8, r0
 8006048:	469a      	mov	sl, r3
 800604a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800604e:	d807      	bhi.n	8006060 <_printf_i+0x28>
 8006050:	2f62      	cmp	r7, #98	; 0x62
 8006052:	d80a      	bhi.n	800606a <_printf_i+0x32>
 8006054:	2f00      	cmp	r7, #0
 8006056:	f000 80d8 	beq.w	800620a <_printf_i+0x1d2>
 800605a:	2f58      	cmp	r7, #88	; 0x58
 800605c:	f000 80a3 	beq.w	80061a6 <_printf_i+0x16e>
 8006060:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006068:	e03a      	b.n	80060e0 <_printf_i+0xa8>
 800606a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800606e:	2b15      	cmp	r3, #21
 8006070:	d8f6      	bhi.n	8006060 <_printf_i+0x28>
 8006072:	a001      	add	r0, pc, #4	; (adr r0, 8006078 <_printf_i+0x40>)
 8006074:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006078:	080060d1 	.word	0x080060d1
 800607c:	080060e5 	.word	0x080060e5
 8006080:	08006061 	.word	0x08006061
 8006084:	08006061 	.word	0x08006061
 8006088:	08006061 	.word	0x08006061
 800608c:	08006061 	.word	0x08006061
 8006090:	080060e5 	.word	0x080060e5
 8006094:	08006061 	.word	0x08006061
 8006098:	08006061 	.word	0x08006061
 800609c:	08006061 	.word	0x08006061
 80060a0:	08006061 	.word	0x08006061
 80060a4:	080061f1 	.word	0x080061f1
 80060a8:	08006115 	.word	0x08006115
 80060ac:	080061d3 	.word	0x080061d3
 80060b0:	08006061 	.word	0x08006061
 80060b4:	08006061 	.word	0x08006061
 80060b8:	08006213 	.word	0x08006213
 80060bc:	08006061 	.word	0x08006061
 80060c0:	08006115 	.word	0x08006115
 80060c4:	08006061 	.word	0x08006061
 80060c8:	08006061 	.word	0x08006061
 80060cc:	080061db 	.word	0x080061db
 80060d0:	680b      	ldr	r3, [r1, #0]
 80060d2:	1d1a      	adds	r2, r3, #4
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	600a      	str	r2, [r1, #0]
 80060d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0a3      	b.n	800622c <_printf_i+0x1f4>
 80060e4:	6825      	ldr	r5, [r4, #0]
 80060e6:	6808      	ldr	r0, [r1, #0]
 80060e8:	062e      	lsls	r6, r5, #24
 80060ea:	f100 0304 	add.w	r3, r0, #4
 80060ee:	d50a      	bpl.n	8006106 <_printf_i+0xce>
 80060f0:	6805      	ldr	r5, [r0, #0]
 80060f2:	600b      	str	r3, [r1, #0]
 80060f4:	2d00      	cmp	r5, #0
 80060f6:	da03      	bge.n	8006100 <_printf_i+0xc8>
 80060f8:	232d      	movs	r3, #45	; 0x2d
 80060fa:	426d      	negs	r5, r5
 80060fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006100:	485e      	ldr	r0, [pc, #376]	; (800627c <_printf_i+0x244>)
 8006102:	230a      	movs	r3, #10
 8006104:	e019      	b.n	800613a <_printf_i+0x102>
 8006106:	f015 0f40 	tst.w	r5, #64	; 0x40
 800610a:	6805      	ldr	r5, [r0, #0]
 800610c:	600b      	str	r3, [r1, #0]
 800610e:	bf18      	it	ne
 8006110:	b22d      	sxthne	r5, r5
 8006112:	e7ef      	b.n	80060f4 <_printf_i+0xbc>
 8006114:	680b      	ldr	r3, [r1, #0]
 8006116:	6825      	ldr	r5, [r4, #0]
 8006118:	1d18      	adds	r0, r3, #4
 800611a:	6008      	str	r0, [r1, #0]
 800611c:	0628      	lsls	r0, r5, #24
 800611e:	d501      	bpl.n	8006124 <_printf_i+0xec>
 8006120:	681d      	ldr	r5, [r3, #0]
 8006122:	e002      	b.n	800612a <_printf_i+0xf2>
 8006124:	0669      	lsls	r1, r5, #25
 8006126:	d5fb      	bpl.n	8006120 <_printf_i+0xe8>
 8006128:	881d      	ldrh	r5, [r3, #0]
 800612a:	4854      	ldr	r0, [pc, #336]	; (800627c <_printf_i+0x244>)
 800612c:	2f6f      	cmp	r7, #111	; 0x6f
 800612e:	bf0c      	ite	eq
 8006130:	2308      	moveq	r3, #8
 8006132:	230a      	movne	r3, #10
 8006134:	2100      	movs	r1, #0
 8006136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800613a:	6866      	ldr	r6, [r4, #4]
 800613c:	60a6      	str	r6, [r4, #8]
 800613e:	2e00      	cmp	r6, #0
 8006140:	bfa2      	ittt	ge
 8006142:	6821      	ldrge	r1, [r4, #0]
 8006144:	f021 0104 	bicge.w	r1, r1, #4
 8006148:	6021      	strge	r1, [r4, #0]
 800614a:	b90d      	cbnz	r5, 8006150 <_printf_i+0x118>
 800614c:	2e00      	cmp	r6, #0
 800614e:	d04d      	beq.n	80061ec <_printf_i+0x1b4>
 8006150:	4616      	mov	r6, r2
 8006152:	fbb5 f1f3 	udiv	r1, r5, r3
 8006156:	fb03 5711 	mls	r7, r3, r1, r5
 800615a:	5dc7      	ldrb	r7, [r0, r7]
 800615c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006160:	462f      	mov	r7, r5
 8006162:	42bb      	cmp	r3, r7
 8006164:	460d      	mov	r5, r1
 8006166:	d9f4      	bls.n	8006152 <_printf_i+0x11a>
 8006168:	2b08      	cmp	r3, #8
 800616a:	d10b      	bne.n	8006184 <_printf_i+0x14c>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	07df      	lsls	r7, r3, #31
 8006170:	d508      	bpl.n	8006184 <_printf_i+0x14c>
 8006172:	6923      	ldr	r3, [r4, #16]
 8006174:	6861      	ldr	r1, [r4, #4]
 8006176:	4299      	cmp	r1, r3
 8006178:	bfde      	ittt	le
 800617a:	2330      	movle	r3, #48	; 0x30
 800617c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006180:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006184:	1b92      	subs	r2, r2, r6
 8006186:	6122      	str	r2, [r4, #16]
 8006188:	f8cd a000 	str.w	sl, [sp]
 800618c:	464b      	mov	r3, r9
 800618e:	aa03      	add	r2, sp, #12
 8006190:	4621      	mov	r1, r4
 8006192:	4640      	mov	r0, r8
 8006194:	f7ff fee2 	bl	8005f5c <_printf_common>
 8006198:	3001      	adds	r0, #1
 800619a:	d14c      	bne.n	8006236 <_printf_i+0x1fe>
 800619c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061a0:	b004      	add	sp, #16
 80061a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a6:	4835      	ldr	r0, [pc, #212]	; (800627c <_printf_i+0x244>)
 80061a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	680e      	ldr	r6, [r1, #0]
 80061b0:	061f      	lsls	r7, r3, #24
 80061b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80061b6:	600e      	str	r6, [r1, #0]
 80061b8:	d514      	bpl.n	80061e4 <_printf_i+0x1ac>
 80061ba:	07d9      	lsls	r1, r3, #31
 80061bc:	bf44      	itt	mi
 80061be:	f043 0320 	orrmi.w	r3, r3, #32
 80061c2:	6023      	strmi	r3, [r4, #0]
 80061c4:	b91d      	cbnz	r5, 80061ce <_printf_i+0x196>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	f023 0320 	bic.w	r3, r3, #32
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	2310      	movs	r3, #16
 80061d0:	e7b0      	b.n	8006134 <_printf_i+0xfc>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	f043 0320 	orr.w	r3, r3, #32
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	2378      	movs	r3, #120	; 0x78
 80061dc:	4828      	ldr	r0, [pc, #160]	; (8006280 <_printf_i+0x248>)
 80061de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061e2:	e7e3      	b.n	80061ac <_printf_i+0x174>
 80061e4:	065e      	lsls	r6, r3, #25
 80061e6:	bf48      	it	mi
 80061e8:	b2ad      	uxthmi	r5, r5
 80061ea:	e7e6      	b.n	80061ba <_printf_i+0x182>
 80061ec:	4616      	mov	r6, r2
 80061ee:	e7bb      	b.n	8006168 <_printf_i+0x130>
 80061f0:	680b      	ldr	r3, [r1, #0]
 80061f2:	6826      	ldr	r6, [r4, #0]
 80061f4:	6960      	ldr	r0, [r4, #20]
 80061f6:	1d1d      	adds	r5, r3, #4
 80061f8:	600d      	str	r5, [r1, #0]
 80061fa:	0635      	lsls	r5, r6, #24
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	d501      	bpl.n	8006204 <_printf_i+0x1cc>
 8006200:	6018      	str	r0, [r3, #0]
 8006202:	e002      	b.n	800620a <_printf_i+0x1d2>
 8006204:	0671      	lsls	r1, r6, #25
 8006206:	d5fb      	bpl.n	8006200 <_printf_i+0x1c8>
 8006208:	8018      	strh	r0, [r3, #0]
 800620a:	2300      	movs	r3, #0
 800620c:	6123      	str	r3, [r4, #16]
 800620e:	4616      	mov	r6, r2
 8006210:	e7ba      	b.n	8006188 <_printf_i+0x150>
 8006212:	680b      	ldr	r3, [r1, #0]
 8006214:	1d1a      	adds	r2, r3, #4
 8006216:	600a      	str	r2, [r1, #0]
 8006218:	681e      	ldr	r6, [r3, #0]
 800621a:	6862      	ldr	r2, [r4, #4]
 800621c:	2100      	movs	r1, #0
 800621e:	4630      	mov	r0, r6
 8006220:	f7f9 ffde 	bl	80001e0 <memchr>
 8006224:	b108      	cbz	r0, 800622a <_printf_i+0x1f2>
 8006226:	1b80      	subs	r0, r0, r6
 8006228:	6060      	str	r0, [r4, #4]
 800622a:	6863      	ldr	r3, [r4, #4]
 800622c:	6123      	str	r3, [r4, #16]
 800622e:	2300      	movs	r3, #0
 8006230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006234:	e7a8      	b.n	8006188 <_printf_i+0x150>
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	4632      	mov	r2, r6
 800623a:	4649      	mov	r1, r9
 800623c:	4640      	mov	r0, r8
 800623e:	47d0      	blx	sl
 8006240:	3001      	adds	r0, #1
 8006242:	d0ab      	beq.n	800619c <_printf_i+0x164>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	079b      	lsls	r3, r3, #30
 8006248:	d413      	bmi.n	8006272 <_printf_i+0x23a>
 800624a:	68e0      	ldr	r0, [r4, #12]
 800624c:	9b03      	ldr	r3, [sp, #12]
 800624e:	4298      	cmp	r0, r3
 8006250:	bfb8      	it	lt
 8006252:	4618      	movlt	r0, r3
 8006254:	e7a4      	b.n	80061a0 <_printf_i+0x168>
 8006256:	2301      	movs	r3, #1
 8006258:	4632      	mov	r2, r6
 800625a:	4649      	mov	r1, r9
 800625c:	4640      	mov	r0, r8
 800625e:	47d0      	blx	sl
 8006260:	3001      	adds	r0, #1
 8006262:	d09b      	beq.n	800619c <_printf_i+0x164>
 8006264:	3501      	adds	r5, #1
 8006266:	68e3      	ldr	r3, [r4, #12]
 8006268:	9903      	ldr	r1, [sp, #12]
 800626a:	1a5b      	subs	r3, r3, r1
 800626c:	42ab      	cmp	r3, r5
 800626e:	dcf2      	bgt.n	8006256 <_printf_i+0x21e>
 8006270:	e7eb      	b.n	800624a <_printf_i+0x212>
 8006272:	2500      	movs	r5, #0
 8006274:	f104 0619 	add.w	r6, r4, #25
 8006278:	e7f5      	b.n	8006266 <_printf_i+0x22e>
 800627a:	bf00      	nop
 800627c:	080099a6 	.word	0x080099a6
 8006280:	080099b7 	.word	0x080099b7

08006284 <iprintf>:
 8006284:	b40f      	push	{r0, r1, r2, r3}
 8006286:	4b0a      	ldr	r3, [pc, #40]	; (80062b0 <iprintf+0x2c>)
 8006288:	b513      	push	{r0, r1, r4, lr}
 800628a:	681c      	ldr	r4, [r3, #0]
 800628c:	b124      	cbz	r4, 8006298 <iprintf+0x14>
 800628e:	69a3      	ldr	r3, [r4, #24]
 8006290:	b913      	cbnz	r3, 8006298 <iprintf+0x14>
 8006292:	4620      	mov	r0, r4
 8006294:	f001 f862 	bl	800735c <__sinit>
 8006298:	ab05      	add	r3, sp, #20
 800629a:	9a04      	ldr	r2, [sp, #16]
 800629c:	68a1      	ldr	r1, [r4, #8]
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	4620      	mov	r0, r4
 80062a2:	f001 fddd 	bl	8007e60 <_vfiprintf_r>
 80062a6:	b002      	add	sp, #8
 80062a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062ac:	b004      	add	sp, #16
 80062ae:	4770      	bx	lr
 80062b0:	2000000c 	.word	0x2000000c

080062b4 <__swbuf_r>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	460e      	mov	r6, r1
 80062b8:	4614      	mov	r4, r2
 80062ba:	4605      	mov	r5, r0
 80062bc:	b118      	cbz	r0, 80062c6 <__swbuf_r+0x12>
 80062be:	6983      	ldr	r3, [r0, #24]
 80062c0:	b90b      	cbnz	r3, 80062c6 <__swbuf_r+0x12>
 80062c2:	f001 f84b 	bl	800735c <__sinit>
 80062c6:	4b21      	ldr	r3, [pc, #132]	; (800634c <__swbuf_r+0x98>)
 80062c8:	429c      	cmp	r4, r3
 80062ca:	d12b      	bne.n	8006324 <__swbuf_r+0x70>
 80062cc:	686c      	ldr	r4, [r5, #4]
 80062ce:	69a3      	ldr	r3, [r4, #24]
 80062d0:	60a3      	str	r3, [r4, #8]
 80062d2:	89a3      	ldrh	r3, [r4, #12]
 80062d4:	071a      	lsls	r2, r3, #28
 80062d6:	d52f      	bpl.n	8006338 <__swbuf_r+0x84>
 80062d8:	6923      	ldr	r3, [r4, #16]
 80062da:	b36b      	cbz	r3, 8006338 <__swbuf_r+0x84>
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	6820      	ldr	r0, [r4, #0]
 80062e0:	1ac0      	subs	r0, r0, r3
 80062e2:	6963      	ldr	r3, [r4, #20]
 80062e4:	b2f6      	uxtb	r6, r6
 80062e6:	4283      	cmp	r3, r0
 80062e8:	4637      	mov	r7, r6
 80062ea:	dc04      	bgt.n	80062f6 <__swbuf_r+0x42>
 80062ec:	4621      	mov	r1, r4
 80062ee:	4628      	mov	r0, r5
 80062f0:	f000 ffa0 	bl	8007234 <_fflush_r>
 80062f4:	bb30      	cbnz	r0, 8006344 <__swbuf_r+0x90>
 80062f6:	68a3      	ldr	r3, [r4, #8]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	60a3      	str	r3, [r4, #8]
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	6022      	str	r2, [r4, #0]
 8006302:	701e      	strb	r6, [r3, #0]
 8006304:	6963      	ldr	r3, [r4, #20]
 8006306:	3001      	adds	r0, #1
 8006308:	4283      	cmp	r3, r0
 800630a:	d004      	beq.n	8006316 <__swbuf_r+0x62>
 800630c:	89a3      	ldrh	r3, [r4, #12]
 800630e:	07db      	lsls	r3, r3, #31
 8006310:	d506      	bpl.n	8006320 <__swbuf_r+0x6c>
 8006312:	2e0a      	cmp	r6, #10
 8006314:	d104      	bne.n	8006320 <__swbuf_r+0x6c>
 8006316:	4621      	mov	r1, r4
 8006318:	4628      	mov	r0, r5
 800631a:	f000 ff8b 	bl	8007234 <_fflush_r>
 800631e:	b988      	cbnz	r0, 8006344 <__swbuf_r+0x90>
 8006320:	4638      	mov	r0, r7
 8006322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006324:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <__swbuf_r+0x9c>)
 8006326:	429c      	cmp	r4, r3
 8006328:	d101      	bne.n	800632e <__swbuf_r+0x7a>
 800632a:	68ac      	ldr	r4, [r5, #8]
 800632c:	e7cf      	b.n	80062ce <__swbuf_r+0x1a>
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <__swbuf_r+0xa0>)
 8006330:	429c      	cmp	r4, r3
 8006332:	bf08      	it	eq
 8006334:	68ec      	ldreq	r4, [r5, #12]
 8006336:	e7ca      	b.n	80062ce <__swbuf_r+0x1a>
 8006338:	4621      	mov	r1, r4
 800633a:	4628      	mov	r0, r5
 800633c:	f000 f80c 	bl	8006358 <__swsetup_r>
 8006340:	2800      	cmp	r0, #0
 8006342:	d0cb      	beq.n	80062dc <__swbuf_r+0x28>
 8006344:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006348:	e7ea      	b.n	8006320 <__swbuf_r+0x6c>
 800634a:	bf00      	nop
 800634c:	08009a7c 	.word	0x08009a7c
 8006350:	08009a9c 	.word	0x08009a9c
 8006354:	08009a5c 	.word	0x08009a5c

08006358 <__swsetup_r>:
 8006358:	4b32      	ldr	r3, [pc, #200]	; (8006424 <__swsetup_r+0xcc>)
 800635a:	b570      	push	{r4, r5, r6, lr}
 800635c:	681d      	ldr	r5, [r3, #0]
 800635e:	4606      	mov	r6, r0
 8006360:	460c      	mov	r4, r1
 8006362:	b125      	cbz	r5, 800636e <__swsetup_r+0x16>
 8006364:	69ab      	ldr	r3, [r5, #24]
 8006366:	b913      	cbnz	r3, 800636e <__swsetup_r+0x16>
 8006368:	4628      	mov	r0, r5
 800636a:	f000 fff7 	bl	800735c <__sinit>
 800636e:	4b2e      	ldr	r3, [pc, #184]	; (8006428 <__swsetup_r+0xd0>)
 8006370:	429c      	cmp	r4, r3
 8006372:	d10f      	bne.n	8006394 <__swsetup_r+0x3c>
 8006374:	686c      	ldr	r4, [r5, #4]
 8006376:	89a3      	ldrh	r3, [r4, #12]
 8006378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800637c:	0719      	lsls	r1, r3, #28
 800637e:	d42c      	bmi.n	80063da <__swsetup_r+0x82>
 8006380:	06dd      	lsls	r5, r3, #27
 8006382:	d411      	bmi.n	80063a8 <__swsetup_r+0x50>
 8006384:	2309      	movs	r3, #9
 8006386:	6033      	str	r3, [r6, #0]
 8006388:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800638c:	81a3      	strh	r3, [r4, #12]
 800638e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006392:	e03e      	b.n	8006412 <__swsetup_r+0xba>
 8006394:	4b25      	ldr	r3, [pc, #148]	; (800642c <__swsetup_r+0xd4>)
 8006396:	429c      	cmp	r4, r3
 8006398:	d101      	bne.n	800639e <__swsetup_r+0x46>
 800639a:	68ac      	ldr	r4, [r5, #8]
 800639c:	e7eb      	b.n	8006376 <__swsetup_r+0x1e>
 800639e:	4b24      	ldr	r3, [pc, #144]	; (8006430 <__swsetup_r+0xd8>)
 80063a0:	429c      	cmp	r4, r3
 80063a2:	bf08      	it	eq
 80063a4:	68ec      	ldreq	r4, [r5, #12]
 80063a6:	e7e6      	b.n	8006376 <__swsetup_r+0x1e>
 80063a8:	0758      	lsls	r0, r3, #29
 80063aa:	d512      	bpl.n	80063d2 <__swsetup_r+0x7a>
 80063ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063ae:	b141      	cbz	r1, 80063c2 <__swsetup_r+0x6a>
 80063b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063b4:	4299      	cmp	r1, r3
 80063b6:	d002      	beq.n	80063be <__swsetup_r+0x66>
 80063b8:	4630      	mov	r0, r6
 80063ba:	f001 fc7d 	bl	8007cb8 <_free_r>
 80063be:	2300      	movs	r3, #0
 80063c0:	6363      	str	r3, [r4, #52]	; 0x34
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063c8:	81a3      	strh	r3, [r4, #12]
 80063ca:	2300      	movs	r3, #0
 80063cc:	6063      	str	r3, [r4, #4]
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	f043 0308 	orr.w	r3, r3, #8
 80063d8:	81a3      	strh	r3, [r4, #12]
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	b94b      	cbnz	r3, 80063f2 <__swsetup_r+0x9a>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e8:	d003      	beq.n	80063f2 <__swsetup_r+0x9a>
 80063ea:	4621      	mov	r1, r4
 80063ec:	4630      	mov	r0, r6
 80063ee:	f001 f87f 	bl	80074f0 <__smakebuf_r>
 80063f2:	89a0      	ldrh	r0, [r4, #12]
 80063f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063f8:	f010 0301 	ands.w	r3, r0, #1
 80063fc:	d00a      	beq.n	8006414 <__swsetup_r+0xbc>
 80063fe:	2300      	movs	r3, #0
 8006400:	60a3      	str	r3, [r4, #8]
 8006402:	6963      	ldr	r3, [r4, #20]
 8006404:	425b      	negs	r3, r3
 8006406:	61a3      	str	r3, [r4, #24]
 8006408:	6923      	ldr	r3, [r4, #16]
 800640a:	b943      	cbnz	r3, 800641e <__swsetup_r+0xc6>
 800640c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006410:	d1ba      	bne.n	8006388 <__swsetup_r+0x30>
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	0781      	lsls	r1, r0, #30
 8006416:	bf58      	it	pl
 8006418:	6963      	ldrpl	r3, [r4, #20]
 800641a:	60a3      	str	r3, [r4, #8]
 800641c:	e7f4      	b.n	8006408 <__swsetup_r+0xb0>
 800641e:	2000      	movs	r0, #0
 8006420:	e7f7      	b.n	8006412 <__swsetup_r+0xba>
 8006422:	bf00      	nop
 8006424:	2000000c 	.word	0x2000000c
 8006428:	08009a7c 	.word	0x08009a7c
 800642c:	08009a9c 	.word	0x08009a9c
 8006430:	08009a5c 	.word	0x08009a5c

08006434 <quorem>:
 8006434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006438:	6903      	ldr	r3, [r0, #16]
 800643a:	690c      	ldr	r4, [r1, #16]
 800643c:	42a3      	cmp	r3, r4
 800643e:	4607      	mov	r7, r0
 8006440:	f2c0 8081 	blt.w	8006546 <quorem+0x112>
 8006444:	3c01      	subs	r4, #1
 8006446:	f101 0814 	add.w	r8, r1, #20
 800644a:	f100 0514 	add.w	r5, r0, #20
 800644e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006458:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800645c:	3301      	adds	r3, #1
 800645e:	429a      	cmp	r2, r3
 8006460:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006464:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006468:	fbb2 f6f3 	udiv	r6, r2, r3
 800646c:	d331      	bcc.n	80064d2 <quorem+0x9e>
 800646e:	f04f 0e00 	mov.w	lr, #0
 8006472:	4640      	mov	r0, r8
 8006474:	46ac      	mov	ip, r5
 8006476:	46f2      	mov	sl, lr
 8006478:	f850 2b04 	ldr.w	r2, [r0], #4
 800647c:	b293      	uxth	r3, r2
 800647e:	fb06 e303 	mla	r3, r6, r3, lr
 8006482:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006486:	b29b      	uxth	r3, r3
 8006488:	ebaa 0303 	sub.w	r3, sl, r3
 800648c:	0c12      	lsrs	r2, r2, #16
 800648e:	f8dc a000 	ldr.w	sl, [ip]
 8006492:	fb06 e202 	mla	r2, r6, r2, lr
 8006496:	fa13 f38a 	uxtah	r3, r3, sl
 800649a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800649e:	fa1f fa82 	uxth.w	sl, r2
 80064a2:	f8dc 2000 	ldr.w	r2, [ip]
 80064a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80064aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064b4:	4581      	cmp	r9, r0
 80064b6:	f84c 3b04 	str.w	r3, [ip], #4
 80064ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064be:	d2db      	bcs.n	8006478 <quorem+0x44>
 80064c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80064c4:	b92b      	cbnz	r3, 80064d2 <quorem+0x9e>
 80064c6:	9b01      	ldr	r3, [sp, #4]
 80064c8:	3b04      	subs	r3, #4
 80064ca:	429d      	cmp	r5, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	d32e      	bcc.n	800652e <quorem+0xfa>
 80064d0:	613c      	str	r4, [r7, #16]
 80064d2:	4638      	mov	r0, r7
 80064d4:	f001 fae0 	bl	8007a98 <__mcmp>
 80064d8:	2800      	cmp	r0, #0
 80064da:	db24      	blt.n	8006526 <quorem+0xf2>
 80064dc:	3601      	adds	r6, #1
 80064de:	4628      	mov	r0, r5
 80064e0:	f04f 0c00 	mov.w	ip, #0
 80064e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80064e8:	f8d0 e000 	ldr.w	lr, [r0]
 80064ec:	b293      	uxth	r3, r2
 80064ee:	ebac 0303 	sub.w	r3, ip, r3
 80064f2:	0c12      	lsrs	r2, r2, #16
 80064f4:	fa13 f38e 	uxtah	r3, r3, lr
 80064f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80064fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006500:	b29b      	uxth	r3, r3
 8006502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006506:	45c1      	cmp	r9, r8
 8006508:	f840 3b04 	str.w	r3, [r0], #4
 800650c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006510:	d2e8      	bcs.n	80064e4 <quorem+0xb0>
 8006512:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006516:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800651a:	b922      	cbnz	r2, 8006526 <quorem+0xf2>
 800651c:	3b04      	subs	r3, #4
 800651e:	429d      	cmp	r5, r3
 8006520:	461a      	mov	r2, r3
 8006522:	d30a      	bcc.n	800653a <quorem+0x106>
 8006524:	613c      	str	r4, [r7, #16]
 8006526:	4630      	mov	r0, r6
 8006528:	b003      	add	sp, #12
 800652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652e:	6812      	ldr	r2, [r2, #0]
 8006530:	3b04      	subs	r3, #4
 8006532:	2a00      	cmp	r2, #0
 8006534:	d1cc      	bne.n	80064d0 <quorem+0x9c>
 8006536:	3c01      	subs	r4, #1
 8006538:	e7c7      	b.n	80064ca <quorem+0x96>
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	3b04      	subs	r3, #4
 800653e:	2a00      	cmp	r2, #0
 8006540:	d1f0      	bne.n	8006524 <quorem+0xf0>
 8006542:	3c01      	subs	r4, #1
 8006544:	e7eb      	b.n	800651e <quorem+0xea>
 8006546:	2000      	movs	r0, #0
 8006548:	e7ee      	b.n	8006528 <quorem+0xf4>
 800654a:	0000      	movs	r0, r0
 800654c:	0000      	movs	r0, r0
	...

08006550 <_dtoa_r>:
 8006550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	ed2d 8b02 	vpush	{d8}
 8006558:	ec57 6b10 	vmov	r6, r7, d0
 800655c:	b095      	sub	sp, #84	; 0x54
 800655e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006560:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006564:	9105      	str	r1, [sp, #20]
 8006566:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800656a:	4604      	mov	r4, r0
 800656c:	9209      	str	r2, [sp, #36]	; 0x24
 800656e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006570:	b975      	cbnz	r5, 8006590 <_dtoa_r+0x40>
 8006572:	2010      	movs	r0, #16
 8006574:	f000 fffc 	bl	8007570 <malloc>
 8006578:	4602      	mov	r2, r0
 800657a:	6260      	str	r0, [r4, #36]	; 0x24
 800657c:	b920      	cbnz	r0, 8006588 <_dtoa_r+0x38>
 800657e:	4bb2      	ldr	r3, [pc, #712]	; (8006848 <_dtoa_r+0x2f8>)
 8006580:	21ea      	movs	r1, #234	; 0xea
 8006582:	48b2      	ldr	r0, [pc, #712]	; (800684c <_dtoa_r+0x2fc>)
 8006584:	f001 fe02 	bl	800818c <__assert_func>
 8006588:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800658c:	6005      	str	r5, [r0, #0]
 800658e:	60c5      	str	r5, [r0, #12]
 8006590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006592:	6819      	ldr	r1, [r3, #0]
 8006594:	b151      	cbz	r1, 80065ac <_dtoa_r+0x5c>
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	604a      	str	r2, [r1, #4]
 800659a:	2301      	movs	r3, #1
 800659c:	4093      	lsls	r3, r2
 800659e:	608b      	str	r3, [r1, #8]
 80065a0:	4620      	mov	r0, r4
 80065a2:	f001 f83b 	bl	800761c <_Bfree>
 80065a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	1e3b      	subs	r3, r7, #0
 80065ae:	bfb9      	ittee	lt
 80065b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065b4:	9303      	strlt	r3, [sp, #12]
 80065b6:	2300      	movge	r3, #0
 80065b8:	f8c8 3000 	strge.w	r3, [r8]
 80065bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80065c0:	4ba3      	ldr	r3, [pc, #652]	; (8006850 <_dtoa_r+0x300>)
 80065c2:	bfbc      	itt	lt
 80065c4:	2201      	movlt	r2, #1
 80065c6:	f8c8 2000 	strlt.w	r2, [r8]
 80065ca:	ea33 0309 	bics.w	r3, r3, r9
 80065ce:	d11b      	bne.n	8006608 <_dtoa_r+0xb8>
 80065d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065dc:	4333      	orrs	r3, r6
 80065de:	f000 857a 	beq.w	80070d6 <_dtoa_r+0xb86>
 80065e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065e4:	b963      	cbnz	r3, 8006600 <_dtoa_r+0xb0>
 80065e6:	4b9b      	ldr	r3, [pc, #620]	; (8006854 <_dtoa_r+0x304>)
 80065e8:	e024      	b.n	8006634 <_dtoa_r+0xe4>
 80065ea:	4b9b      	ldr	r3, [pc, #620]	; (8006858 <_dtoa_r+0x308>)
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	3308      	adds	r3, #8
 80065f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	9800      	ldr	r0, [sp, #0]
 80065f6:	b015      	add	sp, #84	; 0x54
 80065f8:	ecbd 8b02 	vpop	{d8}
 80065fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006600:	4b94      	ldr	r3, [pc, #592]	; (8006854 <_dtoa_r+0x304>)
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	3303      	adds	r3, #3
 8006606:	e7f3      	b.n	80065f0 <_dtoa_r+0xa0>
 8006608:	ed9d 7b02 	vldr	d7, [sp, #8]
 800660c:	2200      	movs	r2, #0
 800660e:	ec51 0b17 	vmov	r0, r1, d7
 8006612:	2300      	movs	r3, #0
 8006614:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006618:	f7fa fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800661c:	4680      	mov	r8, r0
 800661e:	b158      	cbz	r0, 8006638 <_dtoa_r+0xe8>
 8006620:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006622:	2301      	movs	r3, #1
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 8551 	beq.w	80070d0 <_dtoa_r+0xb80>
 800662e:	488b      	ldr	r0, [pc, #556]	; (800685c <_dtoa_r+0x30c>)
 8006630:	6018      	str	r0, [r3, #0]
 8006632:	1e43      	subs	r3, r0, #1
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	e7dd      	b.n	80065f4 <_dtoa_r+0xa4>
 8006638:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800663c:	aa12      	add	r2, sp, #72	; 0x48
 800663e:	a913      	add	r1, sp, #76	; 0x4c
 8006640:	4620      	mov	r0, r4
 8006642:	f001 facd 	bl	8007be0 <__d2b>
 8006646:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800664a:	4683      	mov	fp, r0
 800664c:	2d00      	cmp	r5, #0
 800664e:	d07c      	beq.n	800674a <_dtoa_r+0x1fa>
 8006650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006652:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006656:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800665a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800665e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006662:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006666:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800666a:	4b7d      	ldr	r3, [pc, #500]	; (8006860 <_dtoa_r+0x310>)
 800666c:	2200      	movs	r2, #0
 800666e:	4630      	mov	r0, r6
 8006670:	4639      	mov	r1, r7
 8006672:	f7f9 fe09 	bl	8000288 <__aeabi_dsub>
 8006676:	a36e      	add	r3, pc, #440	; (adr r3, 8006830 <_dtoa_r+0x2e0>)
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f7f9 ffbc 	bl	80005f8 <__aeabi_dmul>
 8006680:	a36d      	add	r3, pc, #436	; (adr r3, 8006838 <_dtoa_r+0x2e8>)
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f7f9 fe01 	bl	800028c <__adddf3>
 800668a:	4606      	mov	r6, r0
 800668c:	4628      	mov	r0, r5
 800668e:	460f      	mov	r7, r1
 8006690:	f7f9 ff48 	bl	8000524 <__aeabi_i2d>
 8006694:	a36a      	add	r3, pc, #424	; (adr r3, 8006840 <_dtoa_r+0x2f0>)
 8006696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669a:	f7f9 ffad 	bl	80005f8 <__aeabi_dmul>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4630      	mov	r0, r6
 80066a4:	4639      	mov	r1, r7
 80066a6:	f7f9 fdf1 	bl	800028c <__adddf3>
 80066aa:	4606      	mov	r6, r0
 80066ac:	460f      	mov	r7, r1
 80066ae:	f7fa fa53 	bl	8000b58 <__aeabi_d2iz>
 80066b2:	2200      	movs	r2, #0
 80066b4:	4682      	mov	sl, r0
 80066b6:	2300      	movs	r3, #0
 80066b8:	4630      	mov	r0, r6
 80066ba:	4639      	mov	r1, r7
 80066bc:	f7fa fa0e 	bl	8000adc <__aeabi_dcmplt>
 80066c0:	b148      	cbz	r0, 80066d6 <_dtoa_r+0x186>
 80066c2:	4650      	mov	r0, sl
 80066c4:	f7f9 ff2e 	bl	8000524 <__aeabi_i2d>
 80066c8:	4632      	mov	r2, r6
 80066ca:	463b      	mov	r3, r7
 80066cc:	f7fa f9fc 	bl	8000ac8 <__aeabi_dcmpeq>
 80066d0:	b908      	cbnz	r0, 80066d6 <_dtoa_r+0x186>
 80066d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80066d6:	f1ba 0f16 	cmp.w	sl, #22
 80066da:	d854      	bhi.n	8006786 <_dtoa_r+0x236>
 80066dc:	4b61      	ldr	r3, [pc, #388]	; (8006864 <_dtoa_r+0x314>)
 80066de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066ea:	f7fa f9f7 	bl	8000adc <__aeabi_dcmplt>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d04b      	beq.n	800678a <_dtoa_r+0x23a>
 80066f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80066f6:	2300      	movs	r3, #0
 80066f8:	930e      	str	r3, [sp, #56]	; 0x38
 80066fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066fc:	1b5d      	subs	r5, r3, r5
 80066fe:	1e6b      	subs	r3, r5, #1
 8006700:	9304      	str	r3, [sp, #16]
 8006702:	bf43      	ittte	mi
 8006704:	2300      	movmi	r3, #0
 8006706:	f1c5 0801 	rsbmi	r8, r5, #1
 800670a:	9304      	strmi	r3, [sp, #16]
 800670c:	f04f 0800 	movpl.w	r8, #0
 8006710:	f1ba 0f00 	cmp.w	sl, #0
 8006714:	db3b      	blt.n	800678e <_dtoa_r+0x23e>
 8006716:	9b04      	ldr	r3, [sp, #16]
 8006718:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800671c:	4453      	add	r3, sl
 800671e:	9304      	str	r3, [sp, #16]
 8006720:	2300      	movs	r3, #0
 8006722:	9306      	str	r3, [sp, #24]
 8006724:	9b05      	ldr	r3, [sp, #20]
 8006726:	2b09      	cmp	r3, #9
 8006728:	d869      	bhi.n	80067fe <_dtoa_r+0x2ae>
 800672a:	2b05      	cmp	r3, #5
 800672c:	bfc4      	itt	gt
 800672e:	3b04      	subgt	r3, #4
 8006730:	9305      	strgt	r3, [sp, #20]
 8006732:	9b05      	ldr	r3, [sp, #20]
 8006734:	f1a3 0302 	sub.w	r3, r3, #2
 8006738:	bfcc      	ite	gt
 800673a:	2500      	movgt	r5, #0
 800673c:	2501      	movle	r5, #1
 800673e:	2b03      	cmp	r3, #3
 8006740:	d869      	bhi.n	8006816 <_dtoa_r+0x2c6>
 8006742:	e8df f003 	tbb	[pc, r3]
 8006746:	4e2c      	.short	0x4e2c
 8006748:	5a4c      	.short	0x5a4c
 800674a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800674e:	441d      	add	r5, r3
 8006750:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006754:	2b20      	cmp	r3, #32
 8006756:	bfc1      	itttt	gt
 8006758:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800675c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006760:	fa09 f303 	lslgt.w	r3, r9, r3
 8006764:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006768:	bfda      	itte	le
 800676a:	f1c3 0320 	rsble	r3, r3, #32
 800676e:	fa06 f003 	lslle.w	r0, r6, r3
 8006772:	4318      	orrgt	r0, r3
 8006774:	f7f9 fec6 	bl	8000504 <__aeabi_ui2d>
 8006778:	2301      	movs	r3, #1
 800677a:	4606      	mov	r6, r0
 800677c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006780:	3d01      	subs	r5, #1
 8006782:	9310      	str	r3, [sp, #64]	; 0x40
 8006784:	e771      	b.n	800666a <_dtoa_r+0x11a>
 8006786:	2301      	movs	r3, #1
 8006788:	e7b6      	b.n	80066f8 <_dtoa_r+0x1a8>
 800678a:	900e      	str	r0, [sp, #56]	; 0x38
 800678c:	e7b5      	b.n	80066fa <_dtoa_r+0x1aa>
 800678e:	f1ca 0300 	rsb	r3, sl, #0
 8006792:	9306      	str	r3, [sp, #24]
 8006794:	2300      	movs	r3, #0
 8006796:	eba8 080a 	sub.w	r8, r8, sl
 800679a:	930d      	str	r3, [sp, #52]	; 0x34
 800679c:	e7c2      	b.n	8006724 <_dtoa_r+0x1d4>
 800679e:	2300      	movs	r3, #0
 80067a0:	9308      	str	r3, [sp, #32]
 80067a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	dc39      	bgt.n	800681c <_dtoa_r+0x2cc>
 80067a8:	f04f 0901 	mov.w	r9, #1
 80067ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80067b0:	464b      	mov	r3, r9
 80067b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80067b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80067b8:	2200      	movs	r2, #0
 80067ba:	6042      	str	r2, [r0, #4]
 80067bc:	2204      	movs	r2, #4
 80067be:	f102 0614 	add.w	r6, r2, #20
 80067c2:	429e      	cmp	r6, r3
 80067c4:	6841      	ldr	r1, [r0, #4]
 80067c6:	d92f      	bls.n	8006828 <_dtoa_r+0x2d8>
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 fee7 	bl	800759c <_Balloc>
 80067ce:	9000      	str	r0, [sp, #0]
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d14b      	bne.n	800686c <_dtoa_r+0x31c>
 80067d4:	4b24      	ldr	r3, [pc, #144]	; (8006868 <_dtoa_r+0x318>)
 80067d6:	4602      	mov	r2, r0
 80067d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80067dc:	e6d1      	b.n	8006582 <_dtoa_r+0x32>
 80067de:	2301      	movs	r3, #1
 80067e0:	e7de      	b.n	80067a0 <_dtoa_r+0x250>
 80067e2:	2300      	movs	r3, #0
 80067e4:	9308      	str	r3, [sp, #32]
 80067e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e8:	eb0a 0903 	add.w	r9, sl, r3
 80067ec:	f109 0301 	add.w	r3, r9, #1
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	bfb8      	it	lt
 80067f6:	2301      	movlt	r3, #1
 80067f8:	e7dd      	b.n	80067b6 <_dtoa_r+0x266>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e7f2      	b.n	80067e4 <_dtoa_r+0x294>
 80067fe:	2501      	movs	r5, #1
 8006800:	2300      	movs	r3, #0
 8006802:	9305      	str	r3, [sp, #20]
 8006804:	9508      	str	r5, [sp, #32]
 8006806:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800680a:	2200      	movs	r2, #0
 800680c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006810:	2312      	movs	r3, #18
 8006812:	9209      	str	r2, [sp, #36]	; 0x24
 8006814:	e7cf      	b.n	80067b6 <_dtoa_r+0x266>
 8006816:	2301      	movs	r3, #1
 8006818:	9308      	str	r3, [sp, #32]
 800681a:	e7f4      	b.n	8006806 <_dtoa_r+0x2b6>
 800681c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006820:	f8cd 9004 	str.w	r9, [sp, #4]
 8006824:	464b      	mov	r3, r9
 8006826:	e7c6      	b.n	80067b6 <_dtoa_r+0x266>
 8006828:	3101      	adds	r1, #1
 800682a:	6041      	str	r1, [r0, #4]
 800682c:	0052      	lsls	r2, r2, #1
 800682e:	e7c6      	b.n	80067be <_dtoa_r+0x26e>
 8006830:	636f4361 	.word	0x636f4361
 8006834:	3fd287a7 	.word	0x3fd287a7
 8006838:	8b60c8b3 	.word	0x8b60c8b3
 800683c:	3fc68a28 	.word	0x3fc68a28
 8006840:	509f79fb 	.word	0x509f79fb
 8006844:	3fd34413 	.word	0x3fd34413
 8006848:	080099d5 	.word	0x080099d5
 800684c:	080099ec 	.word	0x080099ec
 8006850:	7ff00000 	.word	0x7ff00000
 8006854:	080099d1 	.word	0x080099d1
 8006858:	080099c8 	.word	0x080099c8
 800685c:	080099a5 	.word	0x080099a5
 8006860:	3ff80000 	.word	0x3ff80000
 8006864:	08009b48 	.word	0x08009b48
 8006868:	08009a4b 	.word	0x08009a4b
 800686c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800686e:	9a00      	ldr	r2, [sp, #0]
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	9b01      	ldr	r3, [sp, #4]
 8006874:	2b0e      	cmp	r3, #14
 8006876:	f200 80ad 	bhi.w	80069d4 <_dtoa_r+0x484>
 800687a:	2d00      	cmp	r5, #0
 800687c:	f000 80aa 	beq.w	80069d4 <_dtoa_r+0x484>
 8006880:	f1ba 0f00 	cmp.w	sl, #0
 8006884:	dd36      	ble.n	80068f4 <_dtoa_r+0x3a4>
 8006886:	4ac3      	ldr	r2, [pc, #780]	; (8006b94 <_dtoa_r+0x644>)
 8006888:	f00a 030f 	and.w	r3, sl, #15
 800688c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006890:	ed93 7b00 	vldr	d7, [r3]
 8006894:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006898:	ea4f 172a 	mov.w	r7, sl, asr #4
 800689c:	eeb0 8a47 	vmov.f32	s16, s14
 80068a0:	eef0 8a67 	vmov.f32	s17, s15
 80068a4:	d016      	beq.n	80068d4 <_dtoa_r+0x384>
 80068a6:	4bbc      	ldr	r3, [pc, #752]	; (8006b98 <_dtoa_r+0x648>)
 80068a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068b0:	f7f9 ffcc 	bl	800084c <__aeabi_ddiv>
 80068b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068b8:	f007 070f 	and.w	r7, r7, #15
 80068bc:	2503      	movs	r5, #3
 80068be:	4eb6      	ldr	r6, [pc, #728]	; (8006b98 <_dtoa_r+0x648>)
 80068c0:	b957      	cbnz	r7, 80068d8 <_dtoa_r+0x388>
 80068c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068c6:	ec53 2b18 	vmov	r2, r3, d8
 80068ca:	f7f9 ffbf 	bl	800084c <__aeabi_ddiv>
 80068ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068d2:	e029      	b.n	8006928 <_dtoa_r+0x3d8>
 80068d4:	2502      	movs	r5, #2
 80068d6:	e7f2      	b.n	80068be <_dtoa_r+0x36e>
 80068d8:	07f9      	lsls	r1, r7, #31
 80068da:	d508      	bpl.n	80068ee <_dtoa_r+0x39e>
 80068dc:	ec51 0b18 	vmov	r0, r1, d8
 80068e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068e4:	f7f9 fe88 	bl	80005f8 <__aeabi_dmul>
 80068e8:	ec41 0b18 	vmov	d8, r0, r1
 80068ec:	3501      	adds	r5, #1
 80068ee:	107f      	asrs	r7, r7, #1
 80068f0:	3608      	adds	r6, #8
 80068f2:	e7e5      	b.n	80068c0 <_dtoa_r+0x370>
 80068f4:	f000 80a6 	beq.w	8006a44 <_dtoa_r+0x4f4>
 80068f8:	f1ca 0600 	rsb	r6, sl, #0
 80068fc:	4ba5      	ldr	r3, [pc, #660]	; (8006b94 <_dtoa_r+0x644>)
 80068fe:	4fa6      	ldr	r7, [pc, #664]	; (8006b98 <_dtoa_r+0x648>)
 8006900:	f006 020f 	and.w	r2, r6, #15
 8006904:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006910:	f7f9 fe72 	bl	80005f8 <__aeabi_dmul>
 8006914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006918:	1136      	asrs	r6, r6, #4
 800691a:	2300      	movs	r3, #0
 800691c:	2502      	movs	r5, #2
 800691e:	2e00      	cmp	r6, #0
 8006920:	f040 8085 	bne.w	8006a2e <_dtoa_r+0x4de>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1d2      	bne.n	80068ce <_dtoa_r+0x37e>
 8006928:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 808c 	beq.w	8006a48 <_dtoa_r+0x4f8>
 8006930:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006934:	4b99      	ldr	r3, [pc, #612]	; (8006b9c <_dtoa_r+0x64c>)
 8006936:	2200      	movs	r2, #0
 8006938:	4630      	mov	r0, r6
 800693a:	4639      	mov	r1, r7
 800693c:	f7fa f8ce 	bl	8000adc <__aeabi_dcmplt>
 8006940:	2800      	cmp	r0, #0
 8006942:	f000 8081 	beq.w	8006a48 <_dtoa_r+0x4f8>
 8006946:	9b01      	ldr	r3, [sp, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d07d      	beq.n	8006a48 <_dtoa_r+0x4f8>
 800694c:	f1b9 0f00 	cmp.w	r9, #0
 8006950:	dd3c      	ble.n	80069cc <_dtoa_r+0x47c>
 8006952:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006956:	9307      	str	r3, [sp, #28]
 8006958:	2200      	movs	r2, #0
 800695a:	4b91      	ldr	r3, [pc, #580]	; (8006ba0 <_dtoa_r+0x650>)
 800695c:	4630      	mov	r0, r6
 800695e:	4639      	mov	r1, r7
 8006960:	f7f9 fe4a 	bl	80005f8 <__aeabi_dmul>
 8006964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006968:	3501      	adds	r5, #1
 800696a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800696e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006972:	4628      	mov	r0, r5
 8006974:	f7f9 fdd6 	bl	8000524 <__aeabi_i2d>
 8006978:	4632      	mov	r2, r6
 800697a:	463b      	mov	r3, r7
 800697c:	f7f9 fe3c 	bl	80005f8 <__aeabi_dmul>
 8006980:	4b88      	ldr	r3, [pc, #544]	; (8006ba4 <_dtoa_r+0x654>)
 8006982:	2200      	movs	r2, #0
 8006984:	f7f9 fc82 	bl	800028c <__adddf3>
 8006988:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800698c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006990:	9303      	str	r3, [sp, #12]
 8006992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006994:	2b00      	cmp	r3, #0
 8006996:	d15c      	bne.n	8006a52 <_dtoa_r+0x502>
 8006998:	4b83      	ldr	r3, [pc, #524]	; (8006ba8 <_dtoa_r+0x658>)
 800699a:	2200      	movs	r2, #0
 800699c:	4630      	mov	r0, r6
 800699e:	4639      	mov	r1, r7
 80069a0:	f7f9 fc72 	bl	8000288 <__aeabi_dsub>
 80069a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069a8:	4606      	mov	r6, r0
 80069aa:	460f      	mov	r7, r1
 80069ac:	f7fa f8b4 	bl	8000b18 <__aeabi_dcmpgt>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	f040 8296 	bne.w	8006ee2 <_dtoa_r+0x992>
 80069b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80069ba:	4630      	mov	r0, r6
 80069bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069c0:	4639      	mov	r1, r7
 80069c2:	f7fa f88b 	bl	8000adc <__aeabi_dcmplt>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	f040 8288 	bne.w	8006edc <_dtoa_r+0x98c>
 80069cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f2c0 8158 	blt.w	8006c8c <_dtoa_r+0x73c>
 80069dc:	f1ba 0f0e 	cmp.w	sl, #14
 80069e0:	f300 8154 	bgt.w	8006c8c <_dtoa_r+0x73c>
 80069e4:	4b6b      	ldr	r3, [pc, #428]	; (8006b94 <_dtoa_r+0x644>)
 80069e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f280 80e3 	bge.w	8006bbc <_dtoa_r+0x66c>
 80069f6:	9b01      	ldr	r3, [sp, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f300 80df 	bgt.w	8006bbc <_dtoa_r+0x66c>
 80069fe:	f040 826d 	bne.w	8006edc <_dtoa_r+0x98c>
 8006a02:	4b69      	ldr	r3, [pc, #420]	; (8006ba8 <_dtoa_r+0x658>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	4640      	mov	r0, r8
 8006a08:	4649      	mov	r1, r9
 8006a0a:	f7f9 fdf5 	bl	80005f8 <__aeabi_dmul>
 8006a0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a12:	f7fa f877 	bl	8000b04 <__aeabi_dcmpge>
 8006a16:	9e01      	ldr	r6, [sp, #4]
 8006a18:	4637      	mov	r7, r6
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	f040 8243 	bne.w	8006ea6 <_dtoa_r+0x956>
 8006a20:	9d00      	ldr	r5, [sp, #0]
 8006a22:	2331      	movs	r3, #49	; 0x31
 8006a24:	f805 3b01 	strb.w	r3, [r5], #1
 8006a28:	f10a 0a01 	add.w	sl, sl, #1
 8006a2c:	e23f      	b.n	8006eae <_dtoa_r+0x95e>
 8006a2e:	07f2      	lsls	r2, r6, #31
 8006a30:	d505      	bpl.n	8006a3e <_dtoa_r+0x4ee>
 8006a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a36:	f7f9 fddf 	bl	80005f8 <__aeabi_dmul>
 8006a3a:	3501      	adds	r5, #1
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	1076      	asrs	r6, r6, #1
 8006a40:	3708      	adds	r7, #8
 8006a42:	e76c      	b.n	800691e <_dtoa_r+0x3ce>
 8006a44:	2502      	movs	r5, #2
 8006a46:	e76f      	b.n	8006928 <_dtoa_r+0x3d8>
 8006a48:	9b01      	ldr	r3, [sp, #4]
 8006a4a:	f8cd a01c 	str.w	sl, [sp, #28]
 8006a4e:	930c      	str	r3, [sp, #48]	; 0x30
 8006a50:	e78d      	b.n	800696e <_dtoa_r+0x41e>
 8006a52:	9900      	ldr	r1, [sp, #0]
 8006a54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006a56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a58:	4b4e      	ldr	r3, [pc, #312]	; (8006b94 <_dtoa_r+0x644>)
 8006a5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a5e:	4401      	add	r1, r0
 8006a60:	9102      	str	r1, [sp, #8]
 8006a62:	9908      	ldr	r1, [sp, #32]
 8006a64:	eeb0 8a47 	vmov.f32	s16, s14
 8006a68:	eef0 8a67 	vmov.f32	s17, s15
 8006a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a74:	2900      	cmp	r1, #0
 8006a76:	d045      	beq.n	8006b04 <_dtoa_r+0x5b4>
 8006a78:	494c      	ldr	r1, [pc, #304]	; (8006bac <_dtoa_r+0x65c>)
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	f7f9 fee6 	bl	800084c <__aeabi_ddiv>
 8006a80:	ec53 2b18 	vmov	r2, r3, d8
 8006a84:	f7f9 fc00 	bl	8000288 <__aeabi_dsub>
 8006a88:	9d00      	ldr	r5, [sp, #0]
 8006a8a:	ec41 0b18 	vmov	d8, r0, r1
 8006a8e:	4639      	mov	r1, r7
 8006a90:	4630      	mov	r0, r6
 8006a92:	f7fa f861 	bl	8000b58 <__aeabi_d2iz>
 8006a96:	900c      	str	r0, [sp, #48]	; 0x30
 8006a98:	f7f9 fd44 	bl	8000524 <__aeabi_i2d>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	4639      	mov	r1, r7
 8006aa4:	f7f9 fbf0 	bl	8000288 <__aeabi_dsub>
 8006aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aaa:	3330      	adds	r3, #48	; 0x30
 8006aac:	f805 3b01 	strb.w	r3, [r5], #1
 8006ab0:	ec53 2b18 	vmov	r2, r3, d8
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	460f      	mov	r7, r1
 8006ab8:	f7fa f810 	bl	8000adc <__aeabi_dcmplt>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d165      	bne.n	8006b8c <_dtoa_r+0x63c>
 8006ac0:	4632      	mov	r2, r6
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	4935      	ldr	r1, [pc, #212]	; (8006b9c <_dtoa_r+0x64c>)
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	f7f9 fbde 	bl	8000288 <__aeabi_dsub>
 8006acc:	ec53 2b18 	vmov	r2, r3, d8
 8006ad0:	f7fa f804 	bl	8000adc <__aeabi_dcmplt>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	f040 80b9 	bne.w	8006c4c <_dtoa_r+0x6fc>
 8006ada:	9b02      	ldr	r3, [sp, #8]
 8006adc:	429d      	cmp	r5, r3
 8006ade:	f43f af75 	beq.w	80069cc <_dtoa_r+0x47c>
 8006ae2:	4b2f      	ldr	r3, [pc, #188]	; (8006ba0 <_dtoa_r+0x650>)
 8006ae4:	ec51 0b18 	vmov	r0, r1, d8
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f7f9 fd85 	bl	80005f8 <__aeabi_dmul>
 8006aee:	4b2c      	ldr	r3, [pc, #176]	; (8006ba0 <_dtoa_r+0x650>)
 8006af0:	ec41 0b18 	vmov	d8, r0, r1
 8006af4:	2200      	movs	r2, #0
 8006af6:	4630      	mov	r0, r6
 8006af8:	4639      	mov	r1, r7
 8006afa:	f7f9 fd7d 	bl	80005f8 <__aeabi_dmul>
 8006afe:	4606      	mov	r6, r0
 8006b00:	460f      	mov	r7, r1
 8006b02:	e7c4      	b.n	8006a8e <_dtoa_r+0x53e>
 8006b04:	ec51 0b17 	vmov	r0, r1, d7
 8006b08:	f7f9 fd76 	bl	80005f8 <__aeabi_dmul>
 8006b0c:	9b02      	ldr	r3, [sp, #8]
 8006b0e:	9d00      	ldr	r5, [sp, #0]
 8006b10:	930c      	str	r3, [sp, #48]	; 0x30
 8006b12:	ec41 0b18 	vmov	d8, r0, r1
 8006b16:	4639      	mov	r1, r7
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f7fa f81d 	bl	8000b58 <__aeabi_d2iz>
 8006b1e:	9011      	str	r0, [sp, #68]	; 0x44
 8006b20:	f7f9 fd00 	bl	8000524 <__aeabi_i2d>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f7f9 fbac 	bl	8000288 <__aeabi_dsub>
 8006b30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b32:	3330      	adds	r3, #48	; 0x30
 8006b34:	f805 3b01 	strb.w	r3, [r5], #1
 8006b38:	9b02      	ldr	r3, [sp, #8]
 8006b3a:	429d      	cmp	r5, r3
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	460f      	mov	r7, r1
 8006b40:	f04f 0200 	mov.w	r2, #0
 8006b44:	d134      	bne.n	8006bb0 <_dtoa_r+0x660>
 8006b46:	4b19      	ldr	r3, [pc, #100]	; (8006bac <_dtoa_r+0x65c>)
 8006b48:	ec51 0b18 	vmov	r0, r1, d8
 8006b4c:	f7f9 fb9e 	bl	800028c <__adddf3>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4630      	mov	r0, r6
 8006b56:	4639      	mov	r1, r7
 8006b58:	f7f9 ffde 	bl	8000b18 <__aeabi_dcmpgt>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d175      	bne.n	8006c4c <_dtoa_r+0x6fc>
 8006b60:	ec53 2b18 	vmov	r2, r3, d8
 8006b64:	4911      	ldr	r1, [pc, #68]	; (8006bac <_dtoa_r+0x65c>)
 8006b66:	2000      	movs	r0, #0
 8006b68:	f7f9 fb8e 	bl	8000288 <__aeabi_dsub>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4630      	mov	r0, r6
 8006b72:	4639      	mov	r1, r7
 8006b74:	f7f9 ffb2 	bl	8000adc <__aeabi_dcmplt>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	f43f af27 	beq.w	80069cc <_dtoa_r+0x47c>
 8006b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b80:	1e6b      	subs	r3, r5, #1
 8006b82:	930c      	str	r3, [sp, #48]	; 0x30
 8006b84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b88:	2b30      	cmp	r3, #48	; 0x30
 8006b8a:	d0f8      	beq.n	8006b7e <_dtoa_r+0x62e>
 8006b8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006b90:	e04a      	b.n	8006c28 <_dtoa_r+0x6d8>
 8006b92:	bf00      	nop
 8006b94:	08009b48 	.word	0x08009b48
 8006b98:	08009b20 	.word	0x08009b20
 8006b9c:	3ff00000 	.word	0x3ff00000
 8006ba0:	40240000 	.word	0x40240000
 8006ba4:	401c0000 	.word	0x401c0000
 8006ba8:	40140000 	.word	0x40140000
 8006bac:	3fe00000 	.word	0x3fe00000
 8006bb0:	4baf      	ldr	r3, [pc, #700]	; (8006e70 <_dtoa_r+0x920>)
 8006bb2:	f7f9 fd21 	bl	80005f8 <__aeabi_dmul>
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	460f      	mov	r7, r1
 8006bba:	e7ac      	b.n	8006b16 <_dtoa_r+0x5c6>
 8006bbc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006bc0:	9d00      	ldr	r5, [sp, #0]
 8006bc2:	4642      	mov	r2, r8
 8006bc4:	464b      	mov	r3, r9
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	4639      	mov	r1, r7
 8006bca:	f7f9 fe3f 	bl	800084c <__aeabi_ddiv>
 8006bce:	f7f9 ffc3 	bl	8000b58 <__aeabi_d2iz>
 8006bd2:	9002      	str	r0, [sp, #8]
 8006bd4:	f7f9 fca6 	bl	8000524 <__aeabi_i2d>
 8006bd8:	4642      	mov	r2, r8
 8006bda:	464b      	mov	r3, r9
 8006bdc:	f7f9 fd0c 	bl	80005f8 <__aeabi_dmul>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	4630      	mov	r0, r6
 8006be6:	4639      	mov	r1, r7
 8006be8:	f7f9 fb4e 	bl	8000288 <__aeabi_dsub>
 8006bec:	9e02      	ldr	r6, [sp, #8]
 8006bee:	9f01      	ldr	r7, [sp, #4]
 8006bf0:	3630      	adds	r6, #48	; 0x30
 8006bf2:	f805 6b01 	strb.w	r6, [r5], #1
 8006bf6:	9e00      	ldr	r6, [sp, #0]
 8006bf8:	1bae      	subs	r6, r5, r6
 8006bfa:	42b7      	cmp	r7, r6
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	d137      	bne.n	8006c72 <_dtoa_r+0x722>
 8006c02:	f7f9 fb43 	bl	800028c <__adddf3>
 8006c06:	4642      	mov	r2, r8
 8006c08:	464b      	mov	r3, r9
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	460f      	mov	r7, r1
 8006c0e:	f7f9 ff83 	bl	8000b18 <__aeabi_dcmpgt>
 8006c12:	b9c8      	cbnz	r0, 8006c48 <_dtoa_r+0x6f8>
 8006c14:	4642      	mov	r2, r8
 8006c16:	464b      	mov	r3, r9
 8006c18:	4630      	mov	r0, r6
 8006c1a:	4639      	mov	r1, r7
 8006c1c:	f7f9 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c20:	b110      	cbz	r0, 8006c28 <_dtoa_r+0x6d8>
 8006c22:	9b02      	ldr	r3, [sp, #8]
 8006c24:	07d9      	lsls	r1, r3, #31
 8006c26:	d40f      	bmi.n	8006c48 <_dtoa_r+0x6f8>
 8006c28:	4620      	mov	r0, r4
 8006c2a:	4659      	mov	r1, fp
 8006c2c:	f000 fcf6 	bl	800761c <_Bfree>
 8006c30:	2300      	movs	r3, #0
 8006c32:	702b      	strb	r3, [r5, #0]
 8006c34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c36:	f10a 0001 	add.w	r0, sl, #1
 8006c3a:	6018      	str	r0, [r3, #0]
 8006c3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f43f acd8 	beq.w	80065f4 <_dtoa_r+0xa4>
 8006c44:	601d      	str	r5, [r3, #0]
 8006c46:	e4d5      	b.n	80065f4 <_dtoa_r+0xa4>
 8006c48:	f8cd a01c 	str.w	sl, [sp, #28]
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	461d      	mov	r5, r3
 8006c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c54:	2a39      	cmp	r2, #57	; 0x39
 8006c56:	d108      	bne.n	8006c6a <_dtoa_r+0x71a>
 8006c58:	9a00      	ldr	r2, [sp, #0]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d1f7      	bne.n	8006c4e <_dtoa_r+0x6fe>
 8006c5e:	9a07      	ldr	r2, [sp, #28]
 8006c60:	9900      	ldr	r1, [sp, #0]
 8006c62:	3201      	adds	r2, #1
 8006c64:	9207      	str	r2, [sp, #28]
 8006c66:	2230      	movs	r2, #48	; 0x30
 8006c68:	700a      	strb	r2, [r1, #0]
 8006c6a:	781a      	ldrb	r2, [r3, #0]
 8006c6c:	3201      	adds	r2, #1
 8006c6e:	701a      	strb	r2, [r3, #0]
 8006c70:	e78c      	b.n	8006b8c <_dtoa_r+0x63c>
 8006c72:	4b7f      	ldr	r3, [pc, #508]	; (8006e70 <_dtoa_r+0x920>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	f7f9 fcbf 	bl	80005f8 <__aeabi_dmul>
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	4606      	mov	r6, r0
 8006c80:	460f      	mov	r7, r1
 8006c82:	f7f9 ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d09b      	beq.n	8006bc2 <_dtoa_r+0x672>
 8006c8a:	e7cd      	b.n	8006c28 <_dtoa_r+0x6d8>
 8006c8c:	9a08      	ldr	r2, [sp, #32]
 8006c8e:	2a00      	cmp	r2, #0
 8006c90:	f000 80c4 	beq.w	8006e1c <_dtoa_r+0x8cc>
 8006c94:	9a05      	ldr	r2, [sp, #20]
 8006c96:	2a01      	cmp	r2, #1
 8006c98:	f300 80a8 	bgt.w	8006dec <_dtoa_r+0x89c>
 8006c9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c9e:	2a00      	cmp	r2, #0
 8006ca0:	f000 80a0 	beq.w	8006de4 <_dtoa_r+0x894>
 8006ca4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ca8:	9e06      	ldr	r6, [sp, #24]
 8006caa:	4645      	mov	r5, r8
 8006cac:	9a04      	ldr	r2, [sp, #16]
 8006cae:	2101      	movs	r1, #1
 8006cb0:	441a      	add	r2, r3
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	4498      	add	r8, r3
 8006cb6:	9204      	str	r2, [sp, #16]
 8006cb8:	f000 fd6c 	bl	8007794 <__i2b>
 8006cbc:	4607      	mov	r7, r0
 8006cbe:	2d00      	cmp	r5, #0
 8006cc0:	dd0b      	ble.n	8006cda <_dtoa_r+0x78a>
 8006cc2:	9b04      	ldr	r3, [sp, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	dd08      	ble.n	8006cda <_dtoa_r+0x78a>
 8006cc8:	42ab      	cmp	r3, r5
 8006cca:	9a04      	ldr	r2, [sp, #16]
 8006ccc:	bfa8      	it	ge
 8006cce:	462b      	movge	r3, r5
 8006cd0:	eba8 0803 	sub.w	r8, r8, r3
 8006cd4:	1aed      	subs	r5, r5, r3
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	9304      	str	r3, [sp, #16]
 8006cda:	9b06      	ldr	r3, [sp, #24]
 8006cdc:	b1fb      	cbz	r3, 8006d1e <_dtoa_r+0x7ce>
 8006cde:	9b08      	ldr	r3, [sp, #32]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 809f 	beq.w	8006e24 <_dtoa_r+0x8d4>
 8006ce6:	2e00      	cmp	r6, #0
 8006ce8:	dd11      	ble.n	8006d0e <_dtoa_r+0x7be>
 8006cea:	4639      	mov	r1, r7
 8006cec:	4632      	mov	r2, r6
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f000 fe0c 	bl	800790c <__pow5mult>
 8006cf4:	465a      	mov	r2, fp
 8006cf6:	4601      	mov	r1, r0
 8006cf8:	4607      	mov	r7, r0
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f000 fd60 	bl	80077c0 <__multiply>
 8006d00:	4659      	mov	r1, fp
 8006d02:	9007      	str	r0, [sp, #28]
 8006d04:	4620      	mov	r0, r4
 8006d06:	f000 fc89 	bl	800761c <_Bfree>
 8006d0a:	9b07      	ldr	r3, [sp, #28]
 8006d0c:	469b      	mov	fp, r3
 8006d0e:	9b06      	ldr	r3, [sp, #24]
 8006d10:	1b9a      	subs	r2, r3, r6
 8006d12:	d004      	beq.n	8006d1e <_dtoa_r+0x7ce>
 8006d14:	4659      	mov	r1, fp
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 fdf8 	bl	800790c <__pow5mult>
 8006d1c:	4683      	mov	fp, r0
 8006d1e:	2101      	movs	r1, #1
 8006d20:	4620      	mov	r0, r4
 8006d22:	f000 fd37 	bl	8007794 <__i2b>
 8006d26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	dd7c      	ble.n	8006e28 <_dtoa_r+0x8d8>
 8006d2e:	461a      	mov	r2, r3
 8006d30:	4601      	mov	r1, r0
 8006d32:	4620      	mov	r0, r4
 8006d34:	f000 fdea 	bl	800790c <__pow5mult>
 8006d38:	9b05      	ldr	r3, [sp, #20]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	dd76      	ble.n	8006e2e <_dtoa_r+0x8de>
 8006d40:	2300      	movs	r3, #0
 8006d42:	9306      	str	r3, [sp, #24]
 8006d44:	6933      	ldr	r3, [r6, #16]
 8006d46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d4a:	6918      	ldr	r0, [r3, #16]
 8006d4c:	f000 fcd2 	bl	80076f4 <__hi0bits>
 8006d50:	f1c0 0020 	rsb	r0, r0, #32
 8006d54:	9b04      	ldr	r3, [sp, #16]
 8006d56:	4418      	add	r0, r3
 8006d58:	f010 001f 	ands.w	r0, r0, #31
 8006d5c:	f000 8086 	beq.w	8006e6c <_dtoa_r+0x91c>
 8006d60:	f1c0 0320 	rsb	r3, r0, #32
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	dd7f      	ble.n	8006e68 <_dtoa_r+0x918>
 8006d68:	f1c0 001c 	rsb	r0, r0, #28
 8006d6c:	9b04      	ldr	r3, [sp, #16]
 8006d6e:	4403      	add	r3, r0
 8006d70:	4480      	add	r8, r0
 8006d72:	4405      	add	r5, r0
 8006d74:	9304      	str	r3, [sp, #16]
 8006d76:	f1b8 0f00 	cmp.w	r8, #0
 8006d7a:	dd05      	ble.n	8006d88 <_dtoa_r+0x838>
 8006d7c:	4659      	mov	r1, fp
 8006d7e:	4642      	mov	r2, r8
 8006d80:	4620      	mov	r0, r4
 8006d82:	f000 fe1d 	bl	80079c0 <__lshift>
 8006d86:	4683      	mov	fp, r0
 8006d88:	9b04      	ldr	r3, [sp, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	dd05      	ble.n	8006d9a <_dtoa_r+0x84a>
 8006d8e:	4631      	mov	r1, r6
 8006d90:	461a      	mov	r2, r3
 8006d92:	4620      	mov	r0, r4
 8006d94:	f000 fe14 	bl	80079c0 <__lshift>
 8006d98:	4606      	mov	r6, r0
 8006d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d069      	beq.n	8006e74 <_dtoa_r+0x924>
 8006da0:	4631      	mov	r1, r6
 8006da2:	4658      	mov	r0, fp
 8006da4:	f000 fe78 	bl	8007a98 <__mcmp>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	da63      	bge.n	8006e74 <_dtoa_r+0x924>
 8006dac:	2300      	movs	r3, #0
 8006dae:	4659      	mov	r1, fp
 8006db0:	220a      	movs	r2, #10
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 fc54 	bl	8007660 <__multadd>
 8006db8:	9b08      	ldr	r3, [sp, #32]
 8006dba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006dbe:	4683      	mov	fp, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 818f 	beq.w	80070e4 <_dtoa_r+0xb94>
 8006dc6:	4639      	mov	r1, r7
 8006dc8:	2300      	movs	r3, #0
 8006dca:	220a      	movs	r2, #10
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f000 fc47 	bl	8007660 <__multadd>
 8006dd2:	f1b9 0f00 	cmp.w	r9, #0
 8006dd6:	4607      	mov	r7, r0
 8006dd8:	f300 808e 	bgt.w	8006ef8 <_dtoa_r+0x9a8>
 8006ddc:	9b05      	ldr	r3, [sp, #20]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	dc50      	bgt.n	8006e84 <_dtoa_r+0x934>
 8006de2:	e089      	b.n	8006ef8 <_dtoa_r+0x9a8>
 8006de4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006de6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006dea:	e75d      	b.n	8006ca8 <_dtoa_r+0x758>
 8006dec:	9b01      	ldr	r3, [sp, #4]
 8006dee:	1e5e      	subs	r6, r3, #1
 8006df0:	9b06      	ldr	r3, [sp, #24]
 8006df2:	42b3      	cmp	r3, r6
 8006df4:	bfbf      	itttt	lt
 8006df6:	9b06      	ldrlt	r3, [sp, #24]
 8006df8:	9606      	strlt	r6, [sp, #24]
 8006dfa:	1af2      	sublt	r2, r6, r3
 8006dfc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006dfe:	bfb6      	itet	lt
 8006e00:	189b      	addlt	r3, r3, r2
 8006e02:	1b9e      	subge	r6, r3, r6
 8006e04:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006e06:	9b01      	ldr	r3, [sp, #4]
 8006e08:	bfb8      	it	lt
 8006e0a:	2600      	movlt	r6, #0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	bfb5      	itete	lt
 8006e10:	eba8 0503 	sublt.w	r5, r8, r3
 8006e14:	9b01      	ldrge	r3, [sp, #4]
 8006e16:	2300      	movlt	r3, #0
 8006e18:	4645      	movge	r5, r8
 8006e1a:	e747      	b.n	8006cac <_dtoa_r+0x75c>
 8006e1c:	9e06      	ldr	r6, [sp, #24]
 8006e1e:	9f08      	ldr	r7, [sp, #32]
 8006e20:	4645      	mov	r5, r8
 8006e22:	e74c      	b.n	8006cbe <_dtoa_r+0x76e>
 8006e24:	9a06      	ldr	r2, [sp, #24]
 8006e26:	e775      	b.n	8006d14 <_dtoa_r+0x7c4>
 8006e28:	9b05      	ldr	r3, [sp, #20]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	dc18      	bgt.n	8006e60 <_dtoa_r+0x910>
 8006e2e:	9b02      	ldr	r3, [sp, #8]
 8006e30:	b9b3      	cbnz	r3, 8006e60 <_dtoa_r+0x910>
 8006e32:	9b03      	ldr	r3, [sp, #12]
 8006e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e38:	b9a3      	cbnz	r3, 8006e64 <_dtoa_r+0x914>
 8006e3a:	9b03      	ldr	r3, [sp, #12]
 8006e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e40:	0d1b      	lsrs	r3, r3, #20
 8006e42:	051b      	lsls	r3, r3, #20
 8006e44:	b12b      	cbz	r3, 8006e52 <_dtoa_r+0x902>
 8006e46:	9b04      	ldr	r3, [sp, #16]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	9304      	str	r3, [sp, #16]
 8006e4c:	f108 0801 	add.w	r8, r8, #1
 8006e50:	2301      	movs	r3, #1
 8006e52:	9306      	str	r3, [sp, #24]
 8006e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f47f af74 	bne.w	8006d44 <_dtoa_r+0x7f4>
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	e779      	b.n	8006d54 <_dtoa_r+0x804>
 8006e60:	2300      	movs	r3, #0
 8006e62:	e7f6      	b.n	8006e52 <_dtoa_r+0x902>
 8006e64:	9b02      	ldr	r3, [sp, #8]
 8006e66:	e7f4      	b.n	8006e52 <_dtoa_r+0x902>
 8006e68:	d085      	beq.n	8006d76 <_dtoa_r+0x826>
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	301c      	adds	r0, #28
 8006e6e:	e77d      	b.n	8006d6c <_dtoa_r+0x81c>
 8006e70:	40240000 	.word	0x40240000
 8006e74:	9b01      	ldr	r3, [sp, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	dc38      	bgt.n	8006eec <_dtoa_r+0x99c>
 8006e7a:	9b05      	ldr	r3, [sp, #20]
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	dd35      	ble.n	8006eec <_dtoa_r+0x99c>
 8006e80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006e84:	f1b9 0f00 	cmp.w	r9, #0
 8006e88:	d10d      	bne.n	8006ea6 <_dtoa_r+0x956>
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	464b      	mov	r3, r9
 8006e8e:	2205      	movs	r2, #5
 8006e90:	4620      	mov	r0, r4
 8006e92:	f000 fbe5 	bl	8007660 <__multadd>
 8006e96:	4601      	mov	r1, r0
 8006e98:	4606      	mov	r6, r0
 8006e9a:	4658      	mov	r0, fp
 8006e9c:	f000 fdfc 	bl	8007a98 <__mcmp>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	f73f adbd 	bgt.w	8006a20 <_dtoa_r+0x4d0>
 8006ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea8:	9d00      	ldr	r5, [sp, #0]
 8006eaa:	ea6f 0a03 	mvn.w	sl, r3
 8006eae:	f04f 0800 	mov.w	r8, #0
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f000 fbb1 	bl	800761c <_Bfree>
 8006eba:	2f00      	cmp	r7, #0
 8006ebc:	f43f aeb4 	beq.w	8006c28 <_dtoa_r+0x6d8>
 8006ec0:	f1b8 0f00 	cmp.w	r8, #0
 8006ec4:	d005      	beq.n	8006ed2 <_dtoa_r+0x982>
 8006ec6:	45b8      	cmp	r8, r7
 8006ec8:	d003      	beq.n	8006ed2 <_dtoa_r+0x982>
 8006eca:	4641      	mov	r1, r8
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f000 fba5 	bl	800761c <_Bfree>
 8006ed2:	4639      	mov	r1, r7
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 fba1 	bl	800761c <_Bfree>
 8006eda:	e6a5      	b.n	8006c28 <_dtoa_r+0x6d8>
 8006edc:	2600      	movs	r6, #0
 8006ede:	4637      	mov	r7, r6
 8006ee0:	e7e1      	b.n	8006ea6 <_dtoa_r+0x956>
 8006ee2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006ee4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006ee8:	4637      	mov	r7, r6
 8006eea:	e599      	b.n	8006a20 <_dtoa_r+0x4d0>
 8006eec:	9b08      	ldr	r3, [sp, #32]
 8006eee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 80fd 	beq.w	80070f2 <_dtoa_r+0xba2>
 8006ef8:	2d00      	cmp	r5, #0
 8006efa:	dd05      	ble.n	8006f08 <_dtoa_r+0x9b8>
 8006efc:	4639      	mov	r1, r7
 8006efe:	462a      	mov	r2, r5
 8006f00:	4620      	mov	r0, r4
 8006f02:	f000 fd5d 	bl	80079c0 <__lshift>
 8006f06:	4607      	mov	r7, r0
 8006f08:	9b06      	ldr	r3, [sp, #24]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d05c      	beq.n	8006fc8 <_dtoa_r+0xa78>
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 fb43 	bl	800759c <_Balloc>
 8006f16:	4605      	mov	r5, r0
 8006f18:	b928      	cbnz	r0, 8006f26 <_dtoa_r+0x9d6>
 8006f1a:	4b80      	ldr	r3, [pc, #512]	; (800711c <_dtoa_r+0xbcc>)
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f22:	f7ff bb2e 	b.w	8006582 <_dtoa_r+0x32>
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	3202      	adds	r2, #2
 8006f2a:	0092      	lsls	r2, r2, #2
 8006f2c:	f107 010c 	add.w	r1, r7, #12
 8006f30:	300c      	adds	r0, #12
 8006f32:	f000 fb25 	bl	8007580 <memcpy>
 8006f36:	2201      	movs	r2, #1
 8006f38:	4629      	mov	r1, r5
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f000 fd40 	bl	80079c0 <__lshift>
 8006f40:	9b00      	ldr	r3, [sp, #0]
 8006f42:	3301      	adds	r3, #1
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	9b00      	ldr	r3, [sp, #0]
 8006f48:	444b      	add	r3, r9
 8006f4a:	9307      	str	r3, [sp, #28]
 8006f4c:	9b02      	ldr	r3, [sp, #8]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	46b8      	mov	r8, r7
 8006f54:	9306      	str	r3, [sp, #24]
 8006f56:	4607      	mov	r7, r0
 8006f58:	9b01      	ldr	r3, [sp, #4]
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	4658      	mov	r0, fp
 8006f60:	9302      	str	r3, [sp, #8]
 8006f62:	f7ff fa67 	bl	8006434 <quorem>
 8006f66:	4603      	mov	r3, r0
 8006f68:	3330      	adds	r3, #48	; 0x30
 8006f6a:	9004      	str	r0, [sp, #16]
 8006f6c:	4641      	mov	r1, r8
 8006f6e:	4658      	mov	r0, fp
 8006f70:	9308      	str	r3, [sp, #32]
 8006f72:	f000 fd91 	bl	8007a98 <__mcmp>
 8006f76:	463a      	mov	r2, r7
 8006f78:	4681      	mov	r9, r0
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f000 fda7 	bl	8007ad0 <__mdiff>
 8006f82:	68c2      	ldr	r2, [r0, #12]
 8006f84:	9b08      	ldr	r3, [sp, #32]
 8006f86:	4605      	mov	r5, r0
 8006f88:	bb02      	cbnz	r2, 8006fcc <_dtoa_r+0xa7c>
 8006f8a:	4601      	mov	r1, r0
 8006f8c:	4658      	mov	r0, fp
 8006f8e:	f000 fd83 	bl	8007a98 <__mcmp>
 8006f92:	9b08      	ldr	r3, [sp, #32]
 8006f94:	4602      	mov	r2, r0
 8006f96:	4629      	mov	r1, r5
 8006f98:	4620      	mov	r0, r4
 8006f9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006f9e:	f000 fb3d 	bl	800761c <_Bfree>
 8006fa2:	9b05      	ldr	r3, [sp, #20]
 8006fa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fa6:	9d01      	ldr	r5, [sp, #4]
 8006fa8:	ea43 0102 	orr.w	r1, r3, r2
 8006fac:	9b06      	ldr	r3, [sp, #24]
 8006fae:	430b      	orrs	r3, r1
 8006fb0:	9b08      	ldr	r3, [sp, #32]
 8006fb2:	d10d      	bne.n	8006fd0 <_dtoa_r+0xa80>
 8006fb4:	2b39      	cmp	r3, #57	; 0x39
 8006fb6:	d029      	beq.n	800700c <_dtoa_r+0xabc>
 8006fb8:	f1b9 0f00 	cmp.w	r9, #0
 8006fbc:	dd01      	ble.n	8006fc2 <_dtoa_r+0xa72>
 8006fbe:	9b04      	ldr	r3, [sp, #16]
 8006fc0:	3331      	adds	r3, #49	; 0x31
 8006fc2:	9a02      	ldr	r2, [sp, #8]
 8006fc4:	7013      	strb	r3, [r2, #0]
 8006fc6:	e774      	b.n	8006eb2 <_dtoa_r+0x962>
 8006fc8:	4638      	mov	r0, r7
 8006fca:	e7b9      	b.n	8006f40 <_dtoa_r+0x9f0>
 8006fcc:	2201      	movs	r2, #1
 8006fce:	e7e2      	b.n	8006f96 <_dtoa_r+0xa46>
 8006fd0:	f1b9 0f00 	cmp.w	r9, #0
 8006fd4:	db06      	blt.n	8006fe4 <_dtoa_r+0xa94>
 8006fd6:	9905      	ldr	r1, [sp, #20]
 8006fd8:	ea41 0909 	orr.w	r9, r1, r9
 8006fdc:	9906      	ldr	r1, [sp, #24]
 8006fde:	ea59 0101 	orrs.w	r1, r9, r1
 8006fe2:	d120      	bne.n	8007026 <_dtoa_r+0xad6>
 8006fe4:	2a00      	cmp	r2, #0
 8006fe6:	ddec      	ble.n	8006fc2 <_dtoa_r+0xa72>
 8006fe8:	4659      	mov	r1, fp
 8006fea:	2201      	movs	r2, #1
 8006fec:	4620      	mov	r0, r4
 8006fee:	9301      	str	r3, [sp, #4]
 8006ff0:	f000 fce6 	bl	80079c0 <__lshift>
 8006ff4:	4631      	mov	r1, r6
 8006ff6:	4683      	mov	fp, r0
 8006ff8:	f000 fd4e 	bl	8007a98 <__mcmp>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	9b01      	ldr	r3, [sp, #4]
 8007000:	dc02      	bgt.n	8007008 <_dtoa_r+0xab8>
 8007002:	d1de      	bne.n	8006fc2 <_dtoa_r+0xa72>
 8007004:	07da      	lsls	r2, r3, #31
 8007006:	d5dc      	bpl.n	8006fc2 <_dtoa_r+0xa72>
 8007008:	2b39      	cmp	r3, #57	; 0x39
 800700a:	d1d8      	bne.n	8006fbe <_dtoa_r+0xa6e>
 800700c:	9a02      	ldr	r2, [sp, #8]
 800700e:	2339      	movs	r3, #57	; 0x39
 8007010:	7013      	strb	r3, [r2, #0]
 8007012:	462b      	mov	r3, r5
 8007014:	461d      	mov	r5, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800701c:	2a39      	cmp	r2, #57	; 0x39
 800701e:	d050      	beq.n	80070c2 <_dtoa_r+0xb72>
 8007020:	3201      	adds	r2, #1
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	e745      	b.n	8006eb2 <_dtoa_r+0x962>
 8007026:	2a00      	cmp	r2, #0
 8007028:	dd03      	ble.n	8007032 <_dtoa_r+0xae2>
 800702a:	2b39      	cmp	r3, #57	; 0x39
 800702c:	d0ee      	beq.n	800700c <_dtoa_r+0xabc>
 800702e:	3301      	adds	r3, #1
 8007030:	e7c7      	b.n	8006fc2 <_dtoa_r+0xa72>
 8007032:	9a01      	ldr	r2, [sp, #4]
 8007034:	9907      	ldr	r1, [sp, #28]
 8007036:	f802 3c01 	strb.w	r3, [r2, #-1]
 800703a:	428a      	cmp	r2, r1
 800703c:	d02a      	beq.n	8007094 <_dtoa_r+0xb44>
 800703e:	4659      	mov	r1, fp
 8007040:	2300      	movs	r3, #0
 8007042:	220a      	movs	r2, #10
 8007044:	4620      	mov	r0, r4
 8007046:	f000 fb0b 	bl	8007660 <__multadd>
 800704a:	45b8      	cmp	r8, r7
 800704c:	4683      	mov	fp, r0
 800704e:	f04f 0300 	mov.w	r3, #0
 8007052:	f04f 020a 	mov.w	r2, #10
 8007056:	4641      	mov	r1, r8
 8007058:	4620      	mov	r0, r4
 800705a:	d107      	bne.n	800706c <_dtoa_r+0xb1c>
 800705c:	f000 fb00 	bl	8007660 <__multadd>
 8007060:	4680      	mov	r8, r0
 8007062:	4607      	mov	r7, r0
 8007064:	9b01      	ldr	r3, [sp, #4]
 8007066:	3301      	adds	r3, #1
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	e775      	b.n	8006f58 <_dtoa_r+0xa08>
 800706c:	f000 faf8 	bl	8007660 <__multadd>
 8007070:	4639      	mov	r1, r7
 8007072:	4680      	mov	r8, r0
 8007074:	2300      	movs	r3, #0
 8007076:	220a      	movs	r2, #10
 8007078:	4620      	mov	r0, r4
 800707a:	f000 faf1 	bl	8007660 <__multadd>
 800707e:	4607      	mov	r7, r0
 8007080:	e7f0      	b.n	8007064 <_dtoa_r+0xb14>
 8007082:	f1b9 0f00 	cmp.w	r9, #0
 8007086:	9a00      	ldr	r2, [sp, #0]
 8007088:	bfcc      	ite	gt
 800708a:	464d      	movgt	r5, r9
 800708c:	2501      	movle	r5, #1
 800708e:	4415      	add	r5, r2
 8007090:	f04f 0800 	mov.w	r8, #0
 8007094:	4659      	mov	r1, fp
 8007096:	2201      	movs	r2, #1
 8007098:	4620      	mov	r0, r4
 800709a:	9301      	str	r3, [sp, #4]
 800709c:	f000 fc90 	bl	80079c0 <__lshift>
 80070a0:	4631      	mov	r1, r6
 80070a2:	4683      	mov	fp, r0
 80070a4:	f000 fcf8 	bl	8007a98 <__mcmp>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	dcb2      	bgt.n	8007012 <_dtoa_r+0xac2>
 80070ac:	d102      	bne.n	80070b4 <_dtoa_r+0xb64>
 80070ae:	9b01      	ldr	r3, [sp, #4]
 80070b0:	07db      	lsls	r3, r3, #31
 80070b2:	d4ae      	bmi.n	8007012 <_dtoa_r+0xac2>
 80070b4:	462b      	mov	r3, r5
 80070b6:	461d      	mov	r5, r3
 80070b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070bc:	2a30      	cmp	r2, #48	; 0x30
 80070be:	d0fa      	beq.n	80070b6 <_dtoa_r+0xb66>
 80070c0:	e6f7      	b.n	8006eb2 <_dtoa_r+0x962>
 80070c2:	9a00      	ldr	r2, [sp, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d1a5      	bne.n	8007014 <_dtoa_r+0xac4>
 80070c8:	f10a 0a01 	add.w	sl, sl, #1
 80070cc:	2331      	movs	r3, #49	; 0x31
 80070ce:	e779      	b.n	8006fc4 <_dtoa_r+0xa74>
 80070d0:	4b13      	ldr	r3, [pc, #76]	; (8007120 <_dtoa_r+0xbd0>)
 80070d2:	f7ff baaf 	b.w	8006634 <_dtoa_r+0xe4>
 80070d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f47f aa86 	bne.w	80065ea <_dtoa_r+0x9a>
 80070de:	4b11      	ldr	r3, [pc, #68]	; (8007124 <_dtoa_r+0xbd4>)
 80070e0:	f7ff baa8 	b.w	8006634 <_dtoa_r+0xe4>
 80070e4:	f1b9 0f00 	cmp.w	r9, #0
 80070e8:	dc03      	bgt.n	80070f2 <_dtoa_r+0xba2>
 80070ea:	9b05      	ldr	r3, [sp, #20]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	f73f aec9 	bgt.w	8006e84 <_dtoa_r+0x934>
 80070f2:	9d00      	ldr	r5, [sp, #0]
 80070f4:	4631      	mov	r1, r6
 80070f6:	4658      	mov	r0, fp
 80070f8:	f7ff f99c 	bl	8006434 <quorem>
 80070fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007100:	f805 3b01 	strb.w	r3, [r5], #1
 8007104:	9a00      	ldr	r2, [sp, #0]
 8007106:	1aaa      	subs	r2, r5, r2
 8007108:	4591      	cmp	r9, r2
 800710a:	ddba      	ble.n	8007082 <_dtoa_r+0xb32>
 800710c:	4659      	mov	r1, fp
 800710e:	2300      	movs	r3, #0
 8007110:	220a      	movs	r2, #10
 8007112:	4620      	mov	r0, r4
 8007114:	f000 faa4 	bl	8007660 <__multadd>
 8007118:	4683      	mov	fp, r0
 800711a:	e7eb      	b.n	80070f4 <_dtoa_r+0xba4>
 800711c:	08009a4b 	.word	0x08009a4b
 8007120:	080099a4 	.word	0x080099a4
 8007124:	080099c8 	.word	0x080099c8

08007128 <__sflush_r>:
 8007128:	898a      	ldrh	r2, [r1, #12]
 800712a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800712e:	4605      	mov	r5, r0
 8007130:	0710      	lsls	r0, r2, #28
 8007132:	460c      	mov	r4, r1
 8007134:	d458      	bmi.n	80071e8 <__sflush_r+0xc0>
 8007136:	684b      	ldr	r3, [r1, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	dc05      	bgt.n	8007148 <__sflush_r+0x20>
 800713c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800713e:	2b00      	cmp	r3, #0
 8007140:	dc02      	bgt.n	8007148 <__sflush_r+0x20>
 8007142:	2000      	movs	r0, #0
 8007144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800714a:	2e00      	cmp	r6, #0
 800714c:	d0f9      	beq.n	8007142 <__sflush_r+0x1a>
 800714e:	2300      	movs	r3, #0
 8007150:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007154:	682f      	ldr	r7, [r5, #0]
 8007156:	602b      	str	r3, [r5, #0]
 8007158:	d032      	beq.n	80071c0 <__sflush_r+0x98>
 800715a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800715c:	89a3      	ldrh	r3, [r4, #12]
 800715e:	075a      	lsls	r2, r3, #29
 8007160:	d505      	bpl.n	800716e <__sflush_r+0x46>
 8007162:	6863      	ldr	r3, [r4, #4]
 8007164:	1ac0      	subs	r0, r0, r3
 8007166:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007168:	b10b      	cbz	r3, 800716e <__sflush_r+0x46>
 800716a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800716c:	1ac0      	subs	r0, r0, r3
 800716e:	2300      	movs	r3, #0
 8007170:	4602      	mov	r2, r0
 8007172:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007174:	6a21      	ldr	r1, [r4, #32]
 8007176:	4628      	mov	r0, r5
 8007178:	47b0      	blx	r6
 800717a:	1c43      	adds	r3, r0, #1
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	d106      	bne.n	800718e <__sflush_r+0x66>
 8007180:	6829      	ldr	r1, [r5, #0]
 8007182:	291d      	cmp	r1, #29
 8007184:	d82c      	bhi.n	80071e0 <__sflush_r+0xb8>
 8007186:	4a2a      	ldr	r2, [pc, #168]	; (8007230 <__sflush_r+0x108>)
 8007188:	40ca      	lsrs	r2, r1
 800718a:	07d6      	lsls	r6, r2, #31
 800718c:	d528      	bpl.n	80071e0 <__sflush_r+0xb8>
 800718e:	2200      	movs	r2, #0
 8007190:	6062      	str	r2, [r4, #4]
 8007192:	04d9      	lsls	r1, r3, #19
 8007194:	6922      	ldr	r2, [r4, #16]
 8007196:	6022      	str	r2, [r4, #0]
 8007198:	d504      	bpl.n	80071a4 <__sflush_r+0x7c>
 800719a:	1c42      	adds	r2, r0, #1
 800719c:	d101      	bne.n	80071a2 <__sflush_r+0x7a>
 800719e:	682b      	ldr	r3, [r5, #0]
 80071a0:	b903      	cbnz	r3, 80071a4 <__sflush_r+0x7c>
 80071a2:	6560      	str	r0, [r4, #84]	; 0x54
 80071a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071a6:	602f      	str	r7, [r5, #0]
 80071a8:	2900      	cmp	r1, #0
 80071aa:	d0ca      	beq.n	8007142 <__sflush_r+0x1a>
 80071ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071b0:	4299      	cmp	r1, r3
 80071b2:	d002      	beq.n	80071ba <__sflush_r+0x92>
 80071b4:	4628      	mov	r0, r5
 80071b6:	f000 fd7f 	bl	8007cb8 <_free_r>
 80071ba:	2000      	movs	r0, #0
 80071bc:	6360      	str	r0, [r4, #52]	; 0x34
 80071be:	e7c1      	b.n	8007144 <__sflush_r+0x1c>
 80071c0:	6a21      	ldr	r1, [r4, #32]
 80071c2:	2301      	movs	r3, #1
 80071c4:	4628      	mov	r0, r5
 80071c6:	47b0      	blx	r6
 80071c8:	1c41      	adds	r1, r0, #1
 80071ca:	d1c7      	bne.n	800715c <__sflush_r+0x34>
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0c4      	beq.n	800715c <__sflush_r+0x34>
 80071d2:	2b1d      	cmp	r3, #29
 80071d4:	d001      	beq.n	80071da <__sflush_r+0xb2>
 80071d6:	2b16      	cmp	r3, #22
 80071d8:	d101      	bne.n	80071de <__sflush_r+0xb6>
 80071da:	602f      	str	r7, [r5, #0]
 80071dc:	e7b1      	b.n	8007142 <__sflush_r+0x1a>
 80071de:	89a3      	ldrh	r3, [r4, #12]
 80071e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071e4:	81a3      	strh	r3, [r4, #12]
 80071e6:	e7ad      	b.n	8007144 <__sflush_r+0x1c>
 80071e8:	690f      	ldr	r7, [r1, #16]
 80071ea:	2f00      	cmp	r7, #0
 80071ec:	d0a9      	beq.n	8007142 <__sflush_r+0x1a>
 80071ee:	0793      	lsls	r3, r2, #30
 80071f0:	680e      	ldr	r6, [r1, #0]
 80071f2:	bf08      	it	eq
 80071f4:	694b      	ldreq	r3, [r1, #20]
 80071f6:	600f      	str	r7, [r1, #0]
 80071f8:	bf18      	it	ne
 80071fa:	2300      	movne	r3, #0
 80071fc:	eba6 0807 	sub.w	r8, r6, r7
 8007200:	608b      	str	r3, [r1, #8]
 8007202:	f1b8 0f00 	cmp.w	r8, #0
 8007206:	dd9c      	ble.n	8007142 <__sflush_r+0x1a>
 8007208:	6a21      	ldr	r1, [r4, #32]
 800720a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800720c:	4643      	mov	r3, r8
 800720e:	463a      	mov	r2, r7
 8007210:	4628      	mov	r0, r5
 8007212:	47b0      	blx	r6
 8007214:	2800      	cmp	r0, #0
 8007216:	dc06      	bgt.n	8007226 <__sflush_r+0xfe>
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800721e:	81a3      	strh	r3, [r4, #12]
 8007220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007224:	e78e      	b.n	8007144 <__sflush_r+0x1c>
 8007226:	4407      	add	r7, r0
 8007228:	eba8 0800 	sub.w	r8, r8, r0
 800722c:	e7e9      	b.n	8007202 <__sflush_r+0xda>
 800722e:	bf00      	nop
 8007230:	20400001 	.word	0x20400001

08007234 <_fflush_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	690b      	ldr	r3, [r1, #16]
 8007238:	4605      	mov	r5, r0
 800723a:	460c      	mov	r4, r1
 800723c:	b913      	cbnz	r3, 8007244 <_fflush_r+0x10>
 800723e:	2500      	movs	r5, #0
 8007240:	4628      	mov	r0, r5
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	b118      	cbz	r0, 800724e <_fflush_r+0x1a>
 8007246:	6983      	ldr	r3, [r0, #24]
 8007248:	b90b      	cbnz	r3, 800724e <_fflush_r+0x1a>
 800724a:	f000 f887 	bl	800735c <__sinit>
 800724e:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <_fflush_r+0x6c>)
 8007250:	429c      	cmp	r4, r3
 8007252:	d11b      	bne.n	800728c <_fflush_r+0x58>
 8007254:	686c      	ldr	r4, [r5, #4]
 8007256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0ef      	beq.n	800723e <_fflush_r+0xa>
 800725e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007260:	07d0      	lsls	r0, r2, #31
 8007262:	d404      	bmi.n	800726e <_fflush_r+0x3a>
 8007264:	0599      	lsls	r1, r3, #22
 8007266:	d402      	bmi.n	800726e <_fflush_r+0x3a>
 8007268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800726a:	f000 f91a 	bl	80074a2 <__retarget_lock_acquire_recursive>
 800726e:	4628      	mov	r0, r5
 8007270:	4621      	mov	r1, r4
 8007272:	f7ff ff59 	bl	8007128 <__sflush_r>
 8007276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007278:	07da      	lsls	r2, r3, #31
 800727a:	4605      	mov	r5, r0
 800727c:	d4e0      	bmi.n	8007240 <_fflush_r+0xc>
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	059b      	lsls	r3, r3, #22
 8007282:	d4dd      	bmi.n	8007240 <_fflush_r+0xc>
 8007284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007286:	f000 f90d 	bl	80074a4 <__retarget_lock_release_recursive>
 800728a:	e7d9      	b.n	8007240 <_fflush_r+0xc>
 800728c:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <_fflush_r+0x70>)
 800728e:	429c      	cmp	r4, r3
 8007290:	d101      	bne.n	8007296 <_fflush_r+0x62>
 8007292:	68ac      	ldr	r4, [r5, #8]
 8007294:	e7df      	b.n	8007256 <_fflush_r+0x22>
 8007296:	4b04      	ldr	r3, [pc, #16]	; (80072a8 <_fflush_r+0x74>)
 8007298:	429c      	cmp	r4, r3
 800729a:	bf08      	it	eq
 800729c:	68ec      	ldreq	r4, [r5, #12]
 800729e:	e7da      	b.n	8007256 <_fflush_r+0x22>
 80072a0:	08009a7c 	.word	0x08009a7c
 80072a4:	08009a9c 	.word	0x08009a9c
 80072a8:	08009a5c 	.word	0x08009a5c

080072ac <std>:
 80072ac:	2300      	movs	r3, #0
 80072ae:	b510      	push	{r4, lr}
 80072b0:	4604      	mov	r4, r0
 80072b2:	e9c0 3300 	strd	r3, r3, [r0]
 80072b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072ba:	6083      	str	r3, [r0, #8]
 80072bc:	8181      	strh	r1, [r0, #12]
 80072be:	6643      	str	r3, [r0, #100]	; 0x64
 80072c0:	81c2      	strh	r2, [r0, #14]
 80072c2:	6183      	str	r3, [r0, #24]
 80072c4:	4619      	mov	r1, r3
 80072c6:	2208      	movs	r2, #8
 80072c8:	305c      	adds	r0, #92	; 0x5c
 80072ca:	f7fe fb69 	bl	80059a0 <memset>
 80072ce:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <std+0x38>)
 80072d0:	6263      	str	r3, [r4, #36]	; 0x24
 80072d2:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <std+0x3c>)
 80072d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80072d6:	4b05      	ldr	r3, [pc, #20]	; (80072ec <std+0x40>)
 80072d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072da:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <std+0x44>)
 80072dc:	6224      	str	r4, [r4, #32]
 80072de:	6323      	str	r3, [r4, #48]	; 0x30
 80072e0:	bd10      	pop	{r4, pc}
 80072e2:	bf00      	nop
 80072e4:	080080e1 	.word	0x080080e1
 80072e8:	08008103 	.word	0x08008103
 80072ec:	0800813b 	.word	0x0800813b
 80072f0:	0800815f 	.word	0x0800815f

080072f4 <_cleanup_r>:
 80072f4:	4901      	ldr	r1, [pc, #4]	; (80072fc <_cleanup_r+0x8>)
 80072f6:	f000 b8af 	b.w	8007458 <_fwalk_reent>
 80072fa:	bf00      	nop
 80072fc:	08007235 	.word	0x08007235

08007300 <__sfmoreglue>:
 8007300:	b570      	push	{r4, r5, r6, lr}
 8007302:	1e4a      	subs	r2, r1, #1
 8007304:	2568      	movs	r5, #104	; 0x68
 8007306:	4355      	muls	r5, r2
 8007308:	460e      	mov	r6, r1
 800730a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800730e:	f000 fd23 	bl	8007d58 <_malloc_r>
 8007312:	4604      	mov	r4, r0
 8007314:	b140      	cbz	r0, 8007328 <__sfmoreglue+0x28>
 8007316:	2100      	movs	r1, #0
 8007318:	e9c0 1600 	strd	r1, r6, [r0]
 800731c:	300c      	adds	r0, #12
 800731e:	60a0      	str	r0, [r4, #8]
 8007320:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007324:	f7fe fb3c 	bl	80059a0 <memset>
 8007328:	4620      	mov	r0, r4
 800732a:	bd70      	pop	{r4, r5, r6, pc}

0800732c <__sfp_lock_acquire>:
 800732c:	4801      	ldr	r0, [pc, #4]	; (8007334 <__sfp_lock_acquire+0x8>)
 800732e:	f000 b8b8 	b.w	80074a2 <__retarget_lock_acquire_recursive>
 8007332:	bf00      	nop
 8007334:	2000b374 	.word	0x2000b374

08007338 <__sfp_lock_release>:
 8007338:	4801      	ldr	r0, [pc, #4]	; (8007340 <__sfp_lock_release+0x8>)
 800733a:	f000 b8b3 	b.w	80074a4 <__retarget_lock_release_recursive>
 800733e:	bf00      	nop
 8007340:	2000b374 	.word	0x2000b374

08007344 <__sinit_lock_acquire>:
 8007344:	4801      	ldr	r0, [pc, #4]	; (800734c <__sinit_lock_acquire+0x8>)
 8007346:	f000 b8ac 	b.w	80074a2 <__retarget_lock_acquire_recursive>
 800734a:	bf00      	nop
 800734c:	2000b36f 	.word	0x2000b36f

08007350 <__sinit_lock_release>:
 8007350:	4801      	ldr	r0, [pc, #4]	; (8007358 <__sinit_lock_release+0x8>)
 8007352:	f000 b8a7 	b.w	80074a4 <__retarget_lock_release_recursive>
 8007356:	bf00      	nop
 8007358:	2000b36f 	.word	0x2000b36f

0800735c <__sinit>:
 800735c:	b510      	push	{r4, lr}
 800735e:	4604      	mov	r4, r0
 8007360:	f7ff fff0 	bl	8007344 <__sinit_lock_acquire>
 8007364:	69a3      	ldr	r3, [r4, #24]
 8007366:	b11b      	cbz	r3, 8007370 <__sinit+0x14>
 8007368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800736c:	f7ff bff0 	b.w	8007350 <__sinit_lock_release>
 8007370:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007374:	6523      	str	r3, [r4, #80]	; 0x50
 8007376:	4b13      	ldr	r3, [pc, #76]	; (80073c4 <__sinit+0x68>)
 8007378:	4a13      	ldr	r2, [pc, #76]	; (80073c8 <__sinit+0x6c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	62a2      	str	r2, [r4, #40]	; 0x28
 800737e:	42a3      	cmp	r3, r4
 8007380:	bf04      	itt	eq
 8007382:	2301      	moveq	r3, #1
 8007384:	61a3      	streq	r3, [r4, #24]
 8007386:	4620      	mov	r0, r4
 8007388:	f000 f820 	bl	80073cc <__sfp>
 800738c:	6060      	str	r0, [r4, #4]
 800738e:	4620      	mov	r0, r4
 8007390:	f000 f81c 	bl	80073cc <__sfp>
 8007394:	60a0      	str	r0, [r4, #8]
 8007396:	4620      	mov	r0, r4
 8007398:	f000 f818 	bl	80073cc <__sfp>
 800739c:	2200      	movs	r2, #0
 800739e:	60e0      	str	r0, [r4, #12]
 80073a0:	2104      	movs	r1, #4
 80073a2:	6860      	ldr	r0, [r4, #4]
 80073a4:	f7ff ff82 	bl	80072ac <std>
 80073a8:	68a0      	ldr	r0, [r4, #8]
 80073aa:	2201      	movs	r2, #1
 80073ac:	2109      	movs	r1, #9
 80073ae:	f7ff ff7d 	bl	80072ac <std>
 80073b2:	68e0      	ldr	r0, [r4, #12]
 80073b4:	2202      	movs	r2, #2
 80073b6:	2112      	movs	r1, #18
 80073b8:	f7ff ff78 	bl	80072ac <std>
 80073bc:	2301      	movs	r3, #1
 80073be:	61a3      	str	r3, [r4, #24]
 80073c0:	e7d2      	b.n	8007368 <__sinit+0xc>
 80073c2:	bf00      	nop
 80073c4:	08009990 	.word	0x08009990
 80073c8:	080072f5 	.word	0x080072f5

080073cc <__sfp>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	4607      	mov	r7, r0
 80073d0:	f7ff ffac 	bl	800732c <__sfp_lock_acquire>
 80073d4:	4b1e      	ldr	r3, [pc, #120]	; (8007450 <__sfp+0x84>)
 80073d6:	681e      	ldr	r6, [r3, #0]
 80073d8:	69b3      	ldr	r3, [r6, #24]
 80073da:	b913      	cbnz	r3, 80073e2 <__sfp+0x16>
 80073dc:	4630      	mov	r0, r6
 80073de:	f7ff ffbd 	bl	800735c <__sinit>
 80073e2:	3648      	adds	r6, #72	; 0x48
 80073e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	d503      	bpl.n	80073f4 <__sfp+0x28>
 80073ec:	6833      	ldr	r3, [r6, #0]
 80073ee:	b30b      	cbz	r3, 8007434 <__sfp+0x68>
 80073f0:	6836      	ldr	r6, [r6, #0]
 80073f2:	e7f7      	b.n	80073e4 <__sfp+0x18>
 80073f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073f8:	b9d5      	cbnz	r5, 8007430 <__sfp+0x64>
 80073fa:	4b16      	ldr	r3, [pc, #88]	; (8007454 <__sfp+0x88>)
 80073fc:	60e3      	str	r3, [r4, #12]
 80073fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007402:	6665      	str	r5, [r4, #100]	; 0x64
 8007404:	f000 f84c 	bl	80074a0 <__retarget_lock_init_recursive>
 8007408:	f7ff ff96 	bl	8007338 <__sfp_lock_release>
 800740c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007410:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007414:	6025      	str	r5, [r4, #0]
 8007416:	61a5      	str	r5, [r4, #24]
 8007418:	2208      	movs	r2, #8
 800741a:	4629      	mov	r1, r5
 800741c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007420:	f7fe fabe 	bl	80059a0 <memset>
 8007424:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007428:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800742c:	4620      	mov	r0, r4
 800742e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007430:	3468      	adds	r4, #104	; 0x68
 8007432:	e7d9      	b.n	80073e8 <__sfp+0x1c>
 8007434:	2104      	movs	r1, #4
 8007436:	4638      	mov	r0, r7
 8007438:	f7ff ff62 	bl	8007300 <__sfmoreglue>
 800743c:	4604      	mov	r4, r0
 800743e:	6030      	str	r0, [r6, #0]
 8007440:	2800      	cmp	r0, #0
 8007442:	d1d5      	bne.n	80073f0 <__sfp+0x24>
 8007444:	f7ff ff78 	bl	8007338 <__sfp_lock_release>
 8007448:	230c      	movs	r3, #12
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	e7ee      	b.n	800742c <__sfp+0x60>
 800744e:	bf00      	nop
 8007450:	08009990 	.word	0x08009990
 8007454:	ffff0001 	.word	0xffff0001

08007458 <_fwalk_reent>:
 8007458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800745c:	4606      	mov	r6, r0
 800745e:	4688      	mov	r8, r1
 8007460:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007464:	2700      	movs	r7, #0
 8007466:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800746a:	f1b9 0901 	subs.w	r9, r9, #1
 800746e:	d505      	bpl.n	800747c <_fwalk_reent+0x24>
 8007470:	6824      	ldr	r4, [r4, #0]
 8007472:	2c00      	cmp	r4, #0
 8007474:	d1f7      	bne.n	8007466 <_fwalk_reent+0xe>
 8007476:	4638      	mov	r0, r7
 8007478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800747c:	89ab      	ldrh	r3, [r5, #12]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d907      	bls.n	8007492 <_fwalk_reent+0x3a>
 8007482:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007486:	3301      	adds	r3, #1
 8007488:	d003      	beq.n	8007492 <_fwalk_reent+0x3a>
 800748a:	4629      	mov	r1, r5
 800748c:	4630      	mov	r0, r6
 800748e:	47c0      	blx	r8
 8007490:	4307      	orrs	r7, r0
 8007492:	3568      	adds	r5, #104	; 0x68
 8007494:	e7e9      	b.n	800746a <_fwalk_reent+0x12>
	...

08007498 <_localeconv_r>:
 8007498:	4800      	ldr	r0, [pc, #0]	; (800749c <_localeconv_r+0x4>)
 800749a:	4770      	bx	lr
 800749c:	20000160 	.word	0x20000160

080074a0 <__retarget_lock_init_recursive>:
 80074a0:	4770      	bx	lr

080074a2 <__retarget_lock_acquire_recursive>:
 80074a2:	4770      	bx	lr

080074a4 <__retarget_lock_release_recursive>:
 80074a4:	4770      	bx	lr

080074a6 <__swhatbuf_r>:
 80074a6:	b570      	push	{r4, r5, r6, lr}
 80074a8:	460e      	mov	r6, r1
 80074aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ae:	2900      	cmp	r1, #0
 80074b0:	b096      	sub	sp, #88	; 0x58
 80074b2:	4614      	mov	r4, r2
 80074b4:	461d      	mov	r5, r3
 80074b6:	da07      	bge.n	80074c8 <__swhatbuf_r+0x22>
 80074b8:	2300      	movs	r3, #0
 80074ba:	602b      	str	r3, [r5, #0]
 80074bc:	89b3      	ldrh	r3, [r6, #12]
 80074be:	061a      	lsls	r2, r3, #24
 80074c0:	d410      	bmi.n	80074e4 <__swhatbuf_r+0x3e>
 80074c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074c6:	e00e      	b.n	80074e6 <__swhatbuf_r+0x40>
 80074c8:	466a      	mov	r2, sp
 80074ca:	f000 fe9f 	bl	800820c <_fstat_r>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	dbf2      	blt.n	80074b8 <__swhatbuf_r+0x12>
 80074d2:	9a01      	ldr	r2, [sp, #4]
 80074d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074dc:	425a      	negs	r2, r3
 80074de:	415a      	adcs	r2, r3
 80074e0:	602a      	str	r2, [r5, #0]
 80074e2:	e7ee      	b.n	80074c2 <__swhatbuf_r+0x1c>
 80074e4:	2340      	movs	r3, #64	; 0x40
 80074e6:	2000      	movs	r0, #0
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	b016      	add	sp, #88	; 0x58
 80074ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080074f0 <__smakebuf_r>:
 80074f0:	898b      	ldrh	r3, [r1, #12]
 80074f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074f4:	079d      	lsls	r5, r3, #30
 80074f6:	4606      	mov	r6, r0
 80074f8:	460c      	mov	r4, r1
 80074fa:	d507      	bpl.n	800750c <__smakebuf_r+0x1c>
 80074fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	6123      	str	r3, [r4, #16]
 8007504:	2301      	movs	r3, #1
 8007506:	6163      	str	r3, [r4, #20]
 8007508:	b002      	add	sp, #8
 800750a:	bd70      	pop	{r4, r5, r6, pc}
 800750c:	ab01      	add	r3, sp, #4
 800750e:	466a      	mov	r2, sp
 8007510:	f7ff ffc9 	bl	80074a6 <__swhatbuf_r>
 8007514:	9900      	ldr	r1, [sp, #0]
 8007516:	4605      	mov	r5, r0
 8007518:	4630      	mov	r0, r6
 800751a:	f000 fc1d 	bl	8007d58 <_malloc_r>
 800751e:	b948      	cbnz	r0, 8007534 <__smakebuf_r+0x44>
 8007520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007524:	059a      	lsls	r2, r3, #22
 8007526:	d4ef      	bmi.n	8007508 <__smakebuf_r+0x18>
 8007528:	f023 0303 	bic.w	r3, r3, #3
 800752c:	f043 0302 	orr.w	r3, r3, #2
 8007530:	81a3      	strh	r3, [r4, #12]
 8007532:	e7e3      	b.n	80074fc <__smakebuf_r+0xc>
 8007534:	4b0d      	ldr	r3, [pc, #52]	; (800756c <__smakebuf_r+0x7c>)
 8007536:	62b3      	str	r3, [r6, #40]	; 0x28
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	6020      	str	r0, [r4, #0]
 800753c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007540:	81a3      	strh	r3, [r4, #12]
 8007542:	9b00      	ldr	r3, [sp, #0]
 8007544:	6163      	str	r3, [r4, #20]
 8007546:	9b01      	ldr	r3, [sp, #4]
 8007548:	6120      	str	r0, [r4, #16]
 800754a:	b15b      	cbz	r3, 8007564 <__smakebuf_r+0x74>
 800754c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007550:	4630      	mov	r0, r6
 8007552:	f000 fe6d 	bl	8008230 <_isatty_r>
 8007556:	b128      	cbz	r0, 8007564 <__smakebuf_r+0x74>
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	f023 0303 	bic.w	r3, r3, #3
 800755e:	f043 0301 	orr.w	r3, r3, #1
 8007562:	81a3      	strh	r3, [r4, #12]
 8007564:	89a0      	ldrh	r0, [r4, #12]
 8007566:	4305      	orrs	r5, r0
 8007568:	81a5      	strh	r5, [r4, #12]
 800756a:	e7cd      	b.n	8007508 <__smakebuf_r+0x18>
 800756c:	080072f5 	.word	0x080072f5

08007570 <malloc>:
 8007570:	4b02      	ldr	r3, [pc, #8]	; (800757c <malloc+0xc>)
 8007572:	4601      	mov	r1, r0
 8007574:	6818      	ldr	r0, [r3, #0]
 8007576:	f000 bbef 	b.w	8007d58 <_malloc_r>
 800757a:	bf00      	nop
 800757c:	2000000c 	.word	0x2000000c

08007580 <memcpy>:
 8007580:	440a      	add	r2, r1
 8007582:	4291      	cmp	r1, r2
 8007584:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007588:	d100      	bne.n	800758c <memcpy+0xc>
 800758a:	4770      	bx	lr
 800758c:	b510      	push	{r4, lr}
 800758e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007596:	4291      	cmp	r1, r2
 8007598:	d1f9      	bne.n	800758e <memcpy+0xe>
 800759a:	bd10      	pop	{r4, pc}

0800759c <_Balloc>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075a0:	4604      	mov	r4, r0
 80075a2:	460d      	mov	r5, r1
 80075a4:	b976      	cbnz	r6, 80075c4 <_Balloc+0x28>
 80075a6:	2010      	movs	r0, #16
 80075a8:	f7ff ffe2 	bl	8007570 <malloc>
 80075ac:	4602      	mov	r2, r0
 80075ae:	6260      	str	r0, [r4, #36]	; 0x24
 80075b0:	b920      	cbnz	r0, 80075bc <_Balloc+0x20>
 80075b2:	4b18      	ldr	r3, [pc, #96]	; (8007614 <_Balloc+0x78>)
 80075b4:	4818      	ldr	r0, [pc, #96]	; (8007618 <_Balloc+0x7c>)
 80075b6:	2166      	movs	r1, #102	; 0x66
 80075b8:	f000 fde8 	bl	800818c <__assert_func>
 80075bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075c0:	6006      	str	r6, [r0, #0]
 80075c2:	60c6      	str	r6, [r0, #12]
 80075c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075c6:	68f3      	ldr	r3, [r6, #12]
 80075c8:	b183      	cbz	r3, 80075ec <_Balloc+0x50>
 80075ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075d2:	b9b8      	cbnz	r0, 8007604 <_Balloc+0x68>
 80075d4:	2101      	movs	r1, #1
 80075d6:	fa01 f605 	lsl.w	r6, r1, r5
 80075da:	1d72      	adds	r2, r6, #5
 80075dc:	0092      	lsls	r2, r2, #2
 80075de:	4620      	mov	r0, r4
 80075e0:	f000 fb5a 	bl	8007c98 <_calloc_r>
 80075e4:	b160      	cbz	r0, 8007600 <_Balloc+0x64>
 80075e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075ea:	e00e      	b.n	800760a <_Balloc+0x6e>
 80075ec:	2221      	movs	r2, #33	; 0x21
 80075ee:	2104      	movs	r1, #4
 80075f0:	4620      	mov	r0, r4
 80075f2:	f000 fb51 	bl	8007c98 <_calloc_r>
 80075f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075f8:	60f0      	str	r0, [r6, #12]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e4      	bne.n	80075ca <_Balloc+0x2e>
 8007600:	2000      	movs	r0, #0
 8007602:	bd70      	pop	{r4, r5, r6, pc}
 8007604:	6802      	ldr	r2, [r0, #0]
 8007606:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800760a:	2300      	movs	r3, #0
 800760c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007610:	e7f7      	b.n	8007602 <_Balloc+0x66>
 8007612:	bf00      	nop
 8007614:	080099d5 	.word	0x080099d5
 8007618:	08009abc 	.word	0x08009abc

0800761c <_Bfree>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007620:	4605      	mov	r5, r0
 8007622:	460c      	mov	r4, r1
 8007624:	b976      	cbnz	r6, 8007644 <_Bfree+0x28>
 8007626:	2010      	movs	r0, #16
 8007628:	f7ff ffa2 	bl	8007570 <malloc>
 800762c:	4602      	mov	r2, r0
 800762e:	6268      	str	r0, [r5, #36]	; 0x24
 8007630:	b920      	cbnz	r0, 800763c <_Bfree+0x20>
 8007632:	4b09      	ldr	r3, [pc, #36]	; (8007658 <_Bfree+0x3c>)
 8007634:	4809      	ldr	r0, [pc, #36]	; (800765c <_Bfree+0x40>)
 8007636:	218a      	movs	r1, #138	; 0x8a
 8007638:	f000 fda8 	bl	800818c <__assert_func>
 800763c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007640:	6006      	str	r6, [r0, #0]
 8007642:	60c6      	str	r6, [r0, #12]
 8007644:	b13c      	cbz	r4, 8007656 <_Bfree+0x3a>
 8007646:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007648:	6862      	ldr	r2, [r4, #4]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007650:	6021      	str	r1, [r4, #0]
 8007652:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007656:	bd70      	pop	{r4, r5, r6, pc}
 8007658:	080099d5 	.word	0x080099d5
 800765c:	08009abc 	.word	0x08009abc

08007660 <__multadd>:
 8007660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007664:	690e      	ldr	r6, [r1, #16]
 8007666:	4607      	mov	r7, r0
 8007668:	4698      	mov	r8, r3
 800766a:	460c      	mov	r4, r1
 800766c:	f101 0014 	add.w	r0, r1, #20
 8007670:	2300      	movs	r3, #0
 8007672:	6805      	ldr	r5, [r0, #0]
 8007674:	b2a9      	uxth	r1, r5
 8007676:	fb02 8101 	mla	r1, r2, r1, r8
 800767a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800767e:	0c2d      	lsrs	r5, r5, #16
 8007680:	fb02 c505 	mla	r5, r2, r5, ip
 8007684:	b289      	uxth	r1, r1
 8007686:	3301      	adds	r3, #1
 8007688:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800768c:	429e      	cmp	r6, r3
 800768e:	f840 1b04 	str.w	r1, [r0], #4
 8007692:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007696:	dcec      	bgt.n	8007672 <__multadd+0x12>
 8007698:	f1b8 0f00 	cmp.w	r8, #0
 800769c:	d022      	beq.n	80076e4 <__multadd+0x84>
 800769e:	68a3      	ldr	r3, [r4, #8]
 80076a0:	42b3      	cmp	r3, r6
 80076a2:	dc19      	bgt.n	80076d8 <__multadd+0x78>
 80076a4:	6861      	ldr	r1, [r4, #4]
 80076a6:	4638      	mov	r0, r7
 80076a8:	3101      	adds	r1, #1
 80076aa:	f7ff ff77 	bl	800759c <_Balloc>
 80076ae:	4605      	mov	r5, r0
 80076b0:	b928      	cbnz	r0, 80076be <__multadd+0x5e>
 80076b2:	4602      	mov	r2, r0
 80076b4:	4b0d      	ldr	r3, [pc, #52]	; (80076ec <__multadd+0x8c>)
 80076b6:	480e      	ldr	r0, [pc, #56]	; (80076f0 <__multadd+0x90>)
 80076b8:	21b5      	movs	r1, #181	; 0xb5
 80076ba:	f000 fd67 	bl	800818c <__assert_func>
 80076be:	6922      	ldr	r2, [r4, #16]
 80076c0:	3202      	adds	r2, #2
 80076c2:	f104 010c 	add.w	r1, r4, #12
 80076c6:	0092      	lsls	r2, r2, #2
 80076c8:	300c      	adds	r0, #12
 80076ca:	f7ff ff59 	bl	8007580 <memcpy>
 80076ce:	4621      	mov	r1, r4
 80076d0:	4638      	mov	r0, r7
 80076d2:	f7ff ffa3 	bl	800761c <_Bfree>
 80076d6:	462c      	mov	r4, r5
 80076d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80076dc:	3601      	adds	r6, #1
 80076de:	f8c3 8014 	str.w	r8, [r3, #20]
 80076e2:	6126      	str	r6, [r4, #16]
 80076e4:	4620      	mov	r0, r4
 80076e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ea:	bf00      	nop
 80076ec:	08009a4b 	.word	0x08009a4b
 80076f0:	08009abc 	.word	0x08009abc

080076f4 <__hi0bits>:
 80076f4:	0c03      	lsrs	r3, r0, #16
 80076f6:	041b      	lsls	r3, r3, #16
 80076f8:	b9d3      	cbnz	r3, 8007730 <__hi0bits+0x3c>
 80076fa:	0400      	lsls	r0, r0, #16
 80076fc:	2310      	movs	r3, #16
 80076fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007702:	bf04      	itt	eq
 8007704:	0200      	lsleq	r0, r0, #8
 8007706:	3308      	addeq	r3, #8
 8007708:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800770c:	bf04      	itt	eq
 800770e:	0100      	lsleq	r0, r0, #4
 8007710:	3304      	addeq	r3, #4
 8007712:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007716:	bf04      	itt	eq
 8007718:	0080      	lsleq	r0, r0, #2
 800771a:	3302      	addeq	r3, #2
 800771c:	2800      	cmp	r0, #0
 800771e:	db05      	blt.n	800772c <__hi0bits+0x38>
 8007720:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007724:	f103 0301 	add.w	r3, r3, #1
 8007728:	bf08      	it	eq
 800772a:	2320      	moveq	r3, #32
 800772c:	4618      	mov	r0, r3
 800772e:	4770      	bx	lr
 8007730:	2300      	movs	r3, #0
 8007732:	e7e4      	b.n	80076fe <__hi0bits+0xa>

08007734 <__lo0bits>:
 8007734:	6803      	ldr	r3, [r0, #0]
 8007736:	f013 0207 	ands.w	r2, r3, #7
 800773a:	4601      	mov	r1, r0
 800773c:	d00b      	beq.n	8007756 <__lo0bits+0x22>
 800773e:	07da      	lsls	r2, r3, #31
 8007740:	d424      	bmi.n	800778c <__lo0bits+0x58>
 8007742:	0798      	lsls	r0, r3, #30
 8007744:	bf49      	itett	mi
 8007746:	085b      	lsrmi	r3, r3, #1
 8007748:	089b      	lsrpl	r3, r3, #2
 800774a:	2001      	movmi	r0, #1
 800774c:	600b      	strmi	r3, [r1, #0]
 800774e:	bf5c      	itt	pl
 8007750:	600b      	strpl	r3, [r1, #0]
 8007752:	2002      	movpl	r0, #2
 8007754:	4770      	bx	lr
 8007756:	b298      	uxth	r0, r3
 8007758:	b9b0      	cbnz	r0, 8007788 <__lo0bits+0x54>
 800775a:	0c1b      	lsrs	r3, r3, #16
 800775c:	2010      	movs	r0, #16
 800775e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007762:	bf04      	itt	eq
 8007764:	0a1b      	lsreq	r3, r3, #8
 8007766:	3008      	addeq	r0, #8
 8007768:	071a      	lsls	r2, r3, #28
 800776a:	bf04      	itt	eq
 800776c:	091b      	lsreq	r3, r3, #4
 800776e:	3004      	addeq	r0, #4
 8007770:	079a      	lsls	r2, r3, #30
 8007772:	bf04      	itt	eq
 8007774:	089b      	lsreq	r3, r3, #2
 8007776:	3002      	addeq	r0, #2
 8007778:	07da      	lsls	r2, r3, #31
 800777a:	d403      	bmi.n	8007784 <__lo0bits+0x50>
 800777c:	085b      	lsrs	r3, r3, #1
 800777e:	f100 0001 	add.w	r0, r0, #1
 8007782:	d005      	beq.n	8007790 <__lo0bits+0x5c>
 8007784:	600b      	str	r3, [r1, #0]
 8007786:	4770      	bx	lr
 8007788:	4610      	mov	r0, r2
 800778a:	e7e8      	b.n	800775e <__lo0bits+0x2a>
 800778c:	2000      	movs	r0, #0
 800778e:	4770      	bx	lr
 8007790:	2020      	movs	r0, #32
 8007792:	4770      	bx	lr

08007794 <__i2b>:
 8007794:	b510      	push	{r4, lr}
 8007796:	460c      	mov	r4, r1
 8007798:	2101      	movs	r1, #1
 800779a:	f7ff feff 	bl	800759c <_Balloc>
 800779e:	4602      	mov	r2, r0
 80077a0:	b928      	cbnz	r0, 80077ae <__i2b+0x1a>
 80077a2:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <__i2b+0x24>)
 80077a4:	4805      	ldr	r0, [pc, #20]	; (80077bc <__i2b+0x28>)
 80077a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80077aa:	f000 fcef 	bl	800818c <__assert_func>
 80077ae:	2301      	movs	r3, #1
 80077b0:	6144      	str	r4, [r0, #20]
 80077b2:	6103      	str	r3, [r0, #16]
 80077b4:	bd10      	pop	{r4, pc}
 80077b6:	bf00      	nop
 80077b8:	08009a4b 	.word	0x08009a4b
 80077bc:	08009abc 	.word	0x08009abc

080077c0 <__multiply>:
 80077c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c4:	4614      	mov	r4, r2
 80077c6:	690a      	ldr	r2, [r1, #16]
 80077c8:	6923      	ldr	r3, [r4, #16]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	bfb8      	it	lt
 80077ce:	460b      	movlt	r3, r1
 80077d0:	460d      	mov	r5, r1
 80077d2:	bfbc      	itt	lt
 80077d4:	4625      	movlt	r5, r4
 80077d6:	461c      	movlt	r4, r3
 80077d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80077dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80077e0:	68ab      	ldr	r3, [r5, #8]
 80077e2:	6869      	ldr	r1, [r5, #4]
 80077e4:	eb0a 0709 	add.w	r7, sl, r9
 80077e8:	42bb      	cmp	r3, r7
 80077ea:	b085      	sub	sp, #20
 80077ec:	bfb8      	it	lt
 80077ee:	3101      	addlt	r1, #1
 80077f0:	f7ff fed4 	bl	800759c <_Balloc>
 80077f4:	b930      	cbnz	r0, 8007804 <__multiply+0x44>
 80077f6:	4602      	mov	r2, r0
 80077f8:	4b42      	ldr	r3, [pc, #264]	; (8007904 <__multiply+0x144>)
 80077fa:	4843      	ldr	r0, [pc, #268]	; (8007908 <__multiply+0x148>)
 80077fc:	f240 115d 	movw	r1, #349	; 0x15d
 8007800:	f000 fcc4 	bl	800818c <__assert_func>
 8007804:	f100 0614 	add.w	r6, r0, #20
 8007808:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800780c:	4633      	mov	r3, r6
 800780e:	2200      	movs	r2, #0
 8007810:	4543      	cmp	r3, r8
 8007812:	d31e      	bcc.n	8007852 <__multiply+0x92>
 8007814:	f105 0c14 	add.w	ip, r5, #20
 8007818:	f104 0314 	add.w	r3, r4, #20
 800781c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007820:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007824:	9202      	str	r2, [sp, #8]
 8007826:	ebac 0205 	sub.w	r2, ip, r5
 800782a:	3a15      	subs	r2, #21
 800782c:	f022 0203 	bic.w	r2, r2, #3
 8007830:	3204      	adds	r2, #4
 8007832:	f105 0115 	add.w	r1, r5, #21
 8007836:	458c      	cmp	ip, r1
 8007838:	bf38      	it	cc
 800783a:	2204      	movcc	r2, #4
 800783c:	9201      	str	r2, [sp, #4]
 800783e:	9a02      	ldr	r2, [sp, #8]
 8007840:	9303      	str	r3, [sp, #12]
 8007842:	429a      	cmp	r2, r3
 8007844:	d808      	bhi.n	8007858 <__multiply+0x98>
 8007846:	2f00      	cmp	r7, #0
 8007848:	dc55      	bgt.n	80078f6 <__multiply+0x136>
 800784a:	6107      	str	r7, [r0, #16]
 800784c:	b005      	add	sp, #20
 800784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007852:	f843 2b04 	str.w	r2, [r3], #4
 8007856:	e7db      	b.n	8007810 <__multiply+0x50>
 8007858:	f8b3 a000 	ldrh.w	sl, [r3]
 800785c:	f1ba 0f00 	cmp.w	sl, #0
 8007860:	d020      	beq.n	80078a4 <__multiply+0xe4>
 8007862:	f105 0e14 	add.w	lr, r5, #20
 8007866:	46b1      	mov	r9, r6
 8007868:	2200      	movs	r2, #0
 800786a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800786e:	f8d9 b000 	ldr.w	fp, [r9]
 8007872:	b2a1      	uxth	r1, r4
 8007874:	fa1f fb8b 	uxth.w	fp, fp
 8007878:	fb0a b101 	mla	r1, sl, r1, fp
 800787c:	4411      	add	r1, r2
 800787e:	f8d9 2000 	ldr.w	r2, [r9]
 8007882:	0c24      	lsrs	r4, r4, #16
 8007884:	0c12      	lsrs	r2, r2, #16
 8007886:	fb0a 2404 	mla	r4, sl, r4, r2
 800788a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800788e:	b289      	uxth	r1, r1
 8007890:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007894:	45f4      	cmp	ip, lr
 8007896:	f849 1b04 	str.w	r1, [r9], #4
 800789a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800789e:	d8e4      	bhi.n	800786a <__multiply+0xaa>
 80078a0:	9901      	ldr	r1, [sp, #4]
 80078a2:	5072      	str	r2, [r6, r1]
 80078a4:	9a03      	ldr	r2, [sp, #12]
 80078a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80078aa:	3304      	adds	r3, #4
 80078ac:	f1b9 0f00 	cmp.w	r9, #0
 80078b0:	d01f      	beq.n	80078f2 <__multiply+0x132>
 80078b2:	6834      	ldr	r4, [r6, #0]
 80078b4:	f105 0114 	add.w	r1, r5, #20
 80078b8:	46b6      	mov	lr, r6
 80078ba:	f04f 0a00 	mov.w	sl, #0
 80078be:	880a      	ldrh	r2, [r1, #0]
 80078c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80078c4:	fb09 b202 	mla	r2, r9, r2, fp
 80078c8:	4492      	add	sl, r2
 80078ca:	b2a4      	uxth	r4, r4
 80078cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80078d0:	f84e 4b04 	str.w	r4, [lr], #4
 80078d4:	f851 4b04 	ldr.w	r4, [r1], #4
 80078d8:	f8be 2000 	ldrh.w	r2, [lr]
 80078dc:	0c24      	lsrs	r4, r4, #16
 80078de:	fb09 2404 	mla	r4, r9, r4, r2
 80078e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80078e6:	458c      	cmp	ip, r1
 80078e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80078ec:	d8e7      	bhi.n	80078be <__multiply+0xfe>
 80078ee:	9a01      	ldr	r2, [sp, #4]
 80078f0:	50b4      	str	r4, [r6, r2]
 80078f2:	3604      	adds	r6, #4
 80078f4:	e7a3      	b.n	800783e <__multiply+0x7e>
 80078f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1a5      	bne.n	800784a <__multiply+0x8a>
 80078fe:	3f01      	subs	r7, #1
 8007900:	e7a1      	b.n	8007846 <__multiply+0x86>
 8007902:	bf00      	nop
 8007904:	08009a4b 	.word	0x08009a4b
 8007908:	08009abc 	.word	0x08009abc

0800790c <__pow5mult>:
 800790c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007910:	4615      	mov	r5, r2
 8007912:	f012 0203 	ands.w	r2, r2, #3
 8007916:	4606      	mov	r6, r0
 8007918:	460f      	mov	r7, r1
 800791a:	d007      	beq.n	800792c <__pow5mult+0x20>
 800791c:	4c25      	ldr	r4, [pc, #148]	; (80079b4 <__pow5mult+0xa8>)
 800791e:	3a01      	subs	r2, #1
 8007920:	2300      	movs	r3, #0
 8007922:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007926:	f7ff fe9b 	bl	8007660 <__multadd>
 800792a:	4607      	mov	r7, r0
 800792c:	10ad      	asrs	r5, r5, #2
 800792e:	d03d      	beq.n	80079ac <__pow5mult+0xa0>
 8007930:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007932:	b97c      	cbnz	r4, 8007954 <__pow5mult+0x48>
 8007934:	2010      	movs	r0, #16
 8007936:	f7ff fe1b 	bl	8007570 <malloc>
 800793a:	4602      	mov	r2, r0
 800793c:	6270      	str	r0, [r6, #36]	; 0x24
 800793e:	b928      	cbnz	r0, 800794c <__pow5mult+0x40>
 8007940:	4b1d      	ldr	r3, [pc, #116]	; (80079b8 <__pow5mult+0xac>)
 8007942:	481e      	ldr	r0, [pc, #120]	; (80079bc <__pow5mult+0xb0>)
 8007944:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007948:	f000 fc20 	bl	800818c <__assert_func>
 800794c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007950:	6004      	str	r4, [r0, #0]
 8007952:	60c4      	str	r4, [r0, #12]
 8007954:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007958:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800795c:	b94c      	cbnz	r4, 8007972 <__pow5mult+0x66>
 800795e:	f240 2171 	movw	r1, #625	; 0x271
 8007962:	4630      	mov	r0, r6
 8007964:	f7ff ff16 	bl	8007794 <__i2b>
 8007968:	2300      	movs	r3, #0
 800796a:	f8c8 0008 	str.w	r0, [r8, #8]
 800796e:	4604      	mov	r4, r0
 8007970:	6003      	str	r3, [r0, #0]
 8007972:	f04f 0900 	mov.w	r9, #0
 8007976:	07eb      	lsls	r3, r5, #31
 8007978:	d50a      	bpl.n	8007990 <__pow5mult+0x84>
 800797a:	4639      	mov	r1, r7
 800797c:	4622      	mov	r2, r4
 800797e:	4630      	mov	r0, r6
 8007980:	f7ff ff1e 	bl	80077c0 <__multiply>
 8007984:	4639      	mov	r1, r7
 8007986:	4680      	mov	r8, r0
 8007988:	4630      	mov	r0, r6
 800798a:	f7ff fe47 	bl	800761c <_Bfree>
 800798e:	4647      	mov	r7, r8
 8007990:	106d      	asrs	r5, r5, #1
 8007992:	d00b      	beq.n	80079ac <__pow5mult+0xa0>
 8007994:	6820      	ldr	r0, [r4, #0]
 8007996:	b938      	cbnz	r0, 80079a8 <__pow5mult+0x9c>
 8007998:	4622      	mov	r2, r4
 800799a:	4621      	mov	r1, r4
 800799c:	4630      	mov	r0, r6
 800799e:	f7ff ff0f 	bl	80077c0 <__multiply>
 80079a2:	6020      	str	r0, [r4, #0]
 80079a4:	f8c0 9000 	str.w	r9, [r0]
 80079a8:	4604      	mov	r4, r0
 80079aa:	e7e4      	b.n	8007976 <__pow5mult+0x6a>
 80079ac:	4638      	mov	r0, r7
 80079ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b2:	bf00      	nop
 80079b4:	08009c10 	.word	0x08009c10
 80079b8:	080099d5 	.word	0x080099d5
 80079bc:	08009abc 	.word	0x08009abc

080079c0 <__lshift>:
 80079c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c4:	460c      	mov	r4, r1
 80079c6:	6849      	ldr	r1, [r1, #4]
 80079c8:	6923      	ldr	r3, [r4, #16]
 80079ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079ce:	68a3      	ldr	r3, [r4, #8]
 80079d0:	4607      	mov	r7, r0
 80079d2:	4691      	mov	r9, r2
 80079d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079d8:	f108 0601 	add.w	r6, r8, #1
 80079dc:	42b3      	cmp	r3, r6
 80079de:	db0b      	blt.n	80079f8 <__lshift+0x38>
 80079e0:	4638      	mov	r0, r7
 80079e2:	f7ff fddb 	bl	800759c <_Balloc>
 80079e6:	4605      	mov	r5, r0
 80079e8:	b948      	cbnz	r0, 80079fe <__lshift+0x3e>
 80079ea:	4602      	mov	r2, r0
 80079ec:	4b28      	ldr	r3, [pc, #160]	; (8007a90 <__lshift+0xd0>)
 80079ee:	4829      	ldr	r0, [pc, #164]	; (8007a94 <__lshift+0xd4>)
 80079f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80079f4:	f000 fbca 	bl	800818c <__assert_func>
 80079f8:	3101      	adds	r1, #1
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	e7ee      	b.n	80079dc <__lshift+0x1c>
 80079fe:	2300      	movs	r3, #0
 8007a00:	f100 0114 	add.w	r1, r0, #20
 8007a04:	f100 0210 	add.w	r2, r0, #16
 8007a08:	4618      	mov	r0, r3
 8007a0a:	4553      	cmp	r3, sl
 8007a0c:	db33      	blt.n	8007a76 <__lshift+0xb6>
 8007a0e:	6920      	ldr	r0, [r4, #16]
 8007a10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a14:	f104 0314 	add.w	r3, r4, #20
 8007a18:	f019 091f 	ands.w	r9, r9, #31
 8007a1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a24:	d02b      	beq.n	8007a7e <__lshift+0xbe>
 8007a26:	f1c9 0e20 	rsb	lr, r9, #32
 8007a2a:	468a      	mov	sl, r1
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	6818      	ldr	r0, [r3, #0]
 8007a30:	fa00 f009 	lsl.w	r0, r0, r9
 8007a34:	4302      	orrs	r2, r0
 8007a36:	f84a 2b04 	str.w	r2, [sl], #4
 8007a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a3e:	459c      	cmp	ip, r3
 8007a40:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a44:	d8f3      	bhi.n	8007a2e <__lshift+0x6e>
 8007a46:	ebac 0304 	sub.w	r3, ip, r4
 8007a4a:	3b15      	subs	r3, #21
 8007a4c:	f023 0303 	bic.w	r3, r3, #3
 8007a50:	3304      	adds	r3, #4
 8007a52:	f104 0015 	add.w	r0, r4, #21
 8007a56:	4584      	cmp	ip, r0
 8007a58:	bf38      	it	cc
 8007a5a:	2304      	movcc	r3, #4
 8007a5c:	50ca      	str	r2, [r1, r3]
 8007a5e:	b10a      	cbz	r2, 8007a64 <__lshift+0xa4>
 8007a60:	f108 0602 	add.w	r6, r8, #2
 8007a64:	3e01      	subs	r6, #1
 8007a66:	4638      	mov	r0, r7
 8007a68:	612e      	str	r6, [r5, #16]
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	f7ff fdd6 	bl	800761c <_Bfree>
 8007a70:	4628      	mov	r0, r5
 8007a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a76:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	e7c5      	b.n	8007a0a <__lshift+0x4a>
 8007a7e:	3904      	subs	r1, #4
 8007a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a84:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a88:	459c      	cmp	ip, r3
 8007a8a:	d8f9      	bhi.n	8007a80 <__lshift+0xc0>
 8007a8c:	e7ea      	b.n	8007a64 <__lshift+0xa4>
 8007a8e:	bf00      	nop
 8007a90:	08009a4b 	.word	0x08009a4b
 8007a94:	08009abc 	.word	0x08009abc

08007a98 <__mcmp>:
 8007a98:	b530      	push	{r4, r5, lr}
 8007a9a:	6902      	ldr	r2, [r0, #16]
 8007a9c:	690c      	ldr	r4, [r1, #16]
 8007a9e:	1b12      	subs	r2, r2, r4
 8007aa0:	d10e      	bne.n	8007ac0 <__mcmp+0x28>
 8007aa2:	f100 0314 	add.w	r3, r0, #20
 8007aa6:	3114      	adds	r1, #20
 8007aa8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007aac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ab0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ab4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ab8:	42a5      	cmp	r5, r4
 8007aba:	d003      	beq.n	8007ac4 <__mcmp+0x2c>
 8007abc:	d305      	bcc.n	8007aca <__mcmp+0x32>
 8007abe:	2201      	movs	r2, #1
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	bd30      	pop	{r4, r5, pc}
 8007ac4:	4283      	cmp	r3, r0
 8007ac6:	d3f3      	bcc.n	8007ab0 <__mcmp+0x18>
 8007ac8:	e7fa      	b.n	8007ac0 <__mcmp+0x28>
 8007aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ace:	e7f7      	b.n	8007ac0 <__mcmp+0x28>

08007ad0 <__mdiff>:
 8007ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	4611      	mov	r1, r2
 8007ada:	4620      	mov	r0, r4
 8007adc:	4617      	mov	r7, r2
 8007ade:	f7ff ffdb 	bl	8007a98 <__mcmp>
 8007ae2:	1e05      	subs	r5, r0, #0
 8007ae4:	d110      	bne.n	8007b08 <__mdiff+0x38>
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4630      	mov	r0, r6
 8007aea:	f7ff fd57 	bl	800759c <_Balloc>
 8007aee:	b930      	cbnz	r0, 8007afe <__mdiff+0x2e>
 8007af0:	4b39      	ldr	r3, [pc, #228]	; (8007bd8 <__mdiff+0x108>)
 8007af2:	4602      	mov	r2, r0
 8007af4:	f240 2132 	movw	r1, #562	; 0x232
 8007af8:	4838      	ldr	r0, [pc, #224]	; (8007bdc <__mdiff+0x10c>)
 8007afa:	f000 fb47 	bl	800818c <__assert_func>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b08:	bfa4      	itt	ge
 8007b0a:	463b      	movge	r3, r7
 8007b0c:	4627      	movge	r7, r4
 8007b0e:	4630      	mov	r0, r6
 8007b10:	6879      	ldr	r1, [r7, #4]
 8007b12:	bfa6      	itte	ge
 8007b14:	461c      	movge	r4, r3
 8007b16:	2500      	movge	r5, #0
 8007b18:	2501      	movlt	r5, #1
 8007b1a:	f7ff fd3f 	bl	800759c <_Balloc>
 8007b1e:	b920      	cbnz	r0, 8007b2a <__mdiff+0x5a>
 8007b20:	4b2d      	ldr	r3, [pc, #180]	; (8007bd8 <__mdiff+0x108>)
 8007b22:	4602      	mov	r2, r0
 8007b24:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b28:	e7e6      	b.n	8007af8 <__mdiff+0x28>
 8007b2a:	693e      	ldr	r6, [r7, #16]
 8007b2c:	60c5      	str	r5, [r0, #12]
 8007b2e:	6925      	ldr	r5, [r4, #16]
 8007b30:	f107 0114 	add.w	r1, r7, #20
 8007b34:	f104 0914 	add.w	r9, r4, #20
 8007b38:	f100 0e14 	add.w	lr, r0, #20
 8007b3c:	f107 0210 	add.w	r2, r7, #16
 8007b40:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007b44:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007b48:	46f2      	mov	sl, lr
 8007b4a:	2700      	movs	r7, #0
 8007b4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b54:	fa1f f883 	uxth.w	r8, r3
 8007b58:	fa17 f78b 	uxtah	r7, r7, fp
 8007b5c:	0c1b      	lsrs	r3, r3, #16
 8007b5e:	eba7 0808 	sub.w	r8, r7, r8
 8007b62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b6a:	fa1f f888 	uxth.w	r8, r8
 8007b6e:	141f      	asrs	r7, r3, #16
 8007b70:	454d      	cmp	r5, r9
 8007b72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b76:	f84a 3b04 	str.w	r3, [sl], #4
 8007b7a:	d8e7      	bhi.n	8007b4c <__mdiff+0x7c>
 8007b7c:	1b2b      	subs	r3, r5, r4
 8007b7e:	3b15      	subs	r3, #21
 8007b80:	f023 0303 	bic.w	r3, r3, #3
 8007b84:	3304      	adds	r3, #4
 8007b86:	3415      	adds	r4, #21
 8007b88:	42a5      	cmp	r5, r4
 8007b8a:	bf38      	it	cc
 8007b8c:	2304      	movcc	r3, #4
 8007b8e:	4419      	add	r1, r3
 8007b90:	4473      	add	r3, lr
 8007b92:	469e      	mov	lr, r3
 8007b94:	460d      	mov	r5, r1
 8007b96:	4565      	cmp	r5, ip
 8007b98:	d30e      	bcc.n	8007bb8 <__mdiff+0xe8>
 8007b9a:	f10c 0203 	add.w	r2, ip, #3
 8007b9e:	1a52      	subs	r2, r2, r1
 8007ba0:	f022 0203 	bic.w	r2, r2, #3
 8007ba4:	3903      	subs	r1, #3
 8007ba6:	458c      	cmp	ip, r1
 8007ba8:	bf38      	it	cc
 8007baa:	2200      	movcc	r2, #0
 8007bac:	441a      	add	r2, r3
 8007bae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007bb2:	b17b      	cbz	r3, 8007bd4 <__mdiff+0x104>
 8007bb4:	6106      	str	r6, [r0, #16]
 8007bb6:	e7a5      	b.n	8007b04 <__mdiff+0x34>
 8007bb8:	f855 8b04 	ldr.w	r8, [r5], #4
 8007bbc:	fa17 f488 	uxtah	r4, r7, r8
 8007bc0:	1422      	asrs	r2, r4, #16
 8007bc2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007bc6:	b2a4      	uxth	r4, r4
 8007bc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007bcc:	f84e 4b04 	str.w	r4, [lr], #4
 8007bd0:	1417      	asrs	r7, r2, #16
 8007bd2:	e7e0      	b.n	8007b96 <__mdiff+0xc6>
 8007bd4:	3e01      	subs	r6, #1
 8007bd6:	e7ea      	b.n	8007bae <__mdiff+0xde>
 8007bd8:	08009a4b 	.word	0x08009a4b
 8007bdc:	08009abc 	.word	0x08009abc

08007be0 <__d2b>:
 8007be0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007be4:	4689      	mov	r9, r1
 8007be6:	2101      	movs	r1, #1
 8007be8:	ec57 6b10 	vmov	r6, r7, d0
 8007bec:	4690      	mov	r8, r2
 8007bee:	f7ff fcd5 	bl	800759c <_Balloc>
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	b930      	cbnz	r0, 8007c04 <__d2b+0x24>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	4b25      	ldr	r3, [pc, #148]	; (8007c90 <__d2b+0xb0>)
 8007bfa:	4826      	ldr	r0, [pc, #152]	; (8007c94 <__d2b+0xb4>)
 8007bfc:	f240 310a 	movw	r1, #778	; 0x30a
 8007c00:	f000 fac4 	bl	800818c <__assert_func>
 8007c04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007c08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c0c:	bb35      	cbnz	r5, 8007c5c <__d2b+0x7c>
 8007c0e:	2e00      	cmp	r6, #0
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	d028      	beq.n	8007c66 <__d2b+0x86>
 8007c14:	4668      	mov	r0, sp
 8007c16:	9600      	str	r6, [sp, #0]
 8007c18:	f7ff fd8c 	bl	8007734 <__lo0bits>
 8007c1c:	9900      	ldr	r1, [sp, #0]
 8007c1e:	b300      	cbz	r0, 8007c62 <__d2b+0x82>
 8007c20:	9a01      	ldr	r2, [sp, #4]
 8007c22:	f1c0 0320 	rsb	r3, r0, #32
 8007c26:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2a:	430b      	orrs	r3, r1
 8007c2c:	40c2      	lsrs	r2, r0
 8007c2e:	6163      	str	r3, [r4, #20]
 8007c30:	9201      	str	r2, [sp, #4]
 8007c32:	9b01      	ldr	r3, [sp, #4]
 8007c34:	61a3      	str	r3, [r4, #24]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	bf14      	ite	ne
 8007c3a:	2202      	movne	r2, #2
 8007c3c:	2201      	moveq	r2, #1
 8007c3e:	6122      	str	r2, [r4, #16]
 8007c40:	b1d5      	cbz	r5, 8007c78 <__d2b+0x98>
 8007c42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c46:	4405      	add	r5, r0
 8007c48:	f8c9 5000 	str.w	r5, [r9]
 8007c4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c50:	f8c8 0000 	str.w	r0, [r8]
 8007c54:	4620      	mov	r0, r4
 8007c56:	b003      	add	sp, #12
 8007c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c60:	e7d5      	b.n	8007c0e <__d2b+0x2e>
 8007c62:	6161      	str	r1, [r4, #20]
 8007c64:	e7e5      	b.n	8007c32 <__d2b+0x52>
 8007c66:	a801      	add	r0, sp, #4
 8007c68:	f7ff fd64 	bl	8007734 <__lo0bits>
 8007c6c:	9b01      	ldr	r3, [sp, #4]
 8007c6e:	6163      	str	r3, [r4, #20]
 8007c70:	2201      	movs	r2, #1
 8007c72:	6122      	str	r2, [r4, #16]
 8007c74:	3020      	adds	r0, #32
 8007c76:	e7e3      	b.n	8007c40 <__d2b+0x60>
 8007c78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c80:	f8c9 0000 	str.w	r0, [r9]
 8007c84:	6918      	ldr	r0, [r3, #16]
 8007c86:	f7ff fd35 	bl	80076f4 <__hi0bits>
 8007c8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c8e:	e7df      	b.n	8007c50 <__d2b+0x70>
 8007c90:	08009a4b 	.word	0x08009a4b
 8007c94:	08009abc 	.word	0x08009abc

08007c98 <_calloc_r>:
 8007c98:	b513      	push	{r0, r1, r4, lr}
 8007c9a:	434a      	muls	r2, r1
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	9201      	str	r2, [sp, #4]
 8007ca0:	f000 f85a 	bl	8007d58 <_malloc_r>
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	b118      	cbz	r0, 8007cb0 <_calloc_r+0x18>
 8007ca8:	9a01      	ldr	r2, [sp, #4]
 8007caa:	2100      	movs	r1, #0
 8007cac:	f7fd fe78 	bl	80059a0 <memset>
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	b002      	add	sp, #8
 8007cb4:	bd10      	pop	{r4, pc}
	...

08007cb8 <_free_r>:
 8007cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cba:	2900      	cmp	r1, #0
 8007cbc:	d048      	beq.n	8007d50 <_free_r+0x98>
 8007cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cc2:	9001      	str	r0, [sp, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f1a1 0404 	sub.w	r4, r1, #4
 8007cca:	bfb8      	it	lt
 8007ccc:	18e4      	addlt	r4, r4, r3
 8007cce:	f000 fae3 	bl	8008298 <__malloc_lock>
 8007cd2:	4a20      	ldr	r2, [pc, #128]	; (8007d54 <_free_r+0x9c>)
 8007cd4:	9801      	ldr	r0, [sp, #4]
 8007cd6:	6813      	ldr	r3, [r2, #0]
 8007cd8:	4615      	mov	r5, r2
 8007cda:	b933      	cbnz	r3, 8007cea <_free_r+0x32>
 8007cdc:	6063      	str	r3, [r4, #4]
 8007cde:	6014      	str	r4, [r2, #0]
 8007ce0:	b003      	add	sp, #12
 8007ce2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ce6:	f000 badd 	b.w	80082a4 <__malloc_unlock>
 8007cea:	42a3      	cmp	r3, r4
 8007cec:	d90b      	bls.n	8007d06 <_free_r+0x4e>
 8007cee:	6821      	ldr	r1, [r4, #0]
 8007cf0:	1862      	adds	r2, r4, r1
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	bf04      	itt	eq
 8007cf6:	681a      	ldreq	r2, [r3, #0]
 8007cf8:	685b      	ldreq	r3, [r3, #4]
 8007cfa:	6063      	str	r3, [r4, #4]
 8007cfc:	bf04      	itt	eq
 8007cfe:	1852      	addeq	r2, r2, r1
 8007d00:	6022      	streq	r2, [r4, #0]
 8007d02:	602c      	str	r4, [r5, #0]
 8007d04:	e7ec      	b.n	8007ce0 <_free_r+0x28>
 8007d06:	461a      	mov	r2, r3
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	b10b      	cbz	r3, 8007d10 <_free_r+0x58>
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	d9fa      	bls.n	8007d06 <_free_r+0x4e>
 8007d10:	6811      	ldr	r1, [r2, #0]
 8007d12:	1855      	adds	r5, r2, r1
 8007d14:	42a5      	cmp	r5, r4
 8007d16:	d10b      	bne.n	8007d30 <_free_r+0x78>
 8007d18:	6824      	ldr	r4, [r4, #0]
 8007d1a:	4421      	add	r1, r4
 8007d1c:	1854      	adds	r4, r2, r1
 8007d1e:	42a3      	cmp	r3, r4
 8007d20:	6011      	str	r1, [r2, #0]
 8007d22:	d1dd      	bne.n	8007ce0 <_free_r+0x28>
 8007d24:	681c      	ldr	r4, [r3, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	6053      	str	r3, [r2, #4]
 8007d2a:	4421      	add	r1, r4
 8007d2c:	6011      	str	r1, [r2, #0]
 8007d2e:	e7d7      	b.n	8007ce0 <_free_r+0x28>
 8007d30:	d902      	bls.n	8007d38 <_free_r+0x80>
 8007d32:	230c      	movs	r3, #12
 8007d34:	6003      	str	r3, [r0, #0]
 8007d36:	e7d3      	b.n	8007ce0 <_free_r+0x28>
 8007d38:	6825      	ldr	r5, [r4, #0]
 8007d3a:	1961      	adds	r1, r4, r5
 8007d3c:	428b      	cmp	r3, r1
 8007d3e:	bf04      	itt	eq
 8007d40:	6819      	ldreq	r1, [r3, #0]
 8007d42:	685b      	ldreq	r3, [r3, #4]
 8007d44:	6063      	str	r3, [r4, #4]
 8007d46:	bf04      	itt	eq
 8007d48:	1949      	addeq	r1, r1, r5
 8007d4a:	6021      	streq	r1, [r4, #0]
 8007d4c:	6054      	str	r4, [r2, #4]
 8007d4e:	e7c7      	b.n	8007ce0 <_free_r+0x28>
 8007d50:	b003      	add	sp, #12
 8007d52:	bd30      	pop	{r4, r5, pc}
 8007d54:	20004204 	.word	0x20004204

08007d58 <_malloc_r>:
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5a:	1ccd      	adds	r5, r1, #3
 8007d5c:	f025 0503 	bic.w	r5, r5, #3
 8007d60:	3508      	adds	r5, #8
 8007d62:	2d0c      	cmp	r5, #12
 8007d64:	bf38      	it	cc
 8007d66:	250c      	movcc	r5, #12
 8007d68:	2d00      	cmp	r5, #0
 8007d6a:	4606      	mov	r6, r0
 8007d6c:	db01      	blt.n	8007d72 <_malloc_r+0x1a>
 8007d6e:	42a9      	cmp	r1, r5
 8007d70:	d903      	bls.n	8007d7a <_malloc_r+0x22>
 8007d72:	230c      	movs	r3, #12
 8007d74:	6033      	str	r3, [r6, #0]
 8007d76:	2000      	movs	r0, #0
 8007d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d7a:	f000 fa8d 	bl	8008298 <__malloc_lock>
 8007d7e:	4921      	ldr	r1, [pc, #132]	; (8007e04 <_malloc_r+0xac>)
 8007d80:	680a      	ldr	r2, [r1, #0]
 8007d82:	4614      	mov	r4, r2
 8007d84:	b99c      	cbnz	r4, 8007dae <_malloc_r+0x56>
 8007d86:	4f20      	ldr	r7, [pc, #128]	; (8007e08 <_malloc_r+0xb0>)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	b923      	cbnz	r3, 8007d96 <_malloc_r+0x3e>
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f000 f996 	bl	80080c0 <_sbrk_r>
 8007d94:	6038      	str	r0, [r7, #0]
 8007d96:	4629      	mov	r1, r5
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f000 f991 	bl	80080c0 <_sbrk_r>
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	d123      	bne.n	8007dea <_malloc_r+0x92>
 8007da2:	230c      	movs	r3, #12
 8007da4:	6033      	str	r3, [r6, #0]
 8007da6:	4630      	mov	r0, r6
 8007da8:	f000 fa7c 	bl	80082a4 <__malloc_unlock>
 8007dac:	e7e3      	b.n	8007d76 <_malloc_r+0x1e>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	1b5b      	subs	r3, r3, r5
 8007db2:	d417      	bmi.n	8007de4 <_malloc_r+0x8c>
 8007db4:	2b0b      	cmp	r3, #11
 8007db6:	d903      	bls.n	8007dc0 <_malloc_r+0x68>
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	441c      	add	r4, r3
 8007dbc:	6025      	str	r5, [r4, #0]
 8007dbe:	e004      	b.n	8007dca <_malloc_r+0x72>
 8007dc0:	6863      	ldr	r3, [r4, #4]
 8007dc2:	42a2      	cmp	r2, r4
 8007dc4:	bf0c      	ite	eq
 8007dc6:	600b      	streq	r3, [r1, #0]
 8007dc8:	6053      	strne	r3, [r2, #4]
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f000 fa6a 	bl	80082a4 <__malloc_unlock>
 8007dd0:	f104 000b 	add.w	r0, r4, #11
 8007dd4:	1d23      	adds	r3, r4, #4
 8007dd6:	f020 0007 	bic.w	r0, r0, #7
 8007dda:	1ac2      	subs	r2, r0, r3
 8007ddc:	d0cc      	beq.n	8007d78 <_malloc_r+0x20>
 8007dde:	1a1b      	subs	r3, r3, r0
 8007de0:	50a3      	str	r3, [r4, r2]
 8007de2:	e7c9      	b.n	8007d78 <_malloc_r+0x20>
 8007de4:	4622      	mov	r2, r4
 8007de6:	6864      	ldr	r4, [r4, #4]
 8007de8:	e7cc      	b.n	8007d84 <_malloc_r+0x2c>
 8007dea:	1cc4      	adds	r4, r0, #3
 8007dec:	f024 0403 	bic.w	r4, r4, #3
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	d0e3      	beq.n	8007dbc <_malloc_r+0x64>
 8007df4:	1a21      	subs	r1, r4, r0
 8007df6:	4630      	mov	r0, r6
 8007df8:	f000 f962 	bl	80080c0 <_sbrk_r>
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d1dd      	bne.n	8007dbc <_malloc_r+0x64>
 8007e00:	e7cf      	b.n	8007da2 <_malloc_r+0x4a>
 8007e02:	bf00      	nop
 8007e04:	20004204 	.word	0x20004204
 8007e08:	20004208 	.word	0x20004208

08007e0c <__sfputc_r>:
 8007e0c:	6893      	ldr	r3, [r2, #8]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	b410      	push	{r4}
 8007e14:	6093      	str	r3, [r2, #8]
 8007e16:	da08      	bge.n	8007e2a <__sfputc_r+0x1e>
 8007e18:	6994      	ldr	r4, [r2, #24]
 8007e1a:	42a3      	cmp	r3, r4
 8007e1c:	db01      	blt.n	8007e22 <__sfputc_r+0x16>
 8007e1e:	290a      	cmp	r1, #10
 8007e20:	d103      	bne.n	8007e2a <__sfputc_r+0x1e>
 8007e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e26:	f7fe ba45 	b.w	80062b4 <__swbuf_r>
 8007e2a:	6813      	ldr	r3, [r2, #0]
 8007e2c:	1c58      	adds	r0, r3, #1
 8007e2e:	6010      	str	r0, [r2, #0]
 8007e30:	7019      	strb	r1, [r3, #0]
 8007e32:	4608      	mov	r0, r1
 8007e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <__sfputs_r>:
 8007e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	460f      	mov	r7, r1
 8007e40:	4614      	mov	r4, r2
 8007e42:	18d5      	adds	r5, r2, r3
 8007e44:	42ac      	cmp	r4, r5
 8007e46:	d101      	bne.n	8007e4c <__sfputs_r+0x12>
 8007e48:	2000      	movs	r0, #0
 8007e4a:	e007      	b.n	8007e5c <__sfputs_r+0x22>
 8007e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e50:	463a      	mov	r2, r7
 8007e52:	4630      	mov	r0, r6
 8007e54:	f7ff ffda 	bl	8007e0c <__sfputc_r>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d1f3      	bne.n	8007e44 <__sfputs_r+0xa>
 8007e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e60 <_vfiprintf_r>:
 8007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	460d      	mov	r5, r1
 8007e66:	b09d      	sub	sp, #116	; 0x74
 8007e68:	4614      	mov	r4, r2
 8007e6a:	4698      	mov	r8, r3
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	b118      	cbz	r0, 8007e78 <_vfiprintf_r+0x18>
 8007e70:	6983      	ldr	r3, [r0, #24]
 8007e72:	b90b      	cbnz	r3, 8007e78 <_vfiprintf_r+0x18>
 8007e74:	f7ff fa72 	bl	800735c <__sinit>
 8007e78:	4b89      	ldr	r3, [pc, #548]	; (80080a0 <_vfiprintf_r+0x240>)
 8007e7a:	429d      	cmp	r5, r3
 8007e7c:	d11b      	bne.n	8007eb6 <_vfiprintf_r+0x56>
 8007e7e:	6875      	ldr	r5, [r6, #4]
 8007e80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e82:	07d9      	lsls	r1, r3, #31
 8007e84:	d405      	bmi.n	8007e92 <_vfiprintf_r+0x32>
 8007e86:	89ab      	ldrh	r3, [r5, #12]
 8007e88:	059a      	lsls	r2, r3, #22
 8007e8a:	d402      	bmi.n	8007e92 <_vfiprintf_r+0x32>
 8007e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e8e:	f7ff fb08 	bl	80074a2 <__retarget_lock_acquire_recursive>
 8007e92:	89ab      	ldrh	r3, [r5, #12]
 8007e94:	071b      	lsls	r3, r3, #28
 8007e96:	d501      	bpl.n	8007e9c <_vfiprintf_r+0x3c>
 8007e98:	692b      	ldr	r3, [r5, #16]
 8007e9a:	b9eb      	cbnz	r3, 8007ed8 <_vfiprintf_r+0x78>
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	f7fe fa5a 	bl	8006358 <__swsetup_r>
 8007ea4:	b1c0      	cbz	r0, 8007ed8 <_vfiprintf_r+0x78>
 8007ea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ea8:	07dc      	lsls	r4, r3, #31
 8007eaa:	d50e      	bpl.n	8007eca <_vfiprintf_r+0x6a>
 8007eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007eb0:	b01d      	add	sp, #116	; 0x74
 8007eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb6:	4b7b      	ldr	r3, [pc, #492]	; (80080a4 <_vfiprintf_r+0x244>)
 8007eb8:	429d      	cmp	r5, r3
 8007eba:	d101      	bne.n	8007ec0 <_vfiprintf_r+0x60>
 8007ebc:	68b5      	ldr	r5, [r6, #8]
 8007ebe:	e7df      	b.n	8007e80 <_vfiprintf_r+0x20>
 8007ec0:	4b79      	ldr	r3, [pc, #484]	; (80080a8 <_vfiprintf_r+0x248>)
 8007ec2:	429d      	cmp	r5, r3
 8007ec4:	bf08      	it	eq
 8007ec6:	68f5      	ldreq	r5, [r6, #12]
 8007ec8:	e7da      	b.n	8007e80 <_vfiprintf_r+0x20>
 8007eca:	89ab      	ldrh	r3, [r5, #12]
 8007ecc:	0598      	lsls	r0, r3, #22
 8007ece:	d4ed      	bmi.n	8007eac <_vfiprintf_r+0x4c>
 8007ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ed2:	f7ff fae7 	bl	80074a4 <__retarget_lock_release_recursive>
 8007ed6:	e7e9      	b.n	8007eac <_vfiprintf_r+0x4c>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9309      	str	r3, [sp, #36]	; 0x24
 8007edc:	2320      	movs	r3, #32
 8007ede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ee6:	2330      	movs	r3, #48	; 0x30
 8007ee8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80080ac <_vfiprintf_r+0x24c>
 8007eec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ef0:	f04f 0901 	mov.w	r9, #1
 8007ef4:	4623      	mov	r3, r4
 8007ef6:	469a      	mov	sl, r3
 8007ef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007efc:	b10a      	cbz	r2, 8007f02 <_vfiprintf_r+0xa2>
 8007efe:	2a25      	cmp	r2, #37	; 0x25
 8007f00:	d1f9      	bne.n	8007ef6 <_vfiprintf_r+0x96>
 8007f02:	ebba 0b04 	subs.w	fp, sl, r4
 8007f06:	d00b      	beq.n	8007f20 <_vfiprintf_r+0xc0>
 8007f08:	465b      	mov	r3, fp
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	4630      	mov	r0, r6
 8007f10:	f7ff ff93 	bl	8007e3a <__sfputs_r>
 8007f14:	3001      	adds	r0, #1
 8007f16:	f000 80aa 	beq.w	800806e <_vfiprintf_r+0x20e>
 8007f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f1c:	445a      	add	r2, fp
 8007f1e:	9209      	str	r2, [sp, #36]	; 0x24
 8007f20:	f89a 3000 	ldrb.w	r3, [sl]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 80a2 	beq.w	800806e <_vfiprintf_r+0x20e>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f34:	f10a 0a01 	add.w	sl, sl, #1
 8007f38:	9304      	str	r3, [sp, #16]
 8007f3a:	9307      	str	r3, [sp, #28]
 8007f3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f40:	931a      	str	r3, [sp, #104]	; 0x68
 8007f42:	4654      	mov	r4, sl
 8007f44:	2205      	movs	r2, #5
 8007f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f4a:	4858      	ldr	r0, [pc, #352]	; (80080ac <_vfiprintf_r+0x24c>)
 8007f4c:	f7f8 f948 	bl	80001e0 <memchr>
 8007f50:	9a04      	ldr	r2, [sp, #16]
 8007f52:	b9d8      	cbnz	r0, 8007f8c <_vfiprintf_r+0x12c>
 8007f54:	06d1      	lsls	r1, r2, #27
 8007f56:	bf44      	itt	mi
 8007f58:	2320      	movmi	r3, #32
 8007f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f5e:	0713      	lsls	r3, r2, #28
 8007f60:	bf44      	itt	mi
 8007f62:	232b      	movmi	r3, #43	; 0x2b
 8007f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f68:	f89a 3000 	ldrb.w	r3, [sl]
 8007f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f6e:	d015      	beq.n	8007f9c <_vfiprintf_r+0x13c>
 8007f70:	9a07      	ldr	r2, [sp, #28]
 8007f72:	4654      	mov	r4, sl
 8007f74:	2000      	movs	r0, #0
 8007f76:	f04f 0c0a 	mov.w	ip, #10
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f80:	3b30      	subs	r3, #48	; 0x30
 8007f82:	2b09      	cmp	r3, #9
 8007f84:	d94e      	bls.n	8008024 <_vfiprintf_r+0x1c4>
 8007f86:	b1b0      	cbz	r0, 8007fb6 <_vfiprintf_r+0x156>
 8007f88:	9207      	str	r2, [sp, #28]
 8007f8a:	e014      	b.n	8007fb6 <_vfiprintf_r+0x156>
 8007f8c:	eba0 0308 	sub.w	r3, r0, r8
 8007f90:	fa09 f303 	lsl.w	r3, r9, r3
 8007f94:	4313      	orrs	r3, r2
 8007f96:	9304      	str	r3, [sp, #16]
 8007f98:	46a2      	mov	sl, r4
 8007f9a:	e7d2      	b.n	8007f42 <_vfiprintf_r+0xe2>
 8007f9c:	9b03      	ldr	r3, [sp, #12]
 8007f9e:	1d19      	adds	r1, r3, #4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	9103      	str	r1, [sp, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	bfbb      	ittet	lt
 8007fa8:	425b      	neglt	r3, r3
 8007faa:	f042 0202 	orrlt.w	r2, r2, #2
 8007fae:	9307      	strge	r3, [sp, #28]
 8007fb0:	9307      	strlt	r3, [sp, #28]
 8007fb2:	bfb8      	it	lt
 8007fb4:	9204      	strlt	r2, [sp, #16]
 8007fb6:	7823      	ldrb	r3, [r4, #0]
 8007fb8:	2b2e      	cmp	r3, #46	; 0x2e
 8007fba:	d10c      	bne.n	8007fd6 <_vfiprintf_r+0x176>
 8007fbc:	7863      	ldrb	r3, [r4, #1]
 8007fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8007fc0:	d135      	bne.n	800802e <_vfiprintf_r+0x1ce>
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	1d1a      	adds	r2, r3, #4
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	9203      	str	r2, [sp, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	bfb8      	it	lt
 8007fce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007fd2:	3402      	adds	r4, #2
 8007fd4:	9305      	str	r3, [sp, #20]
 8007fd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80080bc <_vfiprintf_r+0x25c>
 8007fda:	7821      	ldrb	r1, [r4, #0]
 8007fdc:	2203      	movs	r2, #3
 8007fde:	4650      	mov	r0, sl
 8007fe0:	f7f8 f8fe 	bl	80001e0 <memchr>
 8007fe4:	b140      	cbz	r0, 8007ff8 <_vfiprintf_r+0x198>
 8007fe6:	2340      	movs	r3, #64	; 0x40
 8007fe8:	eba0 000a 	sub.w	r0, r0, sl
 8007fec:	fa03 f000 	lsl.w	r0, r3, r0
 8007ff0:	9b04      	ldr	r3, [sp, #16]
 8007ff2:	4303      	orrs	r3, r0
 8007ff4:	3401      	adds	r4, #1
 8007ff6:	9304      	str	r3, [sp, #16]
 8007ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ffc:	482c      	ldr	r0, [pc, #176]	; (80080b0 <_vfiprintf_r+0x250>)
 8007ffe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008002:	2206      	movs	r2, #6
 8008004:	f7f8 f8ec 	bl	80001e0 <memchr>
 8008008:	2800      	cmp	r0, #0
 800800a:	d03f      	beq.n	800808c <_vfiprintf_r+0x22c>
 800800c:	4b29      	ldr	r3, [pc, #164]	; (80080b4 <_vfiprintf_r+0x254>)
 800800e:	bb1b      	cbnz	r3, 8008058 <_vfiprintf_r+0x1f8>
 8008010:	9b03      	ldr	r3, [sp, #12]
 8008012:	3307      	adds	r3, #7
 8008014:	f023 0307 	bic.w	r3, r3, #7
 8008018:	3308      	adds	r3, #8
 800801a:	9303      	str	r3, [sp, #12]
 800801c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801e:	443b      	add	r3, r7
 8008020:	9309      	str	r3, [sp, #36]	; 0x24
 8008022:	e767      	b.n	8007ef4 <_vfiprintf_r+0x94>
 8008024:	fb0c 3202 	mla	r2, ip, r2, r3
 8008028:	460c      	mov	r4, r1
 800802a:	2001      	movs	r0, #1
 800802c:	e7a5      	b.n	8007f7a <_vfiprintf_r+0x11a>
 800802e:	2300      	movs	r3, #0
 8008030:	3401      	adds	r4, #1
 8008032:	9305      	str	r3, [sp, #20]
 8008034:	4619      	mov	r1, r3
 8008036:	f04f 0c0a 	mov.w	ip, #10
 800803a:	4620      	mov	r0, r4
 800803c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008040:	3a30      	subs	r2, #48	; 0x30
 8008042:	2a09      	cmp	r2, #9
 8008044:	d903      	bls.n	800804e <_vfiprintf_r+0x1ee>
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0c5      	beq.n	8007fd6 <_vfiprintf_r+0x176>
 800804a:	9105      	str	r1, [sp, #20]
 800804c:	e7c3      	b.n	8007fd6 <_vfiprintf_r+0x176>
 800804e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008052:	4604      	mov	r4, r0
 8008054:	2301      	movs	r3, #1
 8008056:	e7f0      	b.n	800803a <_vfiprintf_r+0x1da>
 8008058:	ab03      	add	r3, sp, #12
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	462a      	mov	r2, r5
 800805e:	4b16      	ldr	r3, [pc, #88]	; (80080b8 <_vfiprintf_r+0x258>)
 8008060:	a904      	add	r1, sp, #16
 8008062:	4630      	mov	r0, r6
 8008064:	f7fd fd44 	bl	8005af0 <_printf_float>
 8008068:	4607      	mov	r7, r0
 800806a:	1c78      	adds	r0, r7, #1
 800806c:	d1d6      	bne.n	800801c <_vfiprintf_r+0x1bc>
 800806e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008070:	07d9      	lsls	r1, r3, #31
 8008072:	d405      	bmi.n	8008080 <_vfiprintf_r+0x220>
 8008074:	89ab      	ldrh	r3, [r5, #12]
 8008076:	059a      	lsls	r2, r3, #22
 8008078:	d402      	bmi.n	8008080 <_vfiprintf_r+0x220>
 800807a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800807c:	f7ff fa12 	bl	80074a4 <__retarget_lock_release_recursive>
 8008080:	89ab      	ldrh	r3, [r5, #12]
 8008082:	065b      	lsls	r3, r3, #25
 8008084:	f53f af12 	bmi.w	8007eac <_vfiprintf_r+0x4c>
 8008088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800808a:	e711      	b.n	8007eb0 <_vfiprintf_r+0x50>
 800808c:	ab03      	add	r3, sp, #12
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	462a      	mov	r2, r5
 8008092:	4b09      	ldr	r3, [pc, #36]	; (80080b8 <_vfiprintf_r+0x258>)
 8008094:	a904      	add	r1, sp, #16
 8008096:	4630      	mov	r0, r6
 8008098:	f7fd ffce 	bl	8006038 <_printf_i>
 800809c:	e7e4      	b.n	8008068 <_vfiprintf_r+0x208>
 800809e:	bf00      	nop
 80080a0:	08009a7c 	.word	0x08009a7c
 80080a4:	08009a9c 	.word	0x08009a9c
 80080a8:	08009a5c 	.word	0x08009a5c
 80080ac:	08009c1c 	.word	0x08009c1c
 80080b0:	08009c26 	.word	0x08009c26
 80080b4:	08005af1 	.word	0x08005af1
 80080b8:	08007e3b 	.word	0x08007e3b
 80080bc:	08009c22 	.word	0x08009c22

080080c0 <_sbrk_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4d06      	ldr	r5, [pc, #24]	; (80080dc <_sbrk_r+0x1c>)
 80080c4:	2300      	movs	r3, #0
 80080c6:	4604      	mov	r4, r0
 80080c8:	4608      	mov	r0, r1
 80080ca:	602b      	str	r3, [r5, #0]
 80080cc:	f7f9 fc9e 	bl	8001a0c <_sbrk>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d102      	bne.n	80080da <_sbrk_r+0x1a>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	b103      	cbz	r3, 80080da <_sbrk_r+0x1a>
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	2000b378 	.word	0x2000b378

080080e0 <__sread>:
 80080e0:	b510      	push	{r4, lr}
 80080e2:	460c      	mov	r4, r1
 80080e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e8:	f000 f8e2 	bl	80082b0 <_read_r>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	bfab      	itete	ge
 80080f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080f2:	89a3      	ldrhlt	r3, [r4, #12]
 80080f4:	181b      	addge	r3, r3, r0
 80080f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080fa:	bfac      	ite	ge
 80080fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80080fe:	81a3      	strhlt	r3, [r4, #12]
 8008100:	bd10      	pop	{r4, pc}

08008102 <__swrite>:
 8008102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008106:	461f      	mov	r7, r3
 8008108:	898b      	ldrh	r3, [r1, #12]
 800810a:	05db      	lsls	r3, r3, #23
 800810c:	4605      	mov	r5, r0
 800810e:	460c      	mov	r4, r1
 8008110:	4616      	mov	r6, r2
 8008112:	d505      	bpl.n	8008120 <__swrite+0x1e>
 8008114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008118:	2302      	movs	r3, #2
 800811a:	2200      	movs	r2, #0
 800811c:	f000 f898 	bl	8008250 <_lseek_r>
 8008120:	89a3      	ldrh	r3, [r4, #12]
 8008122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800812a:	81a3      	strh	r3, [r4, #12]
 800812c:	4632      	mov	r2, r6
 800812e:	463b      	mov	r3, r7
 8008130:	4628      	mov	r0, r5
 8008132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008136:	f000 b817 	b.w	8008168 <_write_r>

0800813a <__sseek>:
 800813a:	b510      	push	{r4, lr}
 800813c:	460c      	mov	r4, r1
 800813e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008142:	f000 f885 	bl	8008250 <_lseek_r>
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	bf15      	itete	ne
 800814c:	6560      	strne	r0, [r4, #84]	; 0x54
 800814e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008156:	81a3      	strheq	r3, [r4, #12]
 8008158:	bf18      	it	ne
 800815a:	81a3      	strhne	r3, [r4, #12]
 800815c:	bd10      	pop	{r4, pc}

0800815e <__sclose>:
 800815e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008162:	f000 b831 	b.w	80081c8 <_close_r>
	...

08008168 <_write_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d07      	ldr	r5, [pc, #28]	; (8008188 <_write_r+0x20>)
 800816c:	4604      	mov	r4, r0
 800816e:	4608      	mov	r0, r1
 8008170:	4611      	mov	r1, r2
 8008172:	2200      	movs	r2, #0
 8008174:	602a      	str	r2, [r5, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	f7f9 fbf7 	bl	800196a <_write>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d102      	bne.n	8008186 <_write_r+0x1e>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	b103      	cbz	r3, 8008186 <_write_r+0x1e>
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	2000b378 	.word	0x2000b378

0800818c <__assert_func>:
 800818c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800818e:	4614      	mov	r4, r2
 8008190:	461a      	mov	r2, r3
 8008192:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <__assert_func+0x2c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4605      	mov	r5, r0
 8008198:	68d8      	ldr	r0, [r3, #12]
 800819a:	b14c      	cbz	r4, 80081b0 <__assert_func+0x24>
 800819c:	4b07      	ldr	r3, [pc, #28]	; (80081bc <__assert_func+0x30>)
 800819e:	9100      	str	r1, [sp, #0]
 80081a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081a4:	4906      	ldr	r1, [pc, #24]	; (80081c0 <__assert_func+0x34>)
 80081a6:	462b      	mov	r3, r5
 80081a8:	f000 f81e 	bl	80081e8 <fiprintf>
 80081ac:	f000 f89f 	bl	80082ee <abort>
 80081b0:	4b04      	ldr	r3, [pc, #16]	; (80081c4 <__assert_func+0x38>)
 80081b2:	461c      	mov	r4, r3
 80081b4:	e7f3      	b.n	800819e <__assert_func+0x12>
 80081b6:	bf00      	nop
 80081b8:	2000000c 	.word	0x2000000c
 80081bc:	08009c2d 	.word	0x08009c2d
 80081c0:	08009c3a 	.word	0x08009c3a
 80081c4:	08009c68 	.word	0x08009c68

080081c8 <_close_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	4d06      	ldr	r5, [pc, #24]	; (80081e4 <_close_r+0x1c>)
 80081cc:	2300      	movs	r3, #0
 80081ce:	4604      	mov	r4, r0
 80081d0:	4608      	mov	r0, r1
 80081d2:	602b      	str	r3, [r5, #0]
 80081d4:	f7f9 fbe5 	bl	80019a2 <_close>
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	d102      	bne.n	80081e2 <_close_r+0x1a>
 80081dc:	682b      	ldr	r3, [r5, #0]
 80081de:	b103      	cbz	r3, 80081e2 <_close_r+0x1a>
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	2000b378 	.word	0x2000b378

080081e8 <fiprintf>:
 80081e8:	b40e      	push	{r1, r2, r3}
 80081ea:	b503      	push	{r0, r1, lr}
 80081ec:	4601      	mov	r1, r0
 80081ee:	ab03      	add	r3, sp, #12
 80081f0:	4805      	ldr	r0, [pc, #20]	; (8008208 <fiprintf+0x20>)
 80081f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80081f6:	6800      	ldr	r0, [r0, #0]
 80081f8:	9301      	str	r3, [sp, #4]
 80081fa:	f7ff fe31 	bl	8007e60 <_vfiprintf_r>
 80081fe:	b002      	add	sp, #8
 8008200:	f85d eb04 	ldr.w	lr, [sp], #4
 8008204:	b003      	add	sp, #12
 8008206:	4770      	bx	lr
 8008208:	2000000c 	.word	0x2000000c

0800820c <_fstat_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	4d07      	ldr	r5, [pc, #28]	; (800822c <_fstat_r+0x20>)
 8008210:	2300      	movs	r3, #0
 8008212:	4604      	mov	r4, r0
 8008214:	4608      	mov	r0, r1
 8008216:	4611      	mov	r1, r2
 8008218:	602b      	str	r3, [r5, #0]
 800821a:	f7f9 fbce 	bl	80019ba <_fstat>
 800821e:	1c43      	adds	r3, r0, #1
 8008220:	d102      	bne.n	8008228 <_fstat_r+0x1c>
 8008222:	682b      	ldr	r3, [r5, #0]
 8008224:	b103      	cbz	r3, 8008228 <_fstat_r+0x1c>
 8008226:	6023      	str	r3, [r4, #0]
 8008228:	bd38      	pop	{r3, r4, r5, pc}
 800822a:	bf00      	nop
 800822c:	2000b378 	.word	0x2000b378

08008230 <_isatty_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	4d06      	ldr	r5, [pc, #24]	; (800824c <_isatty_r+0x1c>)
 8008234:	2300      	movs	r3, #0
 8008236:	4604      	mov	r4, r0
 8008238:	4608      	mov	r0, r1
 800823a:	602b      	str	r3, [r5, #0]
 800823c:	f7f9 fbcd 	bl	80019da <_isatty>
 8008240:	1c43      	adds	r3, r0, #1
 8008242:	d102      	bne.n	800824a <_isatty_r+0x1a>
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	b103      	cbz	r3, 800824a <_isatty_r+0x1a>
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	bd38      	pop	{r3, r4, r5, pc}
 800824c:	2000b378 	.word	0x2000b378

08008250 <_lseek_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d07      	ldr	r5, [pc, #28]	; (8008270 <_lseek_r+0x20>)
 8008254:	4604      	mov	r4, r0
 8008256:	4608      	mov	r0, r1
 8008258:	4611      	mov	r1, r2
 800825a:	2200      	movs	r2, #0
 800825c:	602a      	str	r2, [r5, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	f7f9 fbc6 	bl	80019f0 <_lseek>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d102      	bne.n	800826e <_lseek_r+0x1e>
 8008268:	682b      	ldr	r3, [r5, #0]
 800826a:	b103      	cbz	r3, 800826e <_lseek_r+0x1e>
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	2000b378 	.word	0x2000b378

08008274 <__ascii_mbtowc>:
 8008274:	b082      	sub	sp, #8
 8008276:	b901      	cbnz	r1, 800827a <__ascii_mbtowc+0x6>
 8008278:	a901      	add	r1, sp, #4
 800827a:	b142      	cbz	r2, 800828e <__ascii_mbtowc+0x1a>
 800827c:	b14b      	cbz	r3, 8008292 <__ascii_mbtowc+0x1e>
 800827e:	7813      	ldrb	r3, [r2, #0]
 8008280:	600b      	str	r3, [r1, #0]
 8008282:	7812      	ldrb	r2, [r2, #0]
 8008284:	1e10      	subs	r0, r2, #0
 8008286:	bf18      	it	ne
 8008288:	2001      	movne	r0, #1
 800828a:	b002      	add	sp, #8
 800828c:	4770      	bx	lr
 800828e:	4610      	mov	r0, r2
 8008290:	e7fb      	b.n	800828a <__ascii_mbtowc+0x16>
 8008292:	f06f 0001 	mvn.w	r0, #1
 8008296:	e7f8      	b.n	800828a <__ascii_mbtowc+0x16>

08008298 <__malloc_lock>:
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <__malloc_lock+0x8>)
 800829a:	f7ff b902 	b.w	80074a2 <__retarget_lock_acquire_recursive>
 800829e:	bf00      	nop
 80082a0:	2000b370 	.word	0x2000b370

080082a4 <__malloc_unlock>:
 80082a4:	4801      	ldr	r0, [pc, #4]	; (80082ac <__malloc_unlock+0x8>)
 80082a6:	f7ff b8fd 	b.w	80074a4 <__retarget_lock_release_recursive>
 80082aa:	bf00      	nop
 80082ac:	2000b370 	.word	0x2000b370

080082b0 <_read_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4d07      	ldr	r5, [pc, #28]	; (80082d0 <_read_r+0x20>)
 80082b4:	4604      	mov	r4, r0
 80082b6:	4608      	mov	r0, r1
 80082b8:	4611      	mov	r1, r2
 80082ba:	2200      	movs	r2, #0
 80082bc:	602a      	str	r2, [r5, #0]
 80082be:	461a      	mov	r2, r3
 80082c0:	f7f9 fb36 	bl	8001930 <_read>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d102      	bne.n	80082ce <_read_r+0x1e>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	b103      	cbz	r3, 80082ce <_read_r+0x1e>
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	2000b378 	.word	0x2000b378

080082d4 <__ascii_wctomb>:
 80082d4:	b149      	cbz	r1, 80082ea <__ascii_wctomb+0x16>
 80082d6:	2aff      	cmp	r2, #255	; 0xff
 80082d8:	bf85      	ittet	hi
 80082da:	238a      	movhi	r3, #138	; 0x8a
 80082dc:	6003      	strhi	r3, [r0, #0]
 80082de:	700a      	strbls	r2, [r1, #0]
 80082e0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80082e4:	bf98      	it	ls
 80082e6:	2001      	movls	r0, #1
 80082e8:	4770      	bx	lr
 80082ea:	4608      	mov	r0, r1
 80082ec:	4770      	bx	lr

080082ee <abort>:
 80082ee:	b508      	push	{r3, lr}
 80082f0:	2006      	movs	r0, #6
 80082f2:	f000 f82b 	bl	800834c <raise>
 80082f6:	2001      	movs	r0, #1
 80082f8:	f7f9 fb10 	bl	800191c <_exit>

080082fc <_raise_r>:
 80082fc:	291f      	cmp	r1, #31
 80082fe:	b538      	push	{r3, r4, r5, lr}
 8008300:	4604      	mov	r4, r0
 8008302:	460d      	mov	r5, r1
 8008304:	d904      	bls.n	8008310 <_raise_r+0x14>
 8008306:	2316      	movs	r3, #22
 8008308:	6003      	str	r3, [r0, #0]
 800830a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008312:	b112      	cbz	r2, 800831a <_raise_r+0x1e>
 8008314:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008318:	b94b      	cbnz	r3, 800832e <_raise_r+0x32>
 800831a:	4620      	mov	r0, r4
 800831c:	f000 f830 	bl	8008380 <_getpid_r>
 8008320:	462a      	mov	r2, r5
 8008322:	4601      	mov	r1, r0
 8008324:	4620      	mov	r0, r4
 8008326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800832a:	f000 b817 	b.w	800835c <_kill_r>
 800832e:	2b01      	cmp	r3, #1
 8008330:	d00a      	beq.n	8008348 <_raise_r+0x4c>
 8008332:	1c59      	adds	r1, r3, #1
 8008334:	d103      	bne.n	800833e <_raise_r+0x42>
 8008336:	2316      	movs	r3, #22
 8008338:	6003      	str	r3, [r0, #0]
 800833a:	2001      	movs	r0, #1
 800833c:	e7e7      	b.n	800830e <_raise_r+0x12>
 800833e:	2400      	movs	r4, #0
 8008340:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008344:	4628      	mov	r0, r5
 8008346:	4798      	blx	r3
 8008348:	2000      	movs	r0, #0
 800834a:	e7e0      	b.n	800830e <_raise_r+0x12>

0800834c <raise>:
 800834c:	4b02      	ldr	r3, [pc, #8]	; (8008358 <raise+0xc>)
 800834e:	4601      	mov	r1, r0
 8008350:	6818      	ldr	r0, [r3, #0]
 8008352:	f7ff bfd3 	b.w	80082fc <_raise_r>
 8008356:	bf00      	nop
 8008358:	2000000c 	.word	0x2000000c

0800835c <_kill_r>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4d07      	ldr	r5, [pc, #28]	; (800837c <_kill_r+0x20>)
 8008360:	2300      	movs	r3, #0
 8008362:	4604      	mov	r4, r0
 8008364:	4608      	mov	r0, r1
 8008366:	4611      	mov	r1, r2
 8008368:	602b      	str	r3, [r5, #0]
 800836a:	f7f9 fac7 	bl	80018fc <_kill>
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	d102      	bne.n	8008378 <_kill_r+0x1c>
 8008372:	682b      	ldr	r3, [r5, #0]
 8008374:	b103      	cbz	r3, 8008378 <_kill_r+0x1c>
 8008376:	6023      	str	r3, [r4, #0]
 8008378:	bd38      	pop	{r3, r4, r5, pc}
 800837a:	bf00      	nop
 800837c:	2000b378 	.word	0x2000b378

08008380 <_getpid_r>:
 8008380:	f7f9 bab4 	b.w	80018ec <_getpid>
 8008384:	0000      	movs	r0, r0
	...

08008388 <cos>:
 8008388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800838a:	ec53 2b10 	vmov	r2, r3, d0
 800838e:	4824      	ldr	r0, [pc, #144]	; (8008420 <cos+0x98>)
 8008390:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008394:	4281      	cmp	r1, r0
 8008396:	dc06      	bgt.n	80083a6 <cos+0x1e>
 8008398:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8008418 <cos+0x90>
 800839c:	f000 fb24 	bl	80089e8 <__kernel_cos>
 80083a0:	ec51 0b10 	vmov	r0, r1, d0
 80083a4:	e007      	b.n	80083b6 <cos+0x2e>
 80083a6:	481f      	ldr	r0, [pc, #124]	; (8008424 <cos+0x9c>)
 80083a8:	4281      	cmp	r1, r0
 80083aa:	dd09      	ble.n	80083c0 <cos+0x38>
 80083ac:	ee10 0a10 	vmov	r0, s0
 80083b0:	4619      	mov	r1, r3
 80083b2:	f7f7 ff69 	bl	8000288 <__aeabi_dsub>
 80083b6:	ec41 0b10 	vmov	d0, r0, r1
 80083ba:	b005      	add	sp, #20
 80083bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80083c0:	4668      	mov	r0, sp
 80083c2:	f000 f905 	bl	80085d0 <__ieee754_rem_pio2>
 80083c6:	f000 0003 	and.w	r0, r0, #3
 80083ca:	2801      	cmp	r0, #1
 80083cc:	d007      	beq.n	80083de <cos+0x56>
 80083ce:	2802      	cmp	r0, #2
 80083d0:	d012      	beq.n	80083f8 <cos+0x70>
 80083d2:	b9c0      	cbnz	r0, 8008406 <cos+0x7e>
 80083d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80083d8:	ed9d 0b00 	vldr	d0, [sp]
 80083dc:	e7de      	b.n	800839c <cos+0x14>
 80083de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80083e2:	ed9d 0b00 	vldr	d0, [sp]
 80083e6:	f000 ff07 	bl	80091f8 <__kernel_sin>
 80083ea:	ec53 2b10 	vmov	r2, r3, d0
 80083ee:	ee10 0a10 	vmov	r0, s0
 80083f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80083f6:	e7de      	b.n	80083b6 <cos+0x2e>
 80083f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80083fc:	ed9d 0b00 	vldr	d0, [sp]
 8008400:	f000 faf2 	bl	80089e8 <__kernel_cos>
 8008404:	e7f1      	b.n	80083ea <cos+0x62>
 8008406:	ed9d 1b02 	vldr	d1, [sp, #8]
 800840a:	ed9d 0b00 	vldr	d0, [sp]
 800840e:	2001      	movs	r0, #1
 8008410:	f000 fef2 	bl	80091f8 <__kernel_sin>
 8008414:	e7c4      	b.n	80083a0 <cos+0x18>
 8008416:	bf00      	nop
	...
 8008420:	3fe921fb 	.word	0x3fe921fb
 8008424:	7fefffff 	.word	0x7fefffff

08008428 <log10>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	ed2d 8b02 	vpush	{d8}
 800842e:	ec55 4b10 	vmov	r4, r5, d0
 8008432:	f000 f841 	bl	80084b8 <__ieee754_log10>
 8008436:	4b1e      	ldr	r3, [pc, #120]	; (80084b0 <log10+0x88>)
 8008438:	eeb0 8a40 	vmov.f32	s16, s0
 800843c:	eef0 8a60 	vmov.f32	s17, s1
 8008440:	f993 3000 	ldrsb.w	r3, [r3]
 8008444:	3301      	adds	r3, #1
 8008446:	d01a      	beq.n	800847e <log10+0x56>
 8008448:	4622      	mov	r2, r4
 800844a:	462b      	mov	r3, r5
 800844c:	4620      	mov	r0, r4
 800844e:	4629      	mov	r1, r5
 8008450:	f7f8 fb6c 	bl	8000b2c <__aeabi_dcmpun>
 8008454:	b998      	cbnz	r0, 800847e <log10+0x56>
 8008456:	2200      	movs	r2, #0
 8008458:	2300      	movs	r3, #0
 800845a:	4620      	mov	r0, r4
 800845c:	4629      	mov	r1, r5
 800845e:	f7f8 fb47 	bl	8000af0 <__aeabi_dcmple>
 8008462:	b160      	cbz	r0, 800847e <log10+0x56>
 8008464:	2200      	movs	r2, #0
 8008466:	2300      	movs	r3, #0
 8008468:	4620      	mov	r0, r4
 800846a:	4629      	mov	r1, r5
 800846c:	f7f8 fb2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008470:	b160      	cbz	r0, 800848c <log10+0x64>
 8008472:	f7fd fa6b 	bl	800594c <__errno>
 8008476:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 80084a8 <log10+0x80>
 800847a:	2322      	movs	r3, #34	; 0x22
 800847c:	6003      	str	r3, [r0, #0]
 800847e:	eeb0 0a48 	vmov.f32	s0, s16
 8008482:	eef0 0a68 	vmov.f32	s1, s17
 8008486:	ecbd 8b02 	vpop	{d8}
 800848a:	bd38      	pop	{r3, r4, r5, pc}
 800848c:	f7fd fa5e 	bl	800594c <__errno>
 8008490:	ecbd 8b02 	vpop	{d8}
 8008494:	2321      	movs	r3, #33	; 0x21
 8008496:	6003      	str	r3, [r0, #0]
 8008498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800849c:	4805      	ldr	r0, [pc, #20]	; (80084b4 <log10+0x8c>)
 800849e:	f000 bff3 	b.w	8009488 <nan>
 80084a2:	bf00      	nop
 80084a4:	f3af 8000 	nop.w
 80084a8:	00000000 	.word	0x00000000
 80084ac:	fff00000 	.word	0xfff00000
 80084b0:	200001dc 	.word	0x200001dc
 80084b4:	08009c68 	.word	0x08009c68

080084b8 <__ieee754_log10>:
 80084b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084bc:	ec55 4b10 	vmov	r4, r5, d0
 80084c0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80084c4:	462b      	mov	r3, r5
 80084c6:	da2f      	bge.n	8008528 <__ieee754_log10+0x70>
 80084c8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80084cc:	4322      	orrs	r2, r4
 80084ce:	d109      	bne.n	80084e4 <__ieee754_log10+0x2c>
 80084d0:	493b      	ldr	r1, [pc, #236]	; (80085c0 <__ieee754_log10+0x108>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	2300      	movs	r3, #0
 80084d6:	2000      	movs	r0, #0
 80084d8:	f7f8 f9b8 	bl	800084c <__aeabi_ddiv>
 80084dc:	ec41 0b10 	vmov	d0, r0, r1
 80084e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e4:	2d00      	cmp	r5, #0
 80084e6:	da09      	bge.n	80084fc <__ieee754_log10+0x44>
 80084e8:	ee10 2a10 	vmov	r2, s0
 80084ec:	ee10 0a10 	vmov	r0, s0
 80084f0:	4629      	mov	r1, r5
 80084f2:	f7f7 fec9 	bl	8000288 <__aeabi_dsub>
 80084f6:	2200      	movs	r2, #0
 80084f8:	2300      	movs	r3, #0
 80084fa:	e7ed      	b.n	80084d8 <__ieee754_log10+0x20>
 80084fc:	4b31      	ldr	r3, [pc, #196]	; (80085c4 <__ieee754_log10+0x10c>)
 80084fe:	2200      	movs	r2, #0
 8008500:	4629      	mov	r1, r5
 8008502:	ee10 0a10 	vmov	r0, s0
 8008506:	f7f8 f877 	bl	80005f8 <__aeabi_dmul>
 800850a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800850e:	4604      	mov	r4, r0
 8008510:	460d      	mov	r5, r1
 8008512:	460b      	mov	r3, r1
 8008514:	492c      	ldr	r1, [pc, #176]	; (80085c8 <__ieee754_log10+0x110>)
 8008516:	428b      	cmp	r3, r1
 8008518:	dd08      	ble.n	800852c <__ieee754_log10+0x74>
 800851a:	4622      	mov	r2, r4
 800851c:	462b      	mov	r3, r5
 800851e:	4620      	mov	r0, r4
 8008520:	4629      	mov	r1, r5
 8008522:	f7f7 feb3 	bl	800028c <__adddf3>
 8008526:	e7d9      	b.n	80084dc <__ieee754_log10+0x24>
 8008528:	2200      	movs	r2, #0
 800852a:	e7f3      	b.n	8008514 <__ieee754_log10+0x5c>
 800852c:	1518      	asrs	r0, r3, #20
 800852e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8008532:	4410      	add	r0, r2
 8008534:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8008538:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800853c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8008540:	f7f7 fff0 	bl	8000524 <__aeabi_i2d>
 8008544:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8008548:	3303      	adds	r3, #3
 800854a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800854e:	ec45 4b10 	vmov	d0, r4, r5
 8008552:	4606      	mov	r6, r0
 8008554:	460f      	mov	r7, r1
 8008556:	f001 f827 	bl	80095a8 <__ieee754_log>
 800855a:	a313      	add	r3, pc, #76	; (adr r3, 80085a8 <__ieee754_log10+0xf0>)
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	4630      	mov	r0, r6
 8008562:	4639      	mov	r1, r7
 8008564:	ec59 8b10 	vmov	r8, r9, d0
 8008568:	f7f8 f846 	bl	80005f8 <__aeabi_dmul>
 800856c:	a310      	add	r3, pc, #64	; (adr r3, 80085b0 <__ieee754_log10+0xf8>)
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	4604      	mov	r4, r0
 8008574:	460d      	mov	r5, r1
 8008576:	4640      	mov	r0, r8
 8008578:	4649      	mov	r1, r9
 800857a:	f7f8 f83d 	bl	80005f8 <__aeabi_dmul>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4620      	mov	r0, r4
 8008584:	4629      	mov	r1, r5
 8008586:	f7f7 fe81 	bl	800028c <__adddf3>
 800858a:	a30b      	add	r3, pc, #44	; (adr r3, 80085b8 <__ieee754_log10+0x100>)
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	4604      	mov	r4, r0
 8008592:	460d      	mov	r5, r1
 8008594:	4630      	mov	r0, r6
 8008596:	4639      	mov	r1, r7
 8008598:	f7f8 f82e 	bl	80005f8 <__aeabi_dmul>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4620      	mov	r0, r4
 80085a2:	4629      	mov	r1, r5
 80085a4:	e7bd      	b.n	8008522 <__ieee754_log10+0x6a>
 80085a6:	bf00      	nop
 80085a8:	11f12b36 	.word	0x11f12b36
 80085ac:	3d59fef3 	.word	0x3d59fef3
 80085b0:	1526e50e 	.word	0x1526e50e
 80085b4:	3fdbcb7b 	.word	0x3fdbcb7b
 80085b8:	509f6000 	.word	0x509f6000
 80085bc:	3fd34413 	.word	0x3fd34413
 80085c0:	c3500000 	.word	0xc3500000
 80085c4:	43500000 	.word	0x43500000
 80085c8:	7fefffff 	.word	0x7fefffff
 80085cc:	00000000 	.word	0x00000000

080085d0 <__ieee754_rem_pio2>:
 80085d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d4:	ed2d 8b02 	vpush	{d8}
 80085d8:	ec55 4b10 	vmov	r4, r5, d0
 80085dc:	4bca      	ldr	r3, [pc, #808]	; (8008908 <__ieee754_rem_pio2+0x338>)
 80085de:	b08b      	sub	sp, #44	; 0x2c
 80085e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80085e4:	4598      	cmp	r8, r3
 80085e6:	4682      	mov	sl, r0
 80085e8:	9502      	str	r5, [sp, #8]
 80085ea:	dc08      	bgt.n	80085fe <__ieee754_rem_pio2+0x2e>
 80085ec:	2200      	movs	r2, #0
 80085ee:	2300      	movs	r3, #0
 80085f0:	ed80 0b00 	vstr	d0, [r0]
 80085f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80085f8:	f04f 0b00 	mov.w	fp, #0
 80085fc:	e028      	b.n	8008650 <__ieee754_rem_pio2+0x80>
 80085fe:	4bc3      	ldr	r3, [pc, #780]	; (800890c <__ieee754_rem_pio2+0x33c>)
 8008600:	4598      	cmp	r8, r3
 8008602:	dc78      	bgt.n	80086f6 <__ieee754_rem_pio2+0x126>
 8008604:	9b02      	ldr	r3, [sp, #8]
 8008606:	4ec2      	ldr	r6, [pc, #776]	; (8008910 <__ieee754_rem_pio2+0x340>)
 8008608:	2b00      	cmp	r3, #0
 800860a:	ee10 0a10 	vmov	r0, s0
 800860e:	a3b0      	add	r3, pc, #704	; (adr r3, 80088d0 <__ieee754_rem_pio2+0x300>)
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	4629      	mov	r1, r5
 8008616:	dd39      	ble.n	800868c <__ieee754_rem_pio2+0xbc>
 8008618:	f7f7 fe36 	bl	8000288 <__aeabi_dsub>
 800861c:	45b0      	cmp	r8, r6
 800861e:	4604      	mov	r4, r0
 8008620:	460d      	mov	r5, r1
 8008622:	d01b      	beq.n	800865c <__ieee754_rem_pio2+0x8c>
 8008624:	a3ac      	add	r3, pc, #688	; (adr r3, 80088d8 <__ieee754_rem_pio2+0x308>)
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	f7f7 fe2d 	bl	8000288 <__aeabi_dsub>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	e9ca 2300 	strd	r2, r3, [sl]
 8008636:	4620      	mov	r0, r4
 8008638:	4629      	mov	r1, r5
 800863a:	f7f7 fe25 	bl	8000288 <__aeabi_dsub>
 800863e:	a3a6      	add	r3, pc, #664	; (adr r3, 80088d8 <__ieee754_rem_pio2+0x308>)
 8008640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008644:	f7f7 fe20 	bl	8000288 <__aeabi_dsub>
 8008648:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800864c:	f04f 0b01 	mov.w	fp, #1
 8008650:	4658      	mov	r0, fp
 8008652:	b00b      	add	sp, #44	; 0x2c
 8008654:	ecbd 8b02 	vpop	{d8}
 8008658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865c:	a3a0      	add	r3, pc, #640	; (adr r3, 80088e0 <__ieee754_rem_pio2+0x310>)
 800865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008662:	f7f7 fe11 	bl	8000288 <__aeabi_dsub>
 8008666:	a3a0      	add	r3, pc, #640	; (adr r3, 80088e8 <__ieee754_rem_pio2+0x318>)
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	4604      	mov	r4, r0
 800866e:	460d      	mov	r5, r1
 8008670:	f7f7 fe0a 	bl	8000288 <__aeabi_dsub>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	e9ca 2300 	strd	r2, r3, [sl]
 800867c:	4620      	mov	r0, r4
 800867e:	4629      	mov	r1, r5
 8008680:	f7f7 fe02 	bl	8000288 <__aeabi_dsub>
 8008684:	a398      	add	r3, pc, #608	; (adr r3, 80088e8 <__ieee754_rem_pio2+0x318>)
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	e7db      	b.n	8008644 <__ieee754_rem_pio2+0x74>
 800868c:	f7f7 fdfe 	bl	800028c <__adddf3>
 8008690:	45b0      	cmp	r8, r6
 8008692:	4604      	mov	r4, r0
 8008694:	460d      	mov	r5, r1
 8008696:	d016      	beq.n	80086c6 <__ieee754_rem_pio2+0xf6>
 8008698:	a38f      	add	r3, pc, #572	; (adr r3, 80088d8 <__ieee754_rem_pio2+0x308>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f7f7 fdf5 	bl	800028c <__adddf3>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	e9ca 2300 	strd	r2, r3, [sl]
 80086aa:	4620      	mov	r0, r4
 80086ac:	4629      	mov	r1, r5
 80086ae:	f7f7 fdeb 	bl	8000288 <__aeabi_dsub>
 80086b2:	a389      	add	r3, pc, #548	; (adr r3, 80088d8 <__ieee754_rem_pio2+0x308>)
 80086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b8:	f7f7 fde8 	bl	800028c <__adddf3>
 80086bc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80086c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80086c4:	e7c4      	b.n	8008650 <__ieee754_rem_pio2+0x80>
 80086c6:	a386      	add	r3, pc, #536	; (adr r3, 80088e0 <__ieee754_rem_pio2+0x310>)
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	f7f7 fdde 	bl	800028c <__adddf3>
 80086d0:	a385      	add	r3, pc, #532	; (adr r3, 80088e8 <__ieee754_rem_pio2+0x318>)
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	4604      	mov	r4, r0
 80086d8:	460d      	mov	r5, r1
 80086da:	f7f7 fdd7 	bl	800028c <__adddf3>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	e9ca 2300 	strd	r2, r3, [sl]
 80086e6:	4620      	mov	r0, r4
 80086e8:	4629      	mov	r1, r5
 80086ea:	f7f7 fdcd 	bl	8000288 <__aeabi_dsub>
 80086ee:	a37e      	add	r3, pc, #504	; (adr r3, 80088e8 <__ieee754_rem_pio2+0x318>)
 80086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f4:	e7e0      	b.n	80086b8 <__ieee754_rem_pio2+0xe8>
 80086f6:	4b87      	ldr	r3, [pc, #540]	; (8008914 <__ieee754_rem_pio2+0x344>)
 80086f8:	4598      	cmp	r8, r3
 80086fa:	f300 80d9 	bgt.w	80088b0 <__ieee754_rem_pio2+0x2e0>
 80086fe:	f000 fe39 	bl	8009374 <fabs>
 8008702:	ec55 4b10 	vmov	r4, r5, d0
 8008706:	ee10 0a10 	vmov	r0, s0
 800870a:	a379      	add	r3, pc, #484	; (adr r3, 80088f0 <__ieee754_rem_pio2+0x320>)
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	4629      	mov	r1, r5
 8008712:	f7f7 ff71 	bl	80005f8 <__aeabi_dmul>
 8008716:	4b80      	ldr	r3, [pc, #512]	; (8008918 <__ieee754_rem_pio2+0x348>)
 8008718:	2200      	movs	r2, #0
 800871a:	f7f7 fdb7 	bl	800028c <__adddf3>
 800871e:	f7f8 fa1b 	bl	8000b58 <__aeabi_d2iz>
 8008722:	4683      	mov	fp, r0
 8008724:	f7f7 fefe 	bl	8000524 <__aeabi_i2d>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	ec43 2b18 	vmov	d8, r2, r3
 8008730:	a367      	add	r3, pc, #412	; (adr r3, 80088d0 <__ieee754_rem_pio2+0x300>)
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	f7f7 ff5f 	bl	80005f8 <__aeabi_dmul>
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	4620      	mov	r0, r4
 8008740:	4629      	mov	r1, r5
 8008742:	f7f7 fda1 	bl	8000288 <__aeabi_dsub>
 8008746:	a364      	add	r3, pc, #400	; (adr r3, 80088d8 <__ieee754_rem_pio2+0x308>)
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	4606      	mov	r6, r0
 800874e:	460f      	mov	r7, r1
 8008750:	ec51 0b18 	vmov	r0, r1, d8
 8008754:	f7f7 ff50 	bl	80005f8 <__aeabi_dmul>
 8008758:	f1bb 0f1f 	cmp.w	fp, #31
 800875c:	4604      	mov	r4, r0
 800875e:	460d      	mov	r5, r1
 8008760:	dc0d      	bgt.n	800877e <__ieee754_rem_pio2+0x1ae>
 8008762:	4b6e      	ldr	r3, [pc, #440]	; (800891c <__ieee754_rem_pio2+0x34c>)
 8008764:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8008768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876c:	4543      	cmp	r3, r8
 800876e:	d006      	beq.n	800877e <__ieee754_rem_pio2+0x1ae>
 8008770:	4622      	mov	r2, r4
 8008772:	462b      	mov	r3, r5
 8008774:	4630      	mov	r0, r6
 8008776:	4639      	mov	r1, r7
 8008778:	f7f7 fd86 	bl	8000288 <__aeabi_dsub>
 800877c:	e00f      	b.n	800879e <__ieee754_rem_pio2+0x1ce>
 800877e:	462b      	mov	r3, r5
 8008780:	4622      	mov	r2, r4
 8008782:	4630      	mov	r0, r6
 8008784:	4639      	mov	r1, r7
 8008786:	f7f7 fd7f 	bl	8000288 <__aeabi_dsub>
 800878a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800878e:	9303      	str	r3, [sp, #12]
 8008790:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008794:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008798:	f1b8 0f10 	cmp.w	r8, #16
 800879c:	dc02      	bgt.n	80087a4 <__ieee754_rem_pio2+0x1d4>
 800879e:	e9ca 0100 	strd	r0, r1, [sl]
 80087a2:	e039      	b.n	8008818 <__ieee754_rem_pio2+0x248>
 80087a4:	a34e      	add	r3, pc, #312	; (adr r3, 80088e0 <__ieee754_rem_pio2+0x310>)
 80087a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087aa:	ec51 0b18 	vmov	r0, r1, d8
 80087ae:	f7f7 ff23 	bl	80005f8 <__aeabi_dmul>
 80087b2:	4604      	mov	r4, r0
 80087b4:	460d      	mov	r5, r1
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4630      	mov	r0, r6
 80087bc:	4639      	mov	r1, r7
 80087be:	f7f7 fd63 	bl	8000288 <__aeabi_dsub>
 80087c2:	4602      	mov	r2, r0
 80087c4:	460b      	mov	r3, r1
 80087c6:	4680      	mov	r8, r0
 80087c8:	4689      	mov	r9, r1
 80087ca:	4630      	mov	r0, r6
 80087cc:	4639      	mov	r1, r7
 80087ce:	f7f7 fd5b 	bl	8000288 <__aeabi_dsub>
 80087d2:	4622      	mov	r2, r4
 80087d4:	462b      	mov	r3, r5
 80087d6:	f7f7 fd57 	bl	8000288 <__aeabi_dsub>
 80087da:	a343      	add	r3, pc, #268	; (adr r3, 80088e8 <__ieee754_rem_pio2+0x318>)
 80087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e0:	4604      	mov	r4, r0
 80087e2:	460d      	mov	r5, r1
 80087e4:	ec51 0b18 	vmov	r0, r1, d8
 80087e8:	f7f7 ff06 	bl	80005f8 <__aeabi_dmul>
 80087ec:	4622      	mov	r2, r4
 80087ee:	462b      	mov	r3, r5
 80087f0:	f7f7 fd4a 	bl	8000288 <__aeabi_dsub>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	4604      	mov	r4, r0
 80087fa:	460d      	mov	r5, r1
 80087fc:	4640      	mov	r0, r8
 80087fe:	4649      	mov	r1, r9
 8008800:	f7f7 fd42 	bl	8000288 <__aeabi_dsub>
 8008804:	9a03      	ldr	r2, [sp, #12]
 8008806:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	2b31      	cmp	r3, #49	; 0x31
 800880e:	dc24      	bgt.n	800885a <__ieee754_rem_pio2+0x28a>
 8008810:	e9ca 0100 	strd	r0, r1, [sl]
 8008814:	4646      	mov	r6, r8
 8008816:	464f      	mov	r7, r9
 8008818:	e9da 8900 	ldrd	r8, r9, [sl]
 800881c:	4630      	mov	r0, r6
 800881e:	4642      	mov	r2, r8
 8008820:	464b      	mov	r3, r9
 8008822:	4639      	mov	r1, r7
 8008824:	f7f7 fd30 	bl	8000288 <__aeabi_dsub>
 8008828:	462b      	mov	r3, r5
 800882a:	4622      	mov	r2, r4
 800882c:	f7f7 fd2c 	bl	8000288 <__aeabi_dsub>
 8008830:	9b02      	ldr	r3, [sp, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008838:	f6bf af0a 	bge.w	8008650 <__ieee754_rem_pio2+0x80>
 800883c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008840:	f8ca 3004 	str.w	r3, [sl, #4]
 8008844:	f8ca 8000 	str.w	r8, [sl]
 8008848:	f8ca 0008 	str.w	r0, [sl, #8]
 800884c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008850:	f8ca 300c 	str.w	r3, [sl, #12]
 8008854:	f1cb 0b00 	rsb	fp, fp, #0
 8008858:	e6fa      	b.n	8008650 <__ieee754_rem_pio2+0x80>
 800885a:	a327      	add	r3, pc, #156	; (adr r3, 80088f8 <__ieee754_rem_pio2+0x328>)
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	ec51 0b18 	vmov	r0, r1, d8
 8008864:	f7f7 fec8 	bl	80005f8 <__aeabi_dmul>
 8008868:	4604      	mov	r4, r0
 800886a:	460d      	mov	r5, r1
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4640      	mov	r0, r8
 8008872:	4649      	mov	r1, r9
 8008874:	f7f7 fd08 	bl	8000288 <__aeabi_dsub>
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	4606      	mov	r6, r0
 800887e:	460f      	mov	r7, r1
 8008880:	4640      	mov	r0, r8
 8008882:	4649      	mov	r1, r9
 8008884:	f7f7 fd00 	bl	8000288 <__aeabi_dsub>
 8008888:	4622      	mov	r2, r4
 800888a:	462b      	mov	r3, r5
 800888c:	f7f7 fcfc 	bl	8000288 <__aeabi_dsub>
 8008890:	a31b      	add	r3, pc, #108	; (adr r3, 8008900 <__ieee754_rem_pio2+0x330>)
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	4604      	mov	r4, r0
 8008898:	460d      	mov	r5, r1
 800889a:	ec51 0b18 	vmov	r0, r1, d8
 800889e:	f7f7 feab 	bl	80005f8 <__aeabi_dmul>
 80088a2:	4622      	mov	r2, r4
 80088a4:	462b      	mov	r3, r5
 80088a6:	f7f7 fcef 	bl	8000288 <__aeabi_dsub>
 80088aa:	4604      	mov	r4, r0
 80088ac:	460d      	mov	r5, r1
 80088ae:	e75f      	b.n	8008770 <__ieee754_rem_pio2+0x1a0>
 80088b0:	4b1b      	ldr	r3, [pc, #108]	; (8008920 <__ieee754_rem_pio2+0x350>)
 80088b2:	4598      	cmp	r8, r3
 80088b4:	dd36      	ble.n	8008924 <__ieee754_rem_pio2+0x354>
 80088b6:	ee10 2a10 	vmov	r2, s0
 80088ba:	462b      	mov	r3, r5
 80088bc:	4620      	mov	r0, r4
 80088be:	4629      	mov	r1, r5
 80088c0:	f7f7 fce2 	bl	8000288 <__aeabi_dsub>
 80088c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80088c8:	e9ca 0100 	strd	r0, r1, [sl]
 80088cc:	e694      	b.n	80085f8 <__ieee754_rem_pio2+0x28>
 80088ce:	bf00      	nop
 80088d0:	54400000 	.word	0x54400000
 80088d4:	3ff921fb 	.word	0x3ff921fb
 80088d8:	1a626331 	.word	0x1a626331
 80088dc:	3dd0b461 	.word	0x3dd0b461
 80088e0:	1a600000 	.word	0x1a600000
 80088e4:	3dd0b461 	.word	0x3dd0b461
 80088e8:	2e037073 	.word	0x2e037073
 80088ec:	3ba3198a 	.word	0x3ba3198a
 80088f0:	6dc9c883 	.word	0x6dc9c883
 80088f4:	3fe45f30 	.word	0x3fe45f30
 80088f8:	2e000000 	.word	0x2e000000
 80088fc:	3ba3198a 	.word	0x3ba3198a
 8008900:	252049c1 	.word	0x252049c1
 8008904:	397b839a 	.word	0x397b839a
 8008908:	3fe921fb 	.word	0x3fe921fb
 800890c:	4002d97b 	.word	0x4002d97b
 8008910:	3ff921fb 	.word	0x3ff921fb
 8008914:	413921fb 	.word	0x413921fb
 8008918:	3fe00000 	.word	0x3fe00000
 800891c:	08009d74 	.word	0x08009d74
 8008920:	7fefffff 	.word	0x7fefffff
 8008924:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008928:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800892c:	ee10 0a10 	vmov	r0, s0
 8008930:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008934:	ee10 6a10 	vmov	r6, s0
 8008938:	460f      	mov	r7, r1
 800893a:	f7f8 f90d 	bl	8000b58 <__aeabi_d2iz>
 800893e:	f7f7 fdf1 	bl	8000524 <__aeabi_i2d>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4630      	mov	r0, r6
 8008948:	4639      	mov	r1, r7
 800894a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800894e:	f7f7 fc9b 	bl	8000288 <__aeabi_dsub>
 8008952:	4b22      	ldr	r3, [pc, #136]	; (80089dc <__ieee754_rem_pio2+0x40c>)
 8008954:	2200      	movs	r2, #0
 8008956:	f7f7 fe4f 	bl	80005f8 <__aeabi_dmul>
 800895a:	460f      	mov	r7, r1
 800895c:	4606      	mov	r6, r0
 800895e:	f7f8 f8fb 	bl	8000b58 <__aeabi_d2iz>
 8008962:	f7f7 fddf 	bl	8000524 <__aeabi_i2d>
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	4630      	mov	r0, r6
 800896c:	4639      	mov	r1, r7
 800896e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008972:	f7f7 fc89 	bl	8000288 <__aeabi_dsub>
 8008976:	4b19      	ldr	r3, [pc, #100]	; (80089dc <__ieee754_rem_pio2+0x40c>)
 8008978:	2200      	movs	r2, #0
 800897a:	f7f7 fe3d 	bl	80005f8 <__aeabi_dmul>
 800897e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008982:	ad04      	add	r5, sp, #16
 8008984:	f04f 0803 	mov.w	r8, #3
 8008988:	46a9      	mov	r9, r5
 800898a:	2600      	movs	r6, #0
 800898c:	2700      	movs	r7, #0
 800898e:	4632      	mov	r2, r6
 8008990:	463b      	mov	r3, r7
 8008992:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008996:	46c3      	mov	fp, r8
 8008998:	3d08      	subs	r5, #8
 800899a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800899e:	f7f8 f893 	bl	8000ac8 <__aeabi_dcmpeq>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d1f3      	bne.n	800898e <__ieee754_rem_pio2+0x3be>
 80089a6:	4b0e      	ldr	r3, [pc, #56]	; (80089e0 <__ieee754_rem_pio2+0x410>)
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	2302      	movs	r3, #2
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	4622      	mov	r2, r4
 80089b0:	465b      	mov	r3, fp
 80089b2:	4651      	mov	r1, sl
 80089b4:	4648      	mov	r0, r9
 80089b6:	f000 f8df 	bl	8008b78 <__kernel_rem_pio2>
 80089ba:	9b02      	ldr	r3, [sp, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	4683      	mov	fp, r0
 80089c0:	f6bf ae46 	bge.w	8008650 <__ieee754_rem_pio2+0x80>
 80089c4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80089c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80089cc:	f8ca 3004 	str.w	r3, [sl, #4]
 80089d0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80089d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80089d8:	e73a      	b.n	8008850 <__ieee754_rem_pio2+0x280>
 80089da:	bf00      	nop
 80089dc:	41700000 	.word	0x41700000
 80089e0:	08009df4 	.word	0x08009df4
 80089e4:	00000000 	.word	0x00000000

080089e8 <__kernel_cos>:
 80089e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	ec57 6b10 	vmov	r6, r7, d0
 80089f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80089f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80089f8:	ed8d 1b00 	vstr	d1, [sp]
 80089fc:	da07      	bge.n	8008a0e <__kernel_cos+0x26>
 80089fe:	ee10 0a10 	vmov	r0, s0
 8008a02:	4639      	mov	r1, r7
 8008a04:	f7f8 f8a8 	bl	8000b58 <__aeabi_d2iz>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	f000 8088 	beq.w	8008b1e <__kernel_cos+0x136>
 8008a0e:	4632      	mov	r2, r6
 8008a10:	463b      	mov	r3, r7
 8008a12:	4630      	mov	r0, r6
 8008a14:	4639      	mov	r1, r7
 8008a16:	f7f7 fdef 	bl	80005f8 <__aeabi_dmul>
 8008a1a:	4b51      	ldr	r3, [pc, #324]	; (8008b60 <__kernel_cos+0x178>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	4604      	mov	r4, r0
 8008a20:	460d      	mov	r5, r1
 8008a22:	f7f7 fde9 	bl	80005f8 <__aeabi_dmul>
 8008a26:	a340      	add	r3, pc, #256	; (adr r3, 8008b28 <__kernel_cos+0x140>)
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	4682      	mov	sl, r0
 8008a2e:	468b      	mov	fp, r1
 8008a30:	4620      	mov	r0, r4
 8008a32:	4629      	mov	r1, r5
 8008a34:	f7f7 fde0 	bl	80005f8 <__aeabi_dmul>
 8008a38:	a33d      	add	r3, pc, #244	; (adr r3, 8008b30 <__kernel_cos+0x148>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f7f7 fc25 	bl	800028c <__adddf3>
 8008a42:	4622      	mov	r2, r4
 8008a44:	462b      	mov	r3, r5
 8008a46:	f7f7 fdd7 	bl	80005f8 <__aeabi_dmul>
 8008a4a:	a33b      	add	r3, pc, #236	; (adr r3, 8008b38 <__kernel_cos+0x150>)
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	f7f7 fc1a 	bl	8000288 <__aeabi_dsub>
 8008a54:	4622      	mov	r2, r4
 8008a56:	462b      	mov	r3, r5
 8008a58:	f7f7 fdce 	bl	80005f8 <__aeabi_dmul>
 8008a5c:	a338      	add	r3, pc, #224	; (adr r3, 8008b40 <__kernel_cos+0x158>)
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	f7f7 fc13 	bl	800028c <__adddf3>
 8008a66:	4622      	mov	r2, r4
 8008a68:	462b      	mov	r3, r5
 8008a6a:	f7f7 fdc5 	bl	80005f8 <__aeabi_dmul>
 8008a6e:	a336      	add	r3, pc, #216	; (adr r3, 8008b48 <__kernel_cos+0x160>)
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	f7f7 fc08 	bl	8000288 <__aeabi_dsub>
 8008a78:	4622      	mov	r2, r4
 8008a7a:	462b      	mov	r3, r5
 8008a7c:	f7f7 fdbc 	bl	80005f8 <__aeabi_dmul>
 8008a80:	a333      	add	r3, pc, #204	; (adr r3, 8008b50 <__kernel_cos+0x168>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f7f7 fc01 	bl	800028c <__adddf3>
 8008a8a:	4622      	mov	r2, r4
 8008a8c:	462b      	mov	r3, r5
 8008a8e:	f7f7 fdb3 	bl	80005f8 <__aeabi_dmul>
 8008a92:	4622      	mov	r2, r4
 8008a94:	462b      	mov	r3, r5
 8008a96:	f7f7 fdaf 	bl	80005f8 <__aeabi_dmul>
 8008a9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	460d      	mov	r5, r1
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	f7f7 fda7 	bl	80005f8 <__aeabi_dmul>
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4602      	mov	r2, r0
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f7f7 fbe9 	bl	8000288 <__aeabi_dsub>
 8008ab6:	4b2b      	ldr	r3, [pc, #172]	; (8008b64 <__kernel_cos+0x17c>)
 8008ab8:	4598      	cmp	r8, r3
 8008aba:	4606      	mov	r6, r0
 8008abc:	460f      	mov	r7, r1
 8008abe:	dc10      	bgt.n	8008ae2 <__kernel_cos+0xfa>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	4650      	mov	r0, sl
 8008ac6:	4659      	mov	r1, fp
 8008ac8:	f7f7 fbde 	bl	8000288 <__aeabi_dsub>
 8008acc:	460b      	mov	r3, r1
 8008ace:	4926      	ldr	r1, [pc, #152]	; (8008b68 <__kernel_cos+0x180>)
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	f7f7 fbd8 	bl	8000288 <__aeabi_dsub>
 8008ad8:	ec41 0b10 	vmov	d0, r0, r1
 8008adc:	b003      	add	sp, #12
 8008ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae2:	4b22      	ldr	r3, [pc, #136]	; (8008b6c <__kernel_cos+0x184>)
 8008ae4:	4920      	ldr	r1, [pc, #128]	; (8008b68 <__kernel_cos+0x180>)
 8008ae6:	4598      	cmp	r8, r3
 8008ae8:	bfcc      	ite	gt
 8008aea:	4d21      	ldrgt	r5, [pc, #132]	; (8008b70 <__kernel_cos+0x188>)
 8008aec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008af0:	2400      	movs	r4, #0
 8008af2:	4622      	mov	r2, r4
 8008af4:	462b      	mov	r3, r5
 8008af6:	2000      	movs	r0, #0
 8008af8:	f7f7 fbc6 	bl	8000288 <__aeabi_dsub>
 8008afc:	4622      	mov	r2, r4
 8008afe:	4680      	mov	r8, r0
 8008b00:	4689      	mov	r9, r1
 8008b02:	462b      	mov	r3, r5
 8008b04:	4650      	mov	r0, sl
 8008b06:	4659      	mov	r1, fp
 8008b08:	f7f7 fbbe 	bl	8000288 <__aeabi_dsub>
 8008b0c:	4632      	mov	r2, r6
 8008b0e:	463b      	mov	r3, r7
 8008b10:	f7f7 fbba 	bl	8000288 <__aeabi_dsub>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	4640      	mov	r0, r8
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	e7da      	b.n	8008ad4 <__kernel_cos+0xec>
 8008b1e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008b58 <__kernel_cos+0x170>
 8008b22:	e7db      	b.n	8008adc <__kernel_cos+0xf4>
 8008b24:	f3af 8000 	nop.w
 8008b28:	be8838d4 	.word	0xbe8838d4
 8008b2c:	bda8fae9 	.word	0xbda8fae9
 8008b30:	bdb4b1c4 	.word	0xbdb4b1c4
 8008b34:	3e21ee9e 	.word	0x3e21ee9e
 8008b38:	809c52ad 	.word	0x809c52ad
 8008b3c:	3e927e4f 	.word	0x3e927e4f
 8008b40:	19cb1590 	.word	0x19cb1590
 8008b44:	3efa01a0 	.word	0x3efa01a0
 8008b48:	16c15177 	.word	0x16c15177
 8008b4c:	3f56c16c 	.word	0x3f56c16c
 8008b50:	5555554c 	.word	0x5555554c
 8008b54:	3fa55555 	.word	0x3fa55555
 8008b58:	00000000 	.word	0x00000000
 8008b5c:	3ff00000 	.word	0x3ff00000
 8008b60:	3fe00000 	.word	0x3fe00000
 8008b64:	3fd33332 	.word	0x3fd33332
 8008b68:	3ff00000 	.word	0x3ff00000
 8008b6c:	3fe90000 	.word	0x3fe90000
 8008b70:	3fd20000 	.word	0x3fd20000
 8008b74:	00000000 	.word	0x00000000

08008b78 <__kernel_rem_pio2>:
 8008b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b7c:	ed2d 8b02 	vpush	{d8}
 8008b80:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008b84:	f112 0f14 	cmn.w	r2, #20
 8008b88:	9308      	str	r3, [sp, #32]
 8008b8a:	9101      	str	r1, [sp, #4]
 8008b8c:	4bc6      	ldr	r3, [pc, #792]	; (8008ea8 <__kernel_rem_pio2+0x330>)
 8008b8e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008b90:	9009      	str	r0, [sp, #36]	; 0x24
 8008b92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b96:	9304      	str	r3, [sp, #16]
 8008b98:	9b08      	ldr	r3, [sp, #32]
 8008b9a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008b9e:	bfa8      	it	ge
 8008ba0:	1ed4      	subge	r4, r2, #3
 8008ba2:	9306      	str	r3, [sp, #24]
 8008ba4:	bfb2      	itee	lt
 8008ba6:	2400      	movlt	r4, #0
 8008ba8:	2318      	movge	r3, #24
 8008baa:	fb94 f4f3 	sdivge	r4, r4, r3
 8008bae:	f06f 0317 	mvn.w	r3, #23
 8008bb2:	fb04 3303 	mla	r3, r4, r3, r3
 8008bb6:	eb03 0a02 	add.w	sl, r3, r2
 8008bba:	9b04      	ldr	r3, [sp, #16]
 8008bbc:	9a06      	ldr	r2, [sp, #24]
 8008bbe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008e98 <__kernel_rem_pio2+0x320>
 8008bc2:	eb03 0802 	add.w	r8, r3, r2
 8008bc6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008bc8:	1aa7      	subs	r7, r4, r2
 8008bca:	ae20      	add	r6, sp, #128	; 0x80
 8008bcc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008bd0:	2500      	movs	r5, #0
 8008bd2:	4545      	cmp	r5, r8
 8008bd4:	dd18      	ble.n	8008c08 <__kernel_rem_pio2+0x90>
 8008bd6:	9b08      	ldr	r3, [sp, #32]
 8008bd8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008bdc:	aa20      	add	r2, sp, #128	; 0x80
 8008bde:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8008e98 <__kernel_rem_pio2+0x320>
 8008be2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008be6:	f1c3 0301 	rsb	r3, r3, #1
 8008bea:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008bee:	9307      	str	r3, [sp, #28]
 8008bf0:	9b07      	ldr	r3, [sp, #28]
 8008bf2:	9a04      	ldr	r2, [sp, #16]
 8008bf4:	4443      	add	r3, r8
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	db2f      	blt.n	8008c5a <__kernel_rem_pio2+0xe2>
 8008bfa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008bfe:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008c02:	462f      	mov	r7, r5
 8008c04:	2600      	movs	r6, #0
 8008c06:	e01b      	b.n	8008c40 <__kernel_rem_pio2+0xc8>
 8008c08:	42ef      	cmn	r7, r5
 8008c0a:	d407      	bmi.n	8008c1c <__kernel_rem_pio2+0xa4>
 8008c0c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008c10:	f7f7 fc88 	bl	8000524 <__aeabi_i2d>
 8008c14:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008c18:	3501      	adds	r5, #1
 8008c1a:	e7da      	b.n	8008bd2 <__kernel_rem_pio2+0x5a>
 8008c1c:	ec51 0b18 	vmov	r0, r1, d8
 8008c20:	e7f8      	b.n	8008c14 <__kernel_rem_pio2+0x9c>
 8008c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c26:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008c2a:	f7f7 fce5 	bl	80005f8 <__aeabi_dmul>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c36:	f7f7 fb29 	bl	800028c <__adddf3>
 8008c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c3e:	3601      	adds	r6, #1
 8008c40:	9b06      	ldr	r3, [sp, #24]
 8008c42:	429e      	cmp	r6, r3
 8008c44:	f1a7 0708 	sub.w	r7, r7, #8
 8008c48:	ddeb      	ble.n	8008c22 <__kernel_rem_pio2+0xaa>
 8008c4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c4e:	3508      	adds	r5, #8
 8008c50:	ecab 7b02 	vstmia	fp!, {d7}
 8008c54:	f108 0801 	add.w	r8, r8, #1
 8008c58:	e7ca      	b.n	8008bf0 <__kernel_rem_pio2+0x78>
 8008c5a:	9b04      	ldr	r3, [sp, #16]
 8008c5c:	aa0c      	add	r2, sp, #48	; 0x30
 8008c5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c64:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008c66:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008c6a:	9c04      	ldr	r4, [sp, #16]
 8008c6c:	930a      	str	r3, [sp, #40]	; 0x28
 8008c6e:	ab98      	add	r3, sp, #608	; 0x260
 8008c70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c74:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008c78:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8008c7c:	f8cd b008 	str.w	fp, [sp, #8]
 8008c80:	4625      	mov	r5, r4
 8008c82:	2d00      	cmp	r5, #0
 8008c84:	dc78      	bgt.n	8008d78 <__kernel_rem_pio2+0x200>
 8008c86:	ec47 6b10 	vmov	d0, r6, r7
 8008c8a:	4650      	mov	r0, sl
 8008c8c:	f000 fc04 	bl	8009498 <scalbn>
 8008c90:	ec57 6b10 	vmov	r6, r7, d0
 8008c94:	2200      	movs	r2, #0
 8008c96:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008c9a:	ee10 0a10 	vmov	r0, s0
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	f7f7 fcaa 	bl	80005f8 <__aeabi_dmul>
 8008ca4:	ec41 0b10 	vmov	d0, r0, r1
 8008ca8:	f000 fb6e 	bl	8009388 <floor>
 8008cac:	4b7f      	ldr	r3, [pc, #508]	; (8008eac <__kernel_rem_pio2+0x334>)
 8008cae:	ec51 0b10 	vmov	r0, r1, d0
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f7f7 fca0 	bl	80005f8 <__aeabi_dmul>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	4639      	mov	r1, r7
 8008cc0:	f7f7 fae2 	bl	8000288 <__aeabi_dsub>
 8008cc4:	460f      	mov	r7, r1
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	f7f7 ff46 	bl	8000b58 <__aeabi_d2iz>
 8008ccc:	9007      	str	r0, [sp, #28]
 8008cce:	f7f7 fc29 	bl	8000524 <__aeabi_i2d>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	4639      	mov	r1, r7
 8008cda:	f7f7 fad5 	bl	8000288 <__aeabi_dsub>
 8008cde:	f1ba 0f00 	cmp.w	sl, #0
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	460f      	mov	r7, r1
 8008ce6:	dd70      	ble.n	8008dca <__kernel_rem_pio2+0x252>
 8008ce8:	1e62      	subs	r2, r4, #1
 8008cea:	ab0c      	add	r3, sp, #48	; 0x30
 8008cec:	9d07      	ldr	r5, [sp, #28]
 8008cee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008cf2:	f1ca 0118 	rsb	r1, sl, #24
 8008cf6:	fa40 f301 	asr.w	r3, r0, r1
 8008cfa:	441d      	add	r5, r3
 8008cfc:	408b      	lsls	r3, r1
 8008cfe:	1ac0      	subs	r0, r0, r3
 8008d00:	ab0c      	add	r3, sp, #48	; 0x30
 8008d02:	9507      	str	r5, [sp, #28]
 8008d04:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008d08:	f1ca 0317 	rsb	r3, sl, #23
 8008d0c:	fa40 f303 	asr.w	r3, r0, r3
 8008d10:	9302      	str	r3, [sp, #8]
 8008d12:	9b02      	ldr	r3, [sp, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	dd66      	ble.n	8008de6 <__kernel_rem_pio2+0x26e>
 8008d18:	9b07      	ldr	r3, [sp, #28]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	9307      	str	r3, [sp, #28]
 8008d20:	4615      	mov	r5, r2
 8008d22:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008d26:	4294      	cmp	r4, r2
 8008d28:	f300 8099 	bgt.w	8008e5e <__kernel_rem_pio2+0x2e6>
 8008d2c:	f1ba 0f00 	cmp.w	sl, #0
 8008d30:	dd07      	ble.n	8008d42 <__kernel_rem_pio2+0x1ca>
 8008d32:	f1ba 0f01 	cmp.w	sl, #1
 8008d36:	f000 80a5 	beq.w	8008e84 <__kernel_rem_pio2+0x30c>
 8008d3a:	f1ba 0f02 	cmp.w	sl, #2
 8008d3e:	f000 80c1 	beq.w	8008ec4 <__kernel_rem_pio2+0x34c>
 8008d42:	9b02      	ldr	r3, [sp, #8]
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d14e      	bne.n	8008de6 <__kernel_rem_pio2+0x26e>
 8008d48:	4632      	mov	r2, r6
 8008d4a:	463b      	mov	r3, r7
 8008d4c:	4958      	ldr	r1, [pc, #352]	; (8008eb0 <__kernel_rem_pio2+0x338>)
 8008d4e:	2000      	movs	r0, #0
 8008d50:	f7f7 fa9a 	bl	8000288 <__aeabi_dsub>
 8008d54:	4606      	mov	r6, r0
 8008d56:	460f      	mov	r7, r1
 8008d58:	2d00      	cmp	r5, #0
 8008d5a:	d044      	beq.n	8008de6 <__kernel_rem_pio2+0x26e>
 8008d5c:	4650      	mov	r0, sl
 8008d5e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008ea0 <__kernel_rem_pio2+0x328>
 8008d62:	f000 fb99 	bl	8009498 <scalbn>
 8008d66:	4630      	mov	r0, r6
 8008d68:	4639      	mov	r1, r7
 8008d6a:	ec53 2b10 	vmov	r2, r3, d0
 8008d6e:	f7f7 fa8b 	bl	8000288 <__aeabi_dsub>
 8008d72:	4606      	mov	r6, r0
 8008d74:	460f      	mov	r7, r1
 8008d76:	e036      	b.n	8008de6 <__kernel_rem_pio2+0x26e>
 8008d78:	4b4e      	ldr	r3, [pc, #312]	; (8008eb4 <__kernel_rem_pio2+0x33c>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	4639      	mov	r1, r7
 8008d80:	f7f7 fc3a 	bl	80005f8 <__aeabi_dmul>
 8008d84:	f7f7 fee8 	bl	8000b58 <__aeabi_d2iz>
 8008d88:	f7f7 fbcc 	bl	8000524 <__aeabi_i2d>
 8008d8c:	4b4a      	ldr	r3, [pc, #296]	; (8008eb8 <__kernel_rem_pio2+0x340>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	4680      	mov	r8, r0
 8008d92:	4689      	mov	r9, r1
 8008d94:	f7f7 fc30 	bl	80005f8 <__aeabi_dmul>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	4639      	mov	r1, r7
 8008da0:	f7f7 fa72 	bl	8000288 <__aeabi_dsub>
 8008da4:	f7f7 fed8 	bl	8000b58 <__aeabi_d2iz>
 8008da8:	9b02      	ldr	r3, [sp, #8]
 8008daa:	f843 0b04 	str.w	r0, [r3], #4
 8008dae:	3d01      	subs	r5, #1
 8008db0:	9302      	str	r3, [sp, #8]
 8008db2:	ab70      	add	r3, sp, #448	; 0x1c0
 8008db4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbc:	4640      	mov	r0, r8
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	f7f7 fa64 	bl	800028c <__adddf3>
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	460f      	mov	r7, r1
 8008dc8:	e75b      	b.n	8008c82 <__kernel_rem_pio2+0x10a>
 8008dca:	d105      	bne.n	8008dd8 <__kernel_rem_pio2+0x260>
 8008dcc:	1e63      	subs	r3, r4, #1
 8008dce:	aa0c      	add	r2, sp, #48	; 0x30
 8008dd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008dd4:	15c3      	asrs	r3, r0, #23
 8008dd6:	e79b      	b.n	8008d10 <__kernel_rem_pio2+0x198>
 8008dd8:	4b38      	ldr	r3, [pc, #224]	; (8008ebc <__kernel_rem_pio2+0x344>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f7f7 fe92 	bl	8000b04 <__aeabi_dcmpge>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d139      	bne.n	8008e58 <__kernel_rem_pio2+0x2e0>
 8008de4:	9002      	str	r0, [sp, #8]
 8008de6:	2200      	movs	r2, #0
 8008de8:	2300      	movs	r3, #0
 8008dea:	4630      	mov	r0, r6
 8008dec:	4639      	mov	r1, r7
 8008dee:	f7f7 fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	f000 80b4 	beq.w	8008f60 <__kernel_rem_pio2+0x3e8>
 8008df8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8008dfc:	465b      	mov	r3, fp
 8008dfe:	2200      	movs	r2, #0
 8008e00:	9904      	ldr	r1, [sp, #16]
 8008e02:	428b      	cmp	r3, r1
 8008e04:	da65      	bge.n	8008ed2 <__kernel_rem_pio2+0x35a>
 8008e06:	2a00      	cmp	r2, #0
 8008e08:	d07b      	beq.n	8008f02 <__kernel_rem_pio2+0x38a>
 8008e0a:	ab0c      	add	r3, sp, #48	; 0x30
 8008e0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008e10:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 80a0 	beq.w	8008f5a <__kernel_rem_pio2+0x3e2>
 8008e1a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8008ea0 <__kernel_rem_pio2+0x328>
 8008e1e:	4650      	mov	r0, sl
 8008e20:	f000 fb3a 	bl	8009498 <scalbn>
 8008e24:	4f23      	ldr	r7, [pc, #140]	; (8008eb4 <__kernel_rem_pio2+0x33c>)
 8008e26:	ec55 4b10 	vmov	r4, r5, d0
 8008e2a:	46d8      	mov	r8, fp
 8008e2c:	2600      	movs	r6, #0
 8008e2e:	f1b8 0f00 	cmp.w	r8, #0
 8008e32:	f280 80cf 	bge.w	8008fd4 <__kernel_rem_pio2+0x45c>
 8008e36:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8008e98 <__kernel_rem_pio2+0x320>
 8008e3a:	465f      	mov	r7, fp
 8008e3c:	f04f 0800 	mov.w	r8, #0
 8008e40:	2f00      	cmp	r7, #0
 8008e42:	f2c0 80fd 	blt.w	8009040 <__kernel_rem_pio2+0x4c8>
 8008e46:	ab70      	add	r3, sp, #448	; 0x1c0
 8008e48:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008ec0 <__kernel_rem_pio2+0x348>
 8008e4c:	ec55 4b18 	vmov	r4, r5, d8
 8008e50:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008e54:	2600      	movs	r6, #0
 8008e56:	e0e5      	b.n	8009024 <__kernel_rem_pio2+0x4ac>
 8008e58:	2302      	movs	r3, #2
 8008e5a:	9302      	str	r3, [sp, #8]
 8008e5c:	e75c      	b.n	8008d18 <__kernel_rem_pio2+0x1a0>
 8008e5e:	f8db 3000 	ldr.w	r3, [fp]
 8008e62:	b955      	cbnz	r5, 8008e7a <__kernel_rem_pio2+0x302>
 8008e64:	b123      	cbz	r3, 8008e70 <__kernel_rem_pio2+0x2f8>
 8008e66:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008e6a:	f8cb 3000 	str.w	r3, [fp]
 8008e6e:	2301      	movs	r3, #1
 8008e70:	3201      	adds	r2, #1
 8008e72:	f10b 0b04 	add.w	fp, fp, #4
 8008e76:	461d      	mov	r5, r3
 8008e78:	e755      	b.n	8008d26 <__kernel_rem_pio2+0x1ae>
 8008e7a:	1acb      	subs	r3, r1, r3
 8008e7c:	f8cb 3000 	str.w	r3, [fp]
 8008e80:	462b      	mov	r3, r5
 8008e82:	e7f5      	b.n	8008e70 <__kernel_rem_pio2+0x2f8>
 8008e84:	1e62      	subs	r2, r4, #1
 8008e86:	ab0c      	add	r3, sp, #48	; 0x30
 8008e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e8c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008e90:	a90c      	add	r1, sp, #48	; 0x30
 8008e92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008e96:	e754      	b.n	8008d42 <__kernel_rem_pio2+0x1ca>
	...
 8008ea4:	3ff00000 	.word	0x3ff00000
 8008ea8:	08009f40 	.word	0x08009f40
 8008eac:	40200000 	.word	0x40200000
 8008eb0:	3ff00000 	.word	0x3ff00000
 8008eb4:	3e700000 	.word	0x3e700000
 8008eb8:	41700000 	.word	0x41700000
 8008ebc:	3fe00000 	.word	0x3fe00000
 8008ec0:	08009f00 	.word	0x08009f00
 8008ec4:	1e62      	subs	r2, r4, #1
 8008ec6:	ab0c      	add	r3, sp, #48	; 0x30
 8008ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ecc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008ed0:	e7de      	b.n	8008e90 <__kernel_rem_pio2+0x318>
 8008ed2:	a90c      	add	r1, sp, #48	; 0x30
 8008ed4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	430a      	orrs	r2, r1
 8008edc:	e790      	b.n	8008e00 <__kernel_rem_pio2+0x288>
 8008ede:	3301      	adds	r3, #1
 8008ee0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008ee4:	2900      	cmp	r1, #0
 8008ee6:	d0fa      	beq.n	8008ede <__kernel_rem_pio2+0x366>
 8008ee8:	9a08      	ldr	r2, [sp, #32]
 8008eea:	18e3      	adds	r3, r4, r3
 8008eec:	18a6      	adds	r6, r4, r2
 8008eee:	aa20      	add	r2, sp, #128	; 0x80
 8008ef0:	1c65      	adds	r5, r4, #1
 8008ef2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008ef6:	9302      	str	r3, [sp, #8]
 8008ef8:	9b02      	ldr	r3, [sp, #8]
 8008efa:	42ab      	cmp	r3, r5
 8008efc:	da04      	bge.n	8008f08 <__kernel_rem_pio2+0x390>
 8008efe:	461c      	mov	r4, r3
 8008f00:	e6b5      	b.n	8008c6e <__kernel_rem_pio2+0xf6>
 8008f02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f04:	2301      	movs	r3, #1
 8008f06:	e7eb      	b.n	8008ee0 <__kernel_rem_pio2+0x368>
 8008f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f0e:	f7f7 fb09 	bl	8000524 <__aeabi_i2d>
 8008f12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f18:	46b3      	mov	fp, r6
 8008f1a:	461c      	mov	r4, r3
 8008f1c:	2700      	movs	r7, #0
 8008f1e:	f04f 0800 	mov.w	r8, #0
 8008f22:	f04f 0900 	mov.w	r9, #0
 8008f26:	9b06      	ldr	r3, [sp, #24]
 8008f28:	429f      	cmp	r7, r3
 8008f2a:	dd06      	ble.n	8008f3a <__kernel_rem_pio2+0x3c2>
 8008f2c:	ab70      	add	r3, sp, #448	; 0x1c0
 8008f2e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008f32:	e9c3 8900 	strd	r8, r9, [r3]
 8008f36:	3501      	adds	r5, #1
 8008f38:	e7de      	b.n	8008ef8 <__kernel_rem_pio2+0x380>
 8008f3a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008f3e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008f42:	f7f7 fb59 	bl	80005f8 <__aeabi_dmul>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	4649      	mov	r1, r9
 8008f4e:	f7f7 f99d 	bl	800028c <__adddf3>
 8008f52:	3701      	adds	r7, #1
 8008f54:	4680      	mov	r8, r0
 8008f56:	4689      	mov	r9, r1
 8008f58:	e7e5      	b.n	8008f26 <__kernel_rem_pio2+0x3ae>
 8008f5a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008f5e:	e754      	b.n	8008e0a <__kernel_rem_pio2+0x292>
 8008f60:	ec47 6b10 	vmov	d0, r6, r7
 8008f64:	f1ca 0000 	rsb	r0, sl, #0
 8008f68:	f000 fa96 	bl	8009498 <scalbn>
 8008f6c:	ec57 6b10 	vmov	r6, r7, d0
 8008f70:	4b9f      	ldr	r3, [pc, #636]	; (80091f0 <__kernel_rem_pio2+0x678>)
 8008f72:	ee10 0a10 	vmov	r0, s0
 8008f76:	2200      	movs	r2, #0
 8008f78:	4639      	mov	r1, r7
 8008f7a:	f7f7 fdc3 	bl	8000b04 <__aeabi_dcmpge>
 8008f7e:	b300      	cbz	r0, 8008fc2 <__kernel_rem_pio2+0x44a>
 8008f80:	4b9c      	ldr	r3, [pc, #624]	; (80091f4 <__kernel_rem_pio2+0x67c>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	4630      	mov	r0, r6
 8008f86:	4639      	mov	r1, r7
 8008f88:	f7f7 fb36 	bl	80005f8 <__aeabi_dmul>
 8008f8c:	f7f7 fde4 	bl	8000b58 <__aeabi_d2iz>
 8008f90:	4605      	mov	r5, r0
 8008f92:	f7f7 fac7 	bl	8000524 <__aeabi_i2d>
 8008f96:	4b96      	ldr	r3, [pc, #600]	; (80091f0 <__kernel_rem_pio2+0x678>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f7f7 fb2d 	bl	80005f8 <__aeabi_dmul>
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	f7f7 f96f 	bl	8000288 <__aeabi_dsub>
 8008faa:	f7f7 fdd5 	bl	8000b58 <__aeabi_d2iz>
 8008fae:	f104 0b01 	add.w	fp, r4, #1
 8008fb2:	ab0c      	add	r3, sp, #48	; 0x30
 8008fb4:	f10a 0a18 	add.w	sl, sl, #24
 8008fb8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008fbc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8008fc0:	e72b      	b.n	8008e1a <__kernel_rem_pio2+0x2a2>
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	4639      	mov	r1, r7
 8008fc6:	f7f7 fdc7 	bl	8000b58 <__aeabi_d2iz>
 8008fca:	ab0c      	add	r3, sp, #48	; 0x30
 8008fcc:	46a3      	mov	fp, r4
 8008fce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008fd2:	e722      	b.n	8008e1a <__kernel_rem_pio2+0x2a2>
 8008fd4:	ab70      	add	r3, sp, #448	; 0x1c0
 8008fd6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8008fda:	ab0c      	add	r3, sp, #48	; 0x30
 8008fdc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008fe0:	f7f7 faa0 	bl	8000524 <__aeabi_i2d>
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	462b      	mov	r3, r5
 8008fe8:	f7f7 fb06 	bl	80005f8 <__aeabi_dmul>
 8008fec:	4632      	mov	r2, r6
 8008fee:	e9c9 0100 	strd	r0, r1, [r9]
 8008ff2:	463b      	mov	r3, r7
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	f7f7 fafe 	bl	80005f8 <__aeabi_dmul>
 8008ffc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009000:	4604      	mov	r4, r0
 8009002:	460d      	mov	r5, r1
 8009004:	e713      	b.n	8008e2e <__kernel_rem_pio2+0x2b6>
 8009006:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800900a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800900e:	f7f7 faf3 	bl	80005f8 <__aeabi_dmul>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	4620      	mov	r0, r4
 8009018:	4629      	mov	r1, r5
 800901a:	f7f7 f937 	bl	800028c <__adddf3>
 800901e:	3601      	adds	r6, #1
 8009020:	4604      	mov	r4, r0
 8009022:	460d      	mov	r5, r1
 8009024:	9b04      	ldr	r3, [sp, #16]
 8009026:	429e      	cmp	r6, r3
 8009028:	dc01      	bgt.n	800902e <__kernel_rem_pio2+0x4b6>
 800902a:	45b0      	cmp	r8, r6
 800902c:	daeb      	bge.n	8009006 <__kernel_rem_pio2+0x48e>
 800902e:	ab48      	add	r3, sp, #288	; 0x120
 8009030:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009034:	e9c3 4500 	strd	r4, r5, [r3]
 8009038:	3f01      	subs	r7, #1
 800903a:	f108 0801 	add.w	r8, r8, #1
 800903e:	e6ff      	b.n	8008e40 <__kernel_rem_pio2+0x2c8>
 8009040:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009042:	2b02      	cmp	r3, #2
 8009044:	dc0b      	bgt.n	800905e <__kernel_rem_pio2+0x4e6>
 8009046:	2b00      	cmp	r3, #0
 8009048:	dc6e      	bgt.n	8009128 <__kernel_rem_pio2+0x5b0>
 800904a:	d045      	beq.n	80090d8 <__kernel_rem_pio2+0x560>
 800904c:	9b07      	ldr	r3, [sp, #28]
 800904e:	f003 0007 	and.w	r0, r3, #7
 8009052:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009056:	ecbd 8b02 	vpop	{d8}
 800905a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009060:	2b03      	cmp	r3, #3
 8009062:	d1f3      	bne.n	800904c <__kernel_rem_pio2+0x4d4>
 8009064:	ab48      	add	r3, sp, #288	; 0x120
 8009066:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800906a:	46d0      	mov	r8, sl
 800906c:	46d9      	mov	r9, fp
 800906e:	f1b9 0f00 	cmp.w	r9, #0
 8009072:	f1a8 0808 	sub.w	r8, r8, #8
 8009076:	dc64      	bgt.n	8009142 <__kernel_rem_pio2+0x5ca>
 8009078:	465c      	mov	r4, fp
 800907a:	2c01      	cmp	r4, #1
 800907c:	f1aa 0a08 	sub.w	sl, sl, #8
 8009080:	dc7e      	bgt.n	8009180 <__kernel_rem_pio2+0x608>
 8009082:	2000      	movs	r0, #0
 8009084:	2100      	movs	r1, #0
 8009086:	f1bb 0f01 	cmp.w	fp, #1
 800908a:	f300 8097 	bgt.w	80091bc <__kernel_rem_pio2+0x644>
 800908e:	9b02      	ldr	r3, [sp, #8]
 8009090:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8009094:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009098:	2b00      	cmp	r3, #0
 800909a:	f040 8099 	bne.w	80091d0 <__kernel_rem_pio2+0x658>
 800909e:	9b01      	ldr	r3, [sp, #4]
 80090a0:	e9c3 5600 	strd	r5, r6, [r3]
 80090a4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80090a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80090ac:	e7ce      	b.n	800904c <__kernel_rem_pio2+0x4d4>
 80090ae:	ab48      	add	r3, sp, #288	; 0x120
 80090b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f7f7 f8e8 	bl	800028c <__adddf3>
 80090bc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80090c0:	f1bb 0f00 	cmp.w	fp, #0
 80090c4:	daf3      	bge.n	80090ae <__kernel_rem_pio2+0x536>
 80090c6:	9b02      	ldr	r3, [sp, #8]
 80090c8:	b113      	cbz	r3, 80090d0 <__kernel_rem_pio2+0x558>
 80090ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090ce:	4619      	mov	r1, r3
 80090d0:	9b01      	ldr	r3, [sp, #4]
 80090d2:	e9c3 0100 	strd	r0, r1, [r3]
 80090d6:	e7b9      	b.n	800904c <__kernel_rem_pio2+0x4d4>
 80090d8:	2000      	movs	r0, #0
 80090da:	2100      	movs	r1, #0
 80090dc:	e7f0      	b.n	80090c0 <__kernel_rem_pio2+0x548>
 80090de:	ab48      	add	r3, sp, #288	; 0x120
 80090e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	f7f7 f8d0 	bl	800028c <__adddf3>
 80090ec:	3c01      	subs	r4, #1
 80090ee:	2c00      	cmp	r4, #0
 80090f0:	daf5      	bge.n	80090de <__kernel_rem_pio2+0x566>
 80090f2:	9b02      	ldr	r3, [sp, #8]
 80090f4:	b1e3      	cbz	r3, 8009130 <__kernel_rem_pio2+0x5b8>
 80090f6:	4602      	mov	r2, r0
 80090f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090fc:	9c01      	ldr	r4, [sp, #4]
 80090fe:	e9c4 2300 	strd	r2, r3, [r4]
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800910a:	f7f7 f8bd 	bl	8000288 <__aeabi_dsub>
 800910e:	ad4a      	add	r5, sp, #296	; 0x128
 8009110:	2401      	movs	r4, #1
 8009112:	45a3      	cmp	fp, r4
 8009114:	da0f      	bge.n	8009136 <__kernel_rem_pio2+0x5be>
 8009116:	9b02      	ldr	r3, [sp, #8]
 8009118:	b113      	cbz	r3, 8009120 <__kernel_rem_pio2+0x5a8>
 800911a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800911e:	4619      	mov	r1, r3
 8009120:	9b01      	ldr	r3, [sp, #4]
 8009122:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009126:	e791      	b.n	800904c <__kernel_rem_pio2+0x4d4>
 8009128:	465c      	mov	r4, fp
 800912a:	2000      	movs	r0, #0
 800912c:	2100      	movs	r1, #0
 800912e:	e7de      	b.n	80090ee <__kernel_rem_pio2+0x576>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	e7e2      	b.n	80090fc <__kernel_rem_pio2+0x584>
 8009136:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800913a:	f7f7 f8a7 	bl	800028c <__adddf3>
 800913e:	3401      	adds	r4, #1
 8009140:	e7e7      	b.n	8009112 <__kernel_rem_pio2+0x59a>
 8009142:	e9d8 4500 	ldrd	r4, r5, [r8]
 8009146:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800914a:	4620      	mov	r0, r4
 800914c:	4632      	mov	r2, r6
 800914e:	463b      	mov	r3, r7
 8009150:	4629      	mov	r1, r5
 8009152:	f7f7 f89b 	bl	800028c <__adddf3>
 8009156:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4620      	mov	r0, r4
 8009160:	4629      	mov	r1, r5
 8009162:	f7f7 f891 	bl	8000288 <__aeabi_dsub>
 8009166:	4632      	mov	r2, r6
 8009168:	463b      	mov	r3, r7
 800916a:	f7f7 f88f 	bl	800028c <__adddf3>
 800916e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009172:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8009176:	ed88 7b00 	vstr	d7, [r8]
 800917a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800917e:	e776      	b.n	800906e <__kernel_rem_pio2+0x4f6>
 8009180:	e9da 8900 	ldrd	r8, r9, [sl]
 8009184:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009188:	4640      	mov	r0, r8
 800918a:	4632      	mov	r2, r6
 800918c:	463b      	mov	r3, r7
 800918e:	4649      	mov	r1, r9
 8009190:	f7f7 f87c 	bl	800028c <__adddf3>
 8009194:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4640      	mov	r0, r8
 800919e:	4649      	mov	r1, r9
 80091a0:	f7f7 f872 	bl	8000288 <__aeabi_dsub>
 80091a4:	4632      	mov	r2, r6
 80091a6:	463b      	mov	r3, r7
 80091a8:	f7f7 f870 	bl	800028c <__adddf3>
 80091ac:	ed9d 7b04 	vldr	d7, [sp, #16]
 80091b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80091b4:	ed8a 7b00 	vstr	d7, [sl]
 80091b8:	3c01      	subs	r4, #1
 80091ba:	e75e      	b.n	800907a <__kernel_rem_pio2+0x502>
 80091bc:	ab48      	add	r3, sp, #288	; 0x120
 80091be:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	f7f7 f861 	bl	800028c <__adddf3>
 80091ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80091ce:	e75a      	b.n	8009086 <__kernel_rem_pio2+0x50e>
 80091d0:	9b01      	ldr	r3, [sp, #4]
 80091d2:	9a01      	ldr	r2, [sp, #4]
 80091d4:	601d      	str	r5, [r3, #0]
 80091d6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80091da:	605c      	str	r4, [r3, #4]
 80091dc:	609f      	str	r7, [r3, #8]
 80091de:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80091e2:	60d3      	str	r3, [r2, #12]
 80091e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091e8:	6110      	str	r0, [r2, #16]
 80091ea:	6153      	str	r3, [r2, #20]
 80091ec:	e72e      	b.n	800904c <__kernel_rem_pio2+0x4d4>
 80091ee:	bf00      	nop
 80091f0:	41700000 	.word	0x41700000
 80091f4:	3e700000 	.word	0x3e700000

080091f8 <__kernel_sin>:
 80091f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fc:	ed2d 8b04 	vpush	{d8-d9}
 8009200:	eeb0 8a41 	vmov.f32	s16, s2
 8009204:	eef0 8a61 	vmov.f32	s17, s3
 8009208:	ec55 4b10 	vmov	r4, r5, d0
 800920c:	b083      	sub	sp, #12
 800920e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009212:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009216:	9001      	str	r0, [sp, #4]
 8009218:	da06      	bge.n	8009228 <__kernel_sin+0x30>
 800921a:	ee10 0a10 	vmov	r0, s0
 800921e:	4629      	mov	r1, r5
 8009220:	f7f7 fc9a 	bl	8000b58 <__aeabi_d2iz>
 8009224:	2800      	cmp	r0, #0
 8009226:	d051      	beq.n	80092cc <__kernel_sin+0xd4>
 8009228:	4622      	mov	r2, r4
 800922a:	462b      	mov	r3, r5
 800922c:	4620      	mov	r0, r4
 800922e:	4629      	mov	r1, r5
 8009230:	f7f7 f9e2 	bl	80005f8 <__aeabi_dmul>
 8009234:	4682      	mov	sl, r0
 8009236:	468b      	mov	fp, r1
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4620      	mov	r0, r4
 800923e:	4629      	mov	r1, r5
 8009240:	f7f7 f9da 	bl	80005f8 <__aeabi_dmul>
 8009244:	a341      	add	r3, pc, #260	; (adr r3, 800934c <__kernel_sin+0x154>)
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	4680      	mov	r8, r0
 800924c:	4689      	mov	r9, r1
 800924e:	4650      	mov	r0, sl
 8009250:	4659      	mov	r1, fp
 8009252:	f7f7 f9d1 	bl	80005f8 <__aeabi_dmul>
 8009256:	a33f      	add	r3, pc, #252	; (adr r3, 8009354 <__kernel_sin+0x15c>)
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	f7f7 f814 	bl	8000288 <__aeabi_dsub>
 8009260:	4652      	mov	r2, sl
 8009262:	465b      	mov	r3, fp
 8009264:	f7f7 f9c8 	bl	80005f8 <__aeabi_dmul>
 8009268:	a33c      	add	r3, pc, #240	; (adr r3, 800935c <__kernel_sin+0x164>)
 800926a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926e:	f7f7 f80d 	bl	800028c <__adddf3>
 8009272:	4652      	mov	r2, sl
 8009274:	465b      	mov	r3, fp
 8009276:	f7f7 f9bf 	bl	80005f8 <__aeabi_dmul>
 800927a:	a33a      	add	r3, pc, #232	; (adr r3, 8009364 <__kernel_sin+0x16c>)
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	f7f7 f802 	bl	8000288 <__aeabi_dsub>
 8009284:	4652      	mov	r2, sl
 8009286:	465b      	mov	r3, fp
 8009288:	f7f7 f9b6 	bl	80005f8 <__aeabi_dmul>
 800928c:	a337      	add	r3, pc, #220	; (adr r3, 800936c <__kernel_sin+0x174>)
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	f7f6 fffb 	bl	800028c <__adddf3>
 8009296:	9b01      	ldr	r3, [sp, #4]
 8009298:	4606      	mov	r6, r0
 800929a:	460f      	mov	r7, r1
 800929c:	b9eb      	cbnz	r3, 80092da <__kernel_sin+0xe2>
 800929e:	4602      	mov	r2, r0
 80092a0:	460b      	mov	r3, r1
 80092a2:	4650      	mov	r0, sl
 80092a4:	4659      	mov	r1, fp
 80092a6:	f7f7 f9a7 	bl	80005f8 <__aeabi_dmul>
 80092aa:	a325      	add	r3, pc, #148	; (adr r3, 8009340 <__kernel_sin+0x148>)
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	f7f6 ffea 	bl	8000288 <__aeabi_dsub>
 80092b4:	4642      	mov	r2, r8
 80092b6:	464b      	mov	r3, r9
 80092b8:	f7f7 f99e 	bl	80005f8 <__aeabi_dmul>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4620      	mov	r0, r4
 80092c2:	4629      	mov	r1, r5
 80092c4:	f7f6 ffe2 	bl	800028c <__adddf3>
 80092c8:	4604      	mov	r4, r0
 80092ca:	460d      	mov	r5, r1
 80092cc:	ec45 4b10 	vmov	d0, r4, r5
 80092d0:	b003      	add	sp, #12
 80092d2:	ecbd 8b04 	vpop	{d8-d9}
 80092d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092da:	4b1b      	ldr	r3, [pc, #108]	; (8009348 <__kernel_sin+0x150>)
 80092dc:	ec51 0b18 	vmov	r0, r1, d8
 80092e0:	2200      	movs	r2, #0
 80092e2:	f7f7 f989 	bl	80005f8 <__aeabi_dmul>
 80092e6:	4632      	mov	r2, r6
 80092e8:	ec41 0b19 	vmov	d9, r0, r1
 80092ec:	463b      	mov	r3, r7
 80092ee:	4640      	mov	r0, r8
 80092f0:	4649      	mov	r1, r9
 80092f2:	f7f7 f981 	bl	80005f8 <__aeabi_dmul>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	ec51 0b19 	vmov	r0, r1, d9
 80092fe:	f7f6 ffc3 	bl	8000288 <__aeabi_dsub>
 8009302:	4652      	mov	r2, sl
 8009304:	465b      	mov	r3, fp
 8009306:	f7f7 f977 	bl	80005f8 <__aeabi_dmul>
 800930a:	ec53 2b18 	vmov	r2, r3, d8
 800930e:	f7f6 ffbb 	bl	8000288 <__aeabi_dsub>
 8009312:	a30b      	add	r3, pc, #44	; (adr r3, 8009340 <__kernel_sin+0x148>)
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	4606      	mov	r6, r0
 800931a:	460f      	mov	r7, r1
 800931c:	4640      	mov	r0, r8
 800931e:	4649      	mov	r1, r9
 8009320:	f7f7 f96a 	bl	80005f8 <__aeabi_dmul>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	4630      	mov	r0, r6
 800932a:	4639      	mov	r1, r7
 800932c:	f7f6 ffae 	bl	800028c <__adddf3>
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	4620      	mov	r0, r4
 8009336:	4629      	mov	r1, r5
 8009338:	f7f6 ffa6 	bl	8000288 <__aeabi_dsub>
 800933c:	e7c4      	b.n	80092c8 <__kernel_sin+0xd0>
 800933e:	bf00      	nop
 8009340:	55555549 	.word	0x55555549
 8009344:	3fc55555 	.word	0x3fc55555
 8009348:	3fe00000 	.word	0x3fe00000
 800934c:	5acfd57c 	.word	0x5acfd57c
 8009350:	3de5d93a 	.word	0x3de5d93a
 8009354:	8a2b9ceb 	.word	0x8a2b9ceb
 8009358:	3e5ae5e6 	.word	0x3e5ae5e6
 800935c:	57b1fe7d 	.word	0x57b1fe7d
 8009360:	3ec71de3 	.word	0x3ec71de3
 8009364:	19c161d5 	.word	0x19c161d5
 8009368:	3f2a01a0 	.word	0x3f2a01a0
 800936c:	1110f8a6 	.word	0x1110f8a6
 8009370:	3f811111 	.word	0x3f811111

08009374 <fabs>:
 8009374:	ec51 0b10 	vmov	r0, r1, d0
 8009378:	ee10 2a10 	vmov	r2, s0
 800937c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009380:	ec43 2b10 	vmov	d0, r2, r3
 8009384:	4770      	bx	lr
	...

08009388 <floor>:
 8009388:	ec51 0b10 	vmov	r0, r1, d0
 800938c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009390:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009394:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009398:	2e13      	cmp	r6, #19
 800939a:	ee10 5a10 	vmov	r5, s0
 800939e:	ee10 8a10 	vmov	r8, s0
 80093a2:	460c      	mov	r4, r1
 80093a4:	dc32      	bgt.n	800940c <floor+0x84>
 80093a6:	2e00      	cmp	r6, #0
 80093a8:	da14      	bge.n	80093d4 <floor+0x4c>
 80093aa:	a333      	add	r3, pc, #204	; (adr r3, 8009478 <floor+0xf0>)
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	f7f6 ff6c 	bl	800028c <__adddf3>
 80093b4:	2200      	movs	r2, #0
 80093b6:	2300      	movs	r3, #0
 80093b8:	f7f7 fbae 	bl	8000b18 <__aeabi_dcmpgt>
 80093bc:	b138      	cbz	r0, 80093ce <floor+0x46>
 80093be:	2c00      	cmp	r4, #0
 80093c0:	da57      	bge.n	8009472 <floor+0xea>
 80093c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80093c6:	431d      	orrs	r5, r3
 80093c8:	d001      	beq.n	80093ce <floor+0x46>
 80093ca:	4c2d      	ldr	r4, [pc, #180]	; (8009480 <floor+0xf8>)
 80093cc:	2500      	movs	r5, #0
 80093ce:	4621      	mov	r1, r4
 80093d0:	4628      	mov	r0, r5
 80093d2:	e025      	b.n	8009420 <floor+0x98>
 80093d4:	4f2b      	ldr	r7, [pc, #172]	; (8009484 <floor+0xfc>)
 80093d6:	4137      	asrs	r7, r6
 80093d8:	ea01 0307 	and.w	r3, r1, r7
 80093dc:	4303      	orrs	r3, r0
 80093de:	d01f      	beq.n	8009420 <floor+0x98>
 80093e0:	a325      	add	r3, pc, #148	; (adr r3, 8009478 <floor+0xf0>)
 80093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e6:	f7f6 ff51 	bl	800028c <__adddf3>
 80093ea:	2200      	movs	r2, #0
 80093ec:	2300      	movs	r3, #0
 80093ee:	f7f7 fb93 	bl	8000b18 <__aeabi_dcmpgt>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d0eb      	beq.n	80093ce <floor+0x46>
 80093f6:	2c00      	cmp	r4, #0
 80093f8:	bfbe      	ittt	lt
 80093fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80093fe:	fa43 f606 	asrlt.w	r6, r3, r6
 8009402:	19a4      	addlt	r4, r4, r6
 8009404:	ea24 0407 	bic.w	r4, r4, r7
 8009408:	2500      	movs	r5, #0
 800940a:	e7e0      	b.n	80093ce <floor+0x46>
 800940c:	2e33      	cmp	r6, #51	; 0x33
 800940e:	dd0b      	ble.n	8009428 <floor+0xa0>
 8009410:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009414:	d104      	bne.n	8009420 <floor+0x98>
 8009416:	ee10 2a10 	vmov	r2, s0
 800941a:	460b      	mov	r3, r1
 800941c:	f7f6 ff36 	bl	800028c <__adddf3>
 8009420:	ec41 0b10 	vmov	d0, r0, r1
 8009424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009428:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800942c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009430:	fa23 f707 	lsr.w	r7, r3, r7
 8009434:	4207      	tst	r7, r0
 8009436:	d0f3      	beq.n	8009420 <floor+0x98>
 8009438:	a30f      	add	r3, pc, #60	; (adr r3, 8009478 <floor+0xf0>)
 800943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943e:	f7f6 ff25 	bl	800028c <__adddf3>
 8009442:	2200      	movs	r2, #0
 8009444:	2300      	movs	r3, #0
 8009446:	f7f7 fb67 	bl	8000b18 <__aeabi_dcmpgt>
 800944a:	2800      	cmp	r0, #0
 800944c:	d0bf      	beq.n	80093ce <floor+0x46>
 800944e:	2c00      	cmp	r4, #0
 8009450:	da02      	bge.n	8009458 <floor+0xd0>
 8009452:	2e14      	cmp	r6, #20
 8009454:	d103      	bne.n	800945e <floor+0xd6>
 8009456:	3401      	adds	r4, #1
 8009458:	ea25 0507 	bic.w	r5, r5, r7
 800945c:	e7b7      	b.n	80093ce <floor+0x46>
 800945e:	2301      	movs	r3, #1
 8009460:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009464:	fa03 f606 	lsl.w	r6, r3, r6
 8009468:	4435      	add	r5, r6
 800946a:	4545      	cmp	r5, r8
 800946c:	bf38      	it	cc
 800946e:	18e4      	addcc	r4, r4, r3
 8009470:	e7f2      	b.n	8009458 <floor+0xd0>
 8009472:	2500      	movs	r5, #0
 8009474:	462c      	mov	r4, r5
 8009476:	e7aa      	b.n	80093ce <floor+0x46>
 8009478:	8800759c 	.word	0x8800759c
 800947c:	7e37e43c 	.word	0x7e37e43c
 8009480:	bff00000 	.word	0xbff00000
 8009484:	000fffff 	.word	0x000fffff

08009488 <nan>:
 8009488:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009490 <nan+0x8>
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	00000000 	.word	0x00000000
 8009494:	7ff80000 	.word	0x7ff80000

08009498 <scalbn>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	ec55 4b10 	vmov	r4, r5, d0
 800949e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80094a2:	4606      	mov	r6, r0
 80094a4:	462b      	mov	r3, r5
 80094a6:	b99a      	cbnz	r2, 80094d0 <scalbn+0x38>
 80094a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80094ac:	4323      	orrs	r3, r4
 80094ae:	d036      	beq.n	800951e <scalbn+0x86>
 80094b0:	4b39      	ldr	r3, [pc, #228]	; (8009598 <scalbn+0x100>)
 80094b2:	4629      	mov	r1, r5
 80094b4:	ee10 0a10 	vmov	r0, s0
 80094b8:	2200      	movs	r2, #0
 80094ba:	f7f7 f89d 	bl	80005f8 <__aeabi_dmul>
 80094be:	4b37      	ldr	r3, [pc, #220]	; (800959c <scalbn+0x104>)
 80094c0:	429e      	cmp	r6, r3
 80094c2:	4604      	mov	r4, r0
 80094c4:	460d      	mov	r5, r1
 80094c6:	da10      	bge.n	80094ea <scalbn+0x52>
 80094c8:	a32b      	add	r3, pc, #172	; (adr r3, 8009578 <scalbn+0xe0>)
 80094ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ce:	e03a      	b.n	8009546 <scalbn+0xae>
 80094d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80094d4:	428a      	cmp	r2, r1
 80094d6:	d10c      	bne.n	80094f2 <scalbn+0x5a>
 80094d8:	ee10 2a10 	vmov	r2, s0
 80094dc:	4620      	mov	r0, r4
 80094de:	4629      	mov	r1, r5
 80094e0:	f7f6 fed4 	bl	800028c <__adddf3>
 80094e4:	4604      	mov	r4, r0
 80094e6:	460d      	mov	r5, r1
 80094e8:	e019      	b.n	800951e <scalbn+0x86>
 80094ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80094ee:	460b      	mov	r3, r1
 80094f0:	3a36      	subs	r2, #54	; 0x36
 80094f2:	4432      	add	r2, r6
 80094f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80094f8:	428a      	cmp	r2, r1
 80094fa:	dd08      	ble.n	800950e <scalbn+0x76>
 80094fc:	2d00      	cmp	r5, #0
 80094fe:	a120      	add	r1, pc, #128	; (adr r1, 8009580 <scalbn+0xe8>)
 8009500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009504:	da1c      	bge.n	8009540 <scalbn+0xa8>
 8009506:	a120      	add	r1, pc, #128	; (adr r1, 8009588 <scalbn+0xf0>)
 8009508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800950c:	e018      	b.n	8009540 <scalbn+0xa8>
 800950e:	2a00      	cmp	r2, #0
 8009510:	dd08      	ble.n	8009524 <scalbn+0x8c>
 8009512:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009516:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800951a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800951e:	ec45 4b10 	vmov	d0, r4, r5
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009528:	da19      	bge.n	800955e <scalbn+0xc6>
 800952a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800952e:	429e      	cmp	r6, r3
 8009530:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009534:	dd0a      	ble.n	800954c <scalbn+0xb4>
 8009536:	a112      	add	r1, pc, #72	; (adr r1, 8009580 <scalbn+0xe8>)
 8009538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1e2      	bne.n	8009506 <scalbn+0x6e>
 8009540:	a30f      	add	r3, pc, #60	; (adr r3, 8009580 <scalbn+0xe8>)
 8009542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009546:	f7f7 f857 	bl	80005f8 <__aeabi_dmul>
 800954a:	e7cb      	b.n	80094e4 <scalbn+0x4c>
 800954c:	a10a      	add	r1, pc, #40	; (adr r1, 8009578 <scalbn+0xe0>)
 800954e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0b8      	beq.n	80094c8 <scalbn+0x30>
 8009556:	a10e      	add	r1, pc, #56	; (adr r1, 8009590 <scalbn+0xf8>)
 8009558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800955c:	e7b4      	b.n	80094c8 <scalbn+0x30>
 800955e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009562:	3236      	adds	r2, #54	; 0x36
 8009564:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009568:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800956c:	4620      	mov	r0, r4
 800956e:	4b0c      	ldr	r3, [pc, #48]	; (80095a0 <scalbn+0x108>)
 8009570:	2200      	movs	r2, #0
 8009572:	e7e8      	b.n	8009546 <scalbn+0xae>
 8009574:	f3af 8000 	nop.w
 8009578:	c2f8f359 	.word	0xc2f8f359
 800957c:	01a56e1f 	.word	0x01a56e1f
 8009580:	8800759c 	.word	0x8800759c
 8009584:	7e37e43c 	.word	0x7e37e43c
 8009588:	8800759c 	.word	0x8800759c
 800958c:	fe37e43c 	.word	0xfe37e43c
 8009590:	c2f8f359 	.word	0xc2f8f359
 8009594:	81a56e1f 	.word	0x81a56e1f
 8009598:	43500000 	.word	0x43500000
 800959c:	ffff3cb0 	.word	0xffff3cb0
 80095a0:	3c900000 	.word	0x3c900000
 80095a4:	00000000 	.word	0x00000000

080095a8 <__ieee754_log>:
 80095a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ac:	ec51 0b10 	vmov	r0, r1, d0
 80095b0:	ed2d 8b04 	vpush	{d8-d9}
 80095b4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80095b8:	b083      	sub	sp, #12
 80095ba:	460d      	mov	r5, r1
 80095bc:	da29      	bge.n	8009612 <__ieee754_log+0x6a>
 80095be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095c2:	4303      	orrs	r3, r0
 80095c4:	ee10 2a10 	vmov	r2, s0
 80095c8:	d10c      	bne.n	80095e4 <__ieee754_log+0x3c>
 80095ca:	49cf      	ldr	r1, [pc, #828]	; (8009908 <__ieee754_log+0x360>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	2300      	movs	r3, #0
 80095d0:	2000      	movs	r0, #0
 80095d2:	f7f7 f93b 	bl	800084c <__aeabi_ddiv>
 80095d6:	ec41 0b10 	vmov	d0, r0, r1
 80095da:	b003      	add	sp, #12
 80095dc:	ecbd 8b04 	vpop	{d8-d9}
 80095e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e4:	2900      	cmp	r1, #0
 80095e6:	da05      	bge.n	80095f4 <__ieee754_log+0x4c>
 80095e8:	460b      	mov	r3, r1
 80095ea:	f7f6 fe4d 	bl	8000288 <__aeabi_dsub>
 80095ee:	2200      	movs	r2, #0
 80095f0:	2300      	movs	r3, #0
 80095f2:	e7ee      	b.n	80095d2 <__ieee754_log+0x2a>
 80095f4:	4bc5      	ldr	r3, [pc, #788]	; (800990c <__ieee754_log+0x364>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	f7f6 fffe 	bl	80005f8 <__aeabi_dmul>
 80095fc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8009600:	460d      	mov	r5, r1
 8009602:	4ac3      	ldr	r2, [pc, #780]	; (8009910 <__ieee754_log+0x368>)
 8009604:	4295      	cmp	r5, r2
 8009606:	dd06      	ble.n	8009616 <__ieee754_log+0x6e>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	f7f6 fe3e 	bl	800028c <__adddf3>
 8009610:	e7e1      	b.n	80095d6 <__ieee754_log+0x2e>
 8009612:	2300      	movs	r3, #0
 8009614:	e7f5      	b.n	8009602 <__ieee754_log+0x5a>
 8009616:	152c      	asrs	r4, r5, #20
 8009618:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800961c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009620:	441c      	add	r4, r3
 8009622:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8009626:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800962a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800962e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8009632:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8009636:	ea42 0105 	orr.w	r1, r2, r5
 800963a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800963e:	2200      	movs	r2, #0
 8009640:	4bb4      	ldr	r3, [pc, #720]	; (8009914 <__ieee754_log+0x36c>)
 8009642:	f7f6 fe21 	bl	8000288 <__aeabi_dsub>
 8009646:	1cab      	adds	r3, r5, #2
 8009648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800964c:	2b02      	cmp	r3, #2
 800964e:	4682      	mov	sl, r0
 8009650:	468b      	mov	fp, r1
 8009652:	f04f 0200 	mov.w	r2, #0
 8009656:	dc53      	bgt.n	8009700 <__ieee754_log+0x158>
 8009658:	2300      	movs	r3, #0
 800965a:	f7f7 fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 800965e:	b1d0      	cbz	r0, 8009696 <__ieee754_log+0xee>
 8009660:	2c00      	cmp	r4, #0
 8009662:	f000 8122 	beq.w	80098aa <__ieee754_log+0x302>
 8009666:	4620      	mov	r0, r4
 8009668:	f7f6 ff5c 	bl	8000524 <__aeabi_i2d>
 800966c:	a390      	add	r3, pc, #576	; (adr r3, 80098b0 <__ieee754_log+0x308>)
 800966e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009672:	4606      	mov	r6, r0
 8009674:	460f      	mov	r7, r1
 8009676:	f7f6 ffbf 	bl	80005f8 <__aeabi_dmul>
 800967a:	a38f      	add	r3, pc, #572	; (adr r3, 80098b8 <__ieee754_log+0x310>)
 800967c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009680:	4604      	mov	r4, r0
 8009682:	460d      	mov	r5, r1
 8009684:	4630      	mov	r0, r6
 8009686:	4639      	mov	r1, r7
 8009688:	f7f6 ffb6 	bl	80005f8 <__aeabi_dmul>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	4620      	mov	r0, r4
 8009692:	4629      	mov	r1, r5
 8009694:	e7ba      	b.n	800960c <__ieee754_log+0x64>
 8009696:	a38a      	add	r3, pc, #552	; (adr r3, 80098c0 <__ieee754_log+0x318>)
 8009698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969c:	4650      	mov	r0, sl
 800969e:	4659      	mov	r1, fp
 80096a0:	f7f6 ffaa 	bl	80005f8 <__aeabi_dmul>
 80096a4:	4602      	mov	r2, r0
 80096a6:	460b      	mov	r3, r1
 80096a8:	2000      	movs	r0, #0
 80096aa:	499b      	ldr	r1, [pc, #620]	; (8009918 <__ieee754_log+0x370>)
 80096ac:	f7f6 fdec 	bl	8000288 <__aeabi_dsub>
 80096b0:	4652      	mov	r2, sl
 80096b2:	4606      	mov	r6, r0
 80096b4:	460f      	mov	r7, r1
 80096b6:	465b      	mov	r3, fp
 80096b8:	4650      	mov	r0, sl
 80096ba:	4659      	mov	r1, fp
 80096bc:	f7f6 ff9c 	bl	80005f8 <__aeabi_dmul>
 80096c0:	4602      	mov	r2, r0
 80096c2:	460b      	mov	r3, r1
 80096c4:	4630      	mov	r0, r6
 80096c6:	4639      	mov	r1, r7
 80096c8:	f7f6 ff96 	bl	80005f8 <__aeabi_dmul>
 80096cc:	4606      	mov	r6, r0
 80096ce:	460f      	mov	r7, r1
 80096d0:	b914      	cbnz	r4, 80096d8 <__ieee754_log+0x130>
 80096d2:	4632      	mov	r2, r6
 80096d4:	463b      	mov	r3, r7
 80096d6:	e0a2      	b.n	800981e <__ieee754_log+0x276>
 80096d8:	4620      	mov	r0, r4
 80096da:	f7f6 ff23 	bl	8000524 <__aeabi_i2d>
 80096de:	a374      	add	r3, pc, #464	; (adr r3, 80098b0 <__ieee754_log+0x308>)
 80096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e4:	4680      	mov	r8, r0
 80096e6:	4689      	mov	r9, r1
 80096e8:	f7f6 ff86 	bl	80005f8 <__aeabi_dmul>
 80096ec:	a372      	add	r3, pc, #456	; (adr r3, 80098b8 <__ieee754_log+0x310>)
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	4604      	mov	r4, r0
 80096f4:	460d      	mov	r5, r1
 80096f6:	4640      	mov	r0, r8
 80096f8:	4649      	mov	r1, r9
 80096fa:	f7f6 ff7d 	bl	80005f8 <__aeabi_dmul>
 80096fe:	e0a7      	b.n	8009850 <__ieee754_log+0x2a8>
 8009700:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009704:	f7f6 fdc2 	bl	800028c <__adddf3>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	4650      	mov	r0, sl
 800970e:	4659      	mov	r1, fp
 8009710:	f7f7 f89c 	bl	800084c <__aeabi_ddiv>
 8009714:	ec41 0b18 	vmov	d8, r0, r1
 8009718:	4620      	mov	r0, r4
 800971a:	f7f6 ff03 	bl	8000524 <__aeabi_i2d>
 800971e:	ec53 2b18 	vmov	r2, r3, d8
 8009722:	ec41 0b19 	vmov	d9, r0, r1
 8009726:	ec51 0b18 	vmov	r0, r1, d8
 800972a:	f7f6 ff65 	bl	80005f8 <__aeabi_dmul>
 800972e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8009732:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8009736:	9301      	str	r3, [sp, #4]
 8009738:	4602      	mov	r2, r0
 800973a:	460b      	mov	r3, r1
 800973c:	4680      	mov	r8, r0
 800973e:	4689      	mov	r9, r1
 8009740:	f7f6 ff5a 	bl	80005f8 <__aeabi_dmul>
 8009744:	a360      	add	r3, pc, #384	; (adr r3, 80098c8 <__ieee754_log+0x320>)
 8009746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974a:	4606      	mov	r6, r0
 800974c:	460f      	mov	r7, r1
 800974e:	f7f6 ff53 	bl	80005f8 <__aeabi_dmul>
 8009752:	a35f      	add	r3, pc, #380	; (adr r3, 80098d0 <__ieee754_log+0x328>)
 8009754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009758:	f7f6 fd98 	bl	800028c <__adddf3>
 800975c:	4632      	mov	r2, r6
 800975e:	463b      	mov	r3, r7
 8009760:	f7f6 ff4a 	bl	80005f8 <__aeabi_dmul>
 8009764:	a35c      	add	r3, pc, #368	; (adr r3, 80098d8 <__ieee754_log+0x330>)
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	f7f6 fd8f 	bl	800028c <__adddf3>
 800976e:	4632      	mov	r2, r6
 8009770:	463b      	mov	r3, r7
 8009772:	f7f6 ff41 	bl	80005f8 <__aeabi_dmul>
 8009776:	a35a      	add	r3, pc, #360	; (adr r3, 80098e0 <__ieee754_log+0x338>)
 8009778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977c:	f7f6 fd86 	bl	800028c <__adddf3>
 8009780:	4642      	mov	r2, r8
 8009782:	464b      	mov	r3, r9
 8009784:	f7f6 ff38 	bl	80005f8 <__aeabi_dmul>
 8009788:	a357      	add	r3, pc, #348	; (adr r3, 80098e8 <__ieee754_log+0x340>)
 800978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978e:	4680      	mov	r8, r0
 8009790:	4689      	mov	r9, r1
 8009792:	4630      	mov	r0, r6
 8009794:	4639      	mov	r1, r7
 8009796:	f7f6 ff2f 	bl	80005f8 <__aeabi_dmul>
 800979a:	a355      	add	r3, pc, #340	; (adr r3, 80098f0 <__ieee754_log+0x348>)
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	f7f6 fd74 	bl	800028c <__adddf3>
 80097a4:	4632      	mov	r2, r6
 80097a6:	463b      	mov	r3, r7
 80097a8:	f7f6 ff26 	bl	80005f8 <__aeabi_dmul>
 80097ac:	a352      	add	r3, pc, #328	; (adr r3, 80098f8 <__ieee754_log+0x350>)
 80097ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b2:	f7f6 fd6b 	bl	800028c <__adddf3>
 80097b6:	4632      	mov	r2, r6
 80097b8:	463b      	mov	r3, r7
 80097ba:	f7f6 ff1d 	bl	80005f8 <__aeabi_dmul>
 80097be:	460b      	mov	r3, r1
 80097c0:	4602      	mov	r2, r0
 80097c2:	4649      	mov	r1, r9
 80097c4:	4640      	mov	r0, r8
 80097c6:	f7f6 fd61 	bl	800028c <__adddf3>
 80097ca:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80097ce:	9b01      	ldr	r3, [sp, #4]
 80097d0:	3551      	adds	r5, #81	; 0x51
 80097d2:	431d      	orrs	r5, r3
 80097d4:	2d00      	cmp	r5, #0
 80097d6:	4680      	mov	r8, r0
 80097d8:	4689      	mov	r9, r1
 80097da:	dd48      	ble.n	800986e <__ieee754_log+0x2c6>
 80097dc:	4b4e      	ldr	r3, [pc, #312]	; (8009918 <__ieee754_log+0x370>)
 80097de:	2200      	movs	r2, #0
 80097e0:	4650      	mov	r0, sl
 80097e2:	4659      	mov	r1, fp
 80097e4:	f7f6 ff08 	bl	80005f8 <__aeabi_dmul>
 80097e8:	4652      	mov	r2, sl
 80097ea:	465b      	mov	r3, fp
 80097ec:	f7f6 ff04 	bl	80005f8 <__aeabi_dmul>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4606      	mov	r6, r0
 80097f6:	460f      	mov	r7, r1
 80097f8:	4640      	mov	r0, r8
 80097fa:	4649      	mov	r1, r9
 80097fc:	f7f6 fd46 	bl	800028c <__adddf3>
 8009800:	ec53 2b18 	vmov	r2, r3, d8
 8009804:	f7f6 fef8 	bl	80005f8 <__aeabi_dmul>
 8009808:	4680      	mov	r8, r0
 800980a:	4689      	mov	r9, r1
 800980c:	b964      	cbnz	r4, 8009828 <__ieee754_log+0x280>
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	4630      	mov	r0, r6
 8009814:	4639      	mov	r1, r7
 8009816:	f7f6 fd37 	bl	8000288 <__aeabi_dsub>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	4650      	mov	r0, sl
 8009820:	4659      	mov	r1, fp
 8009822:	f7f6 fd31 	bl	8000288 <__aeabi_dsub>
 8009826:	e6d6      	b.n	80095d6 <__ieee754_log+0x2e>
 8009828:	a321      	add	r3, pc, #132	; (adr r3, 80098b0 <__ieee754_log+0x308>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	ec51 0b19 	vmov	r0, r1, d9
 8009832:	f7f6 fee1 	bl	80005f8 <__aeabi_dmul>
 8009836:	a320      	add	r3, pc, #128	; (adr r3, 80098b8 <__ieee754_log+0x310>)
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	4604      	mov	r4, r0
 800983e:	460d      	mov	r5, r1
 8009840:	ec51 0b19 	vmov	r0, r1, d9
 8009844:	f7f6 fed8 	bl	80005f8 <__aeabi_dmul>
 8009848:	4642      	mov	r2, r8
 800984a:	464b      	mov	r3, r9
 800984c:	f7f6 fd1e 	bl	800028c <__adddf3>
 8009850:	4602      	mov	r2, r0
 8009852:	460b      	mov	r3, r1
 8009854:	4630      	mov	r0, r6
 8009856:	4639      	mov	r1, r7
 8009858:	f7f6 fd16 	bl	8000288 <__aeabi_dsub>
 800985c:	4652      	mov	r2, sl
 800985e:	465b      	mov	r3, fp
 8009860:	f7f6 fd12 	bl	8000288 <__aeabi_dsub>
 8009864:	4602      	mov	r2, r0
 8009866:	460b      	mov	r3, r1
 8009868:	4620      	mov	r0, r4
 800986a:	4629      	mov	r1, r5
 800986c:	e7d9      	b.n	8009822 <__ieee754_log+0x27a>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4650      	mov	r0, sl
 8009874:	4659      	mov	r1, fp
 8009876:	f7f6 fd07 	bl	8000288 <__aeabi_dsub>
 800987a:	ec53 2b18 	vmov	r2, r3, d8
 800987e:	f7f6 febb 	bl	80005f8 <__aeabi_dmul>
 8009882:	4606      	mov	r6, r0
 8009884:	460f      	mov	r7, r1
 8009886:	2c00      	cmp	r4, #0
 8009888:	f43f af23 	beq.w	80096d2 <__ieee754_log+0x12a>
 800988c:	a308      	add	r3, pc, #32	; (adr r3, 80098b0 <__ieee754_log+0x308>)
 800988e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009892:	ec51 0b19 	vmov	r0, r1, d9
 8009896:	f7f6 feaf 	bl	80005f8 <__aeabi_dmul>
 800989a:	a307      	add	r3, pc, #28	; (adr r3, 80098b8 <__ieee754_log+0x310>)
 800989c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a0:	4604      	mov	r4, r0
 80098a2:	460d      	mov	r5, r1
 80098a4:	ec51 0b19 	vmov	r0, r1, d9
 80098a8:	e727      	b.n	80096fa <__ieee754_log+0x152>
 80098aa:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8009900 <__ieee754_log+0x358>
 80098ae:	e694      	b.n	80095da <__ieee754_log+0x32>
 80098b0:	fee00000 	.word	0xfee00000
 80098b4:	3fe62e42 	.word	0x3fe62e42
 80098b8:	35793c76 	.word	0x35793c76
 80098bc:	3dea39ef 	.word	0x3dea39ef
 80098c0:	55555555 	.word	0x55555555
 80098c4:	3fd55555 	.word	0x3fd55555
 80098c8:	df3e5244 	.word	0xdf3e5244
 80098cc:	3fc2f112 	.word	0x3fc2f112
 80098d0:	96cb03de 	.word	0x96cb03de
 80098d4:	3fc74664 	.word	0x3fc74664
 80098d8:	94229359 	.word	0x94229359
 80098dc:	3fd24924 	.word	0x3fd24924
 80098e0:	55555593 	.word	0x55555593
 80098e4:	3fe55555 	.word	0x3fe55555
 80098e8:	d078c69f 	.word	0xd078c69f
 80098ec:	3fc39a09 	.word	0x3fc39a09
 80098f0:	1d8e78af 	.word	0x1d8e78af
 80098f4:	3fcc71c5 	.word	0x3fcc71c5
 80098f8:	9997fa04 	.word	0x9997fa04
 80098fc:	3fd99999 	.word	0x3fd99999
	...
 8009908:	c3500000 	.word	0xc3500000
 800990c:	43500000 	.word	0x43500000
 8009910:	7fefffff 	.word	0x7fefffff
 8009914:	3ff00000 	.word	0x3ff00000
 8009918:	3fe00000 	.word	0x3fe00000

0800991c <_init>:
 800991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991e:	bf00      	nop
 8009920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009922:	bc08      	pop	{r3}
 8009924:	469e      	mov	lr, r3
 8009926:	4770      	bx	lr

08009928 <_fini>:
 8009928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992a:	bf00      	nop
 800992c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800992e:	bc08      	pop	{r3}
 8009930:	469e      	mov	lr, r3
 8009932:	4770      	bx	lr
