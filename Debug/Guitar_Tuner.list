
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08007de0  08007de0  00017de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008204  08008204  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  08008204  08008204  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008204  08008204  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008204  08008204  00018204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008208  08008208  00018208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800820c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a1f8  20000230  0800843c  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a428  0800843c  0002a428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dbb  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c5  00000000  00000000  0003401b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  000369e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00037ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002475a  00000000  00000000  00038a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012232  00000000  00000000  0005d1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0357  00000000  00000000  0006f3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  0014f74b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e0  00000000  00000000  0014f810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001229  00000000  00000000  00154ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007dc4 	.word	0x08007dc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	08007dc4 	.word	0x08007dc4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_ADC_ConvHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  in_buff = &adc_buff[0];
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000bb4:	601a      	str	r2, [r3, #0]
  out_buff = &dac_buff[HLF_BUFFER_LEN];
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000bb8:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000bba:	601a      	str	r2, [r3, #0]
  callback_state = 1;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	601a      	str	r2, [r3, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	2000024c 	.word	0x2000024c
 8000bd4:	20004414 	.word	0x20004414
 8000bd8:	20000250 	.word	0x20000250
 8000bdc:	20009414 	.word	0x20009414
 8000be0:	20000254 	.word	0x20000254

08000be4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  in_buff = &adc_buff[HLF_BUFFER_LEN];
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <HAL_ADC_ConvCpltCallback+0x28>)
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000bf0:	601a      	str	r2, [r3, #0]
  out_buff = &dac_buff[0];
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_ADC_ConvCpltCallback+0x30>)
 8000bf4:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_ADC_ConvCpltCallback+0x34>)
 8000bf6:	601a      	str	r2, [r3, #0]
  callback_state = 1;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_ADC_ConvCpltCallback+0x38>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]

}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	2000024c 	.word	0x2000024c
 8000c10:	20005414 	.word	0x20005414
 8000c14:	20000250 	.word	0x20000250
 8000c18:	20008414 	.word	0x20008414
 8000c1c:	20000254 	.word	0x20000254

08000c20 <process_dsp>:



void process_dsp()
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0

	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	e013      	b.n	8000c54 <process_dsp+0x34>
	{
		in_buff_dsp[i] = (float32_t) in_buff[i];
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <process_dsp+0x8c>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	4413      	add	r3, r2
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <process_dsp+0x90>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4413      	add	r3, r2
 8000c4a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3301      	adds	r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c5a:	dbe7      	blt.n	8000c2c <process_dsp+0xc>
	}

	arm_fir_f32(&fir_settings, in_buff_dsp, out_buff_dsp, BLOCK_SIZE_FLOAT);
 8000c5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <process_dsp+0x94>)
 8000c62:	4913      	ldr	r1, [pc, #76]	; (8000cb0 <process_dsp+0x90>)
 8000c64:	4814      	ldr	r0, [pc, #80]	; (8000cb8 <process_dsp+0x98>)
 8000c66:	f004 f947 	bl	8004ef8 <arm_fir_f32>



	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	e013      	b.n	8000c98 <process_dsp+0x78>
	{
		out_buff[i] = (uint16_t) out_buff_dsp[i];
 8000c70:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <process_dsp+0x94>)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	edd3 7a00 	vldr	s15, [r3]
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <process_dsp+0x9c>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < HLF_BUFFER_LEN; i++)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	3301      	adds	r3, #1
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c9e:	dbe7      	blt.n	8000c70 <process_dsp+0x50>
	}
}
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000024c 	.word	0x2000024c
 8000cb0:	20006414 	.word	0x20006414
 8000cb4:	200002cc 	.word	0x200002cc
 8000cb8:	20000278 	.word	0x20000278
 8000cbc:	20000250 	.word	0x20000250

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc6:	f000 fc90 	bl	80015ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cca:	f000 f84b 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cce:	f000 f98d 	bl	8000fec <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd2:	f000 f965 	bl	8000fa0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000cd6:	f000 f895 	bl	8000e04 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000cda:	f000 f92b 	bl	8000f34 <MX_TIM6_Init>
  MX_DAC1_Init();
 8000cde:	f000 f8f7 	bl	8000ed0 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000ce2:	4817      	ldr	r0, [pc, #92]	; (8000d40 <main+0x80>)
 8000ce4:	f003 fedc 	bl	8004aa0 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim6, TIM_CHANNEL_6);
 8000ce8:	2114      	movs	r1, #20
 8000cea:	4815      	ldr	r0, [pc, #84]	; (8000d40 <main+0x80>)
 8000cec:	f003 ff24 	bl	8004b38 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, FULL_BUFFER_LEN);
 8000cf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cf4:	4913      	ldr	r1, [pc, #76]	; (8000d44 <main+0x84>)
 8000cf6:	4814      	ldr	r0, [pc, #80]	; (8000d48 <main+0x88>)
 8000cf8:	f001 f820 	bl	8001d3c <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)dac_buff,  FULL_BUFFER_LEN, DAC_ALIGN_12B_R);
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d04:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <main+0x8c>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4811      	ldr	r0, [pc, #68]	; (8000d50 <main+0x90>)
 8000d0a:	f001 fed3 	bl	8002ab4 <HAL_DAC_Start_DMA>

  arm_fir_init_f32(&fir_settings, NUMBER_TAPS, &fir_taps[0], &fir_state[0], BLOCK_SIZE_FLOAT);
 8000d0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <main+0x94>)
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <main+0x98>)
 8000d18:	2115      	movs	r1, #21
 8000d1a:	4810      	ldr	r0, [pc, #64]	; (8000d5c <main+0x9c>)
 8000d1c:	f004 f8da 	bl	8004ed4 <arm_fir_init_f32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (callback_state == 1)
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <main+0xa0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d1fb      	bne.n	8000d20 <main+0x60>
	  {

		  process_dsp();
 8000d28:	f7ff ff7a 	bl	8000c20 <process_dsp>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000d2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f002 fcd6 	bl	80036e4 <HAL_GPIO_TogglePin>
		  callback_state = 0;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <main+0xa0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
	  if (callback_state == 1)
 8000d3e:	e7ef      	b.n	8000d20 <main+0x60>
 8000d40:	200043c8 	.word	0x200043c8
 8000d44:	20004414 	.word	0x20004414
 8000d48:	200022cc 	.word	0x200022cc
 8000d4c:	20008414 	.word	0x20008414
 8000d50:	20000264 	.word	0x20000264
 8000d54:	20002330 	.word	0x20002330
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000278 	.word	0x20000278
 8000d60:	20000254 	.word	0x20000254

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b096      	sub	sp, #88	; 0x58
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	2244      	movs	r2, #68	; 0x44
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f004 fb4e 	bl	8005414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d8a:	f002 fcd3 	bl	8003734 <HAL_PWREx_ControlVoltageScaling>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d94:	f000 f976 	bl	8001084 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	2302      	movs	r3, #2
 8000da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da6:	2303      	movs	r3, #3
 8000da8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000daa:	2306      	movs	r3, #6
 8000dac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000dae:	2350      	movs	r3, #80	; 0x50
 8000db0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000db2:	2307      	movs	r3, #7
 8000db4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fd0c 	bl	80037e0 <HAL_RCC_OscConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dce:	f000 f959 	bl	8001084 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000de6:	463b      	mov	r3, r7
 8000de8:	2104      	movs	r1, #4
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 f90a 	bl	8004004 <HAL_RCC_ClockConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000df6:	f000 f945 	bl	8001084 <Error_Handler>
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3758      	adds	r7, #88	; 0x58
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e1c:	4a2a      	ldr	r2, [pc, #168]	; (8000ec8 <MX_ADC1_Init+0xc4>)
 8000e1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e26:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e5a:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7e:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000e80:	f000 fe14 	bl	8001aac <HAL_ADC_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000e8a:	f000 f8fb 	bl	8001084 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_ADC1_Init+0xc8>)
 8000e90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e92:	2306      	movs	r3, #6
 8000e94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e9a:	237f      	movs	r3, #127	; 0x7f
 8000e9c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <MX_ADC1_Init+0xc0>)
 8000eac:	f000 ffd4 	bl	8001e58 <HAL_ADC_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000eb6:	f000 f8e5 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200022cc 	.word	0x200022cc
 8000ec8:	50040000 	.word	0x50040000
 8000ecc:	14f00020 	.word	0x14f00020

08000ed0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2224      	movs	r2, #36	; 0x24
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 fa99 	bl	8005414 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_DAC1_Init+0x5c>)
 8000ee4:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <MX_DAC1_Init+0x60>)
 8000ee6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ee8:	4810      	ldr	r0, [pc, #64]	; (8000f2c <MX_DAC1_Init+0x5c>)
 8000eea:	f001 fdc0 	bl	8002a6e <HAL_DAC_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ef4:	f000 f8c6 	bl	8001084 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000efc:	2304      	movs	r3, #4
 8000efe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4619      	mov	r1, r3
 8000f12:	4806      	ldr	r0, [pc, #24]	; (8000f2c <MX_DAC1_Init+0x5c>)
 8000f14:	f001 feb8 	bl	8002c88 <HAL_DAC_ConfigChannel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f000 f8b1 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000264 	.word	0x20000264
 8000f30:	40007400 	.word	0x40007400

08000f34 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f46:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000 - 1;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f58:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f5c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f66:	f003 fd43 	bl	80049f0 <HAL_TIM_Base_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f70:	f000 f888 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f74:	2320      	movs	r3, #32
 8000f76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f82:	f003 ff41 	bl	8004e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f8c:	f000 f87a 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200043c8 	.word	0x200043c8
 8000f9c:	40001000 	.word	0x40001000

08000fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_DMA_Init+0x48>)
 8000fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <MX_DMA_Init+0x48>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6493      	str	r3, [r2, #72]	; 0x48
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <MX_DMA_Init+0x48>)
 8000fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	200b      	movs	r0, #11
 8000fc4:	f001 fd1d 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fc8:	200b      	movs	r0, #11
 8000fca:	f001 fd36 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	200d      	movs	r0, #13
 8000fd4:	f001 fd15 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000fd8:	200d      	movs	r0, #13
 8000fda:	f001 fd2e 	bl	8002a3a <HAL_NVIC_EnableIRQ>

}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_GPIO_Init+0x94>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a1e      	ldr	r2, [pc, #120]	; (8001080 <MX_GPIO_Init+0x94>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_GPIO_Init+0x94>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_GPIO_Init+0x94>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a18      	ldr	r2, [pc, #96]	; (8001080 <MX_GPIO_Init+0x94>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <MX_GPIO_Init+0x94>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <MX_GPIO_Init+0x94>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_GPIO_Init+0x94>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <MX_GPIO_Init+0x94>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001054:	f002 fb2e 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800105c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f002 f9a4 	bl	80033c0 <HAL_GPIO_Init>

}
 8001078:	bf00      	nop
 800107a:	3720      	adds	r7, #32
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021000 	.word	0x40021000

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108c:	e7fe      	b.n	800108c <Error_Handler+0x8>
	...

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_MspInit+0x44>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <HAL_MspInit+0x44>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6613      	str	r3, [r2, #96]	; 0x60
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_MspInit+0x44>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_MspInit+0x44>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_MspInit+0x44>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_MspInit+0x44>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000

080010d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0a0      	sub	sp, #128	; 0x80
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	225c      	movs	r2, #92	; 0x5c
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f004 f98b 	bl	8005414 <memset>
  if(hadc->Instance==ADC1)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a3b      	ldr	r2, [pc, #236]	; (80011f0 <HAL_ADC_MspInit+0x118>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d16f      	bne.n	80011e8 <HAL_ADC_MspInit+0x110>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001108:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800110c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800110e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001112:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001114:	2303      	movs	r3, #3
 8001116:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 6;
 8001118:	2306      	movs	r3, #6
 800111a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 43;
 800111c:	232b      	movs	r3, #43	; 0x2b
 800111e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001120:	2307      	movs	r3, #7
 8001122:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001124:	2302      	movs	r3, #2
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8001128:	2304      	movs	r3, #4
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800112c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	4618      	mov	r0, r3
 8001138:	f003 f950 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001142:	f7ff ff9f 	bl	8001084 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001146:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <HAL_ADC_MspInit+0x11c>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a2a      	ldr	r2, [pc, #168]	; (80011f4 <HAL_ADC_MspInit+0x11c>)
 800114c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <HAL_ADC_MspInit+0x11c>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <HAL_ADC_MspInit+0x11c>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <HAL_ADC_MspInit+0x11c>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116a:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <HAL_ADC_MspInit+0x11c>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001176:	2301      	movs	r3, #1
 8001178:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800117a:	230b      	movs	r3, #11
 800117c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118c:	f002 f918 	bl	80033c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_ADC_MspInit+0x120>)
 8001192:	4a1a      	ldr	r2, [pc, #104]	; (80011fc <HAL_ADC_MspInit+0x124>)
 8001194:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_ADC_MspInit+0x120>)
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_ADC_MspInit+0x120>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_ADC_MspInit+0x120>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <HAL_ADC_MspInit+0x120>)
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_ADC_MspInit+0x120>)
 80011b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <HAL_ADC_MspInit+0x120>)
 80011b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_ADC_MspInit+0x120>)
 80011c0:	2220      	movs	r2, #32
 80011c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_ADC_MspInit+0x120>)
 80011c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011cc:	480a      	ldr	r0, [pc, #40]	; (80011f8 <HAL_ADC_MspInit+0x120>)
 80011ce:	f001 feff 	bl	8002fd0 <HAL_DMA_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 80011d8:	f7ff ff54 	bl	8001084 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <HAL_ADC_MspInit+0x120>)
 80011e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <HAL_ADC_MspInit+0x120>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011e8:	bf00      	nop
 80011ea:	3780      	adds	r7, #128	; 0x80
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	50040000 	.word	0x50040000
 80011f4:	40021000 	.word	0x40021000
 80011f8:	20004380 	.word	0x20004380
 80011fc:	40020008 	.word	0x40020008

08001200 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a2b      	ldr	r2, [pc, #172]	; (80012cc <HAL_DAC_MspInit+0xcc>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d14f      	bne.n	80012c2 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <HAL_DAC_MspInit+0xd0>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001226:	4a2a      	ldr	r2, [pc, #168]	; (80012d0 <HAL_DAC_MspInit+0xd0>)
 8001228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800122c:	6593      	str	r3, [r2, #88]	; 0x58
 800122e:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <HAL_DAC_MspInit+0xd0>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <HAL_DAC_MspInit+0xd0>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a24      	ldr	r2, [pc, #144]	; (80012d0 <HAL_DAC_MspInit+0xd0>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <HAL_DAC_MspInit+0xd0>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001252:	2310      	movs	r3, #16
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001256:	2303      	movs	r3, #3
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001268:	f002 f8aa 	bl	80033c0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_DAC_MspInit+0xd4>)
 800126e:	4a1a      	ldr	r2, [pc, #104]	; (80012d8 <HAL_DAC_MspInit+0xd8>)
 8001270:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_DAC_MspInit+0xd4>)
 8001274:	2206      	movs	r2, #6
 8001276:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_DAC_MspInit+0xd4>)
 800127a:	2210      	movs	r2, #16
 800127c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_DAC_MspInit+0xd4>)
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_DAC_MspInit+0xd4>)
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_DAC_MspInit+0xd4>)
 800128c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001290:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_DAC_MspInit+0xd4>)
 8001294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001298:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_DAC_MspInit+0xd4>)
 800129c:	2220      	movs	r2, #32
 800129e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_DAC_MspInit+0xd4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80012a6:	480b      	ldr	r0, [pc, #44]	; (80012d4 <HAL_DAC_MspInit+0xd4>)
 80012a8:	f001 fe92 	bl	8002fd0 <HAL_DMA_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80012b2:	f7ff fee7 	bl	8001084 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <HAL_DAC_MspInit+0xd4>)
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <HAL_DAC_MspInit+0xd4>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80012c2:	bf00      	nop
 80012c4:	3728      	adds	r7, #40	; 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40007400 	.word	0x40007400
 80012d0:	40021000 	.word	0x40021000
 80012d4:	20000284 	.word	0x20000284
 80012d8:	40020030 	.word	0x40020030

080012dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_TIM_Base_MspInit+0x38>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d10b      	bne.n	8001306 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_TIM_Base_MspInit+0x3c>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	4a09      	ldr	r2, [pc, #36]	; (8001318 <HAL_TIM_Base_MspInit+0x3c>)
 80012f4:	f043 0310 	orr.w	r3, r3, #16
 80012f8:	6593      	str	r3, [r2, #88]	; 0x58
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_TIM_Base_MspInit+0x3c>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40001000 	.word	0x40001000
 8001318:	40021000 	.word	0x40021000

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler+0x4>

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <MemManage_Handler+0x4>

0800132e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <UsageFault_Handler+0x4>

0800133a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001368:	f000 f994 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}

08001370 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <DMA1_Channel1_IRQHandler+0x10>)
 8001376:	f001 ff43 	bl	8003200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20004380 	.word	0x20004380

08001384 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <DMA1_Channel3_IRQHandler+0x10>)
 800138a:	f001 ff39 	bl	8003200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000284 	.word	0x20000284

08001398 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <ITM_SendChar+0x48>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <ITM_SendChar+0x48>)
 80013a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ac:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <ITM_SendChar+0x4c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <ITM_SendChar+0x4c>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80013ba:	bf00      	nop
 80013bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f8      	beq.n	80013bc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80013ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	6013      	str	r3, [r2, #0]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000edfc 	.word	0xe000edfc
 80013e4:	e0000e00 	.word	0xe0000e00

080013e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
	return 1;
 80013ec:	2301      	movs	r3, #1
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_kill>:

int _kill(int pid, int sig)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001402:	f003 ffdd 	bl	80053c0 <__errno>
 8001406:	4603      	mov	r3, r0
 8001408:	2216      	movs	r2, #22
 800140a:	601a      	str	r2, [r3, #0]
	return -1;
 800140c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_exit>:

void _exit (int status)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ffe7 	bl	80013f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800142a:	e7fe      	b.n	800142a <_exit+0x12>

0800142c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e00a      	b.n	8001454 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800143e:	f3af 8000 	nop.w
 8001442:	4601      	mov	r1, r0
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	60ba      	str	r2, [r7, #8]
 800144a:	b2ca      	uxtb	r2, r1
 800144c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	dbf0      	blt.n	800143e <_read+0x12>
	}

return len;
 800145c:	687b      	ldr	r3, [r7, #4]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e009      	b.n	800148c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);   // This sends to the trace
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	60ba      	str	r2, [r7, #8]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff89 	bl	8001398 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3301      	adds	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	dbf1      	blt.n	8001478 <_write+0x12>
	}
	return len;
 8001494:	687b      	ldr	r3, [r7, #4]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_close>:

int _close(int file)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
	return -1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c6:	605a      	str	r2, [r3, #4]
	return 0;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_isatty>:

int _isatty(int file)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
	return 1;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
	return 0;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001510:	4a14      	ldr	r2, [pc, #80]	; (8001564 <_sbrk+0x5c>)
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <_sbrk+0x60>)
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <_sbrk+0x64>)
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <_sbrk+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	429a      	cmp	r2, r3
 8001536:	d207      	bcs.n	8001548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001538:	f003 ff42 	bl	80053c0 <__errno>
 800153c:	4603      	mov	r3, r0
 800153e:	220c      	movs	r2, #12
 8001540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001546:	e009      	b.n	800155c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <_sbrk+0x64>)
 8001558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155a:	68fb      	ldr	r3, [r7, #12]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20010000 	.word	0x20010000
 8001568:	00000400 	.word	0x00000400
 800156c:	20000258 	.word	0x20000258
 8001570:	2000a428 	.word	0x2000a428

08001574 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <SystemInit+0x20>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <SystemInit+0x20>)
 8001580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800159c:	f7ff ffea 	bl	8001574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015a2:	490d      	ldr	r1, [pc, #52]	; (80015d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <LoopForever+0xe>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b8:	4c0a      	ldr	r4, [pc, #40]	; (80015e4 <LoopForever+0x16>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c6:	f003 ff01 	bl	80053cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ca:	f7ff fb79 	bl	8000cc0 <main>

080015ce <LoopForever>:

LoopForever:
    b LoopForever
 80015ce:	e7fe      	b.n	80015ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 80015dc:	0800820c 	.word	0x0800820c
  ldr r2, =_sbss
 80015e0:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 80015e4:	2000a428 	.word	0x2000a428

080015e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC1_IRQHandler>

080015ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f001 f9f9 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015fa:	200f      	movs	r0, #15
 80015fc:	f000 f80e 	bl	800161c <HAL_InitTick>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	71fb      	strb	r3, [r7, #7]
 800160a:	e001      	b.n	8001610 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800160c:	f7ff fd40 	bl	8001090 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001610:	79fb      	ldrb	r3, [r7, #7]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_InitTick+0x6c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d023      	beq.n	8001678 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_InitTick+0x70>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_InitTick+0x6c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f001 fa05 	bl	8002a56 <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10f      	bne.n	8001672 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d809      	bhi.n	800166c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001660:	f001 f9cf 	bl	8002a02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_InitTick+0x74>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e007      	b.n	800167c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e004      	b.n	800167c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	e001      	b.n	800167c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000005c 	.word	0x2000005c
 800168c:	20000054 	.word	0x20000054
 8001690:	20000058 	.word	0x20000058

08001694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_IncTick+0x20>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_IncTick+0x24>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <HAL_IncTick+0x24>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	2000005c 	.word	0x2000005c
 80016b8:	2000a414 	.word	0x2000a414

080016bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_GetTick+0x14>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	2000a414 	.word	0x2000a414

080016d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff ffee 	bl	80016bc <HAL_GetTick>
 80016e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016ec:	d005      	beq.n	80016fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_Delay+0x44>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016fa:	bf00      	nop
 80016fc:	f7ff ffde 	bl	80016bc <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	d8f7      	bhi.n	80016fc <HAL_Delay+0x28>
  {
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000005c 	.word	0x2000005c

0800171c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	609a      	str	r2, [r3, #8]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3360      	adds	r3, #96	; 0x60
 8001796:	461a      	mov	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <LL_ADC_SetOffset+0x44>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	4313      	orrs	r3, r2
 80017b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017bc:	bf00      	nop
 80017be:	371c      	adds	r7, #28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	03fff000 	.word	0x03fff000

080017cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3360      	adds	r3, #96	; 0x60
 80017da:	461a      	mov	r2, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3360      	adds	r3, #96	; 0x60
 8001808:	461a      	mov	r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	431a      	orrs	r2, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001822:	bf00      	nop
 8001824:	371c      	adds	r7, #28
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3330      	adds	r3, #48	; 0x30
 8001864:	461a      	mov	r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	4413      	add	r3, r2
 8001872:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	f003 031f 	and.w	r3, r3, #31
 800187e:	211f      	movs	r1, #31
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	401a      	ands	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	0e9b      	lsrs	r3, r3, #26
 800188c:	f003 011f 	and.w	r1, r3, #31
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	431a      	orrs	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018a0:	bf00      	nop
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	3314      	adds	r3, #20
 80018bc:	461a      	mov	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	0e5b      	lsrs	r3, r3, #25
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	4413      	add	r3, r2
 80018ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	0d1b      	lsrs	r3, r3, #20
 80018d4:	f003 031f 	and.w	r3, r3, #31
 80018d8:	2107      	movs	r1, #7
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	401a      	ands	r2, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	0d1b      	lsrs	r3, r3, #20
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	431a      	orrs	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018f6:	bf00      	nop
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800191c:	43db      	mvns	r3, r3
 800191e:	401a      	ands	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0318 	and.w	r3, r3, #24
 8001926:	4908      	ldr	r1, [pc, #32]	; (8001948 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001928:	40d9      	lsrs	r1, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	400b      	ands	r3, r1
 800192e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001932:	431a      	orrs	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	0007ffff 	.word	0x0007ffff

0800194c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800195c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6093      	str	r3, [r2, #8]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001984:	d101      	bne.n	800198a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019d4:	d101      	bne.n	80019da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019fc:	f043 0201 	orr.w	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <LL_ADC_IsEnabled+0x18>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <LL_ADC_IsEnabled+0x1a>
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a4a:	f043 0204 	orr.w	r2, r3, #4
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d101      	bne.n	8001a76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d101      	bne.n	8001a9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e12c      	b.n	8001d20 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d109      	bne.n	8001ae8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff faff 	bl	80010d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff3f 	bl	8001970 <LL_ADC_IsDeepPowerDownEnabled>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff25 	bl	800194c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ff5a 	bl	80019c0 <LL_ADC_IsInternalRegulatorEnabled>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d115      	bne.n	8001b3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff3e 	bl	8001998 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b1c:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <HAL_ADC_Init+0x27c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	099b      	lsrs	r3, r3, #6
 8001b22:	4a82      	ldr	r2, [pc, #520]	; (8001d2c <HAL_ADC_Init+0x280>)
 8001b24:	fba2 2303 	umull	r2, r3, r2, r3
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b30:	e002      	b.n	8001b38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f9      	bne.n	8001b32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff3c 	bl	80019c0 <LL_ADC_IsInternalRegulatorEnabled>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10d      	bne.n	8001b6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	f043 0210 	orr.w	r2, r3, #16
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5e:	f043 0201 	orr.w	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff75 	bl	8001a5e <LL_ADC_REG_IsConversionOngoing>
 8001b74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 80c5 	bne.w	8001d0e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 80c1 	bne.w	8001d0e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b94:	f043 0202 	orr.w	r2, r3, #2
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff35 	bl	8001a10 <LL_ADC_IsEnabled>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10b      	bne.n	8001bc4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bac:	4860      	ldr	r0, [pc, #384]	; (8001d30 <HAL_ADC_Init+0x284>)
 8001bae:	f7ff ff2f 	bl	8001a10 <LL_ADC_IsEnabled>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d105      	bne.n	8001bc4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	485d      	ldr	r0, [pc, #372]	; (8001d34 <HAL_ADC_Init+0x288>)
 8001bc0:	f7ff fdac 	bl	800171c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7e5b      	ldrb	r3, [r3, #25]
 8001bc8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001bd4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001bda:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d106      	bne.n	8001c00 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	045b      	lsls	r3, r3, #17
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d009      	beq.n	8001c1c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	4b45      	ldr	r3, [pc, #276]	; (8001d38 <HAL_ADC_Init+0x28c>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	69b9      	ldr	r1, [r7, #24]
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff12 	bl	8001a5e <LL_ADC_REG_IsConversionOngoing>
 8001c3a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff1f 	bl	8001a84 <LL_ADC_INJ_IsConversionOngoing>
 8001c46:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d13d      	bne.n	8001cca <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d13a      	bne.n	8001cca <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c58:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c60:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c70:	f023 0302 	bic.w	r3, r3, #2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	69b9      	ldr	r1, [r7, #24]
 8001c7a:	430b      	orrs	r3, r1
 8001c7c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d118      	bne.n	8001cba <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c92:	f023 0304 	bic.w	r3, r3, #4
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ca4:	4311      	orrs	r1, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001caa:	430a      	orrs	r2, r1
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	611a      	str	r2, [r3, #16]
 8001cb8:	e007      	b.n	8001cca <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10c      	bne.n	8001cec <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	f023 010f 	bic.w	r1, r3, #15
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	1e5a      	subs	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8001cea:	e007      	b.n	8001cfc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 020f 	bic.w	r2, r2, #15
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	f023 0303 	bic.w	r3, r3, #3
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
 8001d0c:	e007      	b.n	8001d1e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	f043 0210 	orr.w	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3720      	adds	r7, #32
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000054 	.word	0x20000054
 8001d2c:	053e2d63 	.word	0x053e2d63
 8001d30:	50040000 	.word	0x50040000
 8001d34:	50040300 	.word	0x50040300
 8001d38:	fff0c007 	.word	0xfff0c007

08001d3c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fe86 	bl	8001a5e <LL_ADC_REG_IsConversionOngoing>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d167      	bne.n	8001e28 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_Start_DMA+0x2a>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e063      	b.n	8001e2e <HAL_ADC_Start_DMA+0xf2>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 fc52 	bl	8002618 <ADC_Enable>
 8001d74:	4603      	mov	r3, r0
 8001d76:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d14f      	bne.n	8001e1e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d006      	beq.n	8001dac <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	f023 0206 	bic.w	r2, r3, #6
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	659a      	str	r2, [r3, #88]	; 0x58
 8001daa:	e002      	b.n	8001db2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	4a20      	ldr	r2, [pc, #128]	; (8001e38 <HAL_ADC_Start_DMA+0xfc>)
 8001db8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <HAL_ADC_Start_DMA+0x100>)
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <HAL_ADC_Start_DMA+0x104>)
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	221c      	movs	r2, #28
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0210 	orr.w	r2, r2, #16
 8001de8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3340      	adds	r3, #64	; 0x40
 8001e04:	4619      	mov	r1, r3
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f001 f999 	bl	8003140 <HAL_DMA_Start_IT>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fe0d 	bl	8001a36 <LL_ADC_REG_StartConversion>
 8001e1c:	e006      	b.n	8001e2c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e26:	e001      	b.n	8001e2c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	08002725 	.word	0x08002725
 8001e3c:	080027fd 	.word	0x080027fd
 8001e40:	08002819 	.word	0x08002819

08001e44 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0b6      	sub	sp, #216	; 0xd8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x22>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e3b9      	b.n	80025ee <HAL_ADC_ConfigChannel+0x796>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fde9 	bl	8001a5e <LL_ADC_REG_IsConversionOngoing>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 839e 	bne.w	80025d0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b05      	cmp	r3, #5
 8001e9a:	d824      	bhi.n	8001ee6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	3b02      	subs	r3, #2
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d81b      	bhi.n	8001ede <HAL_ADC_ConfigChannel+0x86>
 8001ea6:	a201      	add	r2, pc, #4	; (adr r2, 8001eac <HAL_ADC_ConfigChannel+0x54>)
 8001ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eac:	08001ebd 	.word	0x08001ebd
 8001eb0:	08001ec5 	.word	0x08001ec5
 8001eb4:	08001ecd 	.word	0x08001ecd
 8001eb8:	08001ed5 	.word	0x08001ed5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	605a      	str	r2, [r3, #4]
          break;
 8001ec2:	e011      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2212      	movs	r2, #18
 8001ec8:	605a      	str	r2, [r3, #4]
          break;
 8001eca:	e00d      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2218      	movs	r2, #24
 8001ed0:	605a      	str	r2, [r3, #4]
          break;
 8001ed2:	e009      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eda:	605a      	str	r2, [r3, #4]
          break;
 8001edc:	e004      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2206      	movs	r2, #6
 8001ee2:	605a      	str	r2, [r3, #4]
          break;
 8001ee4:	e000      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ee6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f7ff fcad 	bl	8001854 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fdad 	bl	8001a5e <LL_ADC_REG_IsConversionOngoing>
 8001f04:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fdb9 	bl	8001a84 <LL_ADC_INJ_IsConversionOngoing>
 8001f12:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 81a6 	bne.w	800226c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f040 81a1 	bne.w	800226c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6819      	ldr	r1, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f7ff fcb8 	bl	80018ac <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	08db      	lsrs	r3, r3, #3
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d00a      	beq.n	8001f74 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	6919      	ldr	r1, [r3, #16]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f6e:	f7ff fc09 	bl	8001784 <LL_ADC_SetOffset>
 8001f72:	e17b      	b.n	800226c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fc26 	bl	80017cc <LL_ADC_GetOffsetChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10a      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x148>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fc1b 	bl	80017cc <LL_ADC_GetOffsetChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	0e9b      	lsrs	r3, r3, #26
 8001f9a:	f003 021f 	and.w	r2, r3, #31
 8001f9e:	e01e      	b.n	8001fde <HAL_ADC_ConfigChannel+0x186>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fc10 	bl	80017cc <LL_ADC_GetOffsetChannel>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001fce:	2320      	movs	r3, #32
 8001fd0:	e004      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001fd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x19e>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	0e9b      	lsrs	r3, r3, #26
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	e018      	b.n	8002028 <HAL_ADC_ConfigChannel+0x1d0>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800200a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800200e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002012:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800201a:	2320      	movs	r3, #32
 800201c:	e004      	b.n	8002028 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800201e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002028:	429a      	cmp	r2, r3
 800202a:	d106      	bne.n	800203a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2200      	movs	r2, #0
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fbdf 	bl	80017f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2101      	movs	r1, #1
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fbc3 	bl	80017cc <LL_ADC_GetOffsetChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10a      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x20e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fbb8 	bl	80017cc <LL_ADC_GetOffsetChannel>
 800205c:	4603      	mov	r3, r0
 800205e:	0e9b      	lsrs	r3, r3, #26
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	e01e      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x24c>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2101      	movs	r1, #1
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fbad 	bl	80017cc <LL_ADC_GetOffsetChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002084:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002088:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800208c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002094:	2320      	movs	r3, #32
 8002096:	e004      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d105      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x264>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0e9b      	lsrs	r3, r3, #26
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	e018      	b.n	80020ee <HAL_ADC_ConfigChannel+0x296>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80020d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80020d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e004      	b.n	80020ee <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80020e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d106      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	2101      	movs	r1, #1
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fb7c 	bl	80017f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2102      	movs	r1, #2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fb60 	bl	80017cc <LL_ADC_GetOffsetChannel>
 800210c:	4603      	mov	r3, r0
 800210e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10a      	bne.n	800212c <HAL_ADC_ConfigChannel+0x2d4>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2102      	movs	r1, #2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fb55 	bl	80017cc <LL_ADC_GetOffsetChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	0e9b      	lsrs	r3, r3, #26
 8002126:	f003 021f 	and.w	r2, r3, #31
 800212a:	e01e      	b.n	800216a <HAL_ADC_ConfigChannel+0x312>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2102      	movs	r1, #2
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fb4a 	bl	80017cc <LL_ADC_GetOffsetChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800214a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800214e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002152:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800215a:	2320      	movs	r3, #32
 800215c:	e004      	b.n	8002168 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800215e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002172:	2b00      	cmp	r3, #0
 8002174:	d105      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x32a>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	0e9b      	lsrs	r3, r3, #26
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	e016      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x358>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002194:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002196:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800219a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80021a2:	2320      	movs	r3, #32
 80021a4:	e004      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80021a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d106      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2200      	movs	r2, #0
 80021ba:	2102      	movs	r1, #2
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fb1b 	bl	80017f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2103      	movs	r1, #3
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff faff 	bl	80017cc <LL_ADC_GetOffsetChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10a      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x396>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2103      	movs	r1, #3
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff faf4 	bl	80017cc <LL_ADC_GetOffsetChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	0e9b      	lsrs	r3, r3, #26
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	e017      	b.n	800221e <HAL_ADC_ConfigChannel+0x3c6>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2103      	movs	r1, #3
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fae9 	bl	80017cc <LL_ADC_GetOffsetChannel>
 80021fa:	4603      	mov	r3, r0
 80021fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002208:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800220a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002210:	2320      	movs	r3, #32
 8002212:	e003      	b.n	800221c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x3de>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	0e9b      	lsrs	r3, r3, #26
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	e011      	b.n	800225a <HAL_ADC_ConfigChannel+0x402>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002246:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800224e:	2320      	movs	r3, #32
 8002250:	e003      	b.n	800225a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800225a:	429a      	cmp	r2, r3
 800225c:	d106      	bne.n	800226c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2200      	movs	r2, #0
 8002264:	2103      	movs	r1, #3
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fac6 	bl	80017f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fbcd 	bl	8001a10 <LL_ADC_IsEnabled>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 813f 	bne.w	80024fc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6819      	ldr	r1, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	461a      	mov	r2, r3
 800228c:	f7ff fb3a 	bl	8001904 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a8e      	ldr	r2, [pc, #568]	; (80024d0 <HAL_ADC_ConfigChannel+0x678>)
 8002296:	4293      	cmp	r3, r2
 8002298:	f040 8130 	bne.w	80024fc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10b      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x46c>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0e9b      	lsrs	r3, r3, #26
 80022b2:	3301      	adds	r3, #1
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	2b09      	cmp	r3, #9
 80022ba:	bf94      	ite	ls
 80022bc:	2301      	movls	r3, #1
 80022be:	2300      	movhi	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e019      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x4a0>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80022dc:	2320      	movs	r3, #32
 80022de:	e003      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80022e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	3301      	adds	r3, #1
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	2b09      	cmp	r3, #9
 80022f0:	bf94      	ite	ls
 80022f2:	2301      	movls	r3, #1
 80022f4:	2300      	movhi	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d079      	beq.n	80023f0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002304:	2b00      	cmp	r3, #0
 8002306:	d107      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x4c0>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0e9b      	lsrs	r3, r3, #26
 800230e:	3301      	adds	r3, #1
 8002310:	069b      	lsls	r3, r3, #26
 8002312:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002316:	e015      	b.n	8002344 <HAL_ADC_ConfigChannel+0x4ec>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002328:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800232a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002330:	2320      	movs	r3, #32
 8002332:	e003      	b.n	800233c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	3301      	adds	r3, #1
 800233e:	069b      	lsls	r3, r3, #26
 8002340:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x50c>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	3301      	adds	r3, #1
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	2101      	movs	r1, #1
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	e017      	b.n	8002394 <HAL_ADC_ConfigChannel+0x53c>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002374:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800237c:	2320      	movs	r3, #32
 800237e:	e003      	b.n	8002388 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	3301      	adds	r3, #1
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	2101      	movs	r1, #1
 8002390:	fa01 f303 	lsl.w	r3, r1, r3
 8002394:	ea42 0103 	orr.w	r1, r2, r3
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10a      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x562>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	0e9b      	lsrs	r3, r3, #26
 80023aa:	3301      	adds	r3, #1
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	051b      	lsls	r3, r3, #20
 80023b8:	e018      	b.n	80023ec <HAL_ADC_ConfigChannel+0x594>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80023cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80023d2:	2320      	movs	r3, #32
 80023d4:	e003      	b.n	80023de <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80023d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ec:	430b      	orrs	r3, r1
 80023ee:	e080      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d107      	bne.n	800240c <HAL_ADC_ConfigChannel+0x5b4>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0e9b      	lsrs	r3, r3, #26
 8002402:	3301      	adds	r3, #1
 8002404:	069b      	lsls	r3, r3, #26
 8002406:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800240a:	e015      	b.n	8002438 <HAL_ADC_ConfigChannel+0x5e0>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002424:	2320      	movs	r3, #32
 8002426:	e003      	b.n	8002430 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	3301      	adds	r3, #1
 8002432:	069b      	lsls	r3, r3, #26
 8002434:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x600>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	3301      	adds	r3, #1
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	2101      	movs	r1, #1
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	e017      	b.n	8002488 <HAL_ADC_ConfigChannel+0x630>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	61fb      	str	r3, [r7, #28]
  return result;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002470:	2320      	movs	r3, #32
 8002472:	e003      	b.n	800247c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3301      	adds	r3, #1
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	2101      	movs	r1, #1
 8002484:	fa01 f303 	lsl.w	r3, r1, r3
 8002488:	ea42 0103 	orr.w	r1, r2, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10d      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x65c>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0e9b      	lsrs	r3, r3, #26
 800249e:	3301      	adds	r3, #1
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4613      	mov	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	3b1e      	subs	r3, #30
 80024ac:	051b      	lsls	r3, r3, #20
 80024ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024b2:	e01d      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x698>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	613b      	str	r3, [r7, #16]
  return result;
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d103      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80024cc:	2320      	movs	r3, #32
 80024ce:	e005      	b.n	80024dc <HAL_ADC_ConfigChannel+0x684>
 80024d0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	f003 021f 	and.w	r2, r3, #31
 80024e2:	4613      	mov	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	3b1e      	subs	r3, #30
 80024ea:	051b      	lsls	r3, r3, #20
 80024ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f0:	430b      	orrs	r3, r1
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	6892      	ldr	r2, [r2, #8]
 80024f6:	4619      	mov	r1, r3
 80024f8:	f7ff f9d8 	bl	80018ac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_ADC_ConfigChannel+0x7a0>)
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d06c      	beq.n	80025e2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002508:	483c      	ldr	r0, [pc, #240]	; (80025fc <HAL_ADC_ConfigChannel+0x7a4>)
 800250a:	f7ff f92d 	bl	8001768 <LL_ADC_GetCommonPathInternalCh>
 800250e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a3a      	ldr	r2, [pc, #232]	; (8002600 <HAL_ADC_ConfigChannel+0x7a8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d127      	bne.n	800256c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800251c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d121      	bne.n	800256c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a35      	ldr	r2, [pc, #212]	; (8002604 <HAL_ADC_ConfigChannel+0x7ac>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d157      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002532:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002536:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800253a:	4619      	mov	r1, r3
 800253c:	482f      	ldr	r0, [pc, #188]	; (80025fc <HAL_ADC_ConfigChannel+0x7a4>)
 800253e:	f7ff f900 	bl	8001742 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002542:	4b31      	ldr	r3, [pc, #196]	; (8002608 <HAL_ADC_ConfigChannel+0x7b0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	099b      	lsrs	r3, r3, #6
 8002548:	4a30      	ldr	r2, [pc, #192]	; (800260c <HAL_ADC_ConfigChannel+0x7b4>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	099b      	lsrs	r3, r3, #6
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800255c:	e002      	b.n	8002564 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3b01      	subs	r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f9      	bne.n	800255e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800256a:	e03a      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a27      	ldr	r2, [pc, #156]	; (8002610 <HAL_ADC_ConfigChannel+0x7b8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d113      	bne.n	800259e <HAL_ADC_ConfigChannel+0x746>
 8002576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800257a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10d      	bne.n	800259e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a1f      	ldr	r2, [pc, #124]	; (8002604 <HAL_ADC_ConfigChannel+0x7ac>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d12a      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800258c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002590:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002594:	4619      	mov	r1, r3
 8002596:	4819      	ldr	r0, [pc, #100]	; (80025fc <HAL_ADC_ConfigChannel+0x7a4>)
 8002598:	f7ff f8d3 	bl	8001742 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800259c:	e021      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_ADC_ConfigChannel+0x7bc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d11c      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d116      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a12      	ldr	r2, [pc, #72]	; (8002604 <HAL_ADC_ConfigChannel+0x7ac>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d111      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025c6:	4619      	mov	r1, r3
 80025c8:	480c      	ldr	r0, [pc, #48]	; (80025fc <HAL_ADC_ConfigChannel+0x7a4>)
 80025ca:	f7ff f8ba 	bl	8001742 <LL_ADC_SetCommonPathInternalCh>
 80025ce:	e008      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	f043 0220 	orr.w	r2, r3, #32
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	37d8      	adds	r7, #216	; 0xd8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	80080000 	.word	0x80080000
 80025fc:	50040300 	.word	0x50040300
 8002600:	c7520000 	.word	0xc7520000
 8002604:	50040000 	.word	0x50040000
 8002608:	20000054 	.word	0x20000054
 800260c:	053e2d63 	.word	0x053e2d63
 8002610:	cb840000 	.word	0xcb840000
 8002614:	80000001 	.word	0x80000001

08002618 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002620:	2300      	movs	r3, #0
 8002622:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff f9f1 	bl	8001a10 <LL_ADC_IsEnabled>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d169      	bne.n	8002708 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	4b36      	ldr	r3, [pc, #216]	; (8002714 <ADC_Enable+0xfc>)
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	f043 0210 	orr.w	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e055      	b.n	800270a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff f9c0 	bl	80019e8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002668:	482b      	ldr	r0, [pc, #172]	; (8002718 <ADC_Enable+0x100>)
 800266a:	f7ff f87d 	bl	8001768 <LL_ADC_GetCommonPathInternalCh>
 800266e:	4603      	mov	r3, r0
 8002670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002678:	4b28      	ldr	r3, [pc, #160]	; (800271c <ADC_Enable+0x104>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	4a28      	ldr	r2, [pc, #160]	; (8002720 <ADC_Enable+0x108>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	099b      	lsrs	r3, r3, #6
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002692:	e002      	b.n	800269a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	3b01      	subs	r3, #1
 8002698:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f9      	bne.n	8002694 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026a0:	f7ff f80c 	bl	80016bc <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026a6:	e028      	b.n	80026fa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff f9af 	bl	8001a10 <LL_ADC_IsEnabled>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d104      	bne.n	80026c2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff f993 	bl	80019e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026c2:	f7fe fffb 	bl	80016bc <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d914      	bls.n	80026fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d00d      	beq.n	80026fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	f043 0210 	orr.w	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e007      	b.n	800270a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	d1cf      	bne.n	80026a8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	8000003f 	.word	0x8000003f
 8002718:	50040300 	.word	0x50040300
 800271c:	20000054 	.word	0x20000054
 8002720:	053e2d63 	.word	0x053e2d63

08002724 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800273a:	2b00      	cmp	r3, #0
 800273c:	d14b      	bne.n	80027d6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002742:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d021      	beq.n	800279c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff f866 	bl	800182e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d032      	beq.n	80027ce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d12b      	bne.n	80027ce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d11f      	bne.n	80027ce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	f043 0201 	orr.w	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	655a      	str	r2, [r3, #84]	; 0x54
 800279a:	e018      	b.n	80027ce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d111      	bne.n	80027ce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d105      	bne.n	80027ce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	f043 0201 	orr.w	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f7fe fa08 	bl	8000be4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027d4:	e00e      	b.n	80027f4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7ff fb2e 	bl	8001e44 <HAL_ADC_ErrorCallback>
}
 80027e8:	e004      	b.n	80027f4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f7fe f9cc 	bl	8000ba8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	f043 0204 	orr.w	r2, r3, #4
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff fb00 	bl	8001e44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287e:	4a04      	ldr	r2, [pc, #16]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	60d3      	str	r3, [r2, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029cc:	f7ff ff8e 	bl	80028ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff29 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a14:	f7ff ff3e 	bl	8002894 <__NVIC_GetPriorityGrouping>
 8002a18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff8e 	bl	8002940 <NVIC_EncodePriority>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5d 	bl	80028ec <__NVIC_SetPriority>
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff31 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffa2 	bl	80029a8 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e014      	b.n	8002aaa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	791b      	ldrb	r3, [r3, #4]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d105      	bne.n	8002a96 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7fe fbb5 	bl	8001200 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	795b      	ldrb	r3, [r3, #5]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_DAC_Start_DMA+0x1e>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e0ab      	b.n	8002c2a <HAL_DAC_Start_DMA+0x176>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2202      	movs	r2, #2
 8002adc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d12f      	bne.n	8002b44 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a52      	ldr	r2, [pc, #328]	; (8002c34 <HAL_DAC_Start_DMA+0x180>)
 8002aea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4a51      	ldr	r2, [pc, #324]	; (8002c38 <HAL_DAC_Start_DMA+0x184>)
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4a50      	ldr	r2, [pc, #320]	; (8002c3c <HAL_DAC_Start_DMA+0x188>)
 8002afa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b0a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d013      	beq.n	8002b3a <HAL_DAC_Start_DMA+0x86>
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d845      	bhi.n	8002ba4 <HAL_DAC_Start_DMA+0xf0>
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_DAC_Start_DMA+0x72>
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d005      	beq.n	8002b30 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002b24:	e03e      	b.n	8002ba4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	613b      	str	r3, [r7, #16]
        break;
 8002b2e:	e03c      	b.n	8002baa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	613b      	str	r3, [r7, #16]
        break;
 8002b38:	e037      	b.n	8002baa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3310      	adds	r3, #16
 8002b40:	613b      	str	r3, [r7, #16]
        break;
 8002b42:	e032      	b.n	8002baa <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4a3d      	ldr	r2, [pc, #244]	; (8002c40 <HAL_DAC_Start_DMA+0x18c>)
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a3c      	ldr	r2, [pc, #240]	; (8002c44 <HAL_DAC_Start_DMA+0x190>)
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a3b      	ldr	r2, [pc, #236]	; (8002c48 <HAL_DAC_Start_DMA+0x194>)
 8002b5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d013      	beq.n	8002b9a <HAL_DAC_Start_DMA+0xe6>
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d817      	bhi.n	8002ba8 <HAL_DAC_Start_DMA+0xf4>
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_DAC_Start_DMA+0xd2>
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d005      	beq.n	8002b90 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002b84:	e010      	b.n	8002ba8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3314      	adds	r3, #20
 8002b8c:	613b      	str	r3, [r7, #16]
        break;
 8002b8e:	e00c      	b.n	8002baa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3318      	adds	r3, #24
 8002b96:	613b      	str	r3, [r7, #16]
        break;
 8002b98:	e007      	b.n	8002baa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	331c      	adds	r3, #28
 8002ba0:	613b      	str	r3, [r7, #16]
        break;
 8002ba2:	e002      	b.n	8002baa <HAL_DAC_Start_DMA+0xf6>
        break;
 8002ba4:	bf00      	nop
 8002ba6:	e000      	b.n	8002baa <HAL_DAC_Start_DMA+0xf6>
        break;
 8002ba8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d111      	bne.n	8002bd4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bbe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6898      	ldr	r0, [r3, #8]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	f000 fab9 	bl	8003140 <HAL_DMA_Start_IT>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	75fb      	strb	r3, [r7, #23]
 8002bd2:	e010      	b.n	8002bf6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002be2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	68d8      	ldr	r0, [r3, #12]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	f000 faa7 	bl	8003140 <HAL_DMA_Start_IT>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10c      	bne.n	8002c1c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6819      	ldr	r1, [r3, #0]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2201      	movs	r2, #1
 8002c10:	409a      	lsls	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e005      	b.n	8002c28 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f043 0204 	orr.w	r2, r3, #4
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	08002ebd 	.word	0x08002ebd
 8002c38:	08002edf 	.word	0x08002edf
 8002c3c:	08002efb 	.word	0x08002efb
 8002c40:	08002f65 	.word	0x08002f65
 8002c44:	08002f87 	.word	0x08002f87
 8002c48:	08002fa3 	.word	0x08002fa3

08002c4c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	795b      	ldrb	r3, [r3, #5]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_DAC_ConfigChannel+0x1c>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e107      	b.n	8002eb4 <HAL_DAC_ConfigChannel+0x22c>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2202      	movs	r2, #2
 8002cae:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d174      	bne.n	8002da2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002cb8:	f7fe fd00 	bl	80016bc <HAL_GetTick>
 8002cbc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d134      	bne.n	8002d2e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cc4:	e011      	b.n	8002cea <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cc6:	f7fe fcf9 	bl	80016bc <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d90a      	bls.n	8002cea <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	f043 0208 	orr.w	r2, r3, #8
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e0e4      	b.n	8002eb4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e6      	bne.n	8002cc6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f7fe fceb 	bl	80016d4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	6992      	ldr	r2, [r2, #24]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
 8002d08:	e01e      	b.n	8002d48 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d0a:	f7fe fcd7 	bl	80016bc <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d90a      	bls.n	8002d2e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f043 0208 	orr.w	r2, r3, #8
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2203      	movs	r2, #3
 8002d28:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e0c2      	b.n	8002eb4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	dbe8      	blt.n	8002d0a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002d38:	2001      	movs	r0, #1
 8002d3a:	f7fe fccb 	bl	80016d4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	6992      	ldr	r2, [r2, #24]
 8002d46:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002d58:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	ea02 0103 	and.w	r1, r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	21ff      	movs	r1, #255	; 0xff
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	ea02 0103 	and.w	r1, r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	6a1a      	ldr	r2, [r3, #32]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d11d      	bne.n	8002de6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	221f      	movs	r2, #31
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dec:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2207      	movs	r2, #7
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6819      	ldr	r1, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	400a      	ands	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6819      	ldr	r1, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	22c0      	movs	r2, #192	; 0xc0
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	400a      	ands	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f7ff febe 	bl	8002c4c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	711a      	strb	r2, [r3, #4]
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f7ff feb7 	bl	8002c60 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f043 0204 	orr.w	r2, r3, #4
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff fead 	bl	8002c74 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	711a      	strb	r2, [r3, #4]
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f7ff ffd8 	bl	8002f28 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	711a      	strb	r2, [r3, #4]
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7ff ffd1 	bl	8002f3c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f043 0204 	orr.w	r2, r3, #4
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff ffc7 	bl	8002f50 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	711a      	strb	r2, [r3, #4]
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e098      	b.n	8003114 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b4d      	ldr	r3, [pc, #308]	; (8003120 <HAL_DMA_Init+0x150>)
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d80f      	bhi.n	800300e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b4b      	ldr	r3, [pc, #300]	; (8003124 <HAL_DMA_Init+0x154>)
 8002ff6:	4413      	add	r3, r2
 8002ff8:	4a4b      	ldr	r2, [pc, #300]	; (8003128 <HAL_DMA_Init+0x158>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	009a      	lsls	r2, r3, #2
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a48      	ldr	r2, [pc, #288]	; (800312c <HAL_DMA_Init+0x15c>)
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
 800300c:	e00e      	b.n	800302c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	4b46      	ldr	r3, [pc, #280]	; (8003130 <HAL_DMA_Init+0x160>)
 8003016:	4413      	add	r3, r2
 8003018:	4a43      	ldr	r2, [pc, #268]	; (8003128 <HAL_DMA_Init+0x158>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	009a      	lsls	r2, r3, #2
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a42      	ldr	r2, [pc, #264]	; (8003134 <HAL_DMA_Init+0x164>)
 800302a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003046:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003050:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800305c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003068:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003086:	d039      	beq.n	80030fc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	4a27      	ldr	r2, [pc, #156]	; (800312c <HAL_DMA_Init+0x15c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d11a      	bne.n	80030c8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003092:	4b29      	ldr	r3, [pc, #164]	; (8003138 <HAL_DMA_Init+0x168>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	f003 031c 	and.w	r3, r3, #28
 800309e:	210f      	movs	r1, #15
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	4924      	ldr	r1, [pc, #144]	; (8003138 <HAL_DMA_Init+0x168>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030ac:	4b22      	ldr	r3, [pc, #136]	; (8003138 <HAL_DMA_Init+0x168>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6859      	ldr	r1, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	f003 031c 	and.w	r3, r3, #28
 80030bc:	fa01 f303 	lsl.w	r3, r1, r3
 80030c0:	491d      	ldr	r1, [pc, #116]	; (8003138 <HAL_DMA_Init+0x168>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]
 80030c6:	e019      	b.n	80030fc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030c8:	4b1c      	ldr	r3, [pc, #112]	; (800313c <HAL_DMA_Init+0x16c>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d0:	f003 031c 	and.w	r3, r3, #28
 80030d4:	210f      	movs	r1, #15
 80030d6:	fa01 f303 	lsl.w	r3, r1, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	4917      	ldr	r1, [pc, #92]	; (800313c <HAL_DMA_Init+0x16c>)
 80030de:	4013      	ands	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030e2:	4b16      	ldr	r3, [pc, #88]	; (800313c <HAL_DMA_Init+0x16c>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6859      	ldr	r1, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	f003 031c 	and.w	r3, r3, #28
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	4911      	ldr	r1, [pc, #68]	; (800313c <HAL_DMA_Init+0x16c>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	40020407 	.word	0x40020407
 8003124:	bffdfff8 	.word	0xbffdfff8
 8003128:	cccccccd 	.word	0xcccccccd
 800312c:	40020000 	.word	0x40020000
 8003130:	bffdfbf8 	.word	0xbffdfbf8
 8003134:	40020400 	.word	0x40020400
 8003138:	400200a8 	.word	0x400200a8
 800313c:	400204a8 	.word	0x400204a8

08003140 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_DMA_Start_IT+0x20>
 800315c:	2302      	movs	r3, #2
 800315e:	e04b      	b.n	80031f8 <HAL_DMA_Start_IT+0xb8>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d13a      	bne.n	80031ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f8e0 	bl	800335e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 020e 	orr.w	r2, r2, #14
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e00f      	b.n	80031d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0204 	bic.w	r2, r2, #4
 80031c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 020a 	orr.w	r2, r2, #10
 80031d6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	e005      	b.n	80031f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
 80031f4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321c:	f003 031c 	and.w	r3, r3, #28
 8003220:	2204      	movs	r2, #4
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d026      	beq.n	800327a <HAL_DMA_IRQHandler+0x7a>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d021      	beq.n	800327a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0204 	bic.w	r2, r2, #4
 8003252:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003258:	f003 021c 	and.w	r2, r3, #28
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	2104      	movs	r1, #4
 8003262:	fa01 f202 	lsl.w	r2, r1, r2
 8003266:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	2b00      	cmp	r3, #0
 800326e:	d071      	beq.n	8003354 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003278:	e06c      	b.n	8003354 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f003 031c 	and.w	r3, r3, #28
 8003282:	2202      	movs	r2, #2
 8003284:	409a      	lsls	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d02e      	beq.n	80032ec <HAL_DMA_IRQHandler+0xec>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d029      	beq.n	80032ec <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10b      	bne.n	80032be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 020a 	bic.w	r2, r2, #10
 80032b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	f003 021c 	and.w	r2, r3, #28
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	2102      	movs	r1, #2
 80032cc:	fa01 f202 	lsl.w	r2, r1, r2
 80032d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d038      	beq.n	8003354 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032ea:	e033      	b.n	8003354 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	f003 031c 	and.w	r3, r3, #28
 80032f4:	2208      	movs	r2, #8
 80032f6:	409a      	lsls	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d02a      	beq.n	8003356 <HAL_DMA_IRQHandler+0x156>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d025      	beq.n	8003356 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 020e 	bic.w	r2, r2, #14
 8003318:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	f003 021c 	and.w	r2, r3, #28
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2101      	movs	r1, #1
 8003328:	fa01 f202 	lsl.w	r2, r1, r2
 800332c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003348:	2b00      	cmp	r3, #0
 800334a:	d004      	beq.n	8003356 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003354:	bf00      	nop
 8003356:	bf00      	nop
}
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800335e:	b480      	push	{r7}
 8003360:	b085      	sub	sp, #20
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	f003 021c 	and.w	r2, r3, #28
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	2101      	movs	r1, #1
 800337a:	fa01 f202 	lsl.w	r2, r1, r2
 800337e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b10      	cmp	r3, #16
 800338e:	d108      	bne.n	80033a2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033a0:	e007      	b.n	80033b2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	60da      	str	r2, [r3, #12]
}
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ce:	e154      	b.n	800367a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2101      	movs	r1, #1
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	4013      	ands	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8146 	beq.w	8003674 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d005      	beq.n	8003400 <HAL_GPIO_Init+0x40>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d130      	bne.n	8003462 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	2203      	movs	r2, #3
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003436:	2201      	movs	r2, #1
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 0201 	and.w	r2, r3, #1
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b03      	cmp	r3, #3
 800346c:	d017      	beq.n	800349e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2203      	movs	r2, #3
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d123      	bne.n	80034f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	08da      	lsrs	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3208      	adds	r2, #8
 80034b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	08da      	lsrs	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3208      	adds	r2, #8
 80034ec:	6939      	ldr	r1, [r7, #16]
 80034ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2203      	movs	r2, #3
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0203 	and.w	r2, r3, #3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80a0 	beq.w	8003674 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003534:	4b58      	ldr	r3, [pc, #352]	; (8003698 <HAL_GPIO_Init+0x2d8>)
 8003536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003538:	4a57      	ldr	r2, [pc, #348]	; (8003698 <HAL_GPIO_Init+0x2d8>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6613      	str	r3, [r2, #96]	; 0x60
 8003540:	4b55      	ldr	r3, [pc, #340]	; (8003698 <HAL_GPIO_Init+0x2d8>)
 8003542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800354c:	4a53      	ldr	r2, [pc, #332]	; (800369c <HAL_GPIO_Init+0x2dc>)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	3302      	adds	r3, #2
 8003554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	220f      	movs	r2, #15
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003576:	d019      	beq.n	80035ac <HAL_GPIO_Init+0x1ec>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a49      	ldr	r2, [pc, #292]	; (80036a0 <HAL_GPIO_Init+0x2e0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d013      	beq.n	80035a8 <HAL_GPIO_Init+0x1e8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a48      	ldr	r2, [pc, #288]	; (80036a4 <HAL_GPIO_Init+0x2e4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00d      	beq.n	80035a4 <HAL_GPIO_Init+0x1e4>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a47      	ldr	r2, [pc, #284]	; (80036a8 <HAL_GPIO_Init+0x2e8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d007      	beq.n	80035a0 <HAL_GPIO_Init+0x1e0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a46      	ldr	r2, [pc, #280]	; (80036ac <HAL_GPIO_Init+0x2ec>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <HAL_GPIO_Init+0x1dc>
 8003598:	2304      	movs	r3, #4
 800359a:	e008      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 800359c:	2307      	movs	r3, #7
 800359e:	e006      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035a0:	2303      	movs	r3, #3
 80035a2:	e004      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e002      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035ac:	2300      	movs	r3, #0
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	f002 0203 	and.w	r2, r2, #3
 80035b4:	0092      	lsls	r2, r2, #2
 80035b6:	4093      	lsls	r3, r2
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035be:	4937      	ldr	r1, [pc, #220]	; (800369c <HAL_GPIO_Init+0x2dc>)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	3302      	adds	r3, #2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035cc:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035f0:	4a2f      	ldr	r2, [pc, #188]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035f6:	4b2e      	ldr	r3, [pc, #184]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800361a:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003620:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	43db      	mvns	r3, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003644:	4a1a      	ldr	r2, [pc, #104]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800364a:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800366e:	4a10      	ldr	r2, [pc, #64]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	3301      	adds	r3, #1
 8003678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	f47f aea3 	bne.w	80033d0 <HAL_GPIO_Init+0x10>
  }
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	40021000 	.word	0x40021000
 800369c:	40010000 	.word	0x40010000
 80036a0:	48000400 	.word	0x48000400
 80036a4:	48000800 	.word	0x48000800
 80036a8:	48000c00 	.word	0x48000c00
 80036ac:	48001000 	.word	0x48001000
 80036b0:	40010400 	.word	0x40010400

080036b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	807b      	strh	r3, [r7, #2]
 80036c0:	4613      	mov	r3, r2
 80036c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c4:	787b      	ldrb	r3, [r7, #1]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036ca:	887a      	ldrh	r2, [r7, #2]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036d0:	e002      	b.n	80036d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036d2:	887a      	ldrh	r2, [r7, #2]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036f6:	887a      	ldrh	r2, [r7, #2]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4013      	ands	r3, r2
 80036fc:	041a      	lsls	r2, r3, #16
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	43d9      	mvns	r1, r3
 8003702:	887b      	ldrh	r3, [r7, #2]
 8003704:	400b      	ands	r3, r1
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	619a      	str	r2, [r3, #24]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800371c:	4b04      	ldr	r3, [pc, #16]	; (8003730 <HAL_PWREx_GetVoltageRange+0x18>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40007000 	.word	0x40007000

08003734 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003742:	d130      	bne.n	80037a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003744:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800374c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003750:	d038      	beq.n	80037c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800375a:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003760:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003762:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2232      	movs	r2, #50	; 0x32
 8003768:	fb02 f303 	mul.w	r3, r2, r3
 800376c:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	0c9b      	lsrs	r3, r3, #18
 8003774:	3301      	adds	r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003778:	e002      	b.n	8003780 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3b01      	subs	r3, #1
 800377e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003780:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378c:	d102      	bne.n	8003794 <HAL_PWREx_ControlVoltageScaling+0x60>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f2      	bne.n	800377a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003794:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a0:	d110      	bne.n	80037c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e00f      	b.n	80037c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b2:	d007      	beq.n	80037c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037b4:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037bc:	4a05      	ldr	r2, [pc, #20]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40007000 	.word	0x40007000
 80037d8:	20000054 	.word	0x20000054
 80037dc:	431bde83 	.word	0x431bde83

080037e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e3fe      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f2:	4ba1      	ldr	r3, [pc, #644]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037fc:	4b9e      	ldr	r3, [pc, #632]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80e4 	beq.w	80039dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <HAL_RCC_OscConfig+0x4a>
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	2b0c      	cmp	r3, #12
 800381e:	f040 808b 	bne.w	8003938 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b01      	cmp	r3, #1
 8003826:	f040 8087 	bne.w	8003938 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800382a:	4b93      	ldr	r3, [pc, #588]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_RCC_OscConfig+0x62>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e3d6      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1a      	ldr	r2, [r3, #32]
 8003846:	4b8c      	ldr	r3, [pc, #560]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <HAL_RCC_OscConfig+0x7c>
 8003852:	4b89      	ldr	r3, [pc, #548]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800385a:	e005      	b.n	8003868 <HAL_RCC_OscConfig+0x88>
 800385c:	4b86      	ldr	r3, [pc, #536]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 800385e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003868:	4293      	cmp	r3, r2
 800386a:	d223      	bcs.n	80038b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fd53 	bl	800431c <RCC_SetFlashLatencyFromMSIRange>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e3b7      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003880:	4b7d      	ldr	r3, [pc, #500]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a7c      	ldr	r2, [pc, #496]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003886:	f043 0308 	orr.w	r3, r3, #8
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	4b7a      	ldr	r3, [pc, #488]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	4977      	ldr	r1, [pc, #476]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800389e:	4b76      	ldr	r3, [pc, #472]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	4972      	ldr	r1, [pc, #456]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
 80038b2:	e025      	b.n	8003900 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038b4:	4b70      	ldr	r3, [pc, #448]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a6f      	ldr	r2, [pc, #444]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 80038ba:	f043 0308 	orr.w	r3, r3, #8
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	4b6d      	ldr	r3, [pc, #436]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	496a      	ldr	r1, [pc, #424]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038d2:	4b69      	ldr	r3, [pc, #420]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	4965      	ldr	r1, [pc, #404]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d109      	bne.n	8003900 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fd13 	bl	800431c <RCC_SetFlashLatencyFromMSIRange>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e377      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003900:	f000 fc80 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b5c      	ldr	r3, [pc, #368]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	495a      	ldr	r1, [pc, #360]	; (8003a7c <HAL_RCC_OscConfig+0x29c>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
 800391c:	4a58      	ldr	r2, [pc, #352]	; (8003a80 <HAL_RCC_OscConfig+0x2a0>)
 800391e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003920:	4b58      	ldr	r3, [pc, #352]	; (8003a84 <HAL_RCC_OscConfig+0x2a4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fd fe79 	bl	800161c <HAL_InitTick>
 800392a:	4603      	mov	r3, r0
 800392c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d052      	beq.n	80039da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	e35b      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d032      	beq.n	80039a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003940:	4b4d      	ldr	r3, [pc, #308]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a4c      	ldr	r2, [pc, #304]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800394c:	f7fd feb6 	bl	80016bc <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003954:	f7fd feb2 	bl	80016bc <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e344      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003966:	4b44      	ldr	r3, [pc, #272]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003972:	4b41      	ldr	r3, [pc, #260]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a40      	ldr	r2, [pc, #256]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003978:	f043 0308 	orr.w	r3, r3, #8
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4b3e      	ldr	r3, [pc, #248]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	493b      	ldr	r1, [pc, #236]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 800398c:	4313      	orrs	r3, r2
 800398e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003990:	4b39      	ldr	r3, [pc, #228]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	021b      	lsls	r3, r3, #8
 800399e:	4936      	ldr	r1, [pc, #216]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
 80039a4:	e01a      	b.n	80039dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039a6:	4b34      	ldr	r3, [pc, #208]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a33      	ldr	r2, [pc, #204]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039b2:	f7fd fe83 	bl	80016bc <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039ba:	f7fd fe7f 	bl	80016bc <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e311      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039cc:	4b2a      	ldr	r3, [pc, #168]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f0      	bne.n	80039ba <HAL_RCC_OscConfig+0x1da>
 80039d8:	e000      	b.n	80039dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d074      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d005      	beq.n	80039fa <HAL_RCC_OscConfig+0x21a>
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	2b0c      	cmp	r3, #12
 80039f2:	d10e      	bne.n	8003a12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d10b      	bne.n	8003a12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fa:	4b1f      	ldr	r3, [pc, #124]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d064      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x2f0>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d160      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e2ee      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCC_OscConfig+0x24a>
 8003a1c:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	e01d      	b.n	8003a66 <HAL_RCC_OscConfig+0x286>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a32:	d10c      	bne.n	8003a4e <HAL_RCC_OscConfig+0x26e>
 8003a34:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0f      	ldr	r2, [pc, #60]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003a3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a0c      	ldr	r2, [pc, #48]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	e00b      	b.n	8003a66 <HAL_RCC_OscConfig+0x286>
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a09      	ldr	r2, [pc, #36]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a06      	ldr	r2, [pc, #24]	; (8003a78 <HAL_RCC_OscConfig+0x298>)
 8003a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a64:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01c      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7fd fe25 	bl	80016bc <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a74:	e011      	b.n	8003a9a <HAL_RCC_OscConfig+0x2ba>
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	08007de0 	.word	0x08007de0
 8003a80:	20000054 	.word	0x20000054
 8003a84:	20000058 	.word	0x20000058
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fd fe18 	bl	80016bc <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e2aa      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a9a:	4baf      	ldr	r3, [pc, #700]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x2a8>
 8003aa6:	e014      	b.n	8003ad2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fd fe08 	bl	80016bc <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab0:	f7fd fe04 	bl	80016bc <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b64      	cmp	r3, #100	; 0x64
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e296      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ac2:	4ba5      	ldr	r3, [pc, #660]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x2d0>
 8003ace:	e000      	b.n	8003ad2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d060      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_OscConfig+0x310>
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b0c      	cmp	r3, #12
 8003ae8:	d119      	bne.n	8003b1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d116      	bne.n	8003b1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af0:	4b99      	ldr	r3, [pc, #612]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_OscConfig+0x328>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e273      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b08:	4b93      	ldr	r3, [pc, #588]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	061b      	lsls	r3, r3, #24
 8003b16:	4990      	ldr	r1, [pc, #576]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b1c:	e040      	b.n	8003ba0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d023      	beq.n	8003b6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b26:	4b8c      	ldr	r3, [pc, #560]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a8b      	ldr	r2, [pc, #556]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b32:	f7fd fdc3 	bl	80016bc <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3a:	f7fd fdbf 	bl	80016bc <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e251      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b4c:	4b82      	ldr	r3, [pc, #520]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	4b7f      	ldr	r3, [pc, #508]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	497c      	ldr	r1, [pc, #496]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
 8003b6c:	e018      	b.n	8003ba0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6e:	4b7a      	ldr	r3, [pc, #488]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a79      	ldr	r2, [pc, #484]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fd fd9f 	bl	80016bc <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b82:	f7fd fd9b 	bl	80016bc <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e22d      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b94:	4b70      	ldr	r3, [pc, #448]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f0      	bne.n	8003b82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d03c      	beq.n	8003c26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01c      	beq.n	8003bee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bb4:	4b68      	ldr	r3, [pc, #416]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bba:	4a67      	ldr	r2, [pc, #412]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7fd fd7a 	bl	80016bc <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7fd fd76 	bl	80016bc <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e208      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bde:	4b5e      	ldr	r3, [pc, #376]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0ef      	beq.n	8003bcc <HAL_RCC_OscConfig+0x3ec>
 8003bec:	e01b      	b.n	8003c26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bee:	4b5a      	ldr	r3, [pc, #360]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf4:	4a58      	ldr	r2, [pc, #352]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfe:	f7fd fd5d 	bl	80016bc <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c06:	f7fd fd59 	bl	80016bc <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e1eb      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c18:	4b4f      	ldr	r3, [pc, #316]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1ef      	bne.n	8003c06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80a6 	beq.w	8003d80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c34:	2300      	movs	r3, #0
 8003c36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c38:	4b47      	ldr	r3, [pc, #284]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10d      	bne.n	8003c60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c44:	4b44      	ldr	r3, [pc, #272]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c48:	4a43      	ldr	r2, [pc, #268]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c50:	4b41      	ldr	r3, [pc, #260]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c60:	4b3e      	ldr	r3, [pc, #248]	; (8003d5c <HAL_RCC_OscConfig+0x57c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d118      	bne.n	8003c9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c6c:	4b3b      	ldr	r3, [pc, #236]	; (8003d5c <HAL_RCC_OscConfig+0x57c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a3a      	ldr	r2, [pc, #232]	; (8003d5c <HAL_RCC_OscConfig+0x57c>)
 8003c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c78:	f7fd fd20 	bl	80016bc <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c80:	f7fd fd1c 	bl	80016bc <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e1ae      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c92:	4b32      	ldr	r3, [pc, #200]	; (8003d5c <HAL_RCC_OscConfig+0x57c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d108      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x4d8>
 8003ca6:	4b2c      	ldr	r3, [pc, #176]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cac:	4a2a      	ldr	r2, [pc, #168]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cb6:	e024      	b.n	8003d02 <HAL_RCC_OscConfig+0x522>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b05      	cmp	r3, #5
 8003cbe:	d110      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x502>
 8003cc0:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	4a24      	ldr	r2, [pc, #144]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003cc8:	f043 0304 	orr.w	r3, r3, #4
 8003ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cd0:	4b21      	ldr	r3, [pc, #132]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	4a20      	ldr	r2, [pc, #128]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ce0:	e00f      	b.n	8003d02 <HAL_RCC_OscConfig+0x522>
 8003ce2:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cf2:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf8:	4a17      	ldr	r2, [pc, #92]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003cfa:	f023 0304 	bic.w	r3, r3, #4
 8003cfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d016      	beq.n	8003d38 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0a:	f7fd fcd7 	bl	80016bc <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d10:	e00a      	b.n	8003d28 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d12:	f7fd fcd3 	bl	80016bc <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e163      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_RCC_OscConfig+0x578>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0ed      	beq.n	8003d12 <HAL_RCC_OscConfig+0x532>
 8003d36:	e01a      	b.n	8003d6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7fd fcc0 	bl	80016bc <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d3e:	e00f      	b.n	8003d60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d40:	f7fd fcbc 	bl	80016bc <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d906      	bls.n	8003d60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e14c      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d60:	4ba5      	ldr	r3, [pc, #660]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e8      	bne.n	8003d40 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d6e:	7ffb      	ldrb	r3, [r7, #31]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d105      	bne.n	8003d80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d74:	4ba0      	ldr	r3, [pc, #640]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	4a9f      	ldr	r2, [pc, #636]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d03c      	beq.n	8003e06 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01c      	beq.n	8003dce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d94:	4b98      	ldr	r3, [pc, #608]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d9a:	4a97      	ldr	r2, [pc, #604]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da4:	f7fd fc8a 	bl	80016bc <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dac:	f7fd fc86 	bl	80016bc <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e118      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dbe:	4b8e      	ldr	r3, [pc, #568]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ef      	beq.n	8003dac <HAL_RCC_OscConfig+0x5cc>
 8003dcc:	e01b      	b.n	8003e06 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dce:	4b8a      	ldr	r3, [pc, #552]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dd4:	4a88      	ldr	r2, [pc, #544]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dde:	f7fd fc6d 	bl	80016bc <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003de6:	f7fd fc69 	bl	80016bc <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e0fb      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003df8:	4b7f      	ldr	r3, [pc, #508]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1ef      	bne.n	8003de6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80ef 	beq.w	8003fee <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	f040 80c5 	bne.w	8003fa4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e1a:	4b77      	ldr	r3, [pc, #476]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f003 0203 	and.w	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d12c      	bne.n	8003e88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d123      	bne.n	8003e88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d11b      	bne.n	8003e88 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d113      	bne.n	8003e88 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d109      	bne.n	8003e88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	085b      	lsrs	r3, r3, #1
 8003e80:	3b01      	subs	r3, #1
 8003e82:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d067      	beq.n	8003f58 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	2b0c      	cmp	r3, #12
 8003e8c:	d062      	beq.n	8003f54 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e8e:	4b5a      	ldr	r3, [pc, #360]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e0a8      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e9e:	4b56      	ldr	r3, [pc, #344]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a55      	ldr	r2, [pc, #340]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003ea4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ea8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003eaa:	f7fd fc07 	bl	80016bc <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb2:	f7fd fc03 	bl	80016bc <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e095      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec4:	4b4c      	ldr	r3, [pc, #304]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f0      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ed0:	4b49      	ldr	r3, [pc, #292]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	4b49      	ldr	r3, [pc, #292]	; (8003ffc <HAL_RCC_OscConfig+0x81c>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ee0:	3a01      	subs	r2, #1
 8003ee2:	0112      	lsls	r2, r2, #4
 8003ee4:	4311      	orrs	r1, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003eea:	0212      	lsls	r2, r2, #8
 8003eec:	4311      	orrs	r1, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ef2:	0852      	lsrs	r2, r2, #1
 8003ef4:	3a01      	subs	r2, #1
 8003ef6:	0552      	lsls	r2, r2, #21
 8003ef8:	4311      	orrs	r1, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003efe:	0852      	lsrs	r2, r2, #1
 8003f00:	3a01      	subs	r2, #1
 8003f02:	0652      	lsls	r2, r2, #25
 8003f04:	4311      	orrs	r1, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f0a:	06d2      	lsls	r2, r2, #27
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	493a      	ldr	r1, [pc, #232]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f14:	4b38      	ldr	r3, [pc, #224]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a37      	ldr	r2, [pc, #220]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f20:	4b35      	ldr	r3, [pc, #212]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4a34      	ldr	r2, [pc, #208]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f2c:	f7fd fbc6 	bl	80016bc <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fd fbc2 	bl	80016bc <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e054      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f46:	4b2c      	ldr	r3, [pc, #176]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f52:	e04c      	b.n	8003fee <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e04b      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f58:	4b27      	ldr	r3, [pc, #156]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d144      	bne.n	8003fee <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f64:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a23      	ldr	r2, [pc, #140]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f70:	4b21      	ldr	r3, [pc, #132]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	4a20      	ldr	r2, [pc, #128]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f7c:	f7fd fb9e 	bl	80016bc <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f84:	f7fd fb9a 	bl	80016bc <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e02c      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f96:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0x7a4>
 8003fa2:	e024      	b.n	8003fee <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b0c      	cmp	r3, #12
 8003fa8:	d01f      	beq.n	8003fea <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003faa:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a12      	ldr	r2, [pc, #72]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003fb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb6:	f7fd fb81 	bl	80016bc <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbe:	f7fd fb7d 	bl	80016bc <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e00f      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f0      	bne.n	8003fbe <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	4905      	ldr	r1, [pc, #20]	; (8003ff8 <HAL_RCC_OscConfig+0x818>)
 8003fe2:	4b07      	ldr	r3, [pc, #28]	; (8004000 <HAL_RCC_OscConfig+0x820>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60cb      	str	r3, [r1, #12]
 8003fe8:	e001      	b.n	8003fee <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	019d808c 	.word	0x019d808c
 8004000:	feeefffc 	.word	0xfeeefffc

08004004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0e7      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004018:	4b75      	ldr	r3, [pc, #468]	; (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d910      	bls.n	8004048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004026:	4b72      	ldr	r3, [pc, #456]	; (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 0207 	bic.w	r2, r3, #7
 800402e:	4970      	ldr	r1, [pc, #448]	; (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b6e      	ldr	r3, [pc, #440]	; (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0cf      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d010      	beq.n	8004076 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	4b66      	ldr	r3, [pc, #408]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004060:	429a      	cmp	r2, r3
 8004062:	d908      	bls.n	8004076 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004064:	4b63      	ldr	r3, [pc, #396]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4960      	ldr	r1, [pc, #384]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d04c      	beq.n	800411c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408a:	4b5a      	ldr	r3, [pc, #360]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d121      	bne.n	80040da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0a6      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040a2:	4b54      	ldr	r3, [pc, #336]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d115      	bne.n	80040da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e09a      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d107      	bne.n	80040ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040ba:	4b4e      	ldr	r3, [pc, #312]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e08e      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ca:	4b4a      	ldr	r3, [pc, #296]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e086      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040da:	4b46      	ldr	r3, [pc, #280]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f023 0203 	bic.w	r2, r3, #3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	4943      	ldr	r1, [pc, #268]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ec:	f7fd fae6 	bl	80016bc <HAL_GetTick>
 80040f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f2:	e00a      	b.n	800410a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f4:	f7fd fae2 	bl	80016bc <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e06e      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410a:	4b3a      	ldr	r3, [pc, #232]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 020c 	and.w	r2, r3, #12
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	429a      	cmp	r2, r3
 800411a:	d1eb      	bne.n	80040f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d010      	beq.n	800414a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	4b31      	ldr	r3, [pc, #196]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004134:	429a      	cmp	r2, r3
 8004136:	d208      	bcs.n	800414a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004138:	4b2e      	ldr	r3, [pc, #184]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	492b      	ldr	r1, [pc, #172]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800414a:	4b29      	ldr	r3, [pc, #164]	; (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d210      	bcs.n	800417a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004158:	4b25      	ldr	r3, [pc, #148]	; (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 0207 	bic.w	r2, r3, #7
 8004160:	4923      	ldr	r1, [pc, #140]	; (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	4313      	orrs	r3, r2
 8004166:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004168:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d001      	beq.n	800417a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e036      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004186:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	4918      	ldr	r1, [pc, #96]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004194:	4313      	orrs	r3, r2
 8004196:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041a4:	4b13      	ldr	r3, [pc, #76]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4910      	ldr	r1, [pc, #64]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041b8:	f000 f824 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80041bc:	4602      	mov	r2, r0
 80041be:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	091b      	lsrs	r3, r3, #4
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	490b      	ldr	r1, [pc, #44]	; (80041f8 <HAL_RCC_ClockConfig+0x1f4>)
 80041ca:	5ccb      	ldrb	r3, [r1, r3]
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	fa22 f303 	lsr.w	r3, r2, r3
 80041d4:	4a09      	ldr	r2, [pc, #36]	; (80041fc <HAL_RCC_ClockConfig+0x1f8>)
 80041d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <HAL_RCC_ClockConfig+0x1fc>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fd fa1d 	bl	800161c <HAL_InitTick>
 80041e2:	4603      	mov	r3, r0
 80041e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80041e6:	7afb      	ldrb	r3, [r7, #11]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40022000 	.word	0x40022000
 80041f4:	40021000 	.word	0x40021000
 80041f8:	08007de0 	.word	0x08007de0
 80041fc:	20000054 	.word	0x20000054
 8004200:	20000058 	.word	0x20000058

08004204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004204:	b480      	push	{r7}
 8004206:	b089      	sub	sp, #36	; 0x24
 8004208:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	2300      	movs	r3, #0
 8004210:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004212:	4b3e      	ldr	r3, [pc, #248]	; (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
 800421a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800421c:	4b3b      	ldr	r3, [pc, #236]	; (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x34>
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b0c      	cmp	r3, #12
 8004230:	d121      	bne.n	8004276 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d11e      	bne.n	8004276 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004238:	4b34      	ldr	r3, [pc, #208]	; (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d107      	bne.n	8004254 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004244:	4b31      	ldr	r3, [pc, #196]	; (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 8004246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	e005      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004254:	4b2d      	ldr	r3, [pc, #180]	; (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	091b      	lsrs	r3, r3, #4
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004260:	4a2b      	ldr	r2, [pc, #172]	; (8004310 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004268:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10d      	bne.n	800428c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004274:	e00a      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b04      	cmp	r3, #4
 800427a:	d102      	bne.n	8004282 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800427c:	4b25      	ldr	r3, [pc, #148]	; (8004314 <HAL_RCC_GetSysClockFreq+0x110>)
 800427e:	61bb      	str	r3, [r7, #24]
 8004280:	e004      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b08      	cmp	r3, #8
 8004286:	d101      	bne.n	800428c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004288:	4b23      	ldr	r3, [pc, #140]	; (8004318 <HAL_RCC_GetSysClockFreq+0x114>)
 800428a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	2b0c      	cmp	r3, #12
 8004290:	d134      	bne.n	80042fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004292:	4b1e      	ldr	r3, [pc, #120]	; (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d003      	beq.n	80042aa <HAL_RCC_GetSysClockFreq+0xa6>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d003      	beq.n	80042b0 <HAL_RCC_GetSysClockFreq+0xac>
 80042a8:	e005      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042aa:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <HAL_RCC_GetSysClockFreq+0x110>)
 80042ac:	617b      	str	r3, [r7, #20]
      break;
 80042ae:	e005      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042b0:	4b19      	ldr	r3, [pc, #100]	; (8004318 <HAL_RCC_GetSysClockFreq+0x114>)
 80042b2:	617b      	str	r3, [r7, #20]
      break;
 80042b4:	e002      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	617b      	str	r3, [r7, #20]
      break;
 80042ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042bc:	4b13      	ldr	r3, [pc, #76]	; (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	3301      	adds	r3, #1
 80042c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042ca:	4b10      	ldr	r3, [pc, #64]	; (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	fb02 f203 	mul.w	r2, r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	0e5b      	lsrs	r3, r3, #25
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	3301      	adds	r3, #1
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042fc:	69bb      	ldr	r3, [r7, #24]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3724      	adds	r7, #36	; 0x24
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40021000 	.word	0x40021000
 8004310:	08007df0 	.word	0x08007df0
 8004314:	00f42400 	.word	0x00f42400
 8004318:	016e3600 	.word	0x016e3600

0800431c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004324:	2300      	movs	r3, #0
 8004326:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004328:	4b2a      	ldr	r3, [pc, #168]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800432a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004334:	f7ff f9f0 	bl	8003718 <HAL_PWREx_GetVoltageRange>
 8004338:	6178      	str	r0, [r7, #20]
 800433a:	e014      	b.n	8004366 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800433c:	4b25      	ldr	r3, [pc, #148]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	4a24      	ldr	r2, [pc, #144]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004346:	6593      	str	r3, [r2, #88]	; 0x58
 8004348:	4b22      	ldr	r3, [pc, #136]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004354:	f7ff f9e0 	bl	8003718 <HAL_PWREx_GetVoltageRange>
 8004358:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800435a:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004364:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436c:	d10b      	bne.n	8004386 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d919      	bls.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2ba0      	cmp	r3, #160	; 0xa0
 8004378:	d902      	bls.n	8004380 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800437a:	2302      	movs	r3, #2
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	e013      	b.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004380:	2301      	movs	r3, #1
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	e010      	b.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b80      	cmp	r3, #128	; 0x80
 800438a:	d902      	bls.n	8004392 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800438c:	2303      	movs	r3, #3
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	e00a      	b.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b80      	cmp	r3, #128	; 0x80
 8004396:	d102      	bne.n	800439e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004398:	2302      	movs	r3, #2
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	e004      	b.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b70      	cmp	r3, #112	; 0x70
 80043a2:	d101      	bne.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043a4:	2301      	movs	r3, #1
 80043a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f023 0207 	bic.w	r2, r3, #7
 80043b0:	4909      	ldr	r1, [pc, #36]	; (80043d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043b8:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d001      	beq.n	80043ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40022000 	.word	0x40022000

080043dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043e4:	2300      	movs	r3, #0
 80043e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043e8:	2300      	movs	r3, #0
 80043ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d031      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004400:	d01a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004402:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004406:	d814      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d009      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800440c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004410:	d10f      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004412:	4b5d      	ldr	r3, [pc, #372]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	4a5c      	ldr	r2, [pc, #368]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800441e:	e00c      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f9f0 	bl	800480c <RCCEx_PLLSAI1_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004430:	e003      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	74fb      	strb	r3, [r7, #19]
      break;
 8004436:	e000      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800443a:	7cfb      	ldrb	r3, [r7, #19]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004440:	4b51      	ldr	r3, [pc, #324]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444e:	494e      	ldr	r1, [pc, #312]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004456:	e001      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 809e 	beq.w	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446a:	2300      	movs	r3, #0
 800446c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800446e:	4b46      	ldr	r3, [pc, #280]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00d      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004484:	4b40      	ldr	r3, [pc, #256]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	4a3f      	ldr	r2, [pc, #252]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448e:	6593      	str	r3, [r2, #88]	; 0x58
 8004490:	4b3d      	ldr	r3, [pc, #244]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449c:	2301      	movs	r3, #1
 800449e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a0:	4b3a      	ldr	r3, [pc, #232]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a39      	ldr	r2, [pc, #228]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044ac:	f7fd f906 	bl	80016bc <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044b2:	e009      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b4:	f7fd f902 	bl	80016bc <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d902      	bls.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	74fb      	strb	r3, [r7, #19]
        break;
 80044c6:	e005      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044c8:	4b30      	ldr	r3, [pc, #192]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ef      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d15a      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044da:	4b2b      	ldr	r3, [pc, #172]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01e      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d019      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044f6:	4b24      	ldr	r3, [pc, #144]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004500:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004502:	4b21      	ldr	r3, [pc, #132]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	4a1f      	ldr	r2, [pc, #124]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800450a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004512:	4b1d      	ldr	r3, [pc, #116]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	4a1b      	ldr	r2, [pc, #108]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800451a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004522:	4a19      	ldr	r2, [pc, #100]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d016      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fd f8c2 	bl	80016bc <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453a:	e00b      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f7fd f8be 	bl	80016bc <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d902      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	74fb      	strb	r3, [r7, #19]
            break;
 8004552:	e006      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0ec      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004562:	7cfb      	ldrb	r3, [r7, #19]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10b      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004576:	4904      	ldr	r1, [pc, #16]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800457e:	e009      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004580:	7cfb      	ldrb	r3, [r7, #19]
 8004582:	74bb      	strb	r3, [r7, #18]
 8004584:	e006      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004586:	bf00      	nop
 8004588:	40021000 	.word	0x40021000
 800458c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004594:	7c7b      	ldrb	r3, [r7, #17]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d105      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459a:	4b9b      	ldr	r3, [pc, #620]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	4a9a      	ldr	r2, [pc, #616]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80045a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045b2:	4b95      	ldr	r3, [pc, #596]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	f023 0203 	bic.w	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4991      	ldr	r1, [pc, #580]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045d4:	4b8c      	ldr	r3, [pc, #560]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f023 020c 	bic.w	r2, r3, #12
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	4989      	ldr	r1, [pc, #548]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045f6:	4b84      	ldr	r3, [pc, #528]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	4980      	ldr	r1, [pc, #512]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004618:	4b7b      	ldr	r3, [pc, #492]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	4978      	ldr	r1, [pc, #480]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800463a:	4b73      	ldr	r3, [pc, #460]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004648:	496f      	ldr	r1, [pc, #444]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800465c:	4b6a      	ldr	r3, [pc, #424]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	4967      	ldr	r1, [pc, #412]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800467e:	4b62      	ldr	r3, [pc, #392]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	495e      	ldr	r1, [pc, #376]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046a0:	4b59      	ldr	r3, [pc, #356]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	4956      	ldr	r1, [pc, #344]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046c2:	4b51      	ldr	r3, [pc, #324]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	494d      	ldr	r1, [pc, #308]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d028      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046e4:	4b48      	ldr	r3, [pc, #288]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f2:	4945      	ldr	r1, [pc, #276]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004702:	d106      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004704:	4b40      	ldr	r3, [pc, #256]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4a3f      	ldr	r2, [pc, #252]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800470a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800470e:	60d3      	str	r3, [r2, #12]
 8004710:	e011      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004716:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800471a:	d10c      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	2101      	movs	r1, #1
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f872 	bl	800480c <RCCEx_PLLSAI1_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800472c:	7cfb      	ldrb	r3, [r7, #19]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004732:	7cfb      	ldrb	r3, [r7, #19]
 8004734:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d028      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004742:	4b31      	ldr	r3, [pc, #196]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004748:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004750:	492d      	ldr	r1, [pc, #180]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004760:	d106      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004762:	4b29      	ldr	r3, [pc, #164]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	4a28      	ldr	r2, [pc, #160]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800476c:	60d3      	str	r3, [r2, #12]
 800476e:	e011      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004774:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004778:	d10c      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3304      	adds	r3, #4
 800477e:	2101      	movs	r1, #1
 8004780:	4618      	mov	r0, r3
 8004782:	f000 f843 	bl	800480c <RCCEx_PLLSAI1_Config>
 8004786:	4603      	mov	r3, r0
 8004788:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800478a:	7cfb      	ldrb	r3, [r7, #19]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004790:	7cfb      	ldrb	r3, [r7, #19]
 8004792:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d01c      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047a0:	4b19      	ldr	r3, [pc, #100]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ae:	4916      	ldr	r1, [pc, #88]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047be:	d10c      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3304      	adds	r3, #4
 80047c4:	2102      	movs	r1, #2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f820 	bl	800480c <RCCEx_PLLSAI1_Config>
 80047cc:	4603      	mov	r3, r0
 80047ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047e6:	4b08      	ldr	r3, [pc, #32]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	4904      	ldr	r1, [pc, #16]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40021000 	.word	0x40021000

0800480c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800481a:	4b74      	ldr	r3, [pc, #464]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d018      	beq.n	8004858 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004826:	4b71      	ldr	r3, [pc, #452]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f003 0203 	and.w	r2, r3, #3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d10d      	bne.n	8004852 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
       ||
 800483a:	2b00      	cmp	r3, #0
 800483c:	d009      	beq.n	8004852 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800483e:	4b6b      	ldr	r3, [pc, #428]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	091b      	lsrs	r3, r3, #4
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
       ||
 800484e:	429a      	cmp	r2, r3
 8004850:	d047      	beq.n	80048e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
 8004856:	e044      	b.n	80048e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b03      	cmp	r3, #3
 800485e:	d018      	beq.n	8004892 <RCCEx_PLLSAI1_Config+0x86>
 8004860:	2b03      	cmp	r3, #3
 8004862:	d825      	bhi.n	80048b0 <RCCEx_PLLSAI1_Config+0xa4>
 8004864:	2b01      	cmp	r3, #1
 8004866:	d002      	beq.n	800486e <RCCEx_PLLSAI1_Config+0x62>
 8004868:	2b02      	cmp	r3, #2
 800486a:	d009      	beq.n	8004880 <RCCEx_PLLSAI1_Config+0x74>
 800486c:	e020      	b.n	80048b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800486e:	4b5f      	ldr	r3, [pc, #380]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d11d      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800487e:	e01a      	b.n	80048b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004880:	4b5a      	ldr	r3, [pc, #360]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004888:	2b00      	cmp	r3, #0
 800488a:	d116      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004890:	e013      	b.n	80048ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004892:	4b56      	ldr	r3, [pc, #344]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10f      	bne.n	80048be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800489e:	4b53      	ldr	r3, [pc, #332]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048ae:	e006      	b.n	80048be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      break;
 80048b4:	e004      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048b6:	bf00      	nop
 80048b8:	e002      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ba:	bf00      	nop
 80048bc:	e000      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048be:	bf00      	nop
    }

    if(status == HAL_OK)
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10d      	bne.n	80048e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048c6:	4b49      	ldr	r3, [pc, #292]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6819      	ldr	r1, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	430b      	orrs	r3, r1
 80048dc:	4943      	ldr	r1, [pc, #268]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d17c      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048e8:	4b40      	ldr	r3, [pc, #256]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a3f      	ldr	r2, [pc, #252]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f4:	f7fc fee2 	bl	80016bc <HAL_GetTick>
 80048f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048fa:	e009      	b.n	8004910 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048fc:	f7fc fede 	bl	80016bc <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d902      	bls.n	8004910 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	73fb      	strb	r3, [r7, #15]
        break;
 800490e:	e005      	b.n	800491c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004910:	4b36      	ldr	r3, [pc, #216]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1ef      	bne.n	80048fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d15f      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d110      	bne.n	800494a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004928:	4b30      	ldr	r3, [pc, #192]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004930:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6892      	ldr	r2, [r2, #8]
 8004938:	0211      	lsls	r1, r2, #8
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	68d2      	ldr	r2, [r2, #12]
 800493e:	06d2      	lsls	r2, r2, #27
 8004940:	430a      	orrs	r2, r1
 8004942:	492a      	ldr	r1, [pc, #168]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004944:	4313      	orrs	r3, r2
 8004946:	610b      	str	r3, [r1, #16]
 8004948:	e027      	b.n	800499a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d112      	bne.n	8004976 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004950:	4b26      	ldr	r3, [pc, #152]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004958:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6892      	ldr	r2, [r2, #8]
 8004960:	0211      	lsls	r1, r2, #8
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6912      	ldr	r2, [r2, #16]
 8004966:	0852      	lsrs	r2, r2, #1
 8004968:	3a01      	subs	r2, #1
 800496a:	0552      	lsls	r2, r2, #21
 800496c:	430a      	orrs	r2, r1
 800496e:	491f      	ldr	r1, [pc, #124]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004970:	4313      	orrs	r3, r2
 8004972:	610b      	str	r3, [r1, #16]
 8004974:	e011      	b.n	800499a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004976:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800497e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6892      	ldr	r2, [r2, #8]
 8004986:	0211      	lsls	r1, r2, #8
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6952      	ldr	r2, [r2, #20]
 800498c:	0852      	lsrs	r2, r2, #1
 800498e:	3a01      	subs	r2, #1
 8004990:	0652      	lsls	r2, r2, #25
 8004992:	430a      	orrs	r2, r1
 8004994:	4915      	ldr	r1, [pc, #84]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004996:	4313      	orrs	r3, r2
 8004998:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800499a:	4b14      	ldr	r3, [pc, #80]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a13      	ldr	r2, [pc, #76]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a6:	f7fc fe89 	bl	80016bc <HAL_GetTick>
 80049aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049ac:	e009      	b.n	80049c2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049ae:	f7fc fe85 	bl	80016bc <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d902      	bls.n	80049c2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	73fb      	strb	r3, [r7, #15]
          break;
 80049c0:	e005      	b.n	80049ce <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049c2:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ef      	beq.n	80049ae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	4903      	ldr	r1, [pc, #12]	; (80049ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40021000 	.word	0x40021000

080049f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e049      	b.n	8004a96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fc fc60 	bl	80012dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f000 f960 	bl	8004cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d001      	beq.n	8004ab8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e033      	b.n	8004b20 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <HAL_TIM_Base_Start+0x8c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d009      	beq.n	8004ade <HAL_TIM_Base_Start+0x3e>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad2:	d004      	beq.n	8004ade <HAL_TIM_Base_Start+0x3e>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a15      	ldr	r2, [pc, #84]	; (8004b30 <HAL_TIM_Base_Start+0x90>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d115      	bne.n	8004b0a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <HAL_TIM_Base_Start+0x94>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b06      	cmp	r3, #6
 8004aee:	d015      	beq.n	8004b1c <HAL_TIM_Base_Start+0x7c>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af6:	d011      	beq.n	8004b1c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b08:	e008      	b.n	8004b1c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	e000      	b.n	8004b1e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	40012c00 	.word	0x40012c00
 8004b30:	40014000 	.word	0x40014000
 8004b34:	00010007 	.word	0x00010007

08004b38 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d109      	bne.n	8004b5c <HAL_TIM_OC_Start+0x24>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	bf14      	ite	ne
 8004b54:	2301      	movne	r3, #1
 8004b56:	2300      	moveq	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	e03c      	b.n	8004bd6 <HAL_TIM_OC_Start+0x9e>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d109      	bne.n	8004b76 <HAL_TIM_OC_Start+0x3e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	bf14      	ite	ne
 8004b6e:	2301      	movne	r3, #1
 8004b70:	2300      	moveq	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	e02f      	b.n	8004bd6 <HAL_TIM_OC_Start+0x9e>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d109      	bne.n	8004b90 <HAL_TIM_OC_Start+0x58>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	e022      	b.n	8004bd6 <HAL_TIM_OC_Start+0x9e>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b0c      	cmp	r3, #12
 8004b94:	d109      	bne.n	8004baa <HAL_TIM_OC_Start+0x72>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	bf14      	ite	ne
 8004ba2:	2301      	movne	r3, #1
 8004ba4:	2300      	moveq	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	e015      	b.n	8004bd6 <HAL_TIM_OC_Start+0x9e>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d109      	bne.n	8004bc4 <HAL_TIM_OC_Start+0x8c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	bf14      	ite	ne
 8004bbc:	2301      	movne	r3, #1
 8004bbe:	2300      	moveq	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	e008      	b.n	8004bd6 <HAL_TIM_OC_Start+0x9e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	bf14      	ite	ne
 8004bd0:	2301      	movne	r3, #1
 8004bd2:	2300      	moveq	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e07e      	b.n	8004cdc <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <HAL_TIM_OC_Start+0xb6>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bec:	e023      	b.n	8004c36 <HAL_TIM_OC_Start+0xfe>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d104      	bne.n	8004bfe <HAL_TIM_OC_Start+0xc6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bfc:	e01b      	b.n	8004c36 <HAL_TIM_OC_Start+0xfe>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_OC_Start+0xd6>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c0c:	e013      	b.n	8004c36 <HAL_TIM_OC_Start+0xfe>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b0c      	cmp	r3, #12
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_OC_Start+0xe6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c1c:	e00b      	b.n	8004c36 <HAL_TIM_OC_Start+0xfe>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b10      	cmp	r3, #16
 8004c22:	d104      	bne.n	8004c2e <HAL_TIM_OC_Start+0xf6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c2c:	e003      	b.n	8004c36 <HAL_TIM_OC_Start+0xfe>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	6839      	ldr	r1, [r7, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 f8bc 	bl	8004dbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a26      	ldr	r2, [pc, #152]	; (8004ce4 <HAL_TIM_OC_Start+0x1ac>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_TIM_OC_Start+0x12a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a25      	ldr	r2, [pc, #148]	; (8004ce8 <HAL_TIM_OC_Start+0x1b0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_TIM_OC_Start+0x12a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a23      	ldr	r2, [pc, #140]	; (8004cec <HAL_TIM_OC_Start+0x1b4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d101      	bne.n	8004c66 <HAL_TIM_OC_Start+0x12e>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <HAL_TIM_OC_Start+0x130>
 8004c66:	2300      	movs	r3, #0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a18      	ldr	r2, [pc, #96]	; (8004ce4 <HAL_TIM_OC_Start+0x1ac>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d009      	beq.n	8004c9a <HAL_TIM_OC_Start+0x162>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8e:	d004      	beq.n	8004c9a <HAL_TIM_OC_Start+0x162>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a14      	ldr	r2, [pc, #80]	; (8004ce8 <HAL_TIM_OC_Start+0x1b0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d115      	bne.n	8004cc6 <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	4b13      	ldr	r3, [pc, #76]	; (8004cf0 <HAL_TIM_OC_Start+0x1b8>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b06      	cmp	r3, #6
 8004caa:	d015      	beq.n	8004cd8 <HAL_TIM_OC_Start+0x1a0>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb2:	d011      	beq.n	8004cd8 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc4:	e008      	b.n	8004cd8 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0201 	orr.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	e000      	b.n	8004cda <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40014000 	.word	0x40014000
 8004cec:	40014400 	.word	0x40014400
 8004cf0:	00010007 	.word	0x00010007

08004cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a2a      	ldr	r2, [pc, #168]	; (8004db0 <TIM_Base_SetConfig+0xbc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_Base_SetConfig+0x20>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d12:	d108      	bne.n	8004d26 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a21      	ldr	r2, [pc, #132]	; (8004db0 <TIM_Base_SetConfig+0xbc>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00b      	beq.n	8004d46 <TIM_Base_SetConfig+0x52>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d34:	d007      	beq.n	8004d46 <TIM_Base_SetConfig+0x52>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a1e      	ldr	r2, [pc, #120]	; (8004db4 <TIM_Base_SetConfig+0xc0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <TIM_Base_SetConfig+0x52>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a1d      	ldr	r2, [pc, #116]	; (8004db8 <TIM_Base_SetConfig+0xc4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d108      	bne.n	8004d58 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a0c      	ldr	r2, [pc, #48]	; (8004db0 <TIM_Base_SetConfig+0xbc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d007      	beq.n	8004d94 <TIM_Base_SetConfig+0xa0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a0b      	ldr	r2, [pc, #44]	; (8004db4 <TIM_Base_SetConfig+0xc0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_Base_SetConfig+0xa0>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <TIM_Base_SetConfig+0xc4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d103      	bne.n	8004d9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	615a      	str	r2, [r3, #20]
}
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40014400 	.word	0x40014400

08004dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	2201      	movs	r2, #1
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a1a      	ldr	r2, [r3, #32]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	401a      	ands	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1a      	ldr	r2, [r3, #32]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	fa01 f303 	lsl.w	r3, r1, r3
 8004df4:	431a      	orrs	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	621a      	str	r2, [r3, #32]
}
 8004dfa:	bf00      	nop
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e04f      	b.n	8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a21      	ldr	r2, [pc, #132]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d108      	bne.n	8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a14      	ldr	r2, [pc, #80]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d009      	beq.n	8004e94 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e88:	d004      	beq.n	8004e94 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a10      	ldr	r2, [pc, #64]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d10c      	bne.n	8004eae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	40014000 	.word	0x40014000

08004ed4 <arm_fir_init_f32>:
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	9c04      	ldr	r4, [sp, #16]
 8004ed8:	6082      	str	r2, [r0, #8]
 8004eda:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004ede:	3c01      	subs	r4, #1
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	440c      	add	r4, r1
 8004ee4:	8001      	strh	r1, [r0, #0]
 8004ee6:	461e      	mov	r6, r3
 8004ee8:	00a2      	lsls	r2, r4, #2
 8004eea:	4618      	mov	r0, r3
 8004eec:	2100      	movs	r1, #0
 8004eee:	f000 fa91 	bl	8005414 <memset>
 8004ef2:	606e      	str	r6, [r5, #4]
 8004ef4:	bd70      	pop	{r4, r5, r6, pc}
 8004ef6:	bf00      	nop

08004ef8 <arm_fir_f32>:
 8004ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efc:	ed2d 8b10 	vpush	{d8-d15}
 8004f00:	b089      	sub	sp, #36	; 0x24
 8004f02:	4605      	mov	r5, r0
 8004f04:	9003      	str	r0, [sp, #12]
 8004f06:	8800      	ldrh	r0, [r0, #0]
 8004f08:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8004f0c:	9304      	str	r3, [sp, #16]
 8004f0e:	461e      	mov	r6, r3
 8004f10:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8004f14:	3b01      	subs	r3, #1
 8004f16:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8004f1a:	08f3      	lsrs	r3, r6, #3
 8004f1c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8004f20:	9001      	str	r0, [sp, #4]
 8004f22:	4625      	mov	r5, r4
 8004f24:	9400      	str	r4, [sp, #0]
 8004f26:	9302      	str	r3, [sp, #8]
 8004f28:	f000 81ee 	beq.w	8005308 <arm_fir_f32+0x410>
 8004f2c:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8004f30:	469e      	mov	lr, r3
 8004f32:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8004f36:	1f1e      	subs	r6, r3, #4
 8004f38:	4604      	mov	r4, r0
 8004f3a:	9605      	str	r6, [sp, #20]
 8004f3c:	eb08 0003 	add.w	r0, r8, r3
 8004f40:	f004 0a07 	and.w	sl, r4, #7
 8004f44:	4613      	mov	r3, r2
 8004f46:	f10c 0420 	add.w	r4, ip, #32
 8004f4a:	f8cd c018 	str.w	ip, [sp, #24]
 8004f4e:	4684      	mov	ip, r0
 8004f50:	4648      	mov	r0, r9
 8004f52:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004f56:	9107      	str	r1, [sp, #28]
 8004f58:	f105 0720 	add.w	r7, r5, #32
 8004f5c:	f101 0620 	add.w	r6, r1, #32
 8004f60:	f102 0520 	add.w	r5, r2, #32
 8004f64:	4652      	mov	r2, sl
 8004f66:	469a      	mov	sl, r3
 8004f68:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8004f6c:	f847 3c20 	str.w	r3, [r7, #-32]
 8004f70:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8004f74:	f847 3c1c 	str.w	r3, [r7, #-28]
 8004f78:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8004f7c:	f847 3c18 	str.w	r3, [r7, #-24]
 8004f80:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8004f84:	f847 3c14 	str.w	r3, [r7, #-20]
 8004f88:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8004f8c:	f847 3c10 	str.w	r3, [r7, #-16]
 8004f90:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8004f94:	f847 3c0c 	str.w	r3, [r7, #-12]
 8004f98:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8004f9c:	f847 3c08 	str.w	r3, [r7, #-8]
 8004fa0:	eddf 3af1 	vldr	s7, [pc, #964]	; 8005368 <arm_fir_f32+0x470>
 8004fa4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004fa8:	f847 3c04 	str.w	r3, [r7, #-4]
 8004fac:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 8004fb0:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 8004fb4:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8004fb8:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8004fbc:	ed14 1a04 	vldr	s2, [r4, #-16]
 8004fc0:	ed54 0a03 	vldr	s1, [r4, #-12]
 8004fc4:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004fc8:	1f21      	subs	r1, r4, #4
 8004fca:	eef0 8a63 	vmov.f32	s17, s7
 8004fce:	eef0 9a63 	vmov.f32	s19, s7
 8004fd2:	eef0 aa63 	vmov.f32	s21, s7
 8004fd6:	eef0 ba63 	vmov.f32	s23, s7
 8004fda:	eeb0 ca63 	vmov.f32	s24, s7
 8004fde:	eef0 ca63 	vmov.f32	s25, s7
 8004fe2:	eeb0 da63 	vmov.f32	s26, s7
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	f000 81e8 	beq.w	80053bc <arm_fir_f32+0x4c4>
 8004fec:	f108 0120 	add.w	r1, r8, #32
 8004ff0:	f104 031c 	add.w	r3, r4, #28
 8004ff4:	4683      	mov	fp, r0
 8004ff6:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8004ffa:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 8004ffe:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 8005002:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 8005006:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 800500a:	ed11 6a04 	vldr	s12, [r1, #-16]
 800500e:	ed51 6a03 	vldr	s13, [r1, #-12]
 8005012:	ed11 7a02 	vldr	s14, [r1, #-8]
 8005016:	ed51 7a01 	vldr	s15, [r1, #-4]
 800501a:	ee23 fa04 	vmul.f32	s30, s6, s8
 800501e:	ee62 ea84 	vmul.f32	s29, s5, s8
 8005022:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 8005026:	ee22 ea04 	vmul.f32	s28, s4, s8
 800502a:	ee61 da84 	vmul.f32	s27, s3, s8
 800502e:	ee21 ba04 	vmul.f32	s22, s2, s8
 8005032:	ee20 aa84 	vmul.f32	s20, s1, s8
 8005036:	ee20 9a04 	vmul.f32	s18, s0, s8
 800503a:	ee28 4a04 	vmul.f32	s8, s16, s8
 800503e:	ee62 fa24 	vmul.f32	s31, s4, s9
 8005042:	ee3c ca0e 	vadd.f32	s24, s24, s28
 8005046:	ee7b baad 	vadd.f32	s23, s23, s27
 800504a:	ee21 eaa4 	vmul.f32	s28, s3, s9
 800504e:	ee61 da24 	vmul.f32	s27, s2, s9
 8005052:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8005056:	ee79 9a8a 	vadd.f32	s19, s19, s20
 800505a:	ee20 baa4 	vmul.f32	s22, s1, s9
 800505e:	ee20 aa24 	vmul.f32	s20, s0, s9
 8005062:	ee3d da0f 	vadd.f32	s26, s26, s30
 8005066:	ee7c caae 	vadd.f32	s25, s25, s29
 800506a:	ee22 faa4 	vmul.f32	s30, s5, s9
 800506e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005072:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 8005076:	ee28 9a24 	vmul.f32	s18, s16, s9
 800507a:	ee73 3a84 	vadd.f32	s7, s7, s8
 800507e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8005082:	ee22 4a05 	vmul.f32	s8, s4, s10
 8005086:	ee61 ea05 	vmul.f32	s29, s2, s10
 800508a:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800508e:	ee3d da0f 	vadd.f32	s26, s26, s30
 8005092:	ee7c caaf 	vadd.f32	s25, s25, s31
 8005096:	ee20 fa85 	vmul.f32	s30, s1, s10
 800509a:	ee61 fa85 	vmul.f32	s31, s3, s10
 800509e:	ee3c ea0e 	vadd.f32	s28, s24, s28
 80050a2:	ee7b daad 	vadd.f32	s27, s23, s27
 80050a6:	ee3a ba8b 	vadd.f32	s22, s21, s22
 80050aa:	ee60 ba05 	vmul.f32	s23, s0, s10
 80050ae:	ee68 aa05 	vmul.f32	s21, s16, s10
 80050b2:	ee39 aa8a 	vadd.f32	s20, s19, s20
 80050b6:	ee78 8a89 	vadd.f32	s17, s17, s18
 80050ba:	ee73 3aa4 	vadd.f32	s7, s7, s9
 80050be:	ee63 4a05 	vmul.f32	s9, s6, s10
 80050c2:	ee22 5a85 	vmul.f32	s10, s5, s10
 80050c6:	ee21 9a25 	vmul.f32	s18, s2, s11
 80050ca:	ee20 ca25 	vmul.f32	s24, s0, s11
 80050ce:	ee3d da04 	vadd.f32	s26, s26, s8
 80050d2:	ee7c caaf 	vadd.f32	s25, s25, s31
 80050d6:	ee21 4aa5 	vmul.f32	s8, s3, s11
 80050da:	ee3e ea2e 	vadd.f32	s28, s28, s29
 80050de:	ed53 1a04 	vldr	s3, [r3, #-16]
 80050e2:	ee60 eaa5 	vmul.f32	s29, s1, s11
 80050e6:	ee7d da8f 	vadd.f32	s27, s27, s30
 80050ea:	ee3b ba2b 	vadd.f32	s22, s22, s23
 80050ee:	ee3a aa2a 	vadd.f32	s20, s20, s21
 80050f2:	ee68 ba25 	vmul.f32	s23, s16, s11
 80050f6:	ee63 aa25 	vmul.f32	s21, s6, s11
 80050fa:	ee78 8aa4 	vadd.f32	s17, s17, s9
 80050fe:	ee73 3a85 	vadd.f32	s7, s7, s10
 8005102:	ee22 5aa5 	vmul.f32	s10, s5, s11
 8005106:	ee62 5a25 	vmul.f32	s11, s4, s11
 800510a:	ee61 4a06 	vmul.f32	s9, s2, s12
 800510e:	ee60 9a86 	vmul.f32	s19, s1, s12
 8005112:	ee60 fa06 	vmul.f32	s31, s0, s12
 8005116:	ed13 1a03 	vldr	s2, [r3, #-12]
 800511a:	ee23 fa06 	vmul.f32	s30, s6, s12
 800511e:	ee3d da04 	vadd.f32	s26, s26, s8
 8005122:	ee7c ca89 	vadd.f32	s25, s25, s18
 8005126:	ee3e ea2e 	vadd.f32	s28, s28, s29
 800512a:	ee28 9a06 	vmul.f32	s18, s16, s12
 800512e:	ee7d da8c 	vadd.f32	s27, s27, s24
 8005132:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8005136:	ee22 ca86 	vmul.f32	s24, s5, s12
 800513a:	ee3a aa2a 	vadd.f32	s20, s20, s21
 800513e:	ee78 8a85 	vadd.f32	s17, s17, s10
 8005142:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8005146:	ee62 5a06 	vmul.f32	s11, s4, s12
 800514a:	ee21 6a86 	vmul.f32	s12, s3, s12
 800514e:	ee20 4a26 	vmul.f32	s8, s0, s13
 8005152:	ee63 ea26 	vmul.f32	s29, s6, s13
 8005156:	ee3a aa0c 	vadd.f32	s20, s20, s24
 800515a:	ee22 5a26 	vmul.f32	s10, s4, s13
 800515e:	ee3d da24 	vadd.f32	s26, s26, s9
 8005162:	ee7c caa9 	vadd.f32	s25, s25, s19
 8005166:	ee60 4aa6 	vmul.f32	s9, s1, s13
 800516a:	ee3e ea2f 	vadd.f32	s28, s28, s31
 800516e:	ed53 0a02 	vldr	s1, [r3, #-8]
 8005172:	ee68 fa26 	vmul.f32	s31, s16, s13
 8005176:	ee7d da89 	vadd.f32	s27, s27, s18
 800517a:	ee3b ba0f 	vadd.f32	s22, s22, s30
 800517e:	ee78 8aa5 	vadd.f32	s17, s17, s11
 8005182:	ee22 faa6 	vmul.f32	s30, s5, s13
 8005186:	ee73 3a86 	vadd.f32	s7, s7, s12
 800518a:	ee21 6aa6 	vmul.f32	s12, s3, s13
 800518e:	ee61 6a26 	vmul.f32	s13, s2, s13
 8005192:	ee60 aa07 	vmul.f32	s21, s0, s14
 8005196:	ee28 ca07 	vmul.f32	s24, s16, s14
 800519a:	ee63 ba07 	vmul.f32	s23, s6, s14
 800519e:	ee7a 9a05 	vadd.f32	s19, s20, s10
 80051a2:	ee78 8a86 	vadd.f32	s17, s17, s12
 80051a6:	ee3d da24 	vadd.f32	s26, s26, s9
 80051aa:	ee7c ca84 	vadd.f32	s25, s25, s8
 80051ae:	ee7d daae 	vadd.f32	s27, s27, s29
 80051b2:	ee22 9a07 	vmul.f32	s18, s4, s14
 80051b6:	ee62 ea87 	vmul.f32	s29, s5, s14
 80051ba:	ee61 5a87 	vmul.f32	s11, s3, s14
 80051be:	ee73 3aa6 	vadd.f32	s7, s7, s13
 80051c2:	ed13 0a01 	vldr	s0, [r3, #-4]
 80051c6:	ee61 6a07 	vmul.f32	s13, s2, s14
 80051ca:	ee3e ea2f 	vadd.f32	s28, s28, s31
 80051ce:	ee3b ba0f 	vadd.f32	s22, s22, s30
 80051d2:	ee20 7a87 	vmul.f32	s14, s1, s14
 80051d6:	ee68 4a27 	vmul.f32	s9, s16, s15
 80051da:	ee3d da2a 	vadd.f32	s26, s26, s21
 80051de:	ee7c ca8c 	vadd.f32	s25, s25, s24
 80051e2:	ee23 8a27 	vmul.f32	s16, s6, s15
 80051e6:	ee3e ea2b 	vadd.f32	s28, s28, s23
 80051ea:	ee22 4aa7 	vmul.f32	s8, s5, s15
 80051ee:	ee22 aa27 	vmul.f32	s20, s4, s15
 80051f2:	ee21 5aa7 	vmul.f32	s10, s3, s15
 80051f6:	ee21 6a27 	vmul.f32	s12, s2, s15
 80051fa:	ee78 6aa6 	vadd.f32	s13, s17, s13
 80051fe:	ee7d daae 	vadd.f32	s27, s27, s29
 8005202:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8005206:	ee3b ba09 	vadd.f32	s22, s22, s18
 800520a:	ee79 9aa5 	vadd.f32	s19, s19, s11
 800520e:	ee73 3a87 	vadd.f32	s7, s7, s14
 8005212:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005216:	f1bb 0b01 	subs.w	fp, fp, #1
 800521a:	f101 0120 	add.w	r1, r1, #32
 800521e:	ee3d da24 	vadd.f32	s26, s26, s9
 8005222:	ee7c ca88 	vadd.f32	s25, s25, s16
 8005226:	ee3e ca04 	vadd.f32	s24, s28, s8
 800522a:	ee7d ba8a 	vadd.f32	s23, s27, s20
 800522e:	ee7b aa05 	vadd.f32	s21, s22, s10
 8005232:	ee79 9a86 	vadd.f32	s19, s19, s12
 8005236:	ee76 8aa8 	vadd.f32	s17, s13, s17
 800523a:	ee73 3aa7 	vadd.f32	s7, s7, s15
 800523e:	f103 0320 	add.w	r3, r3, #32
 8005242:	f47f aed8 	bne.w	8004ff6 <arm_fir_f32+0xfe>
 8005246:	eb09 0104 	add.w	r1, r9, r4
 800524a:	46e3      	mov	fp, ip
 800524c:	b3a2      	cbz	r2, 80052b8 <arm_fir_f32+0x3c0>
 800524e:	4613      	mov	r3, r2
 8005250:	ecbb 6a01 	vldmia	fp!, {s12}
 8005254:	ecf1 7a01 	vldmia	r1!, {s15}
 8005258:	ee23 3a06 	vmul.f32	s6, s6, s12
 800525c:	ee22 4a86 	vmul.f32	s8, s5, s12
 8005260:	ee62 4a06 	vmul.f32	s9, s4, s12
 8005264:	ee21 5a86 	vmul.f32	s10, s3, s12
 8005268:	ee61 5a06 	vmul.f32	s11, s2, s12
 800526c:	ee60 6a86 	vmul.f32	s13, s1, s12
 8005270:	ee20 7a06 	vmul.f32	s14, s0, s12
 8005274:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005278:	3b01      	subs	r3, #1
 800527a:	ee3d da03 	vadd.f32	s26, s26, s6
 800527e:	ee7c ca84 	vadd.f32	s25, s25, s8
 8005282:	eeb0 3a62 	vmov.f32	s6, s5
 8005286:	ee3c ca24 	vadd.f32	s24, s24, s9
 800528a:	eef0 2a42 	vmov.f32	s5, s4
 800528e:	ee7b ba85 	vadd.f32	s23, s23, s10
 8005292:	eeb0 2a61 	vmov.f32	s4, s3
 8005296:	ee7a aaa5 	vadd.f32	s21, s21, s11
 800529a:	eef0 1a41 	vmov.f32	s3, s2
 800529e:	ee79 9aa6 	vadd.f32	s19, s19, s13
 80052a2:	eeb0 1a60 	vmov.f32	s2, s1
 80052a6:	ee78 8a87 	vadd.f32	s17, s17, s14
 80052aa:	eef0 0a40 	vmov.f32	s1, s0
 80052ae:	ee73 3a86 	vadd.f32	s7, s7, s12
 80052b2:	eeb0 0a67 	vmov.f32	s0, s15
 80052b6:	d1cb      	bne.n	8005250 <arm_fir_f32+0x358>
 80052b8:	f1be 0e01 	subs.w	lr, lr, #1
 80052bc:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 80052c0:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 80052c4:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 80052c8:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 80052cc:	ed45 aa04 	vstr	s21, [r5, #-16]
 80052d0:	ed45 9a03 	vstr	s19, [r5, #-12]
 80052d4:	ed45 8a02 	vstr	s17, [r5, #-8]
 80052d8:	ed45 3a01 	vstr	s7, [r5, #-4]
 80052dc:	f107 0720 	add.w	r7, r7, #32
 80052e0:	f106 0620 	add.w	r6, r6, #32
 80052e4:	f104 0420 	add.w	r4, r4, #32
 80052e8:	f105 0520 	add.w	r5, r5, #32
 80052ec:	f47f ae3c 	bne.w	8004f68 <arm_fir_f32+0x70>
 80052f0:	9b02      	ldr	r3, [sp, #8]
 80052f2:	9800      	ldr	r0, [sp, #0]
 80052f4:	f8dd c018 	ldr.w	ip, [sp, #24]
 80052f8:	9907      	ldr	r1, [sp, #28]
 80052fa:	015b      	lsls	r3, r3, #5
 80052fc:	4652      	mov	r2, sl
 80052fe:	4418      	add	r0, r3
 8005300:	9000      	str	r0, [sp, #0]
 8005302:	4419      	add	r1, r3
 8005304:	449c      	add	ip, r3
 8005306:	441a      	add	r2, r3
 8005308:	9b04      	ldr	r3, [sp, #16]
 800530a:	f013 0e07 	ands.w	lr, r3, #7
 800530e:	d01f      	beq.n	8005350 <arm_fir_f32+0x458>
 8005310:	9f00      	ldr	r7, [sp, #0]
 8005312:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005316:	4676      	mov	r6, lr
 8005318:	4665      	mov	r5, ip
 800531a:	f851 3b04 	ldr.w	r3, [r1], #4
 800531e:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005368 <arm_fir_f32+0x470>
 8005322:	f847 3b04 	str.w	r3, [r7], #4
 8005326:	4644      	mov	r4, r8
 8005328:	464b      	mov	r3, r9
 800532a:	4628      	mov	r0, r5
 800532c:	ecb0 7a01 	vldmia	r0!, {s14}
 8005330:	ecf4 7a01 	vldmia	r4!, {s15}
 8005334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005338:	3b01      	subs	r3, #1
 800533a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800533e:	d1f5      	bne.n	800532c <arm_fir_f32+0x434>
 8005340:	3e01      	subs	r6, #1
 8005342:	ece2 6a01 	vstmia	r2!, {s13}
 8005346:	f105 0504 	add.w	r5, r5, #4
 800534a:	d1e6      	bne.n	800531a <arm_fir_f32+0x422>
 800534c:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8005350:	9b01      	ldr	r3, [sp, #4]
 8005352:	1e59      	subs	r1, r3, #1
 8005354:	9b03      	ldr	r3, [sp, #12]
 8005356:	088e      	lsrs	r6, r1, #2
 8005358:	685c      	ldr	r4, [r3, #4]
 800535a:	d020      	beq.n	800539e <arm_fir_f32+0x4a6>
 800535c:	f104 0210 	add.w	r2, r4, #16
 8005360:	f10c 0310 	add.w	r3, ip, #16
 8005364:	4630      	mov	r0, r6
 8005366:	e001      	b.n	800536c <arm_fir_f32+0x474>
 8005368:	00000000 	.word	0x00000000
 800536c:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8005370:	f842 5c10 	str.w	r5, [r2, #-16]
 8005374:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8005378:	f842 5c0c 	str.w	r5, [r2, #-12]
 800537c:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8005380:	f842 5c08 	str.w	r5, [r2, #-8]
 8005384:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8005388:	f842 5c04 	str.w	r5, [r2, #-4]
 800538c:	3801      	subs	r0, #1
 800538e:	f103 0310 	add.w	r3, r3, #16
 8005392:	f102 0210 	add.w	r2, r2, #16
 8005396:	d1e9      	bne.n	800536c <arm_fir_f32+0x474>
 8005398:	0133      	lsls	r3, r6, #4
 800539a:	441c      	add	r4, r3
 800539c:	449c      	add	ip, r3
 800539e:	f011 0303 	ands.w	r3, r1, #3
 80053a2:	d006      	beq.n	80053b2 <arm_fir_f32+0x4ba>
 80053a4:	4622      	mov	r2, r4
 80053a6:	f85c 1b04 	ldr.w	r1, [ip], #4
 80053aa:	f842 1b04 	str.w	r1, [r2], #4
 80053ae:	3b01      	subs	r3, #1
 80053b0:	d1f9      	bne.n	80053a6 <arm_fir_f32+0x4ae>
 80053b2:	b009      	add	sp, #36	; 0x24
 80053b4:	ecbd 8b10 	vpop	{d8-d15}
 80053b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053bc:	46c3      	mov	fp, r8
 80053be:	e745      	b.n	800524c <arm_fir_f32+0x354>

080053c0 <__errno>:
 80053c0:	4b01      	ldr	r3, [pc, #4]	; (80053c8 <__errno+0x8>)
 80053c2:	6818      	ldr	r0, [r3, #0]
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	20000060 	.word	0x20000060

080053cc <__libc_init_array>:
 80053cc:	b570      	push	{r4, r5, r6, lr}
 80053ce:	4d0d      	ldr	r5, [pc, #52]	; (8005404 <__libc_init_array+0x38>)
 80053d0:	4c0d      	ldr	r4, [pc, #52]	; (8005408 <__libc_init_array+0x3c>)
 80053d2:	1b64      	subs	r4, r4, r5
 80053d4:	10a4      	asrs	r4, r4, #2
 80053d6:	2600      	movs	r6, #0
 80053d8:	42a6      	cmp	r6, r4
 80053da:	d109      	bne.n	80053f0 <__libc_init_array+0x24>
 80053dc:	4d0b      	ldr	r5, [pc, #44]	; (800540c <__libc_init_array+0x40>)
 80053de:	4c0c      	ldr	r4, [pc, #48]	; (8005410 <__libc_init_array+0x44>)
 80053e0:	f002 fcf0 	bl	8007dc4 <_init>
 80053e4:	1b64      	subs	r4, r4, r5
 80053e6:	10a4      	asrs	r4, r4, #2
 80053e8:	2600      	movs	r6, #0
 80053ea:	42a6      	cmp	r6, r4
 80053ec:	d105      	bne.n	80053fa <__libc_init_array+0x2e>
 80053ee:	bd70      	pop	{r4, r5, r6, pc}
 80053f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f4:	4798      	blx	r3
 80053f6:	3601      	adds	r6, #1
 80053f8:	e7ee      	b.n	80053d8 <__libc_init_array+0xc>
 80053fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fe:	4798      	blx	r3
 8005400:	3601      	adds	r6, #1
 8005402:	e7f2      	b.n	80053ea <__libc_init_array+0x1e>
 8005404:	08008204 	.word	0x08008204
 8005408:	08008204 	.word	0x08008204
 800540c:	08008204 	.word	0x08008204
 8005410:	08008208 	.word	0x08008208

08005414 <memset>:
 8005414:	4402      	add	r2, r0
 8005416:	4603      	mov	r3, r0
 8005418:	4293      	cmp	r3, r2
 800541a:	d100      	bne.n	800541e <memset+0xa>
 800541c:	4770      	bx	lr
 800541e:	f803 1b01 	strb.w	r1, [r3], #1
 8005422:	e7f9      	b.n	8005418 <memset+0x4>

08005424 <__cvt>:
 8005424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005428:	ec55 4b10 	vmov	r4, r5, d0
 800542c:	2d00      	cmp	r5, #0
 800542e:	460e      	mov	r6, r1
 8005430:	4619      	mov	r1, r3
 8005432:	462b      	mov	r3, r5
 8005434:	bfbb      	ittet	lt
 8005436:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800543a:	461d      	movlt	r5, r3
 800543c:	2300      	movge	r3, #0
 800543e:	232d      	movlt	r3, #45	; 0x2d
 8005440:	700b      	strb	r3, [r1, #0]
 8005442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005444:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005448:	4691      	mov	r9, r2
 800544a:	f023 0820 	bic.w	r8, r3, #32
 800544e:	bfbc      	itt	lt
 8005450:	4622      	movlt	r2, r4
 8005452:	4614      	movlt	r4, r2
 8005454:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005458:	d005      	beq.n	8005466 <__cvt+0x42>
 800545a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800545e:	d100      	bne.n	8005462 <__cvt+0x3e>
 8005460:	3601      	adds	r6, #1
 8005462:	2102      	movs	r1, #2
 8005464:	e000      	b.n	8005468 <__cvt+0x44>
 8005466:	2103      	movs	r1, #3
 8005468:	ab03      	add	r3, sp, #12
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	ab02      	add	r3, sp, #8
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	ec45 4b10 	vmov	d0, r4, r5
 8005474:	4653      	mov	r3, sl
 8005476:	4632      	mov	r2, r6
 8005478:	f000 fcca 	bl	8005e10 <_dtoa_r>
 800547c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005480:	4607      	mov	r7, r0
 8005482:	d102      	bne.n	800548a <__cvt+0x66>
 8005484:	f019 0f01 	tst.w	r9, #1
 8005488:	d022      	beq.n	80054d0 <__cvt+0xac>
 800548a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800548e:	eb07 0906 	add.w	r9, r7, r6
 8005492:	d110      	bne.n	80054b6 <__cvt+0x92>
 8005494:	783b      	ldrb	r3, [r7, #0]
 8005496:	2b30      	cmp	r3, #48	; 0x30
 8005498:	d10a      	bne.n	80054b0 <__cvt+0x8c>
 800549a:	2200      	movs	r2, #0
 800549c:	2300      	movs	r3, #0
 800549e:	4620      	mov	r0, r4
 80054a0:	4629      	mov	r1, r5
 80054a2:	f7fb fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 80054a6:	b918      	cbnz	r0, 80054b0 <__cvt+0x8c>
 80054a8:	f1c6 0601 	rsb	r6, r6, #1
 80054ac:	f8ca 6000 	str.w	r6, [sl]
 80054b0:	f8da 3000 	ldr.w	r3, [sl]
 80054b4:	4499      	add	r9, r3
 80054b6:	2200      	movs	r2, #0
 80054b8:	2300      	movs	r3, #0
 80054ba:	4620      	mov	r0, r4
 80054bc:	4629      	mov	r1, r5
 80054be:	f7fb fb03 	bl	8000ac8 <__aeabi_dcmpeq>
 80054c2:	b108      	cbz	r0, 80054c8 <__cvt+0xa4>
 80054c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80054c8:	2230      	movs	r2, #48	; 0x30
 80054ca:	9b03      	ldr	r3, [sp, #12]
 80054cc:	454b      	cmp	r3, r9
 80054ce:	d307      	bcc.n	80054e0 <__cvt+0xbc>
 80054d0:	9b03      	ldr	r3, [sp, #12]
 80054d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054d4:	1bdb      	subs	r3, r3, r7
 80054d6:	4638      	mov	r0, r7
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	b004      	add	sp, #16
 80054dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e0:	1c59      	adds	r1, r3, #1
 80054e2:	9103      	str	r1, [sp, #12]
 80054e4:	701a      	strb	r2, [r3, #0]
 80054e6:	e7f0      	b.n	80054ca <__cvt+0xa6>

080054e8 <__exponent>:
 80054e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ea:	4603      	mov	r3, r0
 80054ec:	2900      	cmp	r1, #0
 80054ee:	bfb8      	it	lt
 80054f0:	4249      	neglt	r1, r1
 80054f2:	f803 2b02 	strb.w	r2, [r3], #2
 80054f6:	bfb4      	ite	lt
 80054f8:	222d      	movlt	r2, #45	; 0x2d
 80054fa:	222b      	movge	r2, #43	; 0x2b
 80054fc:	2909      	cmp	r1, #9
 80054fe:	7042      	strb	r2, [r0, #1]
 8005500:	dd2a      	ble.n	8005558 <__exponent+0x70>
 8005502:	f10d 0407 	add.w	r4, sp, #7
 8005506:	46a4      	mov	ip, r4
 8005508:	270a      	movs	r7, #10
 800550a:	46a6      	mov	lr, r4
 800550c:	460a      	mov	r2, r1
 800550e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005512:	fb07 1516 	mls	r5, r7, r6, r1
 8005516:	3530      	adds	r5, #48	; 0x30
 8005518:	2a63      	cmp	r2, #99	; 0x63
 800551a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800551e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005522:	4631      	mov	r1, r6
 8005524:	dcf1      	bgt.n	800550a <__exponent+0x22>
 8005526:	3130      	adds	r1, #48	; 0x30
 8005528:	f1ae 0502 	sub.w	r5, lr, #2
 800552c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005530:	1c44      	adds	r4, r0, #1
 8005532:	4629      	mov	r1, r5
 8005534:	4561      	cmp	r1, ip
 8005536:	d30a      	bcc.n	800554e <__exponent+0x66>
 8005538:	f10d 0209 	add.w	r2, sp, #9
 800553c:	eba2 020e 	sub.w	r2, r2, lr
 8005540:	4565      	cmp	r5, ip
 8005542:	bf88      	it	hi
 8005544:	2200      	movhi	r2, #0
 8005546:	4413      	add	r3, r2
 8005548:	1a18      	subs	r0, r3, r0
 800554a:	b003      	add	sp, #12
 800554c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800554e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005552:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005556:	e7ed      	b.n	8005534 <__exponent+0x4c>
 8005558:	2330      	movs	r3, #48	; 0x30
 800555a:	3130      	adds	r1, #48	; 0x30
 800555c:	7083      	strb	r3, [r0, #2]
 800555e:	70c1      	strb	r1, [r0, #3]
 8005560:	1d03      	adds	r3, r0, #4
 8005562:	e7f1      	b.n	8005548 <__exponent+0x60>

08005564 <_printf_float>:
 8005564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005568:	ed2d 8b02 	vpush	{d8}
 800556c:	b08d      	sub	sp, #52	; 0x34
 800556e:	460c      	mov	r4, r1
 8005570:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005574:	4616      	mov	r6, r2
 8005576:	461f      	mov	r7, r3
 8005578:	4605      	mov	r5, r0
 800557a:	f001 fa35 	bl	80069e8 <_localeconv_r>
 800557e:	f8d0 a000 	ldr.w	sl, [r0]
 8005582:	4650      	mov	r0, sl
 8005584:	f7fa fe24 	bl	80001d0 <strlen>
 8005588:	2300      	movs	r3, #0
 800558a:	930a      	str	r3, [sp, #40]	; 0x28
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	9305      	str	r3, [sp, #20]
 8005590:	f8d8 3000 	ldr.w	r3, [r8]
 8005594:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005598:	3307      	adds	r3, #7
 800559a:	f023 0307 	bic.w	r3, r3, #7
 800559e:	f103 0208 	add.w	r2, r3, #8
 80055a2:	f8c8 2000 	str.w	r2, [r8]
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055b6:	9307      	str	r3, [sp, #28]
 80055b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80055bc:	ee08 0a10 	vmov	s16, r0
 80055c0:	4b9f      	ldr	r3, [pc, #636]	; (8005840 <_printf_float+0x2dc>)
 80055c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055ca:	f7fb faaf 	bl	8000b2c <__aeabi_dcmpun>
 80055ce:	bb88      	cbnz	r0, 8005634 <_printf_float+0xd0>
 80055d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055d4:	4b9a      	ldr	r3, [pc, #616]	; (8005840 <_printf_float+0x2dc>)
 80055d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055da:	f7fb fa89 	bl	8000af0 <__aeabi_dcmple>
 80055de:	bb48      	cbnz	r0, 8005634 <_printf_float+0xd0>
 80055e0:	2200      	movs	r2, #0
 80055e2:	2300      	movs	r3, #0
 80055e4:	4640      	mov	r0, r8
 80055e6:	4649      	mov	r1, r9
 80055e8:	f7fb fa78 	bl	8000adc <__aeabi_dcmplt>
 80055ec:	b110      	cbz	r0, 80055f4 <_printf_float+0x90>
 80055ee:	232d      	movs	r3, #45	; 0x2d
 80055f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f4:	4b93      	ldr	r3, [pc, #588]	; (8005844 <_printf_float+0x2e0>)
 80055f6:	4894      	ldr	r0, [pc, #592]	; (8005848 <_printf_float+0x2e4>)
 80055f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055fc:	bf94      	ite	ls
 80055fe:	4698      	movls	r8, r3
 8005600:	4680      	movhi	r8, r0
 8005602:	2303      	movs	r3, #3
 8005604:	6123      	str	r3, [r4, #16]
 8005606:	9b05      	ldr	r3, [sp, #20]
 8005608:	f023 0204 	bic.w	r2, r3, #4
 800560c:	6022      	str	r2, [r4, #0]
 800560e:	f04f 0900 	mov.w	r9, #0
 8005612:	9700      	str	r7, [sp, #0]
 8005614:	4633      	mov	r3, r6
 8005616:	aa0b      	add	r2, sp, #44	; 0x2c
 8005618:	4621      	mov	r1, r4
 800561a:	4628      	mov	r0, r5
 800561c:	f000 f9d8 	bl	80059d0 <_printf_common>
 8005620:	3001      	adds	r0, #1
 8005622:	f040 8090 	bne.w	8005746 <_printf_float+0x1e2>
 8005626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800562a:	b00d      	add	sp, #52	; 0x34
 800562c:	ecbd 8b02 	vpop	{d8}
 8005630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005634:	4642      	mov	r2, r8
 8005636:	464b      	mov	r3, r9
 8005638:	4640      	mov	r0, r8
 800563a:	4649      	mov	r1, r9
 800563c:	f7fb fa76 	bl	8000b2c <__aeabi_dcmpun>
 8005640:	b140      	cbz	r0, 8005654 <_printf_float+0xf0>
 8005642:	464b      	mov	r3, r9
 8005644:	2b00      	cmp	r3, #0
 8005646:	bfbc      	itt	lt
 8005648:	232d      	movlt	r3, #45	; 0x2d
 800564a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800564e:	487f      	ldr	r0, [pc, #508]	; (800584c <_printf_float+0x2e8>)
 8005650:	4b7f      	ldr	r3, [pc, #508]	; (8005850 <_printf_float+0x2ec>)
 8005652:	e7d1      	b.n	80055f8 <_printf_float+0x94>
 8005654:	6863      	ldr	r3, [r4, #4]
 8005656:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800565a:	9206      	str	r2, [sp, #24]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	d13f      	bne.n	80056e0 <_printf_float+0x17c>
 8005660:	2306      	movs	r3, #6
 8005662:	6063      	str	r3, [r4, #4]
 8005664:	9b05      	ldr	r3, [sp, #20]
 8005666:	6861      	ldr	r1, [r4, #4]
 8005668:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800566c:	2300      	movs	r3, #0
 800566e:	9303      	str	r3, [sp, #12]
 8005670:	ab0a      	add	r3, sp, #40	; 0x28
 8005672:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005676:	ab09      	add	r3, sp, #36	; 0x24
 8005678:	ec49 8b10 	vmov	d0, r8, r9
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	6022      	str	r2, [r4, #0]
 8005680:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005684:	4628      	mov	r0, r5
 8005686:	f7ff fecd 	bl	8005424 <__cvt>
 800568a:	9b06      	ldr	r3, [sp, #24]
 800568c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800568e:	2b47      	cmp	r3, #71	; 0x47
 8005690:	4680      	mov	r8, r0
 8005692:	d108      	bne.n	80056a6 <_printf_float+0x142>
 8005694:	1cc8      	adds	r0, r1, #3
 8005696:	db02      	blt.n	800569e <_printf_float+0x13a>
 8005698:	6863      	ldr	r3, [r4, #4]
 800569a:	4299      	cmp	r1, r3
 800569c:	dd41      	ble.n	8005722 <_printf_float+0x1be>
 800569e:	f1ab 0b02 	sub.w	fp, fp, #2
 80056a2:	fa5f fb8b 	uxtb.w	fp, fp
 80056a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056aa:	d820      	bhi.n	80056ee <_printf_float+0x18a>
 80056ac:	3901      	subs	r1, #1
 80056ae:	465a      	mov	r2, fp
 80056b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056b4:	9109      	str	r1, [sp, #36]	; 0x24
 80056b6:	f7ff ff17 	bl	80054e8 <__exponent>
 80056ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056bc:	1813      	adds	r3, r2, r0
 80056be:	2a01      	cmp	r2, #1
 80056c0:	4681      	mov	r9, r0
 80056c2:	6123      	str	r3, [r4, #16]
 80056c4:	dc02      	bgt.n	80056cc <_printf_float+0x168>
 80056c6:	6822      	ldr	r2, [r4, #0]
 80056c8:	07d2      	lsls	r2, r2, #31
 80056ca:	d501      	bpl.n	80056d0 <_printf_float+0x16c>
 80056cc:	3301      	adds	r3, #1
 80056ce:	6123      	str	r3, [r4, #16]
 80056d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d09c      	beq.n	8005612 <_printf_float+0xae>
 80056d8:	232d      	movs	r3, #45	; 0x2d
 80056da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056de:	e798      	b.n	8005612 <_printf_float+0xae>
 80056e0:	9a06      	ldr	r2, [sp, #24]
 80056e2:	2a47      	cmp	r2, #71	; 0x47
 80056e4:	d1be      	bne.n	8005664 <_printf_float+0x100>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1bc      	bne.n	8005664 <_printf_float+0x100>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e7b9      	b.n	8005662 <_printf_float+0xfe>
 80056ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056f2:	d118      	bne.n	8005726 <_printf_float+0x1c2>
 80056f4:	2900      	cmp	r1, #0
 80056f6:	6863      	ldr	r3, [r4, #4]
 80056f8:	dd0b      	ble.n	8005712 <_printf_float+0x1ae>
 80056fa:	6121      	str	r1, [r4, #16]
 80056fc:	b913      	cbnz	r3, 8005704 <_printf_float+0x1a0>
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	07d0      	lsls	r0, r2, #31
 8005702:	d502      	bpl.n	800570a <_printf_float+0x1a6>
 8005704:	3301      	adds	r3, #1
 8005706:	440b      	add	r3, r1
 8005708:	6123      	str	r3, [r4, #16]
 800570a:	65a1      	str	r1, [r4, #88]	; 0x58
 800570c:	f04f 0900 	mov.w	r9, #0
 8005710:	e7de      	b.n	80056d0 <_printf_float+0x16c>
 8005712:	b913      	cbnz	r3, 800571a <_printf_float+0x1b6>
 8005714:	6822      	ldr	r2, [r4, #0]
 8005716:	07d2      	lsls	r2, r2, #31
 8005718:	d501      	bpl.n	800571e <_printf_float+0x1ba>
 800571a:	3302      	adds	r3, #2
 800571c:	e7f4      	b.n	8005708 <_printf_float+0x1a4>
 800571e:	2301      	movs	r3, #1
 8005720:	e7f2      	b.n	8005708 <_printf_float+0x1a4>
 8005722:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005728:	4299      	cmp	r1, r3
 800572a:	db05      	blt.n	8005738 <_printf_float+0x1d4>
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	6121      	str	r1, [r4, #16]
 8005730:	07d8      	lsls	r0, r3, #31
 8005732:	d5ea      	bpl.n	800570a <_printf_float+0x1a6>
 8005734:	1c4b      	adds	r3, r1, #1
 8005736:	e7e7      	b.n	8005708 <_printf_float+0x1a4>
 8005738:	2900      	cmp	r1, #0
 800573a:	bfd4      	ite	le
 800573c:	f1c1 0202 	rsble	r2, r1, #2
 8005740:	2201      	movgt	r2, #1
 8005742:	4413      	add	r3, r2
 8005744:	e7e0      	b.n	8005708 <_printf_float+0x1a4>
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	055a      	lsls	r2, r3, #21
 800574a:	d407      	bmi.n	800575c <_printf_float+0x1f8>
 800574c:	6923      	ldr	r3, [r4, #16]
 800574e:	4642      	mov	r2, r8
 8005750:	4631      	mov	r1, r6
 8005752:	4628      	mov	r0, r5
 8005754:	47b8      	blx	r7
 8005756:	3001      	adds	r0, #1
 8005758:	d12c      	bne.n	80057b4 <_printf_float+0x250>
 800575a:	e764      	b.n	8005626 <_printf_float+0xc2>
 800575c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005760:	f240 80e0 	bls.w	8005924 <_printf_float+0x3c0>
 8005764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005768:	2200      	movs	r2, #0
 800576a:	2300      	movs	r3, #0
 800576c:	f7fb f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8005770:	2800      	cmp	r0, #0
 8005772:	d034      	beq.n	80057de <_printf_float+0x27a>
 8005774:	4a37      	ldr	r2, [pc, #220]	; (8005854 <_printf_float+0x2f0>)
 8005776:	2301      	movs	r3, #1
 8005778:	4631      	mov	r1, r6
 800577a:	4628      	mov	r0, r5
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	f43f af51 	beq.w	8005626 <_printf_float+0xc2>
 8005784:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005788:	429a      	cmp	r2, r3
 800578a:	db02      	blt.n	8005792 <_printf_float+0x22e>
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	07d8      	lsls	r0, r3, #31
 8005790:	d510      	bpl.n	80057b4 <_printf_float+0x250>
 8005792:	ee18 3a10 	vmov	r3, s16
 8005796:	4652      	mov	r2, sl
 8005798:	4631      	mov	r1, r6
 800579a:	4628      	mov	r0, r5
 800579c:	47b8      	blx	r7
 800579e:	3001      	adds	r0, #1
 80057a0:	f43f af41 	beq.w	8005626 <_printf_float+0xc2>
 80057a4:	f04f 0800 	mov.w	r8, #0
 80057a8:	f104 091a 	add.w	r9, r4, #26
 80057ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ae:	3b01      	subs	r3, #1
 80057b0:	4543      	cmp	r3, r8
 80057b2:	dc09      	bgt.n	80057c8 <_printf_float+0x264>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	079b      	lsls	r3, r3, #30
 80057b8:	f100 8105 	bmi.w	80059c6 <_printf_float+0x462>
 80057bc:	68e0      	ldr	r0, [r4, #12]
 80057be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057c0:	4298      	cmp	r0, r3
 80057c2:	bfb8      	it	lt
 80057c4:	4618      	movlt	r0, r3
 80057c6:	e730      	b.n	800562a <_printf_float+0xc6>
 80057c8:	2301      	movs	r3, #1
 80057ca:	464a      	mov	r2, r9
 80057cc:	4631      	mov	r1, r6
 80057ce:	4628      	mov	r0, r5
 80057d0:	47b8      	blx	r7
 80057d2:	3001      	adds	r0, #1
 80057d4:	f43f af27 	beq.w	8005626 <_printf_float+0xc2>
 80057d8:	f108 0801 	add.w	r8, r8, #1
 80057dc:	e7e6      	b.n	80057ac <_printf_float+0x248>
 80057de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	dc39      	bgt.n	8005858 <_printf_float+0x2f4>
 80057e4:	4a1b      	ldr	r2, [pc, #108]	; (8005854 <_printf_float+0x2f0>)
 80057e6:	2301      	movs	r3, #1
 80057e8:	4631      	mov	r1, r6
 80057ea:	4628      	mov	r0, r5
 80057ec:	47b8      	blx	r7
 80057ee:	3001      	adds	r0, #1
 80057f0:	f43f af19 	beq.w	8005626 <_printf_float+0xc2>
 80057f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057f8:	4313      	orrs	r3, r2
 80057fa:	d102      	bne.n	8005802 <_printf_float+0x29e>
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	07d9      	lsls	r1, r3, #31
 8005800:	d5d8      	bpl.n	80057b4 <_printf_float+0x250>
 8005802:	ee18 3a10 	vmov	r3, s16
 8005806:	4652      	mov	r2, sl
 8005808:	4631      	mov	r1, r6
 800580a:	4628      	mov	r0, r5
 800580c:	47b8      	blx	r7
 800580e:	3001      	adds	r0, #1
 8005810:	f43f af09 	beq.w	8005626 <_printf_float+0xc2>
 8005814:	f04f 0900 	mov.w	r9, #0
 8005818:	f104 0a1a 	add.w	sl, r4, #26
 800581c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581e:	425b      	negs	r3, r3
 8005820:	454b      	cmp	r3, r9
 8005822:	dc01      	bgt.n	8005828 <_printf_float+0x2c4>
 8005824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005826:	e792      	b.n	800574e <_printf_float+0x1ea>
 8005828:	2301      	movs	r3, #1
 800582a:	4652      	mov	r2, sl
 800582c:	4631      	mov	r1, r6
 800582e:	4628      	mov	r0, r5
 8005830:	47b8      	blx	r7
 8005832:	3001      	adds	r0, #1
 8005834:	f43f aef7 	beq.w	8005626 <_printf_float+0xc2>
 8005838:	f109 0901 	add.w	r9, r9, #1
 800583c:	e7ee      	b.n	800581c <_printf_float+0x2b8>
 800583e:	bf00      	nop
 8005840:	7fefffff 	.word	0x7fefffff
 8005844:	08007e24 	.word	0x08007e24
 8005848:	08007e28 	.word	0x08007e28
 800584c:	08007e30 	.word	0x08007e30
 8005850:	08007e2c 	.word	0x08007e2c
 8005854:	08007e34 	.word	0x08007e34
 8005858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800585a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800585c:	429a      	cmp	r2, r3
 800585e:	bfa8      	it	ge
 8005860:	461a      	movge	r2, r3
 8005862:	2a00      	cmp	r2, #0
 8005864:	4691      	mov	r9, r2
 8005866:	dc37      	bgt.n	80058d8 <_printf_float+0x374>
 8005868:	f04f 0b00 	mov.w	fp, #0
 800586c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005870:	f104 021a 	add.w	r2, r4, #26
 8005874:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005876:	9305      	str	r3, [sp, #20]
 8005878:	eba3 0309 	sub.w	r3, r3, r9
 800587c:	455b      	cmp	r3, fp
 800587e:	dc33      	bgt.n	80058e8 <_printf_float+0x384>
 8005880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005884:	429a      	cmp	r2, r3
 8005886:	db3b      	blt.n	8005900 <_printf_float+0x39c>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	07da      	lsls	r2, r3, #31
 800588c:	d438      	bmi.n	8005900 <_printf_float+0x39c>
 800588e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005890:	9b05      	ldr	r3, [sp, #20]
 8005892:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	eba2 0901 	sub.w	r9, r2, r1
 800589a:	4599      	cmp	r9, r3
 800589c:	bfa8      	it	ge
 800589e:	4699      	movge	r9, r3
 80058a0:	f1b9 0f00 	cmp.w	r9, #0
 80058a4:	dc35      	bgt.n	8005912 <_printf_float+0x3ae>
 80058a6:	f04f 0800 	mov.w	r8, #0
 80058aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058ae:	f104 0a1a 	add.w	sl, r4, #26
 80058b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058b6:	1a9b      	subs	r3, r3, r2
 80058b8:	eba3 0309 	sub.w	r3, r3, r9
 80058bc:	4543      	cmp	r3, r8
 80058be:	f77f af79 	ble.w	80057b4 <_printf_float+0x250>
 80058c2:	2301      	movs	r3, #1
 80058c4:	4652      	mov	r2, sl
 80058c6:	4631      	mov	r1, r6
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b8      	blx	r7
 80058cc:	3001      	adds	r0, #1
 80058ce:	f43f aeaa 	beq.w	8005626 <_printf_float+0xc2>
 80058d2:	f108 0801 	add.w	r8, r8, #1
 80058d6:	e7ec      	b.n	80058b2 <_printf_float+0x34e>
 80058d8:	4613      	mov	r3, r2
 80058da:	4631      	mov	r1, r6
 80058dc:	4642      	mov	r2, r8
 80058de:	4628      	mov	r0, r5
 80058e0:	47b8      	blx	r7
 80058e2:	3001      	adds	r0, #1
 80058e4:	d1c0      	bne.n	8005868 <_printf_float+0x304>
 80058e6:	e69e      	b.n	8005626 <_printf_float+0xc2>
 80058e8:	2301      	movs	r3, #1
 80058ea:	4631      	mov	r1, r6
 80058ec:	4628      	mov	r0, r5
 80058ee:	9205      	str	r2, [sp, #20]
 80058f0:	47b8      	blx	r7
 80058f2:	3001      	adds	r0, #1
 80058f4:	f43f ae97 	beq.w	8005626 <_printf_float+0xc2>
 80058f8:	9a05      	ldr	r2, [sp, #20]
 80058fa:	f10b 0b01 	add.w	fp, fp, #1
 80058fe:	e7b9      	b.n	8005874 <_printf_float+0x310>
 8005900:	ee18 3a10 	vmov	r3, s16
 8005904:	4652      	mov	r2, sl
 8005906:	4631      	mov	r1, r6
 8005908:	4628      	mov	r0, r5
 800590a:	47b8      	blx	r7
 800590c:	3001      	adds	r0, #1
 800590e:	d1be      	bne.n	800588e <_printf_float+0x32a>
 8005910:	e689      	b.n	8005626 <_printf_float+0xc2>
 8005912:	9a05      	ldr	r2, [sp, #20]
 8005914:	464b      	mov	r3, r9
 8005916:	4442      	add	r2, r8
 8005918:	4631      	mov	r1, r6
 800591a:	4628      	mov	r0, r5
 800591c:	47b8      	blx	r7
 800591e:	3001      	adds	r0, #1
 8005920:	d1c1      	bne.n	80058a6 <_printf_float+0x342>
 8005922:	e680      	b.n	8005626 <_printf_float+0xc2>
 8005924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005926:	2a01      	cmp	r2, #1
 8005928:	dc01      	bgt.n	800592e <_printf_float+0x3ca>
 800592a:	07db      	lsls	r3, r3, #31
 800592c:	d538      	bpl.n	80059a0 <_printf_float+0x43c>
 800592e:	2301      	movs	r3, #1
 8005930:	4642      	mov	r2, r8
 8005932:	4631      	mov	r1, r6
 8005934:	4628      	mov	r0, r5
 8005936:	47b8      	blx	r7
 8005938:	3001      	adds	r0, #1
 800593a:	f43f ae74 	beq.w	8005626 <_printf_float+0xc2>
 800593e:	ee18 3a10 	vmov	r3, s16
 8005942:	4652      	mov	r2, sl
 8005944:	4631      	mov	r1, r6
 8005946:	4628      	mov	r0, r5
 8005948:	47b8      	blx	r7
 800594a:	3001      	adds	r0, #1
 800594c:	f43f ae6b 	beq.w	8005626 <_printf_float+0xc2>
 8005950:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005954:	2200      	movs	r2, #0
 8005956:	2300      	movs	r3, #0
 8005958:	f7fb f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800595c:	b9d8      	cbnz	r0, 8005996 <_printf_float+0x432>
 800595e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005960:	f108 0201 	add.w	r2, r8, #1
 8005964:	3b01      	subs	r3, #1
 8005966:	4631      	mov	r1, r6
 8005968:	4628      	mov	r0, r5
 800596a:	47b8      	blx	r7
 800596c:	3001      	adds	r0, #1
 800596e:	d10e      	bne.n	800598e <_printf_float+0x42a>
 8005970:	e659      	b.n	8005626 <_printf_float+0xc2>
 8005972:	2301      	movs	r3, #1
 8005974:	4652      	mov	r2, sl
 8005976:	4631      	mov	r1, r6
 8005978:	4628      	mov	r0, r5
 800597a:	47b8      	blx	r7
 800597c:	3001      	adds	r0, #1
 800597e:	f43f ae52 	beq.w	8005626 <_printf_float+0xc2>
 8005982:	f108 0801 	add.w	r8, r8, #1
 8005986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005988:	3b01      	subs	r3, #1
 800598a:	4543      	cmp	r3, r8
 800598c:	dcf1      	bgt.n	8005972 <_printf_float+0x40e>
 800598e:	464b      	mov	r3, r9
 8005990:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005994:	e6dc      	b.n	8005750 <_printf_float+0x1ec>
 8005996:	f04f 0800 	mov.w	r8, #0
 800599a:	f104 0a1a 	add.w	sl, r4, #26
 800599e:	e7f2      	b.n	8005986 <_printf_float+0x422>
 80059a0:	2301      	movs	r3, #1
 80059a2:	4642      	mov	r2, r8
 80059a4:	e7df      	b.n	8005966 <_printf_float+0x402>
 80059a6:	2301      	movs	r3, #1
 80059a8:	464a      	mov	r2, r9
 80059aa:	4631      	mov	r1, r6
 80059ac:	4628      	mov	r0, r5
 80059ae:	47b8      	blx	r7
 80059b0:	3001      	adds	r0, #1
 80059b2:	f43f ae38 	beq.w	8005626 <_printf_float+0xc2>
 80059b6:	f108 0801 	add.w	r8, r8, #1
 80059ba:	68e3      	ldr	r3, [r4, #12]
 80059bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059be:	1a5b      	subs	r3, r3, r1
 80059c0:	4543      	cmp	r3, r8
 80059c2:	dcf0      	bgt.n	80059a6 <_printf_float+0x442>
 80059c4:	e6fa      	b.n	80057bc <_printf_float+0x258>
 80059c6:	f04f 0800 	mov.w	r8, #0
 80059ca:	f104 0919 	add.w	r9, r4, #25
 80059ce:	e7f4      	b.n	80059ba <_printf_float+0x456>

080059d0 <_printf_common>:
 80059d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d4:	4616      	mov	r6, r2
 80059d6:	4699      	mov	r9, r3
 80059d8:	688a      	ldr	r2, [r1, #8]
 80059da:	690b      	ldr	r3, [r1, #16]
 80059dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059e0:	4293      	cmp	r3, r2
 80059e2:	bfb8      	it	lt
 80059e4:	4613      	movlt	r3, r2
 80059e6:	6033      	str	r3, [r6, #0]
 80059e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059ec:	4607      	mov	r7, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	b10a      	cbz	r2, 80059f6 <_printf_common+0x26>
 80059f2:	3301      	adds	r3, #1
 80059f4:	6033      	str	r3, [r6, #0]
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	0699      	lsls	r1, r3, #26
 80059fa:	bf42      	ittt	mi
 80059fc:	6833      	ldrmi	r3, [r6, #0]
 80059fe:	3302      	addmi	r3, #2
 8005a00:	6033      	strmi	r3, [r6, #0]
 8005a02:	6825      	ldr	r5, [r4, #0]
 8005a04:	f015 0506 	ands.w	r5, r5, #6
 8005a08:	d106      	bne.n	8005a18 <_printf_common+0x48>
 8005a0a:	f104 0a19 	add.w	sl, r4, #25
 8005a0e:	68e3      	ldr	r3, [r4, #12]
 8005a10:	6832      	ldr	r2, [r6, #0]
 8005a12:	1a9b      	subs	r3, r3, r2
 8005a14:	42ab      	cmp	r3, r5
 8005a16:	dc26      	bgt.n	8005a66 <_printf_common+0x96>
 8005a18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a1c:	1e13      	subs	r3, r2, #0
 8005a1e:	6822      	ldr	r2, [r4, #0]
 8005a20:	bf18      	it	ne
 8005a22:	2301      	movne	r3, #1
 8005a24:	0692      	lsls	r2, r2, #26
 8005a26:	d42b      	bmi.n	8005a80 <_printf_common+0xb0>
 8005a28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	4638      	mov	r0, r7
 8005a30:	47c0      	blx	r8
 8005a32:	3001      	adds	r0, #1
 8005a34:	d01e      	beq.n	8005a74 <_printf_common+0xa4>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	68e5      	ldr	r5, [r4, #12]
 8005a3a:	6832      	ldr	r2, [r6, #0]
 8005a3c:	f003 0306 	and.w	r3, r3, #6
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	bf08      	it	eq
 8005a44:	1aad      	subeq	r5, r5, r2
 8005a46:	68a3      	ldr	r3, [r4, #8]
 8005a48:	6922      	ldr	r2, [r4, #16]
 8005a4a:	bf0c      	ite	eq
 8005a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a50:	2500      	movne	r5, #0
 8005a52:	4293      	cmp	r3, r2
 8005a54:	bfc4      	itt	gt
 8005a56:	1a9b      	subgt	r3, r3, r2
 8005a58:	18ed      	addgt	r5, r5, r3
 8005a5a:	2600      	movs	r6, #0
 8005a5c:	341a      	adds	r4, #26
 8005a5e:	42b5      	cmp	r5, r6
 8005a60:	d11a      	bne.n	8005a98 <_printf_common+0xc8>
 8005a62:	2000      	movs	r0, #0
 8005a64:	e008      	b.n	8005a78 <_printf_common+0xa8>
 8005a66:	2301      	movs	r3, #1
 8005a68:	4652      	mov	r2, sl
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	47c0      	blx	r8
 8005a70:	3001      	adds	r0, #1
 8005a72:	d103      	bne.n	8005a7c <_printf_common+0xac>
 8005a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a7c:	3501      	adds	r5, #1
 8005a7e:	e7c6      	b.n	8005a0e <_printf_common+0x3e>
 8005a80:	18e1      	adds	r1, r4, r3
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	2030      	movs	r0, #48	; 0x30
 8005a86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a8a:	4422      	add	r2, r4
 8005a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a94:	3302      	adds	r3, #2
 8005a96:	e7c7      	b.n	8005a28 <_printf_common+0x58>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	4622      	mov	r2, r4
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	47c0      	blx	r8
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d0e6      	beq.n	8005a74 <_printf_common+0xa4>
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	e7d9      	b.n	8005a5e <_printf_common+0x8e>
	...

08005aac <_printf_i>:
 8005aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	4691      	mov	r9, r2
 8005ab4:	7e27      	ldrb	r7, [r4, #24]
 8005ab6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ab8:	2f78      	cmp	r7, #120	; 0x78
 8005aba:	4680      	mov	r8, r0
 8005abc:	469a      	mov	sl, r3
 8005abe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ac2:	d807      	bhi.n	8005ad4 <_printf_i+0x28>
 8005ac4:	2f62      	cmp	r7, #98	; 0x62
 8005ac6:	d80a      	bhi.n	8005ade <_printf_i+0x32>
 8005ac8:	2f00      	cmp	r7, #0
 8005aca:	f000 80d8 	beq.w	8005c7e <_printf_i+0x1d2>
 8005ace:	2f58      	cmp	r7, #88	; 0x58
 8005ad0:	f000 80a3 	beq.w	8005c1a <_printf_i+0x16e>
 8005ad4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005adc:	e03a      	b.n	8005b54 <_printf_i+0xa8>
 8005ade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ae2:	2b15      	cmp	r3, #21
 8005ae4:	d8f6      	bhi.n	8005ad4 <_printf_i+0x28>
 8005ae6:	a001      	add	r0, pc, #4	; (adr r0, 8005aec <_printf_i+0x40>)
 8005ae8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005aec:	08005b45 	.word	0x08005b45
 8005af0:	08005b59 	.word	0x08005b59
 8005af4:	08005ad5 	.word	0x08005ad5
 8005af8:	08005ad5 	.word	0x08005ad5
 8005afc:	08005ad5 	.word	0x08005ad5
 8005b00:	08005ad5 	.word	0x08005ad5
 8005b04:	08005b59 	.word	0x08005b59
 8005b08:	08005ad5 	.word	0x08005ad5
 8005b0c:	08005ad5 	.word	0x08005ad5
 8005b10:	08005ad5 	.word	0x08005ad5
 8005b14:	08005ad5 	.word	0x08005ad5
 8005b18:	08005c65 	.word	0x08005c65
 8005b1c:	08005b89 	.word	0x08005b89
 8005b20:	08005c47 	.word	0x08005c47
 8005b24:	08005ad5 	.word	0x08005ad5
 8005b28:	08005ad5 	.word	0x08005ad5
 8005b2c:	08005c87 	.word	0x08005c87
 8005b30:	08005ad5 	.word	0x08005ad5
 8005b34:	08005b89 	.word	0x08005b89
 8005b38:	08005ad5 	.word	0x08005ad5
 8005b3c:	08005ad5 	.word	0x08005ad5
 8005b40:	08005c4f 	.word	0x08005c4f
 8005b44:	680b      	ldr	r3, [r1, #0]
 8005b46:	1d1a      	adds	r2, r3, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	600a      	str	r2, [r1, #0]
 8005b4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0a3      	b.n	8005ca0 <_printf_i+0x1f4>
 8005b58:	6825      	ldr	r5, [r4, #0]
 8005b5a:	6808      	ldr	r0, [r1, #0]
 8005b5c:	062e      	lsls	r6, r5, #24
 8005b5e:	f100 0304 	add.w	r3, r0, #4
 8005b62:	d50a      	bpl.n	8005b7a <_printf_i+0xce>
 8005b64:	6805      	ldr	r5, [r0, #0]
 8005b66:	600b      	str	r3, [r1, #0]
 8005b68:	2d00      	cmp	r5, #0
 8005b6a:	da03      	bge.n	8005b74 <_printf_i+0xc8>
 8005b6c:	232d      	movs	r3, #45	; 0x2d
 8005b6e:	426d      	negs	r5, r5
 8005b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b74:	485e      	ldr	r0, [pc, #376]	; (8005cf0 <_printf_i+0x244>)
 8005b76:	230a      	movs	r3, #10
 8005b78:	e019      	b.n	8005bae <_printf_i+0x102>
 8005b7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b7e:	6805      	ldr	r5, [r0, #0]
 8005b80:	600b      	str	r3, [r1, #0]
 8005b82:	bf18      	it	ne
 8005b84:	b22d      	sxthne	r5, r5
 8005b86:	e7ef      	b.n	8005b68 <_printf_i+0xbc>
 8005b88:	680b      	ldr	r3, [r1, #0]
 8005b8a:	6825      	ldr	r5, [r4, #0]
 8005b8c:	1d18      	adds	r0, r3, #4
 8005b8e:	6008      	str	r0, [r1, #0]
 8005b90:	0628      	lsls	r0, r5, #24
 8005b92:	d501      	bpl.n	8005b98 <_printf_i+0xec>
 8005b94:	681d      	ldr	r5, [r3, #0]
 8005b96:	e002      	b.n	8005b9e <_printf_i+0xf2>
 8005b98:	0669      	lsls	r1, r5, #25
 8005b9a:	d5fb      	bpl.n	8005b94 <_printf_i+0xe8>
 8005b9c:	881d      	ldrh	r5, [r3, #0]
 8005b9e:	4854      	ldr	r0, [pc, #336]	; (8005cf0 <_printf_i+0x244>)
 8005ba0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ba2:	bf0c      	ite	eq
 8005ba4:	2308      	moveq	r3, #8
 8005ba6:	230a      	movne	r3, #10
 8005ba8:	2100      	movs	r1, #0
 8005baa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bae:	6866      	ldr	r6, [r4, #4]
 8005bb0:	60a6      	str	r6, [r4, #8]
 8005bb2:	2e00      	cmp	r6, #0
 8005bb4:	bfa2      	ittt	ge
 8005bb6:	6821      	ldrge	r1, [r4, #0]
 8005bb8:	f021 0104 	bicge.w	r1, r1, #4
 8005bbc:	6021      	strge	r1, [r4, #0]
 8005bbe:	b90d      	cbnz	r5, 8005bc4 <_printf_i+0x118>
 8005bc0:	2e00      	cmp	r6, #0
 8005bc2:	d04d      	beq.n	8005c60 <_printf_i+0x1b4>
 8005bc4:	4616      	mov	r6, r2
 8005bc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bca:	fb03 5711 	mls	r7, r3, r1, r5
 8005bce:	5dc7      	ldrb	r7, [r0, r7]
 8005bd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bd4:	462f      	mov	r7, r5
 8005bd6:	42bb      	cmp	r3, r7
 8005bd8:	460d      	mov	r5, r1
 8005bda:	d9f4      	bls.n	8005bc6 <_printf_i+0x11a>
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d10b      	bne.n	8005bf8 <_printf_i+0x14c>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	07df      	lsls	r7, r3, #31
 8005be4:	d508      	bpl.n	8005bf8 <_printf_i+0x14c>
 8005be6:	6923      	ldr	r3, [r4, #16]
 8005be8:	6861      	ldr	r1, [r4, #4]
 8005bea:	4299      	cmp	r1, r3
 8005bec:	bfde      	ittt	le
 8005bee:	2330      	movle	r3, #48	; 0x30
 8005bf0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bf4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005bf8:	1b92      	subs	r2, r2, r6
 8005bfa:	6122      	str	r2, [r4, #16]
 8005bfc:	f8cd a000 	str.w	sl, [sp]
 8005c00:	464b      	mov	r3, r9
 8005c02:	aa03      	add	r2, sp, #12
 8005c04:	4621      	mov	r1, r4
 8005c06:	4640      	mov	r0, r8
 8005c08:	f7ff fee2 	bl	80059d0 <_printf_common>
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d14c      	bne.n	8005caa <_printf_i+0x1fe>
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c14:	b004      	add	sp, #16
 8005c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c1a:	4835      	ldr	r0, [pc, #212]	; (8005cf0 <_printf_i+0x244>)
 8005c1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	680e      	ldr	r6, [r1, #0]
 8005c24:	061f      	lsls	r7, r3, #24
 8005c26:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c2a:	600e      	str	r6, [r1, #0]
 8005c2c:	d514      	bpl.n	8005c58 <_printf_i+0x1ac>
 8005c2e:	07d9      	lsls	r1, r3, #31
 8005c30:	bf44      	itt	mi
 8005c32:	f043 0320 	orrmi.w	r3, r3, #32
 8005c36:	6023      	strmi	r3, [r4, #0]
 8005c38:	b91d      	cbnz	r5, 8005c42 <_printf_i+0x196>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	f023 0320 	bic.w	r3, r3, #32
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	2310      	movs	r3, #16
 8005c44:	e7b0      	b.n	8005ba8 <_printf_i+0xfc>
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	f043 0320 	orr.w	r3, r3, #32
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	2378      	movs	r3, #120	; 0x78
 8005c50:	4828      	ldr	r0, [pc, #160]	; (8005cf4 <_printf_i+0x248>)
 8005c52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c56:	e7e3      	b.n	8005c20 <_printf_i+0x174>
 8005c58:	065e      	lsls	r6, r3, #25
 8005c5a:	bf48      	it	mi
 8005c5c:	b2ad      	uxthmi	r5, r5
 8005c5e:	e7e6      	b.n	8005c2e <_printf_i+0x182>
 8005c60:	4616      	mov	r6, r2
 8005c62:	e7bb      	b.n	8005bdc <_printf_i+0x130>
 8005c64:	680b      	ldr	r3, [r1, #0]
 8005c66:	6826      	ldr	r6, [r4, #0]
 8005c68:	6960      	ldr	r0, [r4, #20]
 8005c6a:	1d1d      	adds	r5, r3, #4
 8005c6c:	600d      	str	r5, [r1, #0]
 8005c6e:	0635      	lsls	r5, r6, #24
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	d501      	bpl.n	8005c78 <_printf_i+0x1cc>
 8005c74:	6018      	str	r0, [r3, #0]
 8005c76:	e002      	b.n	8005c7e <_printf_i+0x1d2>
 8005c78:	0671      	lsls	r1, r6, #25
 8005c7a:	d5fb      	bpl.n	8005c74 <_printf_i+0x1c8>
 8005c7c:	8018      	strh	r0, [r3, #0]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	6123      	str	r3, [r4, #16]
 8005c82:	4616      	mov	r6, r2
 8005c84:	e7ba      	b.n	8005bfc <_printf_i+0x150>
 8005c86:	680b      	ldr	r3, [r1, #0]
 8005c88:	1d1a      	adds	r2, r3, #4
 8005c8a:	600a      	str	r2, [r1, #0]
 8005c8c:	681e      	ldr	r6, [r3, #0]
 8005c8e:	6862      	ldr	r2, [r4, #4]
 8005c90:	2100      	movs	r1, #0
 8005c92:	4630      	mov	r0, r6
 8005c94:	f7fa faa4 	bl	80001e0 <memchr>
 8005c98:	b108      	cbz	r0, 8005c9e <_printf_i+0x1f2>
 8005c9a:	1b80      	subs	r0, r0, r6
 8005c9c:	6060      	str	r0, [r4, #4]
 8005c9e:	6863      	ldr	r3, [r4, #4]
 8005ca0:	6123      	str	r3, [r4, #16]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca8:	e7a8      	b.n	8005bfc <_printf_i+0x150>
 8005caa:	6923      	ldr	r3, [r4, #16]
 8005cac:	4632      	mov	r2, r6
 8005cae:	4649      	mov	r1, r9
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	47d0      	blx	sl
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d0ab      	beq.n	8005c10 <_printf_i+0x164>
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	079b      	lsls	r3, r3, #30
 8005cbc:	d413      	bmi.n	8005ce6 <_printf_i+0x23a>
 8005cbe:	68e0      	ldr	r0, [r4, #12]
 8005cc0:	9b03      	ldr	r3, [sp, #12]
 8005cc2:	4298      	cmp	r0, r3
 8005cc4:	bfb8      	it	lt
 8005cc6:	4618      	movlt	r0, r3
 8005cc8:	e7a4      	b.n	8005c14 <_printf_i+0x168>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	4632      	mov	r2, r6
 8005cce:	4649      	mov	r1, r9
 8005cd0:	4640      	mov	r0, r8
 8005cd2:	47d0      	blx	sl
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d09b      	beq.n	8005c10 <_printf_i+0x164>
 8005cd8:	3501      	adds	r5, #1
 8005cda:	68e3      	ldr	r3, [r4, #12]
 8005cdc:	9903      	ldr	r1, [sp, #12]
 8005cde:	1a5b      	subs	r3, r3, r1
 8005ce0:	42ab      	cmp	r3, r5
 8005ce2:	dcf2      	bgt.n	8005cca <_printf_i+0x21e>
 8005ce4:	e7eb      	b.n	8005cbe <_printf_i+0x212>
 8005ce6:	2500      	movs	r5, #0
 8005ce8:	f104 0619 	add.w	r6, r4, #25
 8005cec:	e7f5      	b.n	8005cda <_printf_i+0x22e>
 8005cee:	bf00      	nop
 8005cf0:	08007e36 	.word	0x08007e36
 8005cf4:	08007e47 	.word	0x08007e47

08005cf8 <quorem>:
 8005cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	6903      	ldr	r3, [r0, #16]
 8005cfe:	690c      	ldr	r4, [r1, #16]
 8005d00:	42a3      	cmp	r3, r4
 8005d02:	4607      	mov	r7, r0
 8005d04:	f2c0 8081 	blt.w	8005e0a <quorem+0x112>
 8005d08:	3c01      	subs	r4, #1
 8005d0a:	f101 0814 	add.w	r8, r1, #20
 8005d0e:	f100 0514 	add.w	r5, r0, #20
 8005d12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d16:	9301      	str	r3, [sp, #4]
 8005d18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d20:	3301      	adds	r3, #1
 8005d22:	429a      	cmp	r2, r3
 8005d24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005d28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d30:	d331      	bcc.n	8005d96 <quorem+0x9e>
 8005d32:	f04f 0e00 	mov.w	lr, #0
 8005d36:	4640      	mov	r0, r8
 8005d38:	46ac      	mov	ip, r5
 8005d3a:	46f2      	mov	sl, lr
 8005d3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d40:	b293      	uxth	r3, r2
 8005d42:	fb06 e303 	mla	r3, r6, r3, lr
 8005d46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	ebaa 0303 	sub.w	r3, sl, r3
 8005d50:	0c12      	lsrs	r2, r2, #16
 8005d52:	f8dc a000 	ldr.w	sl, [ip]
 8005d56:	fb06 e202 	mla	r2, r6, r2, lr
 8005d5a:	fa13 f38a 	uxtah	r3, r3, sl
 8005d5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d62:	fa1f fa82 	uxth.w	sl, r2
 8005d66:	f8dc 2000 	ldr.w	r2, [ip]
 8005d6a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005d6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d78:	4581      	cmp	r9, r0
 8005d7a:	f84c 3b04 	str.w	r3, [ip], #4
 8005d7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d82:	d2db      	bcs.n	8005d3c <quorem+0x44>
 8005d84:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d88:	b92b      	cbnz	r3, 8005d96 <quorem+0x9e>
 8005d8a:	9b01      	ldr	r3, [sp, #4]
 8005d8c:	3b04      	subs	r3, #4
 8005d8e:	429d      	cmp	r5, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	d32e      	bcc.n	8005df2 <quorem+0xfa>
 8005d94:	613c      	str	r4, [r7, #16]
 8005d96:	4638      	mov	r0, r7
 8005d98:	f001 f8be 	bl	8006f18 <__mcmp>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	db24      	blt.n	8005dea <quorem+0xf2>
 8005da0:	3601      	adds	r6, #1
 8005da2:	4628      	mov	r0, r5
 8005da4:	f04f 0c00 	mov.w	ip, #0
 8005da8:	f858 2b04 	ldr.w	r2, [r8], #4
 8005dac:	f8d0 e000 	ldr.w	lr, [r0]
 8005db0:	b293      	uxth	r3, r2
 8005db2:	ebac 0303 	sub.w	r3, ip, r3
 8005db6:	0c12      	lsrs	r2, r2, #16
 8005db8:	fa13 f38e 	uxtah	r3, r3, lr
 8005dbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005dc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dca:	45c1      	cmp	r9, r8
 8005dcc:	f840 3b04 	str.w	r3, [r0], #4
 8005dd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005dd4:	d2e8      	bcs.n	8005da8 <quorem+0xb0>
 8005dd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dde:	b922      	cbnz	r2, 8005dea <quorem+0xf2>
 8005de0:	3b04      	subs	r3, #4
 8005de2:	429d      	cmp	r5, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	d30a      	bcc.n	8005dfe <quorem+0x106>
 8005de8:	613c      	str	r4, [r7, #16]
 8005dea:	4630      	mov	r0, r6
 8005dec:	b003      	add	sp, #12
 8005dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df2:	6812      	ldr	r2, [r2, #0]
 8005df4:	3b04      	subs	r3, #4
 8005df6:	2a00      	cmp	r2, #0
 8005df8:	d1cc      	bne.n	8005d94 <quorem+0x9c>
 8005dfa:	3c01      	subs	r4, #1
 8005dfc:	e7c7      	b.n	8005d8e <quorem+0x96>
 8005dfe:	6812      	ldr	r2, [r2, #0]
 8005e00:	3b04      	subs	r3, #4
 8005e02:	2a00      	cmp	r2, #0
 8005e04:	d1f0      	bne.n	8005de8 <quorem+0xf0>
 8005e06:	3c01      	subs	r4, #1
 8005e08:	e7eb      	b.n	8005de2 <quorem+0xea>
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	e7ee      	b.n	8005dec <quorem+0xf4>
	...

08005e10 <_dtoa_r>:
 8005e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e14:	ed2d 8b02 	vpush	{d8}
 8005e18:	ec57 6b10 	vmov	r6, r7, d0
 8005e1c:	b095      	sub	sp, #84	; 0x54
 8005e1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e24:	9105      	str	r1, [sp, #20]
 8005e26:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e30:	b975      	cbnz	r5, 8005e50 <_dtoa_r+0x40>
 8005e32:	2010      	movs	r0, #16
 8005e34:	f000 fddc 	bl	80069f0 <malloc>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	6260      	str	r0, [r4, #36]	; 0x24
 8005e3c:	b920      	cbnz	r0, 8005e48 <_dtoa_r+0x38>
 8005e3e:	4bb2      	ldr	r3, [pc, #712]	; (8006108 <_dtoa_r+0x2f8>)
 8005e40:	21ea      	movs	r1, #234	; 0xea
 8005e42:	48b2      	ldr	r0, [pc, #712]	; (800610c <_dtoa_r+0x2fc>)
 8005e44:	f001 fa32 	bl	80072ac <__assert_func>
 8005e48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e4c:	6005      	str	r5, [r0, #0]
 8005e4e:	60c5      	str	r5, [r0, #12]
 8005e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e52:	6819      	ldr	r1, [r3, #0]
 8005e54:	b151      	cbz	r1, 8005e6c <_dtoa_r+0x5c>
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	604a      	str	r2, [r1, #4]
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	4093      	lsls	r3, r2
 8005e5e:	608b      	str	r3, [r1, #8]
 8005e60:	4620      	mov	r0, r4
 8005e62:	f000 fe1b 	bl	8006a9c <_Bfree>
 8005e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	1e3b      	subs	r3, r7, #0
 8005e6e:	bfb9      	ittee	lt
 8005e70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e74:	9303      	strlt	r3, [sp, #12]
 8005e76:	2300      	movge	r3, #0
 8005e78:	f8c8 3000 	strge.w	r3, [r8]
 8005e7c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005e80:	4ba3      	ldr	r3, [pc, #652]	; (8006110 <_dtoa_r+0x300>)
 8005e82:	bfbc      	itt	lt
 8005e84:	2201      	movlt	r2, #1
 8005e86:	f8c8 2000 	strlt.w	r2, [r8]
 8005e8a:	ea33 0309 	bics.w	r3, r3, r9
 8005e8e:	d11b      	bne.n	8005ec8 <_dtoa_r+0xb8>
 8005e90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e92:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e96:	6013      	str	r3, [r2, #0]
 8005e98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e9c:	4333      	orrs	r3, r6
 8005e9e:	f000 857a 	beq.w	8006996 <_dtoa_r+0xb86>
 8005ea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ea4:	b963      	cbnz	r3, 8005ec0 <_dtoa_r+0xb0>
 8005ea6:	4b9b      	ldr	r3, [pc, #620]	; (8006114 <_dtoa_r+0x304>)
 8005ea8:	e024      	b.n	8005ef4 <_dtoa_r+0xe4>
 8005eaa:	4b9b      	ldr	r3, [pc, #620]	; (8006118 <_dtoa_r+0x308>)
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	3308      	adds	r3, #8
 8005eb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	9800      	ldr	r0, [sp, #0]
 8005eb6:	b015      	add	sp, #84	; 0x54
 8005eb8:	ecbd 8b02 	vpop	{d8}
 8005ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec0:	4b94      	ldr	r3, [pc, #592]	; (8006114 <_dtoa_r+0x304>)
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	3303      	adds	r3, #3
 8005ec6:	e7f3      	b.n	8005eb0 <_dtoa_r+0xa0>
 8005ec8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	ec51 0b17 	vmov	r0, r1, d7
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005ed8:	f7fa fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005edc:	4680      	mov	r8, r0
 8005ede:	b158      	cbz	r0, 8005ef8 <_dtoa_r+0xe8>
 8005ee0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 8551 	beq.w	8006990 <_dtoa_r+0xb80>
 8005eee:	488b      	ldr	r0, [pc, #556]	; (800611c <_dtoa_r+0x30c>)
 8005ef0:	6018      	str	r0, [r3, #0]
 8005ef2:	1e43      	subs	r3, r0, #1
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	e7dd      	b.n	8005eb4 <_dtoa_r+0xa4>
 8005ef8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005efc:	aa12      	add	r2, sp, #72	; 0x48
 8005efe:	a913      	add	r1, sp, #76	; 0x4c
 8005f00:	4620      	mov	r0, r4
 8005f02:	f001 f8ad 	bl	8007060 <__d2b>
 8005f06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f0a:	4683      	mov	fp, r0
 8005f0c:	2d00      	cmp	r5, #0
 8005f0e:	d07c      	beq.n	800600a <_dtoa_r+0x1fa>
 8005f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005f1e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005f22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005f26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f2a:	4b7d      	ldr	r3, [pc, #500]	; (8006120 <_dtoa_r+0x310>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	4630      	mov	r0, r6
 8005f30:	4639      	mov	r1, r7
 8005f32:	f7fa f9a9 	bl	8000288 <__aeabi_dsub>
 8005f36:	a36e      	add	r3, pc, #440	; (adr r3, 80060f0 <_dtoa_r+0x2e0>)
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	f7fa fb5c 	bl	80005f8 <__aeabi_dmul>
 8005f40:	a36d      	add	r3, pc, #436	; (adr r3, 80060f8 <_dtoa_r+0x2e8>)
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	f7fa f9a1 	bl	800028c <__adddf3>
 8005f4a:	4606      	mov	r6, r0
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	460f      	mov	r7, r1
 8005f50:	f7fa fae8 	bl	8000524 <__aeabi_i2d>
 8005f54:	a36a      	add	r3, pc, #424	; (adr r3, 8006100 <_dtoa_r+0x2f0>)
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	f7fa fb4d 	bl	80005f8 <__aeabi_dmul>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4630      	mov	r0, r6
 8005f64:	4639      	mov	r1, r7
 8005f66:	f7fa f991 	bl	800028c <__adddf3>
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	460f      	mov	r7, r1
 8005f6e:	f7fa fdf3 	bl	8000b58 <__aeabi_d2iz>
 8005f72:	2200      	movs	r2, #0
 8005f74:	4682      	mov	sl, r0
 8005f76:	2300      	movs	r3, #0
 8005f78:	4630      	mov	r0, r6
 8005f7a:	4639      	mov	r1, r7
 8005f7c:	f7fa fdae 	bl	8000adc <__aeabi_dcmplt>
 8005f80:	b148      	cbz	r0, 8005f96 <_dtoa_r+0x186>
 8005f82:	4650      	mov	r0, sl
 8005f84:	f7fa face 	bl	8000524 <__aeabi_i2d>
 8005f88:	4632      	mov	r2, r6
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	f7fa fd9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f90:	b908      	cbnz	r0, 8005f96 <_dtoa_r+0x186>
 8005f92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f96:	f1ba 0f16 	cmp.w	sl, #22
 8005f9a:	d854      	bhi.n	8006046 <_dtoa_r+0x236>
 8005f9c:	4b61      	ldr	r3, [pc, #388]	; (8006124 <_dtoa_r+0x314>)
 8005f9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005faa:	f7fa fd97 	bl	8000adc <__aeabi_dcmplt>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d04b      	beq.n	800604a <_dtoa_r+0x23a>
 8005fb2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	930e      	str	r3, [sp, #56]	; 0x38
 8005fba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fbc:	1b5d      	subs	r5, r3, r5
 8005fbe:	1e6b      	subs	r3, r5, #1
 8005fc0:	9304      	str	r3, [sp, #16]
 8005fc2:	bf43      	ittte	mi
 8005fc4:	2300      	movmi	r3, #0
 8005fc6:	f1c5 0801 	rsbmi	r8, r5, #1
 8005fca:	9304      	strmi	r3, [sp, #16]
 8005fcc:	f04f 0800 	movpl.w	r8, #0
 8005fd0:	f1ba 0f00 	cmp.w	sl, #0
 8005fd4:	db3b      	blt.n	800604e <_dtoa_r+0x23e>
 8005fd6:	9b04      	ldr	r3, [sp, #16]
 8005fd8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005fdc:	4453      	add	r3, sl
 8005fde:	9304      	str	r3, [sp, #16]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	9306      	str	r3, [sp, #24]
 8005fe4:	9b05      	ldr	r3, [sp, #20]
 8005fe6:	2b09      	cmp	r3, #9
 8005fe8:	d869      	bhi.n	80060be <_dtoa_r+0x2ae>
 8005fea:	2b05      	cmp	r3, #5
 8005fec:	bfc4      	itt	gt
 8005fee:	3b04      	subgt	r3, #4
 8005ff0:	9305      	strgt	r3, [sp, #20]
 8005ff2:	9b05      	ldr	r3, [sp, #20]
 8005ff4:	f1a3 0302 	sub.w	r3, r3, #2
 8005ff8:	bfcc      	ite	gt
 8005ffa:	2500      	movgt	r5, #0
 8005ffc:	2501      	movle	r5, #1
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d869      	bhi.n	80060d6 <_dtoa_r+0x2c6>
 8006002:	e8df f003 	tbb	[pc, r3]
 8006006:	4e2c      	.short	0x4e2c
 8006008:	5a4c      	.short	0x5a4c
 800600a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800600e:	441d      	add	r5, r3
 8006010:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006014:	2b20      	cmp	r3, #32
 8006016:	bfc1      	itttt	gt
 8006018:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800601c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006020:	fa09 f303 	lslgt.w	r3, r9, r3
 8006024:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006028:	bfda      	itte	le
 800602a:	f1c3 0320 	rsble	r3, r3, #32
 800602e:	fa06 f003 	lslle.w	r0, r6, r3
 8006032:	4318      	orrgt	r0, r3
 8006034:	f7fa fa66 	bl	8000504 <__aeabi_ui2d>
 8006038:	2301      	movs	r3, #1
 800603a:	4606      	mov	r6, r0
 800603c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006040:	3d01      	subs	r5, #1
 8006042:	9310      	str	r3, [sp, #64]	; 0x40
 8006044:	e771      	b.n	8005f2a <_dtoa_r+0x11a>
 8006046:	2301      	movs	r3, #1
 8006048:	e7b6      	b.n	8005fb8 <_dtoa_r+0x1a8>
 800604a:	900e      	str	r0, [sp, #56]	; 0x38
 800604c:	e7b5      	b.n	8005fba <_dtoa_r+0x1aa>
 800604e:	f1ca 0300 	rsb	r3, sl, #0
 8006052:	9306      	str	r3, [sp, #24]
 8006054:	2300      	movs	r3, #0
 8006056:	eba8 080a 	sub.w	r8, r8, sl
 800605a:	930d      	str	r3, [sp, #52]	; 0x34
 800605c:	e7c2      	b.n	8005fe4 <_dtoa_r+0x1d4>
 800605e:	2300      	movs	r3, #0
 8006060:	9308      	str	r3, [sp, #32]
 8006062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006064:	2b00      	cmp	r3, #0
 8006066:	dc39      	bgt.n	80060dc <_dtoa_r+0x2cc>
 8006068:	f04f 0901 	mov.w	r9, #1
 800606c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006070:	464b      	mov	r3, r9
 8006072:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006076:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006078:	2200      	movs	r2, #0
 800607a:	6042      	str	r2, [r0, #4]
 800607c:	2204      	movs	r2, #4
 800607e:	f102 0614 	add.w	r6, r2, #20
 8006082:	429e      	cmp	r6, r3
 8006084:	6841      	ldr	r1, [r0, #4]
 8006086:	d92f      	bls.n	80060e8 <_dtoa_r+0x2d8>
 8006088:	4620      	mov	r0, r4
 800608a:	f000 fcc7 	bl	8006a1c <_Balloc>
 800608e:	9000      	str	r0, [sp, #0]
 8006090:	2800      	cmp	r0, #0
 8006092:	d14b      	bne.n	800612c <_dtoa_r+0x31c>
 8006094:	4b24      	ldr	r3, [pc, #144]	; (8006128 <_dtoa_r+0x318>)
 8006096:	4602      	mov	r2, r0
 8006098:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800609c:	e6d1      	b.n	8005e42 <_dtoa_r+0x32>
 800609e:	2301      	movs	r3, #1
 80060a0:	e7de      	b.n	8006060 <_dtoa_r+0x250>
 80060a2:	2300      	movs	r3, #0
 80060a4:	9308      	str	r3, [sp, #32]
 80060a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a8:	eb0a 0903 	add.w	r9, sl, r3
 80060ac:	f109 0301 	add.w	r3, r9, #1
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	9301      	str	r3, [sp, #4]
 80060b4:	bfb8      	it	lt
 80060b6:	2301      	movlt	r3, #1
 80060b8:	e7dd      	b.n	8006076 <_dtoa_r+0x266>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e7f2      	b.n	80060a4 <_dtoa_r+0x294>
 80060be:	2501      	movs	r5, #1
 80060c0:	2300      	movs	r3, #0
 80060c2:	9305      	str	r3, [sp, #20]
 80060c4:	9508      	str	r5, [sp, #32]
 80060c6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80060d0:	2312      	movs	r3, #18
 80060d2:	9209      	str	r2, [sp, #36]	; 0x24
 80060d4:	e7cf      	b.n	8006076 <_dtoa_r+0x266>
 80060d6:	2301      	movs	r3, #1
 80060d8:	9308      	str	r3, [sp, #32]
 80060da:	e7f4      	b.n	80060c6 <_dtoa_r+0x2b6>
 80060dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80060e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80060e4:	464b      	mov	r3, r9
 80060e6:	e7c6      	b.n	8006076 <_dtoa_r+0x266>
 80060e8:	3101      	adds	r1, #1
 80060ea:	6041      	str	r1, [r0, #4]
 80060ec:	0052      	lsls	r2, r2, #1
 80060ee:	e7c6      	b.n	800607e <_dtoa_r+0x26e>
 80060f0:	636f4361 	.word	0x636f4361
 80060f4:	3fd287a7 	.word	0x3fd287a7
 80060f8:	8b60c8b3 	.word	0x8b60c8b3
 80060fc:	3fc68a28 	.word	0x3fc68a28
 8006100:	509f79fb 	.word	0x509f79fb
 8006104:	3fd34413 	.word	0x3fd34413
 8006108:	08007e65 	.word	0x08007e65
 800610c:	08007e7c 	.word	0x08007e7c
 8006110:	7ff00000 	.word	0x7ff00000
 8006114:	08007e61 	.word	0x08007e61
 8006118:	08007e58 	.word	0x08007e58
 800611c:	08007e35 	.word	0x08007e35
 8006120:	3ff80000 	.word	0x3ff80000
 8006124:	08007f78 	.word	0x08007f78
 8006128:	08007edb 	.word	0x08007edb
 800612c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800612e:	9a00      	ldr	r2, [sp, #0]
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	9b01      	ldr	r3, [sp, #4]
 8006134:	2b0e      	cmp	r3, #14
 8006136:	f200 80ad 	bhi.w	8006294 <_dtoa_r+0x484>
 800613a:	2d00      	cmp	r5, #0
 800613c:	f000 80aa 	beq.w	8006294 <_dtoa_r+0x484>
 8006140:	f1ba 0f00 	cmp.w	sl, #0
 8006144:	dd36      	ble.n	80061b4 <_dtoa_r+0x3a4>
 8006146:	4ac3      	ldr	r2, [pc, #780]	; (8006454 <_dtoa_r+0x644>)
 8006148:	f00a 030f 	and.w	r3, sl, #15
 800614c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006150:	ed93 7b00 	vldr	d7, [r3]
 8006154:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006158:	ea4f 172a 	mov.w	r7, sl, asr #4
 800615c:	eeb0 8a47 	vmov.f32	s16, s14
 8006160:	eef0 8a67 	vmov.f32	s17, s15
 8006164:	d016      	beq.n	8006194 <_dtoa_r+0x384>
 8006166:	4bbc      	ldr	r3, [pc, #752]	; (8006458 <_dtoa_r+0x648>)
 8006168:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800616c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006170:	f7fa fb6c 	bl	800084c <__aeabi_ddiv>
 8006174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006178:	f007 070f 	and.w	r7, r7, #15
 800617c:	2503      	movs	r5, #3
 800617e:	4eb6      	ldr	r6, [pc, #728]	; (8006458 <_dtoa_r+0x648>)
 8006180:	b957      	cbnz	r7, 8006198 <_dtoa_r+0x388>
 8006182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006186:	ec53 2b18 	vmov	r2, r3, d8
 800618a:	f7fa fb5f 	bl	800084c <__aeabi_ddiv>
 800618e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006192:	e029      	b.n	80061e8 <_dtoa_r+0x3d8>
 8006194:	2502      	movs	r5, #2
 8006196:	e7f2      	b.n	800617e <_dtoa_r+0x36e>
 8006198:	07f9      	lsls	r1, r7, #31
 800619a:	d508      	bpl.n	80061ae <_dtoa_r+0x39e>
 800619c:	ec51 0b18 	vmov	r0, r1, d8
 80061a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061a4:	f7fa fa28 	bl	80005f8 <__aeabi_dmul>
 80061a8:	ec41 0b18 	vmov	d8, r0, r1
 80061ac:	3501      	adds	r5, #1
 80061ae:	107f      	asrs	r7, r7, #1
 80061b0:	3608      	adds	r6, #8
 80061b2:	e7e5      	b.n	8006180 <_dtoa_r+0x370>
 80061b4:	f000 80a6 	beq.w	8006304 <_dtoa_r+0x4f4>
 80061b8:	f1ca 0600 	rsb	r6, sl, #0
 80061bc:	4ba5      	ldr	r3, [pc, #660]	; (8006454 <_dtoa_r+0x644>)
 80061be:	4fa6      	ldr	r7, [pc, #664]	; (8006458 <_dtoa_r+0x648>)
 80061c0:	f006 020f 	and.w	r2, r6, #15
 80061c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061d0:	f7fa fa12 	bl	80005f8 <__aeabi_dmul>
 80061d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061d8:	1136      	asrs	r6, r6, #4
 80061da:	2300      	movs	r3, #0
 80061dc:	2502      	movs	r5, #2
 80061de:	2e00      	cmp	r6, #0
 80061e0:	f040 8085 	bne.w	80062ee <_dtoa_r+0x4de>
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1d2      	bne.n	800618e <_dtoa_r+0x37e>
 80061e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 808c 	beq.w	8006308 <_dtoa_r+0x4f8>
 80061f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80061f4:	4b99      	ldr	r3, [pc, #612]	; (800645c <_dtoa_r+0x64c>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	4630      	mov	r0, r6
 80061fa:	4639      	mov	r1, r7
 80061fc:	f7fa fc6e 	bl	8000adc <__aeabi_dcmplt>
 8006200:	2800      	cmp	r0, #0
 8006202:	f000 8081 	beq.w	8006308 <_dtoa_r+0x4f8>
 8006206:	9b01      	ldr	r3, [sp, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d07d      	beq.n	8006308 <_dtoa_r+0x4f8>
 800620c:	f1b9 0f00 	cmp.w	r9, #0
 8006210:	dd3c      	ble.n	800628c <_dtoa_r+0x47c>
 8006212:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006216:	9307      	str	r3, [sp, #28]
 8006218:	2200      	movs	r2, #0
 800621a:	4b91      	ldr	r3, [pc, #580]	; (8006460 <_dtoa_r+0x650>)
 800621c:	4630      	mov	r0, r6
 800621e:	4639      	mov	r1, r7
 8006220:	f7fa f9ea 	bl	80005f8 <__aeabi_dmul>
 8006224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006228:	3501      	adds	r5, #1
 800622a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800622e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006232:	4628      	mov	r0, r5
 8006234:	f7fa f976 	bl	8000524 <__aeabi_i2d>
 8006238:	4632      	mov	r2, r6
 800623a:	463b      	mov	r3, r7
 800623c:	f7fa f9dc 	bl	80005f8 <__aeabi_dmul>
 8006240:	4b88      	ldr	r3, [pc, #544]	; (8006464 <_dtoa_r+0x654>)
 8006242:	2200      	movs	r2, #0
 8006244:	f7fa f822 	bl	800028c <__adddf3>
 8006248:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800624c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006250:	9303      	str	r3, [sp, #12]
 8006252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006254:	2b00      	cmp	r3, #0
 8006256:	d15c      	bne.n	8006312 <_dtoa_r+0x502>
 8006258:	4b83      	ldr	r3, [pc, #524]	; (8006468 <_dtoa_r+0x658>)
 800625a:	2200      	movs	r2, #0
 800625c:	4630      	mov	r0, r6
 800625e:	4639      	mov	r1, r7
 8006260:	f7fa f812 	bl	8000288 <__aeabi_dsub>
 8006264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006268:	4606      	mov	r6, r0
 800626a:	460f      	mov	r7, r1
 800626c:	f7fa fc54 	bl	8000b18 <__aeabi_dcmpgt>
 8006270:	2800      	cmp	r0, #0
 8006272:	f040 8296 	bne.w	80067a2 <_dtoa_r+0x992>
 8006276:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800627a:	4630      	mov	r0, r6
 800627c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006280:	4639      	mov	r1, r7
 8006282:	f7fa fc2b 	bl	8000adc <__aeabi_dcmplt>
 8006286:	2800      	cmp	r0, #0
 8006288:	f040 8288 	bne.w	800679c <_dtoa_r+0x98c>
 800628c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006290:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006294:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006296:	2b00      	cmp	r3, #0
 8006298:	f2c0 8158 	blt.w	800654c <_dtoa_r+0x73c>
 800629c:	f1ba 0f0e 	cmp.w	sl, #14
 80062a0:	f300 8154 	bgt.w	800654c <_dtoa_r+0x73c>
 80062a4:	4b6b      	ldr	r3, [pc, #428]	; (8006454 <_dtoa_r+0x644>)
 80062a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f280 80e3 	bge.w	800647c <_dtoa_r+0x66c>
 80062b6:	9b01      	ldr	r3, [sp, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f300 80df 	bgt.w	800647c <_dtoa_r+0x66c>
 80062be:	f040 826d 	bne.w	800679c <_dtoa_r+0x98c>
 80062c2:	4b69      	ldr	r3, [pc, #420]	; (8006468 <_dtoa_r+0x658>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	4640      	mov	r0, r8
 80062c8:	4649      	mov	r1, r9
 80062ca:	f7fa f995 	bl	80005f8 <__aeabi_dmul>
 80062ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062d2:	f7fa fc17 	bl	8000b04 <__aeabi_dcmpge>
 80062d6:	9e01      	ldr	r6, [sp, #4]
 80062d8:	4637      	mov	r7, r6
 80062da:	2800      	cmp	r0, #0
 80062dc:	f040 8243 	bne.w	8006766 <_dtoa_r+0x956>
 80062e0:	9d00      	ldr	r5, [sp, #0]
 80062e2:	2331      	movs	r3, #49	; 0x31
 80062e4:	f805 3b01 	strb.w	r3, [r5], #1
 80062e8:	f10a 0a01 	add.w	sl, sl, #1
 80062ec:	e23f      	b.n	800676e <_dtoa_r+0x95e>
 80062ee:	07f2      	lsls	r2, r6, #31
 80062f0:	d505      	bpl.n	80062fe <_dtoa_r+0x4ee>
 80062f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f6:	f7fa f97f 	bl	80005f8 <__aeabi_dmul>
 80062fa:	3501      	adds	r5, #1
 80062fc:	2301      	movs	r3, #1
 80062fe:	1076      	asrs	r6, r6, #1
 8006300:	3708      	adds	r7, #8
 8006302:	e76c      	b.n	80061de <_dtoa_r+0x3ce>
 8006304:	2502      	movs	r5, #2
 8006306:	e76f      	b.n	80061e8 <_dtoa_r+0x3d8>
 8006308:	9b01      	ldr	r3, [sp, #4]
 800630a:	f8cd a01c 	str.w	sl, [sp, #28]
 800630e:	930c      	str	r3, [sp, #48]	; 0x30
 8006310:	e78d      	b.n	800622e <_dtoa_r+0x41e>
 8006312:	9900      	ldr	r1, [sp, #0]
 8006314:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006316:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006318:	4b4e      	ldr	r3, [pc, #312]	; (8006454 <_dtoa_r+0x644>)
 800631a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800631e:	4401      	add	r1, r0
 8006320:	9102      	str	r1, [sp, #8]
 8006322:	9908      	ldr	r1, [sp, #32]
 8006324:	eeb0 8a47 	vmov.f32	s16, s14
 8006328:	eef0 8a67 	vmov.f32	s17, s15
 800632c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006330:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006334:	2900      	cmp	r1, #0
 8006336:	d045      	beq.n	80063c4 <_dtoa_r+0x5b4>
 8006338:	494c      	ldr	r1, [pc, #304]	; (800646c <_dtoa_r+0x65c>)
 800633a:	2000      	movs	r0, #0
 800633c:	f7fa fa86 	bl	800084c <__aeabi_ddiv>
 8006340:	ec53 2b18 	vmov	r2, r3, d8
 8006344:	f7f9 ffa0 	bl	8000288 <__aeabi_dsub>
 8006348:	9d00      	ldr	r5, [sp, #0]
 800634a:	ec41 0b18 	vmov	d8, r0, r1
 800634e:	4639      	mov	r1, r7
 8006350:	4630      	mov	r0, r6
 8006352:	f7fa fc01 	bl	8000b58 <__aeabi_d2iz>
 8006356:	900c      	str	r0, [sp, #48]	; 0x30
 8006358:	f7fa f8e4 	bl	8000524 <__aeabi_i2d>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4630      	mov	r0, r6
 8006362:	4639      	mov	r1, r7
 8006364:	f7f9 ff90 	bl	8000288 <__aeabi_dsub>
 8006368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800636a:	3330      	adds	r3, #48	; 0x30
 800636c:	f805 3b01 	strb.w	r3, [r5], #1
 8006370:	ec53 2b18 	vmov	r2, r3, d8
 8006374:	4606      	mov	r6, r0
 8006376:	460f      	mov	r7, r1
 8006378:	f7fa fbb0 	bl	8000adc <__aeabi_dcmplt>
 800637c:	2800      	cmp	r0, #0
 800637e:	d165      	bne.n	800644c <_dtoa_r+0x63c>
 8006380:	4632      	mov	r2, r6
 8006382:	463b      	mov	r3, r7
 8006384:	4935      	ldr	r1, [pc, #212]	; (800645c <_dtoa_r+0x64c>)
 8006386:	2000      	movs	r0, #0
 8006388:	f7f9 ff7e 	bl	8000288 <__aeabi_dsub>
 800638c:	ec53 2b18 	vmov	r2, r3, d8
 8006390:	f7fa fba4 	bl	8000adc <__aeabi_dcmplt>
 8006394:	2800      	cmp	r0, #0
 8006396:	f040 80b9 	bne.w	800650c <_dtoa_r+0x6fc>
 800639a:	9b02      	ldr	r3, [sp, #8]
 800639c:	429d      	cmp	r5, r3
 800639e:	f43f af75 	beq.w	800628c <_dtoa_r+0x47c>
 80063a2:	4b2f      	ldr	r3, [pc, #188]	; (8006460 <_dtoa_r+0x650>)
 80063a4:	ec51 0b18 	vmov	r0, r1, d8
 80063a8:	2200      	movs	r2, #0
 80063aa:	f7fa f925 	bl	80005f8 <__aeabi_dmul>
 80063ae:	4b2c      	ldr	r3, [pc, #176]	; (8006460 <_dtoa_r+0x650>)
 80063b0:	ec41 0b18 	vmov	d8, r0, r1
 80063b4:	2200      	movs	r2, #0
 80063b6:	4630      	mov	r0, r6
 80063b8:	4639      	mov	r1, r7
 80063ba:	f7fa f91d 	bl	80005f8 <__aeabi_dmul>
 80063be:	4606      	mov	r6, r0
 80063c0:	460f      	mov	r7, r1
 80063c2:	e7c4      	b.n	800634e <_dtoa_r+0x53e>
 80063c4:	ec51 0b17 	vmov	r0, r1, d7
 80063c8:	f7fa f916 	bl	80005f8 <__aeabi_dmul>
 80063cc:	9b02      	ldr	r3, [sp, #8]
 80063ce:	9d00      	ldr	r5, [sp, #0]
 80063d0:	930c      	str	r3, [sp, #48]	; 0x30
 80063d2:	ec41 0b18 	vmov	d8, r0, r1
 80063d6:	4639      	mov	r1, r7
 80063d8:	4630      	mov	r0, r6
 80063da:	f7fa fbbd 	bl	8000b58 <__aeabi_d2iz>
 80063de:	9011      	str	r0, [sp, #68]	; 0x44
 80063e0:	f7fa f8a0 	bl	8000524 <__aeabi_i2d>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4630      	mov	r0, r6
 80063ea:	4639      	mov	r1, r7
 80063ec:	f7f9 ff4c 	bl	8000288 <__aeabi_dsub>
 80063f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063f2:	3330      	adds	r3, #48	; 0x30
 80063f4:	f805 3b01 	strb.w	r3, [r5], #1
 80063f8:	9b02      	ldr	r3, [sp, #8]
 80063fa:	429d      	cmp	r5, r3
 80063fc:	4606      	mov	r6, r0
 80063fe:	460f      	mov	r7, r1
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	d134      	bne.n	8006470 <_dtoa_r+0x660>
 8006406:	4b19      	ldr	r3, [pc, #100]	; (800646c <_dtoa_r+0x65c>)
 8006408:	ec51 0b18 	vmov	r0, r1, d8
 800640c:	f7f9 ff3e 	bl	800028c <__adddf3>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4630      	mov	r0, r6
 8006416:	4639      	mov	r1, r7
 8006418:	f7fa fb7e 	bl	8000b18 <__aeabi_dcmpgt>
 800641c:	2800      	cmp	r0, #0
 800641e:	d175      	bne.n	800650c <_dtoa_r+0x6fc>
 8006420:	ec53 2b18 	vmov	r2, r3, d8
 8006424:	4911      	ldr	r1, [pc, #68]	; (800646c <_dtoa_r+0x65c>)
 8006426:	2000      	movs	r0, #0
 8006428:	f7f9 ff2e 	bl	8000288 <__aeabi_dsub>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4630      	mov	r0, r6
 8006432:	4639      	mov	r1, r7
 8006434:	f7fa fb52 	bl	8000adc <__aeabi_dcmplt>
 8006438:	2800      	cmp	r0, #0
 800643a:	f43f af27 	beq.w	800628c <_dtoa_r+0x47c>
 800643e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006440:	1e6b      	subs	r3, r5, #1
 8006442:	930c      	str	r3, [sp, #48]	; 0x30
 8006444:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006448:	2b30      	cmp	r3, #48	; 0x30
 800644a:	d0f8      	beq.n	800643e <_dtoa_r+0x62e>
 800644c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006450:	e04a      	b.n	80064e8 <_dtoa_r+0x6d8>
 8006452:	bf00      	nop
 8006454:	08007f78 	.word	0x08007f78
 8006458:	08007f50 	.word	0x08007f50
 800645c:	3ff00000 	.word	0x3ff00000
 8006460:	40240000 	.word	0x40240000
 8006464:	401c0000 	.word	0x401c0000
 8006468:	40140000 	.word	0x40140000
 800646c:	3fe00000 	.word	0x3fe00000
 8006470:	4baf      	ldr	r3, [pc, #700]	; (8006730 <_dtoa_r+0x920>)
 8006472:	f7fa f8c1 	bl	80005f8 <__aeabi_dmul>
 8006476:	4606      	mov	r6, r0
 8006478:	460f      	mov	r7, r1
 800647a:	e7ac      	b.n	80063d6 <_dtoa_r+0x5c6>
 800647c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006480:	9d00      	ldr	r5, [sp, #0]
 8006482:	4642      	mov	r2, r8
 8006484:	464b      	mov	r3, r9
 8006486:	4630      	mov	r0, r6
 8006488:	4639      	mov	r1, r7
 800648a:	f7fa f9df 	bl	800084c <__aeabi_ddiv>
 800648e:	f7fa fb63 	bl	8000b58 <__aeabi_d2iz>
 8006492:	9002      	str	r0, [sp, #8]
 8006494:	f7fa f846 	bl	8000524 <__aeabi_i2d>
 8006498:	4642      	mov	r2, r8
 800649a:	464b      	mov	r3, r9
 800649c:	f7fa f8ac 	bl	80005f8 <__aeabi_dmul>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4630      	mov	r0, r6
 80064a6:	4639      	mov	r1, r7
 80064a8:	f7f9 feee 	bl	8000288 <__aeabi_dsub>
 80064ac:	9e02      	ldr	r6, [sp, #8]
 80064ae:	9f01      	ldr	r7, [sp, #4]
 80064b0:	3630      	adds	r6, #48	; 0x30
 80064b2:	f805 6b01 	strb.w	r6, [r5], #1
 80064b6:	9e00      	ldr	r6, [sp, #0]
 80064b8:	1bae      	subs	r6, r5, r6
 80064ba:	42b7      	cmp	r7, r6
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	d137      	bne.n	8006532 <_dtoa_r+0x722>
 80064c2:	f7f9 fee3 	bl	800028c <__adddf3>
 80064c6:	4642      	mov	r2, r8
 80064c8:	464b      	mov	r3, r9
 80064ca:	4606      	mov	r6, r0
 80064cc:	460f      	mov	r7, r1
 80064ce:	f7fa fb23 	bl	8000b18 <__aeabi_dcmpgt>
 80064d2:	b9c8      	cbnz	r0, 8006508 <_dtoa_r+0x6f8>
 80064d4:	4642      	mov	r2, r8
 80064d6:	464b      	mov	r3, r9
 80064d8:	4630      	mov	r0, r6
 80064da:	4639      	mov	r1, r7
 80064dc:	f7fa faf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80064e0:	b110      	cbz	r0, 80064e8 <_dtoa_r+0x6d8>
 80064e2:	9b02      	ldr	r3, [sp, #8]
 80064e4:	07d9      	lsls	r1, r3, #31
 80064e6:	d40f      	bmi.n	8006508 <_dtoa_r+0x6f8>
 80064e8:	4620      	mov	r0, r4
 80064ea:	4659      	mov	r1, fp
 80064ec:	f000 fad6 	bl	8006a9c <_Bfree>
 80064f0:	2300      	movs	r3, #0
 80064f2:	702b      	strb	r3, [r5, #0]
 80064f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064f6:	f10a 0001 	add.w	r0, sl, #1
 80064fa:	6018      	str	r0, [r3, #0]
 80064fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f43f acd8 	beq.w	8005eb4 <_dtoa_r+0xa4>
 8006504:	601d      	str	r5, [r3, #0]
 8006506:	e4d5      	b.n	8005eb4 <_dtoa_r+0xa4>
 8006508:	f8cd a01c 	str.w	sl, [sp, #28]
 800650c:	462b      	mov	r3, r5
 800650e:	461d      	mov	r5, r3
 8006510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006514:	2a39      	cmp	r2, #57	; 0x39
 8006516:	d108      	bne.n	800652a <_dtoa_r+0x71a>
 8006518:	9a00      	ldr	r2, [sp, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d1f7      	bne.n	800650e <_dtoa_r+0x6fe>
 800651e:	9a07      	ldr	r2, [sp, #28]
 8006520:	9900      	ldr	r1, [sp, #0]
 8006522:	3201      	adds	r2, #1
 8006524:	9207      	str	r2, [sp, #28]
 8006526:	2230      	movs	r2, #48	; 0x30
 8006528:	700a      	strb	r2, [r1, #0]
 800652a:	781a      	ldrb	r2, [r3, #0]
 800652c:	3201      	adds	r2, #1
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	e78c      	b.n	800644c <_dtoa_r+0x63c>
 8006532:	4b7f      	ldr	r3, [pc, #508]	; (8006730 <_dtoa_r+0x920>)
 8006534:	2200      	movs	r2, #0
 8006536:	f7fa f85f 	bl	80005f8 <__aeabi_dmul>
 800653a:	2200      	movs	r2, #0
 800653c:	2300      	movs	r3, #0
 800653e:	4606      	mov	r6, r0
 8006540:	460f      	mov	r7, r1
 8006542:	f7fa fac1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006546:	2800      	cmp	r0, #0
 8006548:	d09b      	beq.n	8006482 <_dtoa_r+0x672>
 800654a:	e7cd      	b.n	80064e8 <_dtoa_r+0x6d8>
 800654c:	9a08      	ldr	r2, [sp, #32]
 800654e:	2a00      	cmp	r2, #0
 8006550:	f000 80c4 	beq.w	80066dc <_dtoa_r+0x8cc>
 8006554:	9a05      	ldr	r2, [sp, #20]
 8006556:	2a01      	cmp	r2, #1
 8006558:	f300 80a8 	bgt.w	80066ac <_dtoa_r+0x89c>
 800655c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800655e:	2a00      	cmp	r2, #0
 8006560:	f000 80a0 	beq.w	80066a4 <_dtoa_r+0x894>
 8006564:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006568:	9e06      	ldr	r6, [sp, #24]
 800656a:	4645      	mov	r5, r8
 800656c:	9a04      	ldr	r2, [sp, #16]
 800656e:	2101      	movs	r1, #1
 8006570:	441a      	add	r2, r3
 8006572:	4620      	mov	r0, r4
 8006574:	4498      	add	r8, r3
 8006576:	9204      	str	r2, [sp, #16]
 8006578:	f000 fb4c 	bl	8006c14 <__i2b>
 800657c:	4607      	mov	r7, r0
 800657e:	2d00      	cmp	r5, #0
 8006580:	dd0b      	ble.n	800659a <_dtoa_r+0x78a>
 8006582:	9b04      	ldr	r3, [sp, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	dd08      	ble.n	800659a <_dtoa_r+0x78a>
 8006588:	42ab      	cmp	r3, r5
 800658a:	9a04      	ldr	r2, [sp, #16]
 800658c:	bfa8      	it	ge
 800658e:	462b      	movge	r3, r5
 8006590:	eba8 0803 	sub.w	r8, r8, r3
 8006594:	1aed      	subs	r5, r5, r3
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	9304      	str	r3, [sp, #16]
 800659a:	9b06      	ldr	r3, [sp, #24]
 800659c:	b1fb      	cbz	r3, 80065de <_dtoa_r+0x7ce>
 800659e:	9b08      	ldr	r3, [sp, #32]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 809f 	beq.w	80066e4 <_dtoa_r+0x8d4>
 80065a6:	2e00      	cmp	r6, #0
 80065a8:	dd11      	ble.n	80065ce <_dtoa_r+0x7be>
 80065aa:	4639      	mov	r1, r7
 80065ac:	4632      	mov	r2, r6
 80065ae:	4620      	mov	r0, r4
 80065b0:	f000 fbec 	bl	8006d8c <__pow5mult>
 80065b4:	465a      	mov	r2, fp
 80065b6:	4601      	mov	r1, r0
 80065b8:	4607      	mov	r7, r0
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 fb40 	bl	8006c40 <__multiply>
 80065c0:	4659      	mov	r1, fp
 80065c2:	9007      	str	r0, [sp, #28]
 80065c4:	4620      	mov	r0, r4
 80065c6:	f000 fa69 	bl	8006a9c <_Bfree>
 80065ca:	9b07      	ldr	r3, [sp, #28]
 80065cc:	469b      	mov	fp, r3
 80065ce:	9b06      	ldr	r3, [sp, #24]
 80065d0:	1b9a      	subs	r2, r3, r6
 80065d2:	d004      	beq.n	80065de <_dtoa_r+0x7ce>
 80065d4:	4659      	mov	r1, fp
 80065d6:	4620      	mov	r0, r4
 80065d8:	f000 fbd8 	bl	8006d8c <__pow5mult>
 80065dc:	4683      	mov	fp, r0
 80065de:	2101      	movs	r1, #1
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 fb17 	bl	8006c14 <__i2b>
 80065e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	4606      	mov	r6, r0
 80065ec:	dd7c      	ble.n	80066e8 <_dtoa_r+0x8d8>
 80065ee:	461a      	mov	r2, r3
 80065f0:	4601      	mov	r1, r0
 80065f2:	4620      	mov	r0, r4
 80065f4:	f000 fbca 	bl	8006d8c <__pow5mult>
 80065f8:	9b05      	ldr	r3, [sp, #20]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	4606      	mov	r6, r0
 80065fe:	dd76      	ble.n	80066ee <_dtoa_r+0x8de>
 8006600:	2300      	movs	r3, #0
 8006602:	9306      	str	r3, [sp, #24]
 8006604:	6933      	ldr	r3, [r6, #16]
 8006606:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800660a:	6918      	ldr	r0, [r3, #16]
 800660c:	f000 fab2 	bl	8006b74 <__hi0bits>
 8006610:	f1c0 0020 	rsb	r0, r0, #32
 8006614:	9b04      	ldr	r3, [sp, #16]
 8006616:	4418      	add	r0, r3
 8006618:	f010 001f 	ands.w	r0, r0, #31
 800661c:	f000 8086 	beq.w	800672c <_dtoa_r+0x91c>
 8006620:	f1c0 0320 	rsb	r3, r0, #32
 8006624:	2b04      	cmp	r3, #4
 8006626:	dd7f      	ble.n	8006728 <_dtoa_r+0x918>
 8006628:	f1c0 001c 	rsb	r0, r0, #28
 800662c:	9b04      	ldr	r3, [sp, #16]
 800662e:	4403      	add	r3, r0
 8006630:	4480      	add	r8, r0
 8006632:	4405      	add	r5, r0
 8006634:	9304      	str	r3, [sp, #16]
 8006636:	f1b8 0f00 	cmp.w	r8, #0
 800663a:	dd05      	ble.n	8006648 <_dtoa_r+0x838>
 800663c:	4659      	mov	r1, fp
 800663e:	4642      	mov	r2, r8
 8006640:	4620      	mov	r0, r4
 8006642:	f000 fbfd 	bl	8006e40 <__lshift>
 8006646:	4683      	mov	fp, r0
 8006648:	9b04      	ldr	r3, [sp, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	dd05      	ble.n	800665a <_dtoa_r+0x84a>
 800664e:	4631      	mov	r1, r6
 8006650:	461a      	mov	r2, r3
 8006652:	4620      	mov	r0, r4
 8006654:	f000 fbf4 	bl	8006e40 <__lshift>
 8006658:	4606      	mov	r6, r0
 800665a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800665c:	2b00      	cmp	r3, #0
 800665e:	d069      	beq.n	8006734 <_dtoa_r+0x924>
 8006660:	4631      	mov	r1, r6
 8006662:	4658      	mov	r0, fp
 8006664:	f000 fc58 	bl	8006f18 <__mcmp>
 8006668:	2800      	cmp	r0, #0
 800666a:	da63      	bge.n	8006734 <_dtoa_r+0x924>
 800666c:	2300      	movs	r3, #0
 800666e:	4659      	mov	r1, fp
 8006670:	220a      	movs	r2, #10
 8006672:	4620      	mov	r0, r4
 8006674:	f000 fa34 	bl	8006ae0 <__multadd>
 8006678:	9b08      	ldr	r3, [sp, #32]
 800667a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800667e:	4683      	mov	fp, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 818f 	beq.w	80069a4 <_dtoa_r+0xb94>
 8006686:	4639      	mov	r1, r7
 8006688:	2300      	movs	r3, #0
 800668a:	220a      	movs	r2, #10
 800668c:	4620      	mov	r0, r4
 800668e:	f000 fa27 	bl	8006ae0 <__multadd>
 8006692:	f1b9 0f00 	cmp.w	r9, #0
 8006696:	4607      	mov	r7, r0
 8006698:	f300 808e 	bgt.w	80067b8 <_dtoa_r+0x9a8>
 800669c:	9b05      	ldr	r3, [sp, #20]
 800669e:	2b02      	cmp	r3, #2
 80066a0:	dc50      	bgt.n	8006744 <_dtoa_r+0x934>
 80066a2:	e089      	b.n	80067b8 <_dtoa_r+0x9a8>
 80066a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80066aa:	e75d      	b.n	8006568 <_dtoa_r+0x758>
 80066ac:	9b01      	ldr	r3, [sp, #4]
 80066ae:	1e5e      	subs	r6, r3, #1
 80066b0:	9b06      	ldr	r3, [sp, #24]
 80066b2:	42b3      	cmp	r3, r6
 80066b4:	bfbf      	itttt	lt
 80066b6:	9b06      	ldrlt	r3, [sp, #24]
 80066b8:	9606      	strlt	r6, [sp, #24]
 80066ba:	1af2      	sublt	r2, r6, r3
 80066bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80066be:	bfb6      	itet	lt
 80066c0:	189b      	addlt	r3, r3, r2
 80066c2:	1b9e      	subge	r6, r3, r6
 80066c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80066c6:	9b01      	ldr	r3, [sp, #4]
 80066c8:	bfb8      	it	lt
 80066ca:	2600      	movlt	r6, #0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bfb5      	itete	lt
 80066d0:	eba8 0503 	sublt.w	r5, r8, r3
 80066d4:	9b01      	ldrge	r3, [sp, #4]
 80066d6:	2300      	movlt	r3, #0
 80066d8:	4645      	movge	r5, r8
 80066da:	e747      	b.n	800656c <_dtoa_r+0x75c>
 80066dc:	9e06      	ldr	r6, [sp, #24]
 80066de:	9f08      	ldr	r7, [sp, #32]
 80066e0:	4645      	mov	r5, r8
 80066e2:	e74c      	b.n	800657e <_dtoa_r+0x76e>
 80066e4:	9a06      	ldr	r2, [sp, #24]
 80066e6:	e775      	b.n	80065d4 <_dtoa_r+0x7c4>
 80066e8:	9b05      	ldr	r3, [sp, #20]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	dc18      	bgt.n	8006720 <_dtoa_r+0x910>
 80066ee:	9b02      	ldr	r3, [sp, #8]
 80066f0:	b9b3      	cbnz	r3, 8006720 <_dtoa_r+0x910>
 80066f2:	9b03      	ldr	r3, [sp, #12]
 80066f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066f8:	b9a3      	cbnz	r3, 8006724 <_dtoa_r+0x914>
 80066fa:	9b03      	ldr	r3, [sp, #12]
 80066fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006700:	0d1b      	lsrs	r3, r3, #20
 8006702:	051b      	lsls	r3, r3, #20
 8006704:	b12b      	cbz	r3, 8006712 <_dtoa_r+0x902>
 8006706:	9b04      	ldr	r3, [sp, #16]
 8006708:	3301      	adds	r3, #1
 800670a:	9304      	str	r3, [sp, #16]
 800670c:	f108 0801 	add.w	r8, r8, #1
 8006710:	2301      	movs	r3, #1
 8006712:	9306      	str	r3, [sp, #24]
 8006714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006716:	2b00      	cmp	r3, #0
 8006718:	f47f af74 	bne.w	8006604 <_dtoa_r+0x7f4>
 800671c:	2001      	movs	r0, #1
 800671e:	e779      	b.n	8006614 <_dtoa_r+0x804>
 8006720:	2300      	movs	r3, #0
 8006722:	e7f6      	b.n	8006712 <_dtoa_r+0x902>
 8006724:	9b02      	ldr	r3, [sp, #8]
 8006726:	e7f4      	b.n	8006712 <_dtoa_r+0x902>
 8006728:	d085      	beq.n	8006636 <_dtoa_r+0x826>
 800672a:	4618      	mov	r0, r3
 800672c:	301c      	adds	r0, #28
 800672e:	e77d      	b.n	800662c <_dtoa_r+0x81c>
 8006730:	40240000 	.word	0x40240000
 8006734:	9b01      	ldr	r3, [sp, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	dc38      	bgt.n	80067ac <_dtoa_r+0x99c>
 800673a:	9b05      	ldr	r3, [sp, #20]
 800673c:	2b02      	cmp	r3, #2
 800673e:	dd35      	ble.n	80067ac <_dtoa_r+0x99c>
 8006740:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006744:	f1b9 0f00 	cmp.w	r9, #0
 8006748:	d10d      	bne.n	8006766 <_dtoa_r+0x956>
 800674a:	4631      	mov	r1, r6
 800674c:	464b      	mov	r3, r9
 800674e:	2205      	movs	r2, #5
 8006750:	4620      	mov	r0, r4
 8006752:	f000 f9c5 	bl	8006ae0 <__multadd>
 8006756:	4601      	mov	r1, r0
 8006758:	4606      	mov	r6, r0
 800675a:	4658      	mov	r0, fp
 800675c:	f000 fbdc 	bl	8006f18 <__mcmp>
 8006760:	2800      	cmp	r0, #0
 8006762:	f73f adbd 	bgt.w	80062e0 <_dtoa_r+0x4d0>
 8006766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006768:	9d00      	ldr	r5, [sp, #0]
 800676a:	ea6f 0a03 	mvn.w	sl, r3
 800676e:	f04f 0800 	mov.w	r8, #0
 8006772:	4631      	mov	r1, r6
 8006774:	4620      	mov	r0, r4
 8006776:	f000 f991 	bl	8006a9c <_Bfree>
 800677a:	2f00      	cmp	r7, #0
 800677c:	f43f aeb4 	beq.w	80064e8 <_dtoa_r+0x6d8>
 8006780:	f1b8 0f00 	cmp.w	r8, #0
 8006784:	d005      	beq.n	8006792 <_dtoa_r+0x982>
 8006786:	45b8      	cmp	r8, r7
 8006788:	d003      	beq.n	8006792 <_dtoa_r+0x982>
 800678a:	4641      	mov	r1, r8
 800678c:	4620      	mov	r0, r4
 800678e:	f000 f985 	bl	8006a9c <_Bfree>
 8006792:	4639      	mov	r1, r7
 8006794:	4620      	mov	r0, r4
 8006796:	f000 f981 	bl	8006a9c <_Bfree>
 800679a:	e6a5      	b.n	80064e8 <_dtoa_r+0x6d8>
 800679c:	2600      	movs	r6, #0
 800679e:	4637      	mov	r7, r6
 80067a0:	e7e1      	b.n	8006766 <_dtoa_r+0x956>
 80067a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80067a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80067a8:	4637      	mov	r7, r6
 80067aa:	e599      	b.n	80062e0 <_dtoa_r+0x4d0>
 80067ac:	9b08      	ldr	r3, [sp, #32]
 80067ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 80fd 	beq.w	80069b2 <_dtoa_r+0xba2>
 80067b8:	2d00      	cmp	r5, #0
 80067ba:	dd05      	ble.n	80067c8 <_dtoa_r+0x9b8>
 80067bc:	4639      	mov	r1, r7
 80067be:	462a      	mov	r2, r5
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 fb3d 	bl	8006e40 <__lshift>
 80067c6:	4607      	mov	r7, r0
 80067c8:	9b06      	ldr	r3, [sp, #24]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d05c      	beq.n	8006888 <_dtoa_r+0xa78>
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	4620      	mov	r0, r4
 80067d2:	f000 f923 	bl	8006a1c <_Balloc>
 80067d6:	4605      	mov	r5, r0
 80067d8:	b928      	cbnz	r0, 80067e6 <_dtoa_r+0x9d6>
 80067da:	4b80      	ldr	r3, [pc, #512]	; (80069dc <_dtoa_r+0xbcc>)
 80067dc:	4602      	mov	r2, r0
 80067de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80067e2:	f7ff bb2e 	b.w	8005e42 <_dtoa_r+0x32>
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	3202      	adds	r2, #2
 80067ea:	0092      	lsls	r2, r2, #2
 80067ec:	f107 010c 	add.w	r1, r7, #12
 80067f0:	300c      	adds	r0, #12
 80067f2:	f000 f905 	bl	8006a00 <memcpy>
 80067f6:	2201      	movs	r2, #1
 80067f8:	4629      	mov	r1, r5
 80067fa:	4620      	mov	r0, r4
 80067fc:	f000 fb20 	bl	8006e40 <__lshift>
 8006800:	9b00      	ldr	r3, [sp, #0]
 8006802:	3301      	adds	r3, #1
 8006804:	9301      	str	r3, [sp, #4]
 8006806:	9b00      	ldr	r3, [sp, #0]
 8006808:	444b      	add	r3, r9
 800680a:	9307      	str	r3, [sp, #28]
 800680c:	9b02      	ldr	r3, [sp, #8]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	46b8      	mov	r8, r7
 8006814:	9306      	str	r3, [sp, #24]
 8006816:	4607      	mov	r7, r0
 8006818:	9b01      	ldr	r3, [sp, #4]
 800681a:	4631      	mov	r1, r6
 800681c:	3b01      	subs	r3, #1
 800681e:	4658      	mov	r0, fp
 8006820:	9302      	str	r3, [sp, #8]
 8006822:	f7ff fa69 	bl	8005cf8 <quorem>
 8006826:	4603      	mov	r3, r0
 8006828:	3330      	adds	r3, #48	; 0x30
 800682a:	9004      	str	r0, [sp, #16]
 800682c:	4641      	mov	r1, r8
 800682e:	4658      	mov	r0, fp
 8006830:	9308      	str	r3, [sp, #32]
 8006832:	f000 fb71 	bl	8006f18 <__mcmp>
 8006836:	463a      	mov	r2, r7
 8006838:	4681      	mov	r9, r0
 800683a:	4631      	mov	r1, r6
 800683c:	4620      	mov	r0, r4
 800683e:	f000 fb87 	bl	8006f50 <__mdiff>
 8006842:	68c2      	ldr	r2, [r0, #12]
 8006844:	9b08      	ldr	r3, [sp, #32]
 8006846:	4605      	mov	r5, r0
 8006848:	bb02      	cbnz	r2, 800688c <_dtoa_r+0xa7c>
 800684a:	4601      	mov	r1, r0
 800684c:	4658      	mov	r0, fp
 800684e:	f000 fb63 	bl	8006f18 <__mcmp>
 8006852:	9b08      	ldr	r3, [sp, #32]
 8006854:	4602      	mov	r2, r0
 8006856:	4629      	mov	r1, r5
 8006858:	4620      	mov	r0, r4
 800685a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800685e:	f000 f91d 	bl	8006a9c <_Bfree>
 8006862:	9b05      	ldr	r3, [sp, #20]
 8006864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006866:	9d01      	ldr	r5, [sp, #4]
 8006868:	ea43 0102 	orr.w	r1, r3, r2
 800686c:	9b06      	ldr	r3, [sp, #24]
 800686e:	430b      	orrs	r3, r1
 8006870:	9b08      	ldr	r3, [sp, #32]
 8006872:	d10d      	bne.n	8006890 <_dtoa_r+0xa80>
 8006874:	2b39      	cmp	r3, #57	; 0x39
 8006876:	d029      	beq.n	80068cc <_dtoa_r+0xabc>
 8006878:	f1b9 0f00 	cmp.w	r9, #0
 800687c:	dd01      	ble.n	8006882 <_dtoa_r+0xa72>
 800687e:	9b04      	ldr	r3, [sp, #16]
 8006880:	3331      	adds	r3, #49	; 0x31
 8006882:	9a02      	ldr	r2, [sp, #8]
 8006884:	7013      	strb	r3, [r2, #0]
 8006886:	e774      	b.n	8006772 <_dtoa_r+0x962>
 8006888:	4638      	mov	r0, r7
 800688a:	e7b9      	b.n	8006800 <_dtoa_r+0x9f0>
 800688c:	2201      	movs	r2, #1
 800688e:	e7e2      	b.n	8006856 <_dtoa_r+0xa46>
 8006890:	f1b9 0f00 	cmp.w	r9, #0
 8006894:	db06      	blt.n	80068a4 <_dtoa_r+0xa94>
 8006896:	9905      	ldr	r1, [sp, #20]
 8006898:	ea41 0909 	orr.w	r9, r1, r9
 800689c:	9906      	ldr	r1, [sp, #24]
 800689e:	ea59 0101 	orrs.w	r1, r9, r1
 80068a2:	d120      	bne.n	80068e6 <_dtoa_r+0xad6>
 80068a4:	2a00      	cmp	r2, #0
 80068a6:	ddec      	ble.n	8006882 <_dtoa_r+0xa72>
 80068a8:	4659      	mov	r1, fp
 80068aa:	2201      	movs	r2, #1
 80068ac:	4620      	mov	r0, r4
 80068ae:	9301      	str	r3, [sp, #4]
 80068b0:	f000 fac6 	bl	8006e40 <__lshift>
 80068b4:	4631      	mov	r1, r6
 80068b6:	4683      	mov	fp, r0
 80068b8:	f000 fb2e 	bl	8006f18 <__mcmp>
 80068bc:	2800      	cmp	r0, #0
 80068be:	9b01      	ldr	r3, [sp, #4]
 80068c0:	dc02      	bgt.n	80068c8 <_dtoa_r+0xab8>
 80068c2:	d1de      	bne.n	8006882 <_dtoa_r+0xa72>
 80068c4:	07da      	lsls	r2, r3, #31
 80068c6:	d5dc      	bpl.n	8006882 <_dtoa_r+0xa72>
 80068c8:	2b39      	cmp	r3, #57	; 0x39
 80068ca:	d1d8      	bne.n	800687e <_dtoa_r+0xa6e>
 80068cc:	9a02      	ldr	r2, [sp, #8]
 80068ce:	2339      	movs	r3, #57	; 0x39
 80068d0:	7013      	strb	r3, [r2, #0]
 80068d2:	462b      	mov	r3, r5
 80068d4:	461d      	mov	r5, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80068dc:	2a39      	cmp	r2, #57	; 0x39
 80068de:	d050      	beq.n	8006982 <_dtoa_r+0xb72>
 80068e0:	3201      	adds	r2, #1
 80068e2:	701a      	strb	r2, [r3, #0]
 80068e4:	e745      	b.n	8006772 <_dtoa_r+0x962>
 80068e6:	2a00      	cmp	r2, #0
 80068e8:	dd03      	ble.n	80068f2 <_dtoa_r+0xae2>
 80068ea:	2b39      	cmp	r3, #57	; 0x39
 80068ec:	d0ee      	beq.n	80068cc <_dtoa_r+0xabc>
 80068ee:	3301      	adds	r3, #1
 80068f0:	e7c7      	b.n	8006882 <_dtoa_r+0xa72>
 80068f2:	9a01      	ldr	r2, [sp, #4]
 80068f4:	9907      	ldr	r1, [sp, #28]
 80068f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80068fa:	428a      	cmp	r2, r1
 80068fc:	d02a      	beq.n	8006954 <_dtoa_r+0xb44>
 80068fe:	4659      	mov	r1, fp
 8006900:	2300      	movs	r3, #0
 8006902:	220a      	movs	r2, #10
 8006904:	4620      	mov	r0, r4
 8006906:	f000 f8eb 	bl	8006ae0 <__multadd>
 800690a:	45b8      	cmp	r8, r7
 800690c:	4683      	mov	fp, r0
 800690e:	f04f 0300 	mov.w	r3, #0
 8006912:	f04f 020a 	mov.w	r2, #10
 8006916:	4641      	mov	r1, r8
 8006918:	4620      	mov	r0, r4
 800691a:	d107      	bne.n	800692c <_dtoa_r+0xb1c>
 800691c:	f000 f8e0 	bl	8006ae0 <__multadd>
 8006920:	4680      	mov	r8, r0
 8006922:	4607      	mov	r7, r0
 8006924:	9b01      	ldr	r3, [sp, #4]
 8006926:	3301      	adds	r3, #1
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	e775      	b.n	8006818 <_dtoa_r+0xa08>
 800692c:	f000 f8d8 	bl	8006ae0 <__multadd>
 8006930:	4639      	mov	r1, r7
 8006932:	4680      	mov	r8, r0
 8006934:	2300      	movs	r3, #0
 8006936:	220a      	movs	r2, #10
 8006938:	4620      	mov	r0, r4
 800693a:	f000 f8d1 	bl	8006ae0 <__multadd>
 800693e:	4607      	mov	r7, r0
 8006940:	e7f0      	b.n	8006924 <_dtoa_r+0xb14>
 8006942:	f1b9 0f00 	cmp.w	r9, #0
 8006946:	9a00      	ldr	r2, [sp, #0]
 8006948:	bfcc      	ite	gt
 800694a:	464d      	movgt	r5, r9
 800694c:	2501      	movle	r5, #1
 800694e:	4415      	add	r5, r2
 8006950:	f04f 0800 	mov.w	r8, #0
 8006954:	4659      	mov	r1, fp
 8006956:	2201      	movs	r2, #1
 8006958:	4620      	mov	r0, r4
 800695a:	9301      	str	r3, [sp, #4]
 800695c:	f000 fa70 	bl	8006e40 <__lshift>
 8006960:	4631      	mov	r1, r6
 8006962:	4683      	mov	fp, r0
 8006964:	f000 fad8 	bl	8006f18 <__mcmp>
 8006968:	2800      	cmp	r0, #0
 800696a:	dcb2      	bgt.n	80068d2 <_dtoa_r+0xac2>
 800696c:	d102      	bne.n	8006974 <_dtoa_r+0xb64>
 800696e:	9b01      	ldr	r3, [sp, #4]
 8006970:	07db      	lsls	r3, r3, #31
 8006972:	d4ae      	bmi.n	80068d2 <_dtoa_r+0xac2>
 8006974:	462b      	mov	r3, r5
 8006976:	461d      	mov	r5, r3
 8006978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800697c:	2a30      	cmp	r2, #48	; 0x30
 800697e:	d0fa      	beq.n	8006976 <_dtoa_r+0xb66>
 8006980:	e6f7      	b.n	8006772 <_dtoa_r+0x962>
 8006982:	9a00      	ldr	r2, [sp, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d1a5      	bne.n	80068d4 <_dtoa_r+0xac4>
 8006988:	f10a 0a01 	add.w	sl, sl, #1
 800698c:	2331      	movs	r3, #49	; 0x31
 800698e:	e779      	b.n	8006884 <_dtoa_r+0xa74>
 8006990:	4b13      	ldr	r3, [pc, #76]	; (80069e0 <_dtoa_r+0xbd0>)
 8006992:	f7ff baaf 	b.w	8005ef4 <_dtoa_r+0xe4>
 8006996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006998:	2b00      	cmp	r3, #0
 800699a:	f47f aa86 	bne.w	8005eaa <_dtoa_r+0x9a>
 800699e:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <_dtoa_r+0xbd4>)
 80069a0:	f7ff baa8 	b.w	8005ef4 <_dtoa_r+0xe4>
 80069a4:	f1b9 0f00 	cmp.w	r9, #0
 80069a8:	dc03      	bgt.n	80069b2 <_dtoa_r+0xba2>
 80069aa:	9b05      	ldr	r3, [sp, #20]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	f73f aec9 	bgt.w	8006744 <_dtoa_r+0x934>
 80069b2:	9d00      	ldr	r5, [sp, #0]
 80069b4:	4631      	mov	r1, r6
 80069b6:	4658      	mov	r0, fp
 80069b8:	f7ff f99e 	bl	8005cf8 <quorem>
 80069bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80069c0:	f805 3b01 	strb.w	r3, [r5], #1
 80069c4:	9a00      	ldr	r2, [sp, #0]
 80069c6:	1aaa      	subs	r2, r5, r2
 80069c8:	4591      	cmp	r9, r2
 80069ca:	ddba      	ble.n	8006942 <_dtoa_r+0xb32>
 80069cc:	4659      	mov	r1, fp
 80069ce:	2300      	movs	r3, #0
 80069d0:	220a      	movs	r2, #10
 80069d2:	4620      	mov	r0, r4
 80069d4:	f000 f884 	bl	8006ae0 <__multadd>
 80069d8:	4683      	mov	fp, r0
 80069da:	e7eb      	b.n	80069b4 <_dtoa_r+0xba4>
 80069dc:	08007edb 	.word	0x08007edb
 80069e0:	08007e34 	.word	0x08007e34
 80069e4:	08007e58 	.word	0x08007e58

080069e8 <_localeconv_r>:
 80069e8:	4800      	ldr	r0, [pc, #0]	; (80069ec <_localeconv_r+0x4>)
 80069ea:	4770      	bx	lr
 80069ec:	200001b4 	.word	0x200001b4

080069f0 <malloc>:
 80069f0:	4b02      	ldr	r3, [pc, #8]	; (80069fc <malloc+0xc>)
 80069f2:	4601      	mov	r1, r0
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	f000 bbef 	b.w	80071d8 <_malloc_r>
 80069fa:	bf00      	nop
 80069fc:	20000060 	.word	0x20000060

08006a00 <memcpy>:
 8006a00:	440a      	add	r2, r1
 8006a02:	4291      	cmp	r1, r2
 8006a04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006a08:	d100      	bne.n	8006a0c <memcpy+0xc>
 8006a0a:	4770      	bx	lr
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a16:	4291      	cmp	r1, r2
 8006a18:	d1f9      	bne.n	8006a0e <memcpy+0xe>
 8006a1a:	bd10      	pop	{r4, pc}

08006a1c <_Balloc>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a20:	4604      	mov	r4, r0
 8006a22:	460d      	mov	r5, r1
 8006a24:	b976      	cbnz	r6, 8006a44 <_Balloc+0x28>
 8006a26:	2010      	movs	r0, #16
 8006a28:	f7ff ffe2 	bl	80069f0 <malloc>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	6260      	str	r0, [r4, #36]	; 0x24
 8006a30:	b920      	cbnz	r0, 8006a3c <_Balloc+0x20>
 8006a32:	4b18      	ldr	r3, [pc, #96]	; (8006a94 <_Balloc+0x78>)
 8006a34:	4818      	ldr	r0, [pc, #96]	; (8006a98 <_Balloc+0x7c>)
 8006a36:	2166      	movs	r1, #102	; 0x66
 8006a38:	f000 fc38 	bl	80072ac <__assert_func>
 8006a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a40:	6006      	str	r6, [r0, #0]
 8006a42:	60c6      	str	r6, [r0, #12]
 8006a44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006a46:	68f3      	ldr	r3, [r6, #12]
 8006a48:	b183      	cbz	r3, 8006a6c <_Balloc+0x50>
 8006a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a52:	b9b8      	cbnz	r0, 8006a84 <_Balloc+0x68>
 8006a54:	2101      	movs	r1, #1
 8006a56:	fa01 f605 	lsl.w	r6, r1, r5
 8006a5a:	1d72      	adds	r2, r6, #5
 8006a5c:	0092      	lsls	r2, r2, #2
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f000 fb5a 	bl	8007118 <_calloc_r>
 8006a64:	b160      	cbz	r0, 8006a80 <_Balloc+0x64>
 8006a66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a6a:	e00e      	b.n	8006a8a <_Balloc+0x6e>
 8006a6c:	2221      	movs	r2, #33	; 0x21
 8006a6e:	2104      	movs	r1, #4
 8006a70:	4620      	mov	r0, r4
 8006a72:	f000 fb51 	bl	8007118 <_calloc_r>
 8006a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a78:	60f0      	str	r0, [r6, #12]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e4      	bne.n	8006a4a <_Balloc+0x2e>
 8006a80:	2000      	movs	r0, #0
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
 8006a84:	6802      	ldr	r2, [r0, #0]
 8006a86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a90:	e7f7      	b.n	8006a82 <_Balloc+0x66>
 8006a92:	bf00      	nop
 8006a94:	08007e65 	.word	0x08007e65
 8006a98:	08007eec 	.word	0x08007eec

08006a9c <_Bfree>:
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006aa0:	4605      	mov	r5, r0
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	b976      	cbnz	r6, 8006ac4 <_Bfree+0x28>
 8006aa6:	2010      	movs	r0, #16
 8006aa8:	f7ff ffa2 	bl	80069f0 <malloc>
 8006aac:	4602      	mov	r2, r0
 8006aae:	6268      	str	r0, [r5, #36]	; 0x24
 8006ab0:	b920      	cbnz	r0, 8006abc <_Bfree+0x20>
 8006ab2:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <_Bfree+0x3c>)
 8006ab4:	4809      	ldr	r0, [pc, #36]	; (8006adc <_Bfree+0x40>)
 8006ab6:	218a      	movs	r1, #138	; 0x8a
 8006ab8:	f000 fbf8 	bl	80072ac <__assert_func>
 8006abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ac0:	6006      	str	r6, [r0, #0]
 8006ac2:	60c6      	str	r6, [r0, #12]
 8006ac4:	b13c      	cbz	r4, 8006ad6 <_Bfree+0x3a>
 8006ac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ac8:	6862      	ldr	r2, [r4, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ad0:	6021      	str	r1, [r4, #0]
 8006ad2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}
 8006ad8:	08007e65 	.word	0x08007e65
 8006adc:	08007eec 	.word	0x08007eec

08006ae0 <__multadd>:
 8006ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae4:	690e      	ldr	r6, [r1, #16]
 8006ae6:	4607      	mov	r7, r0
 8006ae8:	4698      	mov	r8, r3
 8006aea:	460c      	mov	r4, r1
 8006aec:	f101 0014 	add.w	r0, r1, #20
 8006af0:	2300      	movs	r3, #0
 8006af2:	6805      	ldr	r5, [r0, #0]
 8006af4:	b2a9      	uxth	r1, r5
 8006af6:	fb02 8101 	mla	r1, r2, r1, r8
 8006afa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006afe:	0c2d      	lsrs	r5, r5, #16
 8006b00:	fb02 c505 	mla	r5, r2, r5, ip
 8006b04:	b289      	uxth	r1, r1
 8006b06:	3301      	adds	r3, #1
 8006b08:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006b0c:	429e      	cmp	r6, r3
 8006b0e:	f840 1b04 	str.w	r1, [r0], #4
 8006b12:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006b16:	dcec      	bgt.n	8006af2 <__multadd+0x12>
 8006b18:	f1b8 0f00 	cmp.w	r8, #0
 8006b1c:	d022      	beq.n	8006b64 <__multadd+0x84>
 8006b1e:	68a3      	ldr	r3, [r4, #8]
 8006b20:	42b3      	cmp	r3, r6
 8006b22:	dc19      	bgt.n	8006b58 <__multadd+0x78>
 8006b24:	6861      	ldr	r1, [r4, #4]
 8006b26:	4638      	mov	r0, r7
 8006b28:	3101      	adds	r1, #1
 8006b2a:	f7ff ff77 	bl	8006a1c <_Balloc>
 8006b2e:	4605      	mov	r5, r0
 8006b30:	b928      	cbnz	r0, 8006b3e <__multadd+0x5e>
 8006b32:	4602      	mov	r2, r0
 8006b34:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <__multadd+0x8c>)
 8006b36:	480e      	ldr	r0, [pc, #56]	; (8006b70 <__multadd+0x90>)
 8006b38:	21b5      	movs	r1, #181	; 0xb5
 8006b3a:	f000 fbb7 	bl	80072ac <__assert_func>
 8006b3e:	6922      	ldr	r2, [r4, #16]
 8006b40:	3202      	adds	r2, #2
 8006b42:	f104 010c 	add.w	r1, r4, #12
 8006b46:	0092      	lsls	r2, r2, #2
 8006b48:	300c      	adds	r0, #12
 8006b4a:	f7ff ff59 	bl	8006a00 <memcpy>
 8006b4e:	4621      	mov	r1, r4
 8006b50:	4638      	mov	r0, r7
 8006b52:	f7ff ffa3 	bl	8006a9c <_Bfree>
 8006b56:	462c      	mov	r4, r5
 8006b58:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006b5c:	3601      	adds	r6, #1
 8006b5e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006b62:	6126      	str	r6, [r4, #16]
 8006b64:	4620      	mov	r0, r4
 8006b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b6a:	bf00      	nop
 8006b6c:	08007edb 	.word	0x08007edb
 8006b70:	08007eec 	.word	0x08007eec

08006b74 <__hi0bits>:
 8006b74:	0c03      	lsrs	r3, r0, #16
 8006b76:	041b      	lsls	r3, r3, #16
 8006b78:	b9d3      	cbnz	r3, 8006bb0 <__hi0bits+0x3c>
 8006b7a:	0400      	lsls	r0, r0, #16
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b82:	bf04      	itt	eq
 8006b84:	0200      	lsleq	r0, r0, #8
 8006b86:	3308      	addeq	r3, #8
 8006b88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b8c:	bf04      	itt	eq
 8006b8e:	0100      	lsleq	r0, r0, #4
 8006b90:	3304      	addeq	r3, #4
 8006b92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b96:	bf04      	itt	eq
 8006b98:	0080      	lsleq	r0, r0, #2
 8006b9a:	3302      	addeq	r3, #2
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	db05      	blt.n	8006bac <__hi0bits+0x38>
 8006ba0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ba4:	f103 0301 	add.w	r3, r3, #1
 8006ba8:	bf08      	it	eq
 8006baa:	2320      	moveq	r3, #32
 8006bac:	4618      	mov	r0, r3
 8006bae:	4770      	bx	lr
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	e7e4      	b.n	8006b7e <__hi0bits+0xa>

08006bb4 <__lo0bits>:
 8006bb4:	6803      	ldr	r3, [r0, #0]
 8006bb6:	f013 0207 	ands.w	r2, r3, #7
 8006bba:	4601      	mov	r1, r0
 8006bbc:	d00b      	beq.n	8006bd6 <__lo0bits+0x22>
 8006bbe:	07da      	lsls	r2, r3, #31
 8006bc0:	d424      	bmi.n	8006c0c <__lo0bits+0x58>
 8006bc2:	0798      	lsls	r0, r3, #30
 8006bc4:	bf49      	itett	mi
 8006bc6:	085b      	lsrmi	r3, r3, #1
 8006bc8:	089b      	lsrpl	r3, r3, #2
 8006bca:	2001      	movmi	r0, #1
 8006bcc:	600b      	strmi	r3, [r1, #0]
 8006bce:	bf5c      	itt	pl
 8006bd0:	600b      	strpl	r3, [r1, #0]
 8006bd2:	2002      	movpl	r0, #2
 8006bd4:	4770      	bx	lr
 8006bd6:	b298      	uxth	r0, r3
 8006bd8:	b9b0      	cbnz	r0, 8006c08 <__lo0bits+0x54>
 8006bda:	0c1b      	lsrs	r3, r3, #16
 8006bdc:	2010      	movs	r0, #16
 8006bde:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006be2:	bf04      	itt	eq
 8006be4:	0a1b      	lsreq	r3, r3, #8
 8006be6:	3008      	addeq	r0, #8
 8006be8:	071a      	lsls	r2, r3, #28
 8006bea:	bf04      	itt	eq
 8006bec:	091b      	lsreq	r3, r3, #4
 8006bee:	3004      	addeq	r0, #4
 8006bf0:	079a      	lsls	r2, r3, #30
 8006bf2:	bf04      	itt	eq
 8006bf4:	089b      	lsreq	r3, r3, #2
 8006bf6:	3002      	addeq	r0, #2
 8006bf8:	07da      	lsls	r2, r3, #31
 8006bfa:	d403      	bmi.n	8006c04 <__lo0bits+0x50>
 8006bfc:	085b      	lsrs	r3, r3, #1
 8006bfe:	f100 0001 	add.w	r0, r0, #1
 8006c02:	d005      	beq.n	8006c10 <__lo0bits+0x5c>
 8006c04:	600b      	str	r3, [r1, #0]
 8006c06:	4770      	bx	lr
 8006c08:	4610      	mov	r0, r2
 8006c0a:	e7e8      	b.n	8006bde <__lo0bits+0x2a>
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	4770      	bx	lr
 8006c10:	2020      	movs	r0, #32
 8006c12:	4770      	bx	lr

08006c14 <__i2b>:
 8006c14:	b510      	push	{r4, lr}
 8006c16:	460c      	mov	r4, r1
 8006c18:	2101      	movs	r1, #1
 8006c1a:	f7ff feff 	bl	8006a1c <_Balloc>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	b928      	cbnz	r0, 8006c2e <__i2b+0x1a>
 8006c22:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <__i2b+0x24>)
 8006c24:	4805      	ldr	r0, [pc, #20]	; (8006c3c <__i2b+0x28>)
 8006c26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006c2a:	f000 fb3f 	bl	80072ac <__assert_func>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	6144      	str	r4, [r0, #20]
 8006c32:	6103      	str	r3, [r0, #16]
 8006c34:	bd10      	pop	{r4, pc}
 8006c36:	bf00      	nop
 8006c38:	08007edb 	.word	0x08007edb
 8006c3c:	08007eec 	.word	0x08007eec

08006c40 <__multiply>:
 8006c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	4614      	mov	r4, r2
 8006c46:	690a      	ldr	r2, [r1, #16]
 8006c48:	6923      	ldr	r3, [r4, #16]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	bfb8      	it	lt
 8006c4e:	460b      	movlt	r3, r1
 8006c50:	460d      	mov	r5, r1
 8006c52:	bfbc      	itt	lt
 8006c54:	4625      	movlt	r5, r4
 8006c56:	461c      	movlt	r4, r3
 8006c58:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006c5c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006c60:	68ab      	ldr	r3, [r5, #8]
 8006c62:	6869      	ldr	r1, [r5, #4]
 8006c64:	eb0a 0709 	add.w	r7, sl, r9
 8006c68:	42bb      	cmp	r3, r7
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	bfb8      	it	lt
 8006c6e:	3101      	addlt	r1, #1
 8006c70:	f7ff fed4 	bl	8006a1c <_Balloc>
 8006c74:	b930      	cbnz	r0, 8006c84 <__multiply+0x44>
 8006c76:	4602      	mov	r2, r0
 8006c78:	4b42      	ldr	r3, [pc, #264]	; (8006d84 <__multiply+0x144>)
 8006c7a:	4843      	ldr	r0, [pc, #268]	; (8006d88 <__multiply+0x148>)
 8006c7c:	f240 115d 	movw	r1, #349	; 0x15d
 8006c80:	f000 fb14 	bl	80072ac <__assert_func>
 8006c84:	f100 0614 	add.w	r6, r0, #20
 8006c88:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006c8c:	4633      	mov	r3, r6
 8006c8e:	2200      	movs	r2, #0
 8006c90:	4543      	cmp	r3, r8
 8006c92:	d31e      	bcc.n	8006cd2 <__multiply+0x92>
 8006c94:	f105 0c14 	add.w	ip, r5, #20
 8006c98:	f104 0314 	add.w	r3, r4, #20
 8006c9c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006ca0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006ca4:	9202      	str	r2, [sp, #8]
 8006ca6:	ebac 0205 	sub.w	r2, ip, r5
 8006caa:	3a15      	subs	r2, #21
 8006cac:	f022 0203 	bic.w	r2, r2, #3
 8006cb0:	3204      	adds	r2, #4
 8006cb2:	f105 0115 	add.w	r1, r5, #21
 8006cb6:	458c      	cmp	ip, r1
 8006cb8:	bf38      	it	cc
 8006cba:	2204      	movcc	r2, #4
 8006cbc:	9201      	str	r2, [sp, #4]
 8006cbe:	9a02      	ldr	r2, [sp, #8]
 8006cc0:	9303      	str	r3, [sp, #12]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d808      	bhi.n	8006cd8 <__multiply+0x98>
 8006cc6:	2f00      	cmp	r7, #0
 8006cc8:	dc55      	bgt.n	8006d76 <__multiply+0x136>
 8006cca:	6107      	str	r7, [r0, #16]
 8006ccc:	b005      	add	sp, #20
 8006cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd2:	f843 2b04 	str.w	r2, [r3], #4
 8006cd6:	e7db      	b.n	8006c90 <__multiply+0x50>
 8006cd8:	f8b3 a000 	ldrh.w	sl, [r3]
 8006cdc:	f1ba 0f00 	cmp.w	sl, #0
 8006ce0:	d020      	beq.n	8006d24 <__multiply+0xe4>
 8006ce2:	f105 0e14 	add.w	lr, r5, #20
 8006ce6:	46b1      	mov	r9, r6
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006cee:	f8d9 b000 	ldr.w	fp, [r9]
 8006cf2:	b2a1      	uxth	r1, r4
 8006cf4:	fa1f fb8b 	uxth.w	fp, fp
 8006cf8:	fb0a b101 	mla	r1, sl, r1, fp
 8006cfc:	4411      	add	r1, r2
 8006cfe:	f8d9 2000 	ldr.w	r2, [r9]
 8006d02:	0c24      	lsrs	r4, r4, #16
 8006d04:	0c12      	lsrs	r2, r2, #16
 8006d06:	fb0a 2404 	mla	r4, sl, r4, r2
 8006d0a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006d0e:	b289      	uxth	r1, r1
 8006d10:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006d14:	45f4      	cmp	ip, lr
 8006d16:	f849 1b04 	str.w	r1, [r9], #4
 8006d1a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006d1e:	d8e4      	bhi.n	8006cea <__multiply+0xaa>
 8006d20:	9901      	ldr	r1, [sp, #4]
 8006d22:	5072      	str	r2, [r6, r1]
 8006d24:	9a03      	ldr	r2, [sp, #12]
 8006d26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	f1b9 0f00 	cmp.w	r9, #0
 8006d30:	d01f      	beq.n	8006d72 <__multiply+0x132>
 8006d32:	6834      	ldr	r4, [r6, #0]
 8006d34:	f105 0114 	add.w	r1, r5, #20
 8006d38:	46b6      	mov	lr, r6
 8006d3a:	f04f 0a00 	mov.w	sl, #0
 8006d3e:	880a      	ldrh	r2, [r1, #0]
 8006d40:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006d44:	fb09 b202 	mla	r2, r9, r2, fp
 8006d48:	4492      	add	sl, r2
 8006d4a:	b2a4      	uxth	r4, r4
 8006d4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006d50:	f84e 4b04 	str.w	r4, [lr], #4
 8006d54:	f851 4b04 	ldr.w	r4, [r1], #4
 8006d58:	f8be 2000 	ldrh.w	r2, [lr]
 8006d5c:	0c24      	lsrs	r4, r4, #16
 8006d5e:	fb09 2404 	mla	r4, r9, r4, r2
 8006d62:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006d66:	458c      	cmp	ip, r1
 8006d68:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006d6c:	d8e7      	bhi.n	8006d3e <__multiply+0xfe>
 8006d6e:	9a01      	ldr	r2, [sp, #4]
 8006d70:	50b4      	str	r4, [r6, r2]
 8006d72:	3604      	adds	r6, #4
 8006d74:	e7a3      	b.n	8006cbe <__multiply+0x7e>
 8006d76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1a5      	bne.n	8006cca <__multiply+0x8a>
 8006d7e:	3f01      	subs	r7, #1
 8006d80:	e7a1      	b.n	8006cc6 <__multiply+0x86>
 8006d82:	bf00      	nop
 8006d84:	08007edb 	.word	0x08007edb
 8006d88:	08007eec 	.word	0x08007eec

08006d8c <__pow5mult>:
 8006d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d90:	4615      	mov	r5, r2
 8006d92:	f012 0203 	ands.w	r2, r2, #3
 8006d96:	4606      	mov	r6, r0
 8006d98:	460f      	mov	r7, r1
 8006d9a:	d007      	beq.n	8006dac <__pow5mult+0x20>
 8006d9c:	4c25      	ldr	r4, [pc, #148]	; (8006e34 <__pow5mult+0xa8>)
 8006d9e:	3a01      	subs	r2, #1
 8006da0:	2300      	movs	r3, #0
 8006da2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006da6:	f7ff fe9b 	bl	8006ae0 <__multadd>
 8006daa:	4607      	mov	r7, r0
 8006dac:	10ad      	asrs	r5, r5, #2
 8006dae:	d03d      	beq.n	8006e2c <__pow5mult+0xa0>
 8006db0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006db2:	b97c      	cbnz	r4, 8006dd4 <__pow5mult+0x48>
 8006db4:	2010      	movs	r0, #16
 8006db6:	f7ff fe1b 	bl	80069f0 <malloc>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	6270      	str	r0, [r6, #36]	; 0x24
 8006dbe:	b928      	cbnz	r0, 8006dcc <__pow5mult+0x40>
 8006dc0:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <__pow5mult+0xac>)
 8006dc2:	481e      	ldr	r0, [pc, #120]	; (8006e3c <__pow5mult+0xb0>)
 8006dc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006dc8:	f000 fa70 	bl	80072ac <__assert_func>
 8006dcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dd0:	6004      	str	r4, [r0, #0]
 8006dd2:	60c4      	str	r4, [r0, #12]
 8006dd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006dd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ddc:	b94c      	cbnz	r4, 8006df2 <__pow5mult+0x66>
 8006dde:	f240 2171 	movw	r1, #625	; 0x271
 8006de2:	4630      	mov	r0, r6
 8006de4:	f7ff ff16 	bl	8006c14 <__i2b>
 8006de8:	2300      	movs	r3, #0
 8006dea:	f8c8 0008 	str.w	r0, [r8, #8]
 8006dee:	4604      	mov	r4, r0
 8006df0:	6003      	str	r3, [r0, #0]
 8006df2:	f04f 0900 	mov.w	r9, #0
 8006df6:	07eb      	lsls	r3, r5, #31
 8006df8:	d50a      	bpl.n	8006e10 <__pow5mult+0x84>
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	4622      	mov	r2, r4
 8006dfe:	4630      	mov	r0, r6
 8006e00:	f7ff ff1e 	bl	8006c40 <__multiply>
 8006e04:	4639      	mov	r1, r7
 8006e06:	4680      	mov	r8, r0
 8006e08:	4630      	mov	r0, r6
 8006e0a:	f7ff fe47 	bl	8006a9c <_Bfree>
 8006e0e:	4647      	mov	r7, r8
 8006e10:	106d      	asrs	r5, r5, #1
 8006e12:	d00b      	beq.n	8006e2c <__pow5mult+0xa0>
 8006e14:	6820      	ldr	r0, [r4, #0]
 8006e16:	b938      	cbnz	r0, 8006e28 <__pow5mult+0x9c>
 8006e18:	4622      	mov	r2, r4
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	f7ff ff0f 	bl	8006c40 <__multiply>
 8006e22:	6020      	str	r0, [r4, #0]
 8006e24:	f8c0 9000 	str.w	r9, [r0]
 8006e28:	4604      	mov	r4, r0
 8006e2a:	e7e4      	b.n	8006df6 <__pow5mult+0x6a>
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e32:	bf00      	nop
 8006e34:	08008040 	.word	0x08008040
 8006e38:	08007e65 	.word	0x08007e65
 8006e3c:	08007eec 	.word	0x08007eec

08006e40 <__lshift>:
 8006e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e44:	460c      	mov	r4, r1
 8006e46:	6849      	ldr	r1, [r1, #4]
 8006e48:	6923      	ldr	r3, [r4, #16]
 8006e4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e4e:	68a3      	ldr	r3, [r4, #8]
 8006e50:	4607      	mov	r7, r0
 8006e52:	4691      	mov	r9, r2
 8006e54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e58:	f108 0601 	add.w	r6, r8, #1
 8006e5c:	42b3      	cmp	r3, r6
 8006e5e:	db0b      	blt.n	8006e78 <__lshift+0x38>
 8006e60:	4638      	mov	r0, r7
 8006e62:	f7ff fddb 	bl	8006a1c <_Balloc>
 8006e66:	4605      	mov	r5, r0
 8006e68:	b948      	cbnz	r0, 8006e7e <__lshift+0x3e>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	4b28      	ldr	r3, [pc, #160]	; (8006f10 <__lshift+0xd0>)
 8006e6e:	4829      	ldr	r0, [pc, #164]	; (8006f14 <__lshift+0xd4>)
 8006e70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e74:	f000 fa1a 	bl	80072ac <__assert_func>
 8006e78:	3101      	adds	r1, #1
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	e7ee      	b.n	8006e5c <__lshift+0x1c>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f100 0114 	add.w	r1, r0, #20
 8006e84:	f100 0210 	add.w	r2, r0, #16
 8006e88:	4618      	mov	r0, r3
 8006e8a:	4553      	cmp	r3, sl
 8006e8c:	db33      	blt.n	8006ef6 <__lshift+0xb6>
 8006e8e:	6920      	ldr	r0, [r4, #16]
 8006e90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e94:	f104 0314 	add.w	r3, r4, #20
 8006e98:	f019 091f 	ands.w	r9, r9, #31
 8006e9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ea0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ea4:	d02b      	beq.n	8006efe <__lshift+0xbe>
 8006ea6:	f1c9 0e20 	rsb	lr, r9, #32
 8006eaa:	468a      	mov	sl, r1
 8006eac:	2200      	movs	r2, #0
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	fa00 f009 	lsl.w	r0, r0, r9
 8006eb4:	4302      	orrs	r2, r0
 8006eb6:	f84a 2b04 	str.w	r2, [sl], #4
 8006eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ebe:	459c      	cmp	ip, r3
 8006ec0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ec4:	d8f3      	bhi.n	8006eae <__lshift+0x6e>
 8006ec6:	ebac 0304 	sub.w	r3, ip, r4
 8006eca:	3b15      	subs	r3, #21
 8006ecc:	f023 0303 	bic.w	r3, r3, #3
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	f104 0015 	add.w	r0, r4, #21
 8006ed6:	4584      	cmp	ip, r0
 8006ed8:	bf38      	it	cc
 8006eda:	2304      	movcc	r3, #4
 8006edc:	50ca      	str	r2, [r1, r3]
 8006ede:	b10a      	cbz	r2, 8006ee4 <__lshift+0xa4>
 8006ee0:	f108 0602 	add.w	r6, r8, #2
 8006ee4:	3e01      	subs	r6, #1
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	612e      	str	r6, [r5, #16]
 8006eea:	4621      	mov	r1, r4
 8006eec:	f7ff fdd6 	bl	8006a9c <_Bfree>
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006efa:	3301      	adds	r3, #1
 8006efc:	e7c5      	b.n	8006e8a <__lshift+0x4a>
 8006efe:	3904      	subs	r1, #4
 8006f00:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f04:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f08:	459c      	cmp	ip, r3
 8006f0a:	d8f9      	bhi.n	8006f00 <__lshift+0xc0>
 8006f0c:	e7ea      	b.n	8006ee4 <__lshift+0xa4>
 8006f0e:	bf00      	nop
 8006f10:	08007edb 	.word	0x08007edb
 8006f14:	08007eec 	.word	0x08007eec

08006f18 <__mcmp>:
 8006f18:	b530      	push	{r4, r5, lr}
 8006f1a:	6902      	ldr	r2, [r0, #16]
 8006f1c:	690c      	ldr	r4, [r1, #16]
 8006f1e:	1b12      	subs	r2, r2, r4
 8006f20:	d10e      	bne.n	8006f40 <__mcmp+0x28>
 8006f22:	f100 0314 	add.w	r3, r0, #20
 8006f26:	3114      	adds	r1, #20
 8006f28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006f2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f38:	42a5      	cmp	r5, r4
 8006f3a:	d003      	beq.n	8006f44 <__mcmp+0x2c>
 8006f3c:	d305      	bcc.n	8006f4a <__mcmp+0x32>
 8006f3e:	2201      	movs	r2, #1
 8006f40:	4610      	mov	r0, r2
 8006f42:	bd30      	pop	{r4, r5, pc}
 8006f44:	4283      	cmp	r3, r0
 8006f46:	d3f3      	bcc.n	8006f30 <__mcmp+0x18>
 8006f48:	e7fa      	b.n	8006f40 <__mcmp+0x28>
 8006f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f4e:	e7f7      	b.n	8006f40 <__mcmp+0x28>

08006f50 <__mdiff>:
 8006f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f54:	460c      	mov	r4, r1
 8006f56:	4606      	mov	r6, r0
 8006f58:	4611      	mov	r1, r2
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	4617      	mov	r7, r2
 8006f5e:	f7ff ffdb 	bl	8006f18 <__mcmp>
 8006f62:	1e05      	subs	r5, r0, #0
 8006f64:	d110      	bne.n	8006f88 <__mdiff+0x38>
 8006f66:	4629      	mov	r1, r5
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f7ff fd57 	bl	8006a1c <_Balloc>
 8006f6e:	b930      	cbnz	r0, 8006f7e <__mdiff+0x2e>
 8006f70:	4b39      	ldr	r3, [pc, #228]	; (8007058 <__mdiff+0x108>)
 8006f72:	4602      	mov	r2, r0
 8006f74:	f240 2132 	movw	r1, #562	; 0x232
 8006f78:	4838      	ldr	r0, [pc, #224]	; (800705c <__mdiff+0x10c>)
 8006f7a:	f000 f997 	bl	80072ac <__assert_func>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f88:	bfa4      	itt	ge
 8006f8a:	463b      	movge	r3, r7
 8006f8c:	4627      	movge	r7, r4
 8006f8e:	4630      	mov	r0, r6
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	bfa6      	itte	ge
 8006f94:	461c      	movge	r4, r3
 8006f96:	2500      	movge	r5, #0
 8006f98:	2501      	movlt	r5, #1
 8006f9a:	f7ff fd3f 	bl	8006a1c <_Balloc>
 8006f9e:	b920      	cbnz	r0, 8006faa <__mdiff+0x5a>
 8006fa0:	4b2d      	ldr	r3, [pc, #180]	; (8007058 <__mdiff+0x108>)
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006fa8:	e7e6      	b.n	8006f78 <__mdiff+0x28>
 8006faa:	693e      	ldr	r6, [r7, #16]
 8006fac:	60c5      	str	r5, [r0, #12]
 8006fae:	6925      	ldr	r5, [r4, #16]
 8006fb0:	f107 0114 	add.w	r1, r7, #20
 8006fb4:	f104 0914 	add.w	r9, r4, #20
 8006fb8:	f100 0e14 	add.w	lr, r0, #20
 8006fbc:	f107 0210 	add.w	r2, r7, #16
 8006fc0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006fc4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006fc8:	46f2      	mov	sl, lr
 8006fca:	2700      	movs	r7, #0
 8006fcc:	f859 3b04 	ldr.w	r3, [r9], #4
 8006fd0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006fd4:	fa1f f883 	uxth.w	r8, r3
 8006fd8:	fa17 f78b 	uxtah	r7, r7, fp
 8006fdc:	0c1b      	lsrs	r3, r3, #16
 8006fde:	eba7 0808 	sub.w	r8, r7, r8
 8006fe2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006fe6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006fea:	fa1f f888 	uxth.w	r8, r8
 8006fee:	141f      	asrs	r7, r3, #16
 8006ff0:	454d      	cmp	r5, r9
 8006ff2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ff6:	f84a 3b04 	str.w	r3, [sl], #4
 8006ffa:	d8e7      	bhi.n	8006fcc <__mdiff+0x7c>
 8006ffc:	1b2b      	subs	r3, r5, r4
 8006ffe:	3b15      	subs	r3, #21
 8007000:	f023 0303 	bic.w	r3, r3, #3
 8007004:	3304      	adds	r3, #4
 8007006:	3415      	adds	r4, #21
 8007008:	42a5      	cmp	r5, r4
 800700a:	bf38      	it	cc
 800700c:	2304      	movcc	r3, #4
 800700e:	4419      	add	r1, r3
 8007010:	4473      	add	r3, lr
 8007012:	469e      	mov	lr, r3
 8007014:	460d      	mov	r5, r1
 8007016:	4565      	cmp	r5, ip
 8007018:	d30e      	bcc.n	8007038 <__mdiff+0xe8>
 800701a:	f10c 0203 	add.w	r2, ip, #3
 800701e:	1a52      	subs	r2, r2, r1
 8007020:	f022 0203 	bic.w	r2, r2, #3
 8007024:	3903      	subs	r1, #3
 8007026:	458c      	cmp	ip, r1
 8007028:	bf38      	it	cc
 800702a:	2200      	movcc	r2, #0
 800702c:	441a      	add	r2, r3
 800702e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007032:	b17b      	cbz	r3, 8007054 <__mdiff+0x104>
 8007034:	6106      	str	r6, [r0, #16]
 8007036:	e7a5      	b.n	8006f84 <__mdiff+0x34>
 8007038:	f855 8b04 	ldr.w	r8, [r5], #4
 800703c:	fa17 f488 	uxtah	r4, r7, r8
 8007040:	1422      	asrs	r2, r4, #16
 8007042:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007046:	b2a4      	uxth	r4, r4
 8007048:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800704c:	f84e 4b04 	str.w	r4, [lr], #4
 8007050:	1417      	asrs	r7, r2, #16
 8007052:	e7e0      	b.n	8007016 <__mdiff+0xc6>
 8007054:	3e01      	subs	r6, #1
 8007056:	e7ea      	b.n	800702e <__mdiff+0xde>
 8007058:	08007edb 	.word	0x08007edb
 800705c:	08007eec 	.word	0x08007eec

08007060 <__d2b>:
 8007060:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007064:	4689      	mov	r9, r1
 8007066:	2101      	movs	r1, #1
 8007068:	ec57 6b10 	vmov	r6, r7, d0
 800706c:	4690      	mov	r8, r2
 800706e:	f7ff fcd5 	bl	8006a1c <_Balloc>
 8007072:	4604      	mov	r4, r0
 8007074:	b930      	cbnz	r0, 8007084 <__d2b+0x24>
 8007076:	4602      	mov	r2, r0
 8007078:	4b25      	ldr	r3, [pc, #148]	; (8007110 <__d2b+0xb0>)
 800707a:	4826      	ldr	r0, [pc, #152]	; (8007114 <__d2b+0xb4>)
 800707c:	f240 310a 	movw	r1, #778	; 0x30a
 8007080:	f000 f914 	bl	80072ac <__assert_func>
 8007084:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007088:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800708c:	bb35      	cbnz	r5, 80070dc <__d2b+0x7c>
 800708e:	2e00      	cmp	r6, #0
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	d028      	beq.n	80070e6 <__d2b+0x86>
 8007094:	4668      	mov	r0, sp
 8007096:	9600      	str	r6, [sp, #0]
 8007098:	f7ff fd8c 	bl	8006bb4 <__lo0bits>
 800709c:	9900      	ldr	r1, [sp, #0]
 800709e:	b300      	cbz	r0, 80070e2 <__d2b+0x82>
 80070a0:	9a01      	ldr	r2, [sp, #4]
 80070a2:	f1c0 0320 	rsb	r3, r0, #32
 80070a6:	fa02 f303 	lsl.w	r3, r2, r3
 80070aa:	430b      	orrs	r3, r1
 80070ac:	40c2      	lsrs	r2, r0
 80070ae:	6163      	str	r3, [r4, #20]
 80070b0:	9201      	str	r2, [sp, #4]
 80070b2:	9b01      	ldr	r3, [sp, #4]
 80070b4:	61a3      	str	r3, [r4, #24]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	bf14      	ite	ne
 80070ba:	2202      	movne	r2, #2
 80070bc:	2201      	moveq	r2, #1
 80070be:	6122      	str	r2, [r4, #16]
 80070c0:	b1d5      	cbz	r5, 80070f8 <__d2b+0x98>
 80070c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80070c6:	4405      	add	r5, r0
 80070c8:	f8c9 5000 	str.w	r5, [r9]
 80070cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80070d0:	f8c8 0000 	str.w	r0, [r8]
 80070d4:	4620      	mov	r0, r4
 80070d6:	b003      	add	sp, #12
 80070d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070e0:	e7d5      	b.n	800708e <__d2b+0x2e>
 80070e2:	6161      	str	r1, [r4, #20]
 80070e4:	e7e5      	b.n	80070b2 <__d2b+0x52>
 80070e6:	a801      	add	r0, sp, #4
 80070e8:	f7ff fd64 	bl	8006bb4 <__lo0bits>
 80070ec:	9b01      	ldr	r3, [sp, #4]
 80070ee:	6163      	str	r3, [r4, #20]
 80070f0:	2201      	movs	r2, #1
 80070f2:	6122      	str	r2, [r4, #16]
 80070f4:	3020      	adds	r0, #32
 80070f6:	e7e3      	b.n	80070c0 <__d2b+0x60>
 80070f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007100:	f8c9 0000 	str.w	r0, [r9]
 8007104:	6918      	ldr	r0, [r3, #16]
 8007106:	f7ff fd35 	bl	8006b74 <__hi0bits>
 800710a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800710e:	e7df      	b.n	80070d0 <__d2b+0x70>
 8007110:	08007edb 	.word	0x08007edb
 8007114:	08007eec 	.word	0x08007eec

08007118 <_calloc_r>:
 8007118:	b513      	push	{r0, r1, r4, lr}
 800711a:	434a      	muls	r2, r1
 800711c:	4611      	mov	r1, r2
 800711e:	9201      	str	r2, [sp, #4]
 8007120:	f000 f85a 	bl	80071d8 <_malloc_r>
 8007124:	4604      	mov	r4, r0
 8007126:	b118      	cbz	r0, 8007130 <_calloc_r+0x18>
 8007128:	9a01      	ldr	r2, [sp, #4]
 800712a:	2100      	movs	r1, #0
 800712c:	f7fe f972 	bl	8005414 <memset>
 8007130:	4620      	mov	r0, r4
 8007132:	b002      	add	sp, #8
 8007134:	bd10      	pop	{r4, pc}
	...

08007138 <_free_r>:
 8007138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800713a:	2900      	cmp	r1, #0
 800713c:	d048      	beq.n	80071d0 <_free_r+0x98>
 800713e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007142:	9001      	str	r0, [sp, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	f1a1 0404 	sub.w	r4, r1, #4
 800714a:	bfb8      	it	lt
 800714c:	18e4      	addlt	r4, r4, r3
 800714e:	f000 f8ef 	bl	8007330 <__malloc_lock>
 8007152:	4a20      	ldr	r2, [pc, #128]	; (80071d4 <_free_r+0x9c>)
 8007154:	9801      	ldr	r0, [sp, #4]
 8007156:	6813      	ldr	r3, [r2, #0]
 8007158:	4615      	mov	r5, r2
 800715a:	b933      	cbnz	r3, 800716a <_free_r+0x32>
 800715c:	6063      	str	r3, [r4, #4]
 800715e:	6014      	str	r4, [r2, #0]
 8007160:	b003      	add	sp, #12
 8007162:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007166:	f000 b8e9 	b.w	800733c <__malloc_unlock>
 800716a:	42a3      	cmp	r3, r4
 800716c:	d90b      	bls.n	8007186 <_free_r+0x4e>
 800716e:	6821      	ldr	r1, [r4, #0]
 8007170:	1862      	adds	r2, r4, r1
 8007172:	4293      	cmp	r3, r2
 8007174:	bf04      	itt	eq
 8007176:	681a      	ldreq	r2, [r3, #0]
 8007178:	685b      	ldreq	r3, [r3, #4]
 800717a:	6063      	str	r3, [r4, #4]
 800717c:	bf04      	itt	eq
 800717e:	1852      	addeq	r2, r2, r1
 8007180:	6022      	streq	r2, [r4, #0]
 8007182:	602c      	str	r4, [r5, #0]
 8007184:	e7ec      	b.n	8007160 <_free_r+0x28>
 8007186:	461a      	mov	r2, r3
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	b10b      	cbz	r3, 8007190 <_free_r+0x58>
 800718c:	42a3      	cmp	r3, r4
 800718e:	d9fa      	bls.n	8007186 <_free_r+0x4e>
 8007190:	6811      	ldr	r1, [r2, #0]
 8007192:	1855      	adds	r5, r2, r1
 8007194:	42a5      	cmp	r5, r4
 8007196:	d10b      	bne.n	80071b0 <_free_r+0x78>
 8007198:	6824      	ldr	r4, [r4, #0]
 800719a:	4421      	add	r1, r4
 800719c:	1854      	adds	r4, r2, r1
 800719e:	42a3      	cmp	r3, r4
 80071a0:	6011      	str	r1, [r2, #0]
 80071a2:	d1dd      	bne.n	8007160 <_free_r+0x28>
 80071a4:	681c      	ldr	r4, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	6053      	str	r3, [r2, #4]
 80071aa:	4421      	add	r1, r4
 80071ac:	6011      	str	r1, [r2, #0]
 80071ae:	e7d7      	b.n	8007160 <_free_r+0x28>
 80071b0:	d902      	bls.n	80071b8 <_free_r+0x80>
 80071b2:	230c      	movs	r3, #12
 80071b4:	6003      	str	r3, [r0, #0]
 80071b6:	e7d3      	b.n	8007160 <_free_r+0x28>
 80071b8:	6825      	ldr	r5, [r4, #0]
 80071ba:	1961      	adds	r1, r4, r5
 80071bc:	428b      	cmp	r3, r1
 80071be:	bf04      	itt	eq
 80071c0:	6819      	ldreq	r1, [r3, #0]
 80071c2:	685b      	ldreq	r3, [r3, #4]
 80071c4:	6063      	str	r3, [r4, #4]
 80071c6:	bf04      	itt	eq
 80071c8:	1949      	addeq	r1, r1, r5
 80071ca:	6021      	streq	r1, [r4, #0]
 80071cc:	6054      	str	r4, [r2, #4]
 80071ce:	e7c7      	b.n	8007160 <_free_r+0x28>
 80071d0:	b003      	add	sp, #12
 80071d2:	bd30      	pop	{r4, r5, pc}
 80071d4:	2000025c 	.word	0x2000025c

080071d8 <_malloc_r>:
 80071d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071da:	1ccd      	adds	r5, r1, #3
 80071dc:	f025 0503 	bic.w	r5, r5, #3
 80071e0:	3508      	adds	r5, #8
 80071e2:	2d0c      	cmp	r5, #12
 80071e4:	bf38      	it	cc
 80071e6:	250c      	movcc	r5, #12
 80071e8:	2d00      	cmp	r5, #0
 80071ea:	4606      	mov	r6, r0
 80071ec:	db01      	blt.n	80071f2 <_malloc_r+0x1a>
 80071ee:	42a9      	cmp	r1, r5
 80071f0:	d903      	bls.n	80071fa <_malloc_r+0x22>
 80071f2:	230c      	movs	r3, #12
 80071f4:	6033      	str	r3, [r6, #0]
 80071f6:	2000      	movs	r0, #0
 80071f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071fa:	f000 f899 	bl	8007330 <__malloc_lock>
 80071fe:	4921      	ldr	r1, [pc, #132]	; (8007284 <_malloc_r+0xac>)
 8007200:	680a      	ldr	r2, [r1, #0]
 8007202:	4614      	mov	r4, r2
 8007204:	b99c      	cbnz	r4, 800722e <_malloc_r+0x56>
 8007206:	4f20      	ldr	r7, [pc, #128]	; (8007288 <_malloc_r+0xb0>)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	b923      	cbnz	r3, 8007216 <_malloc_r+0x3e>
 800720c:	4621      	mov	r1, r4
 800720e:	4630      	mov	r0, r6
 8007210:	f000 f83c 	bl	800728c <_sbrk_r>
 8007214:	6038      	str	r0, [r7, #0]
 8007216:	4629      	mov	r1, r5
 8007218:	4630      	mov	r0, r6
 800721a:	f000 f837 	bl	800728c <_sbrk_r>
 800721e:	1c43      	adds	r3, r0, #1
 8007220:	d123      	bne.n	800726a <_malloc_r+0x92>
 8007222:	230c      	movs	r3, #12
 8007224:	6033      	str	r3, [r6, #0]
 8007226:	4630      	mov	r0, r6
 8007228:	f000 f888 	bl	800733c <__malloc_unlock>
 800722c:	e7e3      	b.n	80071f6 <_malloc_r+0x1e>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	1b5b      	subs	r3, r3, r5
 8007232:	d417      	bmi.n	8007264 <_malloc_r+0x8c>
 8007234:	2b0b      	cmp	r3, #11
 8007236:	d903      	bls.n	8007240 <_malloc_r+0x68>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	441c      	add	r4, r3
 800723c:	6025      	str	r5, [r4, #0]
 800723e:	e004      	b.n	800724a <_malloc_r+0x72>
 8007240:	6863      	ldr	r3, [r4, #4]
 8007242:	42a2      	cmp	r2, r4
 8007244:	bf0c      	ite	eq
 8007246:	600b      	streq	r3, [r1, #0]
 8007248:	6053      	strne	r3, [r2, #4]
 800724a:	4630      	mov	r0, r6
 800724c:	f000 f876 	bl	800733c <__malloc_unlock>
 8007250:	f104 000b 	add.w	r0, r4, #11
 8007254:	1d23      	adds	r3, r4, #4
 8007256:	f020 0007 	bic.w	r0, r0, #7
 800725a:	1ac2      	subs	r2, r0, r3
 800725c:	d0cc      	beq.n	80071f8 <_malloc_r+0x20>
 800725e:	1a1b      	subs	r3, r3, r0
 8007260:	50a3      	str	r3, [r4, r2]
 8007262:	e7c9      	b.n	80071f8 <_malloc_r+0x20>
 8007264:	4622      	mov	r2, r4
 8007266:	6864      	ldr	r4, [r4, #4]
 8007268:	e7cc      	b.n	8007204 <_malloc_r+0x2c>
 800726a:	1cc4      	adds	r4, r0, #3
 800726c:	f024 0403 	bic.w	r4, r4, #3
 8007270:	42a0      	cmp	r0, r4
 8007272:	d0e3      	beq.n	800723c <_malloc_r+0x64>
 8007274:	1a21      	subs	r1, r4, r0
 8007276:	4630      	mov	r0, r6
 8007278:	f000 f808 	bl	800728c <_sbrk_r>
 800727c:	3001      	adds	r0, #1
 800727e:	d1dd      	bne.n	800723c <_malloc_r+0x64>
 8007280:	e7cf      	b.n	8007222 <_malloc_r+0x4a>
 8007282:	bf00      	nop
 8007284:	2000025c 	.word	0x2000025c
 8007288:	20000260 	.word	0x20000260

0800728c <_sbrk_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4d06      	ldr	r5, [pc, #24]	; (80072a8 <_sbrk_r+0x1c>)
 8007290:	2300      	movs	r3, #0
 8007292:	4604      	mov	r4, r0
 8007294:	4608      	mov	r0, r1
 8007296:	602b      	str	r3, [r5, #0]
 8007298:	f7fa f936 	bl	8001508 <_sbrk>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_sbrk_r+0x1a>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_sbrk_r+0x1a>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	2000a418 	.word	0x2000a418

080072ac <__assert_func>:
 80072ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072ae:	4614      	mov	r4, r2
 80072b0:	461a      	mov	r2, r3
 80072b2:	4b09      	ldr	r3, [pc, #36]	; (80072d8 <__assert_func+0x2c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4605      	mov	r5, r0
 80072b8:	68d8      	ldr	r0, [r3, #12]
 80072ba:	b14c      	cbz	r4, 80072d0 <__assert_func+0x24>
 80072bc:	4b07      	ldr	r3, [pc, #28]	; (80072dc <__assert_func+0x30>)
 80072be:	9100      	str	r1, [sp, #0]
 80072c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072c4:	4906      	ldr	r1, [pc, #24]	; (80072e0 <__assert_func+0x34>)
 80072c6:	462b      	mov	r3, r5
 80072c8:	f000 f80e 	bl	80072e8 <fiprintf>
 80072cc:	f000 fa64 	bl	8007798 <abort>
 80072d0:	4b04      	ldr	r3, [pc, #16]	; (80072e4 <__assert_func+0x38>)
 80072d2:	461c      	mov	r4, r3
 80072d4:	e7f3      	b.n	80072be <__assert_func+0x12>
 80072d6:	bf00      	nop
 80072d8:	20000060 	.word	0x20000060
 80072dc:	0800804c 	.word	0x0800804c
 80072e0:	08008059 	.word	0x08008059
 80072e4:	08008087 	.word	0x08008087

080072e8 <fiprintf>:
 80072e8:	b40e      	push	{r1, r2, r3}
 80072ea:	b503      	push	{r0, r1, lr}
 80072ec:	4601      	mov	r1, r0
 80072ee:	ab03      	add	r3, sp, #12
 80072f0:	4805      	ldr	r0, [pc, #20]	; (8007308 <fiprintf+0x20>)
 80072f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072f6:	6800      	ldr	r0, [r0, #0]
 80072f8:	9301      	str	r3, [sp, #4]
 80072fa:	f000 f84f 	bl	800739c <_vfiprintf_r>
 80072fe:	b002      	add	sp, #8
 8007300:	f85d eb04 	ldr.w	lr, [sp], #4
 8007304:	b003      	add	sp, #12
 8007306:	4770      	bx	lr
 8007308:	20000060 	.word	0x20000060

0800730c <__ascii_mbtowc>:
 800730c:	b082      	sub	sp, #8
 800730e:	b901      	cbnz	r1, 8007312 <__ascii_mbtowc+0x6>
 8007310:	a901      	add	r1, sp, #4
 8007312:	b142      	cbz	r2, 8007326 <__ascii_mbtowc+0x1a>
 8007314:	b14b      	cbz	r3, 800732a <__ascii_mbtowc+0x1e>
 8007316:	7813      	ldrb	r3, [r2, #0]
 8007318:	600b      	str	r3, [r1, #0]
 800731a:	7812      	ldrb	r2, [r2, #0]
 800731c:	1e10      	subs	r0, r2, #0
 800731e:	bf18      	it	ne
 8007320:	2001      	movne	r0, #1
 8007322:	b002      	add	sp, #8
 8007324:	4770      	bx	lr
 8007326:	4610      	mov	r0, r2
 8007328:	e7fb      	b.n	8007322 <__ascii_mbtowc+0x16>
 800732a:	f06f 0001 	mvn.w	r0, #1
 800732e:	e7f8      	b.n	8007322 <__ascii_mbtowc+0x16>

08007330 <__malloc_lock>:
 8007330:	4801      	ldr	r0, [pc, #4]	; (8007338 <__malloc_lock+0x8>)
 8007332:	f000 bbf1 	b.w	8007b18 <__retarget_lock_acquire_recursive>
 8007336:	bf00      	nop
 8007338:	2000a420 	.word	0x2000a420

0800733c <__malloc_unlock>:
 800733c:	4801      	ldr	r0, [pc, #4]	; (8007344 <__malloc_unlock+0x8>)
 800733e:	f000 bbec 	b.w	8007b1a <__retarget_lock_release_recursive>
 8007342:	bf00      	nop
 8007344:	2000a420 	.word	0x2000a420

08007348 <__sfputc_r>:
 8007348:	6893      	ldr	r3, [r2, #8]
 800734a:	3b01      	subs	r3, #1
 800734c:	2b00      	cmp	r3, #0
 800734e:	b410      	push	{r4}
 8007350:	6093      	str	r3, [r2, #8]
 8007352:	da08      	bge.n	8007366 <__sfputc_r+0x1e>
 8007354:	6994      	ldr	r4, [r2, #24]
 8007356:	42a3      	cmp	r3, r4
 8007358:	db01      	blt.n	800735e <__sfputc_r+0x16>
 800735a:	290a      	cmp	r1, #10
 800735c:	d103      	bne.n	8007366 <__sfputc_r+0x1e>
 800735e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007362:	f000 b94b 	b.w	80075fc <__swbuf_r>
 8007366:	6813      	ldr	r3, [r2, #0]
 8007368:	1c58      	adds	r0, r3, #1
 800736a:	6010      	str	r0, [r2, #0]
 800736c:	7019      	strb	r1, [r3, #0]
 800736e:	4608      	mov	r0, r1
 8007370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007374:	4770      	bx	lr

08007376 <__sfputs_r>:
 8007376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007378:	4606      	mov	r6, r0
 800737a:	460f      	mov	r7, r1
 800737c:	4614      	mov	r4, r2
 800737e:	18d5      	adds	r5, r2, r3
 8007380:	42ac      	cmp	r4, r5
 8007382:	d101      	bne.n	8007388 <__sfputs_r+0x12>
 8007384:	2000      	movs	r0, #0
 8007386:	e007      	b.n	8007398 <__sfputs_r+0x22>
 8007388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800738c:	463a      	mov	r2, r7
 800738e:	4630      	mov	r0, r6
 8007390:	f7ff ffda 	bl	8007348 <__sfputc_r>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d1f3      	bne.n	8007380 <__sfputs_r+0xa>
 8007398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800739c <_vfiprintf_r>:
 800739c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a0:	460d      	mov	r5, r1
 80073a2:	b09d      	sub	sp, #116	; 0x74
 80073a4:	4614      	mov	r4, r2
 80073a6:	4698      	mov	r8, r3
 80073a8:	4606      	mov	r6, r0
 80073aa:	b118      	cbz	r0, 80073b4 <_vfiprintf_r+0x18>
 80073ac:	6983      	ldr	r3, [r0, #24]
 80073ae:	b90b      	cbnz	r3, 80073b4 <_vfiprintf_r+0x18>
 80073b0:	f000 fb14 	bl	80079dc <__sinit>
 80073b4:	4b89      	ldr	r3, [pc, #548]	; (80075dc <_vfiprintf_r+0x240>)
 80073b6:	429d      	cmp	r5, r3
 80073b8:	d11b      	bne.n	80073f2 <_vfiprintf_r+0x56>
 80073ba:	6875      	ldr	r5, [r6, #4]
 80073bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073be:	07d9      	lsls	r1, r3, #31
 80073c0:	d405      	bmi.n	80073ce <_vfiprintf_r+0x32>
 80073c2:	89ab      	ldrh	r3, [r5, #12]
 80073c4:	059a      	lsls	r2, r3, #22
 80073c6:	d402      	bmi.n	80073ce <_vfiprintf_r+0x32>
 80073c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073ca:	f000 fba5 	bl	8007b18 <__retarget_lock_acquire_recursive>
 80073ce:	89ab      	ldrh	r3, [r5, #12]
 80073d0:	071b      	lsls	r3, r3, #28
 80073d2:	d501      	bpl.n	80073d8 <_vfiprintf_r+0x3c>
 80073d4:	692b      	ldr	r3, [r5, #16]
 80073d6:	b9eb      	cbnz	r3, 8007414 <_vfiprintf_r+0x78>
 80073d8:	4629      	mov	r1, r5
 80073da:	4630      	mov	r0, r6
 80073dc:	f000 f96e 	bl	80076bc <__swsetup_r>
 80073e0:	b1c0      	cbz	r0, 8007414 <_vfiprintf_r+0x78>
 80073e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073e4:	07dc      	lsls	r4, r3, #31
 80073e6:	d50e      	bpl.n	8007406 <_vfiprintf_r+0x6a>
 80073e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073ec:	b01d      	add	sp, #116	; 0x74
 80073ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f2:	4b7b      	ldr	r3, [pc, #492]	; (80075e0 <_vfiprintf_r+0x244>)
 80073f4:	429d      	cmp	r5, r3
 80073f6:	d101      	bne.n	80073fc <_vfiprintf_r+0x60>
 80073f8:	68b5      	ldr	r5, [r6, #8]
 80073fa:	e7df      	b.n	80073bc <_vfiprintf_r+0x20>
 80073fc:	4b79      	ldr	r3, [pc, #484]	; (80075e4 <_vfiprintf_r+0x248>)
 80073fe:	429d      	cmp	r5, r3
 8007400:	bf08      	it	eq
 8007402:	68f5      	ldreq	r5, [r6, #12]
 8007404:	e7da      	b.n	80073bc <_vfiprintf_r+0x20>
 8007406:	89ab      	ldrh	r3, [r5, #12]
 8007408:	0598      	lsls	r0, r3, #22
 800740a:	d4ed      	bmi.n	80073e8 <_vfiprintf_r+0x4c>
 800740c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800740e:	f000 fb84 	bl	8007b1a <__retarget_lock_release_recursive>
 8007412:	e7e9      	b.n	80073e8 <_vfiprintf_r+0x4c>
 8007414:	2300      	movs	r3, #0
 8007416:	9309      	str	r3, [sp, #36]	; 0x24
 8007418:	2320      	movs	r3, #32
 800741a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800741e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007422:	2330      	movs	r3, #48	; 0x30
 8007424:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80075e8 <_vfiprintf_r+0x24c>
 8007428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800742c:	f04f 0901 	mov.w	r9, #1
 8007430:	4623      	mov	r3, r4
 8007432:	469a      	mov	sl, r3
 8007434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007438:	b10a      	cbz	r2, 800743e <_vfiprintf_r+0xa2>
 800743a:	2a25      	cmp	r2, #37	; 0x25
 800743c:	d1f9      	bne.n	8007432 <_vfiprintf_r+0x96>
 800743e:	ebba 0b04 	subs.w	fp, sl, r4
 8007442:	d00b      	beq.n	800745c <_vfiprintf_r+0xc0>
 8007444:	465b      	mov	r3, fp
 8007446:	4622      	mov	r2, r4
 8007448:	4629      	mov	r1, r5
 800744a:	4630      	mov	r0, r6
 800744c:	f7ff ff93 	bl	8007376 <__sfputs_r>
 8007450:	3001      	adds	r0, #1
 8007452:	f000 80aa 	beq.w	80075aa <_vfiprintf_r+0x20e>
 8007456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007458:	445a      	add	r2, fp
 800745a:	9209      	str	r2, [sp, #36]	; 0x24
 800745c:	f89a 3000 	ldrb.w	r3, [sl]
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 80a2 	beq.w	80075aa <_vfiprintf_r+0x20e>
 8007466:	2300      	movs	r3, #0
 8007468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800746c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007470:	f10a 0a01 	add.w	sl, sl, #1
 8007474:	9304      	str	r3, [sp, #16]
 8007476:	9307      	str	r3, [sp, #28]
 8007478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800747c:	931a      	str	r3, [sp, #104]	; 0x68
 800747e:	4654      	mov	r4, sl
 8007480:	2205      	movs	r2, #5
 8007482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007486:	4858      	ldr	r0, [pc, #352]	; (80075e8 <_vfiprintf_r+0x24c>)
 8007488:	f7f8 feaa 	bl	80001e0 <memchr>
 800748c:	9a04      	ldr	r2, [sp, #16]
 800748e:	b9d8      	cbnz	r0, 80074c8 <_vfiprintf_r+0x12c>
 8007490:	06d1      	lsls	r1, r2, #27
 8007492:	bf44      	itt	mi
 8007494:	2320      	movmi	r3, #32
 8007496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800749a:	0713      	lsls	r3, r2, #28
 800749c:	bf44      	itt	mi
 800749e:	232b      	movmi	r3, #43	; 0x2b
 80074a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074a4:	f89a 3000 	ldrb.w	r3, [sl]
 80074a8:	2b2a      	cmp	r3, #42	; 0x2a
 80074aa:	d015      	beq.n	80074d8 <_vfiprintf_r+0x13c>
 80074ac:	9a07      	ldr	r2, [sp, #28]
 80074ae:	4654      	mov	r4, sl
 80074b0:	2000      	movs	r0, #0
 80074b2:	f04f 0c0a 	mov.w	ip, #10
 80074b6:	4621      	mov	r1, r4
 80074b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074bc:	3b30      	subs	r3, #48	; 0x30
 80074be:	2b09      	cmp	r3, #9
 80074c0:	d94e      	bls.n	8007560 <_vfiprintf_r+0x1c4>
 80074c2:	b1b0      	cbz	r0, 80074f2 <_vfiprintf_r+0x156>
 80074c4:	9207      	str	r2, [sp, #28]
 80074c6:	e014      	b.n	80074f2 <_vfiprintf_r+0x156>
 80074c8:	eba0 0308 	sub.w	r3, r0, r8
 80074cc:	fa09 f303 	lsl.w	r3, r9, r3
 80074d0:	4313      	orrs	r3, r2
 80074d2:	9304      	str	r3, [sp, #16]
 80074d4:	46a2      	mov	sl, r4
 80074d6:	e7d2      	b.n	800747e <_vfiprintf_r+0xe2>
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	1d19      	adds	r1, r3, #4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	9103      	str	r1, [sp, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	bfbb      	ittet	lt
 80074e4:	425b      	neglt	r3, r3
 80074e6:	f042 0202 	orrlt.w	r2, r2, #2
 80074ea:	9307      	strge	r3, [sp, #28]
 80074ec:	9307      	strlt	r3, [sp, #28]
 80074ee:	bfb8      	it	lt
 80074f0:	9204      	strlt	r2, [sp, #16]
 80074f2:	7823      	ldrb	r3, [r4, #0]
 80074f4:	2b2e      	cmp	r3, #46	; 0x2e
 80074f6:	d10c      	bne.n	8007512 <_vfiprintf_r+0x176>
 80074f8:	7863      	ldrb	r3, [r4, #1]
 80074fa:	2b2a      	cmp	r3, #42	; 0x2a
 80074fc:	d135      	bne.n	800756a <_vfiprintf_r+0x1ce>
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	1d1a      	adds	r2, r3, #4
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	9203      	str	r2, [sp, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	bfb8      	it	lt
 800750a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800750e:	3402      	adds	r4, #2
 8007510:	9305      	str	r3, [sp, #20]
 8007512:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80075f8 <_vfiprintf_r+0x25c>
 8007516:	7821      	ldrb	r1, [r4, #0]
 8007518:	2203      	movs	r2, #3
 800751a:	4650      	mov	r0, sl
 800751c:	f7f8 fe60 	bl	80001e0 <memchr>
 8007520:	b140      	cbz	r0, 8007534 <_vfiprintf_r+0x198>
 8007522:	2340      	movs	r3, #64	; 0x40
 8007524:	eba0 000a 	sub.w	r0, r0, sl
 8007528:	fa03 f000 	lsl.w	r0, r3, r0
 800752c:	9b04      	ldr	r3, [sp, #16]
 800752e:	4303      	orrs	r3, r0
 8007530:	3401      	adds	r4, #1
 8007532:	9304      	str	r3, [sp, #16]
 8007534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007538:	482c      	ldr	r0, [pc, #176]	; (80075ec <_vfiprintf_r+0x250>)
 800753a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800753e:	2206      	movs	r2, #6
 8007540:	f7f8 fe4e 	bl	80001e0 <memchr>
 8007544:	2800      	cmp	r0, #0
 8007546:	d03f      	beq.n	80075c8 <_vfiprintf_r+0x22c>
 8007548:	4b29      	ldr	r3, [pc, #164]	; (80075f0 <_vfiprintf_r+0x254>)
 800754a:	bb1b      	cbnz	r3, 8007594 <_vfiprintf_r+0x1f8>
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	3307      	adds	r3, #7
 8007550:	f023 0307 	bic.w	r3, r3, #7
 8007554:	3308      	adds	r3, #8
 8007556:	9303      	str	r3, [sp, #12]
 8007558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755a:	443b      	add	r3, r7
 800755c:	9309      	str	r3, [sp, #36]	; 0x24
 800755e:	e767      	b.n	8007430 <_vfiprintf_r+0x94>
 8007560:	fb0c 3202 	mla	r2, ip, r2, r3
 8007564:	460c      	mov	r4, r1
 8007566:	2001      	movs	r0, #1
 8007568:	e7a5      	b.n	80074b6 <_vfiprintf_r+0x11a>
 800756a:	2300      	movs	r3, #0
 800756c:	3401      	adds	r4, #1
 800756e:	9305      	str	r3, [sp, #20]
 8007570:	4619      	mov	r1, r3
 8007572:	f04f 0c0a 	mov.w	ip, #10
 8007576:	4620      	mov	r0, r4
 8007578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800757c:	3a30      	subs	r2, #48	; 0x30
 800757e:	2a09      	cmp	r2, #9
 8007580:	d903      	bls.n	800758a <_vfiprintf_r+0x1ee>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d0c5      	beq.n	8007512 <_vfiprintf_r+0x176>
 8007586:	9105      	str	r1, [sp, #20]
 8007588:	e7c3      	b.n	8007512 <_vfiprintf_r+0x176>
 800758a:	fb0c 2101 	mla	r1, ip, r1, r2
 800758e:	4604      	mov	r4, r0
 8007590:	2301      	movs	r3, #1
 8007592:	e7f0      	b.n	8007576 <_vfiprintf_r+0x1da>
 8007594:	ab03      	add	r3, sp, #12
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	462a      	mov	r2, r5
 800759a:	4b16      	ldr	r3, [pc, #88]	; (80075f4 <_vfiprintf_r+0x258>)
 800759c:	a904      	add	r1, sp, #16
 800759e:	4630      	mov	r0, r6
 80075a0:	f7fd ffe0 	bl	8005564 <_printf_float>
 80075a4:	4607      	mov	r7, r0
 80075a6:	1c78      	adds	r0, r7, #1
 80075a8:	d1d6      	bne.n	8007558 <_vfiprintf_r+0x1bc>
 80075aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075ac:	07d9      	lsls	r1, r3, #31
 80075ae:	d405      	bmi.n	80075bc <_vfiprintf_r+0x220>
 80075b0:	89ab      	ldrh	r3, [r5, #12]
 80075b2:	059a      	lsls	r2, r3, #22
 80075b4:	d402      	bmi.n	80075bc <_vfiprintf_r+0x220>
 80075b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075b8:	f000 faaf 	bl	8007b1a <__retarget_lock_release_recursive>
 80075bc:	89ab      	ldrh	r3, [r5, #12]
 80075be:	065b      	lsls	r3, r3, #25
 80075c0:	f53f af12 	bmi.w	80073e8 <_vfiprintf_r+0x4c>
 80075c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075c6:	e711      	b.n	80073ec <_vfiprintf_r+0x50>
 80075c8:	ab03      	add	r3, sp, #12
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	462a      	mov	r2, r5
 80075ce:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <_vfiprintf_r+0x258>)
 80075d0:	a904      	add	r1, sp, #16
 80075d2:	4630      	mov	r0, r6
 80075d4:	f7fe fa6a 	bl	8005aac <_printf_i>
 80075d8:	e7e4      	b.n	80075a4 <_vfiprintf_r+0x208>
 80075da:	bf00      	nop
 80075dc:	080081c4 	.word	0x080081c4
 80075e0:	080081e4 	.word	0x080081e4
 80075e4:	080081a4 	.word	0x080081a4
 80075e8:	08008092 	.word	0x08008092
 80075ec:	0800809c 	.word	0x0800809c
 80075f0:	08005565 	.word	0x08005565
 80075f4:	08007377 	.word	0x08007377
 80075f8:	08008098 	.word	0x08008098

080075fc <__swbuf_r>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	460e      	mov	r6, r1
 8007600:	4614      	mov	r4, r2
 8007602:	4605      	mov	r5, r0
 8007604:	b118      	cbz	r0, 800760e <__swbuf_r+0x12>
 8007606:	6983      	ldr	r3, [r0, #24]
 8007608:	b90b      	cbnz	r3, 800760e <__swbuf_r+0x12>
 800760a:	f000 f9e7 	bl	80079dc <__sinit>
 800760e:	4b21      	ldr	r3, [pc, #132]	; (8007694 <__swbuf_r+0x98>)
 8007610:	429c      	cmp	r4, r3
 8007612:	d12b      	bne.n	800766c <__swbuf_r+0x70>
 8007614:	686c      	ldr	r4, [r5, #4]
 8007616:	69a3      	ldr	r3, [r4, #24]
 8007618:	60a3      	str	r3, [r4, #8]
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	071a      	lsls	r2, r3, #28
 800761e:	d52f      	bpl.n	8007680 <__swbuf_r+0x84>
 8007620:	6923      	ldr	r3, [r4, #16]
 8007622:	b36b      	cbz	r3, 8007680 <__swbuf_r+0x84>
 8007624:	6923      	ldr	r3, [r4, #16]
 8007626:	6820      	ldr	r0, [r4, #0]
 8007628:	1ac0      	subs	r0, r0, r3
 800762a:	6963      	ldr	r3, [r4, #20]
 800762c:	b2f6      	uxtb	r6, r6
 800762e:	4283      	cmp	r3, r0
 8007630:	4637      	mov	r7, r6
 8007632:	dc04      	bgt.n	800763e <__swbuf_r+0x42>
 8007634:	4621      	mov	r1, r4
 8007636:	4628      	mov	r0, r5
 8007638:	f000 f93c 	bl	80078b4 <_fflush_r>
 800763c:	bb30      	cbnz	r0, 800768c <__swbuf_r+0x90>
 800763e:	68a3      	ldr	r3, [r4, #8]
 8007640:	3b01      	subs	r3, #1
 8007642:	60a3      	str	r3, [r4, #8]
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	6022      	str	r2, [r4, #0]
 800764a:	701e      	strb	r6, [r3, #0]
 800764c:	6963      	ldr	r3, [r4, #20]
 800764e:	3001      	adds	r0, #1
 8007650:	4283      	cmp	r3, r0
 8007652:	d004      	beq.n	800765e <__swbuf_r+0x62>
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	07db      	lsls	r3, r3, #31
 8007658:	d506      	bpl.n	8007668 <__swbuf_r+0x6c>
 800765a:	2e0a      	cmp	r6, #10
 800765c:	d104      	bne.n	8007668 <__swbuf_r+0x6c>
 800765e:	4621      	mov	r1, r4
 8007660:	4628      	mov	r0, r5
 8007662:	f000 f927 	bl	80078b4 <_fflush_r>
 8007666:	b988      	cbnz	r0, 800768c <__swbuf_r+0x90>
 8007668:	4638      	mov	r0, r7
 800766a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800766c:	4b0a      	ldr	r3, [pc, #40]	; (8007698 <__swbuf_r+0x9c>)
 800766e:	429c      	cmp	r4, r3
 8007670:	d101      	bne.n	8007676 <__swbuf_r+0x7a>
 8007672:	68ac      	ldr	r4, [r5, #8]
 8007674:	e7cf      	b.n	8007616 <__swbuf_r+0x1a>
 8007676:	4b09      	ldr	r3, [pc, #36]	; (800769c <__swbuf_r+0xa0>)
 8007678:	429c      	cmp	r4, r3
 800767a:	bf08      	it	eq
 800767c:	68ec      	ldreq	r4, [r5, #12]
 800767e:	e7ca      	b.n	8007616 <__swbuf_r+0x1a>
 8007680:	4621      	mov	r1, r4
 8007682:	4628      	mov	r0, r5
 8007684:	f000 f81a 	bl	80076bc <__swsetup_r>
 8007688:	2800      	cmp	r0, #0
 800768a:	d0cb      	beq.n	8007624 <__swbuf_r+0x28>
 800768c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007690:	e7ea      	b.n	8007668 <__swbuf_r+0x6c>
 8007692:	bf00      	nop
 8007694:	080081c4 	.word	0x080081c4
 8007698:	080081e4 	.word	0x080081e4
 800769c:	080081a4 	.word	0x080081a4

080076a0 <__ascii_wctomb>:
 80076a0:	b149      	cbz	r1, 80076b6 <__ascii_wctomb+0x16>
 80076a2:	2aff      	cmp	r2, #255	; 0xff
 80076a4:	bf85      	ittet	hi
 80076a6:	238a      	movhi	r3, #138	; 0x8a
 80076a8:	6003      	strhi	r3, [r0, #0]
 80076aa:	700a      	strbls	r2, [r1, #0]
 80076ac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80076b0:	bf98      	it	ls
 80076b2:	2001      	movls	r0, #1
 80076b4:	4770      	bx	lr
 80076b6:	4608      	mov	r0, r1
 80076b8:	4770      	bx	lr
	...

080076bc <__swsetup_r>:
 80076bc:	4b32      	ldr	r3, [pc, #200]	; (8007788 <__swsetup_r+0xcc>)
 80076be:	b570      	push	{r4, r5, r6, lr}
 80076c0:	681d      	ldr	r5, [r3, #0]
 80076c2:	4606      	mov	r6, r0
 80076c4:	460c      	mov	r4, r1
 80076c6:	b125      	cbz	r5, 80076d2 <__swsetup_r+0x16>
 80076c8:	69ab      	ldr	r3, [r5, #24]
 80076ca:	b913      	cbnz	r3, 80076d2 <__swsetup_r+0x16>
 80076cc:	4628      	mov	r0, r5
 80076ce:	f000 f985 	bl	80079dc <__sinit>
 80076d2:	4b2e      	ldr	r3, [pc, #184]	; (800778c <__swsetup_r+0xd0>)
 80076d4:	429c      	cmp	r4, r3
 80076d6:	d10f      	bne.n	80076f8 <__swsetup_r+0x3c>
 80076d8:	686c      	ldr	r4, [r5, #4]
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076e0:	0719      	lsls	r1, r3, #28
 80076e2:	d42c      	bmi.n	800773e <__swsetup_r+0x82>
 80076e4:	06dd      	lsls	r5, r3, #27
 80076e6:	d411      	bmi.n	800770c <__swsetup_r+0x50>
 80076e8:	2309      	movs	r3, #9
 80076ea:	6033      	str	r3, [r6, #0]
 80076ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076f6:	e03e      	b.n	8007776 <__swsetup_r+0xba>
 80076f8:	4b25      	ldr	r3, [pc, #148]	; (8007790 <__swsetup_r+0xd4>)
 80076fa:	429c      	cmp	r4, r3
 80076fc:	d101      	bne.n	8007702 <__swsetup_r+0x46>
 80076fe:	68ac      	ldr	r4, [r5, #8]
 8007700:	e7eb      	b.n	80076da <__swsetup_r+0x1e>
 8007702:	4b24      	ldr	r3, [pc, #144]	; (8007794 <__swsetup_r+0xd8>)
 8007704:	429c      	cmp	r4, r3
 8007706:	bf08      	it	eq
 8007708:	68ec      	ldreq	r4, [r5, #12]
 800770a:	e7e6      	b.n	80076da <__swsetup_r+0x1e>
 800770c:	0758      	lsls	r0, r3, #29
 800770e:	d512      	bpl.n	8007736 <__swsetup_r+0x7a>
 8007710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007712:	b141      	cbz	r1, 8007726 <__swsetup_r+0x6a>
 8007714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007718:	4299      	cmp	r1, r3
 800771a:	d002      	beq.n	8007722 <__swsetup_r+0x66>
 800771c:	4630      	mov	r0, r6
 800771e:	f7ff fd0b 	bl	8007138 <_free_r>
 8007722:	2300      	movs	r3, #0
 8007724:	6363      	str	r3, [r4, #52]	; 0x34
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800772c:	81a3      	strh	r3, [r4, #12]
 800772e:	2300      	movs	r3, #0
 8007730:	6063      	str	r3, [r4, #4]
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	89a3      	ldrh	r3, [r4, #12]
 8007738:	f043 0308 	orr.w	r3, r3, #8
 800773c:	81a3      	strh	r3, [r4, #12]
 800773e:	6923      	ldr	r3, [r4, #16]
 8007740:	b94b      	cbnz	r3, 8007756 <__swsetup_r+0x9a>
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800774c:	d003      	beq.n	8007756 <__swsetup_r+0x9a>
 800774e:	4621      	mov	r1, r4
 8007750:	4630      	mov	r0, r6
 8007752:	f000 fa07 	bl	8007b64 <__smakebuf_r>
 8007756:	89a0      	ldrh	r0, [r4, #12]
 8007758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800775c:	f010 0301 	ands.w	r3, r0, #1
 8007760:	d00a      	beq.n	8007778 <__swsetup_r+0xbc>
 8007762:	2300      	movs	r3, #0
 8007764:	60a3      	str	r3, [r4, #8]
 8007766:	6963      	ldr	r3, [r4, #20]
 8007768:	425b      	negs	r3, r3
 800776a:	61a3      	str	r3, [r4, #24]
 800776c:	6923      	ldr	r3, [r4, #16]
 800776e:	b943      	cbnz	r3, 8007782 <__swsetup_r+0xc6>
 8007770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007774:	d1ba      	bne.n	80076ec <__swsetup_r+0x30>
 8007776:	bd70      	pop	{r4, r5, r6, pc}
 8007778:	0781      	lsls	r1, r0, #30
 800777a:	bf58      	it	pl
 800777c:	6963      	ldrpl	r3, [r4, #20]
 800777e:	60a3      	str	r3, [r4, #8]
 8007780:	e7f4      	b.n	800776c <__swsetup_r+0xb0>
 8007782:	2000      	movs	r0, #0
 8007784:	e7f7      	b.n	8007776 <__swsetup_r+0xba>
 8007786:	bf00      	nop
 8007788:	20000060 	.word	0x20000060
 800778c:	080081c4 	.word	0x080081c4
 8007790:	080081e4 	.word	0x080081e4
 8007794:	080081a4 	.word	0x080081a4

08007798 <abort>:
 8007798:	b508      	push	{r3, lr}
 800779a:	2006      	movs	r0, #6
 800779c:	f000 fa4a 	bl	8007c34 <raise>
 80077a0:	2001      	movs	r0, #1
 80077a2:	f7f9 fe39 	bl	8001418 <_exit>
	...

080077a8 <__sflush_r>:
 80077a8:	898a      	ldrh	r2, [r1, #12]
 80077aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ae:	4605      	mov	r5, r0
 80077b0:	0710      	lsls	r0, r2, #28
 80077b2:	460c      	mov	r4, r1
 80077b4:	d458      	bmi.n	8007868 <__sflush_r+0xc0>
 80077b6:	684b      	ldr	r3, [r1, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	dc05      	bgt.n	80077c8 <__sflush_r+0x20>
 80077bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80077be:	2b00      	cmp	r3, #0
 80077c0:	dc02      	bgt.n	80077c8 <__sflush_r+0x20>
 80077c2:	2000      	movs	r0, #0
 80077c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077ca:	2e00      	cmp	r6, #0
 80077cc:	d0f9      	beq.n	80077c2 <__sflush_r+0x1a>
 80077ce:	2300      	movs	r3, #0
 80077d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80077d4:	682f      	ldr	r7, [r5, #0]
 80077d6:	602b      	str	r3, [r5, #0]
 80077d8:	d032      	beq.n	8007840 <__sflush_r+0x98>
 80077da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	075a      	lsls	r2, r3, #29
 80077e0:	d505      	bpl.n	80077ee <__sflush_r+0x46>
 80077e2:	6863      	ldr	r3, [r4, #4]
 80077e4:	1ac0      	subs	r0, r0, r3
 80077e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077e8:	b10b      	cbz	r3, 80077ee <__sflush_r+0x46>
 80077ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077ec:	1ac0      	subs	r0, r0, r3
 80077ee:	2300      	movs	r3, #0
 80077f0:	4602      	mov	r2, r0
 80077f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077f4:	6a21      	ldr	r1, [r4, #32]
 80077f6:	4628      	mov	r0, r5
 80077f8:	47b0      	blx	r6
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	d106      	bne.n	800780e <__sflush_r+0x66>
 8007800:	6829      	ldr	r1, [r5, #0]
 8007802:	291d      	cmp	r1, #29
 8007804:	d82c      	bhi.n	8007860 <__sflush_r+0xb8>
 8007806:	4a2a      	ldr	r2, [pc, #168]	; (80078b0 <__sflush_r+0x108>)
 8007808:	40ca      	lsrs	r2, r1
 800780a:	07d6      	lsls	r6, r2, #31
 800780c:	d528      	bpl.n	8007860 <__sflush_r+0xb8>
 800780e:	2200      	movs	r2, #0
 8007810:	6062      	str	r2, [r4, #4]
 8007812:	04d9      	lsls	r1, r3, #19
 8007814:	6922      	ldr	r2, [r4, #16]
 8007816:	6022      	str	r2, [r4, #0]
 8007818:	d504      	bpl.n	8007824 <__sflush_r+0x7c>
 800781a:	1c42      	adds	r2, r0, #1
 800781c:	d101      	bne.n	8007822 <__sflush_r+0x7a>
 800781e:	682b      	ldr	r3, [r5, #0]
 8007820:	b903      	cbnz	r3, 8007824 <__sflush_r+0x7c>
 8007822:	6560      	str	r0, [r4, #84]	; 0x54
 8007824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007826:	602f      	str	r7, [r5, #0]
 8007828:	2900      	cmp	r1, #0
 800782a:	d0ca      	beq.n	80077c2 <__sflush_r+0x1a>
 800782c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007830:	4299      	cmp	r1, r3
 8007832:	d002      	beq.n	800783a <__sflush_r+0x92>
 8007834:	4628      	mov	r0, r5
 8007836:	f7ff fc7f 	bl	8007138 <_free_r>
 800783a:	2000      	movs	r0, #0
 800783c:	6360      	str	r0, [r4, #52]	; 0x34
 800783e:	e7c1      	b.n	80077c4 <__sflush_r+0x1c>
 8007840:	6a21      	ldr	r1, [r4, #32]
 8007842:	2301      	movs	r3, #1
 8007844:	4628      	mov	r0, r5
 8007846:	47b0      	blx	r6
 8007848:	1c41      	adds	r1, r0, #1
 800784a:	d1c7      	bne.n	80077dc <__sflush_r+0x34>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0c4      	beq.n	80077dc <__sflush_r+0x34>
 8007852:	2b1d      	cmp	r3, #29
 8007854:	d001      	beq.n	800785a <__sflush_r+0xb2>
 8007856:	2b16      	cmp	r3, #22
 8007858:	d101      	bne.n	800785e <__sflush_r+0xb6>
 800785a:	602f      	str	r7, [r5, #0]
 800785c:	e7b1      	b.n	80077c2 <__sflush_r+0x1a>
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007864:	81a3      	strh	r3, [r4, #12]
 8007866:	e7ad      	b.n	80077c4 <__sflush_r+0x1c>
 8007868:	690f      	ldr	r7, [r1, #16]
 800786a:	2f00      	cmp	r7, #0
 800786c:	d0a9      	beq.n	80077c2 <__sflush_r+0x1a>
 800786e:	0793      	lsls	r3, r2, #30
 8007870:	680e      	ldr	r6, [r1, #0]
 8007872:	bf08      	it	eq
 8007874:	694b      	ldreq	r3, [r1, #20]
 8007876:	600f      	str	r7, [r1, #0]
 8007878:	bf18      	it	ne
 800787a:	2300      	movne	r3, #0
 800787c:	eba6 0807 	sub.w	r8, r6, r7
 8007880:	608b      	str	r3, [r1, #8]
 8007882:	f1b8 0f00 	cmp.w	r8, #0
 8007886:	dd9c      	ble.n	80077c2 <__sflush_r+0x1a>
 8007888:	6a21      	ldr	r1, [r4, #32]
 800788a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800788c:	4643      	mov	r3, r8
 800788e:	463a      	mov	r2, r7
 8007890:	4628      	mov	r0, r5
 8007892:	47b0      	blx	r6
 8007894:	2800      	cmp	r0, #0
 8007896:	dc06      	bgt.n	80078a6 <__sflush_r+0xfe>
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800789e:	81a3      	strh	r3, [r4, #12]
 80078a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078a4:	e78e      	b.n	80077c4 <__sflush_r+0x1c>
 80078a6:	4407      	add	r7, r0
 80078a8:	eba8 0800 	sub.w	r8, r8, r0
 80078ac:	e7e9      	b.n	8007882 <__sflush_r+0xda>
 80078ae:	bf00      	nop
 80078b0:	20400001 	.word	0x20400001

080078b4 <_fflush_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	690b      	ldr	r3, [r1, #16]
 80078b8:	4605      	mov	r5, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	b913      	cbnz	r3, 80078c4 <_fflush_r+0x10>
 80078be:	2500      	movs	r5, #0
 80078c0:	4628      	mov	r0, r5
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	b118      	cbz	r0, 80078ce <_fflush_r+0x1a>
 80078c6:	6983      	ldr	r3, [r0, #24]
 80078c8:	b90b      	cbnz	r3, 80078ce <_fflush_r+0x1a>
 80078ca:	f000 f887 	bl	80079dc <__sinit>
 80078ce:	4b14      	ldr	r3, [pc, #80]	; (8007920 <_fflush_r+0x6c>)
 80078d0:	429c      	cmp	r4, r3
 80078d2:	d11b      	bne.n	800790c <_fflush_r+0x58>
 80078d4:	686c      	ldr	r4, [r5, #4]
 80078d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0ef      	beq.n	80078be <_fflush_r+0xa>
 80078de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078e0:	07d0      	lsls	r0, r2, #31
 80078e2:	d404      	bmi.n	80078ee <_fflush_r+0x3a>
 80078e4:	0599      	lsls	r1, r3, #22
 80078e6:	d402      	bmi.n	80078ee <_fflush_r+0x3a>
 80078e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ea:	f000 f915 	bl	8007b18 <__retarget_lock_acquire_recursive>
 80078ee:	4628      	mov	r0, r5
 80078f0:	4621      	mov	r1, r4
 80078f2:	f7ff ff59 	bl	80077a8 <__sflush_r>
 80078f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078f8:	07da      	lsls	r2, r3, #31
 80078fa:	4605      	mov	r5, r0
 80078fc:	d4e0      	bmi.n	80078c0 <_fflush_r+0xc>
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	059b      	lsls	r3, r3, #22
 8007902:	d4dd      	bmi.n	80078c0 <_fflush_r+0xc>
 8007904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007906:	f000 f908 	bl	8007b1a <__retarget_lock_release_recursive>
 800790a:	e7d9      	b.n	80078c0 <_fflush_r+0xc>
 800790c:	4b05      	ldr	r3, [pc, #20]	; (8007924 <_fflush_r+0x70>)
 800790e:	429c      	cmp	r4, r3
 8007910:	d101      	bne.n	8007916 <_fflush_r+0x62>
 8007912:	68ac      	ldr	r4, [r5, #8]
 8007914:	e7df      	b.n	80078d6 <_fflush_r+0x22>
 8007916:	4b04      	ldr	r3, [pc, #16]	; (8007928 <_fflush_r+0x74>)
 8007918:	429c      	cmp	r4, r3
 800791a:	bf08      	it	eq
 800791c:	68ec      	ldreq	r4, [r5, #12]
 800791e:	e7da      	b.n	80078d6 <_fflush_r+0x22>
 8007920:	080081c4 	.word	0x080081c4
 8007924:	080081e4 	.word	0x080081e4
 8007928:	080081a4 	.word	0x080081a4

0800792c <std>:
 800792c:	2300      	movs	r3, #0
 800792e:	b510      	push	{r4, lr}
 8007930:	4604      	mov	r4, r0
 8007932:	e9c0 3300 	strd	r3, r3, [r0]
 8007936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800793a:	6083      	str	r3, [r0, #8]
 800793c:	8181      	strh	r1, [r0, #12]
 800793e:	6643      	str	r3, [r0, #100]	; 0x64
 8007940:	81c2      	strh	r2, [r0, #14]
 8007942:	6183      	str	r3, [r0, #24]
 8007944:	4619      	mov	r1, r3
 8007946:	2208      	movs	r2, #8
 8007948:	305c      	adds	r0, #92	; 0x5c
 800794a:	f7fd fd63 	bl	8005414 <memset>
 800794e:	4b05      	ldr	r3, [pc, #20]	; (8007964 <std+0x38>)
 8007950:	6263      	str	r3, [r4, #36]	; 0x24
 8007952:	4b05      	ldr	r3, [pc, #20]	; (8007968 <std+0x3c>)
 8007954:	62a3      	str	r3, [r4, #40]	; 0x28
 8007956:	4b05      	ldr	r3, [pc, #20]	; (800796c <std+0x40>)
 8007958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800795a:	4b05      	ldr	r3, [pc, #20]	; (8007970 <std+0x44>)
 800795c:	6224      	str	r4, [r4, #32]
 800795e:	6323      	str	r3, [r4, #48]	; 0x30
 8007960:	bd10      	pop	{r4, pc}
 8007962:	bf00      	nop
 8007964:	08007c6d 	.word	0x08007c6d
 8007968:	08007c8f 	.word	0x08007c8f
 800796c:	08007cc7 	.word	0x08007cc7
 8007970:	08007ceb 	.word	0x08007ceb

08007974 <_cleanup_r>:
 8007974:	4901      	ldr	r1, [pc, #4]	; (800797c <_cleanup_r+0x8>)
 8007976:	f000 b8af 	b.w	8007ad8 <_fwalk_reent>
 800797a:	bf00      	nop
 800797c:	080078b5 	.word	0x080078b5

08007980 <__sfmoreglue>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	1e4a      	subs	r2, r1, #1
 8007984:	2568      	movs	r5, #104	; 0x68
 8007986:	4355      	muls	r5, r2
 8007988:	460e      	mov	r6, r1
 800798a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800798e:	f7ff fc23 	bl	80071d8 <_malloc_r>
 8007992:	4604      	mov	r4, r0
 8007994:	b140      	cbz	r0, 80079a8 <__sfmoreglue+0x28>
 8007996:	2100      	movs	r1, #0
 8007998:	e9c0 1600 	strd	r1, r6, [r0]
 800799c:	300c      	adds	r0, #12
 800799e:	60a0      	str	r0, [r4, #8]
 80079a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079a4:	f7fd fd36 	bl	8005414 <memset>
 80079a8:	4620      	mov	r0, r4
 80079aa:	bd70      	pop	{r4, r5, r6, pc}

080079ac <__sfp_lock_acquire>:
 80079ac:	4801      	ldr	r0, [pc, #4]	; (80079b4 <__sfp_lock_acquire+0x8>)
 80079ae:	f000 b8b3 	b.w	8007b18 <__retarget_lock_acquire_recursive>
 80079b2:	bf00      	nop
 80079b4:	2000a424 	.word	0x2000a424

080079b8 <__sfp_lock_release>:
 80079b8:	4801      	ldr	r0, [pc, #4]	; (80079c0 <__sfp_lock_release+0x8>)
 80079ba:	f000 b8ae 	b.w	8007b1a <__retarget_lock_release_recursive>
 80079be:	bf00      	nop
 80079c0:	2000a424 	.word	0x2000a424

080079c4 <__sinit_lock_acquire>:
 80079c4:	4801      	ldr	r0, [pc, #4]	; (80079cc <__sinit_lock_acquire+0x8>)
 80079c6:	f000 b8a7 	b.w	8007b18 <__retarget_lock_acquire_recursive>
 80079ca:	bf00      	nop
 80079cc:	2000a41f 	.word	0x2000a41f

080079d0 <__sinit_lock_release>:
 80079d0:	4801      	ldr	r0, [pc, #4]	; (80079d8 <__sinit_lock_release+0x8>)
 80079d2:	f000 b8a2 	b.w	8007b1a <__retarget_lock_release_recursive>
 80079d6:	bf00      	nop
 80079d8:	2000a41f 	.word	0x2000a41f

080079dc <__sinit>:
 80079dc:	b510      	push	{r4, lr}
 80079de:	4604      	mov	r4, r0
 80079e0:	f7ff fff0 	bl	80079c4 <__sinit_lock_acquire>
 80079e4:	69a3      	ldr	r3, [r4, #24]
 80079e6:	b11b      	cbz	r3, 80079f0 <__sinit+0x14>
 80079e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079ec:	f7ff bff0 	b.w	80079d0 <__sinit_lock_release>
 80079f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80079f4:	6523      	str	r3, [r4, #80]	; 0x50
 80079f6:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <__sinit+0x68>)
 80079f8:	4a13      	ldr	r2, [pc, #76]	; (8007a48 <__sinit+0x6c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80079fe:	42a3      	cmp	r3, r4
 8007a00:	bf04      	itt	eq
 8007a02:	2301      	moveq	r3, #1
 8007a04:	61a3      	streq	r3, [r4, #24]
 8007a06:	4620      	mov	r0, r4
 8007a08:	f000 f820 	bl	8007a4c <__sfp>
 8007a0c:	6060      	str	r0, [r4, #4]
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f000 f81c 	bl	8007a4c <__sfp>
 8007a14:	60a0      	str	r0, [r4, #8]
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 f818 	bl	8007a4c <__sfp>
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	60e0      	str	r0, [r4, #12]
 8007a20:	2104      	movs	r1, #4
 8007a22:	6860      	ldr	r0, [r4, #4]
 8007a24:	f7ff ff82 	bl	800792c <std>
 8007a28:	68a0      	ldr	r0, [r4, #8]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	2109      	movs	r1, #9
 8007a2e:	f7ff ff7d 	bl	800792c <std>
 8007a32:	68e0      	ldr	r0, [r4, #12]
 8007a34:	2202      	movs	r2, #2
 8007a36:	2112      	movs	r1, #18
 8007a38:	f7ff ff78 	bl	800792c <std>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	61a3      	str	r3, [r4, #24]
 8007a40:	e7d2      	b.n	80079e8 <__sinit+0xc>
 8007a42:	bf00      	nop
 8007a44:	08007e20 	.word	0x08007e20
 8007a48:	08007975 	.word	0x08007975

08007a4c <__sfp>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	4607      	mov	r7, r0
 8007a50:	f7ff ffac 	bl	80079ac <__sfp_lock_acquire>
 8007a54:	4b1e      	ldr	r3, [pc, #120]	; (8007ad0 <__sfp+0x84>)
 8007a56:	681e      	ldr	r6, [r3, #0]
 8007a58:	69b3      	ldr	r3, [r6, #24]
 8007a5a:	b913      	cbnz	r3, 8007a62 <__sfp+0x16>
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f7ff ffbd 	bl	80079dc <__sinit>
 8007a62:	3648      	adds	r6, #72	; 0x48
 8007a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	d503      	bpl.n	8007a74 <__sfp+0x28>
 8007a6c:	6833      	ldr	r3, [r6, #0]
 8007a6e:	b30b      	cbz	r3, 8007ab4 <__sfp+0x68>
 8007a70:	6836      	ldr	r6, [r6, #0]
 8007a72:	e7f7      	b.n	8007a64 <__sfp+0x18>
 8007a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a78:	b9d5      	cbnz	r5, 8007ab0 <__sfp+0x64>
 8007a7a:	4b16      	ldr	r3, [pc, #88]	; (8007ad4 <__sfp+0x88>)
 8007a7c:	60e3      	str	r3, [r4, #12]
 8007a7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a82:	6665      	str	r5, [r4, #100]	; 0x64
 8007a84:	f000 f847 	bl	8007b16 <__retarget_lock_init_recursive>
 8007a88:	f7ff ff96 	bl	80079b8 <__sfp_lock_release>
 8007a8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a94:	6025      	str	r5, [r4, #0]
 8007a96:	61a5      	str	r5, [r4, #24]
 8007a98:	2208      	movs	r2, #8
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007aa0:	f7fd fcb8 	bl	8005414 <memset>
 8007aa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007aa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007aac:	4620      	mov	r0, r4
 8007aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ab0:	3468      	adds	r4, #104	; 0x68
 8007ab2:	e7d9      	b.n	8007a68 <__sfp+0x1c>
 8007ab4:	2104      	movs	r1, #4
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	f7ff ff62 	bl	8007980 <__sfmoreglue>
 8007abc:	4604      	mov	r4, r0
 8007abe:	6030      	str	r0, [r6, #0]
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d1d5      	bne.n	8007a70 <__sfp+0x24>
 8007ac4:	f7ff ff78 	bl	80079b8 <__sfp_lock_release>
 8007ac8:	230c      	movs	r3, #12
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	e7ee      	b.n	8007aac <__sfp+0x60>
 8007ace:	bf00      	nop
 8007ad0:	08007e20 	.word	0x08007e20
 8007ad4:	ffff0001 	.word	0xffff0001

08007ad8 <_fwalk_reent>:
 8007ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007adc:	4606      	mov	r6, r0
 8007ade:	4688      	mov	r8, r1
 8007ae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ae4:	2700      	movs	r7, #0
 8007ae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007aea:	f1b9 0901 	subs.w	r9, r9, #1
 8007aee:	d505      	bpl.n	8007afc <_fwalk_reent+0x24>
 8007af0:	6824      	ldr	r4, [r4, #0]
 8007af2:	2c00      	cmp	r4, #0
 8007af4:	d1f7      	bne.n	8007ae6 <_fwalk_reent+0xe>
 8007af6:	4638      	mov	r0, r7
 8007af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007afc:	89ab      	ldrh	r3, [r5, #12]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d907      	bls.n	8007b12 <_fwalk_reent+0x3a>
 8007b02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b06:	3301      	adds	r3, #1
 8007b08:	d003      	beq.n	8007b12 <_fwalk_reent+0x3a>
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	47c0      	blx	r8
 8007b10:	4307      	orrs	r7, r0
 8007b12:	3568      	adds	r5, #104	; 0x68
 8007b14:	e7e9      	b.n	8007aea <_fwalk_reent+0x12>

08007b16 <__retarget_lock_init_recursive>:
 8007b16:	4770      	bx	lr

08007b18 <__retarget_lock_acquire_recursive>:
 8007b18:	4770      	bx	lr

08007b1a <__retarget_lock_release_recursive>:
 8007b1a:	4770      	bx	lr

08007b1c <__swhatbuf_r>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	460e      	mov	r6, r1
 8007b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b24:	2900      	cmp	r1, #0
 8007b26:	b096      	sub	sp, #88	; 0x58
 8007b28:	4614      	mov	r4, r2
 8007b2a:	461d      	mov	r5, r3
 8007b2c:	da07      	bge.n	8007b3e <__swhatbuf_r+0x22>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	602b      	str	r3, [r5, #0]
 8007b32:	89b3      	ldrh	r3, [r6, #12]
 8007b34:	061a      	lsls	r2, r3, #24
 8007b36:	d410      	bmi.n	8007b5a <__swhatbuf_r+0x3e>
 8007b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b3c:	e00e      	b.n	8007b5c <__swhatbuf_r+0x40>
 8007b3e:	466a      	mov	r2, sp
 8007b40:	f000 f8fa 	bl	8007d38 <_fstat_r>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	dbf2      	blt.n	8007b2e <__swhatbuf_r+0x12>
 8007b48:	9a01      	ldr	r2, [sp, #4]
 8007b4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b52:	425a      	negs	r2, r3
 8007b54:	415a      	adcs	r2, r3
 8007b56:	602a      	str	r2, [r5, #0]
 8007b58:	e7ee      	b.n	8007b38 <__swhatbuf_r+0x1c>
 8007b5a:	2340      	movs	r3, #64	; 0x40
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	6023      	str	r3, [r4, #0]
 8007b60:	b016      	add	sp, #88	; 0x58
 8007b62:	bd70      	pop	{r4, r5, r6, pc}

08007b64 <__smakebuf_r>:
 8007b64:	898b      	ldrh	r3, [r1, #12]
 8007b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b68:	079d      	lsls	r5, r3, #30
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	d507      	bpl.n	8007b80 <__smakebuf_r+0x1c>
 8007b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	6123      	str	r3, [r4, #16]
 8007b78:	2301      	movs	r3, #1
 8007b7a:	6163      	str	r3, [r4, #20]
 8007b7c:	b002      	add	sp, #8
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	ab01      	add	r3, sp, #4
 8007b82:	466a      	mov	r2, sp
 8007b84:	f7ff ffca 	bl	8007b1c <__swhatbuf_r>
 8007b88:	9900      	ldr	r1, [sp, #0]
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f7ff fb23 	bl	80071d8 <_malloc_r>
 8007b92:	b948      	cbnz	r0, 8007ba8 <__smakebuf_r+0x44>
 8007b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b98:	059a      	lsls	r2, r3, #22
 8007b9a:	d4ef      	bmi.n	8007b7c <__smakebuf_r+0x18>
 8007b9c:	f023 0303 	bic.w	r3, r3, #3
 8007ba0:	f043 0302 	orr.w	r3, r3, #2
 8007ba4:	81a3      	strh	r3, [r4, #12]
 8007ba6:	e7e3      	b.n	8007b70 <__smakebuf_r+0xc>
 8007ba8:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <__smakebuf_r+0x7c>)
 8007baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	6020      	str	r0, [r4, #0]
 8007bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb4:	81a3      	strh	r3, [r4, #12]
 8007bb6:	9b00      	ldr	r3, [sp, #0]
 8007bb8:	6163      	str	r3, [r4, #20]
 8007bba:	9b01      	ldr	r3, [sp, #4]
 8007bbc:	6120      	str	r0, [r4, #16]
 8007bbe:	b15b      	cbz	r3, 8007bd8 <__smakebuf_r+0x74>
 8007bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f000 f8c9 	bl	8007d5c <_isatty_r>
 8007bca:	b128      	cbz	r0, 8007bd8 <__smakebuf_r+0x74>
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	f023 0303 	bic.w	r3, r3, #3
 8007bd2:	f043 0301 	orr.w	r3, r3, #1
 8007bd6:	81a3      	strh	r3, [r4, #12]
 8007bd8:	89a0      	ldrh	r0, [r4, #12]
 8007bda:	4305      	orrs	r5, r0
 8007bdc:	81a5      	strh	r5, [r4, #12]
 8007bde:	e7cd      	b.n	8007b7c <__smakebuf_r+0x18>
 8007be0:	08007975 	.word	0x08007975

08007be4 <_raise_r>:
 8007be4:	291f      	cmp	r1, #31
 8007be6:	b538      	push	{r3, r4, r5, lr}
 8007be8:	4604      	mov	r4, r0
 8007bea:	460d      	mov	r5, r1
 8007bec:	d904      	bls.n	8007bf8 <_raise_r+0x14>
 8007bee:	2316      	movs	r3, #22
 8007bf0:	6003      	str	r3, [r0, #0]
 8007bf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007bfa:	b112      	cbz	r2, 8007c02 <_raise_r+0x1e>
 8007bfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c00:	b94b      	cbnz	r3, 8007c16 <_raise_r+0x32>
 8007c02:	4620      	mov	r0, r4
 8007c04:	f000 f830 	bl	8007c68 <_getpid_r>
 8007c08:	462a      	mov	r2, r5
 8007c0a:	4601      	mov	r1, r0
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c12:	f000 b817 	b.w	8007c44 <_kill_r>
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d00a      	beq.n	8007c30 <_raise_r+0x4c>
 8007c1a:	1c59      	adds	r1, r3, #1
 8007c1c:	d103      	bne.n	8007c26 <_raise_r+0x42>
 8007c1e:	2316      	movs	r3, #22
 8007c20:	6003      	str	r3, [r0, #0]
 8007c22:	2001      	movs	r0, #1
 8007c24:	e7e7      	b.n	8007bf6 <_raise_r+0x12>
 8007c26:	2400      	movs	r4, #0
 8007c28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	4798      	blx	r3
 8007c30:	2000      	movs	r0, #0
 8007c32:	e7e0      	b.n	8007bf6 <_raise_r+0x12>

08007c34 <raise>:
 8007c34:	4b02      	ldr	r3, [pc, #8]	; (8007c40 <raise+0xc>)
 8007c36:	4601      	mov	r1, r0
 8007c38:	6818      	ldr	r0, [r3, #0]
 8007c3a:	f7ff bfd3 	b.w	8007be4 <_raise_r>
 8007c3e:	bf00      	nop
 8007c40:	20000060 	.word	0x20000060

08007c44 <_kill_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	4d07      	ldr	r5, [pc, #28]	; (8007c64 <_kill_r+0x20>)
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	4608      	mov	r0, r1
 8007c4e:	4611      	mov	r1, r2
 8007c50:	602b      	str	r3, [r5, #0]
 8007c52:	f7f9 fbd1 	bl	80013f8 <_kill>
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	d102      	bne.n	8007c60 <_kill_r+0x1c>
 8007c5a:	682b      	ldr	r3, [r5, #0]
 8007c5c:	b103      	cbz	r3, 8007c60 <_kill_r+0x1c>
 8007c5e:	6023      	str	r3, [r4, #0]
 8007c60:	bd38      	pop	{r3, r4, r5, pc}
 8007c62:	bf00      	nop
 8007c64:	2000a418 	.word	0x2000a418

08007c68 <_getpid_r>:
 8007c68:	f7f9 bbbe 	b.w	80013e8 <_getpid>

08007c6c <__sread>:
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	460c      	mov	r4, r1
 8007c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c74:	f000 f894 	bl	8007da0 <_read_r>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	bfab      	itete	ge
 8007c7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8007c80:	181b      	addge	r3, r3, r0
 8007c82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c86:	bfac      	ite	ge
 8007c88:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c8a:	81a3      	strhlt	r3, [r4, #12]
 8007c8c:	bd10      	pop	{r4, pc}

08007c8e <__swrite>:
 8007c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c92:	461f      	mov	r7, r3
 8007c94:	898b      	ldrh	r3, [r1, #12]
 8007c96:	05db      	lsls	r3, r3, #23
 8007c98:	4605      	mov	r5, r0
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	4616      	mov	r6, r2
 8007c9e:	d505      	bpl.n	8007cac <__swrite+0x1e>
 8007ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f000 f868 	bl	8007d7c <_lseek_r>
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cb6:	81a3      	strh	r3, [r4, #12]
 8007cb8:	4632      	mov	r2, r6
 8007cba:	463b      	mov	r3, r7
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc2:	f000 b817 	b.w	8007cf4 <_write_r>

08007cc6 <__sseek>:
 8007cc6:	b510      	push	{r4, lr}
 8007cc8:	460c      	mov	r4, r1
 8007cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cce:	f000 f855 	bl	8007d7c <_lseek_r>
 8007cd2:	1c43      	adds	r3, r0, #1
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	bf15      	itete	ne
 8007cd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ce2:	81a3      	strheq	r3, [r4, #12]
 8007ce4:	bf18      	it	ne
 8007ce6:	81a3      	strhne	r3, [r4, #12]
 8007ce8:	bd10      	pop	{r4, pc}

08007cea <__sclose>:
 8007cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cee:	f000 b813 	b.w	8007d18 <_close_r>
	...

08007cf4 <_write_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	4d07      	ldr	r5, [pc, #28]	; (8007d14 <_write_r+0x20>)
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	4608      	mov	r0, r1
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	2200      	movs	r2, #0
 8007d00:	602a      	str	r2, [r5, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	f7f9 fbaf 	bl	8001466 <_write>
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	d102      	bne.n	8007d12 <_write_r+0x1e>
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	b103      	cbz	r3, 8007d12 <_write_r+0x1e>
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	2000a418 	.word	0x2000a418

08007d18 <_close_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	4d06      	ldr	r5, [pc, #24]	; (8007d34 <_close_r+0x1c>)
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4604      	mov	r4, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	f7f9 fbbb 	bl	800149e <_close>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_close_r+0x1a>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_close_r+0x1a>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	2000a418 	.word	0x2000a418

08007d38 <_fstat_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d07      	ldr	r5, [pc, #28]	; (8007d58 <_fstat_r+0x20>)
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4604      	mov	r4, r0
 8007d40:	4608      	mov	r0, r1
 8007d42:	4611      	mov	r1, r2
 8007d44:	602b      	str	r3, [r5, #0]
 8007d46:	f7f9 fbb6 	bl	80014b6 <_fstat>
 8007d4a:	1c43      	adds	r3, r0, #1
 8007d4c:	d102      	bne.n	8007d54 <_fstat_r+0x1c>
 8007d4e:	682b      	ldr	r3, [r5, #0]
 8007d50:	b103      	cbz	r3, 8007d54 <_fstat_r+0x1c>
 8007d52:	6023      	str	r3, [r4, #0]
 8007d54:	bd38      	pop	{r3, r4, r5, pc}
 8007d56:	bf00      	nop
 8007d58:	2000a418 	.word	0x2000a418

08007d5c <_isatty_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d06      	ldr	r5, [pc, #24]	; (8007d78 <_isatty_r+0x1c>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f7f9 fbb5 	bl	80014d6 <_isatty>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_isatty_r+0x1a>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_isatty_r+0x1a>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	2000a418 	.word	0x2000a418

08007d7c <_lseek_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d07      	ldr	r5, [pc, #28]	; (8007d9c <_lseek_r+0x20>)
 8007d80:	4604      	mov	r4, r0
 8007d82:	4608      	mov	r0, r1
 8007d84:	4611      	mov	r1, r2
 8007d86:	2200      	movs	r2, #0
 8007d88:	602a      	str	r2, [r5, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f7f9 fbae 	bl	80014ec <_lseek>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_lseek_r+0x1e>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_lseek_r+0x1e>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	2000a418 	.word	0x2000a418

08007da0 <_read_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4d07      	ldr	r5, [pc, #28]	; (8007dc0 <_read_r+0x20>)
 8007da4:	4604      	mov	r4, r0
 8007da6:	4608      	mov	r0, r1
 8007da8:	4611      	mov	r1, r2
 8007daa:	2200      	movs	r2, #0
 8007dac:	602a      	str	r2, [r5, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	f7f9 fb3c 	bl	800142c <_read>
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d102      	bne.n	8007dbe <_read_r+0x1e>
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	b103      	cbz	r3, 8007dbe <_read_r+0x1e>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	2000a418 	.word	0x2000a418

08007dc4 <_init>:
 8007dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc6:	bf00      	nop
 8007dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dca:	bc08      	pop	{r3}
 8007dcc:	469e      	mov	lr, r3
 8007dce:	4770      	bx	lr

08007dd0 <_fini>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	bf00      	nop
 8007dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd6:	bc08      	pop	{r3}
 8007dd8:	469e      	mov	lr, r3
 8007dda:	4770      	bx	lr
