
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d020  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002550  0800d1b0  0800d1b0  0001d1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f700  0800f700  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  0800f700  0800f700  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f700  0800f700  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f700  0800f700  0001f700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f704  0800f704  0001f704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800f708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004838  20000208  0800f910  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a40  0800f910  00024a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f317  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d90  00000000  00000000  0003f54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  000432e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a0  00000000  00000000  00044b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002636b  00000000  00000000  000461e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba13  00000000  00000000  0006c54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3908  00000000  00000000  00087f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  0016b866  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a28  00000000  00000000  0016b92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000017de  00000000  00000000  00173354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d198 	.word	0x0800d198

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800d198 	.word	0x0800d198

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8000c50:	2254      	movs	r2, #84	; 0x54
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <MPU6050_Init+0x1c>)
 8000c56:	f008 fcf3 	bl	8009640 <memcpy>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000224 	.word	0x20000224

08000c68 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	4613      	mov	r3, r2
 8000c76:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8000c78:	23d0      	movs	r3, #208	; 0xd0
 8000c7a:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	b299      	uxth	r1, r3
 8000c84:	f107 020c 	add.w	r2, r7, #12
 8000c88:	230a      	movs	r3, #10
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <I2C_Read+0x48>)
 8000c90:	f004 fc38 	bl	8005504 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	b299      	uxth	r1, r3
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	2264      	movs	r2, #100	; 0x64
 8000c9e:	9200      	str	r2, [sp, #0]
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <I2C_Read+0x48>)
 8000ca4:	f004 fd22 	bl	80056ec <HAL_I2C_Master_Receive>
}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000224 	.word	0x20000224

08000cb4 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	4603      	mov	r3, r0
 8000cbc:	460a      	mov	r2, r1
 8000cbe:	71fb      	strb	r3, [r7, #7]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8000cc8:	79bb      	ldrb	r3, [r7, #6]
 8000cca:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8000ccc:	23d0      	movs	r3, #208	; 0xd0
 8000cce:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	b299      	uxth	r1, r3
 8000cd4:	f107 020c 	add.w	r2, r7, #12
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2302      	movs	r3, #2
 8000cde:	4803      	ldr	r0, [pc, #12]	; (8000cec <I2C_Write8+0x38>)
 8000ce0:	f004 fc10 	bl	8005504 <HAL_I2C_Master_Transmit>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000224 	.word	0x20000224

08000cf0 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]
	//Clock Source
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	206b      	movs	r0, #107	; 0x6b
 8000d00:	f7ff ffd8 	bl	8000cb4 <I2C_Write8>
	HAL_Delay(100);
 8000d04:	2064      	movs	r0, #100	; 0x64
 8000d06:	f002 fbad 	bl	8003464 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	791b      	ldrb	r3, [r3, #4]
 8000d18:	019b      	lsls	r3, r3, #6
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d20:	b25a      	sxtb	r2, r3
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	b25b      	sxtb	r3, r3
 8000d2a:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	206b      	movs	r0, #107	; 0x6b
 8000d32:	f7ff ffbf 	bl	8000cb4 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8000d36:	2064      	movs	r0, #100	; 0x64
 8000d38:	f002 fb94 	bl	8003464 <HAL_Delay>

	//Set the Digital Low Pass Filter
	Buffer = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	78db      	ldrb	r3, [r3, #3]
 8000d44:	f003 0307 	and.w	r3, r3, #7
 8000d48:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	201a      	movs	r0, #26
 8000d50:	f7ff ffb0 	bl	8000cb4 <I2C_Write8>

	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	785b      	ldrb	r3, [r3, #1]
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f003 0318 	and.w	r3, r3, #24
 8000d64:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	201b      	movs	r0, #27
 8000d6c:	f7ff ffa2 	bl	8000cb4 <I2C_Write8>

	//Select the Accelerometer Full Scale Range
	Buffer = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	789b      	ldrb	r3, [r3, #2]
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	f003 0318 	and.w	r3, r3, #24
 8000d80:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	4619      	mov	r1, r3
 8000d86:	201c      	movs	r0, #28
 8000d88:	f7ff ff94 	bl	8000cb4 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8000d8c:	2004      	movs	r0, #4
 8000d8e:	f000 f857 	bl	8000e40 <MPU6050_Set_SMPRT_DIV>


	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	789b      	ldrb	r3, [r3, #2]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d81a      	bhi.n	8000dd0 <MPU6050_Config+0xe0>
 8000d9a:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <MPU6050_Config+0xb0>)
 8000d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da0:	08000db1 	.word	0x08000db1
 8000da4:	08000db9 	.word	0x08000db9
 8000da8:	08000dc1 	.word	0x08000dc1
 8000dac:	08000dc9 	.word	0x08000dc9
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MPU6050_Config+0x12c>)
 8000db2:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <MPU6050_Config+0x130>)
 8000db4:	601a      	str	r2, [r3, #0]
			break;
 8000db6:	e00c      	b.n	8000dd2 <MPU6050_Config+0xe2>

		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MPU6050_Config+0x12c>)
 8000dba:	4a1a      	ldr	r2, [pc, #104]	; (8000e24 <MPU6050_Config+0x134>)
 8000dbc:	601a      	str	r2, [r3, #0]
				break;
 8000dbe:	e008      	b.n	8000dd2 <MPU6050_Config+0xe2>

		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MPU6050_Config+0x12c>)
 8000dc2:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <MPU6050_Config+0x138>)
 8000dc4:	601a      	str	r2, [r3, #0]
			break;
 8000dc6:	e004      	b.n	8000dd2 <MPU6050_Config+0xe2>

		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MPU6050_Config+0x12c>)
 8000dca:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <MPU6050_Config+0x13c>)
 8000dcc:	601a      	str	r2, [r3, #0]
			break;
 8000dce:	e000      	b.n	8000dd2 <MPU6050_Config+0xe2>

		default:
			break;
 8000dd0:	bf00      	nop
	}
	//Gyroscope Scaling Factor
	switch (config->Gyro_Full_Scale)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	785b      	ldrb	r3, [r3, #1]
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d81a      	bhi.n	8000e10 <MPU6050_Config+0x120>
 8000dda:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <MPU6050_Config+0xf0>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000df1 	.word	0x08000df1
 8000de4:	08000df9 	.word	0x08000df9
 8000de8:	08000e01 	.word	0x08000e01
 8000dec:	08000e09 	.word	0x08000e09
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MPU6050_Config+0x140>)
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <MPU6050_Config+0x144>)
 8000df4:	601a      	str	r2, [r3, #0]
			break;
 8000df6:	e00c      	b.n	8000e12 <MPU6050_Config+0x122>

		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <MPU6050_Config+0x140>)
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <MPU6050_Config+0x148>)
 8000dfc:	601a      	str	r2, [r3, #0]
				break;
 8000dfe:	e008      	b.n	8000e12 <MPU6050_Config+0x122>

		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MPU6050_Config+0x140>)
 8000e02:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <MPU6050_Config+0x14c>)
 8000e04:	601a      	str	r2, [r3, #0]
			break;
 8000e06:	e004      	b.n	8000e12 <MPU6050_Config+0x122>

		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MPU6050_Config+0x140>)
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <MPU6050_Config+0x130>)
 8000e0c:	601a      	str	r2, [r3, #0]
			break;
 8000e0e:	e000      	b.n	8000e12 <MPU6050_Config+0x122>

		default:
			break;
 8000e10:	bf00      	nop
	}

}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000278 	.word	0x20000278
 8000e20:	3d7a0000 	.word	0x3d7a0000
 8000e24:	3dfa0000 	.word	0x3dfa0000
 8000e28:	3e7a0000 	.word	0x3e7a0000
 8000e2c:	3efa0000 	.word	0x3efa0000
 8000e30:	2000027c 	.word	0x2000027c
 8000e34:	3bfa0000 	.word	0x3bfa0000
 8000e38:	3c7a0000 	.word	0x3c7a0000
 8000e3c:	3cfa0000 	.word	0x3cfa0000

08000e40 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	2019      	movs	r0, #25
 8000e50:	f7ff ff30 	bl	8000cb4 <I2C_Write8>
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <MPU6050_Get_Accel_RawData>:

}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	3301      	adds	r3, #1
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	203a      	movs	r0, #58	; 0x3a
 8000e70:	f7ff fefa 	bl	8000c68 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8000e74:	7f7b      	ldrb	r3, [r7, #29]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d04f      	beq.n	8000f1a <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	2206      	movs	r2, #6
 8000e80:	4619      	mov	r1, r3
 8000e82:	203b      	movs	r0, #59	; 0x3b
 8000e84:	f7ff fef0 	bl	8000c68 <I2C_Read>

		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8000e88:	7d3b      	ldrb	r3, [r7, #20]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	7d7b      	ldrb	r3, [r7, #21]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	4413      	add	r3, r2
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8000e9e:	7dbb      	ldrb	r3, [r7, #22]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	4413      	add	r3, r2
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8000eb4:	7e3b      	ldrb	r3, [r7, #24]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	7e7b      	ldrb	r3, [r7, #25]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	4413      	add	r3, r2
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	2206      	movs	r2, #6
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	2043      	movs	r0, #67	; 0x43
 8000ed4:	f7ff fec8 	bl	8000c68 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8000ed8:	7b3b      	ldrb	r3, [r7, #12]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	7b7b      	ldrb	r3, [r7, #13]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MPU6050_Get_Accel_RawData+0xc8>)
 8000eec:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 8000eee:	7bbb      	ldrb	r3, [r7, #14]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MPU6050_Get_Accel_RawData+0xc8>)
 8000f02:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 8000f04:	7c3b      	ldrb	r3, [r7, #16]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	7c7b      	ldrb	r3, [r7, #17]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4413      	add	r3, r2
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <MPU6050_Get_Accel_RawData+0xc8>)
 8000f18:	809a      	strh	r2, [r3, #4]
	}
}
 8000f1a:	bf00      	nop
 8000f1c:	3720      	adds	r7, #32
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000280 	.word	0x20000280

08000f28 <MPU6050_Get_Accel_Scale>:

//10- Get Accel scaled data (g unit of gravity, 1g = 9.81m/s2)
void MPU6050_Get_Accel_Scale(ScaledData_Def *scaledDef)
{
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

	RawData_Def AccelRData;
	MPU6050_Get_Accel_RawData(&AccelRData);
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff91 	bl	8000e5c <MPU6050_Get_Accel_RawData>

	scaledDef->x = atan2(AccelRData.y, AccelRData.z) * 57.3;
 8000f3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff faf0 	bl	8000524 <__aeabi_i2d>
 8000f44:	4604      	mov	r4, r0
 8000f46:	460d      	mov	r5, r1
 8000f48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fae9 	bl	8000524 <__aeabi_i2d>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	ec43 2b11 	vmov	d1, r2, r3
 8000f5a:	ec45 4b10 	vmov	d0, r4, r5
 8000f5e:	f00b fad9 	bl	800c514 <atan2>
 8000f62:	ec51 0b10 	vmov	r0, r1, d0
 8000f66:	a328      	add	r3, pc, #160	; (adr r3, 8001008 <MPU6050_Get_Accel_Scale+0xe0>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	f7ff fb44 	bl	80005f8 <__aeabi_dmul>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fe16 	bl	8000ba8 <__aeabi_d2f>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	601a      	str	r2, [r3, #0]
	scaledDef->y = atan2(-AccelRData.x,sqrt((AccelRData.y)^2 + (AccelRData.z)^2)) * 57.3;
 8000f82:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f86:	425b      	negs	r3, r3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff facb 	bl	8000524 <__aeabi_i2d>
 8000f8e:	4604      	mov	r4, r0
 8000f90:	460d      	mov	r5, r1
 8000f92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f96:	461a      	mov	r2, r3
 8000f98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	4053      	eors	r3, r2
 8000fa0:	f083 0302 	eor.w	r3, r3, #2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fabd 	bl	8000524 <__aeabi_i2d>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	ec43 2b10 	vmov	d0, r2, r3
 8000fb2:	f00b fb41 	bl	800c638 <sqrt>
 8000fb6:	eeb0 7a40 	vmov.f32	s14, s0
 8000fba:	eef0 7a60 	vmov.f32	s15, s1
 8000fbe:	eeb0 1a47 	vmov.f32	s2, s14
 8000fc2:	eef0 1a67 	vmov.f32	s3, s15
 8000fc6:	ec45 4b10 	vmov	d0, r4, r5
 8000fca:	f00b faa3 	bl	800c514 <atan2>
 8000fce:	ec51 0b10 	vmov	r0, r1, d0
 8000fd2:	a30d      	add	r3, pc, #52	; (adr r3, 8001008 <MPU6050_Get_Accel_Scale+0xe0>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff fb0e 	bl	80005f8 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fde0 	bl	8000ba8 <__aeabi_d2f>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	605a      	str	r2, [r3, #4]
	scaledDef->z = (AccelRData.z);
 8000fee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	edc3 7a02 	vstr	s15, [r3, #8]

	//Accel Scale data
//	scaledDef->x = ((AccelRData.x+0.0f)*accelScalingFactor);
//	scaledDef->y = ((AccelRData.y+0.0f)*accelScalingFactor);
//	scaledDef->z = ((AccelRData.z+0.0f)*accelScalingFactor);
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bdb0      	pop	{r4, r5, r7, pc}
 8001008:	66666666 	.word	0x66666666
 800100c:	404ca666 	.word	0x404ca666

08001010 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <MPU6050_Get_Gyro_RawData+0x34>)
 800101a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <MPU6050_Get_Gyro_RawData+0x34>)
 8001024:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <MPU6050_Get_Gyro_RawData+0x34>)
 800102e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	809a      	strh	r2, [r3, #4]

}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000280 	.word	0x20000280

08001048 <MPU6050_Get_Gyro_Scale>:

//13- Get Gyro scaled data
void MPU6050_Get_Gyro_Scale(ScaledData_Def *scaledDef)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	RawData_Def myGyroRaw;
	MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ffdb 	bl	8001010 <MPU6050_Get_Gyro_RawData>

	//Gyro Scale data
	scaledDef->x = (myGyroRaw.x)*gyroScalingFactor; // x-Axis
 800105a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MPU6050_Get_Gyro_Scale+0x70>)
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = (myGyroRaw.y)*gyroScalingFactor; // y-Axis
 8001076:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <MPU6050_Get_Gyro_Scale+0x70>)
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = (myGyroRaw.z)*gyroScalingFactor; // z-Axis
 8001092:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MPU6050_Get_Gyro_Scale+0x70>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000027c 	.word	0x2000027c

080010bc <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM16)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d136      	bne.n	800113c <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		MPU6050_Get_Accel_Scale(&myAccelScaled);
 80010ce:	481e      	ldr	r0, [pc, #120]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80010d0:	f7ff ff2a 	bl	8000f28 <MPU6050_Get_Accel_Scale>
		MPU6050_Get_Gyro_Scale(&myGyroScaled);
 80010d4:	481d      	ldr	r0, [pc, #116]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010d6:	f7ff ffb7 	bl	8001048 <MPU6050_Get_Gyro_Scale>
		if (myAccelScaled.x > 0 && screenflip == 0)
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e8:	dd09      	ble.n	80010fe <HAL_TIM_PeriodElapsedCallback+0x42>
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d105      	bne.n	80010fe <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			ssd1306_Init1();
 80010f2:	f002 f873 	bl	80031dc <ssd1306_Init1>
			screenflip = 1;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	e010      	b.n	8001120 <HAL_TIM_PeriodElapsedCallback+0x64>
		} else if (myAccelScaled.x < 0 && screenflip == 1)
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110c:	d508      	bpl.n	8001120 <HAL_TIM_PeriodElapsedCallback+0x64>
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d104      	bne.n	8001120 <HAL_TIM_PeriodElapsedCallback+0x64>
		{
			ssd1306_Init2();
 8001116:	f002 f8c9 	bl	80032ac <ssd1306_Init2>
			screenflip = 0;
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]

		}

	if (htim->Instance == 0x40014400)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d108      	bne.n	800113c <HAL_TIM_PeriodElapsedCallback+0x80>
		{
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
			HAL_Delay(100);
 800112a:	2064      	movs	r0, #100	; 0x64
 800112c:	f002 f99a 	bl	8003464 <HAL_Delay>
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8001130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f004 f93a 	bl	80053b0 <HAL_GPIO_TogglePin>
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
	//HAL_Delay(200);
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);

}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40014400 	.word	0x40014400
 8001148:	2000287c 	.word	0x2000287c
 800114c:	20004a10 	.word	0x20004a10
 8001150:	200002ac 	.word	0x200002ac

08001154 <init_tunings>:
//40000000

/*  HAL_TIM_SET_PRESCALER(&htim2,newValue); */

void init_tunings()
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
	curr_target_string[0] = E2;
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <init_tunings+0x34>)
 800115a:	4a0c      	ldr	r2, [pc, #48]	; (800118c <init_tunings+0x38>)
 800115c:	601a      	str	r2, [r3, #0]
	curr_target_string[1] = A2;
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <init_tunings+0x34>)
 8001160:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <init_tunings+0x3c>)
 8001162:	605a      	str	r2, [r3, #4]
	curr_target_string[2] = D3;
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <init_tunings+0x34>)
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <init_tunings+0x40>)
 8001168:	609a      	str	r2, [r3, #8]
	curr_target_string[3] = G3;
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <init_tunings+0x34>)
 800116c:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <init_tunings+0x44>)
 800116e:	60da      	str	r2, [r3, #12]
	curr_target_string[4] = B3;
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <init_tunings+0x34>)
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <init_tunings+0x48>)
 8001174:	611a      	str	r2, [r3, #16]
	curr_target_string[5] = E4;
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <init_tunings+0x34>)
 8001178:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <init_tunings+0x4c>)
 800117a:	615a      	str	r2, [r3, #20]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20002780 	.word	0x20002780
 800118c:	42a4d1ec 	.word	0x42a4d1ec
 8001190:	42dc0000 	.word	0x42dc0000
 8001194:	4312d47b 	.word	0x4312d47b
 8001198:	43440000 	.word	0x43440000
 800119c:	4376f0a4 	.word	0x4376f0a4
 80011a0:	43a4d0a4 	.word	0x43a4d0a4

080011a4 <adc_to_guitar_signal>:


void adc_to_guitar_signal(uint16_t *src, float32_t *guitar_signal)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < BLOCK_SIZE; i++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	e015      	b.n	80011e0 <adc_to_guitar_signal+0x3c>
	{
		guitar_signal[i] = (float32_t) src[i] - DC_BIAS;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001200 <adc_to_guitar_signal+0x5c>
 80011d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011d6:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < BLOCK_SIZE; i++)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3301      	adds	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e6:	dbe5      	blt.n	80011b4 <adc_to_guitar_signal+0x10>
	}
	arm_biquad_cascade_df1_f32(&iir_settings, guitar_signal, guitar_signal, BLOCK_SIZE);
 80011e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <adc_to_guitar_signal+0x60>)
 80011f2:	f008 f8e5 	bl	80093c0 <arm_biquad_cascade_df1_f32>
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	450e8000 	.word	0x450e8000
 8001204:	200049b8 	.word	0x200049b8

08001208 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	in_ptr = &adc_buff[0];
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001212:	4a15      	ldr	r2, [pc, #84]	; (8001268 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8001214:	601a      	str	r2, [r3, #0]
	adc_to_guitar_signal(in_ptr, &guitar_signal[0]);
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4914      	ldr	r1, [pc, #80]	; (800126c <HAL_ADC_ConvHalfCpltCallback+0x64>)
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ffc1 	bl	80011a4 <adc_to_guitar_signal>

	float32_t *p  = &guitar_signal[0];
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8001224:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < BLOCK_SIZE; i++)
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	e013      	b.n	8001254 <HAL_ADC_ConvHalfCpltCallback+0x4c>
	{
		if(*p > THRESHOLD)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001270 <HAL_ADC_ConvHalfCpltCallback+0x68>
 8001236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123e:	dd03      	ble.n	8001248 <HAL_ADC_ConvHalfCpltCallback+0x40>
		{
			callback_state = 1;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]
			return;
 8001246:	e009      	b.n	800125c <HAL_ADC_ConvHalfCpltCallback+0x54>
		}
		p++;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3304      	adds	r3, #4
 800124c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < BLOCK_SIZE; i++)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	3301      	adds	r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125a:	dbe7      	blt.n	800122c <HAL_ADC_ConvHalfCpltCallback+0x24>
	}
}
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20002888 	.word	0x20002888
 8001268:	2000396c 	.word	0x2000396c
 800126c:	200028d4 	.word	0x200028d4
 8001270:	44160000 	.word	0x44160000
 8001274:	2000028c 	.word	0x2000028c

08001278 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	in_ptr = &adc_buff[BLOCK_SIZE];
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001282:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <HAL_ADC_ConvCpltCallback+0x60>)
 8001284:	601a      	str	r2, [r3, #0]
	adc_to_guitar_signal(in_ptr, &guitar_signal[0]);
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4914      	ldr	r1, [pc, #80]	; (80012dc <HAL_ADC_ConvCpltCallback+0x64>)
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff89 	bl	80011a4 <adc_to_guitar_signal>

	float32_t *p  = &guitar_signal[0];
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_ADC_ConvCpltCallback+0x64>)
 8001294:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < BLOCK_SIZE; i++)
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	e013      	b.n	80012c4 <HAL_ADC_ConvCpltCallback+0x4c>
	{
		if(*p > THRESHOLD)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80012e0 <HAL_ADC_ConvCpltCallback+0x68>
 80012a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ae:	dd03      	ble.n	80012b8 <HAL_ADC_ConvCpltCallback+0x40>
		{
			callback_state = 1;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_ADC_ConvCpltCallback+0x6c>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]
			return;
 80012b6:	e009      	b.n	80012cc <HAL_ADC_ConvCpltCallback+0x54>
		}
		p++;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3304      	adds	r3, #4
 80012bc:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < BLOCK_SIZE; i++)
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3301      	adds	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ca:	dbe7      	blt.n	800129c <HAL_ADC_ConvCpltCallback+0x24>
	}
}
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20002888 	.word	0x20002888
 80012d8:	2000416c 	.word	0x2000416c
 80012dc:	200028d4 	.word	0x200028d4
 80012e0:	44160000 	.word	0x44160000
 80012e4:	2000028c 	.word	0x2000028c

080012e8 <get_frequency>:
  float32_t fb = *(const float32_t*) b;
  return (fa > fb) - (fa < fb);
}

void get_frequency(float32_t *signal, float32_t target_freq, float32_t *out_freq)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80012f4:	6079      	str	r1, [r7, #4]
	if (callback_state == 1)
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <get_frequency+0x78>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d12b      	bne.n	8001356 <get_frequency+0x6e>
	{
		float32_t curr_freq = 0;
 80012fe:	f04f 0300 	mov.w	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
		mpm_mcleod_pitch_method_f32(&signal[0], &curr_freq);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f001 f840 	bl	8002390 <mpm_mcleod_pitch_method_f32>
		callback_state = 0;
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <get_frequency+0x78>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
		*out_freq = ceill(4 * curr_freq) / 4;
 8001316:	edd7 7a05 	vldr	s15, [r7, #20]
 800131a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800131e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001322:	ee17 0a90 	vmov	r0, s15
 8001326:	f7ff f90f 	bl	8000548 <__aeabi_f2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	ec43 2b10 	vmov	d0, r2, r3
 8001332:	f00b f821 	bl	800c378 <ceill>
 8001336:	ec51 0b10 	vmov	r0, r1, d0
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <get_frequency+0x7c>)
 8001340:	f7ff fa84 	bl	800084c <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc2c 	bl	8000ba8 <__aeabi_d2f>
 8001350:	4602      	mov	r2, r0
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	601a      	str	r2, [r3, #0]
	}
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000028c 	.word	0x2000028c
 8001364:	40100000 	.word	0x40100000

08001368 <get_error_in_cents>:

float32_t get_error_in_cents(float32_t curr_frequency, float32_t target_frequency)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001372:	edc7 0a00 	vstr	s1, [r7]
	float32_t error = 1200 * log2(curr_frequency / target_frequency);
 8001376:	ed97 7a01 	vldr	s14, [r7, #4]
 800137a:	edd7 7a00 	vldr	s15, [r7]
 800137e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001382:	ee16 0a90 	vmov	r0, s13
 8001386:	f7ff f8df 	bl	8000548 <__aeabi_f2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	ec43 2b10 	vmov	d0, r2, r3
 8001392:	f00b f8c1 	bl	800c518 <log>
 8001396:	ec51 0b10 	vmov	r0, r1, d0
 800139a:	a318      	add	r3, pc, #96	; (adr r3, 80013fc <get_error_in_cents+0x94>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff fa54 	bl	800084c <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <get_error_in_cents+0x90>)
 80013b2:	f7ff f921 	bl	80005f8 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fbf3 	bl	8000ba8 <__aeabi_d2f>
 80013c2:	4603      	mov	r3, r0
 80013c4:	60fb      	str	r3, [r7, #12]
	return round(error);
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f7ff f8be 	bl	8000548 <__aeabi_f2d>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	ec43 2b10 	vmov	d0, r2, r3
 80013d4:	f00b f858 	bl	800c488 <round>
 80013d8:	ec53 2b10 	vmov	r2, r3, d0
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fbe2 	bl	8000ba8 <__aeabi_d2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	ee07 3a90 	vmov	s15, r3
}
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	f3af 8000 	nop.w
 80013f8:	4092c000 	.word	0x4092c000
 80013fc:	fefa39ef 	.word	0xfefa39ef
 8001400:	3fe62e42 	.word	0x3fe62e42

08001404 <toggle_motor_wait>:


void toggle_motor_wait()
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
	if (motor_wait == 2)
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <toggle_motor_wait+0x28>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d103      	bne.n	8001418 <toggle_motor_wait+0x14>
	{
		motor_wait = 0;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <toggle_motor_wait+0x28>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
	} else
	{
		motor_wait++;
	}
}
 8001416:	e004      	b.n	8001422 <toggle_motor_wait+0x1e>
		motor_wait++;
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <toggle_motor_wait+0x28>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	4a03      	ldr	r2, [pc, #12]	; (800142c <toggle_motor_wait+0x28>)
 8001420:	6013      	str	r3, [r2, #0]
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	20000288 	.word	0x20000288

08001430 <state_tune_up_fine>:

void state_tune_up_fine()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	int pulse_width = 46;
 8001436:	232e      	movs	r3, #46	; 0x2e
 8001438:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <state_tune_up_fine+0x34>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 8001442:	2064      	movs	r0, #100	; 0x64
 8001444:	f002 f80e 	bl	8003464 <HAL_Delay>
	pulse_width = 50;
 8001448:	2332      	movs	r3, #50	; 0x32
 800144a:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <state_tune_up_fine+0x34>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	641a      	str	r2, [r3, #64]	; 0x40
	state = state_get_pitch;
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <state_tune_up_fine+0x38>)
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <state_tune_up_fine+0x3c>)
 8001458:	601a      	str	r2, [r3, #0]
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20003920 	.word	0x20003920
 8001468:	20002798 	.word	0x20002798
 800146c:	08001835 	.word	0x08001835

08001470 <state_tune_up_fast>:

void state_tune_up_fast()
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
	int pulse_width = 40;
 8001476:	2328      	movs	r3, #40	; 0x28
 8001478:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <state_tune_up_fast+0x40>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(200);
 8001482:	20c8      	movs	r0, #200	; 0xc8
 8001484:	f001 ffee 	bl	8003464 <HAL_Delay>
	pulse_width = 50;
 8001488:	2332      	movs	r3, #50	; 0x32
 800148a:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <state_tune_up_fast+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 8001494:	2064      	movs	r0, #100	; 0x64
 8001496:	f001 ffe5 	bl	8003464 <HAL_Delay>
	motor_wait = 0;
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <state_tune_up_fast+0x44>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
	state = state_get_pitch;
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <state_tune_up_fast+0x48>)
 80014a2:	4a06      	ldr	r2, [pc, #24]	; (80014bc <state_tune_up_fast+0x4c>)
 80014a4:	601a      	str	r2, [r3, #0]
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20003920 	.word	0x20003920
 80014b4:	20000288 	.word	0x20000288
 80014b8:	20002798 	.word	0x20002798
 80014bc:	08001835 	.word	0x08001835

080014c0 <state_tune_down_fine>:

void state_tune_down_fine()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	int pulse_width = 54;
 80014c6:	2336      	movs	r3, #54	; 0x36
 80014c8:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <state_tune_down_fine+0x34>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 80014d2:	2064      	movs	r0, #100	; 0x64
 80014d4:	f001 ffc6 	bl	8003464 <HAL_Delay>
	pulse_width = 50;
 80014d8:	2332      	movs	r3, #50	; 0x32
 80014da:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <state_tune_down_fine+0x34>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	641a      	str	r2, [r3, #64]	; 0x40
	state = state_get_pitch;
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <state_tune_down_fine+0x38>)
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <state_tune_down_fine+0x3c>)
 80014e8:	601a      	str	r2, [r3, #0]
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20003920 	.word	0x20003920
 80014f8:	20002798 	.word	0x20002798
 80014fc:	08001835 	.word	0x08001835

08001500 <state_tune_down_fast>:

void state_tune_down_fast()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
	int pulse_width = 64;
 8001506:	2340      	movs	r3, #64	; 0x40
 8001508:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <state_tune_down_fast+0x40>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(200);
 8001512:	20c8      	movs	r0, #200	; 0xc8
 8001514:	f001 ffa6 	bl	8003464 <HAL_Delay>
	pulse_width = 50;
 8001518:	2332      	movs	r3, #50	; 0x32
 800151a:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <state_tune_down_fast+0x40>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 8001524:	2064      	movs	r0, #100	; 0x64
 8001526:	f001 ff9d 	bl	8003464 <HAL_Delay>
	motor_wait = 0;
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <state_tune_down_fast+0x44>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
	state = state_get_pitch;
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <state_tune_down_fast+0x48>)
 8001532:	4a06      	ldr	r2, [pc, #24]	; (800154c <state_tune_down_fast+0x4c>)
 8001534:	601a      	str	r2, [r3, #0]
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20003920 	.word	0x20003920
 8001544:	20000288 	.word	0x20000288
 8001548:	20002798 	.word	0x20002798
 800154c:	08001835 	.word	0x08001835

08001550 <iterate_table_pos>:


void iterate_table_pos()
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	if(table_pos_ptr == &pitch_table[TABLE_SIZE - 1])
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <iterate_table_pos+0x2c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a09      	ldr	r2, [pc, #36]	; (8001580 <iterate_table_pos+0x30>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d103      	bne.n	8001566 <iterate_table_pos+0x16>
	{
		table_pos_ptr = &pitch_table[0];
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <iterate_table_pos+0x2c>)
 8001560:	4a08      	ldr	r2, [pc, #32]	; (8001584 <iterate_table_pos+0x34>)
 8001562:	601a      	str	r2, [r3, #0]
	}else
	{
		table_pos_ptr++;
	}

}
 8001564:	e004      	b.n	8001570 <iterate_table_pos+0x20>
		table_pos_ptr++;
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <iterate_table_pos+0x2c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	3304      	adds	r3, #4
 800156c:	4a03      	ldr	r2, [pc, #12]	; (800157c <iterate_table_pos+0x2c>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000000 	.word	0x20000000
 8001580:	200002a8 	.word	0x200002a8
 8001584:	20000298 	.word	0x20000298

08001588 <get_min_table>:

float32_t  get_min_table()
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0

	float32_t min = pitch_table[0];
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <get_min_table+0x58>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < TABLE_SIZE; i++)
 8001594:	2300      	movs	r3, #0
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	e015      	b.n	80015c6 <get_min_table+0x3e>
	{
		if(pitch_table[i] < min)
 800159a:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <get_min_table+0x58>)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80015aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	dd05      	ble.n	80015c0 <get_min_table+0x38>
		{
			min = pitch_table[i];
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <get_min_table+0x58>)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < TABLE_SIZE; i++)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	dde6      	ble.n	800159a <get_min_table+0x12>
		}
	}
	//qsort(pitch_table, TABLE_SIZE, sizeof(float32_t), cmpfunc);
	//float32_t median_error = tmp[TABLE_CENTRE];
	return min;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	ee07 3a90 	vmov	s15, r3
}
 80015d2:	eeb0 0a67 	vmov.f32	s0, s15
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	20000298 	.word	0x20000298

080015e4 <init_table>:


int init_table(int PITCH_U, int PITCH_L, float32_t target_freq)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	ed87 0a01 	vstr	s0, [r7, #4]
	#define END TABLE_SIZE - 1

	if( pitch_table[END] < PITCH_L || pitch_table[END] > PITCH_U)
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <init_table+0xa4>)
 80015f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001602:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160a:	d40c      	bmi.n	8001626 <init_table+0x42>
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <init_table+0xa4>)
 800160e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	ee07 3a90 	vmov	s15, r3
 8001618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	dd2a      	ble.n	800167c <init_table+0x98>
	{
		float32_t freq = 0;
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
		get_frequency(&guitar_signal[0], target_freq, &freq);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	ed97 0a01 	vldr	s0, [r7, #4]
 8001636:	4815      	ldr	r0, [pc, #84]	; (800168c <init_table+0xa8>)
 8001638:	f7ff fe56 	bl	80012e8 <get_frequency>
		if(PITCH_L < freq && freq < PITCH_U)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001646:	edd7 7a05 	vldr	s15, [r7, #20]
 800164a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001652:	d513      	bpl.n	800167c <init_table+0x98>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001662:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166a:	dd07      	ble.n	800167c <init_table+0x98>
		{
			*table_pos_ptr = freq;
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <init_table+0xac>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	601a      	str	r2, [r3, #0]
			iterate_table_pos();
 8001674:	f7ff ff6c 	bl	8001550 <iterate_table_pos>
			return 1;
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <init_table+0x9a>
		}
	}
	return 0;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000298 	.word	0x20000298
 800168c:	200028d4 	.word	0x200028d4
 8001690:	20000000 	.word	0x20000000

08001694 <state_string_pitch>:



void state_string_pitch(int UPP_LIM, int LOW_LIM, float32_t target_freq)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	ed87 0a01 	vstr	s0, [r7, #4]

	if (correct_pitch_counter ==  MIN_CORRECT)
 80016a2:	4b57      	ldr	r3, [pc, #348]	; (8001800 <state_string_pitch+0x16c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d111      	bne.n	80016ce <state_string_pitch+0x3a>
	{
		char *str = "Correct";
 80016aa:	4b56      	ldr	r3, [pc, #344]	; (8001804 <state_string_pitch+0x170>)
 80016ac:	61bb      	str	r3, [r7, #24]
		oled_print_string(str);
 80016ae:	69b8      	ldr	r0, [r7, #24]
 80016b0:	f000 fedc 	bl	800246c <oled_print_string>
		string_tracking++;
 80016b4:	4b54      	ldr	r3, [pc, #336]	; (8001808 <state_string_pitch+0x174>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	4a53      	ldr	r2, [pc, #332]	; (8001808 <state_string_pitch+0x174>)
 80016bc:	6013      	str	r3, [r2, #0]
		correct_pitch_counter = 0;
 80016be:	4b50      	ldr	r3, [pc, #320]	; (8001800 <state_string_pitch+0x16c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
		HAL_Delay(2000);
 80016c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016c8:	f001 fecc 	bl	8003464 <HAL_Delay>
 80016cc:	e095      	b.n	80017fa <state_string_pitch+0x166>
		return;
	}

	while(init_table(UPP_LIM, LOW_LIM, target_freq));
 80016ce:	bf00      	nop
 80016d0:	ed97 0a01 	vldr	s0, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f7ff ff84 	bl	80015e4 <init_table>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f6      	bne.n	80016d0 <state_string_pitch+0x3c>

	float32_t freq = 0;
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
	get_frequency(&guitar_signal[0], target_freq, &freq);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80016f2:	4846      	ldr	r0, [pc, #280]	; (800180c <state_string_pitch+0x178>)
 80016f4:	f7ff fdf8 	bl	80012e8 <get_frequency>

	if(LOW_LIM < freq && freq < UPP_LIM)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	ee07 3a90 	vmov	s15, r3
 80016fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001702:	edd7 7a05 	vldr	s15, [r7, #20]
 8001706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170e:	d56e      	bpl.n	80017ee <state_string_pitch+0x15a>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800171a:	edd7 7a05 	vldr	s15, [r7, #20]
 800171e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001726:	dd62      	ble.n	80017ee <state_string_pitch+0x15a>
	{
		*table_pos_ptr = freq;
 8001728:	4b39      	ldr	r3, [pc, #228]	; (8001810 <state_string_pitch+0x17c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	601a      	str	r2, [r3, #0]
		iterate_table_pos();
 8001730:	f7ff ff0e 	bl	8001550 <iterate_table_pos>
		float32_t m_freq = get_min_table();
 8001734:	f7ff ff28 	bl	8001588 <get_min_table>
 8001738:	ed87 0a07 	vstr	s0, [r7, #28]
		float32_t error = get_error_in_cents(m_freq, target_freq);
 800173c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001740:	ed97 0a07 	vldr	s0, [r7, #28]
 8001744:	f7ff fe10 	bl	8001368 <get_error_in_cents>
 8001748:	eef0 7a40 	vmov.f32	s15, s0
 800174c:	edc7 7a04 	vstr	s15, [r7, #16]
		oled_print_f32(&error);
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fe9f 	bl	8002498 <oled_print_f32>

		if (motor_wait == 0)
 800175a:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <state_string_pitch+0x180>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d148      	bne.n	80017f4 <state_string_pitch+0x160>
		{
			if(error > 40) {
 8001762:	edd7 7a04 	vldr	s15, [r7, #16]
 8001766:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001818 <state_string_pitch+0x184>
 800176a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	dd06      	ble.n	8001782 <state_string_pitch+0xee>
				state = state_tune_down_fast;
 8001774:	4b29      	ldr	r3, [pc, #164]	; (800181c <state_string_pitch+0x188>)
 8001776:	4a2a      	ldr	r2, [pc, #168]	; (8001820 <state_string_pitch+0x18c>)
 8001778:	601a      	str	r2, [r3, #0]
				correct_pitch_counter = 0;
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <state_string_pitch+0x16c>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
	{
 8001780:	e038      	b.n	80017f4 <state_string_pitch+0x160>
			} else if (error > 7)
 8001782:	edd7 7a04 	vldr	s15, [r7, #16]
 8001786:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800178a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	dd06      	ble.n	80017a2 <state_string_pitch+0x10e>
			{
				state = state_tune_down_fine;
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <state_string_pitch+0x188>)
 8001796:	4a23      	ldr	r2, [pc, #140]	; (8001824 <state_string_pitch+0x190>)
 8001798:	601a      	str	r2, [r3, #0]
				correct_pitch_counter = 0;
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <state_string_pitch+0x16c>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
	{
 80017a0:	e028      	b.n	80017f4 <state_string_pitch+0x160>
			}else if(error < -40.0)
 80017a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017a6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001828 <state_string_pitch+0x194>
 80017aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b2:	d506      	bpl.n	80017c2 <state_string_pitch+0x12e>
			{

				state = state_tune_up_fast;
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <state_string_pitch+0x188>)
 80017b6:	4a1d      	ldr	r2, [pc, #116]	; (800182c <state_string_pitch+0x198>)
 80017b8:	601a      	str	r2, [r3, #0]
				correct_pitch_counter = 0;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <state_string_pitch+0x16c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
	{
 80017c0:	e018      	b.n	80017f4 <state_string_pitch+0x160>
			}else if(error < -7)
 80017c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017c6:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 80017ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d2:	d506      	bpl.n	80017e2 <state_string_pitch+0x14e>
			{
				state = state_tune_up_fine;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <state_string_pitch+0x188>)
 80017d6:	4a16      	ldr	r2, [pc, #88]	; (8001830 <state_string_pitch+0x19c>)
 80017d8:	601a      	str	r2, [r3, #0]
				correct_pitch_counter = 0;
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <state_string_pitch+0x16c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
	{
 80017e0:	e008      	b.n	80017f4 <state_string_pitch+0x160>
			} else
			{
				correct_pitch_counter++;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <state_string_pitch+0x16c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4a05      	ldr	r2, [pc, #20]	; (8001800 <state_string_pitch+0x16c>)
 80017ea:	6013      	str	r3, [r2, #0]
	{
 80017ec:	e002      	b.n	80017f4 <state_string_pitch+0x160>
			}
		}
	}
	else
	{
		oled_clear_screen();
 80017ee:	f000 fe7f 	bl	80024f0 <oled_clear_screen>
 80017f2:	e000      	b.n	80017f6 <state_string_pitch+0x162>
	{
 80017f4:	bf00      	nop
	}
	toggle_motor_wait();
 80017f6:	f7ff fe05 	bl	8001404 <toggle_motor_wait>
}
 80017fa:	3720      	adds	r7, #32
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000294 	.word	0x20000294
 8001804:	0800d1b0 	.word	0x0800d1b0
 8001808:	20000290 	.word	0x20000290
 800180c:	200028d4 	.word	0x200028d4
 8001810:	20000000 	.word	0x20000000
 8001814:	20000288 	.word	0x20000288
 8001818:	42200000 	.word	0x42200000
 800181c:	20002798 	.word	0x20002798
 8001820:	08001501 	.word	0x08001501
 8001824:	080014c1 	.word	0x080014c1
 8001828:	c2200000 	.word	0xc2200000
 800182c:	08001471 	.word	0x08001471
 8001830:	08001431 	.word	0x08001431

08001834 <state_get_pitch>:


void state_get_pitch()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	#define B3_U 320
	#define B3_L 205
	#define E4_U 350
	#define E4_L 305

	if (string_tracking == E2_STRING_NUM)
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <state_get_pitch+0x98>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d106      	bne.n	800184e <state_get_pitch+0x1a>
	{
		state_string_pitch(E2_U, E2_L, E2);
 8001840:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80018d0 <state_get_pitch+0x9c>
 8001844:	2137      	movs	r1, #55	; 0x37
 8001846:	2064      	movs	r0, #100	; 0x64
 8001848:	f7ff ff24 	bl	8001694 <state_string_pitch>





}
 800184c:	e03c      	b.n	80018c8 <state_get_pitch+0x94>
	} else if (string_tracking == A2_STRING_NUM)
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <state_get_pitch+0x98>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d106      	bne.n	8001864 <state_get_pitch+0x30>
		state_string_pitch(A2_U, A2_L, A2);
 8001856:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80018d4 <state_get_pitch+0xa0>
 800185a:	2155      	movs	r1, #85	; 0x55
 800185c:	208c      	movs	r0, #140	; 0x8c
 800185e:	f7ff ff19 	bl	8001694 <state_string_pitch>
}
 8001862:	e031      	b.n	80018c8 <state_get_pitch+0x94>
	}else if (string_tracking == D3_STRING_NUM)
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <state_get_pitch+0x98>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d106      	bne.n	800187a <state_get_pitch+0x46>
		state_string_pitch(D3_U, D3_L, D3);
 800186c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80018d8 <state_get_pitch+0xa4>
 8001870:	2173      	movs	r1, #115	; 0x73
 8001872:	20be      	movs	r0, #190	; 0xbe
 8001874:	f7ff ff0e 	bl	8001694 <state_string_pitch>
}
 8001878:	e026      	b.n	80018c8 <state_get_pitch+0x94>
	}else if (string_tracking == G3_STRING_NUM)
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <state_get_pitch+0x98>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d106      	bne.n	8001890 <state_get_pitch+0x5c>
		state_string_pitch(G3_U, G3_L, G3);
 8001882:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80018dc <state_get_pitch+0xa8>
 8001886:	219b      	movs	r1, #155	; 0x9b
 8001888:	20e6      	movs	r0, #230	; 0xe6
 800188a:	f7ff ff03 	bl	8001694 <state_string_pitch>
}
 800188e:	e01b      	b.n	80018c8 <state_get_pitch+0x94>
	}else if (string_tracking == B3_STRING_NUM)
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <state_get_pitch+0x98>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b04      	cmp	r3, #4
 8001896:	d107      	bne.n	80018a8 <state_get_pitch+0x74>
		state_string_pitch(B3_U, B3_L, B3);
 8001898:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80018e0 <state_get_pitch+0xac>
 800189c:	21cd      	movs	r1, #205	; 0xcd
 800189e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80018a2:	f7ff fef7 	bl	8001694 <state_string_pitch>
}
 80018a6:	e00f      	b.n	80018c8 <state_get_pitch+0x94>
	}else if (string_tracking == E4_STRING_NUM)
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <state_get_pitch+0x98>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d108      	bne.n	80018c2 <state_get_pitch+0x8e>
		state_string_pitch(E4_U, E4_L, E4);
 80018b0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80018e4 <state_get_pitch+0xb0>
 80018b4:	f240 1131 	movw	r1, #305	; 0x131
 80018b8:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80018bc:	f7ff feea 	bl	8001694 <state_string_pitch>
}
 80018c0:	e002      	b.n	80018c8 <state_get_pitch+0x94>
		string_tracking =  E2_STRING_NUM;
 80018c2:	4b02      	ldr	r3, [pc, #8]	; (80018cc <state_get_pitch+0x98>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000290 	.word	0x20000290
 80018d0:	42a4d1ec 	.word	0x42a4d1ec
 80018d4:	42dc0000 	.word	0x42dc0000
 80018d8:	4312d47b 	.word	0x4312d47b
 80018dc:	43440000 	.word	0x43440000
 80018e0:	4376f0a4 	.word	0x4376f0a4
 80018e4:	43a4d0a4 	.word	0x43a4d0a4

080018e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80018ee:	f001 fd45 	bl	800337c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80018f2:	f000 f873 	bl	80019dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80018f6:	f000 fb5d 	bl	8001fb4 <MX_GPIO_Init>
	MX_DMA_Init();
 80018fa:	f000 fb35 	bl	8001f68 <MX_DMA_Init>
	MX_TIM6_Init();
 80018fe:	f000 fad5 	bl	8001eac <MX_TIM6_Init>
	MX_OPAMP1_Init();
 8001902:	f000 f9d3 	bl	8001cac <MX_OPAMP1_Init>
	MX_ADC1_Init();
 8001906:	f000 f8b9 	bl	8001a7c <MX_ADC1_Init>
	MX_I2C1_Init();
 800190a:	f000 f94f 	bl	8001bac <MX_I2C1_Init>
	MX_DAC1_Init();
 800190e:	f000 f91b 	bl	8001b48 <MX_DAC1_Init>
	MX_TIM1_Init();
 8001912:	f000 f9ef 	bl	8001cf4 <MX_TIM1_Init>
	MX_I2C2_Init();
 8001916:	f000 f989 	bl	8001c2c <MX_I2C2_Init>
	MX_TIM16_Init();
 800191a:	f000 fafd 	bl	8001f18 <MX_TIM16_Init>
	MX_TIM2_Init();
 800191e:	f000 fa77 	bl	8001e10 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim6);
 8001922:	4821      	ldr	r0, [pc, #132]	; (80019a8 <main+0xc0>)
 8001924:	f006 f83a 	bl	800799c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001928:	210c      	movs	r1, #12
 800192a:	4820      	ldr	r0, [pc, #128]	; (80019ac <main+0xc4>)
 800192c:	f006 fa0c 	bl	8007d48 <HAL_TIM_PWM_Start>

	HAL_TIM_OC_Start(&htim6, TIM_CHANNEL_6);
 8001930:	2114      	movs	r1, #20
 8001932:	481d      	ldr	r0, [pc, #116]	; (80019a8 <main+0xc0>)
 8001934:	f006 f8d2 	bl	8007adc <HAL_TIM_OC_Start>
	HAL_OPAMP_SelfCalibrate (&hopamp1);
 8001938:	481d      	ldr	r0, [pc, #116]	; (80019b0 <main+0xc8>)
 800193a:	f004 fd4c 	bl	80063d6 <HAL_OPAMP_SelfCalibrate>
	HAL_OPAMP_Start(&hopamp1);
 800193e:	481c      	ldr	r0, [pc, #112]	; (80019b0 <main+0xc8>)
 8001940:	f004 fd18 	bl	8006374 <HAL_OPAMP_Start>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001944:	217f      	movs	r1, #127	; 0x7f
 8001946:	481b      	ldr	r0, [pc, #108]	; (80019b4 <main+0xcc>)
 8001948:	f002 fefa 	bl	8004740 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, 2 * BLOCK_SIZE);
 800194c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001950:	4919      	ldr	r1, [pc, #100]	; (80019b8 <main+0xd0>)
 8001952:	4818      	ldr	r0, [pc, #96]	; (80019b4 <main+0xcc>)
 8001954:	f002 f8e0 	bl	8003b18 <HAL_ADC_Start_DMA>
	arm_biquad_cascade_df1_init_f32(&iir_settings, NUM_IIR_STAGES, &iir_taps[0], &iir_state[0]);
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <main+0xd4>)
 800195a:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <main+0xd8>)
 800195c:	2101      	movs	r1, #1
 800195e:	4819      	ldr	r0, [pc, #100]	; (80019c4 <main+0xdc>)
 8001960:	f007 fd22 	bl	80093a8 <arm_biquad_cascade_df1_init_f32>


	oled_init();
 8001964:	f000 fd68 	bl	8002438 <oled_init>
	init_tunings();
 8001968:	f7ff fbf4 	bl	8001154 <init_tunings>

	MPU6050_Init(&hi2c1);
 800196c:	4816      	ldr	r0, [pc, #88]	; (80019c8 <main+0xe0>)
 800196e:	f7ff f96b 	bl	8000c48 <MPU6050_Init>
	myMpuConfig.Accel_Full_Scale = AFS_SEL_2g;
 8001972:	2300      	movs	r3, #0
 8001974:	70bb      	strb	r3, [r7, #2]
    myMpuConfig.CONFIG_DLPF = Internal_8MHz;
 8001976:	2300      	movs	r3, #0
 8001978:	70fb      	strb	r3, [r7, #3]
    myMpuConfig.ClockSource = DLPF_184A_188G_Hz;
 800197a:	2301      	movs	r3, #1
 800197c:	703b      	strb	r3, [r7, #0]
    myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 800197e:	2301      	movs	r3, #1
 8001980:	707b      	strb	r3, [r7, #1]
    myMpuConfig.Sleep_Mode_Bit = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	713b      	strb	r3, [r7, #4]
    MPU6050_Config(&myMpuConfig);
 8001986:	463b      	mov	r3, r7
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff f9b1 	bl	8000cf0 <MPU6050_Config>

	HAL_TIM_Base_Start_IT(&htim16);
 800198e:	480f      	ldr	r0, [pc, #60]	; (80019cc <main+0xe4>)
 8001990:	f006 f850 	bl	8007a34 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001994:	480e      	ldr	r0, [pc, #56]	; (80019d0 <main+0xe8>)
 8001996:	f006 f84d 	bl	8007a34 <HAL_TIM_Base_Start_IT>


	state = state_get_pitch;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <main+0xec>)
 800199c:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <main+0xf0>)
 800199e:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		state();
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <main+0xec>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4798      	blx	r3
 80019a6:	e7fb      	b.n	80019a0 <main+0xb8>
 80019a8:	200038d4 	.word	0x200038d4
 80019ac:	20003920 	.word	0x20003920
 80019b0:	200027e4 	.word	0x200027e4
 80019b4:	20002818 	.word	0x20002818
 80019b8:	2000396c 	.word	0x2000396c
 80019bc:	20004a1c 	.word	0x20004a1c
 80019c0:	20000004 	.word	0x20000004
 80019c4:	200049b8 	.word	0x200049b8
 80019c8:	200026d8 	.word	0x200026d8
 80019cc:	200049c4 	.word	0x200049c4
 80019d0:	2000496c 	.word	0x2000496c
 80019d4:	20002798 	.word	0x20002798
 80019d8:	08001835 	.word	0x08001835

080019dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b096      	sub	sp, #88	; 0x58
 80019e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	2244      	movs	r2, #68	; 0x44
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f007 fe36 	bl	800965c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f0:	463b      	mov	r3, r7
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a02:	f004 fe15 	bl	8006630 <HAL_PWREx_ControlVoltageScaling>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a0c:	f000 fb1e 	bl	800204c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a10:	2301      	movs	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001a22:	2306      	movs	r3, #6
 8001a24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001a26:	2350      	movs	r3, #80	; 0x50
 8001a28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001a32:	2304      	movs	r3, #4
 8001a34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f004 fe4e 	bl	80066dc <HAL_RCC_OscConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a46:	f000 fb01 	bl	800204c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a5e:	463b      	mov	r3, r7
 8001a60:	2104      	movs	r1, #4
 8001a62:	4618      	mov	r0, r3
 8001a64:	f005 fa4c 	bl	8006f00 <HAL_RCC_ClockConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a6e:	f000 faed 	bl	800204c <Error_Handler>
  }
}
 8001a72:	bf00      	nop
 8001a74:	3758      	adds	r7, #88	; 0x58
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a82:	463b      	mov	r3, r7
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
 8001a90:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001a94:	4a2a      	ldr	r2, [pc, #168]	; (8001b40 <MX_ADC1_Init+0xc4>)
 8001a96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a98:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a9e:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aa4:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ab0:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001ac2:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001ad2:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001ada:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001af6:	4811      	ldr	r0, [pc, #68]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001af8:	f001 fec6 	bl	8003888 <HAL_ADC_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001b02:	f000 faa3 	bl	800204c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_ADC1_Init+0xc8>)
 8001b08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b0a:	2306      	movs	r3, #6
 8001b0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b12:	237f      	movs	r3, #127	; 0x7f
 8001b14:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b16:	2304      	movs	r3, #4
 8001b18:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b1e:	463b      	mov	r3, r7
 8001b20:	4619      	mov	r1, r3
 8001b22:	4806      	ldr	r0, [pc, #24]	; (8001b3c <MX_ADC1_Init+0xc0>)
 8001b24:	f002 f886 	bl	8003c34 <HAL_ADC_ConfigChannel>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001b2e:	f000 fa8d 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20002818 	.word	0x20002818
 8001b40:	50040000 	.word	0x50040000
 8001b44:	21800100 	.word	0x21800100

08001b48 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2224      	movs	r2, #36	; 0x24
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f007 fd81 	bl	800965c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <MX_DAC1_Init+0x5c>)
 8001b5c:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <MX_DAC1_Init+0x60>)
 8001b5e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001b60:	4810      	ldr	r0, [pc, #64]	; (8001ba4 <MX_DAC1_Init+0x5c>)
 8001b62:	f002 ff5e 	bl	8004a22 <HAL_DAC_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001b6c:	f000 fa6e 	bl	800204c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	2200      	movs	r2, #0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <MX_DAC1_Init+0x5c>)
 8001b8c:	f002 ff6b 	bl	8004a66 <HAL_DAC_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001b96:	f000 fa59 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200026c4 	.word	0x200026c4
 8001ba8:	40007400 	.word	0x40007400

08001bac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <MX_I2C1_Init+0x74>)
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <MX_I2C1_Init+0x78>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <MX_I2C1_Init+0x74>)
 8001bb8:	4a1b      	ldr	r2, [pc, #108]	; (8001c28 <MX_I2C1_Init+0x7c>)
 8001bba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_I2C1_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <MX_I2C1_Init+0x74>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_I2C1_Init+0x74>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <MX_I2C1_Init+0x74>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <MX_I2C1_Init+0x74>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_I2C1_Init+0x74>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <MX_I2C1_Init+0x74>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001be6:	480e      	ldr	r0, [pc, #56]	; (8001c20 <MX_I2C1_Init+0x74>)
 8001be8:	f003 fbfc 	bl	80053e4 <HAL_I2C_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bf2:	f000 fa2b 	bl	800204c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4809      	ldr	r0, [pc, #36]	; (8001c20 <MX_I2C1_Init+0x74>)
 8001bfa:	f004 fa4d 	bl	8006098 <HAL_I2CEx_ConfigAnalogFilter>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c04:	f000 fa22 	bl	800204c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_I2C1_Init+0x74>)
 8001c0c:	f004 fa8f 	bl	800612e <HAL_I2CEx_ConfigDigitalFilter>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c16:	f000 fa19 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200026d8 	.word	0x200026d8
 8001c24:	40005400 	.word	0x40005400
 8001c28:	00702991 	.word	0x00702991

08001c2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c32:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <MX_I2C2_Init+0x78>)
 8001c34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c38:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <MX_I2C2_Init+0x7c>)
 8001c3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c66:	480e      	ldr	r0, [pc, #56]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c68:	f003 fbbc 	bl	80053e4 <HAL_I2C_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c72:	f000 f9eb 	bl	800204c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c76:	2100      	movs	r1, #0
 8001c78:	4809      	ldr	r0, [pc, #36]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c7a:	f004 fa0d 	bl	8006098 <HAL_I2CEx_ConfigAnalogFilter>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001c84:	f000 f9e2 	bl	800204c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c8c:	f004 fa4f 	bl	800612e <HAL_I2CEx_ConfigDigitalFilter>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001c96:	f000 f9d9 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000272c 	.word	0x2000272c
 8001ca4:	40005800 	.word	0x40005800
 8001ca8:	10909cec 	.word	0x10909cec

08001cac <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <MX_OPAMP1_Init+0x40>)
 8001cb2:	4a0f      	ldr	r2, [pc, #60]	; (8001cf0 <MX_OPAMP1_Init+0x44>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_HIGH;
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <MX_OPAMP1_Init+0x40>)
 8001cb8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001cbc:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <MX_OPAMP1_Init+0x40>)
 8001cc0:	220c      	movs	r2, #12
 8001cc2:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MX_OPAMP1_Init+0x40>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	615a      	str	r2, [r3, #20]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <MX_OPAMP1_Init+0x40>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <MX_OPAMP1_Init+0x40>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_OPAMP1_Init+0x40>)
 8001cd8:	f004 fa76 	bl	80061c8 <HAL_OPAMP_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_OPAMP1_Init+0x3a>
  {
    Error_Handler();
 8001ce2:	f000 f9b3 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200027e4 	.word	0x200027e4
 8001cf0:	40007800 	.word	0x40007800

08001cf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b096      	sub	sp, #88	; 0x58
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	611a      	str	r2, [r3, #16]
 8001d16:	615a      	str	r2, [r3, #20]
 8001d18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	222c      	movs	r2, #44	; 0x2c
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f007 fc9b 	bl	800965c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d26:	4b38      	ldr	r3, [pc, #224]	; (8001e08 <MX_TIM1_Init+0x114>)
 8001d28:	4a38      	ldr	r2, [pc, #224]	; (8001e0c <MX_TIM1_Init+0x118>)
 8001d2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2352;
 8001d2c:	4b36      	ldr	r3, [pc, #216]	; (8001e08 <MX_TIM1_Init+0x114>)
 8001d2e:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001d32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d34:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <MX_TIM1_Init+0x114>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001d3a:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <MX_TIM1_Init+0x114>)
 8001d3c:	2264      	movs	r2, #100	; 0x64
 8001d3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d40:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <MX_TIM1_Init+0x114>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d46:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <MX_TIM1_Init+0x114>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d4c:	4b2e      	ldr	r3, [pc, #184]	; (8001e08 <MX_TIM1_Init+0x114>)
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d52:	482d      	ldr	r0, [pc, #180]	; (8001e08 <MX_TIM1_Init+0x114>)
 8001d54:	f005 ffa0 	bl	8007c98 <HAL_TIM_PWM_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001d5e:	f000 f975 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d72:	4619      	mov	r1, r3
 8001d74:	4824      	ldr	r0, [pc, #144]	; (8001e08 <MX_TIM1_Init+0x114>)
 8001d76:	f006 ff8d 	bl	8008c94 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d80:	f000 f964 	bl	800204c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d84:	2360      	movs	r3, #96	; 0x60
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 8001d88:	2332      	movs	r3, #50	; 0x32
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001da0:	220c      	movs	r2, #12
 8001da2:	4619      	mov	r1, r3
 8001da4:	4818      	ldr	r0, [pc, #96]	; (8001e08 <MX_TIM1_Init+0x114>)
 8001da6:	f006 f9cd 	bl	8008144 <HAL_TIM_PWM_ConfigChannel>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001db0:	f000 f94c 	bl	800204c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dcc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001dd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	4619      	mov	r1, r3
 8001de8:	4807      	ldr	r0, [pc, #28]	; (8001e08 <MX_TIM1_Init+0x114>)
 8001dea:	f006 ffb9 	bl	8008d60 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001df4:	f000 f92a 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <MX_TIM1_Init+0x114>)
 8001dfa:	f000 fde1 	bl	80029c0 <HAL_TIM_MspPostInit>

}
 8001dfe:	bf00      	nop
 8001e00:	3758      	adds	r7, #88	; 0x58
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20003920 	.word	0x20003920
 8001e0c:	40012c00 	.word	0x40012c00

08001e10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <MX_TIM2_Init+0x98>)
 8001e30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000 - 1;
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <MX_TIM2_Init+0x98>)
 8001e38:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001e3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <MX_TIM2_Init+0x98>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000 - 1;
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <MX_TIM2_Init+0x98>)
 8001e46:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <MX_TIM2_Init+0x98>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <MX_TIM2_Init+0x98>)
 8001e54:	2280      	movs	r2, #128	; 0x80
 8001e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e58:	4813      	ldr	r0, [pc, #76]	; (8001ea8 <MX_TIM2_Init+0x98>)
 8001e5a:	f005 fd47 	bl	80078ec <HAL_TIM_Base_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001e64:	f000 f8f2 	bl	800204c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	4619      	mov	r1, r3
 8001e74:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <MX_TIM2_Init+0x98>)
 8001e76:	f006 fa79 	bl	800836c <HAL_TIM_ConfigClockSource>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001e80:	f000 f8e4 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_TIM2_Init+0x98>)
 8001e92:	f006 feff 	bl	8008c94 <HAL_TIMEx_MasterConfigSynchronization>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001e9c:	f000 f8d6 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	2000496c 	.word	0x2000496c

08001eac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <MX_TIM6_Init+0x64>)
 8001ebe:	4a15      	ldr	r2, [pc, #84]	; (8001f14 <MX_TIM6_Init+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <MX_TIM6_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <MX_TIM6_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000 - 1;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <MX_TIM6_Init+0x64>)
 8001ed0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001ed4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <MX_TIM6_Init+0x64>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <MX_TIM6_Init+0x64>)
 8001ede:	f005 fd05 	bl	80078ec <HAL_TIM_Base_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ee8:	f000 f8b0 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001eec:	2320      	movs	r3, #32
 8001eee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <MX_TIM6_Init+0x64>)
 8001efa:	f006 fecb 	bl	8008c94 <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001f04:	f000 f8a2 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200038d4 	.word	0x200038d4
 8001f14:	40001000 	.word	0x40001000

08001f18 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <MX_TIM16_Init+0x48>)
 8001f1e:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <MX_TIM16_Init+0x4c>)
 8001f20:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 20000;
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_TIM16_Init+0x48>)
 8001f24:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001f28:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <MX_TIM16_Init+0x48>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4000 - 1;
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <MX_TIM16_Init+0x48>)
 8001f32:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001f36:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <MX_TIM16_Init+0x48>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <MX_TIM16_Init+0x48>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_TIM16_Init+0x48>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <MX_TIM16_Init+0x48>)
 8001f4c:	f005 fcce 	bl	80078ec <HAL_TIM_Base_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001f56:	f000 f879 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200049c4 	.word	0x200049c4
 8001f64:	40014400 	.word	0x40014400

08001f68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <MX_DMA_Init+0x48>)
 8001f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f72:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <MX_DMA_Init+0x48>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6493      	str	r3, [r2, #72]	; 0x48
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <MX_DMA_Init+0x48>)
 8001f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	200b      	movs	r0, #11
 8001f8c:	f002 fd13 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f90:	200b      	movs	r0, #11
 8001f92:	f002 fd2c 	bl	80049ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	200d      	movs	r0, #13
 8001f9c:	f002 fd0b 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001fa0:	200d      	movs	r0, #13
 8001fa2:	f002 fd24 	bl	80049ee <HAL_NVIC_EnableIRQ>

}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fca:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <MX_GPIO_Init+0x94>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	4a1e      	ldr	r2, [pc, #120]	; (8002048 <MX_GPIO_Init+0x94>)
 8001fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <MX_GPIO_Init+0x94>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	4b19      	ldr	r3, [pc, #100]	; (8002048 <MX_GPIO_Init+0x94>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4a18      	ldr	r2, [pc, #96]	; (8002048 <MX_GPIO_Init+0x94>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fee:	4b16      	ldr	r3, [pc, #88]	; (8002048 <MX_GPIO_Init+0x94>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	4b13      	ldr	r3, [pc, #76]	; (8002048 <MX_GPIO_Init+0x94>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <MX_GPIO_Init+0x94>)
 8002000:	f043 0302 	orr.w	r3, r3, #2
 8002004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <MX_GPIO_Init+0x94>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LED_BLUE_Pin, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f248 0102 	movw	r1, #32770	; 0x8002
 8002018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201c:	f003 f9b0 	bl	8005380 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 LED_BLUE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LED_BLUE_Pin;
 8002020:	f248 0302 	movw	r3, #32770	; 0x8002
 8002024:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	2301      	movs	r3, #1
 8002028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	4619      	mov	r1, r3
 8002038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203c:	f003 f826 	bl	800508c <HAL_GPIO_Init>

}
 8002040:	bf00      	nop
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000

0800204c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002050:	b672      	cpsid	i
}
 8002052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002054:	e7fe      	b.n	8002054 <Error_Handler+0x8>

08002056 <mpm_sum_f32>:
	printf("end\n");
}


void mpm_sum_f32(float32_t *pSrc, uint16_t scrLen, float32_t *pRes)
{
 8002056:	b480      	push	{r7}
 8002058:	b087      	sub	sp, #28
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	460b      	mov	r3, r1
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	817b      	strh	r3, [r7, #10]
	*pRes = 0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < scrLen; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	82fb      	strh	r3, [r7, #22]
 8002070:	e010      	b.n	8002094 <mpm_sum_f32+0x3e>
	{
		 *pRes += *pSrc;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	ed93 7a00 	vldr	s14, [r3]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	edd3 7a00 	vldr	s15, [r3]
 800207e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	edc3 7a00 	vstr	s15, [r3]
		 pSrc++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3304      	adds	r3, #4
 800208c:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < scrLen; i++)
 800208e:	8afb      	ldrh	r3, [r7, #22]
 8002090:	3301      	adds	r3, #1
 8002092:	82fb      	strh	r3, [r7, #22]
 8002094:	8afa      	ldrh	r2, [r7, #22]
 8002096:	897b      	ldrh	r3, [r7, #10]
 8002098:	429a      	cmp	r2, r3
 800209a:	d3ea      	bcc.n	8002072 <mpm_sum_f32+0x1c>
	}
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	0000      	movs	r0, r0
 80020ac:	0000      	movs	r0, r0
	...

080020b0 <mpm_find_peak_f32>:


void mpm_find_peak_f32(float32_t *pSrc, uint16_t *tau)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
	uint16_t flag = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	82fb      	strh	r3, [r7, #22]
	uint16_t valid_peak_flag = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	82bb      	strh	r3, [r7, #20]
	float32_t peak_value = 0;
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]

	for (uint16_t i = 0; i < BLOCK_SIZE; i++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	81fb      	strh	r3, [r7, #14]
 80020cc:	e038      	b.n	8002140 <mpm_find_peak_f32+0x90>
    {

       if (flag == 0 && *pSrc < 0)
 80020ce:	8afb      	ldrh	r3, [r7, #22]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d109      	bne.n	80020e8 <mpm_find_peak_f32+0x38>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e2:	d501      	bpl.n	80020e8 <mpm_find_peak_f32+0x38>
       {
           flag = 1;
 80020e4:	2301      	movs	r3, #1
 80020e6:	82fb      	strh	r3, [r7, #22]

       }
       if (flag == 1)
 80020e8:	8afb      	ldrh	r3, [r7, #22]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d122      	bne.n	8002134 <mpm_find_peak_f32+0x84>
       {
       		if (*pSrc > peak_value && *pSrc > PEAK_THRESHOLD)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80020f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	d515      	bpl.n	800212e <mpm_find_peak_f32+0x7e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fa1e 	bl	8000548 <__aeabi_f2d>
 800210c:	a312      	add	r3, pc, #72	; (adr r3, 8002158 <mpm_find_peak_f32+0xa8>)
 800210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002112:	f7fe fd01 	bl	8000b18 <__aeabi_dcmpgt>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <mpm_find_peak_f32+0x7e>
       		{
				peak_value = *pSrc;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	613b      	str	r3, [r7, #16]
              	*tau = i;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	89fa      	ldrh	r2, [r7, #14]
 8002126:	801a      	strh	r2, [r3, #0]
                valid_peak_flag = 1;
 8002128:	2301      	movs	r3, #1
 800212a:	82bb      	strh	r3, [r7, #20]
 800212c:	e002      	b.n	8002134 <mpm_find_peak_f32+0x84>

       		} else if (valid_peak_flag == 1)
 800212e:	8abb      	ldrh	r3, [r7, #20]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d00a      	beq.n	800214a <mpm_find_peak_f32+0x9a>
       		{
       			return;
       		}
       }
       pSrc++;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3304      	adds	r3, #4
 8002138:	607b      	str	r3, [r7, #4]
	for (uint16_t i = 0; i < BLOCK_SIZE; i++)
 800213a:	89fb      	ldrh	r3, [r7, #14]
 800213c:	3301      	adds	r3, #1
 800213e:	81fb      	strh	r3, [r7, #14]
 8002140:	89fb      	ldrh	r3, [r7, #14]
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002146:	d3c2      	bcc.n	80020ce <mpm_find_peak_f32+0x1e>
 8002148:	e000      	b.n	800214c <mpm_find_peak_f32+0x9c>
       			return;
 800214a:	bf00      	nop
    }
}
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	f3af 8000 	nop.w
 8002158:	cccccccd 	.word	0xcccccccd
 800215c:	3feccccc 	.word	0x3feccccc

08002160 <mpm_NSDF_f32>:


void mpm_NSDF_f32(float32_t *pSrc, float32_t **pDst)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	; 0x30
 8002164:	af02      	add	r7, sp, #8
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]

	float32_t *xcorr = &mpm_reserved_memory[1];
 800216a:	4b33      	ldr	r3, [pc, #204]	; (8002238 <mpm_NSDF_f32+0xd8>)
 800216c:	613b      	str	r3, [r7, #16]


	arm_correlate_f32(&pSrc[0], BLOCK_SIZE , &pSrc[0], BLOCK_SIZE, xcorr);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f006 fe85 	bl	8008e8c <arm_correlate_f32>


	float32_t *r = &xcorr[BLOCK_SIZE - 1];
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
	*pDst = r;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218e:	601a      	str	r2, [r3, #0]

	float32_t *xs = &mpm_reserved_memory[0];
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <mpm_NSDF_f32+0xdc>)
 8002192:	60fb      	str	r3, [r7, #12]
	float32_t *p_xs1 = &xs[0];
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	623b      	str	r3, [r7, #32]
	float32_t *p_xs2 = &xs[BLOCK_SIZE - 1];
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 800219e:	61fb      	str	r3, [r7, #28]
	float32_t xs1, xs2;

	arm_mult_f32(&pSrc[0], &pSrc[0],  &xs[0], BLOCK_SIZE);
 80021a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f007 f9d9 	bl	8009560 <arm_mult_f32>
	mpm_sum_f32(&xs[0], BLOCK_SIZE, &xs1);
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	461a      	mov	r2, r3
 80021b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7ff ff4c 	bl	8002056 <mpm_sum_f32>
	xs2 = xs1;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	61bb      	str	r3, [r7, #24]


	for (uint16_t tau = 0; tau < BLOCK_SIZE  ; tau++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	82fb      	strh	r3, [r7, #22]
 80021c6:	e02d      	b.n	8002224 <mpm_NSDF_f32+0xc4>
	{

		*r = 2 * (*r) / (xs1 + xs2);
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80021d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80021d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80021da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	edc3 7a00 	vstr	s15, [r3]

		xs1 = xs1 - (*p_xs1);
 80021e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f6:	edc7 7a02 	vstr	s15, [r7, #8]
		xs2 = xs2 - (*p_xs2);
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	edd3 7a00 	vldr	s15, [r3]
 8002200:	ed97 7a06 	vldr	s14, [r7, #24]
 8002204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002208:	edc7 7a06 	vstr	s15, [r7, #24]

		r++;
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	3304      	adds	r3, #4
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
		p_xs1++;
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	3304      	adds	r3, #4
 8002216:	623b      	str	r3, [r7, #32]
		p_xs2--;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	3b04      	subs	r3, #4
 800221c:	61fb      	str	r3, [r7, #28]
	for (uint16_t tau = 0; tau < BLOCK_SIZE  ; tau++)
 800221e:	8afb      	ldrh	r3, [r7, #22]
 8002220:	3301      	adds	r3, #1
 8002222:	82fb      	strh	r3, [r7, #22]
 8002224:	8afb      	ldrh	r3, [r7, #22]
 8002226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222a:	d3cd      	bcc.n	80021c8 <mpm_NSDF_f32+0x68>
	}
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3728      	adds	r7, #40	; 0x28
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200002b4 	.word	0x200002b4
 800223c:	200002b0 	.word	0x200002b0

08002240 <mpm_parabolic_interpolation_f32>:


void mpm_parabolic_interpolation_f32(uint16_t x_pos, float32_t a, float32_t b, float32_t c, float32_t *delta_tau)
{
 8002240:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002244:	b088      	sub	sp, #32
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	ed87 0a04 	vstr	s0, [r7, #16]
 800224e:	edc7 0a03 	vstr	s1, [r7, #12]
 8002252:	ed87 1a02 	vstr	s2, [r7, #8]
 8002256:	6079      	str	r1, [r7, #4]
 8002258:	82fb      	strh	r3, [r7, #22]
	a = 20*log10(a);
 800225a:	6938      	ldr	r0, [r7, #16]
 800225c:	f7fe f974 	bl	8000548 <__aeabi_f2d>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	ec43 2b10 	vmov	d0, r2, r3
 8002268:	f00a f99e 	bl	800c5a8 <log10>
 800226c:	ec51 0b10 	vmov	r0, r1, d0
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <mpm_parabolic_interpolation_f32+0x144>)
 8002276:	f7fe f9bf 	bl	80005f8 <__aeabi_dmul>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4610      	mov	r0, r2
 8002280:	4619      	mov	r1, r3
 8002282:	f7fe fc91 	bl	8000ba8 <__aeabi_d2f>
 8002286:	4603      	mov	r3, r0
 8002288:	613b      	str	r3, [r7, #16]
	b = 20*log10(b);
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f7fe f95c 	bl	8000548 <__aeabi_f2d>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	ec43 2b10 	vmov	d0, r2, r3
 8002298:	f00a f986 	bl	800c5a8 <log10>
 800229c:	ec51 0b10 	vmov	r0, r1, d0
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	4b37      	ldr	r3, [pc, #220]	; (8002384 <mpm_parabolic_interpolation_f32+0x144>)
 80022a6:	f7fe f9a7 	bl	80005f8 <__aeabi_dmul>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4610      	mov	r0, r2
 80022b0:	4619      	mov	r1, r3
 80022b2:	f7fe fc79 	bl	8000ba8 <__aeabi_d2f>
 80022b6:	4603      	mov	r3, r0
 80022b8:	60fb      	str	r3, [r7, #12]
	c = 20*log10(c);
 80022ba:	68b8      	ldr	r0, [r7, #8]
 80022bc:	f7fe f944 	bl	8000548 <__aeabi_f2d>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	ec43 2b10 	vmov	d0, r2, r3
 80022c8:	f00a f96e 	bl	800c5a8 <log10>
 80022cc:	ec51 0b10 	vmov	r0, r1, d0
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <mpm_parabolic_interpolation_f32+0x144>)
 80022d6:	f7fe f98f 	bl	80005f8 <__aeabi_dmul>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	f7fe fc61 	bl	8000ba8 <__aeabi_d2f>
 80022e6:	4603      	mov	r3, r0
 80022e8:	60bb      	str	r3, [r7, #8]

	float32_t delta_pos = 0.5 * (a - c) / (1 - 2.0*b + c);
 80022ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80022ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80022f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f6:	ee17 0a90 	vmov	r0, s15
 80022fa:	f7fe f925 	bl	8000548 <__aeabi_f2d>
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	4b21      	ldr	r3, [pc, #132]	; (8002388 <mpm_parabolic_interpolation_f32+0x148>)
 8002304:	f7fe f978 	bl	80005f8 <__aeabi_dmul>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4614      	mov	r4, r2
 800230e:	461d      	mov	r5, r3
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f7fe f919 	bl	8000548 <__aeabi_f2d>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	f7fd ffb7 	bl	800028c <__adddf3>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	f04f 0000 	mov.w	r0, #0
 8002326:	4919      	ldr	r1, [pc, #100]	; (800238c <mpm_parabolic_interpolation_f32+0x14c>)
 8002328:	f7fd ffae 	bl	8000288 <__aeabi_dsub>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4690      	mov	r8, r2
 8002332:	4699      	mov	r9, r3
 8002334:	68b8      	ldr	r0, [r7, #8]
 8002336:	f7fe f907 	bl	8000548 <__aeabi_f2d>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4640      	mov	r0, r8
 8002340:	4649      	mov	r1, r9
 8002342:	f7fd ffa3 	bl	800028c <__adddf3>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4620      	mov	r0, r4
 800234c:	4629      	mov	r1, r5
 800234e:	f7fe fa7d 	bl	800084c <__aeabi_ddiv>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	f7fe fc25 	bl	8000ba8 <__aeabi_d2f>
 800235e:	4603      	mov	r3, r0
 8002360:	61fb      	str	r3, [r7, #28]

	*delta_tau = x_pos + delta_pos;
 8002362:	8afb      	ldrh	r3, [r7, #22]
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800236c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	edc3 7a00 	vstr	s15, [r3]
}
 800237a:	bf00      	nop
 800237c:	3720      	adds	r7, #32
 800237e:	46bd      	mov	sp, r7
 8002380:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002384:	40340000 	.word	0x40340000
 8002388:	3fe00000 	.word	0x3fe00000
 800238c:	3ff00000 	.word	0x3ff00000

08002390 <mpm_mcleod_pitch_method_f32>:


void mpm_mcleod_pitch_method_f32(float32_t *pData, float32_t *pitch_estimate)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]


	float32_t *p_ncorr;

	mpm_NSDF_f32(pData, &p_ncorr);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff fedd 	bl	8002160 <mpm_NSDF_f32>
	uint16_t tau = 1;
 80023a6:	2301      	movs	r3, #1
 80023a8:	827b      	strh	r3, [r7, #18]
	mpm_find_peak_f32(p_ncorr, &tau);
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f107 0212 	add.w	r2, r7, #18
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fe7c 	bl	80020b0 <mpm_find_peak_f32>



   if (tau > BLOCK_SIZE - 2)
 80023b8:	8a7b      	ldrh	r3, [r7, #18]
 80023ba:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80023be:	4293      	cmp	r3, r2
 80023c0:	d902      	bls.n	80023c8 <mpm_mcleod_pitch_method_f32+0x38>
   {
   	tau = BLOCK_SIZE - 2;
 80023c2:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80023c6:	827b      	strh	r3, [r7, #18]
   }

	uint16_t xp = tau;
 80023c8:	8a7b      	ldrh	r3, [r7, #18]
 80023ca:	84fb      	strh	r3, [r7, #38]	; 0x26
	float32_t a = p_ncorr[tau - 1];
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	8a7b      	ldrh	r3, [r7, #18]
 80023d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023d4:	3b01      	subs	r3, #1
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	623b      	str	r3, [r7, #32]
	float32_t b = p_ncorr[tau];
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	8a7b      	ldrh	r3, [r7, #18]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	61fb      	str	r3, [r7, #28]
	float32_t c = p_ncorr[tau + 1];
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	8a7b      	ldrh	r3, [r7, #18]
 80023ee:	3301      	adds	r3, #1
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	61bb      	str	r3, [r7, #24]

	float32_t delta_tau = 0;
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
	mpm_parabolic_interpolation_f32(xp, a, b, c, &delta_tau);
 80023fe:	f107 020c 	add.w	r2, r7, #12
 8002402:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002404:	4611      	mov	r1, r2
 8002406:	ed97 1a06 	vldr	s2, [r7, #24]
 800240a:	edd7 0a07 	vldr	s1, [r7, #28]
 800240e:	ed97 0a08 	vldr	s0, [r7, #32]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ff14 	bl	8002240 <mpm_parabolic_interpolation_f32>


	*pitch_estimate = FS / delta_tau;
 8002418:	ed97 7a03 	vldr	s14, [r7, #12]
 800241c:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002434 <mpm_mcleod_pitch_method_f32+0xa4>
 8002420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	edc3 7a00 	vstr	s15, [r3]
}
 800242a:	bf00      	nop
 800242c:	3728      	adds	r7, #40	; 0x28
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	471c4000 	.word	0x471c4000

08002438 <oled_init>:
#define RADIUS 30



void oled_init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	ssd1306_Init1();
 800243c:	f000 fece 	bl	80031dc <ssd1306_Init1>
	ssd1306_Fill(White);
 8002440:	2001      	movs	r0, #1
 8002442:	f000 fcad 	bl	8002da0 <ssd1306_Fill>
	ssd1306_DrawCircle(SCREEN_CENTRE_X, SCREEN_CENTRE_Y, RADIUS, Black);
 8002446:	2300      	movs	r3, #0
 8002448:	221e      	movs	r2, #30
 800244a:	2120      	movs	r1, #32
 800244c:	2040      	movs	r0, #64	; 0x40
 800244e:	f000 fe0d 	bl	800306c <ssd1306_DrawCircle>
		ssd1306_UpdateScreen();
	}

	HAL_Delay(1000);
 	 */
	ssd1306_Fill(White);
 8002452:	2001      	movs	r0, #1
 8002454:	f000 fca4 	bl	8002da0 <ssd1306_Fill>
	ssd1306_DrawCircle(SCREEN_CENTRE_X, SCREEN_CENTRE_Y, RADIUS, Black);
 8002458:	2300      	movs	r3, #0
 800245a:	221e      	movs	r2, #30
 800245c:	2120      	movs	r1, #32
 800245e:	2040      	movs	r0, #64	; 0x40
 8002460:	f000 fe04 	bl	800306c <ssd1306_DrawCircle>
	ssd1306_UpdateScreen();
 8002464:	f000 fcc0 	bl	8002de8 <ssd1306_UpdateScreen>
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}

0800246c <oled_print_string>:

void oled_print_string(char *string)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	 ssd1306_SetCursor(10, 24);
 8002474:	2118      	movs	r1, #24
 8002476:	200a      	movs	r0, #10
 8002478:	f000 fde0 	bl	800303c <ssd1306_SetCursor>
	 ssd1306_WriteString(string, FONT_MED, Black);
 800247c:	4a05      	ldr	r2, [pc, #20]	; (8002494 <oled_print_string+0x28>)
 800247e:	2300      	movs	r3, #0
 8002480:	ca06      	ldmia	r2, {r1, r2}
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fdb4 	bl	8002ff0 <ssd1306_WriteString>
	 ssd1306_UpdateScreen();
 8002488:	f000 fcae 	bl	8002de8 <ssd1306_UpdateScreen>

}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	2000001c 	.word	0x2000001c

08002498 <oled_print_f32>:


void oled_print_f32(float *var)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	char var_string[10] = {0};
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	809a      	strh	r2, [r3, #4]
	sprintf(var_string,"%.1f", *var);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe f848 	bl	8000548 <__aeabi_f2d>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	f107 000c 	add.w	r0, r7, #12
 80024c0:	4909      	ldr	r1, [pc, #36]	; (80024e8 <oled_print_f32+0x50>)
 80024c2:	f007 fd3d 	bl	8009f40 <siprintf>

	ssd1306_WriteString(var_string, FONT_LARGE, Black);
 80024c6:	4a09      	ldr	r2, [pc, #36]	; (80024ec <oled_print_f32+0x54>)
 80024c8:	f107 000c 	add.w	r0, r7, #12
 80024cc:	2300      	movs	r3, #0
 80024ce:	ca06      	ldmia	r2, {r1, r2}
 80024d0:	f000 fd8e 	bl	8002ff0 <ssd1306_WriteString>
	ssd1306_SetCursor(25, 24);
 80024d4:	2118      	movs	r1, #24
 80024d6:	2019      	movs	r0, #25
 80024d8:	f000 fdb0 	bl	800303c <ssd1306_SetCursor>
	ssd1306_UpdateScreen();
 80024dc:	f000 fc84 	bl	8002de8 <ssd1306_UpdateScreen>
}
 80024e0:	bf00      	nop
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	0800d1b8 	.word	0x0800d1b8
 80024ec:	20000024 	.word	0x20000024

080024f0 <oled_clear_screen>:
	ssd1306_UpdateScreen();
}


void oled_clear_screen(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	ssd1306_Fill(White);
 80024f4:	2001      	movs	r0, #1
 80024f6:	f000 fc53 	bl	8002da0 <ssd1306_Fill>
	ssd1306_DrawCircle(SCREEN_CENTRE_X, SCREEN_CENTRE_Y, RADIUS, Black);
 80024fa:	2300      	movs	r3, #0
 80024fc:	221e      	movs	r2, #30
 80024fe:	2120      	movs	r1, #32
 8002500:	2040      	movs	r0, #64	; 0x40
 8002502:	f000 fdb3 	bl	800306c <ssd1306_DrawCircle>
	ssd1306_UpdateScreen();
 8002506:	f000 fc6f 	bl	8002de8 <ssd1306_UpdateScreen>

}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_MspInit+0x44>)
 8002518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251a:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <HAL_MspInit+0x44>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6613      	str	r3, [r2, #96]	; 0x60
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <HAL_MspInit+0x44>)
 8002524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_MspInit+0x44>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	4a08      	ldr	r2, [pc, #32]	; (8002554 <HAL_MspInit+0x44>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002538:	6593      	str	r3, [r2, #88]	; 0x58
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_MspInit+0x44>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000

08002558 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b09a      	sub	sp, #104	; 0x68
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002560:	f107 030c 	add.w	r3, r7, #12
 8002564:	225c      	movs	r2, #92	; 0x5c
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f007 f877 	bl	800965c <memset>
  if(hadc->Instance==ADC1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a2e      	ldr	r2, [pc, #184]	; (800262c <HAL_ADC_MspInit+0xd4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d155      	bne.n	8002624 <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002578:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800257c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800257e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002582:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002584:	2303      	movs	r3, #3
 8002586:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 6;
 8002588:	2306      	movs	r3, #6
 800258a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 43;
 800258c:	232b      	movs	r3, #43	; 0x2b
 800258e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002590:	2307      	movs	r3, #7
 8002592:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002594:	2302      	movs	r3, #2
 8002596:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8002598:	2304      	movs	r3, #4
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800259c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025a2:	f107 030c 	add.w	r3, r7, #12
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 fe96 	bl	80072d8 <HAL_RCCEx_PeriphCLKConfig>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 80025b2:	f7ff fd4b 	bl	800204c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <HAL_ADC_MspInit+0xd8>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <HAL_ADC_MspInit+0xd8>)
 80025bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_ADC_MspInit+0xd8>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80025ce:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_ADC_MspInit+0xdc>)
 80025d0:	4a19      	ldr	r2, [pc, #100]	; (8002638 <HAL_ADC_MspInit+0xe0>)
 80025d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80025d4:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_ADC_MspInit+0xdc>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_ADC_MspInit+0xdc>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <HAL_ADC_MspInit+0xdc>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <HAL_ADC_MspInit+0xdc>)
 80025e8:	2280      	movs	r2, #128	; 0x80
 80025ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_ADC_MspInit+0xdc>)
 80025ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_ADC_MspInit+0xdc>)
 80025f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <HAL_ADC_MspInit+0xdc>)
 80025fe:	2220      	movs	r2, #32
 8002600:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_ADC_MspInit+0xdc>)
 8002604:	2200      	movs	r2, #0
 8002606:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002608:	480a      	ldr	r0, [pc, #40]	; (8002634 <HAL_ADC_MspInit+0xdc>)
 800260a:	f002 fb47 	bl	8004c9c <HAL_DMA_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8002614:	f7ff fd1a 	bl	800204c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a06      	ldr	r2, [pc, #24]	; (8002634 <HAL_ADC_MspInit+0xdc>)
 800261c:	64da      	str	r2, [r3, #76]	; 0x4c
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <HAL_ADC_MspInit+0xdc>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002624:	bf00      	nop
 8002626:	3768      	adds	r7, #104	; 0x68
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	50040000 	.word	0x50040000
 8002630:	40021000 	.word	0x40021000
 8002634:	2000288c 	.word	0x2000288c
 8002638:	40020008 	.word	0x40020008

0800263c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	; 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a2b      	ldr	r2, [pc, #172]	; (8002708 <HAL_DAC_MspInit+0xcc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d14f      	bne.n	80026fe <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800265e:	4b2b      	ldr	r3, [pc, #172]	; (800270c <HAL_DAC_MspInit+0xd0>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	4a2a      	ldr	r2, [pc, #168]	; (800270c <HAL_DAC_MspInit+0xd0>)
 8002664:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
 800266a:	4b28      	ldr	r3, [pc, #160]	; (800270c <HAL_DAC_MspInit+0xd0>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	4b25      	ldr	r3, [pc, #148]	; (800270c <HAL_DAC_MspInit+0xd0>)
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	4a24      	ldr	r2, [pc, #144]	; (800270c <HAL_DAC_MspInit+0xd0>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002682:	4b22      	ldr	r3, [pc, #136]	; (800270c <HAL_DAC_MspInit+0xd0>)
 8002684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800268e:	2310      	movs	r3, #16
 8002690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002692:	2303      	movs	r3, #3
 8002694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026a4:	f002 fcf2 	bl	800508c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80026a8:	4b19      	ldr	r3, [pc, #100]	; (8002710 <HAL_DAC_MspInit+0xd4>)
 80026aa:	4a1a      	ldr	r2, [pc, #104]	; (8002714 <HAL_DAC_MspInit+0xd8>)
 80026ac:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80026ae:	4b18      	ldr	r3, [pc, #96]	; (8002710 <HAL_DAC_MspInit+0xd4>)
 80026b0:	2206      	movs	r2, #6
 80026b2:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_DAC_MspInit+0xd4>)
 80026b6:	2210      	movs	r2, #16
 80026b8:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <HAL_DAC_MspInit+0xd4>)
 80026bc:	2200      	movs	r2, #0
 80026be:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_DAC_MspInit+0xd4>)
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026c6:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_DAC_MspInit+0xd4>)
 80026c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026cc:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <HAL_DAC_MspInit+0xd4>)
 80026d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <HAL_DAC_MspInit+0xd4>)
 80026d8:	2220      	movs	r2, #32
 80026da:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <HAL_DAC_MspInit+0xd4>)
 80026de:	2200      	movs	r2, #0
 80026e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80026e2:	480b      	ldr	r0, [pc, #44]	; (8002710 <HAL_DAC_MspInit+0xd4>)
 80026e4:	f002 fada 	bl	8004c9c <HAL_DMA_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80026ee:	f7ff fcad 	bl	800204c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a06      	ldr	r2, [pc, #24]	; (8002710 <HAL_DAC_MspInit+0xd4>)
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	4a05      	ldr	r2, [pc, #20]	; (8002710 <HAL_DAC_MspInit+0xd4>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80026fe:	bf00      	nop
 8002700:	3728      	adds	r7, #40	; 0x28
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40007400 	.word	0x40007400
 800270c:	40021000 	.word	0x40021000
 8002710:	2000279c 	.word	0x2000279c
 8002714:	40020030 	.word	0x40020030

08002718 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b0a2      	sub	sp, #136	; 0x88
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002730:	f107 0318 	add.w	r3, r7, #24
 8002734:	225c      	movs	r2, #92	; 0x5c
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f006 ff8f 	bl	800965c <memset>
  if(hi2c->Instance==I2C1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a3f      	ldr	r2, [pc, #252]	; (8002840 <HAL_I2C_MspInit+0x128>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d138      	bne.n	80027ba <HAL_I2C_MspInit+0xa2>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002748:	2340      	movs	r3, #64	; 0x40
 800274a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800274c:	2300      	movs	r3, #0
 800274e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002750:	f107 0318 	add.w	r3, r7, #24
 8002754:	4618      	mov	r0, r3
 8002756:	f004 fdbf 	bl	80072d8 <HAL_RCCEx_PeriphCLKConfig>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002760:	f7ff fc74 	bl	800204c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002764:	4b37      	ldr	r3, [pc, #220]	; (8002844 <HAL_I2C_MspInit+0x12c>)
 8002766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002768:	4a36      	ldr	r2, [pc, #216]	; (8002844 <HAL_I2C_MspInit+0x12c>)
 800276a:	f043 0302 	orr.w	r3, r3, #2
 800276e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002770:	4b34      	ldr	r3, [pc, #208]	; (8002844 <HAL_I2C_MspInit+0x12c>)
 8002772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800277c:	23c0      	movs	r3, #192	; 0xc0
 800277e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002780:	2312      	movs	r3, #18
 8002782:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800278e:	2304      	movs	r3, #4
 8002790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002794:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002798:	4619      	mov	r1, r3
 800279a:	482b      	ldr	r0, [pc, #172]	; (8002848 <HAL_I2C_MspInit+0x130>)
 800279c:	f002 fc76 	bl	800508c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027a0:	4b28      	ldr	r3, [pc, #160]	; (8002844 <HAL_I2C_MspInit+0x12c>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	4a27      	ldr	r2, [pc, #156]	; (8002844 <HAL_I2C_MspInit+0x12c>)
 80027a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027aa:	6593      	str	r3, [r2, #88]	; 0x58
 80027ac:	4b25      	ldr	r3, [pc, #148]	; (8002844 <HAL_I2C_MspInit+0x12c>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80027b8:	e03d      	b.n	8002836 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a23      	ldr	r2, [pc, #140]	; (800284c <HAL_I2C_MspInit+0x134>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d138      	bne.n	8002836 <HAL_I2C_MspInit+0x11e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80027c8:	2300      	movs	r3, #0
 80027ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027cc:	f107 0318 	add.w	r3, r7, #24
 80027d0:	4618      	mov	r0, r3
 80027d2:	f004 fd81 	bl	80072d8 <HAL_RCCEx_PeriphCLKConfig>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_I2C_MspInit+0xc8>
      Error_Handler();
 80027dc:	f7ff fc36 	bl	800204c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e0:	4b18      	ldr	r3, [pc, #96]	; (8002844 <HAL_I2C_MspInit+0x12c>)
 80027e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e4:	4a17      	ldr	r2, [pc, #92]	; (8002844 <HAL_I2C_MspInit+0x12c>)
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <HAL_I2C_MspInit+0x12c>)
 80027ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027fc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027fe:	2312      	movs	r3, #18
 8002800:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800280c:	2304      	movs	r3, #4
 800280e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002812:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002816:	4619      	mov	r1, r3
 8002818:	480b      	ldr	r0, [pc, #44]	; (8002848 <HAL_I2C_MspInit+0x130>)
 800281a:	f002 fc37 	bl	800508c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_I2C_MspInit+0x12c>)
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	4a08      	ldr	r2, [pc, #32]	; (8002844 <HAL_I2C_MspInit+0x12c>)
 8002824:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002828:	6593      	str	r3, [r2, #88]	; 0x58
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_I2C_MspInit+0x12c>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
}
 8002836:	bf00      	nop
 8002838:	3788      	adds	r7, #136	; 0x88
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40005400 	.word	0x40005400
 8002844:	40021000 	.word	0x40021000
 8002848:	48000400 	.word	0x48000400
 800284c:	40005800 	.word	0x40005800

08002850 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a15      	ldr	r2, [pc, #84]	; (80028c4 <HAL_OPAMP_MspInit+0x74>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d124      	bne.n	80028bc <HAL_OPAMP_MspInit+0x6c>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <HAL_OPAMP_MspInit+0x78>)
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <HAL_OPAMP_MspInit+0x78>)
 8002878:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800287c:	6593      	str	r3, [r2, #88]	; 0x58
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_OPAMP_MspInit+0x78>)
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288a:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_OPAMP_MspInit+0x78>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <HAL_OPAMP_MspInit+0x78>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002896:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <HAL_OPAMP_MspInit+0x78>)
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80028a2:	2309      	movs	r3, #9
 80028a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028a6:	2303      	movs	r3, #3
 80028a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	4619      	mov	r1, r3
 80028b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b8:	f002 fbe8 	bl	800508c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 80028bc:	bf00      	nop
 80028be:	3728      	adds	r7, #40	; 0x28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40007800 	.word	0x40007800
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0d      	ldr	r2, [pc, #52]	; (8002910 <HAL_TIM_PWM_MspInit+0x44>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d113      	bne.n	8002906 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <HAL_TIM_PWM_MspInit+0x48>)
 80028e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e2:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <HAL_TIM_PWM_MspInit+0x48>)
 80028e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028e8:	6613      	str	r3, [r2, #96]	; 0x60
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <HAL_TIM_PWM_MspInit+0x48>)
 80028ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2102      	movs	r1, #2
 80028fa:	2019      	movs	r0, #25
 80028fc:	f002 f85b 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002900:	2019      	movs	r0, #25
 8002902:	f002 f874 	bl	80049ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40021000 	.word	0x40021000

08002918 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002928:	d114      	bne.n	8002954 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800292a:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <HAL_TIM_Base_MspInit+0x9c>)
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	4a21      	ldr	r2, [pc, #132]	; (80029b4 <HAL_TIM_Base_MspInit+0x9c>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6593      	str	r3, [r2, #88]	; 0x58
 8002936:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <HAL_TIM_Base_MspInit+0x9c>)
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2102      	movs	r1, #2
 8002946:	201c      	movs	r0, #28
 8002948:	f002 f835 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800294c:	201c      	movs	r0, #28
 800294e:	f002 f84e 	bl	80049ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002952:	e02a      	b.n	80029aa <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a17      	ldr	r2, [pc, #92]	; (80029b8 <HAL_TIM_Base_MspInit+0xa0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d10c      	bne.n	8002978 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_TIM_Base_MspInit+0x9c>)
 8002960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002962:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <HAL_TIM_Base_MspInit+0x9c>)
 8002964:	f043 0310 	orr.w	r3, r3, #16
 8002968:	6593      	str	r3, [r2, #88]	; 0x58
 800296a:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <HAL_TIM_Base_MspInit+0x9c>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]
}
 8002976:	e018      	b.n	80029aa <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM16)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0f      	ldr	r2, [pc, #60]	; (80029bc <HAL_TIM_Base_MspInit+0xa4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d113      	bne.n	80029aa <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_TIM_Base_MspInit+0x9c>)
 8002984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <HAL_TIM_Base_MspInit+0x9c>)
 8002988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298c:	6613      	str	r3, [r2, #96]	; 0x60
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_TIM_Base_MspInit+0x9c>)
 8002990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2102      	movs	r1, #2
 800299e:	2019      	movs	r0, #25
 80029a0:	f002 f809 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80029a4:	2019      	movs	r0, #25
 80029a6:	f002 f822 	bl	80049ee <HAL_NVIC_EnableIRQ>
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40001000 	.word	0x40001000
 80029bc:	40014400 	.word	0x40014400

080029c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <HAL_TIM_MspPostInit+0x68>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d11d      	bne.n	8002a1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <HAL_TIM_MspPostInit+0x6c>)
 80029e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e6:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <HAL_TIM_MspPostInit+0x6c>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <HAL_TIM_MspPostInit+0x6c>)
 80029f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	4619      	mov	r1, r3
 8002a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a1a:	f002 fb37 	bl	800508c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a1e:	bf00      	nop
 8002a20:	3720      	adds	r7, #32
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40021000 	.word	0x40021000

08002a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <NMI_Handler+0x4>

08002a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a3a:	e7fe      	b.n	8002a3a <HardFault_Handler+0x4>

08002a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a40:	e7fe      	b.n	8002a40 <MemManage_Handler+0x4>

08002a42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a46:	e7fe      	b.n	8002a46 <BusFault_Handler+0x4>

08002a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a4c:	e7fe      	b.n	8002a4c <UsageFault_Handler+0x4>

08002a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a7c:	f000 fcd2 	bl	8003424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a80:	bf00      	nop
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a88:	4802      	ldr	r0, [pc, #8]	; (8002a94 <DMA1_Channel1_IRQHandler+0x10>)
 8002a8a:	f002 fa1f 	bl	8004ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	2000288c 	.word	0x2000288c

08002a98 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002a9c:	4802      	ldr	r0, [pc, #8]	; (8002aa8 <DMA1_Channel3_IRQHandler+0x10>)
 8002a9e:	f002 fa15 	bl	8004ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	2000279c 	.word	0x2000279c

08002aac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ab0:	4803      	ldr	r0, [pc, #12]	; (8002ac0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002ab2:	f005 fa27 	bl	8007f04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002ab6:	4803      	ldr	r0, [pc, #12]	; (8002ac4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002ab8:	f005 fa24 	bl	8007f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002abc:	bf00      	nop
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20003920 	.word	0x20003920
 8002ac4:	200049c4 	.word	0x200049c4

08002ac8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002acc:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <TIM2_IRQHandler+0x10>)
 8002ace:	f005 fa19 	bl	8007f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2000496c 	.word	0x2000496c

08002adc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <ITM_SendChar+0x48>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a0e      	ldr	r2, [pc, #56]	; (8002b24 <ITM_SendChar+0x48>)
 8002aec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <ITM_SendChar+0x4c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <ITM_SendChar+0x4c>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002afe:	bf00      	nop
 8002b00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f8      	beq.n	8002b00 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002b0e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	6013      	str	r3, [r2, #0]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000edfc 	.word	0xe000edfc
 8002b28:	e0000e00 	.word	0xe0000e00

08002b2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
	return 1;
 8002b30:	2301      	movs	r3, #1
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <_kill>:

int _kill(int pid, int sig)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b46:	f006 fd51 	bl	80095ec <__errno>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2216      	movs	r2, #22
 8002b4e:	601a      	str	r2, [r3, #0]
	return -1;
 8002b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_exit>:

void _exit (int status)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ffe7 	bl	8002b3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b6e:	e7fe      	b.n	8002b6e <_exit+0x12>

08002b70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	e00a      	b.n	8002b98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b82:	f3af 8000 	nop.w
 8002b86:	4601      	mov	r1, r0
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	60ba      	str	r2, [r7, #8]
 8002b8e:	b2ca      	uxtb	r2, r1
 8002b90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3301      	adds	r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	dbf0      	blt.n	8002b82 <_read+0x12>
	}

return len;
 8002ba0:	687b      	ldr	r3, [r7, #4]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b086      	sub	sp, #24
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	e009      	b.n	8002bd0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);   // This sends to the trace
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	60ba      	str	r2, [r7, #8]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff89 	bl	8002adc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	dbf1      	blt.n	8002bbc <_write+0x12>
	}
	return len;
 8002bd8:	687b      	ldr	r3, [r7, #4]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <_close>:

int _close(int file)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
	return -1;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <_isatty>:

int _isatty(int file)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
	return 1;
 8002c22:	2301      	movs	r3, #1
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c54:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <_sbrk+0x5c>)
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <_sbrk+0x60>)
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <_sbrk+0x64>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <_sbrk+0x64>)
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <_sbrk+0x68>)
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <_sbrk+0x64>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d207      	bcs.n	8002c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c7c:	f006 fcb6 	bl	80095ec <__errno>
 8002c80:	4603      	mov	r3, r0
 8002c82:	220c      	movs	r2, #12
 8002c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c8a:	e009      	b.n	8002ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <_sbrk+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c92:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <_sbrk+0x64>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <_sbrk+0x64>)
 8002c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20010000 	.word	0x20010000
 8002cac:	00000400 	.word	0x00000400
 8002cb0:	200022b0 	.word	0x200022b0
 8002cb4:	20004a40 	.word	0x20004a40

08002cb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <SystemInit+0x20>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc2:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <SystemInit+0x20>)
 8002cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ce0:	f7ff ffea 	bl	8002cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ce4:	480c      	ldr	r0, [pc, #48]	; (8002d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ce6:	490d      	ldr	r1, [pc, #52]	; (8002d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <LoopForever+0xe>)
  movs r3, #0
 8002cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cec:	e002      	b.n	8002cf4 <LoopCopyDataInit>

08002cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cf2:	3304      	adds	r3, #4

08002cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cf8:	d3f9      	bcc.n	8002cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cfc:	4c0a      	ldr	r4, [pc, #40]	; (8002d28 <LoopForever+0x16>)
  movs r3, #0
 8002cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d00:	e001      	b.n	8002d06 <LoopFillZerobss>

08002d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d04:	3204      	adds	r2, #4

08002d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d08:	d3fb      	bcc.n	8002d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d0a:	f006 fc75 	bl	80095f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d0e:	f7fe fdeb 	bl	80018e8 <main>

08002d12 <LoopForever>:

LoopForever:
    b LoopForever
 8002d12:	e7fe      	b.n	8002d12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d14:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d1c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002d20:	0800f708 	.word	0x0800f708
  ldr r2, =_sbss
 8002d24:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002d28:	20004a40 	.word	0x20004a40

08002d2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d2c:	e7fe      	b.n	8002d2c <ADC1_IRQHandler>

08002d2e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af04      	add	r7, sp, #16
 8002d42:	4603      	mov	r3, r0
 8002d44:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d4a:	9302      	str	r3, [sp, #8]
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	1dfb      	adds	r3, r7, #7
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2301      	movs	r3, #1
 8002d56:	2200      	movs	r2, #0
 8002d58:	2178      	movs	r1, #120	; 0x78
 8002d5a:	4803      	ldr	r0, [pc, #12]	; (8002d68 <ssd1306_WriteCommand+0x2c>)
 8002d5c:	f002 fdbc 	bl	80058d8 <HAL_I2C_Mem_Write>
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	2000272c 	.word	0x2000272c

08002d6c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af04      	add	r7, sp, #16
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d7e:	9202      	str	r2, [sp, #8]
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2301      	movs	r3, #1
 8002d88:	2240      	movs	r2, #64	; 0x40
 8002d8a:	2178      	movs	r1, #120	; 0x78
 8002d8c:	4803      	ldr	r0, [pc, #12]	; (8002d9c <ssd1306_WriteData+0x30>)
 8002d8e:	f002 fda3 	bl	80058d8 <HAL_I2C_Mem_Write>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	2000272c 	.word	0x2000272c

08002da0 <ssd1306_Fill>:




// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	e00d      	b.n	8002dcc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <ssd1306_Fill+0x1a>
 8002db6:	2100      	movs	r1, #0
 8002db8:	e000      	b.n	8002dbc <ssd1306_Fill+0x1c>
 8002dba:	21ff      	movs	r1, #255	; 0xff
 8002dbc:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <ssd1306_Fill+0x44>)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	460a      	mov	r2, r1
 8002dc4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd2:	d3ed      	bcc.n	8002db0 <ssd1306_Fill+0x10>
    }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	200022b4 	.word	0x200022b4

08002de8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002dee:	2300      	movs	r3, #0
 8002df0:	71fb      	strb	r3, [r7, #7]
 8002df2:	e016      	b.n	8002e22 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	3b50      	subs	r3, #80	; 0x50
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff ff9e 	bl	8002d3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7ff ff9b 	bl	8002d3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002e06:	2010      	movs	r0, #16
 8002e08:	f7ff ff98 	bl	8002d3c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	01db      	lsls	r3, r3, #7
 8002e10:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <ssd1306_UpdateScreen+0x4c>)
 8002e12:	4413      	add	r3, r2
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ffa8 	bl	8002d6c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	71fb      	strb	r3, [r7, #7]
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	2b07      	cmp	r3, #7
 8002e26:	d9e5      	bls.n	8002df4 <ssd1306_UpdateScreen+0xc>
    }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	200022b4 	.word	0x200022b4

08002e38 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	71fb      	strb	r3, [r7, #7]
 8002e42:	460b      	mov	r3, r1
 8002e44:	71bb      	strb	r3, [r7, #6]
 8002e46:	4613      	mov	r3, r2
 8002e48:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	db3d      	blt.n	8002ece <ssd1306_DrawPixel+0x96>
 8002e52:	79bb      	ldrb	r3, [r7, #6]
 8002e54:	2b3f      	cmp	r3, #63	; 0x3f
 8002e56:	d83a      	bhi.n	8002ece <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002e58:	797b      	ldrb	r3, [r7, #5]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d11a      	bne.n	8002e94 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002e5e:	79fa      	ldrb	r2, [r7, #7]
 8002e60:	79bb      	ldrb	r3, [r7, #6]
 8002e62:	08db      	lsrs	r3, r3, #3
 8002e64:	b2d8      	uxtb	r0, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	01db      	lsls	r3, r3, #7
 8002e6a:	4413      	add	r3, r2
 8002e6c:	4a1b      	ldr	r2, [pc, #108]	; (8002edc <ssd1306_DrawPixel+0xa4>)
 8002e6e:	5cd3      	ldrb	r3, [r2, r3]
 8002e70:	b25a      	sxtb	r2, r3
 8002e72:	79bb      	ldrb	r3, [r7, #6]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	b25b      	sxtb	r3, r3
 8002e80:	4313      	orrs	r3, r2
 8002e82:	b259      	sxtb	r1, r3
 8002e84:	79fa      	ldrb	r2, [r7, #7]
 8002e86:	4603      	mov	r3, r0
 8002e88:	01db      	lsls	r3, r3, #7
 8002e8a:	4413      	add	r3, r2
 8002e8c:	b2c9      	uxtb	r1, r1
 8002e8e:	4a13      	ldr	r2, [pc, #76]	; (8002edc <ssd1306_DrawPixel+0xa4>)
 8002e90:	54d1      	strb	r1, [r2, r3]
 8002e92:	e01d      	b.n	8002ed0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002e94:	79fa      	ldrb	r2, [r7, #7]
 8002e96:	79bb      	ldrb	r3, [r7, #6]
 8002e98:	08db      	lsrs	r3, r3, #3
 8002e9a:	b2d8      	uxtb	r0, r3
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	01db      	lsls	r3, r3, #7
 8002ea0:	4413      	add	r3, r2
 8002ea2:	4a0e      	ldr	r2, [pc, #56]	; (8002edc <ssd1306_DrawPixel+0xa4>)
 8002ea4:	5cd3      	ldrb	r3, [r2, r3]
 8002ea6:	b25a      	sxtb	r2, r3
 8002ea8:	79bb      	ldrb	r3, [r7, #6]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	2101      	movs	r1, #1
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	b25b      	sxtb	r3, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	4013      	ands	r3, r2
 8002ebc:	b259      	sxtb	r1, r3
 8002ebe:	79fa      	ldrb	r2, [r7, #7]
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	01db      	lsls	r3, r3, #7
 8002ec4:	4413      	add	r3, r2
 8002ec6:	b2c9      	uxtb	r1, r1
 8002ec8:	4a04      	ldr	r2, [pc, #16]	; (8002edc <ssd1306_DrawPixel+0xa4>)
 8002eca:	54d1      	strb	r1, [r2, r3]
 8002ecc:	e000      	b.n	8002ed0 <ssd1306_DrawPixel+0x98>
        return;
 8002ece:	bf00      	nop
    }
}
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	200022b4 	.word	0x200022b4

08002ee0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002ee0:	b590      	push	{r4, r7, lr}
 8002ee2:	b089      	sub	sp, #36	; 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	1d38      	adds	r0, r7, #4
 8002eea:	e880 0006 	stmia.w	r0, {r1, r2}
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4623      	mov	r3, r4
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	2b1f      	cmp	r3, #31
 8002efc:	d902      	bls.n	8002f04 <ssd1306_WriteChar+0x24>
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b7e      	cmp	r3, #126	; 0x7e
 8002f02:	d901      	bls.n	8002f08 <ssd1306_WriteChar+0x28>
        return 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e06d      	b.n	8002fe4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002f08:	4b38      	ldr	r3, [pc, #224]	; (8002fec <ssd1306_WriteChar+0x10c>)
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	793b      	ldrb	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	2b80      	cmp	r3, #128	; 0x80
 8002f14:	dc06      	bgt.n	8002f24 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002f16:	4b35      	ldr	r3, [pc, #212]	; (8002fec <ssd1306_WriteChar+0x10c>)
 8002f18:	885b      	ldrh	r3, [r3, #2]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	797b      	ldrb	r3, [r7, #5]
 8002f1e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002f20:	2b40      	cmp	r3, #64	; 0x40
 8002f22:	dd01      	ble.n	8002f28 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e05d      	b.n	8002fe4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
 8002f2c:	e04c      	b.n	8002fc8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	3b20      	subs	r3, #32
 8002f34:	7979      	ldrb	r1, [r7, #5]
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	440b      	add	r3, r1
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	e034      	b.n	8002fb8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d012      	beq.n	8002f84 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f5e:	4b23      	ldr	r3, [pc, #140]	; (8002fec <ssd1306_WriteChar+0x10c>)
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	b2d8      	uxtb	r0, r3
 8002f6c:	4b1f      	ldr	r3, [pc, #124]	; (8002fec <ssd1306_WriteChar+0x10c>)
 8002f6e:	885b      	ldrh	r3, [r3, #2]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	7bba      	ldrb	r2, [r7, #14]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f7ff ff5b 	bl	8002e38 <ssd1306_DrawPixel>
 8002f82:	e016      	b.n	8002fb2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <ssd1306_WriteChar+0x10c>)
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	b2d8      	uxtb	r0, r3
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <ssd1306_WriteChar+0x10c>)
 8002f94:	885b      	ldrh	r3, [r3, #2]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	b2d9      	uxtb	r1, r3
 8002fa0:	7bbb      	ldrb	r3, [r7, #14]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf0c      	ite	eq
 8002fa6:	2301      	moveq	r3, #1
 8002fa8:	2300      	movne	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	f7ff ff43 	bl	8002e38 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	793b      	ldrb	r3, [r7, #4]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d3c5      	bcc.n	8002f4e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	797b      	ldrb	r3, [r7, #5]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d3ad      	bcc.n	8002f2e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <ssd1306_WriteChar+0x10c>)
 8002fd4:	881a      	ldrh	r2, [r3, #0]
 8002fd6:	793b      	ldrb	r3, [r7, #4]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	4b03      	ldr	r3, [pc, #12]	; (8002fec <ssd1306_WriteChar+0x10c>)
 8002fe0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3724      	adds	r7, #36	; 0x24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd90      	pop	{r4, r7, pc}
 8002fec:	200026b4 	.word	0x200026b4

08002ff0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	1d38      	adds	r0, r7, #4
 8002ffa:	e880 0006 	stmia.w	r0, {r1, r2}
 8002ffe:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8003000:	e012      	b.n	8003028 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	7818      	ldrb	r0, [r3, #0]
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	1d3a      	adds	r2, r7, #4
 800300a:	ca06      	ldmia	r2, {r1, r2}
 800300c:	f7ff ff68 	bl	8002ee0 <ssd1306_WriteChar>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d002      	beq.n	8003022 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	e008      	b.n	8003034 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	3301      	adds	r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e8      	bne.n	8003002 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	781b      	ldrb	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	460a      	mov	r2, r1
 8003046:	71fb      	strb	r3, [r7, #7]
 8003048:	4613      	mov	r3, r2
 800304a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	b29a      	uxth	r2, r3
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <ssd1306_SetCursor+0x2c>)
 8003052:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003054:	79bb      	ldrb	r3, [r7, #6]
 8003056:	b29a      	uxth	r2, r3
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <ssd1306_SetCursor+0x2c>)
 800305a:	805a      	strh	r2, [r3, #2]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	200026b4 	.word	0x200026b4

0800306c <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	4604      	mov	r4, r0
 8003074:	4608      	mov	r0, r1
 8003076:	4611      	mov	r1, r2
 8003078:	461a      	mov	r2, r3
 800307a:	4623      	mov	r3, r4
 800307c:	71fb      	strb	r3, [r7, #7]
 800307e:	4603      	mov	r3, r0
 8003080:	71bb      	strb	r3, [r7, #6]
 8003082:	460b      	mov	r3, r1
 8003084:	717b      	strb	r3, [r7, #5]
 8003086:	4613      	mov	r3, r2
 8003088:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 800308a:	797b      	ldrb	r3, [r7, #5]
 800308c:	425b      	negs	r3, r3
 800308e:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8003094:	797b      	ldrb	r3, [r7, #5]
 8003096:	f1c3 0301 	rsb	r3, r3, #1
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	db65      	blt.n	8003172 <ssd1306_DrawCircle+0x106>
 80030a6:	79bb      	ldrb	r3, [r7, #6]
 80030a8:	2b3f      	cmp	r3, #63	; 0x3f
 80030aa:	d862      	bhi.n	8003172 <ssd1306_DrawCircle+0x106>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	79fa      	ldrb	r2, [r7, #7]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	b2d8      	uxtb	r0, r3
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	79bb      	ldrb	r3, [r7, #6]
 80030bc:	4413      	add	r3, r2
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	793a      	ldrb	r2, [r7, #4]
 80030c2:	4619      	mov	r1, r3
 80030c4:	f7ff feb8 	bl	8002e38 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	4413      	add	r3, r2
 80030d0:	b2d8      	uxtb	r0, r3
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	79bb      	ldrb	r3, [r7, #6]
 80030d8:	4413      	add	r3, r2
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	793a      	ldrb	r2, [r7, #4]
 80030de:	4619      	mov	r1, r3
 80030e0:	f7ff feaa 	bl	8002e38 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	4413      	add	r3, r2
 80030ec:	b2d8      	uxtb	r0, r3
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	79ba      	ldrb	r2, [r7, #6]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	793a      	ldrb	r2, [r7, #4]
 80030fa:	4619      	mov	r1, r3
 80030fc:	f7ff fe9c 	bl	8002e38 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	79fa      	ldrb	r2, [r7, #7]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	b2d8      	uxtb	r0, r3
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	79ba      	ldrb	r2, [r7, #6]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	793a      	ldrb	r2, [r7, #4]
 8003116:	4619      	mov	r1, r3
 8003118:	f7ff fe8e 	bl	8002e38 <ssd1306_DrawPixel>
        e2 = err;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	429a      	cmp	r2, r3
 8003126:	dc13      	bgt.n	8003150 <ssd1306_DrawCircle+0xe4>
            y++;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	3301      	adds	r3, #1
 800312c:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	3301      	adds	r3, #1
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4413      	add	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	425b      	negs	r3, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	429a      	cmp	r2, r3
 8003142:	d105      	bne.n	8003150 <ssd1306_DrawCircle+0xe4>
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	429a      	cmp	r2, r3
 800314a:	dc01      	bgt.n	8003150 <ssd1306_DrawCircle+0xe4>
              e2 = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	429a      	cmp	r2, r3
 8003156:	dd08      	ble.n	800316a <ssd1306_DrawCircle+0xfe>
          x++;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	3301      	adds	r3, #1
 800315c:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	3301      	adds	r3, #1
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4413      	add	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b00      	cmp	r3, #0
 800316e:	dd9d      	ble.n	80030ac <ssd1306_DrawCircle+0x40>

    return;
 8003170:	e000      	b.n	8003174 <ssd1306_DrawCircle+0x108>
    return;
 8003172:	bf00      	nop
}
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	bd90      	pop	{r4, r7, pc}

0800317a <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003184:	2381      	movs	r3, #129	; 0x81
 8003186:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fdd6 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fdd2 	bl	8002d3c <ssd1306_WriteCommand>
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80031b0:	23af      	movs	r3, #175	; 0xaf
 80031b2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <ssd1306_SetDisplayOn+0x38>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	715a      	strb	r2, [r3, #5]
 80031ba:	e004      	b.n	80031c6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80031bc:	23ae      	movs	r3, #174	; 0xae
 80031be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <ssd1306_SetDisplayOn+0x38>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fdb7 	bl	8002d3c <ssd1306_WriteCommand>
}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	200026b4 	.word	0x200026b4

080031dc <ssd1306_Init1>:




// Initialize the oled screen
void ssd1306_Init1(void) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80031e0:	f7ff fda5 	bl	8002d2e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80031e4:	2064      	movs	r0, #100	; 0x64
 80031e6:	f000 f93d 	bl	8003464 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80031ea:	2000      	movs	r0, #0
 80031ec:	f7ff ffd8 	bl	80031a0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80031f0:	2020      	movs	r0, #32
 80031f2:	f7ff fda3 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7ff fda0 	bl	8002d3c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80031fc:	20b0      	movs	r0, #176	; 0xb0
 80031fe:	f7ff fd9d 	bl	8002d3c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003202:	20c8      	movs	r0, #200	; 0xc8
 8003204:	f7ff fd9a 	bl	8002d3c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003208:	2000      	movs	r0, #0
 800320a:	f7ff fd97 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800320e:	2010      	movs	r0, #16
 8003210:	f7ff fd94 	bl	8002d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003214:	2040      	movs	r0, #64	; 0x40
 8003216:	f7ff fd91 	bl	8002d3c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800321a:	20ff      	movs	r0, #255	; 0xff
 800321c:	f7ff ffad 	bl	800317a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003220:	20a1      	movs	r0, #161	; 0xa1
 8003222:	f7ff fd8b 	bl	8002d3c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003226:	20a6      	movs	r0, #166	; 0xa6
 8003228:	f7ff fd88 	bl	8002d3c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800322c:	20a8      	movs	r0, #168	; 0xa8
 800322e:	f7ff fd85 	bl	8002d3c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003232:	203f      	movs	r0, #63	; 0x3f
 8003234:	f7ff fd82 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003238:	20a4      	movs	r0, #164	; 0xa4
 800323a:	f7ff fd7f 	bl	8002d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800323e:	20d3      	movs	r0, #211	; 0xd3
 8003240:	f7ff fd7c 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003244:	2000      	movs	r0, #0
 8003246:	f7ff fd79 	bl	8002d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800324a:	20d5      	movs	r0, #213	; 0xd5
 800324c:	f7ff fd76 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003250:	20f0      	movs	r0, #240	; 0xf0
 8003252:	f7ff fd73 	bl	8002d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003256:	20d9      	movs	r0, #217	; 0xd9
 8003258:	f7ff fd70 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800325c:	2022      	movs	r0, #34	; 0x22
 800325e:	f7ff fd6d 	bl	8002d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003262:	20da      	movs	r0, #218	; 0xda
 8003264:	f7ff fd6a 	bl	8002d3c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003268:	2012      	movs	r0, #18
 800326a:	f7ff fd67 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800326e:	20db      	movs	r0, #219	; 0xdb
 8003270:	f7ff fd64 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003274:	2020      	movs	r0, #32
 8003276:	f7ff fd61 	bl	8002d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800327a:	208d      	movs	r0, #141	; 0x8d
 800327c:	f7ff fd5e 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003280:	2014      	movs	r0, #20
 8003282:	f7ff fd5b 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003286:	2001      	movs	r0, #1
 8003288:	f7ff ff8a 	bl	80031a0 <ssd1306_SetDisplayOn>


    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800328c:	f7ff fdac 	bl	8002de8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <ssd1306_Init1+0xcc>)
 8003292:	2200      	movs	r2, #0
 8003294:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <ssd1306_Init1+0xcc>)
 8003298:	2200      	movs	r2, #0
 800329a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800329c:	4b02      	ldr	r3, [pc, #8]	; (80032a8 <ssd1306_Init1+0xcc>)
 800329e:	2201      	movs	r2, #1
 80032a0:	711a      	strb	r2, [r3, #4]
}
 80032a2:	bf00      	nop
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	200026b4 	.word	0x200026b4

080032ac <ssd1306_Init2>:


// Initialize the oled screen
void ssd1306_Init2(void) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80032b0:	f7ff fd3d 	bl	8002d2e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80032b4:	2064      	movs	r0, #100	; 0x64
 80032b6:	f000 f8d5 	bl	8003464 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80032ba:	2000      	movs	r0, #0
 80032bc:	f7ff ff70 	bl	80031a0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80032c0:	2020      	movs	r0, #32
 80032c2:	f7ff fd3b 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80032c6:	2000      	movs	r0, #0
 80032c8:	f7ff fd38 	bl	8002d3c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80032cc:	20b0      	movs	r0, #176	; 0xb0
 80032ce:	f7ff fd35 	bl	8002d3c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC8); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC0); //Set COM Output Scan Direction
 80032d2:	20c0      	movs	r0, #192	; 0xc0
 80032d4:	f7ff fd32 	bl	8002d3c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80032d8:	2000      	movs	r0, #0
 80032da:	f7ff fd2f 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80032de:	2010      	movs	r0, #16
 80032e0:	f7ff fd2c 	bl	8002d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80032e4:	2040      	movs	r0, #64	; 0x40
 80032e6:	f7ff fd29 	bl	8002d3c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80032ea:	20ff      	movs	r0, #255	; 0xff
 80032ec:	f7ff ff45 	bl	800317a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA1); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA0); //--set segment re-map 0 to 127 - CHECK
 80032f0:	20a0      	movs	r0, #160	; 0xa0
 80032f2:	f7ff fd23 	bl	8002d3c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80032f6:	20a6      	movs	r0, #166	; 0xa6
 80032f8:	f7ff fd20 	bl	8002d3c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80032fc:	20a8      	movs	r0, #168	; 0xa8
 80032fe:	f7ff fd1d 	bl	8002d3c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003302:	203f      	movs	r0, #63	; 0x3f
 8003304:	f7ff fd1a 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003308:	20a4      	movs	r0, #164	; 0xa4
 800330a:	f7ff fd17 	bl	8002d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800330e:	20d3      	movs	r0, #211	; 0xd3
 8003310:	f7ff fd14 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003314:	2000      	movs	r0, #0
 8003316:	f7ff fd11 	bl	8002d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800331a:	20d5      	movs	r0, #213	; 0xd5
 800331c:	f7ff fd0e 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003320:	20f0      	movs	r0, #240	; 0xf0
 8003322:	f7ff fd0b 	bl	8002d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003326:	20d9      	movs	r0, #217	; 0xd9
 8003328:	f7ff fd08 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800332c:	2022      	movs	r0, #34	; 0x22
 800332e:	f7ff fd05 	bl	8002d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003332:	20da      	movs	r0, #218	; 0xda
 8003334:	f7ff fd02 	bl	8002d3c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003338:	2012      	movs	r0, #18
 800333a:	f7ff fcff 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800333e:	20db      	movs	r0, #219	; 0xdb
 8003340:	f7ff fcfc 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003344:	2020      	movs	r0, #32
 8003346:	f7ff fcf9 	bl	8002d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800334a:	208d      	movs	r0, #141	; 0x8d
 800334c:	f7ff fcf6 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003350:	2014      	movs	r0, #20
 8003352:	f7ff fcf3 	bl	8002d3c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003356:	2001      	movs	r0, #1
 8003358:	f7ff ff22 	bl	80031a0 <ssd1306_SetDisplayOn>


    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800335c:	f7ff fd44 	bl	8002de8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <ssd1306_Init2+0xcc>)
 8003362:	2200      	movs	r2, #0
 8003364:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003366:	4b04      	ldr	r3, [pc, #16]	; (8003378 <ssd1306_Init2+0xcc>)
 8003368:	2200      	movs	r2, #0
 800336a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800336c:	4b02      	ldr	r3, [pc, #8]	; (8003378 <ssd1306_Init2+0xcc>)
 800336e:	2201      	movs	r2, #1
 8003370:	711a      	strb	r2, [r3, #4]
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	200026b4 	.word	0x200026b4

0800337c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003386:	2003      	movs	r0, #3
 8003388:	f001 fb0a 	bl	80049a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800338c:	2000      	movs	r0, #0
 800338e:	f000 f80d 	bl	80033ac <HAL_InitTick>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	71fb      	strb	r3, [r7, #7]
 800339c:	e001      	b.n	80033a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800339e:	f7ff f8b7 	bl	8002510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033a2:	79fb      	ldrb	r3, [r7, #7]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033b8:	4b17      	ldr	r3, [pc, #92]	; (8003418 <HAL_InitTick+0x6c>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d023      	beq.n	8003408 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033c0:	4b16      	ldr	r3, [pc, #88]	; (800341c <HAL_InitTick+0x70>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <HAL_InitTick+0x6c>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	4619      	mov	r1, r3
 80033ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80033d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d6:	4618      	mov	r0, r3
 80033d8:	f001 fb17 	bl	8004a0a <HAL_SYSTICK_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10f      	bne.n	8003402 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b0f      	cmp	r3, #15
 80033e6:	d809      	bhi.n	80033fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033e8:	2200      	movs	r2, #0
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033f0:	f001 fae1 	bl	80049b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033f4:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <HAL_InitTick+0x74>)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e007      	b.n	800340c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	e004      	b.n	800340c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	73fb      	strb	r3, [r7, #15]
 8003406:	e001      	b.n	800340c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000030 	.word	0x20000030
 800341c:	20000018 	.word	0x20000018
 8003420:	2000002c 	.word	0x2000002c

08003424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_IncTick+0x20>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_IncTick+0x24>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4413      	add	r3, r2
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <HAL_IncTick+0x24>)
 8003436:	6013      	str	r3, [r2, #0]
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000030 	.word	0x20000030
 8003448:	20004a2c 	.word	0x20004a2c

0800344c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return uwTick;
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <HAL_GetTick+0x14>)
 8003452:	681b      	ldr	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20004a2c 	.word	0x20004a2c

08003464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800346c:	f7ff ffee 	bl	800344c <HAL_GetTick>
 8003470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800347c:	d005      	beq.n	800348a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_Delay+0x44>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800348a:	bf00      	nop
 800348c:	f7ff ffde 	bl	800344c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	429a      	cmp	r2, r3
 800349a:	d8f7      	bhi.n	800348c <HAL_Delay+0x28>
  {
  }
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000030 	.word	0x20000030

080034ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	609a      	str	r2, [r3, #8]
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	609a      	str	r2, [r3, #8]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3360      	adds	r3, #96	; 0x60
 8003526:	461a      	mov	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <LL_ADC_SetOffset+0x44>)
 8003536:	4013      	ands	r3, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	4313      	orrs	r3, r2
 8003544:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800354c:	bf00      	nop
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	03fff000 	.word	0x03fff000

0800355c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3360      	adds	r3, #96	; 0x60
 800356a:	461a      	mov	r2, r3
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3360      	adds	r3, #96	; 0x60
 8003598:	461a      	mov	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	431a      	orrs	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3330      	adds	r3, #48	; 0x30
 80035f4:	461a      	mov	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	0a1b      	lsrs	r3, r3, #8
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	4413      	add	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	211f      	movs	r1, #31
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	401a      	ands	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	0e9b      	lsrs	r3, r3, #26
 800361c:	f003 011f 	and.w	r1, r3, #31
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	fa01 f303 	lsl.w	r3, r1, r3
 800362a:	431a      	orrs	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003630:	bf00      	nop
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3314      	adds	r3, #20
 800364c:	461a      	mov	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	0e5b      	lsrs	r3, r3, #25
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	4413      	add	r3, r2
 800365a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	0d1b      	lsrs	r3, r3, #20
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	2107      	movs	r1, #7
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	401a      	ands	r2, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	0d1b      	lsrs	r3, r3, #20
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	fa01 f303 	lsl.w	r3, r1, r3
 8003680:	431a      	orrs	r2, r3
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	43db      	mvns	r3, r3
 80036ae:	401a      	ands	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f003 0318 	and.w	r3, r3, #24
 80036b6:	4908      	ldr	r1, [pc, #32]	; (80036d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80036b8:	40d9      	lsrs	r1, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	400b      	ands	r3, r1
 80036be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c2:	431a      	orrs	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	0007ffff 	.word	0x0007ffff

080036dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80036ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6093      	str	r3, [r2, #8]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003714:	d101      	bne.n	800371a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800373c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003764:	d101      	bne.n	800376a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003788:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800378c:	f043 0201 	orr.w	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037b4:	f043 0202 	orr.w	r2, r3, #2
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <LL_ADC_IsEnabled+0x18>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <LL_ADC_IsEnabled+0x1a>
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d101      	bne.n	8003806 <LL_ADC_IsDisableOngoing+0x18>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <LL_ADC_IsDisableOngoing+0x1a>
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003824:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003828:	f043 0204 	orr.w	r2, r3, #4
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b04      	cmp	r3, #4
 800384e:	d101      	bne.n	8003854 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b08      	cmp	r3, #8
 8003874:	d101      	bne.n	800387a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003894:	2300      	movs	r3, #0
 8003896:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e12c      	b.n	8003afc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d109      	bne.n	80038c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fe fe51 	bl	8002558 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff19 	bl	8003700 <LL_ADC_IsDeepPowerDownEnabled>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff feff 	bl	80036dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff ff34 	bl	8003750 <LL_ADC_IsInternalRegulatorEnabled>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d115      	bne.n	800391a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff18 	bl	8003728 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038f8:	4b82      	ldr	r3, [pc, #520]	; (8003b04 <HAL_ADC_Init+0x27c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	099b      	lsrs	r3, r3, #6
 80038fe:	4a82      	ldr	r2, [pc, #520]	; (8003b08 <HAL_ADC_Init+0x280>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	3301      	adds	r3, #1
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800390c:	e002      	b.n	8003914 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	3b01      	subs	r3, #1
 8003912:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f9      	bne.n	800390e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff ff16 	bl	8003750 <LL_ADC_IsInternalRegulatorEnabled>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10d      	bne.n	8003946 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392e:	f043 0210 	orr.w	r2, r3, #16
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	f043 0201 	orr.w	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff ff76 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003950:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 80c5 	bne.w	8003aea <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f040 80c1 	bne.w	8003aea <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003970:	f043 0202 	orr.w	r2, r3, #2
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff ff23 	bl	80037c8 <LL_ADC_IsEnabled>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10b      	bne.n	80039a0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003988:	4860      	ldr	r0, [pc, #384]	; (8003b0c <HAL_ADC_Init+0x284>)
 800398a:	f7ff ff1d 	bl	80037c8 <LL_ADC_IsEnabled>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d105      	bne.n	80039a0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4619      	mov	r1, r3
 800399a:	485d      	ldr	r0, [pc, #372]	; (8003b10 <HAL_ADC_Init+0x288>)
 800399c:	f7ff fd86 	bl	80034ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7e5b      	ldrb	r3, [r3, #25]
 80039a4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039aa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80039b0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80039b6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039be:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d106      	bne.n	80039dc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	3b01      	subs	r3, #1
 80039d4:	045b      	lsls	r3, r3, #17
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	4b45      	ldr	r3, [pc, #276]	; (8003b14 <HAL_ADC_Init+0x28c>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	69b9      	ldr	r1, [r7, #24]
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff13 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003a16:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff20 	bl	8003862 <LL_ADC_INJ_IsConversionOngoing>
 8003a22:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d13d      	bne.n	8003aa6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d13a      	bne.n	8003aa6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a34:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a3c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a4c:	f023 0302 	bic.w	r3, r3, #2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	69b9      	ldr	r1, [r7, #24]
 8003a56:	430b      	orrs	r3, r1
 8003a58:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d118      	bne.n	8003a96 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a6e:	f023 0304 	bic.w	r3, r3, #4
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a7a:	4311      	orrs	r1, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a80:	4311      	orrs	r1, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a86:	430a      	orrs	r2, r1
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	611a      	str	r2, [r3, #16]
 8003a94:	e007      	b.n	8003aa6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d10c      	bne.n	8003ac8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	f023 010f 	bic.w	r1, r3, #15
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	1e5a      	subs	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ac6:	e007      	b.n	8003ad8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 020f 	bic.w	r2, r2, #15
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003adc:	f023 0303 	bic.w	r3, r3, #3
 8003ae0:	f043 0201 	orr.w	r2, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
 8003ae8:	e007      	b.n	8003afa <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aee:	f043 0210 	orr.w	r2, r3, #16
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003afa:	7ffb      	ldrb	r3, [r7, #31]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3720      	adds	r7, #32
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000018 	.word	0x20000018
 8003b08:	053e2d63 	.word	0x053e2d63
 8003b0c:	50040000 	.word	0x50040000
 8003b10:	50040300 	.word	0x50040300
 8003b14:	fff0c007 	.word	0xfff0c007

08003b18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fe87 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d167      	bne.n	8003c04 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_ADC_Start_DMA+0x2a>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e063      	b.n	8003c0a <HAL_ADC_Start_DMA+0xf2>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 fc52 	bl	80043f4 <ADC_Enable>
 8003b50:	4603      	mov	r3, r0
 8003b52:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d14f      	bne.n	8003bfa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b62:	f023 0301 	bic.w	r3, r3, #1
 8003b66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d006      	beq.n	8003b88 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7e:	f023 0206 	bic.w	r2, r3, #6
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	659a      	str	r2, [r3, #88]	; 0x58
 8003b86:	e002      	b.n	8003b8e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b92:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <HAL_ADC_Start_DMA+0xfc>)
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9a:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <HAL_ADC_Start_DMA+0x100>)
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	4a1e      	ldr	r2, [pc, #120]	; (8003c1c <HAL_ADC_Start_DMA+0x104>)
 8003ba4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	221c      	movs	r2, #28
 8003bac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0210 	orr.w	r2, r2, #16
 8003bc4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3340      	adds	r3, #64	; 0x40
 8003be0:	4619      	mov	r1, r3
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f001 f911 	bl	8004e0c <HAL_DMA_Start_IT>
 8003bea:	4603      	mov	r3, r0
 8003bec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fe0e 	bl	8003814 <LL_ADC_REG_StartConversion>
 8003bf8:	e006      	b.n	8003c08 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003c02:	e001      	b.n	8003c08 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c04:	2302      	movs	r3, #2
 8003c06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	080045bf 	.word	0x080045bf
 8003c18:	08004697 	.word	0x08004697
 8003c1c:	080046b3 	.word	0x080046b3

08003c20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b0b6      	sub	sp, #216	; 0xd8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x22>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e3b9      	b.n	80043ca <HAL_ADC_ConfigChannel+0x796>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fdea 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f040 839e 	bne.w	80043ac <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b05      	cmp	r3, #5
 8003c76:	d824      	bhi.n	8003cc2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	3b02      	subs	r3, #2
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d81b      	bhi.n	8003cba <HAL_ADC_ConfigChannel+0x86>
 8003c82:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <HAL_ADC_ConfigChannel+0x54>)
 8003c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c88:	08003c99 	.word	0x08003c99
 8003c8c:	08003ca1 	.word	0x08003ca1
 8003c90:	08003ca9 	.word	0x08003ca9
 8003c94:	08003cb1 	.word	0x08003cb1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	220c      	movs	r2, #12
 8003c9c:	605a      	str	r2, [r3, #4]
          break;
 8003c9e:	e011      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2212      	movs	r2, #18
 8003ca4:	605a      	str	r2, [r3, #4]
          break;
 8003ca6:	e00d      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2218      	movs	r2, #24
 8003cac:	605a      	str	r2, [r3, #4]
          break;
 8003cae:	e009      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cb6:	605a      	str	r2, [r3, #4]
          break;
 8003cb8:	e004      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2206      	movs	r2, #6
 8003cbe:	605a      	str	r2, [r3, #4]
          break;
 8003cc0:	e000      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003cc2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f7ff fc87 	bl	80035e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fdae 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003ce0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fdba 	bl	8003862 <LL_ADC_INJ_IsConversionOngoing>
 8003cee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cf2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f040 81a6 	bne.w	8004048 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f040 81a1 	bne.w	8004048 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6819      	ldr	r1, [r3, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	461a      	mov	r2, r3
 8003d14:	f7ff fc92 	bl	800363c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	08db      	lsrs	r3, r3, #3
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d00a      	beq.n	8003d50 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6919      	ldr	r1, [r3, #16]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d4a:	f7ff fbe3 	bl	8003514 <LL_ADC_SetOffset>
 8003d4e:	e17b      	b.n	8004048 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2100      	movs	r1, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fc00 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x148>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fbf5 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003d72:	4603      	mov	r3, r0
 8003d74:	0e9b      	lsrs	r3, r3, #26
 8003d76:	f003 021f 	and.w	r2, r3, #31
 8003d7a:	e01e      	b.n	8003dba <HAL_ADC_ConfigChannel+0x186>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fbea 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003da2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003daa:	2320      	movs	r3, #32
 8003dac:	e004      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003dae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003db2:	fab3 f383 	clz	r3, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d105      	bne.n	8003dd2 <HAL_ADC_ConfigChannel+0x19e>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	0e9b      	lsrs	r3, r3, #26
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	e018      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x1d0>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003dde:	fa93 f3a3 	rbit	r3, r3
 8003de2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003dee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003df6:	2320      	movs	r3, #32
 8003df8:	e004      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003dfe:	fab3 f383 	clz	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d106      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff fbb9 	bl	8003588 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fb9d 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <HAL_ADC_ConfigChannel+0x20e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2101      	movs	r1, #1
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fb92 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	0e9b      	lsrs	r3, r3, #26
 8003e3c:	f003 021f 	and.w	r2, r3, #31
 8003e40:	e01e      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x24c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2101      	movs	r1, #1
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fb87 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e58:	fa93 f3a3 	rbit	r3, r3
 8003e5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003e60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003e68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003e70:	2320      	movs	r3, #32
 8003e72:	e004      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003e74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e78:	fab3 f383 	clz	r3, r3
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x264>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	0e9b      	lsrs	r3, r3, #26
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	e018      	b.n	8003eca <HAL_ADC_ConfigChannel+0x296>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ea4:	fa93 f3a3 	rbit	r3, r3
 8003ea8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003eac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003ebc:	2320      	movs	r3, #32
 8003ebe:	e004      	b.n	8003eca <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ec4:	fab3 f383 	clz	r3, r3
 8003ec8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d106      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff fb56 	bl	8003588 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fb3a 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x2d4>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fb2f 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003efe:	4603      	mov	r3, r0
 8003f00:	0e9b      	lsrs	r3, r3, #26
 8003f02:	f003 021f 	and.w	r2, r3, #31
 8003f06:	e01e      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x312>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2102      	movs	r1, #2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff fb24 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f1e:	fa93 f3a3 	rbit	r3, r3
 8003f22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003f26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003f2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003f36:	2320      	movs	r3, #32
 8003f38:	e004      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003f3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f3e:	fab3 f383 	clz	r3, r3
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d105      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x32a>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	0e9b      	lsrs	r3, r3, #26
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	e016      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x358>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f6a:	fa93 f3a3 	rbit	r3, r3
 8003f6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003f70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003f7e:	2320      	movs	r3, #32
 8003f80:	e004      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003f82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f86:	fab3 f383 	clz	r3, r3
 8003f8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d106      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2200      	movs	r2, #0
 8003f96:	2102      	movs	r1, #2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff faf5 	bl	8003588 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2103      	movs	r1, #3
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff fad9 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x396>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2103      	movs	r1, #3
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff face 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	0e9b      	lsrs	r3, r3, #26
 8003fc4:	f003 021f 	and.w	r2, r3, #31
 8003fc8:	e017      	b.n	8003ffa <HAL_ADC_ConfigChannel+0x3c6>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2103      	movs	r1, #3
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff fac3 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fdc:	fa93 f3a3 	rbit	r3, r3
 8003fe0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003fe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fe4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003fe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003fec:	2320      	movs	r3, #32
 8003fee:	e003      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004002:	2b00      	cmp	r3, #0
 8004004:	d105      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x3de>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	0e9b      	lsrs	r3, r3, #26
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	e011      	b.n	8004036 <HAL_ADC_ConfigChannel+0x402>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800401a:	fa93 f3a3 	rbit	r3, r3
 800401e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004022:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800402a:	2320      	movs	r3, #32
 800402c:	e003      	b.n	8004036 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800402e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004036:	429a      	cmp	r2, r3
 8004038:	d106      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2200      	movs	r2, #0
 8004040:	2103      	movs	r1, #3
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff faa0 	bl	8003588 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fbbb 	bl	80037c8 <LL_ADC_IsEnabled>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	f040 813f 	bne.w	80042d8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6819      	ldr	r1, [r3, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	461a      	mov	r2, r3
 8004068:	f7ff fb14 	bl	8003694 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4a8e      	ldr	r2, [pc, #568]	; (80042ac <HAL_ADC_ConfigChannel+0x678>)
 8004072:	4293      	cmp	r3, r2
 8004074:	f040 8130 	bne.w	80042d8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10b      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x46c>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	0e9b      	lsrs	r3, r3, #26
 800408e:	3301      	adds	r3, #1
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	2b09      	cmp	r3, #9
 8004096:	bf94      	ite	ls
 8004098:	2301      	movls	r3, #1
 800409a:	2300      	movhi	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	e019      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x4a0>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a8:	fa93 f3a3 	rbit	r3, r3
 80040ac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80040ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80040b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80040b8:	2320      	movs	r3, #32
 80040ba:	e003      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80040bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040be:	fab3 f383 	clz	r3, r3
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	3301      	adds	r3, #1
 80040c6:	f003 031f 	and.w	r3, r3, #31
 80040ca:	2b09      	cmp	r3, #9
 80040cc:	bf94      	ite	ls
 80040ce:	2301      	movls	r3, #1
 80040d0:	2300      	movhi	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d079      	beq.n	80041cc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d107      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x4c0>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	0e9b      	lsrs	r3, r3, #26
 80040ea:	3301      	adds	r3, #1
 80040ec:	069b      	lsls	r3, r3, #26
 80040ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040f2:	e015      	b.n	8004120 <HAL_ADC_ConfigChannel+0x4ec>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004104:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800410c:	2320      	movs	r3, #32
 800410e:	e003      	b.n	8004118 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	3301      	adds	r3, #1
 800411a:	069b      	lsls	r3, r3, #26
 800411c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x50c>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	0e9b      	lsrs	r3, r3, #26
 8004132:	3301      	adds	r3, #1
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	2101      	movs	r1, #1
 800413a:	fa01 f303 	lsl.w	r3, r1, r3
 800413e:	e017      	b.n	8004170 <HAL_ADC_ConfigChannel+0x53c>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004148:	fa93 f3a3 	rbit	r3, r3
 800414c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800414e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004150:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004158:	2320      	movs	r3, #32
 800415a:	e003      	b.n	8004164 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800415c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	3301      	adds	r3, #1
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	2101      	movs	r1, #1
 800416c:	fa01 f303 	lsl.w	r3, r1, r3
 8004170:	ea42 0103 	orr.w	r1, r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x562>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	0e9b      	lsrs	r3, r3, #26
 8004186:	3301      	adds	r3, #1
 8004188:	f003 021f 	and.w	r2, r3, #31
 800418c:	4613      	mov	r3, r2
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	4413      	add	r3, r2
 8004192:	051b      	lsls	r3, r3, #20
 8004194:	e018      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x594>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80041a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80041ae:	2320      	movs	r3, #32
 80041b0:	e003      	b.n	80041ba <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80041b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b4:	fab3 f383 	clz	r3, r3
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	3301      	adds	r3, #1
 80041bc:	f003 021f 	and.w	r2, r3, #31
 80041c0:	4613      	mov	r3, r2
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	4413      	add	r3, r2
 80041c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c8:	430b      	orrs	r3, r1
 80041ca:	e080      	b.n	80042ce <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d107      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x5b4>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	0e9b      	lsrs	r3, r3, #26
 80041de:	3301      	adds	r3, #1
 80041e0:	069b      	lsls	r3, r3, #26
 80041e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041e6:	e015      	b.n	8004214 <HAL_ADC_ConfigChannel+0x5e0>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004200:	2320      	movs	r3, #32
 8004202:	e003      	b.n	800420c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3301      	adds	r3, #1
 800420e:	069b      	lsls	r3, r3, #26
 8004210:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x600>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	0e9b      	lsrs	r3, r3, #26
 8004226:	3301      	adds	r3, #1
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	2101      	movs	r1, #1
 800422e:	fa01 f303 	lsl.w	r3, r1, r3
 8004232:	e017      	b.n	8004264 <HAL_ADC_ConfigChannel+0x630>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	fa93 f3a3 	rbit	r3, r3
 8004240:	61fb      	str	r3, [r7, #28]
  return result;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800424c:	2320      	movs	r3, #32
 800424e:	e003      	b.n	8004258 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	fab3 f383 	clz	r3, r3
 8004256:	b2db      	uxtb	r3, r3
 8004258:	3301      	adds	r3, #1
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	2101      	movs	r1, #1
 8004260:	fa01 f303 	lsl.w	r3, r1, r3
 8004264:	ea42 0103 	orr.w	r1, r2, r3
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10d      	bne.n	8004290 <HAL_ADC_ConfigChannel+0x65c>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0e9b      	lsrs	r3, r3, #26
 800427a:	3301      	adds	r3, #1
 800427c:	f003 021f 	and.w	r2, r3, #31
 8004280:	4613      	mov	r3, r2
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4413      	add	r3, r2
 8004286:	3b1e      	subs	r3, #30
 8004288:	051b      	lsls	r3, r3, #20
 800428a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800428e:	e01d      	b.n	80042cc <HAL_ADC_ConfigChannel+0x698>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	fa93 f3a3 	rbit	r3, r3
 800429c:	613b      	str	r3, [r7, #16]
  return result;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d103      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80042a8:	2320      	movs	r3, #32
 80042aa:	e005      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x684>
 80042ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	3301      	adds	r3, #1
 80042ba:	f003 021f 	and.w	r2, r3, #31
 80042be:	4613      	mov	r3, r2
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	4413      	add	r3, r2
 80042c4:	3b1e      	subs	r3, #30
 80042c6:	051b      	lsls	r3, r3, #20
 80042c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042cc:	430b      	orrs	r3, r1
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	6892      	ldr	r2, [r2, #8]
 80042d2:	4619      	mov	r1, r3
 80042d4:	f7ff f9b2 	bl	800363c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b3d      	ldr	r3, [pc, #244]	; (80043d4 <HAL_ADC_ConfigChannel+0x7a0>)
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d06c      	beq.n	80043be <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042e4:	483c      	ldr	r0, [pc, #240]	; (80043d8 <HAL_ADC_ConfigChannel+0x7a4>)
 80042e6:	f7ff f907 	bl	80034f8 <LL_ADC_GetCommonPathInternalCh>
 80042ea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a3a      	ldr	r2, [pc, #232]	; (80043dc <HAL_ADC_ConfigChannel+0x7a8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d127      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d121      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a35      	ldr	r2, [pc, #212]	; (80043e0 <HAL_ADC_ConfigChannel+0x7ac>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d157      	bne.n	80043be <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800430e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004312:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004316:	4619      	mov	r1, r3
 8004318:	482f      	ldr	r0, [pc, #188]	; (80043d8 <HAL_ADC_ConfigChannel+0x7a4>)
 800431a:	f7ff f8da 	bl	80034d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800431e:	4b31      	ldr	r3, [pc, #196]	; (80043e4 <HAL_ADC_ConfigChannel+0x7b0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	099b      	lsrs	r3, r3, #6
 8004324:	4a30      	ldr	r2, [pc, #192]	; (80043e8 <HAL_ADC_ConfigChannel+0x7b4>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	099b      	lsrs	r3, r3, #6
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	4613      	mov	r3, r2
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004338:	e002      	b.n	8004340 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3b01      	subs	r3, #1
 800433e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f9      	bne.n	800433a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004346:	e03a      	b.n	80043be <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a27      	ldr	r2, [pc, #156]	; (80043ec <HAL_ADC_ConfigChannel+0x7b8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d113      	bne.n	800437a <HAL_ADC_ConfigChannel+0x746>
 8004352:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10d      	bne.n	800437a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1f      	ldr	r2, [pc, #124]	; (80043e0 <HAL_ADC_ConfigChannel+0x7ac>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d12a      	bne.n	80043be <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004368:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800436c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004370:	4619      	mov	r1, r3
 8004372:	4819      	ldr	r0, [pc, #100]	; (80043d8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004374:	f7ff f8ad 	bl	80034d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004378:	e021      	b.n	80043be <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1c      	ldr	r2, [pc, #112]	; (80043f0 <HAL_ADC_ConfigChannel+0x7bc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d11c      	bne.n	80043be <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004384:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d116      	bne.n	80043be <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a12      	ldr	r2, [pc, #72]	; (80043e0 <HAL_ADC_ConfigChannel+0x7ac>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d111      	bne.n	80043be <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800439a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800439e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043a2:	4619      	mov	r1, r3
 80043a4:	480c      	ldr	r0, [pc, #48]	; (80043d8 <HAL_ADC_ConfigChannel+0x7a4>)
 80043a6:	f7ff f894 	bl	80034d2 <LL_ADC_SetCommonPathInternalCh>
 80043aa:	e008      	b.n	80043be <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b0:	f043 0220 	orr.w	r2, r3, #32
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	37d8      	adds	r7, #216	; 0xd8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	80080000 	.word	0x80080000
 80043d8:	50040300 	.word	0x50040300
 80043dc:	c7520000 	.word	0xc7520000
 80043e0:	50040000 	.word	0x50040000
 80043e4:	20000018 	.word	0x20000018
 80043e8:	053e2d63 	.word	0x053e2d63
 80043ec:	cb840000 	.word	0xcb840000
 80043f0:	80000001 	.word	0x80000001

080043f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff f9df 	bl	80037c8 <LL_ADC_IsEnabled>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d169      	bne.n	80044e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	4b36      	ldr	r3, [pc, #216]	; (80044f0 <ADC_Enable+0xfc>)
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00d      	beq.n	800443a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	f043 0210 	orr.w	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	f043 0201 	orr.w	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e055      	b.n	80044e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff f99a 	bl	8003778 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004444:	482b      	ldr	r0, [pc, #172]	; (80044f4 <ADC_Enable+0x100>)
 8004446:	f7ff f857 	bl	80034f8 <LL_ADC_GetCommonPathInternalCh>
 800444a:	4603      	mov	r3, r0
 800444c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d013      	beq.n	800447c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004454:	4b28      	ldr	r3, [pc, #160]	; (80044f8 <ADC_Enable+0x104>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	099b      	lsrs	r3, r3, #6
 800445a:	4a28      	ldr	r2, [pc, #160]	; (80044fc <ADC_Enable+0x108>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	099b      	lsrs	r3, r3, #6
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	4613      	mov	r3, r2
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800446e:	e002      	b.n	8004476 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	3b01      	subs	r3, #1
 8004474:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f9      	bne.n	8004470 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800447c:	f7fe ffe6 	bl	800344c <HAL_GetTick>
 8004480:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004482:	e028      	b.n	80044d6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff f99d 	bl	80037c8 <LL_ADC_IsEnabled>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d104      	bne.n	800449e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff f96d 	bl	8003778 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800449e:	f7fe ffd5 	bl	800344c <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d914      	bls.n	80044d6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d00d      	beq.n	80044d6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	f043 0210 	orr.w	r2, r3, #16
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ca:	f043 0201 	orr.w	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e007      	b.n	80044e6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d1cf      	bne.n	8004484 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	8000003f 	.word	0x8000003f
 80044f4:	50040300 	.word	0x50040300
 80044f8:	20000018 	.word	0x20000018
 80044fc:	053e2d63 	.word	0x053e2d63

08004500 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff f96e 	bl	80037ee <LL_ADC_IsDisableOngoing>
 8004512:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff f955 	bl	80037c8 <LL_ADC_IsEnabled>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d047      	beq.n	80045b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d144      	bne.n	80045b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 030d 	and.w	r3, r3, #13
 8004534:	2b01      	cmp	r3, #1
 8004536:	d10c      	bne.n	8004552 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff f92f 	bl	80037a0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2203      	movs	r2, #3
 8004548:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800454a:	f7fe ff7f 	bl	800344c <HAL_GetTick>
 800454e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004550:	e029      	b.n	80045a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	f043 0210 	orr.w	r2, r3, #16
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004562:	f043 0201 	orr.w	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e023      	b.n	80045b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800456e:	f7fe ff6d 	bl	800344c <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d914      	bls.n	80045a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00d      	beq.n	80045a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	f043 0210 	orr.w	r2, r3, #16
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459a:	f043 0201 	orr.w	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e007      	b.n	80045b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1dc      	bne.n	800456e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d14b      	bne.n	8004670 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d021      	beq.n	8004636 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe ffe1 	bl	80035be <LL_ADC_REG_IsTriggerSourceSWStart>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d032      	beq.n	8004668 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d12b      	bne.n	8004668 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004614:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11f      	bne.n	8004668 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462c:	f043 0201 	orr.w	r2, r3, #1
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
 8004634:	e018      	b.n	8004668 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d111      	bne.n	8004668 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004660:	f043 0201 	orr.w	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f7fc fe05 	bl	8001278 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800466e:	e00e      	b.n	800468e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7ff facf 	bl	8003c20 <HAL_ADC_ErrorCallback>
}
 8004682:	e004      	b.n	800468e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	4798      	blx	r3
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7fc fdaf 	bl	8001208 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046aa:	bf00      	nop
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d0:	f043 0204 	orr.w	r2, r3, #4
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff faa1 	bl	8003c20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <LL_ADC_StartCalibration>:
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80046f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004702:	4313      	orrs	r3, r2
 8004704:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	609a      	str	r2, [r3, #8]
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <LL_ADC_IsCalibrationOnGoing>:
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004728:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800472c:	d101      	bne.n	8004732 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_ADCEx_Calibration_Start+0x1c>
 8004758:	2302      	movs	r3, #2
 800475a:	e04d      	b.n	80047f8 <HAL_ADCEx_Calibration_Start+0xb8>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7ff fecb 	bl	8004500 <ADC_Disable>
 800476a:	4603      	mov	r3, r0
 800476c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d136      	bne.n	80047e2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004778:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800477c:	f023 0302 	bic.w	r3, r3, #2
 8004780:	f043 0202 	orr.w	r2, r3, #2
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6839      	ldr	r1, [r7, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff ffa9 	bl	80046e6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004794:	e014      	b.n	80047c0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	3301      	adds	r3, #1
 800479a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80047a2:	d30d      	bcc.n	80047c0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	f023 0312 	bic.w	r3, r3, #18
 80047ac:	f043 0210 	orr.w	r2, r3, #16
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e01b      	b.n	80047f8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff ffa7 	bl	8004718 <LL_ADC_IsCalibrationOnGoing>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e2      	bne.n	8004796 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d4:	f023 0303 	bic.w	r3, r3, #3
 80047d8:	f043 0201 	orr.w	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	655a      	str	r2, [r3, #84]	; 0x54
 80047e0:	e005      	b.n	80047ee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e6:	f043 0210 	orr.w	r2, r3, #16
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004810:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <__NVIC_SetPriorityGrouping+0x44>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800481c:	4013      	ands	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800482c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004832:	4a04      	ldr	r2, [pc, #16]	; (8004844 <__NVIC_SetPriorityGrouping+0x44>)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	60d3      	str	r3, [r2, #12]
}
 8004838:	bf00      	nop
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	e000ed00 	.word	0xe000ed00

08004848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800484c:	4b04      	ldr	r3, [pc, #16]	; (8004860 <__NVIC_GetPriorityGrouping+0x18>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	0a1b      	lsrs	r3, r3, #8
 8004852:	f003 0307 	and.w	r3, r3, #7
}
 8004856:	4618      	mov	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	e000ed00 	.word	0xe000ed00

08004864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	2b00      	cmp	r3, #0
 8004874:	db0b      	blt.n	800488e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	f003 021f 	and.w	r2, r3, #31
 800487c:	4907      	ldr	r1, [pc, #28]	; (800489c <__NVIC_EnableIRQ+0x38>)
 800487e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	2001      	movs	r0, #1
 8004886:	fa00 f202 	lsl.w	r2, r0, r2
 800488a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	e000e100 	.word	0xe000e100

080048a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	6039      	str	r1, [r7, #0]
 80048aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	db0a      	blt.n	80048ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	490c      	ldr	r1, [pc, #48]	; (80048ec <__NVIC_SetPriority+0x4c>)
 80048ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048be:	0112      	lsls	r2, r2, #4
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	440b      	add	r3, r1
 80048c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048c8:	e00a      	b.n	80048e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	4908      	ldr	r1, [pc, #32]	; (80048f0 <__NVIC_SetPriority+0x50>)
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	3b04      	subs	r3, #4
 80048d8:	0112      	lsls	r2, r2, #4
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	440b      	add	r3, r1
 80048de:	761a      	strb	r2, [r3, #24]
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	e000e100 	.word	0xe000e100
 80048f0:	e000ed00 	.word	0xe000ed00

080048f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b089      	sub	sp, #36	; 0x24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f1c3 0307 	rsb	r3, r3, #7
 800490e:	2b04      	cmp	r3, #4
 8004910:	bf28      	it	cs
 8004912:	2304      	movcs	r3, #4
 8004914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	3304      	adds	r3, #4
 800491a:	2b06      	cmp	r3, #6
 800491c:	d902      	bls.n	8004924 <NVIC_EncodePriority+0x30>
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3b03      	subs	r3, #3
 8004922:	e000      	b.n	8004926 <NVIC_EncodePriority+0x32>
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43da      	mvns	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	401a      	ands	r2, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800493c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	fa01 f303 	lsl.w	r3, r1, r3
 8004946:	43d9      	mvns	r1, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800494c:	4313      	orrs	r3, r2
         );
}
 800494e:	4618      	mov	r0, r3
 8004950:	3724      	adds	r7, #36	; 0x24
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3b01      	subs	r3, #1
 8004968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800496c:	d301      	bcc.n	8004972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800496e:	2301      	movs	r3, #1
 8004970:	e00f      	b.n	8004992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004972:	4a0a      	ldr	r2, [pc, #40]	; (800499c <SysTick_Config+0x40>)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3b01      	subs	r3, #1
 8004978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800497a:	210f      	movs	r1, #15
 800497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004980:	f7ff ff8e 	bl	80048a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <SysTick_Config+0x40>)
 8004986:	2200      	movs	r2, #0
 8004988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800498a:	4b04      	ldr	r3, [pc, #16]	; (800499c <SysTick_Config+0x40>)
 800498c:	2207      	movs	r2, #7
 800498e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	e000e010 	.word	0xe000e010

080049a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff ff29 	bl	8004800 <__NVIC_SetPriorityGrouping>
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b086      	sub	sp, #24
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	4603      	mov	r3, r0
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049c8:	f7ff ff3e 	bl	8004848 <__NVIC_GetPriorityGrouping>
 80049cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	6978      	ldr	r0, [r7, #20]
 80049d4:	f7ff ff8e 	bl	80048f4 <NVIC_EncodePriority>
 80049d8:	4602      	mov	r2, r0
 80049da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049de:	4611      	mov	r1, r2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff ff5d 	bl	80048a0 <__NVIC_SetPriority>
}
 80049e6:	bf00      	nop
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	4603      	mov	r3, r0
 80049f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ff31 	bl	8004864 <__NVIC_EnableIRQ>
}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ffa2 	bl	800495c <SysTick_Config>
 8004a18:	4603      	mov	r3, r0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e014      	b.n	8004a5e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	791b      	ldrb	r3, [r3, #4]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d105      	bne.n	8004a4a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7fd fdf9 	bl	800263c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b088      	sub	sp, #32
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	795b      	ldrb	r3, [r3, #5]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_DAC_ConfigChannel+0x1c>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e107      	b.n	8004c92 <HAL_DAC_ConfigChannel+0x22c>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d174      	bne.n	8004b80 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004a96:	f7fe fcd9 	bl	800344c <HAL_GetTick>
 8004a9a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d134      	bne.n	8004b0c <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004aa2:	e011      	b.n	8004ac8 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004aa4:	f7fe fcd2 	bl	800344c <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d90a      	bls.n	8004ac8 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f043 0208 	orr.w	r2, r3, #8
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e0e4      	b.n	8004c92 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e6      	bne.n	8004aa4 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	f7fe fcc4 	bl	8003464 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	6992      	ldr	r2, [r2, #24]
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40
 8004ae6:	e01e      	b.n	8004b26 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ae8:	f7fe fcb0 	bl	800344c <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d90a      	bls.n	8004b0c <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f043 0208 	orr.w	r2, r3, #8
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2203      	movs	r2, #3
 8004b06:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e0c2      	b.n	8004c92 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	dbe8      	blt.n	8004ae8 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004b16:	2001      	movs	r0, #1
 8004b18:	f7fe fca4 	bl	8003464 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	6992      	ldr	r2, [r2, #24]
 8004b24:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004b36:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	ea02 0103 	and.w	r1, r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f003 0310 	and.w	r3, r3, #16
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	21ff      	movs	r1, #255	; 0xff
 8004b62:	fa01 f303 	lsl.w	r3, r1, r3
 8004b66:	43db      	mvns	r3, r3
 8004b68:	ea02 0103 	and.w	r1, r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6a1a      	ldr	r2, [r3, #32]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	409a      	lsls	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d11d      	bne.n	8004bc4 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	221f      	movs	r2, #31
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bca:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	2207      	movs	r2, #7
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	431a      	orrs	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6819      	ldr	r1, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43da      	mvns	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	400a      	ands	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	43db      	mvns	r3, r3
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4013      	ands	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6819      	ldr	r1, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	22c0      	movs	r2, #192	; 0xc0
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	43da      	mvns	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	400a      	ands	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e098      	b.n	8004de0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4b4d      	ldr	r3, [pc, #308]	; (8004dec <HAL_DMA_Init+0x150>)
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d80f      	bhi.n	8004cda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	4b4b      	ldr	r3, [pc, #300]	; (8004df0 <HAL_DMA_Init+0x154>)
 8004cc2:	4413      	add	r3, r2
 8004cc4:	4a4b      	ldr	r2, [pc, #300]	; (8004df4 <HAL_DMA_Init+0x158>)
 8004cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	009a      	lsls	r2, r3, #2
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a48      	ldr	r2, [pc, #288]	; (8004df8 <HAL_DMA_Init+0x15c>)
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40
 8004cd8:	e00e      	b.n	8004cf8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4b46      	ldr	r3, [pc, #280]	; (8004dfc <HAL_DMA_Init+0x160>)
 8004ce2:	4413      	add	r3, r2
 8004ce4:	4a43      	ldr	r2, [pc, #268]	; (8004df4 <HAL_DMA_Init+0x158>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	091b      	lsrs	r3, r3, #4
 8004cec:	009a      	lsls	r2, r3, #2
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a42      	ldr	r2, [pc, #264]	; (8004e00 <HAL_DMA_Init+0x164>)
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d52:	d039      	beq.n	8004dc8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	4a27      	ldr	r2, [pc, #156]	; (8004df8 <HAL_DMA_Init+0x15c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d11a      	bne.n	8004d94 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004d5e:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <HAL_DMA_Init+0x168>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d66:	f003 031c 	and.w	r3, r3, #28
 8004d6a:	210f      	movs	r1, #15
 8004d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d70:	43db      	mvns	r3, r3
 8004d72:	4924      	ldr	r1, [pc, #144]	; (8004e04 <HAL_DMA_Init+0x168>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004d78:	4b22      	ldr	r3, [pc, #136]	; (8004e04 <HAL_DMA_Init+0x168>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6859      	ldr	r1, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d84:	f003 031c 	and.w	r3, r3, #28
 8004d88:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8c:	491d      	ldr	r1, [pc, #116]	; (8004e04 <HAL_DMA_Init+0x168>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	600b      	str	r3, [r1, #0]
 8004d92:	e019      	b.n	8004dc8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004d94:	4b1c      	ldr	r3, [pc, #112]	; (8004e08 <HAL_DMA_Init+0x16c>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9c:	f003 031c 	and.w	r3, r3, #28
 8004da0:	210f      	movs	r1, #15
 8004da2:	fa01 f303 	lsl.w	r3, r1, r3
 8004da6:	43db      	mvns	r3, r3
 8004da8:	4917      	ldr	r1, [pc, #92]	; (8004e08 <HAL_DMA_Init+0x16c>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004dae:	4b16      	ldr	r3, [pc, #88]	; (8004e08 <HAL_DMA_Init+0x16c>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6859      	ldr	r1, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	f003 031c 	and.w	r3, r3, #28
 8004dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc2:	4911      	ldr	r1, [pc, #68]	; (8004e08 <HAL_DMA_Init+0x16c>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40020407 	.word	0x40020407
 8004df0:	bffdfff8 	.word	0xbffdfff8
 8004df4:	cccccccd 	.word	0xcccccccd
 8004df8:	40020000 	.word	0x40020000
 8004dfc:	bffdfbf8 	.word	0xbffdfbf8
 8004e00:	40020400 	.word	0x40020400
 8004e04:	400200a8 	.word	0x400200a8
 8004e08:	400204a8 	.word	0x400204a8

08004e0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_DMA_Start_IT+0x20>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e04b      	b.n	8004ec4 <HAL_DMA_Start_IT+0xb8>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d13a      	bne.n	8004eb6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f8e0 	bl	800502a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d008      	beq.n	8004e84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 020e 	orr.w	r2, r2, #14
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e00f      	b.n	8004ea4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0204 	bic.w	r2, r2, #4
 8004e92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 020a 	orr.w	r2, r2, #10
 8004ea2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e005      	b.n	8004ec2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee8:	f003 031c 	and.w	r3, r3, #28
 8004eec:	2204      	movs	r2, #4
 8004eee:	409a      	lsls	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d026      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x7a>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d021      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d107      	bne.n	8004f20 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0204 	bic.w	r2, r2, #4
 8004f1e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	f003 021c 	and.w	r2, r3, #28
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	2104      	movs	r1, #4
 8004f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f32:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d071      	beq.n	8005020 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004f44:	e06c      	b.n	8005020 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4a:	f003 031c 	and.w	r3, r3, #28
 8004f4e:	2202      	movs	r2, #2
 8004f50:	409a      	lsls	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4013      	ands	r3, r2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d02e      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0xec>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d029      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10b      	bne.n	8004f8a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 020a 	bic.w	r2, r2, #10
 8004f80:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8e:	f003 021c 	and.w	r2, r3, #28
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	2102      	movs	r1, #2
 8004f98:	fa01 f202 	lsl.w	r2, r1, r2
 8004f9c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d038      	beq.n	8005020 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004fb6:	e033      	b.n	8005020 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbc:	f003 031c 	and.w	r3, r3, #28
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	409a      	lsls	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d02a      	beq.n	8005022 <HAL_DMA_IRQHandler+0x156>
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d025      	beq.n	8005022 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 020e 	bic.w	r2, r2, #14
 8004fe4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	f003 021c 	and.w	r2, r3, #28
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	2b00      	cmp	r3, #0
 8005016:	d004      	beq.n	8005022 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005020:	bf00      	nop
 8005022:	bf00      	nop
}
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800502a:	b480      	push	{r7}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503c:	f003 021c 	and.w	r2, r3, #28
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	2101      	movs	r1, #1
 8005046:	fa01 f202 	lsl.w	r2, r1, r2
 800504a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b10      	cmp	r3, #16
 800505a:	d108      	bne.n	800506e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800506c:	e007      	b.n	800507e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	60da      	str	r2, [r3, #12]
}
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800509a:	e154      	b.n	8005346 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	2101      	movs	r1, #1
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	fa01 f303 	lsl.w	r3, r1, r3
 80050a8:	4013      	ands	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 8146 	beq.w	8005340 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f003 0303 	and.w	r3, r3, #3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d005      	beq.n	80050cc <HAL_GPIO_Init+0x40>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d130      	bne.n	800512e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	2203      	movs	r2, #3
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4013      	ands	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005102:	2201      	movs	r2, #1
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	43db      	mvns	r3, r3
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4013      	ands	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	f003 0201 	and.w	r2, r3, #1
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	2b03      	cmp	r3, #3
 8005138:	d017      	beq.n	800516a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	2203      	movs	r2, #3
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	43db      	mvns	r3, r3
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4013      	ands	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d123      	bne.n	80051be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	08da      	lsrs	r2, r3, #3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3208      	adds	r2, #8
 800517e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	220f      	movs	r2, #15
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	43db      	mvns	r3, r3
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4013      	ands	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	08da      	lsrs	r2, r3, #3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3208      	adds	r2, #8
 80051b8:	6939      	ldr	r1, [r7, #16]
 80051ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	2203      	movs	r2, #3
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	43db      	mvns	r3, r3
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4013      	ands	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f003 0203 	and.w	r2, r3, #3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 80a0 	beq.w	8005340 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005200:	4b58      	ldr	r3, [pc, #352]	; (8005364 <HAL_GPIO_Init+0x2d8>)
 8005202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005204:	4a57      	ldr	r2, [pc, #348]	; (8005364 <HAL_GPIO_Init+0x2d8>)
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	6613      	str	r3, [r2, #96]	; 0x60
 800520c:	4b55      	ldr	r3, [pc, #340]	; (8005364 <HAL_GPIO_Init+0x2d8>)
 800520e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	60bb      	str	r3, [r7, #8]
 8005216:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005218:	4a53      	ldr	r2, [pc, #332]	; (8005368 <HAL_GPIO_Init+0x2dc>)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	089b      	lsrs	r3, r3, #2
 800521e:	3302      	adds	r3, #2
 8005220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005224:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f003 0303 	and.w	r3, r3, #3
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	220f      	movs	r2, #15
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	43db      	mvns	r3, r3
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4013      	ands	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005242:	d019      	beq.n	8005278 <HAL_GPIO_Init+0x1ec>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a49      	ldr	r2, [pc, #292]	; (800536c <HAL_GPIO_Init+0x2e0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d013      	beq.n	8005274 <HAL_GPIO_Init+0x1e8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a48      	ldr	r2, [pc, #288]	; (8005370 <HAL_GPIO_Init+0x2e4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00d      	beq.n	8005270 <HAL_GPIO_Init+0x1e4>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a47      	ldr	r2, [pc, #284]	; (8005374 <HAL_GPIO_Init+0x2e8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d007      	beq.n	800526c <HAL_GPIO_Init+0x1e0>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a46      	ldr	r2, [pc, #280]	; (8005378 <HAL_GPIO_Init+0x2ec>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d101      	bne.n	8005268 <HAL_GPIO_Init+0x1dc>
 8005264:	2304      	movs	r3, #4
 8005266:	e008      	b.n	800527a <HAL_GPIO_Init+0x1ee>
 8005268:	2307      	movs	r3, #7
 800526a:	e006      	b.n	800527a <HAL_GPIO_Init+0x1ee>
 800526c:	2303      	movs	r3, #3
 800526e:	e004      	b.n	800527a <HAL_GPIO_Init+0x1ee>
 8005270:	2302      	movs	r3, #2
 8005272:	e002      	b.n	800527a <HAL_GPIO_Init+0x1ee>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <HAL_GPIO_Init+0x1ee>
 8005278:	2300      	movs	r3, #0
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	f002 0203 	and.w	r2, r2, #3
 8005280:	0092      	lsls	r2, r2, #2
 8005282:	4093      	lsls	r3, r2
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800528a:	4937      	ldr	r1, [pc, #220]	; (8005368 <HAL_GPIO_Init+0x2dc>)
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	089b      	lsrs	r3, r3, #2
 8005290:	3302      	adds	r3, #2
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005298:	4b38      	ldr	r3, [pc, #224]	; (800537c <HAL_GPIO_Init+0x2f0>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	43db      	mvns	r3, r3
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4013      	ands	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052bc:	4a2f      	ldr	r2, [pc, #188]	; (800537c <HAL_GPIO_Init+0x2f0>)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80052c2:	4b2e      	ldr	r3, [pc, #184]	; (800537c <HAL_GPIO_Init+0x2f0>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	43db      	mvns	r3, r3
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4013      	ands	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052e6:	4a25      	ldr	r2, [pc, #148]	; (800537c <HAL_GPIO_Init+0x2f0>)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80052ec:	4b23      	ldr	r3, [pc, #140]	; (800537c <HAL_GPIO_Init+0x2f0>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	43db      	mvns	r3, r3
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4013      	ands	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005310:	4a1a      	ldr	r2, [pc, #104]	; (800537c <HAL_GPIO_Init+0x2f0>)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005316:	4b19      	ldr	r3, [pc, #100]	; (800537c <HAL_GPIO_Init+0x2f0>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	43db      	mvns	r3, r3
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4013      	ands	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800533a:	4a10      	ldr	r2, [pc, #64]	; (800537c <HAL_GPIO_Init+0x2f0>)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	3301      	adds	r3, #1
 8005344:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	fa22 f303 	lsr.w	r3, r2, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	f47f aea3 	bne.w	800509c <HAL_GPIO_Init+0x10>
  }
}
 8005356:	bf00      	nop
 8005358:	bf00      	nop
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40021000 	.word	0x40021000
 8005368:	40010000 	.word	0x40010000
 800536c:	48000400 	.word	0x48000400
 8005370:	48000800 	.word	0x48000800
 8005374:	48000c00 	.word	0x48000c00
 8005378:	48001000 	.word	0x48001000
 800537c:	40010400 	.word	0x40010400

08005380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	807b      	strh	r3, [r7, #2]
 800538c:	4613      	mov	r3, r2
 800538e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005390:	787b      	ldrb	r3, [r7, #1]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005396:	887a      	ldrh	r2, [r7, #2]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800539c:	e002      	b.n	80053a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800539e:	887a      	ldrh	r2, [r7, #2]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053c2:	887a      	ldrh	r2, [r7, #2]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4013      	ands	r3, r2
 80053c8:	041a      	lsls	r2, r3, #16
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	43d9      	mvns	r1, r3
 80053ce:	887b      	ldrh	r3, [r7, #2]
 80053d0:	400b      	ands	r3, r1
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	619a      	str	r2, [r3, #24]
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e081      	b.n	80054fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fd f984 	bl	8002718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2224      	movs	r2, #36	; 0x24
 8005414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0201 	bic.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005434:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005444:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d107      	bne.n	800545e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800545a:	609a      	str	r2, [r3, #8]
 800545c:	e006      	b.n	800546c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800546a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d104      	bne.n	800547e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800547c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800548c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005490:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691a      	ldr	r2, [r3, #16]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69d9      	ldr	r1, [r3, #28]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1a      	ldr	r2, [r3, #32]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	607a      	str	r2, [r7, #4]
 800550e:	461a      	mov	r2, r3
 8005510:	460b      	mov	r3, r1
 8005512:	817b      	strh	r3, [r7, #10]
 8005514:	4613      	mov	r3, r2
 8005516:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b20      	cmp	r3, #32
 8005522:	f040 80da 	bne.w	80056da <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_I2C_Master_Transmit+0x30>
 8005530:	2302      	movs	r3, #2
 8005532:	e0d3      	b.n	80056dc <HAL_I2C_Master_Transmit+0x1d8>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800553c:	f7fd ff86 	bl	800344c <HAL_GetTick>
 8005540:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	2319      	movs	r3, #25
 8005548:	2201      	movs	r2, #1
 800554a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 fb4e 	bl	8005bf0 <I2C_WaitOnFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e0be      	b.n	80056dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2221      	movs	r2, #33	; 0x21
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2210      	movs	r2, #16
 800556a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	893a      	ldrh	r2, [r7, #8]
 800557e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558a:	b29b      	uxth	r3, r3
 800558c:	2bff      	cmp	r3, #255	; 0xff
 800558e:	d90e      	bls.n	80055ae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	22ff      	movs	r2, #255	; 0xff
 8005594:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559a:	b2da      	uxtb	r2, r3
 800559c:	8979      	ldrh	r1, [r7, #10]
 800559e:	4b51      	ldr	r3, [pc, #324]	; (80056e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 fd44 	bl	8006034 <I2C_TransferConfig>
 80055ac:	e06c      	b.n	8005688 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	8979      	ldrh	r1, [r7, #10]
 80055c0:	4b48      	ldr	r3, [pc, #288]	; (80056e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 fd33 	bl	8006034 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80055ce:	e05b      	b.n	8005688 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	6a39      	ldr	r1, [r7, #32]
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 fb4b 	bl	8005c70 <I2C_WaitOnTXISFlagUntilTimeout>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e07b      	b.n	80056dc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	781a      	ldrb	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005618:	b29b      	uxth	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d034      	beq.n	8005688 <HAL_I2C_Master_Transmit+0x184>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005622:	2b00      	cmp	r3, #0
 8005624:	d130      	bne.n	8005688 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	2200      	movs	r2, #0
 800562e:	2180      	movs	r1, #128	; 0x80
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 fadd 	bl	8005bf0 <I2C_WaitOnFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e04d      	b.n	80056dc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005644:	b29b      	uxth	r3, r3
 8005646:	2bff      	cmp	r3, #255	; 0xff
 8005648:	d90e      	bls.n	8005668 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	22ff      	movs	r2, #255	; 0xff
 800564e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005654:	b2da      	uxtb	r2, r3
 8005656:	8979      	ldrh	r1, [r7, #10]
 8005658:	2300      	movs	r3, #0
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 fce7 	bl	8006034 <I2C_TransferConfig>
 8005666:	e00f      	b.n	8005688 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005676:	b2da      	uxtb	r2, r3
 8005678:	8979      	ldrh	r1, [r7, #10]
 800567a:	2300      	movs	r3, #0
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 fcd6 	bl	8006034 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d19e      	bne.n	80055d0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	6a39      	ldr	r1, [r7, #32]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 fb2a 	bl	8005cf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e01a      	b.n	80056dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2220      	movs	r2, #32
 80056ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6859      	ldr	r1, [r3, #4]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <HAL_I2C_Master_Transmit+0x1e4>)
 80056ba:	400b      	ands	r3, r1
 80056bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	e000      	b.n	80056dc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80056da:	2302      	movs	r3, #2
  }
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	80002000 	.word	0x80002000
 80056e8:	fe00e800 	.word	0xfe00e800

080056ec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	607a      	str	r2, [r7, #4]
 80056f6:	461a      	mov	r2, r3
 80056f8:	460b      	mov	r3, r1
 80056fa:	817b      	strh	r3, [r7, #10]
 80056fc:	4613      	mov	r3, r2
 80056fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b20      	cmp	r3, #32
 800570a:	f040 80db 	bne.w	80058c4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_I2C_Master_Receive+0x30>
 8005718:	2302      	movs	r3, #2
 800571a:	e0d4      	b.n	80058c6 <HAL_I2C_Master_Receive+0x1da>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005724:	f7fd fe92 	bl	800344c <HAL_GetTick>
 8005728:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	2319      	movs	r3, #25
 8005730:	2201      	movs	r2, #1
 8005732:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fa5a 	bl	8005bf0 <I2C_WaitOnFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e0bf      	b.n	80058c6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2222      	movs	r2, #34	; 0x22
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2210      	movs	r2, #16
 8005752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	893a      	ldrh	r2, [r7, #8]
 8005766:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005772:	b29b      	uxth	r3, r3
 8005774:	2bff      	cmp	r3, #255	; 0xff
 8005776:	d90e      	bls.n	8005796 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	22ff      	movs	r2, #255	; 0xff
 800577c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005782:	b2da      	uxtb	r2, r3
 8005784:	8979      	ldrh	r1, [r7, #10]
 8005786:	4b52      	ldr	r3, [pc, #328]	; (80058d0 <HAL_I2C_Master_Receive+0x1e4>)
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 fc50 	bl	8006034 <I2C_TransferConfig>
 8005794:	e06d      	b.n	8005872 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	8979      	ldrh	r1, [r7, #10]
 80057a8:	4b49      	ldr	r3, [pc, #292]	; (80058d0 <HAL_I2C_Master_Receive+0x1e4>)
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 fc3f 	bl	8006034 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80057b6:	e05c      	b.n	8005872 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	6a39      	ldr	r1, [r7, #32]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fad3 	bl	8005d68 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e07c      	b.n	80058c6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d034      	beq.n	8005872 <HAL_I2C_Master_Receive+0x186>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580c:	2b00      	cmp	r3, #0
 800580e:	d130      	bne.n	8005872 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	2200      	movs	r2, #0
 8005818:	2180      	movs	r1, #128	; 0x80
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f9e8 	bl	8005bf0 <I2C_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e04d      	b.n	80058c6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	2bff      	cmp	r3, #255	; 0xff
 8005832:	d90e      	bls.n	8005852 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	22ff      	movs	r2, #255	; 0xff
 8005838:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583e:	b2da      	uxtb	r2, r3
 8005840:	8979      	ldrh	r1, [r7, #10]
 8005842:	2300      	movs	r3, #0
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 fbf2 	bl	8006034 <I2C_TransferConfig>
 8005850:	e00f      	b.n	8005872 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005860:	b2da      	uxtb	r2, r3
 8005862:	8979      	ldrh	r1, [r7, #10]
 8005864:	2300      	movs	r3, #0
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 fbe1 	bl	8006034 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d19d      	bne.n	80057b8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	6a39      	ldr	r1, [r7, #32]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 fa35 	bl	8005cf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e01a      	b.n	80058c6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2220      	movs	r2, #32
 8005896:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6859      	ldr	r1, [r3, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b0c      	ldr	r3, [pc, #48]	; (80058d4 <HAL_I2C_Master_Receive+0x1e8>)
 80058a4:	400b      	ands	r3, r1
 80058a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	e000      	b.n	80058c6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80058c4:	2302      	movs	r3, #2
  }
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	80002400 	.word	0x80002400
 80058d4:	fe00e800 	.word	0xfe00e800

080058d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af02      	add	r7, sp, #8
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	4608      	mov	r0, r1
 80058e2:	4611      	mov	r1, r2
 80058e4:	461a      	mov	r2, r3
 80058e6:	4603      	mov	r3, r0
 80058e8:	817b      	strh	r3, [r7, #10]
 80058ea:	460b      	mov	r3, r1
 80058ec:	813b      	strh	r3, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	f040 80f9 	bne.w	8005af2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <HAL_I2C_Mem_Write+0x34>
 8005906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005908:	2b00      	cmp	r3, #0
 800590a:	d105      	bne.n	8005918 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005912:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e0ed      	b.n	8005af4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_I2C_Mem_Write+0x4e>
 8005922:	2302      	movs	r3, #2
 8005924:	e0e6      	b.n	8005af4 <HAL_I2C_Mem_Write+0x21c>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800592e:	f7fd fd8d 	bl	800344c <HAL_GetTick>
 8005932:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	2319      	movs	r3, #25
 800593a:	2201      	movs	r2, #1
 800593c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f955 	bl	8005bf0 <I2C_WaitOnFlagUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e0d1      	b.n	8005af4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2221      	movs	r2, #33	; 0x21
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2240      	movs	r2, #64	; 0x40
 800595c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a3a      	ldr	r2, [r7, #32]
 800596a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005970:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005978:	88f8      	ldrh	r0, [r7, #6]
 800597a:	893a      	ldrh	r2, [r7, #8]
 800597c:	8979      	ldrh	r1, [r7, #10]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	9301      	str	r3, [sp, #4]
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	4603      	mov	r3, r0
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f8b9 	bl	8005b00 <I2C_RequestMemoryWrite>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0a9      	b.n	8005af4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2bff      	cmp	r3, #255	; 0xff
 80059a8:	d90e      	bls.n	80059c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	22ff      	movs	r2, #255	; 0xff
 80059ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	8979      	ldrh	r1, [r7, #10]
 80059b8:	2300      	movs	r3, #0
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 fb37 	bl	8006034 <I2C_TransferConfig>
 80059c6:	e00f      	b.n	80059e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	8979      	ldrh	r1, [r7, #10]
 80059da:	2300      	movs	r3, #0
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 fb26 	bl	8006034 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 f93f 	bl	8005c70 <I2C_WaitOnTXISFlagUntilTimeout>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e07b      	b.n	8005af4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	781a      	ldrb	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d034      	beq.n	8005aa0 <HAL_I2C_Mem_Write+0x1c8>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d130      	bne.n	8005aa0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	2200      	movs	r2, #0
 8005a46:	2180      	movs	r1, #128	; 0x80
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f8d1 	bl	8005bf0 <I2C_WaitOnFlagUntilTimeout>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e04d      	b.n	8005af4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2bff      	cmp	r3, #255	; 0xff
 8005a60:	d90e      	bls.n	8005a80 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	22ff      	movs	r2, #255	; 0xff
 8005a66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	8979      	ldrh	r1, [r7, #10]
 8005a70:	2300      	movs	r3, #0
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 fadb 	bl	8006034 <I2C_TransferConfig>
 8005a7e:	e00f      	b.n	8005aa0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	8979      	ldrh	r1, [r7, #10]
 8005a92:	2300      	movs	r3, #0
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 faca 	bl	8006034 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d19e      	bne.n	80059e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f91e 	bl	8005cf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e01a      	b.n	8005af4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6859      	ldr	r1, [r3, #4]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <HAL_I2C_Mem_Write+0x224>)
 8005ad2:	400b      	ands	r3, r1
 8005ad4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	e000      	b.n	8005af4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005af2:	2302      	movs	r3, #2
  }
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	fe00e800 	.word	0xfe00e800

08005b00 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	4608      	mov	r0, r1
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	817b      	strh	r3, [r7, #10]
 8005b12:	460b      	mov	r3, r1
 8005b14:	813b      	strh	r3, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	8979      	ldrh	r1, [r7, #10]
 8005b20:	4b20      	ldr	r3, [pc, #128]	; (8005ba4 <I2C_RequestMemoryWrite+0xa4>)
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 fa83 	bl	8006034 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b2e:	69fa      	ldr	r2, [r7, #28]
 8005b30:	69b9      	ldr	r1, [r7, #24]
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 f89c 	bl	8005c70 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e02c      	b.n	8005b9c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d105      	bne.n	8005b54 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b48:	893b      	ldrh	r3, [r7, #8]
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	629a      	str	r2, [r3, #40]	; 0x28
 8005b52:	e015      	b.n	8005b80 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b54:	893b      	ldrh	r3, [r7, #8]
 8005b56:	0a1b      	lsrs	r3, r3, #8
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	69b9      	ldr	r1, [r7, #24]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f882 	bl	8005c70 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e012      	b.n	8005b9c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b76:	893b      	ldrh	r3, [r7, #8]
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2200      	movs	r2, #0
 8005b88:	2180      	movs	r1, #128	; 0x80
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 f830 	bl	8005bf0 <I2C_WaitOnFlagUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	80002000 	.word	0x80002000

08005ba8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d103      	bne.n	8005bc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d007      	beq.n	8005be4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	619a      	str	r2, [r3, #24]
  }
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c00:	e022      	b.n	8005c48 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c08:	d01e      	beq.n	8005c48 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0a:	f7fd fc1f 	bl	800344c <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d302      	bcc.n	8005c20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d113      	bne.n	8005c48 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c24:	f043 0220 	orr.w	r2, r3, #32
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e00f      	b.n	8005c68 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699a      	ldr	r2, [r3, #24]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	4013      	ands	r3, r2
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	bf0c      	ite	eq
 8005c58:	2301      	moveq	r3, #1
 8005c5a:	2300      	movne	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	79fb      	ldrb	r3, [r7, #7]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d0cd      	beq.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c7c:	e02c      	b.n	8005cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	68b9      	ldr	r1, [r7, #8]
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f8ea 	bl	8005e5c <I2C_IsErrorOccurred>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e02a      	b.n	8005ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c98:	d01e      	beq.n	8005cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9a:	f7fd fbd7 	bl	800344c <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d302      	bcc.n	8005cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d113      	bne.n	8005cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb4:	f043 0220 	orr.w	r2, r3, #32
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e007      	b.n	8005ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d1cb      	bne.n	8005c7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cfc:	e028      	b.n	8005d50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f8aa 	bl	8005e5c <I2C_IsErrorOccurred>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e026      	b.n	8005d60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d12:	f7fd fb9b 	bl	800344c <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d302      	bcc.n	8005d28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d113      	bne.n	8005d50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2c:	f043 0220 	orr.w	r2, r3, #32
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e007      	b.n	8005d60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d1cf      	bne.n	8005cfe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d74:	e064      	b.n	8005e40 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	68b9      	ldr	r1, [r7, #8]
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 f86e 	bl	8005e5c <I2C_IsErrorOccurred>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e062      	b.n	8005e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	d138      	bne.n	8005e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	f003 0304 	and.w	r3, r3, #4
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d105      	bne.n	8005db2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	e04e      	b.n	8005e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b10      	cmp	r3, #16
 8005dbe:	d107      	bne.n	8005dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2210      	movs	r2, #16
 8005dc6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2204      	movs	r2, #4
 8005dcc:	645a      	str	r2, [r3, #68]	; 0x44
 8005dce:	e002      	b.n	8005dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6859      	ldr	r1, [r3, #4]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	4b1b      	ldr	r3, [pc, #108]	; (8005e58 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005dea:	400b      	ands	r3, r1
 8005dec:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e022      	b.n	8005e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e0a:	f7fd fb1f 	bl	800344c <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d302      	bcc.n	8005e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10f      	bne.n	8005e40 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e24:	f043 0220 	orr.w	r2, r3, #32
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e007      	b.n	8005e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d193      	bne.n	8005d76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	fe00e800 	.word	0xfe00e800

08005e5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08a      	sub	sp, #40	; 0x28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005e76:	2300      	movs	r3, #0
 8005e78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	f003 0310 	and.w	r3, r3, #16
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d075      	beq.n	8005f74 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2210      	movs	r2, #16
 8005e8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e90:	e056      	b.n	8005f40 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e98:	d052      	beq.n	8005f40 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e9a:	f7fd fad7 	bl	800344c <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d302      	bcc.n	8005eb0 <I2C_IsErrorOccurred+0x54>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d147      	bne.n	8005f40 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ec2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed2:	d12e      	bne.n	8005f32 <I2C_IsErrorOccurred+0xd6>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eda:	d02a      	beq.n	8005f32 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005edc:	7cfb      	ldrb	r3, [r7, #19]
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d027      	beq.n	8005f32 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ef0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005ef2:	f7fd faab 	bl	800344c <HAL_GetTick>
 8005ef6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ef8:	e01b      	b.n	8005f32 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005efa:	f7fd faa7 	bl	800344c <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b19      	cmp	r3, #25
 8005f06:	d914      	bls.n	8005f32 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0c:	f043 0220 	orr.w	r2, r3, #32
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d1dc      	bne.n	8005efa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b20      	cmp	r3, #32
 8005f4c:	d003      	beq.n	8005f56 <I2C_IsErrorOccurred+0xfa>
 8005f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d09d      	beq.n	8005e92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d103      	bne.n	8005f66 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2220      	movs	r2, #32
 8005f64:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	f043 0304 	orr.w	r3, r3, #4
 8005f6c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	f043 0308 	orr.w	r3, r3, #8
 8005fae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00b      	beq.n	8005fe2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	f043 0302 	orr.w	r3, r3, #2
 8005fd0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d01c      	beq.n	8006024 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7ff fddc 	bl	8005ba8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6859      	ldr	r1, [r3, #4]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4b0d      	ldr	r3, [pc, #52]	; (8006030 <I2C_IsErrorOccurred+0x1d4>)
 8005ffc:	400b      	ands	r3, r1
 8005ffe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	431a      	orrs	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006028:	4618      	mov	r0, r3
 800602a:	3728      	adds	r7, #40	; 0x28
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	fe00e800 	.word	0xfe00e800

08006034 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	607b      	str	r3, [r7, #4]
 800603e:	460b      	mov	r3, r1
 8006040:	817b      	strh	r3, [r7, #10]
 8006042:	4613      	mov	r3, r2
 8006044:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006046:	897b      	ldrh	r3, [r7, #10]
 8006048:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800604c:	7a7b      	ldrb	r3, [r7, #9]
 800604e:	041b      	lsls	r3, r3, #16
 8006050:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006054:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	4313      	orrs	r3, r2
 800605e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006062:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	0d5b      	lsrs	r3, r3, #21
 800606e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006072:	4b08      	ldr	r3, [pc, #32]	; (8006094 <I2C_TransferConfig+0x60>)
 8006074:	430b      	orrs	r3, r1
 8006076:	43db      	mvns	r3, r3
 8006078:	ea02 0103 	and.w	r1, r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	03ff63ff 	.word	0x03ff63ff

08006098 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d138      	bne.n	8006120 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e032      	b.n	8006122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2224      	movs	r2, #36	; 0x24
 80060c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0201 	bic.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6819      	ldr	r1, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	e000      	b.n	8006122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006120:	2302      	movs	r3, #2
  }
}
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b20      	cmp	r3, #32
 8006142:	d139      	bne.n	80061b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800614e:	2302      	movs	r3, #2
 8006150:	e033      	b.n	80061ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2224      	movs	r2, #36	; 0x24
 800615e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0201 	bic.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006180:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	021b      	lsls	r3, r3, #8
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0201 	orr.w	r2, r2, #1
 80061a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	e000      	b.n	80061ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80061b8:	2302      	movs	r3, #2
  }
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e0c3      	b.n	8006366 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b05      	cmp	r3, #5
 80061e8:	d101      	bne.n	80061ee <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e0bb      	b.n	8006366 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d101      	bne.n	80061fe <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e0b3      	b.n	8006366 <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d103      	bne.n	800621a <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fc fb18 	bl	8002850 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800622e:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2b08      	cmp	r3, #8
 8006236:	d11b      	bne.n	8006270 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8006242:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6891      	ldr	r1, [r2, #8]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	68d2      	ldr	r2, [r2, #12]
 800624e:	4311      	orrs	r1, r2
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6992      	ldr	r2, [r2, #24]
 8006254:	4311      	orrs	r1, r2
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6912      	ldr	r2, [r2, #16]
 800625a:	4311      	orrs	r1, r2
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6952      	ldr	r2, [r2, #20]
 8006260:	4311      	orrs	r1, r2
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	69d2      	ldr	r2, [r2, #28]
 8006266:	4311      	orrs	r1, r2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6812      	ldr	r2, [r2, #0]
 800626c:	430b      	orrs	r3, r1
 800626e:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	2b0c      	cmp	r3, #12
 8006276:	d115      	bne.n	80062a4 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8006282:	f023 030e 	bic.w	r3, r3, #14
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6891      	ldr	r1, [r2, #8]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	68d2      	ldr	r2, [r2, #12]
 800628e:	4311      	orrs	r1, r2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6952      	ldr	r2, [r2, #20]
 8006294:	4311      	orrs	r1, r2
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	69d2      	ldr	r2, [r2, #28]
 800629a:	4311      	orrs	r1, r2
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6812      	ldr	r2, [r2, #0]
 80062a0:	430b      	orrs	r3, r1
 80062a2:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d118      	bne.n	80062de <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 80062b6:	f023 030e 	bic.w	r3, r3, #14
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6891      	ldr	r1, [r2, #8]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	68d2      	ldr	r2, [r2, #12]
 80062c2:	4311      	orrs	r1, r2
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	6912      	ldr	r2, [r2, #16]
 80062c8:	4311      	orrs	r1, r2
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6952      	ldr	r2, [r2, #20]
 80062ce:	4311      	orrs	r1, r2
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	69d2      	ldr	r2, [r2, #28]
 80062d4:	4311      	orrs	r1, r2
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	430b      	orrs	r3, r1
 80062dc:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062e6:	d12a      	bne.n	800633e <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d013      	beq.n	8006318 <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006308:	f023 031f 	bic.w	r3, r3, #31
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6812      	ldr	r2, [r2, #0]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	430b      	orrs	r3, r1
 8006314:	6053      	str	r3, [r2, #4]
 8006316:	e012      	b.n	800633e <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631c:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8006322:	4313      	orrs	r3, r2
 8006324:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006330:	f023 031f 	bic.w	r3, r3, #31
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6812      	ldr	r2, [r2, #0]
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	430b      	orrs	r3, r1
 800633c:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 800633e:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <HAL_OPAMP_Init+0x1a8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4909      	ldr	r1, [pc, #36]	; (8006370 <HAL_OPAMP_Init+0x1a8>)
 800634c:	4313      	orrs	r3, r2
 800634e:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d103      	bne.n	8006364 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8006364:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	40007800 	.word	0x40007800

08006374 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d102      	bne.n	800638c <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	73fb      	strb	r3, [r7, #15]
 800638a:	e01d      	b.n	80063c8 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b05      	cmp	r3, #5
 8006396:	d102      	bne.n	800639e <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	73fb      	strb	r3, [r7, #15]
 800639c:	e014      	b.n	80063c8 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d10c      	bne.n	80063c4 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f042 0201 	orr.w	r2, r2, #1
 80063b8:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2204      	movs	r2, #4
 80063be:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80063c2:	e001      	b.n	80063c8 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status

  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b088      	sub	sp, #32
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	77fb      	strb	r3, [r7, #31]

  __IO uint32_t* tmp_opamp_reg_trimming;   /* Selection of register of trimming depending on power mode: OTR or LPOTR */

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	77fb      	strb	r3, [r7, #31]
 80063ec:	e10d      	b.n	800660a <HAL_OPAMP_SelfCalibrate+0x234>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b05      	cmp	r3, #5
 80063f8:	d102      	bne.n	8006400 <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	77fb      	strb	r3, [r7, #31]
 80063fe:	e104      	b.n	800660a <HAL_OPAMP_SelfCalibrate+0x234>
  }
  else
  {
    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if(hopamp->State ==  HAL_OPAMP_STATE_READY)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	f040 80fc 	bne.w	8006606 <HAL_OPAMP_SelfCalibrate+0x230>
      assert_param(IS_OPAMP_POWERMODE(hopamp->Init.PowerMode));

      /* Save OPAMP mode as in                                       */
      /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx */
      /* the calibration is not working in PGA mode                  */
      opampmode = READ_BIT(hopamp->Instance->CSR,OPAMP_CSR_OPAMODE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 030c 	and.w	r3, r3, #12
 8006418:	60bb      	str	r3, [r7, #8]

      /* Use of standalone mode */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_OPAMODE, OPAMP_STANDALONE_MODE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 020c 	bic.w	r2, r2, #12
 8006428:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006438:	601a      	str	r2, [r3, #0]

      /* Select trimming settings depending on power mode */
      if (hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d104      	bne.n	800644c <HAL_OPAMP_SelfCalibrate+0x76>
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->OTR;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3304      	adds	r3, #4
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	e003      	b.n	8006454 <HAL_OPAMP_SelfCalibrate+0x7e>
      }
      else
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->LPOTR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3308      	adds	r3, #8
 8006452:	60fb      	str	r3, [r7, #12]
      }

      /* Enable calibration */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006462:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALSEL);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006472:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16U;
 8006484:	2310      	movs	r3, #16
 8006486:	61bb      	str	r3, [r7, #24]
      delta = 8U;
 8006488:	2308      	movs	r3, #8
 800648a:	613b      	str	r3, [r7, #16]

      while (delta != 0U)
 800648c:	e01d      	b.n	80064ca <HAL_OPAMP_SelfCalibrate+0xf4>
      {
        /* Set candidate trimming */
        /* OPAMP_POWERMODE_NORMALPOWER */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f023 021f 	bic.w	r2, r3, #31
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	431a      	orrs	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 800649e:	2001      	movs	r0, #1
 80064a0:	f7fc ffe0 	bl	8003464 <HAL_Delay>

        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d004      	beq.n	80064bc <HAL_OPAMP_SelfCalibrate+0xe6>
        {
          /* OPAMP_CSR_CALOUT is HIGH try higher trimming */
          trimmingvaluen -= delta;
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	e003      	b.n	80064c4 <HAL_OPAMP_SelfCalibrate+0xee>
        }
        else
        {
          /* OPAMP_CSR_CALOUT is LOW try lower trimming */
          trimmingvaluen += delta;
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	4413      	add	r3, r2
 80064c2:	61bb      	str	r3, [r7, #24]
        }
        /* Divide range by 2 to continue dichotomy sweep */
        delta >>= 1U;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	613b      	str	r3, [r7, #16]
      while (delta != 0U)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1de      	bne.n	800648e <HAL_OPAMP_SelfCalibrate+0xb8>
      }

      /* Still need to check if right calibration is current value or one step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 0 to 1  */
      /* Set candidate trimming */
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f023 021f 	bic.w	r2, r3, #31
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	431a      	orrs	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 80064e0:	2001      	movs	r0, #1
 80064e2:	f7fc ffbf 	bl	8003464 <HAL_Delay>

      if ((READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT)) == 0U)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <HAL_OPAMP_SelfCalibrate+0x134>
      {
        /* Trimming value is actually one value more */
        trimmingvaluen++;
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	3301      	adds	r3, #1
 80064f8:	61bb      	str	r3, [r7, #24]
        /* Set right trimming */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f023 021f 	bic.w	r2, r3, #31
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	431a      	orrs	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALSEL);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006518:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16U;
 800651a:	2310      	movs	r3, #16
 800651c:	617b      	str	r3, [r7, #20]
      delta = 8U;
 800651e:	2308      	movs	r3, #8
 8006520:	613b      	str	r3, [r7, #16]

      while (delta != 0U)
 8006522:	e01e      	b.n	8006562 <HAL_OPAMP_SelfCalibrate+0x18c>
      {
        /* Set candidate trimming */
        /* OPAMP_POWERMODE_NORMALPOWER */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	431a      	orrs	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 8006536:	2001      	movs	r0, #1
 8006538:	f7fc ff94 	bl	8003464 <HAL_Delay>

        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d004      	beq.n	8006554 <HAL_OPAMP_SelfCalibrate+0x17e>
        {
          /* OPAMP_CSR_CALOUT is HIGH try higher trimming */
          trimmingvaluep += delta;
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	4413      	add	r3, r2
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	e003      	b.n	800655c <HAL_OPAMP_SelfCalibrate+0x186>
        }
        else
        {
          /* OPAMP_CSR_CALOUT  is LOW try lower trimming */
          trimmingvaluep -= delta;
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	617b      	str	r3, [r7, #20]
        }

        /* Divide range by 2 to continue dichotomy sweep */
        delta >>= 1U;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	085b      	lsrs	r3, r3, #1
 8006560:	613b      	str	r3, [r7, #16]
      while (delta != 0U)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1dd      	bne.n	8006524 <HAL_OPAMP_SelfCalibrate+0x14e>
      }

      /* Still need to check if right calibration is current value or one step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      /* Set candidate trimming */
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	021b      	lsls	r3, r3, #8
 8006574:	431a      	orrs	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 800657a:	2001      	movs	r0, #1
 800657c:	f7fc ff72 	bl	8003464 <HAL_Delay>

      if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00b      	beq.n	80065a6 <HAL_OPAMP_SelfCalibrate+0x1d0>
      {
        /* Trimming value is actually one value more */
        trimmingvaluep++;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	3301      	adds	r3, #1
 8006592:	617b      	str	r3, [r7, #20]
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	021b      	lsls	r3, r3, #8
 80065a0:	431a      	orrs	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	601a      	str	r2, [r3, #0]
      }

      /* Disable the OPAMP */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0201 	bic.w	r2, r2, #1
 80065b4:	601a      	str	r2, [r3, #0]

      /* Disable calibration & set normal mode (operating mode) */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065c4:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user trimming) results in init structure. */

      /* Set user trimming mode */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80065cc:	61da      	str	r2, [r3, #28]

      /* Affect calibration parameters depending on mode normal/low power */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d006      	beq.n	80065e4 <HAL_OPAMP_SelfCalibrate+0x20e>
      {
        /* Write calibration result N */
        hopamp->Init.TrimmingValueN = trimmingvaluen;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	625a      	str	r2, [r3, #36]	; 0x24
        /* Write calibration result P */
        hopamp->Init.TrimmingValueP = trimmingvaluep;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	621a      	str	r2, [r3, #32]
 80065e2:	e005      	b.n	80065f0 <HAL_OPAMP_SelfCalibrate+0x21a>
      }
      else
      {
        /* Write calibration result N */
        hopamp->Init.TrimmingValueNLowPower = trimmingvaluen;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	62da      	str	r2, [r3, #44]	; 0x2c
        /* Write calibration result P */
        hopamp->Init.TrimmingValuePLowPower = trimmingvaluep;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	629a      	str	r2, [r3, #40]	; 0x28
      }

    /* Restore OPAMP mode after calibration */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_OPAMODE, opampmode);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f023 010c 	bic.w	r1, r3, #12
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	430a      	orrs	r2, r1
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	e001      	b.n	800660a <HAL_OPAMP_SelfCalibrate+0x234>
    }
    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 800660a:	7ffb      	ldrb	r3, [r7, #31]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3720      	adds	r7, #32
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006618:	4b04      	ldr	r3, [pc, #16]	; (800662c <HAL_PWREx_GetVoltageRange+0x18>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006620:	4618      	mov	r0, r3
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	40007000 	.word	0x40007000

08006630 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800663e:	d130      	bne.n	80066a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006640:	4b23      	ldr	r3, [pc, #140]	; (80066d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800664c:	d038      	beq.n	80066c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800664e:	4b20      	ldr	r3, [pc, #128]	; (80066d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006656:	4a1e      	ldr	r2, [pc, #120]	; (80066d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006658:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800665c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800665e:	4b1d      	ldr	r3, [pc, #116]	; (80066d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2232      	movs	r2, #50	; 0x32
 8006664:	fb02 f303 	mul.w	r3, r2, r3
 8006668:	4a1b      	ldr	r2, [pc, #108]	; (80066d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800666a:	fba2 2303 	umull	r2, r3, r2, r3
 800666e:	0c9b      	lsrs	r3, r3, #18
 8006670:	3301      	adds	r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006674:	e002      	b.n	800667c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3b01      	subs	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800667c:	4b14      	ldr	r3, [pc, #80]	; (80066d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006688:	d102      	bne.n	8006690 <HAL_PWREx_ControlVoltageScaling+0x60>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1f2      	bne.n	8006676 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006690:	4b0f      	ldr	r3, [pc, #60]	; (80066d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800669c:	d110      	bne.n	80066c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e00f      	b.n	80066c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80066a2:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ae:	d007      	beq.n	80066c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80066b0:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066b8:	4a05      	ldr	r2, [pc, #20]	; (80066d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40007000 	.word	0x40007000
 80066d4:	20000018 	.word	0x20000018
 80066d8:	431bde83 	.word	0x431bde83

080066dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e3fe      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066ee:	4ba1      	ldr	r3, [pc, #644]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 030c 	and.w	r3, r3, #12
 80066f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066f8:	4b9e      	ldr	r3, [pc, #632]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0303 	and.w	r3, r3, #3
 8006700:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 80e4 	beq.w	80068d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d007      	beq.n	8006726 <HAL_RCC_OscConfig+0x4a>
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	2b0c      	cmp	r3, #12
 800671a:	f040 808b 	bne.w	8006834 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b01      	cmp	r3, #1
 8006722:	f040 8087 	bne.w	8006834 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006726:	4b93      	ldr	r3, [pc, #588]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d005      	beq.n	800673e <HAL_RCC_OscConfig+0x62>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e3d6      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1a      	ldr	r2, [r3, #32]
 8006742:	4b8c      	ldr	r3, [pc, #560]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d004      	beq.n	8006758 <HAL_RCC_OscConfig+0x7c>
 800674e:	4b89      	ldr	r3, [pc, #548]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006756:	e005      	b.n	8006764 <HAL_RCC_OscConfig+0x88>
 8006758:	4b86      	ldr	r3, [pc, #536]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 800675a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800675e:	091b      	lsrs	r3, r3, #4
 8006760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006764:	4293      	cmp	r3, r2
 8006766:	d223      	bcs.n	80067b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fd53 	bl	8007218 <RCC_SetFlashLatencyFromMSIRange>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e3b7      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800677c:	4b7d      	ldr	r3, [pc, #500]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a7c      	ldr	r2, [pc, #496]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006782:	f043 0308 	orr.w	r3, r3, #8
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	4b7a      	ldr	r3, [pc, #488]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	4977      	ldr	r1, [pc, #476]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006796:	4313      	orrs	r3, r2
 8006798:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800679a:	4b76      	ldr	r3, [pc, #472]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	4972      	ldr	r1, [pc, #456]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	604b      	str	r3, [r1, #4]
 80067ae:	e025      	b.n	80067fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067b0:	4b70      	ldr	r3, [pc, #448]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a6f      	ldr	r2, [pc, #444]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 80067b6:	f043 0308 	orr.w	r3, r3, #8
 80067ba:	6013      	str	r3, [r2, #0]
 80067bc:	4b6d      	ldr	r3, [pc, #436]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	496a      	ldr	r1, [pc, #424]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067ce:	4b69      	ldr	r3, [pc, #420]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	021b      	lsls	r3, r3, #8
 80067dc:	4965      	ldr	r1, [pc, #404]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d109      	bne.n	80067fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 fd13 	bl	8007218 <RCC_SetFlashLatencyFromMSIRange>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e377      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80067fc:	f000 fc80 	bl	8007100 <HAL_RCC_GetSysClockFreq>
 8006800:	4602      	mov	r2, r0
 8006802:	4b5c      	ldr	r3, [pc, #368]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	091b      	lsrs	r3, r3, #4
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	495a      	ldr	r1, [pc, #360]	; (8006978 <HAL_RCC_OscConfig+0x29c>)
 800680e:	5ccb      	ldrb	r3, [r1, r3]
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	fa22 f303 	lsr.w	r3, r2, r3
 8006818:	4a58      	ldr	r2, [pc, #352]	; (800697c <HAL_RCC_OscConfig+0x2a0>)
 800681a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800681c:	4b58      	ldr	r3, [pc, #352]	; (8006980 <HAL_RCC_OscConfig+0x2a4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4618      	mov	r0, r3
 8006822:	f7fc fdc3 	bl	80033ac <HAL_InitTick>
 8006826:	4603      	mov	r3, r0
 8006828:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d052      	beq.n	80068d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	e35b      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d032      	beq.n	80068a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800683c:	4b4d      	ldr	r3, [pc, #308]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a4c      	ldr	r2, [pc, #304]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006848:	f7fc fe00 	bl	800344c <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006850:	f7fc fdfc 	bl	800344c <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e344      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006862:	4b44      	ldr	r3, [pc, #272]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0f0      	beq.n	8006850 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800686e:	4b41      	ldr	r3, [pc, #260]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a40      	ldr	r2, [pc, #256]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006874:	f043 0308 	orr.w	r3, r3, #8
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	4b3e      	ldr	r3, [pc, #248]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	493b      	ldr	r1, [pc, #236]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006888:	4313      	orrs	r3, r2
 800688a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800688c:	4b39      	ldr	r3, [pc, #228]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	4936      	ldr	r1, [pc, #216]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 800689c:	4313      	orrs	r3, r2
 800689e:	604b      	str	r3, [r1, #4]
 80068a0:	e01a      	b.n	80068d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80068a2:	4b34      	ldr	r3, [pc, #208]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a33      	ldr	r2, [pc, #204]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 80068a8:	f023 0301 	bic.w	r3, r3, #1
 80068ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80068ae:	f7fc fdcd 	bl	800344c <HAL_GetTick>
 80068b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80068b4:	e008      	b.n	80068c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80068b6:	f7fc fdc9 	bl	800344c <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d901      	bls.n	80068c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e311      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80068c8:	4b2a      	ldr	r3, [pc, #168]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1f0      	bne.n	80068b6 <HAL_RCC_OscConfig+0x1da>
 80068d4:	e000      	b.n	80068d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80068d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d074      	beq.n	80069ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	2b08      	cmp	r3, #8
 80068e8:	d005      	beq.n	80068f6 <HAL_RCC_OscConfig+0x21a>
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	2b0c      	cmp	r3, #12
 80068ee:	d10e      	bne.n	800690e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d10b      	bne.n	800690e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068f6:	4b1f      	ldr	r3, [pc, #124]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d064      	beq.n	80069cc <HAL_RCC_OscConfig+0x2f0>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d160      	bne.n	80069cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e2ee      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006916:	d106      	bne.n	8006926 <HAL_RCC_OscConfig+0x24a>
 8006918:	4b16      	ldr	r3, [pc, #88]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a15      	ldr	r2, [pc, #84]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 800691e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	e01d      	b.n	8006962 <HAL_RCC_OscConfig+0x286>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800692e:	d10c      	bne.n	800694a <HAL_RCC_OscConfig+0x26e>
 8006930:	4b10      	ldr	r3, [pc, #64]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a0f      	ldr	r2, [pc, #60]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	4b0d      	ldr	r3, [pc, #52]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a0c      	ldr	r2, [pc, #48]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	e00b      	b.n	8006962 <HAL_RCC_OscConfig+0x286>
 800694a:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a09      	ldr	r2, [pc, #36]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	4b07      	ldr	r3, [pc, #28]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a06      	ldr	r2, [pc, #24]	; (8006974 <HAL_RCC_OscConfig+0x298>)
 800695c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006960:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d01c      	beq.n	80069a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696a:	f7fc fd6f 	bl	800344c <HAL_GetTick>
 800696e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006970:	e011      	b.n	8006996 <HAL_RCC_OscConfig+0x2ba>
 8006972:	bf00      	nop
 8006974:	40021000 	.word	0x40021000
 8006978:	0800d1c4 	.word	0x0800d1c4
 800697c:	20000018 	.word	0x20000018
 8006980:	2000002c 	.word	0x2000002c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006984:	f7fc fd62 	bl	800344c <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b64      	cmp	r3, #100	; 0x64
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e2aa      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006996:	4baf      	ldr	r3, [pc, #700]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0f0      	beq.n	8006984 <HAL_RCC_OscConfig+0x2a8>
 80069a2:	e014      	b.n	80069ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a4:	f7fc fd52 	bl	800344c <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069ac:	f7fc fd4e 	bl	800344c <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b64      	cmp	r3, #100	; 0x64
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e296      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069be:	4ba5      	ldr	r3, [pc, #660]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1f0      	bne.n	80069ac <HAL_RCC_OscConfig+0x2d0>
 80069ca:	e000      	b.n	80069ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d060      	beq.n	8006a9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	2b04      	cmp	r3, #4
 80069de:	d005      	beq.n	80069ec <HAL_RCC_OscConfig+0x310>
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	2b0c      	cmp	r3, #12
 80069e4:	d119      	bne.n	8006a1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d116      	bne.n	8006a1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069ec:	4b99      	ldr	r3, [pc, #612]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <HAL_RCC_OscConfig+0x328>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e273      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a04:	4b93      	ldr	r3, [pc, #588]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	061b      	lsls	r3, r3, #24
 8006a12:	4990      	ldr	r1, [pc, #576]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a18:	e040      	b.n	8006a9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d023      	beq.n	8006a6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a22:	4b8c      	ldr	r3, [pc, #560]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a8b      	ldr	r2, [pc, #556]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2e:	f7fc fd0d 	bl	800344c <HAL_GetTick>
 8006a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a34:	e008      	b.n	8006a48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a36:	f7fc fd09 	bl	800344c <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d901      	bls.n	8006a48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e251      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a48:	4b82      	ldr	r3, [pc, #520]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0f0      	beq.n	8006a36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a54:	4b7f      	ldr	r3, [pc, #508]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	061b      	lsls	r3, r3, #24
 8006a62:	497c      	ldr	r1, [pc, #496]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	604b      	str	r3, [r1, #4]
 8006a68:	e018      	b.n	8006a9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a6a:	4b7a      	ldr	r3, [pc, #488]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a79      	ldr	r2, [pc, #484]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a76:	f7fc fce9 	bl	800344c <HAL_GetTick>
 8006a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a7c:	e008      	b.n	8006a90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a7e:	f7fc fce5 	bl	800344c <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e22d      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a90:	4b70      	ldr	r3, [pc, #448]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1f0      	bne.n	8006a7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d03c      	beq.n	8006b22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d01c      	beq.n	8006aea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ab0:	4b68      	ldr	r3, [pc, #416]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ab6:	4a67      	ldr	r2, [pc, #412]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006ab8:	f043 0301 	orr.w	r3, r3, #1
 8006abc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac0:	f7fc fcc4 	bl	800344c <HAL_GetTick>
 8006ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ac8:	f7fc fcc0 	bl	800344c <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e208      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ada:	4b5e      	ldr	r3, [pc, #376]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0ef      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x3ec>
 8006ae8:	e01b      	b.n	8006b22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006aea:	4b5a      	ldr	r3, [pc, #360]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006af0:	4a58      	ldr	r2, [pc, #352]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006af2:	f023 0301 	bic.w	r3, r3, #1
 8006af6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006afa:	f7fc fca7 	bl	800344c <HAL_GetTick>
 8006afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b00:	e008      	b.n	8006b14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b02:	f7fc fca3 	bl	800344c <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e1eb      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b14:	4b4f      	ldr	r3, [pc, #316]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1ef      	bne.n	8006b02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 80a6 	beq.w	8006c7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b30:	2300      	movs	r3, #0
 8006b32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006b34:	4b47      	ldr	r3, [pc, #284]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10d      	bne.n	8006b5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b40:	4b44      	ldr	r3, [pc, #272]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b44:	4a43      	ldr	r2, [pc, #268]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8006b4c:	4b41      	ldr	r3, [pc, #260]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b54:	60bb      	str	r3, [r7, #8]
 8006b56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b5c:	4b3e      	ldr	r3, [pc, #248]	; (8006c58 <HAL_RCC_OscConfig+0x57c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d118      	bne.n	8006b9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b68:	4b3b      	ldr	r3, [pc, #236]	; (8006c58 <HAL_RCC_OscConfig+0x57c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a3a      	ldr	r2, [pc, #232]	; (8006c58 <HAL_RCC_OscConfig+0x57c>)
 8006b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b74:	f7fc fc6a 	bl	800344c <HAL_GetTick>
 8006b78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b7c:	f7fc fc66 	bl	800344c <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e1ae      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b8e:	4b32      	ldr	r3, [pc, #200]	; (8006c58 <HAL_RCC_OscConfig+0x57c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0f0      	beq.n	8006b7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d108      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x4d8>
 8006ba2:	4b2c      	ldr	r3, [pc, #176]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba8:	4a2a      	ldr	r2, [pc, #168]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006baa:	f043 0301 	orr.w	r3, r3, #1
 8006bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bb2:	e024      	b.n	8006bfe <HAL_RCC_OscConfig+0x522>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	2b05      	cmp	r3, #5
 8006bba:	d110      	bne.n	8006bde <HAL_RCC_OscConfig+0x502>
 8006bbc:	4b25      	ldr	r3, [pc, #148]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc2:	4a24      	ldr	r2, [pc, #144]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006bc4:	f043 0304 	orr.w	r3, r3, #4
 8006bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bcc:	4b21      	ldr	r3, [pc, #132]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd2:	4a20      	ldr	r2, [pc, #128]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006bd4:	f043 0301 	orr.w	r3, r3, #1
 8006bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bdc:	e00f      	b.n	8006bfe <HAL_RCC_OscConfig+0x522>
 8006bde:	4b1d      	ldr	r3, [pc, #116]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be4:	4a1b      	ldr	r2, [pc, #108]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006be6:	f023 0301 	bic.w	r3, r3, #1
 8006bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bee:	4b19      	ldr	r3, [pc, #100]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf4:	4a17      	ldr	r2, [pc, #92]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006bf6:	f023 0304 	bic.w	r3, r3, #4
 8006bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d016      	beq.n	8006c34 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c06:	f7fc fc21 	bl	800344c <HAL_GetTick>
 8006c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c0c:	e00a      	b.n	8006c24 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0e:	f7fc fc1d 	bl	800344c <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e163      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c24:	4b0b      	ldr	r3, [pc, #44]	; (8006c54 <HAL_RCC_OscConfig+0x578>)
 8006c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0ed      	beq.n	8006c0e <HAL_RCC_OscConfig+0x532>
 8006c32:	e01a      	b.n	8006c6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c34:	f7fc fc0a 	bl	800344c <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c3a:	e00f      	b.n	8006c5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c3c:	f7fc fc06 	bl	800344c <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d906      	bls.n	8006c5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e14c      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
 8006c52:	bf00      	nop
 8006c54:	40021000 	.word	0x40021000
 8006c58:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c5c:	4ba5      	ldr	r3, [pc, #660]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e8      	bne.n	8006c3c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c6a:	7ffb      	ldrb	r3, [r7, #31]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d105      	bne.n	8006c7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c70:	4ba0      	ldr	r3, [pc, #640]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c74:	4a9f      	ldr	r2, [pc, #636]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0320 	and.w	r3, r3, #32
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d03c      	beq.n	8006d02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01c      	beq.n	8006cca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c90:	4b98      	ldr	r3, [pc, #608]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c96:	4a97      	ldr	r2, [pc, #604]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca0:	f7fc fbd4 	bl	800344c <HAL_GetTick>
 8006ca4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ca6:	e008      	b.n	8006cba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ca8:	f7fc fbd0 	bl	800344c <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e118      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cba:	4b8e      	ldr	r3, [pc, #568]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006cbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0ef      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x5cc>
 8006cc8:	e01b      	b.n	8006d02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006cca:	4b8a      	ldr	r3, [pc, #552]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006ccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cd0:	4a88      	ldr	r2, [pc, #544]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006cd2:	f023 0301 	bic.w	r3, r3, #1
 8006cd6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cda:	f7fc fbb7 	bl	800344c <HAL_GetTick>
 8006cde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ce0:	e008      	b.n	8006cf4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ce2:	f7fc fbb3 	bl	800344c <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e0fb      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006cf4:	4b7f      	ldr	r3, [pc, #508]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1ef      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 80ef 	beq.w	8006eea <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	f040 80c5 	bne.w	8006ea0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006d16:	4b77      	ldr	r3, [pc, #476]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f003 0203 	and.w	r2, r3, #3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d12c      	bne.n	8006d84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	3b01      	subs	r3, #1
 8006d36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d123      	bne.n	8006d84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d11b      	bne.n	8006d84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d113      	bne.n	8006d84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d66:	085b      	lsrs	r3, r3, #1
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d109      	bne.n	8006d84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	085b      	lsrs	r3, r3, #1
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d067      	beq.n	8006e54 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	2b0c      	cmp	r3, #12
 8006d88:	d062      	beq.n	8006e50 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006d8a:	4b5a      	ldr	r3, [pc, #360]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e0a8      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006d9a:	4b56      	ldr	r3, [pc, #344]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a55      	ldr	r2, [pc, #340]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006da4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006da6:	f7fc fb51 	bl	800344c <HAL_GetTick>
 8006daa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dae:	f7fc fb4d 	bl	800344c <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e095      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dc0:	4b4c      	ldr	r3, [pc, #304]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1f0      	bne.n	8006dae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dcc:	4b49      	ldr	r3, [pc, #292]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	4b49      	ldr	r3, [pc, #292]	; (8006ef8 <HAL_RCC_OscConfig+0x81c>)
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ddc:	3a01      	subs	r2, #1
 8006dde:	0112      	lsls	r2, r2, #4
 8006de0:	4311      	orrs	r1, r2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006de6:	0212      	lsls	r2, r2, #8
 8006de8:	4311      	orrs	r1, r2
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006dee:	0852      	lsrs	r2, r2, #1
 8006df0:	3a01      	subs	r2, #1
 8006df2:	0552      	lsls	r2, r2, #21
 8006df4:	4311      	orrs	r1, r2
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006dfa:	0852      	lsrs	r2, r2, #1
 8006dfc:	3a01      	subs	r2, #1
 8006dfe:	0652      	lsls	r2, r2, #25
 8006e00:	4311      	orrs	r1, r2
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e06:	06d2      	lsls	r2, r2, #27
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	493a      	ldr	r1, [pc, #232]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006e10:	4b38      	ldr	r3, [pc, #224]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a37      	ldr	r2, [pc, #220]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e1c:	4b35      	ldr	r3, [pc, #212]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	4a34      	ldr	r2, [pc, #208]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e28:	f7fc fb10 	bl	800344c <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e30:	f7fc fb0c 	bl	800344c <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e054      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e42:	4b2c      	ldr	r3, [pc, #176]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0f0      	beq.n	8006e30 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e4e:	e04c      	b.n	8006eea <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e04b      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e54:	4b27      	ldr	r3, [pc, #156]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d144      	bne.n	8006eea <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006e60:	4b24      	ldr	r3, [pc, #144]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a23      	ldr	r2, [pc, #140]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e6c:	4b21      	ldr	r3, [pc, #132]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	4a20      	ldr	r2, [pc, #128]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e78:	f7fc fae8 	bl	800344c <HAL_GetTick>
 8006e7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e7e:	e008      	b.n	8006e92 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e80:	f7fc fae4 	bl	800344c <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e02c      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e92:	4b18      	ldr	r3, [pc, #96]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0f0      	beq.n	8006e80 <HAL_RCC_OscConfig+0x7a4>
 8006e9e:	e024      	b.n	8006eea <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	2b0c      	cmp	r3, #12
 8006ea4:	d01f      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ea6:	4b13      	ldr	r3, [pc, #76]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a12      	ldr	r2, [pc, #72]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb2:	f7fc facb 	bl	800344c <HAL_GetTick>
 8006eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006eb8:	e008      	b.n	8006ecc <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eba:	f7fc fac7 	bl	800344c <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d901      	bls.n	8006ecc <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e00f      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ecc:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1f0      	bne.n	8006eba <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006ed8:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	4905      	ldr	r1, [pc, #20]	; (8006ef4 <HAL_RCC_OscConfig+0x818>)
 8006ede:	4b07      	ldr	r3, [pc, #28]	; (8006efc <HAL_RCC_OscConfig+0x820>)
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	60cb      	str	r3, [r1, #12]
 8006ee4:	e001      	b.n	8006eea <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3720      	adds	r7, #32
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	40021000 	.word	0x40021000
 8006ef8:	019d808c 	.word	0x019d808c
 8006efc:	feeefffc 	.word	0xfeeefffc

08006f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e0e7      	b.n	80070e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f14:	4b75      	ldr	r3, [pc, #468]	; (80070ec <HAL_RCC_ClockConfig+0x1ec>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d910      	bls.n	8006f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f22:	4b72      	ldr	r3, [pc, #456]	; (80070ec <HAL_RCC_ClockConfig+0x1ec>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f023 0207 	bic.w	r2, r3, #7
 8006f2a:	4970      	ldr	r1, [pc, #448]	; (80070ec <HAL_RCC_ClockConfig+0x1ec>)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f32:	4b6e      	ldr	r3, [pc, #440]	; (80070ec <HAL_RCC_ClockConfig+0x1ec>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d001      	beq.n	8006f44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e0cf      	b.n	80070e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d010      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	4b66      	ldr	r3, [pc, #408]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d908      	bls.n	8006f72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f60:	4b63      	ldr	r3, [pc, #396]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	4960      	ldr	r1, [pc, #384]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d04c      	beq.n	8007018 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d107      	bne.n	8006f96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f86:	4b5a      	ldr	r3, [pc, #360]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d121      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e0a6      	b.n	80070e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d107      	bne.n	8006fae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f9e:	4b54      	ldr	r3, [pc, #336]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d115      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e09a      	b.n	80070e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d107      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fb6:	4b4e      	ldr	r3, [pc, #312]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d109      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e08e      	b.n	80070e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fc6:	4b4a      	ldr	r3, [pc, #296]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e086      	b.n	80070e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fd6:	4b46      	ldr	r3, [pc, #280]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f023 0203 	bic.w	r2, r3, #3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	4943      	ldr	r1, [pc, #268]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe8:	f7fc fa30 	bl	800344c <HAL_GetTick>
 8006fec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fee:	e00a      	b.n	8007006 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ff0:	f7fc fa2c 	bl	800344c <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d901      	bls.n	8007006 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e06e      	b.n	80070e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007006:	4b3a      	ldr	r3, [pc, #232]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 020c 	and.w	r2, r3, #12
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	429a      	cmp	r2, r3
 8007016:	d1eb      	bne.n	8006ff0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d010      	beq.n	8007046 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	4b31      	ldr	r3, [pc, #196]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007030:	429a      	cmp	r2, r3
 8007032:	d208      	bcs.n	8007046 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007034:	4b2e      	ldr	r3, [pc, #184]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	492b      	ldr	r1, [pc, #172]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 8007042:	4313      	orrs	r3, r2
 8007044:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007046:	4b29      	ldr	r3, [pc, #164]	; (80070ec <HAL_RCC_ClockConfig+0x1ec>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d210      	bcs.n	8007076 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007054:	4b25      	ldr	r3, [pc, #148]	; (80070ec <HAL_RCC_ClockConfig+0x1ec>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f023 0207 	bic.w	r2, r3, #7
 800705c:	4923      	ldr	r1, [pc, #140]	; (80070ec <HAL_RCC_ClockConfig+0x1ec>)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	4313      	orrs	r3, r2
 8007062:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007064:	4b21      	ldr	r3, [pc, #132]	; (80070ec <HAL_RCC_ClockConfig+0x1ec>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d001      	beq.n	8007076 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e036      	b.n	80070e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0304 	and.w	r3, r3, #4
 800707e:	2b00      	cmp	r3, #0
 8007080:	d008      	beq.n	8007094 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007082:	4b1b      	ldr	r3, [pc, #108]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	4918      	ldr	r1, [pc, #96]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 8007090:	4313      	orrs	r3, r2
 8007092:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0308 	and.w	r3, r3, #8
 800709c:	2b00      	cmp	r3, #0
 800709e:	d009      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070a0:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	00db      	lsls	r3, r3, #3
 80070ae:	4910      	ldr	r1, [pc, #64]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070b4:	f000 f824 	bl	8007100 <HAL_RCC_GetSysClockFreq>
 80070b8:	4602      	mov	r2, r0
 80070ba:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <HAL_RCC_ClockConfig+0x1f0>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	091b      	lsrs	r3, r3, #4
 80070c0:	f003 030f 	and.w	r3, r3, #15
 80070c4:	490b      	ldr	r1, [pc, #44]	; (80070f4 <HAL_RCC_ClockConfig+0x1f4>)
 80070c6:	5ccb      	ldrb	r3, [r1, r3]
 80070c8:	f003 031f 	and.w	r3, r3, #31
 80070cc:	fa22 f303 	lsr.w	r3, r2, r3
 80070d0:	4a09      	ldr	r2, [pc, #36]	; (80070f8 <HAL_RCC_ClockConfig+0x1f8>)
 80070d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80070d4:	4b09      	ldr	r3, [pc, #36]	; (80070fc <HAL_RCC_ClockConfig+0x1fc>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fc f967 	bl	80033ac <HAL_InitTick>
 80070de:	4603      	mov	r3, r0
 80070e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80070e2:	7afb      	ldrb	r3, [r7, #11]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	40022000 	.word	0x40022000
 80070f0:	40021000 	.word	0x40021000
 80070f4:	0800d1c4 	.word	0x0800d1c4
 80070f8:	20000018 	.word	0x20000018
 80070fc:	2000002c 	.word	0x2000002c

08007100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007100:	b480      	push	{r7}
 8007102:	b089      	sub	sp, #36	; 0x24
 8007104:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	61fb      	str	r3, [r7, #28]
 800710a:	2300      	movs	r3, #0
 800710c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800710e:	4b3e      	ldr	r3, [pc, #248]	; (8007208 <HAL_RCC_GetSysClockFreq+0x108>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 030c 	and.w	r3, r3, #12
 8007116:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007118:	4b3b      	ldr	r3, [pc, #236]	; (8007208 <HAL_RCC_GetSysClockFreq+0x108>)
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <HAL_RCC_GetSysClockFreq+0x34>
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	2b0c      	cmp	r3, #12
 800712c:	d121      	bne.n	8007172 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d11e      	bne.n	8007172 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007134:	4b34      	ldr	r3, [pc, #208]	; (8007208 <HAL_RCC_GetSysClockFreq+0x108>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d107      	bne.n	8007150 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007140:	4b31      	ldr	r3, [pc, #196]	; (8007208 <HAL_RCC_GetSysClockFreq+0x108>)
 8007142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007146:	0a1b      	lsrs	r3, r3, #8
 8007148:	f003 030f 	and.w	r3, r3, #15
 800714c:	61fb      	str	r3, [r7, #28]
 800714e:	e005      	b.n	800715c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007150:	4b2d      	ldr	r3, [pc, #180]	; (8007208 <HAL_RCC_GetSysClockFreq+0x108>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	091b      	lsrs	r3, r3, #4
 8007156:	f003 030f 	and.w	r3, r3, #15
 800715a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800715c:	4a2b      	ldr	r2, [pc, #172]	; (800720c <HAL_RCC_GetSysClockFreq+0x10c>)
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007164:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10d      	bne.n	8007188 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007170:	e00a      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2b04      	cmp	r3, #4
 8007176:	d102      	bne.n	800717e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007178:	4b25      	ldr	r3, [pc, #148]	; (8007210 <HAL_RCC_GetSysClockFreq+0x110>)
 800717a:	61bb      	str	r3, [r7, #24]
 800717c:	e004      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b08      	cmp	r3, #8
 8007182:	d101      	bne.n	8007188 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007184:	4b23      	ldr	r3, [pc, #140]	; (8007214 <HAL_RCC_GetSysClockFreq+0x114>)
 8007186:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b0c      	cmp	r3, #12
 800718c:	d134      	bne.n	80071f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800718e:	4b1e      	ldr	r3, [pc, #120]	; (8007208 <HAL_RCC_GetSysClockFreq+0x108>)
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f003 0303 	and.w	r3, r3, #3
 8007196:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2b02      	cmp	r3, #2
 800719c:	d003      	beq.n	80071a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d003      	beq.n	80071ac <HAL_RCC_GetSysClockFreq+0xac>
 80071a4:	e005      	b.n	80071b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80071a6:	4b1a      	ldr	r3, [pc, #104]	; (8007210 <HAL_RCC_GetSysClockFreq+0x110>)
 80071a8:	617b      	str	r3, [r7, #20]
      break;
 80071aa:	e005      	b.n	80071b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80071ac:	4b19      	ldr	r3, [pc, #100]	; (8007214 <HAL_RCC_GetSysClockFreq+0x114>)
 80071ae:	617b      	str	r3, [r7, #20]
      break;
 80071b0:	e002      	b.n	80071b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	617b      	str	r3, [r7, #20]
      break;
 80071b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071b8:	4b13      	ldr	r3, [pc, #76]	; (8007208 <HAL_RCC_GetSysClockFreq+0x108>)
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	091b      	lsrs	r3, r3, #4
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	3301      	adds	r3, #1
 80071c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80071c6:	4b10      	ldr	r3, [pc, #64]	; (8007208 <HAL_RCC_GetSysClockFreq+0x108>)
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	0a1b      	lsrs	r3, r3, #8
 80071cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	fb02 f203 	mul.w	r2, r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071de:	4b0a      	ldr	r3, [pc, #40]	; (8007208 <HAL_RCC_GetSysClockFreq+0x108>)
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	0e5b      	lsrs	r3, r3, #25
 80071e4:	f003 0303 	and.w	r3, r3, #3
 80071e8:	3301      	adds	r3, #1
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80071f8:	69bb      	ldr	r3, [r7, #24]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3724      	adds	r7, #36	; 0x24
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40021000 	.word	0x40021000
 800720c:	0800d1d4 	.word	0x0800d1d4
 8007210:	00f42400 	.word	0x00f42400
 8007214:	016e3600 	.word	0x016e3600

08007218 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007220:	2300      	movs	r3, #0
 8007222:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007224:	4b2a      	ldr	r3, [pc, #168]	; (80072d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007230:	f7ff f9f0 	bl	8006614 <HAL_PWREx_GetVoltageRange>
 8007234:	6178      	str	r0, [r7, #20]
 8007236:	e014      	b.n	8007262 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007238:	4b25      	ldr	r3, [pc, #148]	; (80072d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800723a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723c:	4a24      	ldr	r2, [pc, #144]	; (80072d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800723e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007242:	6593      	str	r3, [r2, #88]	; 0x58
 8007244:	4b22      	ldr	r3, [pc, #136]	; (80072d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007250:	f7ff f9e0 	bl	8006614 <HAL_PWREx_GetVoltageRange>
 8007254:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007256:	4b1e      	ldr	r3, [pc, #120]	; (80072d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725a:	4a1d      	ldr	r2, [pc, #116]	; (80072d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800725c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007260:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007268:	d10b      	bne.n	8007282 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b80      	cmp	r3, #128	; 0x80
 800726e:	d919      	bls.n	80072a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2ba0      	cmp	r3, #160	; 0xa0
 8007274:	d902      	bls.n	800727c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007276:	2302      	movs	r3, #2
 8007278:	613b      	str	r3, [r7, #16]
 800727a:	e013      	b.n	80072a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800727c:	2301      	movs	r3, #1
 800727e:	613b      	str	r3, [r7, #16]
 8007280:	e010      	b.n	80072a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b80      	cmp	r3, #128	; 0x80
 8007286:	d902      	bls.n	800728e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007288:	2303      	movs	r3, #3
 800728a:	613b      	str	r3, [r7, #16]
 800728c:	e00a      	b.n	80072a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b80      	cmp	r3, #128	; 0x80
 8007292:	d102      	bne.n	800729a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007294:	2302      	movs	r3, #2
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	e004      	b.n	80072a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b70      	cmp	r3, #112	; 0x70
 800729e:	d101      	bne.n	80072a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80072a0:	2301      	movs	r3, #1
 80072a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80072a4:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f023 0207 	bic.w	r2, r3, #7
 80072ac:	4909      	ldr	r1, [pc, #36]	; (80072d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80072b4:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d001      	beq.n	80072c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e000      	b.n	80072c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	40021000 	.word	0x40021000
 80072d4:	40022000 	.word	0x40022000

080072d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072e0:	2300      	movs	r3, #0
 80072e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072e4:	2300      	movs	r3, #0
 80072e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d031      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072fc:	d01a      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80072fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007302:	d814      	bhi.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007304:	2b00      	cmp	r3, #0
 8007306:	d009      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007308:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800730c:	d10f      	bne.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800730e:	4b5d      	ldr	r3, [pc, #372]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	4a5c      	ldr	r2, [pc, #368]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007318:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800731a:	e00c      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3304      	adds	r3, #4
 8007320:	2100      	movs	r1, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f000 f9f0 	bl	8007708 <RCCEx_PLLSAI1_Config>
 8007328:	4603      	mov	r3, r0
 800732a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800732c:	e003      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	74fb      	strb	r3, [r7, #19]
      break;
 8007332:	e000      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007336:	7cfb      	ldrb	r3, [r7, #19]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10b      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800733c:	4b51      	ldr	r3, [pc, #324]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800733e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007342:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734a:	494e      	ldr	r1, [pc, #312]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800734c:	4313      	orrs	r3, r2
 800734e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007352:	e001      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007354:	7cfb      	ldrb	r3, [r7, #19]
 8007356:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 809e 	beq.w	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007366:	2300      	movs	r3, #0
 8007368:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800736a:	4b46      	ldr	r3, [pc, #280]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800736c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800737a:	2300      	movs	r3, #0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00d      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007380:	4b40      	ldr	r3, [pc, #256]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007384:	4a3f      	ldr	r2, [pc, #252]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800738a:	6593      	str	r3, [r2, #88]	; 0x58
 800738c:	4b3d      	ldr	r3, [pc, #244]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800738e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007394:	60bb      	str	r3, [r7, #8]
 8007396:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007398:	2301      	movs	r3, #1
 800739a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800739c:	4b3a      	ldr	r3, [pc, #232]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a39      	ldr	r2, [pc, #228]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80073a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073a8:	f7fc f850 	bl	800344c <HAL_GetTick>
 80073ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80073ae:	e009      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073b0:	f7fc f84c 	bl	800344c <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d902      	bls.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	74fb      	strb	r3, [r7, #19]
        break;
 80073c2:	e005      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80073c4:	4b30      	ldr	r3, [pc, #192]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0ef      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80073d0:	7cfb      	ldrb	r3, [r7, #19]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d15a      	bne.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073d6:	4b2b      	ldr	r3, [pc, #172]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01e      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d019      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073f2:	4b24      	ldr	r3, [pc, #144]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073fe:	4b21      	ldr	r3, [pc, #132]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007404:	4a1f      	ldr	r2, [pc, #124]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800740a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800740e:	4b1d      	ldr	r3, [pc, #116]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007414:	4a1b      	ldr	r2, [pc, #108]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800741a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800741e:	4a19      	ldr	r2, [pc, #100]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d016      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007430:	f7fc f80c 	bl	800344c <HAL_GetTick>
 8007434:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007436:	e00b      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007438:	f7fc f808 	bl	800344c <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	f241 3288 	movw	r2, #5000	; 0x1388
 8007446:	4293      	cmp	r3, r2
 8007448:	d902      	bls.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	74fb      	strb	r3, [r7, #19]
            break;
 800744e:	e006      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007450:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0ec      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800745e:	7cfb      	ldrb	r3, [r7, #19]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10b      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007464:	4b07      	ldr	r3, [pc, #28]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007472:	4904      	ldr	r1, [pc, #16]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007474:	4313      	orrs	r3, r2
 8007476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800747a:	e009      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800747c:	7cfb      	ldrb	r3, [r7, #19]
 800747e:	74bb      	strb	r3, [r7, #18]
 8007480:	e006      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007482:	bf00      	nop
 8007484:	40021000 	.word	0x40021000
 8007488:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748c:	7cfb      	ldrb	r3, [r7, #19]
 800748e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007490:	7c7b      	ldrb	r3, [r7, #17]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d105      	bne.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007496:	4b9b      	ldr	r3, [pc, #620]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749a:	4a9a      	ldr	r2, [pc, #616]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800749c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074ae:	4b95      	ldr	r3, [pc, #596]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b4:	f023 0203 	bic.w	r2, r3, #3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	4991      	ldr	r1, [pc, #580]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074d0:	4b8c      	ldr	r3, [pc, #560]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d6:	f023 020c 	bic.w	r2, r3, #12
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	4989      	ldr	r1, [pc, #548]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0304 	and.w	r3, r3, #4
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074f2:	4b84      	ldr	r3, [pc, #528]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	4980      	ldr	r1, [pc, #512]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007502:	4313      	orrs	r3, r2
 8007504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0320 	and.w	r3, r3, #32
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007514:	4b7b      	ldr	r3, [pc, #492]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	4978      	ldr	r1, [pc, #480]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007524:	4313      	orrs	r3, r2
 8007526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007536:	4b73      	ldr	r3, [pc, #460]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007544:	496f      	ldr	r1, [pc, #444]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00a      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007558:	4b6a      	ldr	r3, [pc, #424]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800755a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800755e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	4967      	ldr	r1, [pc, #412]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007568:	4313      	orrs	r3, r2
 800756a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800757a:	4b62      	ldr	r3, [pc, #392]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800757c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007580:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	495e      	ldr	r1, [pc, #376]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800758a:	4313      	orrs	r3, r2
 800758c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800759c:	4b59      	ldr	r3, [pc, #356]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800759e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075aa:	4956      	ldr	r1, [pc, #344]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075be:	4b51      	ldr	r3, [pc, #324]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	494d      	ldr	r1, [pc, #308]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d028      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80075e0:	4b48      	ldr	r3, [pc, #288]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ee:	4945      	ldr	r1, [pc, #276]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075fe:	d106      	bne.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007600:	4b40      	ldr	r3, [pc, #256]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	4a3f      	ldr	r2, [pc, #252]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800760a:	60d3      	str	r3, [r2, #12]
 800760c:	e011      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007616:	d10c      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	3304      	adds	r3, #4
 800761c:	2101      	movs	r1, #1
 800761e:	4618      	mov	r0, r3
 8007620:	f000 f872 	bl	8007708 <RCCEx_PLLSAI1_Config>
 8007624:	4603      	mov	r3, r0
 8007626:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007628:	7cfb      	ldrb	r3, [r7, #19]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800762e:	7cfb      	ldrb	r3, [r7, #19]
 8007630:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d028      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800763e:	4b31      	ldr	r3, [pc, #196]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007644:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800764c:	492d      	ldr	r1, [pc, #180]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800764e:	4313      	orrs	r3, r2
 8007650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800765c:	d106      	bne.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800765e:	4b29      	ldr	r3, [pc, #164]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	4a28      	ldr	r2, [pc, #160]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007668:	60d3      	str	r3, [r2, #12]
 800766a:	e011      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007670:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007674:	d10c      	bne.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	3304      	adds	r3, #4
 800767a:	2101      	movs	r1, #1
 800767c:	4618      	mov	r0, r3
 800767e:	f000 f843 	bl	8007708 <RCCEx_PLLSAI1_Config>
 8007682:	4603      	mov	r3, r0
 8007684:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007686:	7cfb      	ldrb	r3, [r7, #19]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800768c:	7cfb      	ldrb	r3, [r7, #19]
 800768e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01c      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800769c:	4b19      	ldr	r3, [pc, #100]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800769e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076aa:	4916      	ldr	r1, [pc, #88]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076ba:	d10c      	bne.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3304      	adds	r3, #4
 80076c0:	2102      	movs	r1, #2
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 f820 	bl	8007708 <RCCEx_PLLSAI1_Config>
 80076c8:	4603      	mov	r3, r0
 80076ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80076cc:	7cfb      	ldrb	r3, [r7, #19]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80076d2:	7cfb      	ldrb	r3, [r7, #19]
 80076d4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076e2:	4b08      	ldr	r3, [pc, #32]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f0:	4904      	ldr	r1, [pc, #16]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80076f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3718      	adds	r7, #24
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	40021000 	.word	0x40021000

08007708 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007716:	4b74      	ldr	r3, [pc, #464]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d018      	beq.n	8007754 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007722:	4b71      	ldr	r3, [pc, #452]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f003 0203 	and.w	r2, r3, #3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d10d      	bne.n	800774e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
       ||
 8007736:	2b00      	cmp	r3, #0
 8007738:	d009      	beq.n	800774e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800773a:	4b6b      	ldr	r3, [pc, #428]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	091b      	lsrs	r3, r3, #4
 8007740:	f003 0307 	and.w	r3, r3, #7
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
       ||
 800774a:	429a      	cmp	r2, r3
 800774c:	d047      	beq.n	80077de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	73fb      	strb	r3, [r7, #15]
 8007752:	e044      	b.n	80077de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b03      	cmp	r3, #3
 800775a:	d018      	beq.n	800778e <RCCEx_PLLSAI1_Config+0x86>
 800775c:	2b03      	cmp	r3, #3
 800775e:	d825      	bhi.n	80077ac <RCCEx_PLLSAI1_Config+0xa4>
 8007760:	2b01      	cmp	r3, #1
 8007762:	d002      	beq.n	800776a <RCCEx_PLLSAI1_Config+0x62>
 8007764:	2b02      	cmp	r3, #2
 8007766:	d009      	beq.n	800777c <RCCEx_PLLSAI1_Config+0x74>
 8007768:	e020      	b.n	80077ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800776a:	4b5f      	ldr	r3, [pc, #380]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d11d      	bne.n	80077b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800777a:	e01a      	b.n	80077b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800777c:	4b5a      	ldr	r3, [pc, #360]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007784:	2b00      	cmp	r3, #0
 8007786:	d116      	bne.n	80077b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800778c:	e013      	b.n	80077b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800778e:	4b56      	ldr	r3, [pc, #344]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10f      	bne.n	80077ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800779a:	4b53      	ldr	r3, [pc, #332]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d109      	bne.n	80077ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077aa:	e006      	b.n	80077ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	73fb      	strb	r3, [r7, #15]
      break;
 80077b0:	e004      	b.n	80077bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077b2:	bf00      	nop
 80077b4:	e002      	b.n	80077bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077b6:	bf00      	nop
 80077b8:	e000      	b.n	80077bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10d      	bne.n	80077de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80077c2:	4b49      	ldr	r3, [pc, #292]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6819      	ldr	r1, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	430b      	orrs	r3, r1
 80077d8:	4943      	ldr	r1, [pc, #268]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80077de:	7bfb      	ldrb	r3, [r7, #15]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d17c      	bne.n	80078de <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80077e4:	4b40      	ldr	r3, [pc, #256]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a3f      	ldr	r2, [pc, #252]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077f0:	f7fb fe2c 	bl	800344c <HAL_GetTick>
 80077f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80077f6:	e009      	b.n	800780c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077f8:	f7fb fe28 	bl	800344c <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	2b02      	cmp	r3, #2
 8007804:	d902      	bls.n	800780c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	73fb      	strb	r3, [r7, #15]
        break;
 800780a:	e005      	b.n	8007818 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800780c:	4b36      	ldr	r3, [pc, #216]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1ef      	bne.n	80077f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007818:	7bfb      	ldrb	r3, [r7, #15]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d15f      	bne.n	80078de <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d110      	bne.n	8007846 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007824:	4b30      	ldr	r3, [pc, #192]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800782c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6892      	ldr	r2, [r2, #8]
 8007834:	0211      	lsls	r1, r2, #8
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	68d2      	ldr	r2, [r2, #12]
 800783a:	06d2      	lsls	r2, r2, #27
 800783c:	430a      	orrs	r2, r1
 800783e:	492a      	ldr	r1, [pc, #168]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007840:	4313      	orrs	r3, r2
 8007842:	610b      	str	r3, [r1, #16]
 8007844:	e027      	b.n	8007896 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d112      	bne.n	8007872 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800784c:	4b26      	ldr	r3, [pc, #152]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007854:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	6892      	ldr	r2, [r2, #8]
 800785c:	0211      	lsls	r1, r2, #8
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	6912      	ldr	r2, [r2, #16]
 8007862:	0852      	lsrs	r2, r2, #1
 8007864:	3a01      	subs	r2, #1
 8007866:	0552      	lsls	r2, r2, #21
 8007868:	430a      	orrs	r2, r1
 800786a:	491f      	ldr	r1, [pc, #124]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800786c:	4313      	orrs	r3, r2
 800786e:	610b      	str	r3, [r1, #16]
 8007870:	e011      	b.n	8007896 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007872:	4b1d      	ldr	r3, [pc, #116]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800787a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6892      	ldr	r2, [r2, #8]
 8007882:	0211      	lsls	r1, r2, #8
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6952      	ldr	r2, [r2, #20]
 8007888:	0852      	lsrs	r2, r2, #1
 800788a:	3a01      	subs	r2, #1
 800788c:	0652      	lsls	r2, r2, #25
 800788e:	430a      	orrs	r2, r1
 8007890:	4915      	ldr	r1, [pc, #84]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007892:	4313      	orrs	r3, r2
 8007894:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007896:	4b14      	ldr	r3, [pc, #80]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a13      	ldr	r2, [pc, #76]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800789c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078a2:	f7fb fdd3 	bl	800344c <HAL_GetTick>
 80078a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078a8:	e009      	b.n	80078be <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078aa:	f7fb fdcf 	bl	800344c <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d902      	bls.n	80078be <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	73fb      	strb	r3, [r7, #15]
          break;
 80078bc:	e005      	b.n	80078ca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078be:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0ef      	beq.n	80078aa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80078d0:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078d2:	691a      	ldr	r2, [r3, #16]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	4903      	ldr	r1, [pc, #12]	; (80078e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80078de:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	40021000 	.word	0x40021000

080078ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e049      	b.n	8007992 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d106      	bne.n	8007918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7fb f800 	bl	8002918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	4619      	mov	r1, r3
 800792a:	4610      	mov	r0, r2
 800792c:	f000 fe10 	bl	8008550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
	...

0800799c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d001      	beq.n	80079b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e033      	b.n	8007a1c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a19      	ldr	r2, [pc, #100]	; (8007a28 <HAL_TIM_Base_Start+0x8c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d009      	beq.n	80079da <HAL_TIM_Base_Start+0x3e>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ce:	d004      	beq.n	80079da <HAL_TIM_Base_Start+0x3e>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a15      	ldr	r2, [pc, #84]	; (8007a2c <HAL_TIM_Base_Start+0x90>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d115      	bne.n	8007a06 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	4b13      	ldr	r3, [pc, #76]	; (8007a30 <HAL_TIM_Base_Start+0x94>)
 80079e2:	4013      	ands	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b06      	cmp	r3, #6
 80079ea:	d015      	beq.n	8007a18 <HAL_TIM_Base_Start+0x7c>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f2:	d011      	beq.n	8007a18 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f042 0201 	orr.w	r2, r2, #1
 8007a02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a04:	e008      	b.n	8007a18 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f042 0201 	orr.w	r2, r2, #1
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	e000      	b.n	8007a1a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	40012c00 	.word	0x40012c00
 8007a2c:	40014000 	.word	0x40014000
 8007a30:	00010007 	.word	0x00010007

08007a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d001      	beq.n	8007a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e03b      	b.n	8007ac4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0201 	orr.w	r2, r2, #1
 8007a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a19      	ldr	r2, [pc, #100]	; (8007ad0 <HAL_TIM_Base_Start_IT+0x9c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d009      	beq.n	8007a82 <HAL_TIM_Base_Start_IT+0x4e>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a76:	d004      	beq.n	8007a82 <HAL_TIM_Base_Start_IT+0x4e>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a15      	ldr	r2, [pc, #84]	; (8007ad4 <HAL_TIM_Base_Start_IT+0xa0>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d115      	bne.n	8007aae <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689a      	ldr	r2, [r3, #8]
 8007a88:	4b13      	ldr	r3, [pc, #76]	; (8007ad8 <HAL_TIM_Base_Start_IT+0xa4>)
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2b06      	cmp	r3, #6
 8007a92:	d015      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x8c>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a9a:	d011      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f042 0201 	orr.w	r2, r2, #1
 8007aaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aac:	e008      	b.n	8007ac0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f042 0201 	orr.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	e000      	b.n	8007ac2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ac0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	40012c00 	.word	0x40012c00
 8007ad4:	40014000 	.word	0x40014000
 8007ad8:	00010007 	.word	0x00010007

08007adc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d109      	bne.n	8007b00 <HAL_TIM_OC_Start+0x24>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	bf14      	ite	ne
 8007af8:	2301      	movne	r3, #1
 8007afa:	2300      	moveq	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	e03c      	b.n	8007b7a <HAL_TIM_OC_Start+0x9e>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d109      	bne.n	8007b1a <HAL_TIM_OC_Start+0x3e>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	bf14      	ite	ne
 8007b12:	2301      	movne	r3, #1
 8007b14:	2300      	moveq	r3, #0
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	e02f      	b.n	8007b7a <HAL_TIM_OC_Start+0x9e>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b08      	cmp	r3, #8
 8007b1e:	d109      	bne.n	8007b34 <HAL_TIM_OC_Start+0x58>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	bf14      	ite	ne
 8007b2c:	2301      	movne	r3, #1
 8007b2e:	2300      	moveq	r3, #0
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	e022      	b.n	8007b7a <HAL_TIM_OC_Start+0x9e>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b0c      	cmp	r3, #12
 8007b38:	d109      	bne.n	8007b4e <HAL_TIM_OC_Start+0x72>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	bf14      	ite	ne
 8007b46:	2301      	movne	r3, #1
 8007b48:	2300      	moveq	r3, #0
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	e015      	b.n	8007b7a <HAL_TIM_OC_Start+0x9e>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b10      	cmp	r3, #16
 8007b52:	d109      	bne.n	8007b68 <HAL_TIM_OC_Start+0x8c>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	bf14      	ite	ne
 8007b60:	2301      	movne	r3, #1
 8007b62:	2300      	moveq	r3, #0
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	e008      	b.n	8007b7a <HAL_TIM_OC_Start+0x9e>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	bf14      	ite	ne
 8007b74:	2301      	movne	r3, #1
 8007b76:	2300      	moveq	r3, #0
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e07e      	b.n	8007c80 <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d104      	bne.n	8007b92 <HAL_TIM_OC_Start+0xb6>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b90:	e023      	b.n	8007bda <HAL_TIM_OC_Start+0xfe>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b04      	cmp	r3, #4
 8007b96:	d104      	bne.n	8007ba2 <HAL_TIM_OC_Start+0xc6>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ba0:	e01b      	b.n	8007bda <HAL_TIM_OC_Start+0xfe>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d104      	bne.n	8007bb2 <HAL_TIM_OC_Start+0xd6>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bb0:	e013      	b.n	8007bda <HAL_TIM_OC_Start+0xfe>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b0c      	cmp	r3, #12
 8007bb6:	d104      	bne.n	8007bc2 <HAL_TIM_OC_Start+0xe6>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bc0:	e00b      	b.n	8007bda <HAL_TIM_OC_Start+0xfe>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b10      	cmp	r3, #16
 8007bc6:	d104      	bne.n	8007bd2 <HAL_TIM_OC_Start+0xf6>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bd0:	e003      	b.n	8007bda <HAL_TIM_OC_Start+0xfe>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2201      	movs	r2, #1
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f001 f830 	bl	8008c48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a26      	ldr	r2, [pc, #152]	; (8007c88 <HAL_TIM_OC_Start+0x1ac>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d009      	beq.n	8007c06 <HAL_TIM_OC_Start+0x12a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a25      	ldr	r2, [pc, #148]	; (8007c8c <HAL_TIM_OC_Start+0x1b0>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d004      	beq.n	8007c06 <HAL_TIM_OC_Start+0x12a>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a23      	ldr	r2, [pc, #140]	; (8007c90 <HAL_TIM_OC_Start+0x1b4>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d101      	bne.n	8007c0a <HAL_TIM_OC_Start+0x12e>
 8007c06:	2301      	movs	r3, #1
 8007c08:	e000      	b.n	8007c0c <HAL_TIM_OC_Start+0x130>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d007      	beq.n	8007c20 <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a18      	ldr	r2, [pc, #96]	; (8007c88 <HAL_TIM_OC_Start+0x1ac>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d009      	beq.n	8007c3e <HAL_TIM_OC_Start+0x162>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c32:	d004      	beq.n	8007c3e <HAL_TIM_OC_Start+0x162>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a14      	ldr	r2, [pc, #80]	; (8007c8c <HAL_TIM_OC_Start+0x1b0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d115      	bne.n	8007c6a <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	4b13      	ldr	r3, [pc, #76]	; (8007c94 <HAL_TIM_OC_Start+0x1b8>)
 8007c46:	4013      	ands	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2b06      	cmp	r3, #6
 8007c4e:	d015      	beq.n	8007c7c <HAL_TIM_OC_Start+0x1a0>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c56:	d011      	beq.n	8007c7c <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0201 	orr.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c68:	e008      	b.n	8007c7c <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f042 0201 	orr.w	r2, r2, #1
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	e000      	b.n	8007c7e <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	40012c00 	.word	0x40012c00
 8007c8c:	40014000 	.word	0x40014000
 8007c90:	40014400 	.word	0x40014400
 8007c94:	00010007 	.word	0x00010007

08007c98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e049      	b.n	8007d3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d106      	bne.n	8007cc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7fa fe04 	bl	80028cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	f000 fc3a 	bl	8008550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d109      	bne.n	8007d6c <HAL_TIM_PWM_Start+0x24>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	bf14      	ite	ne
 8007d64:	2301      	movne	r3, #1
 8007d66:	2300      	moveq	r3, #0
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	e03c      	b.n	8007de6 <HAL_TIM_PWM_Start+0x9e>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b04      	cmp	r3, #4
 8007d70:	d109      	bne.n	8007d86 <HAL_TIM_PWM_Start+0x3e>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	bf14      	ite	ne
 8007d7e:	2301      	movne	r3, #1
 8007d80:	2300      	moveq	r3, #0
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	e02f      	b.n	8007de6 <HAL_TIM_PWM_Start+0x9e>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	d109      	bne.n	8007da0 <HAL_TIM_PWM_Start+0x58>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	bf14      	ite	ne
 8007d98:	2301      	movne	r3, #1
 8007d9a:	2300      	moveq	r3, #0
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	e022      	b.n	8007de6 <HAL_TIM_PWM_Start+0x9e>
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2b0c      	cmp	r3, #12
 8007da4:	d109      	bne.n	8007dba <HAL_TIM_PWM_Start+0x72>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	bf14      	ite	ne
 8007db2:	2301      	movne	r3, #1
 8007db4:	2300      	moveq	r3, #0
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	e015      	b.n	8007de6 <HAL_TIM_PWM_Start+0x9e>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b10      	cmp	r3, #16
 8007dbe:	d109      	bne.n	8007dd4 <HAL_TIM_PWM_Start+0x8c>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	bf14      	ite	ne
 8007dcc:	2301      	movne	r3, #1
 8007dce:	2300      	moveq	r3, #0
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	e008      	b.n	8007de6 <HAL_TIM_PWM_Start+0x9e>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	bf14      	ite	ne
 8007de0:	2301      	movne	r3, #1
 8007de2:	2300      	moveq	r3, #0
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e07e      	b.n	8007eec <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <HAL_TIM_PWM_Start+0xb6>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dfc:	e023      	b.n	8007e46 <HAL_TIM_PWM_Start+0xfe>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d104      	bne.n	8007e0e <HAL_TIM_PWM_Start+0xc6>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e0c:	e01b      	b.n	8007e46 <HAL_TIM_PWM_Start+0xfe>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d104      	bne.n	8007e1e <HAL_TIM_PWM_Start+0xd6>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2202      	movs	r2, #2
 8007e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e1c:	e013      	b.n	8007e46 <HAL_TIM_PWM_Start+0xfe>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b0c      	cmp	r3, #12
 8007e22:	d104      	bne.n	8007e2e <HAL_TIM_PWM_Start+0xe6>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e2c:	e00b      	b.n	8007e46 <HAL_TIM_PWM_Start+0xfe>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d104      	bne.n	8007e3e <HAL_TIM_PWM_Start+0xf6>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e3c:	e003      	b.n	8007e46 <HAL_TIM_PWM_Start+0xfe>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2202      	movs	r2, #2
 8007e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 fefa 	bl	8008c48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a26      	ldr	r2, [pc, #152]	; (8007ef4 <HAL_TIM_PWM_Start+0x1ac>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d009      	beq.n	8007e72 <HAL_TIM_PWM_Start+0x12a>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a25      	ldr	r2, [pc, #148]	; (8007ef8 <HAL_TIM_PWM_Start+0x1b0>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d004      	beq.n	8007e72 <HAL_TIM_PWM_Start+0x12a>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a23      	ldr	r2, [pc, #140]	; (8007efc <HAL_TIM_PWM_Start+0x1b4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d101      	bne.n	8007e76 <HAL_TIM_PWM_Start+0x12e>
 8007e72:	2301      	movs	r3, #1
 8007e74:	e000      	b.n	8007e78 <HAL_TIM_PWM_Start+0x130>
 8007e76:	2300      	movs	r3, #0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d007      	beq.n	8007e8c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a18      	ldr	r2, [pc, #96]	; (8007ef4 <HAL_TIM_PWM_Start+0x1ac>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d009      	beq.n	8007eaa <HAL_TIM_PWM_Start+0x162>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e9e:	d004      	beq.n	8007eaa <HAL_TIM_PWM_Start+0x162>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a14      	ldr	r2, [pc, #80]	; (8007ef8 <HAL_TIM_PWM_Start+0x1b0>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d115      	bne.n	8007ed6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	4b13      	ldr	r3, [pc, #76]	; (8007f00 <HAL_TIM_PWM_Start+0x1b8>)
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b06      	cmp	r3, #6
 8007eba:	d015      	beq.n	8007ee8 <HAL_TIM_PWM_Start+0x1a0>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ec2:	d011      	beq.n	8007ee8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0201 	orr.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed4:	e008      	b.n	8007ee8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f042 0201 	orr.w	r2, r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	e000      	b.n	8007eea <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	40012c00 	.word	0x40012c00
 8007ef8:	40014000 	.word	0x40014000
 8007efc:	40014400 	.word	0x40014400
 8007f00:	00010007 	.word	0x00010007

08007f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d122      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d11b      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f06f 0202 	mvn.w	r2, #2
 8007f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fae3 	bl	8008512 <HAL_TIM_IC_CaptureCallback>
 8007f4c:	e005      	b.n	8007f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fad5 	bl	80084fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fae6 	bl	8008526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 0304 	and.w	r3, r3, #4
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	d122      	bne.n	8007fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b04      	cmp	r3, #4
 8007f7a:	d11b      	bne.n	8007fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f06f 0204 	mvn.w	r2, #4
 8007f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2202      	movs	r2, #2
 8007f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fab9 	bl	8008512 <HAL_TIM_IC_CaptureCallback>
 8007fa0:	e005      	b.n	8007fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 faab 	bl	80084fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fabc 	bl	8008526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b08      	cmp	r3, #8
 8007fc0:	d122      	bne.n	8008008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f003 0308 	and.w	r3, r3, #8
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d11b      	bne.n	8008008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0208 	mvn.w	r2, #8
 8007fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2204      	movs	r2, #4
 8007fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fa8f 	bl	8008512 <HAL_TIM_IC_CaptureCallback>
 8007ff4:	e005      	b.n	8008002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fa81 	bl	80084fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fa92 	bl	8008526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f003 0310 	and.w	r3, r3, #16
 8008012:	2b10      	cmp	r3, #16
 8008014:	d122      	bne.n	800805c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f003 0310 	and.w	r3, r3, #16
 8008020:	2b10      	cmp	r3, #16
 8008022:	d11b      	bne.n	800805c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f06f 0210 	mvn.w	r2, #16
 800802c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2208      	movs	r2, #8
 8008032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fa65 	bl	8008512 <HAL_TIM_IC_CaptureCallback>
 8008048:	e005      	b.n	8008056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fa57 	bl	80084fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fa68 	bl	8008526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b01      	cmp	r3, #1
 8008068:	d10e      	bne.n	8008088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b01      	cmp	r3, #1
 8008076:	d107      	bne.n	8008088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f06f 0201 	mvn.w	r2, #1
 8008080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7f9 f81a 	bl	80010bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008092:	2b80      	cmp	r3, #128	; 0x80
 8008094:	d10e      	bne.n	80080b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a0:	2b80      	cmp	r3, #128	; 0x80
 80080a2:	d107      	bne.n	80080b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fed8 	bl	8008e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c2:	d10e      	bne.n	80080e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ce:	2b80      	cmp	r3, #128	; 0x80
 80080d0:	d107      	bne.n	80080e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80080da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fecb 	bl	8008e78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ec:	2b40      	cmp	r3, #64	; 0x40
 80080ee:	d10e      	bne.n	800810e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fa:	2b40      	cmp	r3, #64	; 0x40
 80080fc:	d107      	bne.n	800810e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fa16 	bl	800853a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b20      	cmp	r3, #32
 800811a:	d10e      	bne.n	800813a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b20      	cmp	r3, #32
 8008128:	d107      	bne.n	800813a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f06f 0220 	mvn.w	r2, #32
 8008132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fe8b 	bl	8008e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800813a:	bf00      	nop
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800815a:	2b01      	cmp	r3, #1
 800815c:	d101      	bne.n	8008162 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800815e:	2302      	movs	r3, #2
 8008160:	e0ff      	b.n	8008362 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b14      	cmp	r3, #20
 800816e:	f200 80f0 	bhi.w	8008352 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008172:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008178:	080081cd 	.word	0x080081cd
 800817c:	08008353 	.word	0x08008353
 8008180:	08008353 	.word	0x08008353
 8008184:	08008353 	.word	0x08008353
 8008188:	0800820d 	.word	0x0800820d
 800818c:	08008353 	.word	0x08008353
 8008190:	08008353 	.word	0x08008353
 8008194:	08008353 	.word	0x08008353
 8008198:	0800824f 	.word	0x0800824f
 800819c:	08008353 	.word	0x08008353
 80081a0:	08008353 	.word	0x08008353
 80081a4:	08008353 	.word	0x08008353
 80081a8:	0800828f 	.word	0x0800828f
 80081ac:	08008353 	.word	0x08008353
 80081b0:	08008353 	.word	0x08008353
 80081b4:	08008353 	.word	0x08008353
 80081b8:	080082d1 	.word	0x080082d1
 80081bc:	08008353 	.word	0x08008353
 80081c0:	08008353 	.word	0x08008353
 80081c4:	08008353 	.word	0x08008353
 80081c8:	08008311 	.word	0x08008311
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fa20 	bl	8008618 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0208 	orr.w	r2, r2, #8
 80081e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 0204 	bic.w	r2, r2, #4
 80081f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6999      	ldr	r1, [r3, #24]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	691a      	ldr	r2, [r3, #16]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	619a      	str	r2, [r3, #24]
      break;
 800820a:	e0a5      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68b9      	ldr	r1, [r7, #8]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fa7c 	bl	8008710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699a      	ldr	r2, [r3, #24]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	699a      	ldr	r2, [r3, #24]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6999      	ldr	r1, [r3, #24]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	021a      	lsls	r2, r3, #8
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	619a      	str	r2, [r3, #24]
      break;
 800824c:	e084      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	4618      	mov	r0, r3
 8008256:	f000 fad5 	bl	8008804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69da      	ldr	r2, [r3, #28]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f042 0208 	orr.w	r2, r2, #8
 8008268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69da      	ldr	r2, [r3, #28]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0204 	bic.w	r2, r2, #4
 8008278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69d9      	ldr	r1, [r3, #28]
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	61da      	str	r2, [r3, #28]
      break;
 800828c:	e064      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68b9      	ldr	r1, [r7, #8]
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fb2d 	bl	80088f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69da      	ldr	r2, [r3, #28]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	69da      	ldr	r2, [r3, #28]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	69d9      	ldr	r1, [r3, #28]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	021a      	lsls	r2, r3, #8
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	61da      	str	r2, [r3, #28]
      break;
 80082ce:	e043      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68b9      	ldr	r1, [r7, #8]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fb6a 	bl	80089b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f042 0208 	orr.w	r2, r2, #8
 80082ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f022 0204 	bic.w	r2, r2, #4
 80082fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	691a      	ldr	r2, [r3, #16]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800830e:	e023      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fba2 	bl	8008a60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800832a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800833a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	021a      	lsls	r2, r3, #8
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008350:	e002      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	75fb      	strb	r3, [r7, #23]
      break;
 8008356:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008360:	7dfb      	ldrb	r3, [r7, #23]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop

0800836c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008380:	2b01      	cmp	r3, #1
 8008382:	d101      	bne.n	8008388 <HAL_TIM_ConfigClockSource+0x1c>
 8008384:	2302      	movs	r3, #2
 8008386:	e0b6      	b.n	80084f6 <HAL_TIM_ConfigClockSource+0x18a>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80083aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083c4:	d03e      	beq.n	8008444 <HAL_TIM_ConfigClockSource+0xd8>
 80083c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083ca:	f200 8087 	bhi.w	80084dc <HAL_TIM_ConfigClockSource+0x170>
 80083ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d2:	f000 8086 	beq.w	80084e2 <HAL_TIM_ConfigClockSource+0x176>
 80083d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083da:	d87f      	bhi.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
 80083dc:	2b70      	cmp	r3, #112	; 0x70
 80083de:	d01a      	beq.n	8008416 <HAL_TIM_ConfigClockSource+0xaa>
 80083e0:	2b70      	cmp	r3, #112	; 0x70
 80083e2:	d87b      	bhi.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
 80083e4:	2b60      	cmp	r3, #96	; 0x60
 80083e6:	d050      	beq.n	800848a <HAL_TIM_ConfigClockSource+0x11e>
 80083e8:	2b60      	cmp	r3, #96	; 0x60
 80083ea:	d877      	bhi.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
 80083ec:	2b50      	cmp	r3, #80	; 0x50
 80083ee:	d03c      	beq.n	800846a <HAL_TIM_ConfigClockSource+0xfe>
 80083f0:	2b50      	cmp	r3, #80	; 0x50
 80083f2:	d873      	bhi.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
 80083f4:	2b40      	cmp	r3, #64	; 0x40
 80083f6:	d058      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x13e>
 80083f8:	2b40      	cmp	r3, #64	; 0x40
 80083fa:	d86f      	bhi.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
 80083fc:	2b30      	cmp	r3, #48	; 0x30
 80083fe:	d064      	beq.n	80084ca <HAL_TIM_ConfigClockSource+0x15e>
 8008400:	2b30      	cmp	r3, #48	; 0x30
 8008402:	d86b      	bhi.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
 8008404:	2b20      	cmp	r3, #32
 8008406:	d060      	beq.n	80084ca <HAL_TIM_ConfigClockSource+0x15e>
 8008408:	2b20      	cmp	r3, #32
 800840a:	d867      	bhi.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
 800840c:	2b00      	cmp	r3, #0
 800840e:	d05c      	beq.n	80084ca <HAL_TIM_ConfigClockSource+0x15e>
 8008410:	2b10      	cmp	r3, #16
 8008412:	d05a      	beq.n	80084ca <HAL_TIM_ConfigClockSource+0x15e>
 8008414:	e062      	b.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6818      	ldr	r0, [r3, #0]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	6899      	ldr	r1, [r3, #8]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	f000 fbef 	bl	8008c08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008438:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	609a      	str	r2, [r3, #8]
      break;
 8008442:	e04f      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6818      	ldr	r0, [r3, #0]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	6899      	ldr	r1, [r3, #8]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f000 fbd8 	bl	8008c08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689a      	ldr	r2, [r3, #8]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008466:	609a      	str	r2, [r3, #8]
      break;
 8008468:	e03c      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	6859      	ldr	r1, [r3, #4]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	461a      	mov	r2, r3
 8008478:	f000 fb4c 	bl	8008b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2150      	movs	r1, #80	; 0x50
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fba5 	bl	8008bd2 <TIM_ITRx_SetConfig>
      break;
 8008488:	e02c      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6818      	ldr	r0, [r3, #0]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	6859      	ldr	r1, [r3, #4]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	461a      	mov	r2, r3
 8008498:	f000 fb6b 	bl	8008b72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2160      	movs	r1, #96	; 0x60
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 fb95 	bl	8008bd2 <TIM_ITRx_SetConfig>
      break;
 80084a8:	e01c      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	6859      	ldr	r1, [r3, #4]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	461a      	mov	r2, r3
 80084b8:	f000 fb2c 	bl	8008b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2140      	movs	r1, #64	; 0x40
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 fb85 	bl	8008bd2 <TIM_ITRx_SetConfig>
      break;
 80084c8:	e00c      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4619      	mov	r1, r3
 80084d4:	4610      	mov	r0, r2
 80084d6:	f000 fb7c 	bl	8008bd2 <TIM_ITRx_SetConfig>
      break;
 80084da:	e003      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	73fb      	strb	r3, [r7, #15]
      break;
 80084e0:	e000      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80084e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084fe:	b480      	push	{r7}
 8008500:	b083      	sub	sp, #12
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800851a:	bf00      	nop
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008526:	b480      	push	{r7}
 8008528:	b083      	sub	sp, #12
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800852e:	bf00      	nop
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800853a:	b480      	push	{r7}
 800853c:	b083      	sub	sp, #12
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008542:	bf00      	nop
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
	...

08008550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a2a      	ldr	r2, [pc, #168]	; (800860c <TIM_Base_SetConfig+0xbc>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d003      	beq.n	8008570 <TIM_Base_SetConfig+0x20>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800856e:	d108      	bne.n	8008582 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a21      	ldr	r2, [pc, #132]	; (800860c <TIM_Base_SetConfig+0xbc>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d00b      	beq.n	80085a2 <TIM_Base_SetConfig+0x52>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008590:	d007      	beq.n	80085a2 <TIM_Base_SetConfig+0x52>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a1e      	ldr	r2, [pc, #120]	; (8008610 <TIM_Base_SetConfig+0xc0>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d003      	beq.n	80085a2 <TIM_Base_SetConfig+0x52>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a1d      	ldr	r2, [pc, #116]	; (8008614 <TIM_Base_SetConfig+0xc4>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d108      	bne.n	80085b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	4313      	orrs	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	689a      	ldr	r2, [r3, #8]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a0c      	ldr	r2, [pc, #48]	; (800860c <TIM_Base_SetConfig+0xbc>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d007      	beq.n	80085f0 <TIM_Base_SetConfig+0xa0>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a0b      	ldr	r2, [pc, #44]	; (8008610 <TIM_Base_SetConfig+0xc0>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d003      	beq.n	80085f0 <TIM_Base_SetConfig+0xa0>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a0a      	ldr	r2, [pc, #40]	; (8008614 <TIM_Base_SetConfig+0xc4>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d103      	bne.n	80085f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	691a      	ldr	r2, [r3, #16]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	615a      	str	r2, [r3, #20]
}
 80085fe:	bf00      	nop
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	40012c00 	.word	0x40012c00
 8008610:	40014000 	.word	0x40014000
 8008614:	40014400 	.word	0x40014400

08008618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	f023 0201 	bic.w	r2, r3, #1
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800864a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f023 0303 	bic.w	r3, r3, #3
 8008652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	4313      	orrs	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f023 0302 	bic.w	r3, r3, #2
 8008664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	4313      	orrs	r3, r2
 800866e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a24      	ldr	r2, [pc, #144]	; (8008704 <TIM_OC1_SetConfig+0xec>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d007      	beq.n	8008688 <TIM_OC1_SetConfig+0x70>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a23      	ldr	r2, [pc, #140]	; (8008708 <TIM_OC1_SetConfig+0xf0>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d003      	beq.n	8008688 <TIM_OC1_SetConfig+0x70>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a22      	ldr	r2, [pc, #136]	; (800870c <TIM_OC1_SetConfig+0xf4>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d10c      	bne.n	80086a2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f023 0308 	bic.w	r3, r3, #8
 800868e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	4313      	orrs	r3, r2
 8008698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f023 0304 	bic.w	r3, r3, #4
 80086a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a17      	ldr	r2, [pc, #92]	; (8008704 <TIM_OC1_SetConfig+0xec>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d007      	beq.n	80086ba <TIM_OC1_SetConfig+0xa2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a16      	ldr	r2, [pc, #88]	; (8008708 <TIM_OC1_SetConfig+0xf0>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d003      	beq.n	80086ba <TIM_OC1_SetConfig+0xa2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a15      	ldr	r2, [pc, #84]	; (800870c <TIM_OC1_SetConfig+0xf4>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d111      	bne.n	80086de <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	4313      	orrs	r3, r2
 80086dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	621a      	str	r2, [r3, #32]
}
 80086f8:	bf00      	nop
 80086fa:	371c      	adds	r7, #28
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	40012c00 	.word	0x40012c00
 8008708:	40014000 	.word	0x40014000
 800870c:	40014400 	.word	0x40014400

08008710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008710:	b480      	push	{r7}
 8008712:	b087      	sub	sp, #28
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	f023 0210 	bic.w	r2, r3, #16
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800873e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800874a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	021b      	lsls	r3, r3, #8
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	4313      	orrs	r3, r2
 8008756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f023 0320 	bic.w	r3, r3, #32
 800875e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	011b      	lsls	r3, r3, #4
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	4313      	orrs	r3, r2
 800876a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a22      	ldr	r2, [pc, #136]	; (80087f8 <TIM_OC2_SetConfig+0xe8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d10d      	bne.n	8008790 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800877a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	011b      	lsls	r3, r3, #4
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	4313      	orrs	r3, r2
 8008786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800878e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a19      	ldr	r2, [pc, #100]	; (80087f8 <TIM_OC2_SetConfig+0xe8>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d007      	beq.n	80087a8 <TIM_OC2_SetConfig+0x98>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a18      	ldr	r2, [pc, #96]	; (80087fc <TIM_OC2_SetConfig+0xec>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d003      	beq.n	80087a8 <TIM_OC2_SetConfig+0x98>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a17      	ldr	r2, [pc, #92]	; (8008800 <TIM_OC2_SetConfig+0xf0>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d113      	bne.n	80087d0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	621a      	str	r2, [r3, #32]
}
 80087ea:	bf00      	nop
 80087ec:	371c      	adds	r7, #28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	40012c00 	.word	0x40012c00
 80087fc:	40014000 	.word	0x40014000
 8008800:	40014400 	.word	0x40014400

08008804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0303 	bic.w	r3, r3, #3
 800883e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	4313      	orrs	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	021b      	lsls	r3, r3, #8
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	4313      	orrs	r3, r2
 800885c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a21      	ldr	r2, [pc, #132]	; (80088e8 <TIM_OC3_SetConfig+0xe4>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d10d      	bne.n	8008882 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800886c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	021b      	lsls	r3, r3, #8
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	4313      	orrs	r3, r2
 8008878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a18      	ldr	r2, [pc, #96]	; (80088e8 <TIM_OC3_SetConfig+0xe4>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d007      	beq.n	800889a <TIM_OC3_SetConfig+0x96>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a17      	ldr	r2, [pc, #92]	; (80088ec <TIM_OC3_SetConfig+0xe8>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d003      	beq.n	800889a <TIM_OC3_SetConfig+0x96>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a16      	ldr	r2, [pc, #88]	; (80088f0 <TIM_OC3_SetConfig+0xec>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d113      	bne.n	80088c2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	011b      	lsls	r3, r3, #4
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	011b      	lsls	r3, r3, #4
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	4313      	orrs	r3, r2
 80088c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	621a      	str	r2, [r3, #32]
}
 80088dc:	bf00      	nop
 80088de:	371c      	adds	r7, #28
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	40012c00 	.word	0x40012c00
 80088ec:	40014000 	.word	0x40014000
 80088f0:	40014400 	.word	0x40014400

080088f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b087      	sub	sp, #28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800892e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	021b      	lsls	r3, r3, #8
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	4313      	orrs	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	031b      	lsls	r3, r3, #12
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	4313      	orrs	r3, r2
 800894e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a14      	ldr	r2, [pc, #80]	; (80089a4 <TIM_OC4_SetConfig+0xb0>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d007      	beq.n	8008968 <TIM_OC4_SetConfig+0x74>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a13      	ldr	r2, [pc, #76]	; (80089a8 <TIM_OC4_SetConfig+0xb4>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d003      	beq.n	8008968 <TIM_OC4_SetConfig+0x74>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a12      	ldr	r2, [pc, #72]	; (80089ac <TIM_OC4_SetConfig+0xb8>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d109      	bne.n	800897c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800896e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	019b      	lsls	r3, r3, #6
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4313      	orrs	r3, r2
 800897a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	621a      	str	r2, [r3, #32]
}
 8008996:	bf00      	nop
 8008998:	371c      	adds	r7, #28
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	40012c00 	.word	0x40012c00
 80089a8:	40014000 	.word	0x40014000
 80089ac:	40014400 	.word	0x40014400

080089b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80089f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	041b      	lsls	r3, r3, #16
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a13      	ldr	r2, [pc, #76]	; (8008a54 <TIM_OC5_SetConfig+0xa4>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d007      	beq.n	8008a1a <TIM_OC5_SetConfig+0x6a>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a12      	ldr	r2, [pc, #72]	; (8008a58 <TIM_OC5_SetConfig+0xa8>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d003      	beq.n	8008a1a <TIM_OC5_SetConfig+0x6a>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a11      	ldr	r2, [pc, #68]	; (8008a5c <TIM_OC5_SetConfig+0xac>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d109      	bne.n	8008a2e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	021b      	lsls	r3, r3, #8
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	621a      	str	r2, [r3, #32]
}
 8008a48:	bf00      	nop
 8008a4a:	371c      	adds	r7, #28
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	40012c00 	.word	0x40012c00
 8008a58:	40014000 	.word	0x40014000
 8008a5c:	40014400 	.word	0x40014400

08008a60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b087      	sub	sp, #28
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	021b      	lsls	r3, r3, #8
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	051b      	lsls	r3, r3, #20
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a14      	ldr	r2, [pc, #80]	; (8008b08 <TIM_OC6_SetConfig+0xa8>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d007      	beq.n	8008acc <TIM_OC6_SetConfig+0x6c>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a13      	ldr	r2, [pc, #76]	; (8008b0c <TIM_OC6_SetConfig+0xac>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d003      	beq.n	8008acc <TIM_OC6_SetConfig+0x6c>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a12      	ldr	r2, [pc, #72]	; (8008b10 <TIM_OC6_SetConfig+0xb0>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d109      	bne.n	8008ae0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	029b      	lsls	r3, r3, #10
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	621a      	str	r2, [r3, #32]
}
 8008afa:	bf00      	nop
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	40012c00 	.word	0x40012c00
 8008b0c:	40014000 	.word	0x40014000
 8008b10:	40014400 	.word	0x40014400

08008b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	f023 0201 	bic.w	r2, r3, #1
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	011b      	lsls	r3, r3, #4
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f023 030a 	bic.w	r3, r3, #10
 8008b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	621a      	str	r2, [r3, #32]
}
 8008b66:	bf00      	nop
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b087      	sub	sp, #28
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	f023 0210 	bic.w	r2, r3, #16
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	031b      	lsls	r3, r3, #12
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008bae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	011b      	lsls	r3, r3, #4
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	621a      	str	r2, [r3, #32]
}
 8008bc6:	bf00      	nop
 8008bc8:	371c      	adds	r7, #28
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b085      	sub	sp, #20
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	f043 0307 	orr.w	r3, r3, #7
 8008bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	609a      	str	r2, [r3, #8]
}
 8008bfc:	bf00      	nop
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b087      	sub	sp, #28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
 8008c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	021a      	lsls	r2, r3, #8
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	697a      	ldr	r2, [r7, #20]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	697a      	ldr	r2, [r7, #20]
 8008c3a:	609a      	str	r2, [r3, #8]
}
 8008c3c:	bf00      	nop
 8008c3e:	371c      	adds	r7, #28
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	f003 031f 	and.w	r3, r3, #31
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6a1a      	ldr	r2, [r3, #32]
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	43db      	mvns	r3, r3
 8008c6a:	401a      	ands	r2, r3
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6a1a      	ldr	r2, [r3, #32]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	f003 031f 	and.w	r3, r3, #31
 8008c7a:	6879      	ldr	r1, [r7, #4]
 8008c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c80:	431a      	orrs	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	621a      	str	r2, [r3, #32]
}
 8008c86:	bf00      	nop
 8008c88:	371c      	adds	r7, #28
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
	...

08008c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d101      	bne.n	8008cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ca8:	2302      	movs	r3, #2
 8008caa:	e04f      	b.n	8008d4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a21      	ldr	r2, [pc, #132]	; (8008d58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d108      	bne.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008cdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a14      	ldr	r2, [pc, #80]	; (8008d58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d009      	beq.n	8008d20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d14:	d004      	beq.n	8008d20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a10      	ldr	r2, [pc, #64]	; (8008d5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d10c      	bne.n	8008d3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	40012c00 	.word	0x40012c00
 8008d5c:	40014000 	.word	0x40014000

08008d60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d101      	bne.n	8008d7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d78:	2302      	movs	r3, #2
 8008d7a:	e060      	b.n	8008e3e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	695b      	ldr	r3, [r3, #20]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de2:	4313      	orrs	r3, r2
 8008de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	041b      	lsls	r3, r3, #16
 8008df2:	4313      	orrs	r3, r2
 8008df4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a14      	ldr	r2, [pc, #80]	; (8008e4c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d115      	bne.n	8008e2c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0a:	051b      	lsls	r3, r3, #20
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	69db      	ldr	r3, [r3, #28]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	6a1b      	ldr	r3, [r3, #32]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	40012c00 	.word	0x40012c00

08008e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <arm_correlate_f32>:
 8008e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e90:	b087      	sub	sp, #28
 8008e92:	4299      	cmp	r1, r3
 8008e94:	4684      	mov	ip, r0
 8008e96:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008e98:	f0c0 80a7 	bcc.w	8008fea <arm_correlate_f32+0x15e>
 8008e9c:	ebc3 0e01 	rsb	lr, r3, r1
 8008ea0:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8008ea4:	2704      	movs	r7, #4
 8008ea6:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8008eaa:	3101      	adds	r1, #1
 8008eac:	3801      	subs	r0, #1
 8008eae:	1ac9      	subs	r1, r1, r3
 8008eb0:	1e5e      	subs	r6, r3, #1
 8008eb2:	9100      	str	r1, [sp, #0]
 8008eb4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8008eb8:	d055      	beq.n	8008f66 <arm_correlate_f32+0xda>
 8008eba:	eddf 7a6c 	vldr	s15, [pc, #432]	; 800906c <arm_correlate_f32+0x1e0>
 8008ebe:	f1a0 0804 	sub.w	r8, r0, #4
 8008ec2:	46f1      	mov	r9, lr
 8008ec4:	4664      	mov	r4, ip
 8008ec6:	2501      	movs	r5, #1
 8008ec8:	f015 0103 	ands.w	r1, r5, #3
 8008ecc:	d009      	beq.n	8008ee2 <arm_correlate_f32+0x56>
 8008ece:	ecf4 6a01 	vldmia	r4!, {s13}
 8008ed2:	ecb0 7a01 	vldmia	r0!, {s14}
 8008ed6:	ee26 7a87 	vmul.f32	s14, s13, s14
 8008eda:	3901      	subs	r1, #1
 8008edc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ee0:	d1f5      	bne.n	8008ece <arm_correlate_f32+0x42>
 8008ee2:	3501      	adds	r5, #1
 8008ee4:	429d      	cmp	r5, r3
 8008ee6:	edc9 7a00 	vstr	s15, [r9]
 8008eea:	4640      	mov	r0, r8
 8008eec:	44b9      	add	r9, r7
 8008eee:	d038      	beq.n	8008f62 <arm_correlate_f32+0xd6>
 8008ef0:	ea5f 0a95 	movs.w	sl, r5, lsr #2
 8008ef4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800906c <arm_correlate_f32+0x1e0>
 8008ef8:	f000 8253 	beq.w	80093a2 <arm_correlate_f32+0x516>
 8008efc:	f10c 0010 	add.w	r0, ip, #16
 8008f00:	f108 0110 	add.w	r1, r8, #16
 8008f04:	4654      	mov	r4, sl
 8008f06:	ed51 6a04 	vldr	s13, [r1, #-16]
 8008f0a:	ed10 4a04 	vldr	s8, [r0, #-16]
 8008f0e:	ed50 3a03 	vldr	s7, [r0, #-12]
 8008f12:	ed11 5a03 	vldr	s10, [r1, #-12]
 8008f16:	ed50 4a02 	vldr	s9, [r0, #-8]
 8008f1a:	ed11 6a02 	vldr	s12, [r1, #-8]
 8008f1e:	ed50 5a01 	vldr	s11, [r0, #-4]
 8008f22:	ed11 7a01 	vldr	s14, [r1, #-4]
 8008f26:	ee24 4a26 	vmul.f32	s8, s8, s13
 8008f2a:	ee23 5a85 	vmul.f32	s10, s7, s10
 8008f2e:	ee74 6a27 	vadd.f32	s13, s8, s15
 8008f32:	ee24 6a86 	vmul.f32	s12, s9, s12
 8008f36:	ee75 6a26 	vadd.f32	s13, s10, s13
 8008f3a:	ee25 7a87 	vmul.f32	s14, s11, s14
 8008f3e:	ee76 7a26 	vadd.f32	s15, s12, s13
 8008f42:	3c01      	subs	r4, #1
 8008f44:	f100 0010 	add.w	r0, r0, #16
 8008f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f4c:	f101 0110 	add.w	r1, r1, #16
 8008f50:	d1d9      	bne.n	8008f06 <arm_correlate_f32+0x7a>
 8008f52:	ea4f 100a 	mov.w	r0, sl, lsl #4
 8008f56:	eb0c 0400 	add.w	r4, ip, r0
 8008f5a:	4440      	add	r0, r8
 8008f5c:	f1a8 0804 	sub.w	r8, r8, #4
 8008f60:	e7b2      	b.n	8008ec8 <arm_correlate_f32+0x3c>
 8008f62:	fb07 ee06 	mla	lr, r7, r6, lr
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	9900      	ldr	r1, [sp, #0]
 8008f6a:	d84d      	bhi.n	8009008 <arm_correlate_f32+0x17c>
 8008f6c:	2900      	cmp	r1, #0
 8008f6e:	f000 81d4 	beq.w	800931a <arm_correlate_f32+0x48e>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 81d6 	beq.w	8009324 <arm_correlate_f32+0x498>
 8008f78:	2e00      	cmp	r6, #0
 8008f7a:	f000 81df 	beq.w	800933c <arm_correlate_f32+0x4b0>
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	9b00      	ldr	r3, [sp, #0]
 8008f82:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008f86:	f000 81ef 	beq.w	8009368 <arm_correlate_f32+0x4dc>
 8008f8a:	eddf 4a38 	vldr	s9, [pc, #224]	; 800906c <arm_correlate_f32+0x1e0>
 8008f8e:	eb0c 0503 	add.w	r5, ip, r3
 8008f92:	4664      	mov	r4, ip
 8008f94:	f10c 0004 	add.w	r0, ip, #4
 8008f98:	4671      	mov	r1, lr
 8008f9a:	ecb4 5a01 	vldmia	r4!, {s10}
 8008f9e:	ed92 6a00 	vldr	s12, [r2]
 8008fa2:	edd0 7a00 	vldr	s15, [r0]
 8008fa6:	edd2 6a01 	vldr	s13, [r2, #4]
 8008faa:	edd0 5a01 	vldr	s11, [r0, #4]
 8008fae:	ed92 7a02 	vldr	s14, [r2, #8]
 8008fb2:	ee25 6a06 	vmul.f32	s12, s10, s12
 8008fb6:	3004      	adds	r0, #4
 8008fb8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008fbc:	ee36 6a24 	vadd.f32	s12, s12, s9
 8008fc0:	ee25 7a87 	vmul.f32	s14, s11, s14
 8008fc4:	ee76 7a26 	vadd.f32	s15, s12, s13
 8008fc8:	42ac      	cmp	r4, r5
 8008fca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fce:	edc1 7a00 	vstr	s15, [r1]
 8008fd2:	4439      	add	r1, r7
 8008fd4:	d1e1      	bne.n	8008f9a <arm_correlate_f32+0x10e>
 8008fd6:	9900      	ldr	r1, [sp, #0]
 8008fd8:	449c      	add	ip, r3
 8008fda:	fb07 ee01 	mla	lr, r7, r1, lr
 8008fde:	2e00      	cmp	r6, #0
 8008fe0:	f040 814c 	bne.w	800927c <arm_correlate_f32+0x3f0>
 8008fe4:	b007      	add	sp, #28
 8008fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fea:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8008fee:	3802      	subs	r0, #2
 8008ff0:	4666      	mov	r6, ip
 8008ff2:	4408      	add	r0, r1
 8008ff4:	460d      	mov	r5, r1
 8008ff6:	4694      	mov	ip, r2
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	eb04 0e80 	add.w	lr, r4, r0, lsl #2
 8008ffe:	4632      	mov	r2, r6
 8009000:	f06f 0703 	mvn.w	r7, #3
 8009004:	462b      	mov	r3, r5
 8009006:	e74e      	b.n	8008ea6 <arm_correlate_f32+0x1a>
 8009008:	0889      	lsrs	r1, r1, #2
 800900a:	9101      	str	r1, [sp, #4]
 800900c:	f000 8187 	beq.w	800931e <arm_correlate_f32+0x492>
 8009010:	0109      	lsls	r1, r1, #4
 8009012:	ea4f 0a93 	mov.w	sl, r3, lsr #2
 8009016:	9102      	str	r1, [sp, #8]
 8009018:	ea4f 1b0a 	mov.w	fp, sl, lsl #4
 800901c:	310c      	adds	r1, #12
 800901e:	4461      	add	r1, ip
 8009020:	f003 0903 	and.w	r9, r3, #3
 8009024:	eb02 000b 	add.w	r0, r2, fp
 8009028:	f102 0410 	add.w	r4, r2, #16
 800902c:	f10c 050c 	add.w	r5, ip, #12
 8009030:	46f0      	mov	r8, lr
 8009032:	f8cd e00c 	str.w	lr, [sp, #12]
 8009036:	9604      	str	r6, [sp, #16]
 8009038:	f8cd c014 	str.w	ip, [sp, #20]
 800903c:	464e      	mov	r6, r9
 800903e:	468e      	mov	lr, r1
 8009040:	4681      	mov	r9, r0
 8009042:	46a4      	mov	ip, r4
 8009044:	eddf 5a09 	vldr	s11, [pc, #36]	; 800906c <arm_correlate_f32+0x1e0>
 8009048:	ed55 2a03 	vldr	s5, [r5, #-12]
 800904c:	ed15 2a02 	vldr	s4, [r5, #-8]
 8009050:	ed55 1a01 	vldr	s3, [r5, #-4]
 8009054:	ed95 5a00 	vldr	s10, [r5]
 8009058:	eef0 4a65 	vmov.f32	s9, s11
 800905c:	eef0 3a65 	vmov.f32	s7, s11
 8009060:	eeb0 1a65 	vmov.f32	s2, s11
 8009064:	4661      	mov	r1, ip
 8009066:	4628      	mov	r0, r5
 8009068:	4654      	mov	r4, sl
 800906a:	e004      	b.n	8009076 <arm_correlate_f32+0x1ea>
 800906c:	00000000 	.word	0x00000000
 8009070:	3010      	adds	r0, #16
 8009072:	ed90 5a00 	vldr	s10, [r0]
 8009076:	ed11 6a04 	vldr	s12, [r1, #-16]
 800907a:	ed51 6a03 	vldr	s13, [r1, #-12]
 800907e:	ed11 7a02 	vldr	s14, [r1, #-8]
 8009082:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009086:	ee62 0a86 	vmul.f32	s1, s5, s12
 800908a:	ee22 3a06 	vmul.f32	s6, s4, s12
 800908e:	ee21 4a86 	vmul.f32	s8, s3, s12
 8009092:	edd0 2a01 	vldr	s5, [r0, #4]
 8009096:	ee25 6a06 	vmul.f32	s12, s10, s12
 800909a:	ee30 1a81 	vadd.f32	s2, s1, s2
 800909e:	ee73 3a23 	vadd.f32	s7, s6, s7
 80090a2:	ee62 0a26 	vmul.f32	s1, s4, s13
 80090a6:	ee21 3aa6 	vmul.f32	s6, s3, s13
 80090aa:	ee74 4a24 	vadd.f32	s9, s8, s9
 80090ae:	ee76 5a25 	vadd.f32	s11, s12, s11
 80090b2:	ed90 2a02 	vldr	s4, [r0, #8]
 80090b6:	ee25 6a26 	vmul.f32	s12, s10, s13
 80090ba:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80090be:	ee30 1a81 	vadd.f32	s2, s1, s2
 80090c2:	ee73 3a23 	vadd.f32	s7, s6, s7
 80090c6:	ee61 0a87 	vmul.f32	s1, s3, s14
 80090ca:	ee25 4a07 	vmul.f32	s8, s10, s14
 80090ce:	ee76 4a24 	vadd.f32	s9, s12, s9
 80090d2:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80090d6:	edd0 1a03 	vldr	s3, [r0, #12]
 80090da:	ee62 6a87 	vmul.f32	s13, s5, s14
 80090de:	ee22 7a07 	vmul.f32	s14, s4, s14
 80090e2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80090e6:	ee34 6a23 	vadd.f32	s12, s8, s7
 80090ea:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80090ee:	ee62 3aa7 	vmul.f32	s7, s5, s15
 80090f2:	ee62 4a27 	vmul.f32	s9, s4, s15
 80090f6:	ee30 3a81 	vadd.f32	s6, s1, s2
 80090fa:	ee37 7a25 	vadd.f32	s14, s14, s11
 80090fe:	ee61 7aa7 	vmul.f32	s15, s3, s15
 8009102:	3c01      	subs	r4, #1
 8009104:	f101 0110 	add.w	r1, r1, #16
 8009108:	ee35 1a03 	vadd.f32	s2, s10, s6
 800910c:	ee73 3a86 	vadd.f32	s7, s7, s12
 8009110:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8009114:	ee77 5a87 	vadd.f32	s11, s15, s14
 8009118:	d1aa      	bne.n	8009070 <arm_correlate_f32+0x1e4>
 800911a:	eb05 000b 	add.w	r0, r5, fp
 800911e:	b1ee      	cbz	r6, 800915c <arm_correlate_f32+0x2d0>
 8009120:	4631      	mov	r1, r6
 8009122:	464c      	mov	r4, r9
 8009124:	ecf4 7a01 	vldmia	r4!, {s15}
 8009128:	ecb0 7a01 	vldmia	r0!, {s14}
 800912c:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8009130:	ee22 6a27 	vmul.f32	s12, s4, s15
 8009134:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8009138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800913c:	3901      	subs	r1, #1
 800913e:	ee31 1a22 	vadd.f32	s2, s2, s5
 8009142:	ee73 3a86 	vadd.f32	s7, s7, s12
 8009146:	eef0 2a42 	vmov.f32	s5, s4
 800914a:	ee74 4aa6 	vadd.f32	s9, s9, s13
 800914e:	eeb0 2a61 	vmov.f32	s4, s3
 8009152:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8009156:	eef0 1a47 	vmov.f32	s3, s14
 800915a:	d1e3      	bne.n	8009124 <arm_correlate_f32+0x298>
 800915c:	eb08 0107 	add.w	r1, r8, r7
 8009160:	19c8      	adds	r0, r1, r7
 8009162:	3510      	adds	r5, #16
 8009164:	ed88 1a00 	vstr	s2, [r8]
 8009168:	4575      	cmp	r5, lr
 800916a:	eb00 0807 	add.w	r8, r0, r7
 800916e:	edc1 3a00 	vstr	s7, [r1]
 8009172:	edc0 4a00 	vstr	s9, [r0]
 8009176:	edc8 5a00 	vstr	s11, [r8]
 800917a:	44b8      	add	r8, r7
 800917c:	f47f af62 	bne.w	8009044 <arm_correlate_f32+0x1b8>
 8009180:	f8dd c014 	ldr.w	ip, [sp, #20]
 8009184:	9802      	ldr	r0, [sp, #8]
 8009186:	9c01      	ldr	r4, [sp, #4]
 8009188:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800918c:	9e04      	ldr	r6, [sp, #16]
 800918e:	00b9      	lsls	r1, r7, #2
 8009190:	4460      	add	r0, ip
 8009192:	4605      	mov	r5, r0
 8009194:	fb04 ee01 	mla	lr, r4, r1, lr
 8009198:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800919c:	9900      	ldr	r1, [sp, #0]
 800919e:	f011 0103 	ands.w	r1, r1, #3
 80091a2:	9101      	str	r1, [sp, #4]
 80091a4:	d064      	beq.n	8009270 <arm_correlate_f32+0x3e4>
 80091a6:	ea4f 0b93 	mov.w	fp, r3, lsr #2
 80091aa:	3101      	adds	r1, #1
 80091ac:	4441      	add	r1, r8
 80091ae:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 80091b2:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 80091b6:	f108 0801 	add.w	r8, r8, #1
 80091ba:	f003 0003 	and.w	r0, r3, #3
 80091be:	f102 0410 	add.w	r4, r2, #16
 80091c2:	eb02 030a 	add.w	r3, r2, sl
 80091c6:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
 80091ca:	46f1      	mov	r9, lr
 80091cc:	f8cd e008 	str.w	lr, [sp, #8]
 80091d0:	9603      	str	r6, [sp, #12]
 80091d2:	f8cd c010 	str.w	ip, [sp, #16]
 80091d6:	460e      	mov	r6, r1
 80091d8:	469c      	mov	ip, r3
 80091da:	46a6      	mov	lr, r4
 80091dc:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 800906c <arm_correlate_f32+0x1e0>
 80091e0:	f105 0110 	add.w	r1, r5, #16
 80091e4:	4673      	mov	r3, lr
 80091e6:	465c      	mov	r4, fp
 80091e8:	ed53 6a04 	vldr	s13, [r3, #-16]
 80091ec:	ed11 4a04 	vldr	s8, [r1, #-16]
 80091f0:	ed51 3a03 	vldr	s7, [r1, #-12]
 80091f4:	ed13 5a03 	vldr	s10, [r3, #-12]
 80091f8:	ed51 4a02 	vldr	s9, [r1, #-8]
 80091fc:	ed13 6a02 	vldr	s12, [r3, #-8]
 8009200:	ed51 5a01 	vldr	s11, [r1, #-4]
 8009204:	ed13 7a01 	vldr	s14, [r3, #-4]
 8009208:	ee24 4a26 	vmul.f32	s8, s8, s13
 800920c:	ee23 5a85 	vmul.f32	s10, s7, s10
 8009210:	ee74 6a27 	vadd.f32	s13, s8, s15
 8009214:	ee24 6a86 	vmul.f32	s12, s9, s12
 8009218:	ee75 6a26 	vadd.f32	s13, s10, s13
 800921c:	ee25 7a87 	vmul.f32	s14, s11, s14
 8009220:	ee76 7a26 	vadd.f32	s15, s12, s13
 8009224:	3c01      	subs	r4, #1
 8009226:	f101 0110 	add.w	r1, r1, #16
 800922a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800922e:	f103 0310 	add.w	r3, r3, #16
 8009232:	d1d9      	bne.n	80091e8 <arm_correlate_f32+0x35c>
 8009234:	4455      	add	r5, sl
 8009236:	b158      	cbz	r0, 8009250 <arm_correlate_f32+0x3c4>
 8009238:	4603      	mov	r3, r0
 800923a:	4661      	mov	r1, ip
 800923c:	ecf5 6a01 	vldmia	r5!, {s13}
 8009240:	ecb1 7a01 	vldmia	r1!, {s14}
 8009244:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009248:	3b01      	subs	r3, #1
 800924a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800924e:	d1f5      	bne.n	800923c <arm_correlate_f32+0x3b0>
 8009250:	4645      	mov	r5, r8
 8009252:	f108 0804 	add.w	r8, r8, #4
 8009256:	45b0      	cmp	r8, r6
 8009258:	edc9 7a00 	vstr	s15, [r9]
 800925c:	44b9      	add	r9, r7
 800925e:	d1bd      	bne.n	80091dc <arm_correlate_f32+0x350>
 8009260:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009264:	9b01      	ldr	r3, [sp, #4]
 8009266:	9e03      	ldr	r6, [sp, #12]
 8009268:	f8dd c010 	ldr.w	ip, [sp, #16]
 800926c:	fb07 ee03 	mla	lr, r7, r3, lr
 8009270:	9b00      	ldr	r3, [sp, #0]
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	449c      	add	ip, r3
 8009276:	2e00      	cmp	r6, #0
 8009278:	f43f aeb4 	beq.w	8008fe4 <arm_correlate_f32+0x158>
 800927c:	08b4      	lsrs	r4, r6, #2
 800927e:	ed5f 7a85 	vldr	s15, [pc, #-532]	; 800906c <arm_correlate_f32+0x1e0>
 8009282:	d047      	beq.n	8009314 <arm_correlate_f32+0x488>
 8009284:	f10c 0110 	add.w	r1, ip, #16
 8009288:	f102 0310 	add.w	r3, r2, #16
 800928c:	4620      	mov	r0, r4
 800928e:	ed53 6a04 	vldr	s13, [r3, #-16]
 8009292:	ed11 4a04 	vldr	s8, [r1, #-16]
 8009296:	ed51 3a03 	vldr	s7, [r1, #-12]
 800929a:	ed13 5a03 	vldr	s10, [r3, #-12]
 800929e:	ed51 4a02 	vldr	s9, [r1, #-8]
 80092a2:	ed13 6a02 	vldr	s12, [r3, #-8]
 80092a6:	ed51 5a01 	vldr	s11, [r1, #-4]
 80092aa:	ed13 7a01 	vldr	s14, [r3, #-4]
 80092ae:	ee24 4a26 	vmul.f32	s8, s8, s13
 80092b2:	ee23 5a85 	vmul.f32	s10, s7, s10
 80092b6:	ee74 6a27 	vadd.f32	s13, s8, s15
 80092ba:	ee24 6a86 	vmul.f32	s12, s9, s12
 80092be:	ee75 6a26 	vadd.f32	s13, s10, s13
 80092c2:	ee25 7a87 	vmul.f32	s14, s11, s14
 80092c6:	ee76 7a26 	vadd.f32	s15, s12, s13
 80092ca:	3801      	subs	r0, #1
 80092cc:	f101 0110 	add.w	r1, r1, #16
 80092d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092d4:	f103 0310 	add.w	r3, r3, #16
 80092d8:	d1d9      	bne.n	800928e <arm_correlate_f32+0x402>
 80092da:	0121      	lsls	r1, r4, #4
 80092dc:	eb0c 0001 	add.w	r0, ip, r1
 80092e0:	4411      	add	r1, r2
 80092e2:	f016 0303 	ands.w	r3, r6, #3
 80092e6:	d009      	beq.n	80092fc <arm_correlate_f32+0x470>
 80092e8:	ecf0 6a01 	vldmia	r0!, {s13}
 80092ec:	ecb1 7a01 	vldmia	r1!, {s14}
 80092f0:	ee26 7a87 	vmul.f32	s14, s13, s14
 80092f4:	3b01      	subs	r3, #1
 80092f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092fa:	d1f5      	bne.n	80092e8 <arm_correlate_f32+0x45c>
 80092fc:	3e01      	subs	r6, #1
 80092fe:	edce 7a00 	vstr	s15, [lr]
 8009302:	f10c 0c04 	add.w	ip, ip, #4
 8009306:	44be      	add	lr, r7
 8009308:	f43f ae6c 	beq.w	8008fe4 <arm_correlate_f32+0x158>
 800930c:	08b4      	lsrs	r4, r6, #2
 800930e:	ed5f 7aa9 	vldr	s15, [pc, #-676]	; 800906c <arm_correlate_f32+0x1e0>
 8009312:	d1b7      	bne.n	8009284 <arm_correlate_f32+0x3f8>
 8009314:	4611      	mov	r1, r2
 8009316:	4660      	mov	r0, ip
 8009318:	e7e3      	b.n	80092e2 <arm_correlate_f32+0x456>
 800931a:	460b      	mov	r3, r1
 800931c:	e7aa      	b.n	8009274 <arm_correlate_f32+0x3e8>
 800931e:	4688      	mov	r8, r1
 8009320:	4665      	mov	r5, ip
 8009322:	e73b      	b.n	800919c <arm_correlate_f32+0x310>
 8009324:	9900      	ldr	r1, [sp, #0]
 8009326:	2000      	movs	r0, #0
 8009328:	4673      	mov	r3, lr
 800932a:	3901      	subs	r1, #1
 800932c:	6018      	str	r0, [r3, #0]
 800932e:	443b      	add	r3, r7
 8009330:	d1fb      	bne.n	800932a <arm_correlate_f32+0x49e>
 8009332:	9900      	ldr	r1, [sp, #0]
 8009334:	fb07 ee01 	mla	lr, r7, r1, lr
 8009338:	008b      	lsls	r3, r1, #2
 800933a:	e79b      	b.n	8009274 <arm_correlate_f32+0x3e8>
 800933c:	9b00      	ldr	r3, [sp, #0]
 800933e:	ed5f 6ab5 	vldr	s13, [pc, #-724]	; 800906c <arm_correlate_f32+0x1e0>
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	eb0c 0403 	add.w	r4, ip, r3
 8009348:	4660      	mov	r0, ip
 800934a:	4671      	mov	r1, lr
 800934c:	ecb0 7a01 	vldmia	r0!, {s14}
 8009350:	edd2 7a00 	vldr	s15, [r2]
 8009354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009358:	42a0      	cmp	r0, r4
 800935a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800935e:	edc1 7a00 	vstr	s15, [r1]
 8009362:	4439      	add	r1, r7
 8009364:	d1f2      	bne.n	800934c <arm_correlate_f32+0x4c0>
 8009366:	e636      	b.n	8008fd6 <arm_correlate_f32+0x14a>
 8009368:	ed5f 5ac0 	vldr	s11, [pc, #-768]	; 800906c <arm_correlate_f32+0x1e0>
 800936c:	eb0c 0403 	add.w	r4, ip, r3
 8009370:	4661      	mov	r1, ip
 8009372:	4670      	mov	r0, lr
 8009374:	ed91 6a00 	vldr	s12, [r1]
 8009378:	ed92 7a00 	vldr	s14, [r2]
 800937c:	edd1 6a01 	vldr	s13, [r1, #4]
 8009380:	edd2 7a01 	vldr	s15, [r2, #4]
 8009384:	3104      	adds	r1, #4
 8009386:	ee26 7a07 	vmul.f32	s14, s12, s14
 800938a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800938e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8009392:	42a1      	cmp	r1, r4
 8009394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009398:	edc0 7a00 	vstr	s15, [r0]
 800939c:	4438      	add	r0, r7
 800939e:	d1e9      	bne.n	8009374 <arm_correlate_f32+0x4e8>
 80093a0:	e619      	b.n	8008fd6 <arm_correlate_f32+0x14a>
 80093a2:	4664      	mov	r4, ip
 80093a4:	e5da      	b.n	8008f5c <arm_correlate_f32+0xd0>
 80093a6:	bf00      	nop

080093a8 <arm_biquad_cascade_df1_init_f32>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4604      	mov	r4, r0
 80093ac:	6082      	str	r2, [r0, #8]
 80093ae:	6001      	str	r1, [r0, #0]
 80093b0:	461d      	mov	r5, r3
 80093b2:	010a      	lsls	r2, r1, #4
 80093b4:	4618      	mov	r0, r3
 80093b6:	2100      	movs	r1, #0
 80093b8:	f000 f950 	bl	800965c <memset>
 80093bc:	6065      	str	r5, [r4, #4]
 80093be:	bd38      	pop	{r3, r4, r5, pc}

080093c0 <arm_biquad_cascade_df1_f32>:
 80093c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093c4:	ed2d 8b02 	vpush	{d8}
 80093c8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80093cc:	6886      	ldr	r6, [r0, #8]
 80093ce:	6845      	ldr	r5, [r0, #4]
 80093d0:	6807      	ldr	r7, [r0, #0]
 80093d2:	4696      	mov	lr, r2
 80093d4:	ea4f 180c 	mov.w	r8, ip, lsl #4
 80093d8:	f003 0203 	and.w	r2, r3, #3
 80093dc:	eb0e 0908 	add.w	r9, lr, r8
 80093e0:	3614      	adds	r6, #20
 80093e2:	3510      	adds	r5, #16
 80093e4:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 80093e8:	ed56 1a04 	vldr	s3, [r6, #-16]
 80093ec:	ed16 1a03 	vldr	s2, [r6, #-12]
 80093f0:	ed56 0a02 	vldr	s1, [r6, #-8]
 80093f4:	ed16 0a01 	vldr	s0, [r6, #-4]
 80093f8:	ed15 8a04 	vldr	s16, [r5, #-16]
 80093fc:	ed55 8a03 	vldr	s17, [r5, #-12]
 8009400:	ed15 7a02 	vldr	s14, [r5, #-8]
 8009404:	ed55 7a01 	vldr	s15, [r5, #-4]
 8009408:	f1bc 0f00 	cmp.w	ip, #0
 800940c:	f000 80a5 	beq.w	800955a <arm_biquad_cascade_df1_f32+0x19a>
 8009410:	f101 0010 	add.w	r0, r1, #16
 8009414:	f10e 0310 	add.w	r3, lr, #16
 8009418:	4664      	mov	r4, ip
 800941a:	ed50 3a04 	vldr	s7, [r0, #-16]
 800941e:	ee21 6a88 	vmul.f32	s12, s3, s16
 8009422:	ee22 5a23 	vmul.f32	s10, s4, s7
 8009426:	ee61 8a28 	vmul.f32	s17, s2, s17
 800942a:	ee35 6a06 	vadd.f32	s12, s10, s12
 800942e:	ee60 6a87 	vmul.f32	s13, s1, s14
 8009432:	ee36 6a28 	vadd.f32	s12, s12, s17
 8009436:	ee60 7a27 	vmul.f32	s15, s0, s15
 800943a:	ee76 5a26 	vadd.f32	s11, s12, s13
 800943e:	ee61 6aa3 	vmul.f32	s13, s3, s7
 8009442:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8009446:	ee21 8a08 	vmul.f32	s16, s2, s16
 800944a:	ed43 7a04 	vstr	s15, [r3, #-16]
 800944e:	ed50 2a03 	vldr	s5, [r0, #-12]
 8009452:	ee22 6a22 	vmul.f32	s12, s4, s5
 8009456:	ee60 5aa7 	vmul.f32	s11, s1, s15
 800945a:	ee36 6a26 	vadd.f32	s12, s12, s13
 800945e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009462:	ee76 6a08 	vadd.f32	s13, s12, s16
 8009466:	ee21 3aa2 	vmul.f32	s6, s3, s5
 800946a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800946e:	ee21 8a23 	vmul.f32	s16, s2, s7
 8009472:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009476:	ee60 7a27 	vmul.f32	s15, s0, s15
 800947a:	ed03 7a03 	vstr	s14, [r3, #-12]
 800947e:	ed50 8a02 	vldr	s17, [r0, #-8]
 8009482:	ee62 3a28 	vmul.f32	s7, s4, s17
 8009486:	ee20 6a87 	vmul.f32	s12, s1, s14
 800948a:	ee33 3a83 	vadd.f32	s6, s7, s6
 800948e:	ee21 4aa8 	vmul.f32	s8, s3, s17
 8009492:	ee73 6a08 	vadd.f32	s13, s6, s16
 8009496:	ee61 2a22 	vmul.f32	s5, s2, s5
 800949a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800949e:	ee20 7a07 	vmul.f32	s14, s0, s14
 80094a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a6:	3c01      	subs	r4, #1
 80094a8:	ed43 7a02 	vstr	s15, [r3, #-8]
 80094ac:	ed10 8a01 	vldr	s16, [r0, #-4]
 80094b0:	ee62 3a08 	vmul.f32	s7, s4, s16
 80094b4:	ee60 6aa7 	vmul.f32	s13, s1, s15
 80094b8:	ee73 3a84 	vadd.f32	s7, s7, s8
 80094bc:	f100 0010 	add.w	r0, r0, #16
 80094c0:	ee33 4aa2 	vadd.f32	s8, s7, s5
 80094c4:	f103 0310 	add.w	r3, r3, #16
 80094c8:	ee34 4a26 	vadd.f32	s8, s8, s13
 80094cc:	ee34 7a07 	vadd.f32	s14, s8, s14
 80094d0:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 80094d4:	d1a1      	bne.n	800941a <arm_biquad_cascade_df1_f32+0x5a>
 80094d6:	4441      	add	r1, r8
 80094d8:	4648      	mov	r0, r9
 80094da:	b3aa      	cbz	r2, 8009548 <arm_biquad_cascade_df1_f32+0x188>
 80094dc:	4613      	mov	r3, r2
 80094de:	e003      	b.n	80094e8 <arm_biquad_cascade_df1_f32+0x128>
 80094e0:	eeb0 7a45 	vmov.f32	s14, s10
 80094e4:	eeb0 8a43 	vmov.f32	s16, s6
 80094e8:	ecb1 3a01 	vldmia	r1!, {s6}
 80094ec:	ee21 6a88 	vmul.f32	s12, s3, s16
 80094f0:	ee62 3a03 	vmul.f32	s7, s4, s6
 80094f4:	ee61 8a28 	vmul.f32	s17, s2, s17
 80094f8:	ee33 4a86 	vadd.f32	s8, s7, s12
 80094fc:	ee60 4a87 	vmul.f32	s9, s1, s14
 8009500:	ee34 6a28 	vadd.f32	s12, s8, s17
 8009504:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009508:	ee76 4a24 	vadd.f32	s9, s12, s9
 800950c:	3b01      	subs	r3, #1
 800950e:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009512:	eef0 8a48 	vmov.f32	s17, s16
 8009516:	eef0 7a47 	vmov.f32	s15, s14
 800951a:	eca0 5a01 	vstmia	r0!, {s10}
 800951e:	d1df      	bne.n	80094e0 <arm_biquad_cascade_df1_f32+0x120>
 8009520:	3f01      	subs	r7, #1
 8009522:	ed05 3a04 	vstr	s6, [r5, #-16]
 8009526:	ed05 8a03 	vstr	s16, [r5, #-12]
 800952a:	ed05 5a02 	vstr	s10, [r5, #-8]
 800952e:	ed05 7a01 	vstr	s14, [r5, #-4]
 8009532:	f106 0614 	add.w	r6, r6, #20
 8009536:	f105 0510 	add.w	r5, r5, #16
 800953a:	4671      	mov	r1, lr
 800953c:	f47f af52 	bne.w	80093e4 <arm_biquad_cascade_df1_f32+0x24>
 8009540:	ecbd 8b02 	vpop	{d8}
 8009544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009548:	eeb0 5a47 	vmov.f32	s10, s14
 800954c:	eeb0 3a48 	vmov.f32	s6, s16
 8009550:	eeb0 7a67 	vmov.f32	s14, s15
 8009554:	eeb0 8a68 	vmov.f32	s16, s17
 8009558:	e7e2      	b.n	8009520 <arm_biquad_cascade_df1_f32+0x160>
 800955a:	4670      	mov	r0, lr
 800955c:	e7bd      	b.n	80094da <arm_biquad_cascade_df1_f32+0x11a>
 800955e:	bf00      	nop

08009560 <arm_mult_f32>:
 8009560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009562:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8009566:	d033      	beq.n	80095d0 <arm_mult_f32+0x70>
 8009568:	f100 0610 	add.w	r6, r0, #16
 800956c:	f101 0510 	add.w	r5, r1, #16
 8009570:	f102 0410 	add.w	r4, r2, #16
 8009574:	4677      	mov	r7, lr
 8009576:	ed16 6a04 	vldr	s12, [r6, #-16]
 800957a:	ed55 4a04 	vldr	s9, [r5, #-16]
 800957e:	ed56 6a02 	vldr	s13, [r6, #-8]
 8009582:	ed15 5a02 	vldr	s10, [r5, #-8]
 8009586:	ed16 7a03 	vldr	s14, [r6, #-12]
 800958a:	ed55 5a03 	vldr	s11, [r5, #-12]
 800958e:	ed56 7a01 	vldr	s15, [r6, #-4]
 8009592:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009596:	ee66 6a85 	vmul.f32	s13, s13, s10
 800959a:	ed04 6a04 	vstr	s12, [r4, #-16]
 800959e:	ed15 6a01 	vldr	s12, [r5, #-4]
 80095a2:	ed44 6a02 	vstr	s13, [r4, #-8]
 80095a6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80095aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80095ae:	3f01      	subs	r7, #1
 80095b0:	ed04 7a03 	vstr	s14, [r4, #-12]
 80095b4:	ed44 7a01 	vstr	s15, [r4, #-4]
 80095b8:	f106 0610 	add.w	r6, r6, #16
 80095bc:	f105 0510 	add.w	r5, r5, #16
 80095c0:	f104 0410 	add.w	r4, r4, #16
 80095c4:	d1d7      	bne.n	8009576 <arm_mult_f32+0x16>
 80095c6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80095ca:	4420      	add	r0, r4
 80095cc:	4421      	add	r1, r4
 80095ce:	4422      	add	r2, r4
 80095d0:	f013 0303 	ands.w	r3, r3, #3
 80095d4:	d009      	beq.n	80095ea <arm_mult_f32+0x8a>
 80095d6:	ecf0 7a01 	vldmia	r0!, {s15}
 80095da:	ecb1 7a01 	vldmia	r1!, {s14}
 80095de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095e2:	3b01      	subs	r3, #1
 80095e4:	ece2 7a01 	vstmia	r2!, {s15}
 80095e8:	d1f5      	bne.n	80095d6 <arm_mult_f32+0x76>
 80095ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095ec <__errno>:
 80095ec:	4b01      	ldr	r3, [pc, #4]	; (80095f4 <__errno+0x8>)
 80095ee:	6818      	ldr	r0, [r3, #0]
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	20000034 	.word	0x20000034

080095f8 <__libc_init_array>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	4d0d      	ldr	r5, [pc, #52]	; (8009630 <__libc_init_array+0x38>)
 80095fc:	4c0d      	ldr	r4, [pc, #52]	; (8009634 <__libc_init_array+0x3c>)
 80095fe:	1b64      	subs	r4, r4, r5
 8009600:	10a4      	asrs	r4, r4, #2
 8009602:	2600      	movs	r6, #0
 8009604:	42a6      	cmp	r6, r4
 8009606:	d109      	bne.n	800961c <__libc_init_array+0x24>
 8009608:	4d0b      	ldr	r5, [pc, #44]	; (8009638 <__libc_init_array+0x40>)
 800960a:	4c0c      	ldr	r4, [pc, #48]	; (800963c <__libc_init_array+0x44>)
 800960c:	f003 fdc4 	bl	800d198 <_init>
 8009610:	1b64      	subs	r4, r4, r5
 8009612:	10a4      	asrs	r4, r4, #2
 8009614:	2600      	movs	r6, #0
 8009616:	42a6      	cmp	r6, r4
 8009618:	d105      	bne.n	8009626 <__libc_init_array+0x2e>
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009620:	4798      	blx	r3
 8009622:	3601      	adds	r6, #1
 8009624:	e7ee      	b.n	8009604 <__libc_init_array+0xc>
 8009626:	f855 3b04 	ldr.w	r3, [r5], #4
 800962a:	4798      	blx	r3
 800962c:	3601      	adds	r6, #1
 800962e:	e7f2      	b.n	8009616 <__libc_init_array+0x1e>
 8009630:	0800f700 	.word	0x0800f700
 8009634:	0800f700 	.word	0x0800f700
 8009638:	0800f700 	.word	0x0800f700
 800963c:	0800f704 	.word	0x0800f704

08009640 <memcpy>:
 8009640:	440a      	add	r2, r1
 8009642:	4291      	cmp	r1, r2
 8009644:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009648:	d100      	bne.n	800964c <memcpy+0xc>
 800964a:	4770      	bx	lr
 800964c:	b510      	push	{r4, lr}
 800964e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009656:	4291      	cmp	r1, r2
 8009658:	d1f9      	bne.n	800964e <memcpy+0xe>
 800965a:	bd10      	pop	{r4, pc}

0800965c <memset>:
 800965c:	4402      	add	r2, r0
 800965e:	4603      	mov	r3, r0
 8009660:	4293      	cmp	r3, r2
 8009662:	d100      	bne.n	8009666 <memset+0xa>
 8009664:	4770      	bx	lr
 8009666:	f803 1b01 	strb.w	r1, [r3], #1
 800966a:	e7f9      	b.n	8009660 <memset+0x4>

0800966c <__cvt>:
 800966c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009670:	ec55 4b10 	vmov	r4, r5, d0
 8009674:	2d00      	cmp	r5, #0
 8009676:	460e      	mov	r6, r1
 8009678:	4619      	mov	r1, r3
 800967a:	462b      	mov	r3, r5
 800967c:	bfbb      	ittet	lt
 800967e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009682:	461d      	movlt	r5, r3
 8009684:	2300      	movge	r3, #0
 8009686:	232d      	movlt	r3, #45	; 0x2d
 8009688:	700b      	strb	r3, [r1, #0]
 800968a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800968c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009690:	4691      	mov	r9, r2
 8009692:	f023 0820 	bic.w	r8, r3, #32
 8009696:	bfbc      	itt	lt
 8009698:	4622      	movlt	r2, r4
 800969a:	4614      	movlt	r4, r2
 800969c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096a0:	d005      	beq.n	80096ae <__cvt+0x42>
 80096a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80096a6:	d100      	bne.n	80096aa <__cvt+0x3e>
 80096a8:	3601      	adds	r6, #1
 80096aa:	2102      	movs	r1, #2
 80096ac:	e000      	b.n	80096b0 <__cvt+0x44>
 80096ae:	2103      	movs	r1, #3
 80096b0:	ab03      	add	r3, sp, #12
 80096b2:	9301      	str	r3, [sp, #4]
 80096b4:	ab02      	add	r3, sp, #8
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	ec45 4b10 	vmov	d0, r4, r5
 80096bc:	4653      	mov	r3, sl
 80096be:	4632      	mov	r2, r6
 80096c0:	f000 fdaa 	bl	800a218 <_dtoa_r>
 80096c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096c8:	4607      	mov	r7, r0
 80096ca:	d102      	bne.n	80096d2 <__cvt+0x66>
 80096cc:	f019 0f01 	tst.w	r9, #1
 80096d0:	d022      	beq.n	8009718 <__cvt+0xac>
 80096d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096d6:	eb07 0906 	add.w	r9, r7, r6
 80096da:	d110      	bne.n	80096fe <__cvt+0x92>
 80096dc:	783b      	ldrb	r3, [r7, #0]
 80096de:	2b30      	cmp	r3, #48	; 0x30
 80096e0:	d10a      	bne.n	80096f8 <__cvt+0x8c>
 80096e2:	2200      	movs	r2, #0
 80096e4:	2300      	movs	r3, #0
 80096e6:	4620      	mov	r0, r4
 80096e8:	4629      	mov	r1, r5
 80096ea:	f7f7 f9ed 	bl	8000ac8 <__aeabi_dcmpeq>
 80096ee:	b918      	cbnz	r0, 80096f8 <__cvt+0x8c>
 80096f0:	f1c6 0601 	rsb	r6, r6, #1
 80096f4:	f8ca 6000 	str.w	r6, [sl]
 80096f8:	f8da 3000 	ldr.w	r3, [sl]
 80096fc:	4499      	add	r9, r3
 80096fe:	2200      	movs	r2, #0
 8009700:	2300      	movs	r3, #0
 8009702:	4620      	mov	r0, r4
 8009704:	4629      	mov	r1, r5
 8009706:	f7f7 f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 800970a:	b108      	cbz	r0, 8009710 <__cvt+0xa4>
 800970c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009710:	2230      	movs	r2, #48	; 0x30
 8009712:	9b03      	ldr	r3, [sp, #12]
 8009714:	454b      	cmp	r3, r9
 8009716:	d307      	bcc.n	8009728 <__cvt+0xbc>
 8009718:	9b03      	ldr	r3, [sp, #12]
 800971a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800971c:	1bdb      	subs	r3, r3, r7
 800971e:	4638      	mov	r0, r7
 8009720:	6013      	str	r3, [r2, #0]
 8009722:	b004      	add	sp, #16
 8009724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009728:	1c59      	adds	r1, r3, #1
 800972a:	9103      	str	r1, [sp, #12]
 800972c:	701a      	strb	r2, [r3, #0]
 800972e:	e7f0      	b.n	8009712 <__cvt+0xa6>

08009730 <__exponent>:
 8009730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009732:	4603      	mov	r3, r0
 8009734:	2900      	cmp	r1, #0
 8009736:	bfb8      	it	lt
 8009738:	4249      	neglt	r1, r1
 800973a:	f803 2b02 	strb.w	r2, [r3], #2
 800973e:	bfb4      	ite	lt
 8009740:	222d      	movlt	r2, #45	; 0x2d
 8009742:	222b      	movge	r2, #43	; 0x2b
 8009744:	2909      	cmp	r1, #9
 8009746:	7042      	strb	r2, [r0, #1]
 8009748:	dd2a      	ble.n	80097a0 <__exponent+0x70>
 800974a:	f10d 0407 	add.w	r4, sp, #7
 800974e:	46a4      	mov	ip, r4
 8009750:	270a      	movs	r7, #10
 8009752:	46a6      	mov	lr, r4
 8009754:	460a      	mov	r2, r1
 8009756:	fb91 f6f7 	sdiv	r6, r1, r7
 800975a:	fb07 1516 	mls	r5, r7, r6, r1
 800975e:	3530      	adds	r5, #48	; 0x30
 8009760:	2a63      	cmp	r2, #99	; 0x63
 8009762:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009766:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800976a:	4631      	mov	r1, r6
 800976c:	dcf1      	bgt.n	8009752 <__exponent+0x22>
 800976e:	3130      	adds	r1, #48	; 0x30
 8009770:	f1ae 0502 	sub.w	r5, lr, #2
 8009774:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009778:	1c44      	adds	r4, r0, #1
 800977a:	4629      	mov	r1, r5
 800977c:	4561      	cmp	r1, ip
 800977e:	d30a      	bcc.n	8009796 <__exponent+0x66>
 8009780:	f10d 0209 	add.w	r2, sp, #9
 8009784:	eba2 020e 	sub.w	r2, r2, lr
 8009788:	4565      	cmp	r5, ip
 800978a:	bf88      	it	hi
 800978c:	2200      	movhi	r2, #0
 800978e:	4413      	add	r3, r2
 8009790:	1a18      	subs	r0, r3, r0
 8009792:	b003      	add	sp, #12
 8009794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800979a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800979e:	e7ed      	b.n	800977c <__exponent+0x4c>
 80097a0:	2330      	movs	r3, #48	; 0x30
 80097a2:	3130      	adds	r1, #48	; 0x30
 80097a4:	7083      	strb	r3, [r0, #2]
 80097a6:	70c1      	strb	r1, [r0, #3]
 80097a8:	1d03      	adds	r3, r0, #4
 80097aa:	e7f1      	b.n	8009790 <__exponent+0x60>

080097ac <_printf_float>:
 80097ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b0:	ed2d 8b02 	vpush	{d8}
 80097b4:	b08d      	sub	sp, #52	; 0x34
 80097b6:	460c      	mov	r4, r1
 80097b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80097bc:	4616      	mov	r6, r2
 80097be:	461f      	mov	r7, r3
 80097c0:	4605      	mov	r5, r0
 80097c2:	f001 fccd 	bl	800b160 <_localeconv_r>
 80097c6:	f8d0 a000 	ldr.w	sl, [r0]
 80097ca:	4650      	mov	r0, sl
 80097cc:	f7f6 fd00 	bl	80001d0 <strlen>
 80097d0:	2300      	movs	r3, #0
 80097d2:	930a      	str	r3, [sp, #40]	; 0x28
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	9305      	str	r3, [sp, #20]
 80097d8:	f8d8 3000 	ldr.w	r3, [r8]
 80097dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80097e0:	3307      	adds	r3, #7
 80097e2:	f023 0307 	bic.w	r3, r3, #7
 80097e6:	f103 0208 	add.w	r2, r3, #8
 80097ea:	f8c8 2000 	str.w	r2, [r8]
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80097f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80097fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097fe:	9307      	str	r3, [sp, #28]
 8009800:	f8cd 8018 	str.w	r8, [sp, #24]
 8009804:	ee08 0a10 	vmov	s16, r0
 8009808:	4b9f      	ldr	r3, [pc, #636]	; (8009a88 <_printf_float+0x2dc>)
 800980a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800980e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009812:	f7f7 f98b 	bl	8000b2c <__aeabi_dcmpun>
 8009816:	bb88      	cbnz	r0, 800987c <_printf_float+0xd0>
 8009818:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800981c:	4b9a      	ldr	r3, [pc, #616]	; (8009a88 <_printf_float+0x2dc>)
 800981e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009822:	f7f7 f965 	bl	8000af0 <__aeabi_dcmple>
 8009826:	bb48      	cbnz	r0, 800987c <_printf_float+0xd0>
 8009828:	2200      	movs	r2, #0
 800982a:	2300      	movs	r3, #0
 800982c:	4640      	mov	r0, r8
 800982e:	4649      	mov	r1, r9
 8009830:	f7f7 f954 	bl	8000adc <__aeabi_dcmplt>
 8009834:	b110      	cbz	r0, 800983c <_printf_float+0x90>
 8009836:	232d      	movs	r3, #45	; 0x2d
 8009838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800983c:	4b93      	ldr	r3, [pc, #588]	; (8009a8c <_printf_float+0x2e0>)
 800983e:	4894      	ldr	r0, [pc, #592]	; (8009a90 <_printf_float+0x2e4>)
 8009840:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009844:	bf94      	ite	ls
 8009846:	4698      	movls	r8, r3
 8009848:	4680      	movhi	r8, r0
 800984a:	2303      	movs	r3, #3
 800984c:	6123      	str	r3, [r4, #16]
 800984e:	9b05      	ldr	r3, [sp, #20]
 8009850:	f023 0204 	bic.w	r2, r3, #4
 8009854:	6022      	str	r2, [r4, #0]
 8009856:	f04f 0900 	mov.w	r9, #0
 800985a:	9700      	str	r7, [sp, #0]
 800985c:	4633      	mov	r3, r6
 800985e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009860:	4621      	mov	r1, r4
 8009862:	4628      	mov	r0, r5
 8009864:	f000 f9d8 	bl	8009c18 <_printf_common>
 8009868:	3001      	adds	r0, #1
 800986a:	f040 8090 	bne.w	800998e <_printf_float+0x1e2>
 800986e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009872:	b00d      	add	sp, #52	; 0x34
 8009874:	ecbd 8b02 	vpop	{d8}
 8009878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987c:	4642      	mov	r2, r8
 800987e:	464b      	mov	r3, r9
 8009880:	4640      	mov	r0, r8
 8009882:	4649      	mov	r1, r9
 8009884:	f7f7 f952 	bl	8000b2c <__aeabi_dcmpun>
 8009888:	b140      	cbz	r0, 800989c <_printf_float+0xf0>
 800988a:	464b      	mov	r3, r9
 800988c:	2b00      	cmp	r3, #0
 800988e:	bfbc      	itt	lt
 8009890:	232d      	movlt	r3, #45	; 0x2d
 8009892:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009896:	487f      	ldr	r0, [pc, #508]	; (8009a94 <_printf_float+0x2e8>)
 8009898:	4b7f      	ldr	r3, [pc, #508]	; (8009a98 <_printf_float+0x2ec>)
 800989a:	e7d1      	b.n	8009840 <_printf_float+0x94>
 800989c:	6863      	ldr	r3, [r4, #4]
 800989e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80098a2:	9206      	str	r2, [sp, #24]
 80098a4:	1c5a      	adds	r2, r3, #1
 80098a6:	d13f      	bne.n	8009928 <_printf_float+0x17c>
 80098a8:	2306      	movs	r3, #6
 80098aa:	6063      	str	r3, [r4, #4]
 80098ac:	9b05      	ldr	r3, [sp, #20]
 80098ae:	6861      	ldr	r1, [r4, #4]
 80098b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80098b4:	2300      	movs	r3, #0
 80098b6:	9303      	str	r3, [sp, #12]
 80098b8:	ab0a      	add	r3, sp, #40	; 0x28
 80098ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80098be:	ab09      	add	r3, sp, #36	; 0x24
 80098c0:	ec49 8b10 	vmov	d0, r8, r9
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	6022      	str	r2, [r4, #0]
 80098c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098cc:	4628      	mov	r0, r5
 80098ce:	f7ff fecd 	bl	800966c <__cvt>
 80098d2:	9b06      	ldr	r3, [sp, #24]
 80098d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098d6:	2b47      	cmp	r3, #71	; 0x47
 80098d8:	4680      	mov	r8, r0
 80098da:	d108      	bne.n	80098ee <_printf_float+0x142>
 80098dc:	1cc8      	adds	r0, r1, #3
 80098de:	db02      	blt.n	80098e6 <_printf_float+0x13a>
 80098e0:	6863      	ldr	r3, [r4, #4]
 80098e2:	4299      	cmp	r1, r3
 80098e4:	dd41      	ble.n	800996a <_printf_float+0x1be>
 80098e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80098ea:	fa5f fb8b 	uxtb.w	fp, fp
 80098ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098f2:	d820      	bhi.n	8009936 <_printf_float+0x18a>
 80098f4:	3901      	subs	r1, #1
 80098f6:	465a      	mov	r2, fp
 80098f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098fc:	9109      	str	r1, [sp, #36]	; 0x24
 80098fe:	f7ff ff17 	bl	8009730 <__exponent>
 8009902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009904:	1813      	adds	r3, r2, r0
 8009906:	2a01      	cmp	r2, #1
 8009908:	4681      	mov	r9, r0
 800990a:	6123      	str	r3, [r4, #16]
 800990c:	dc02      	bgt.n	8009914 <_printf_float+0x168>
 800990e:	6822      	ldr	r2, [r4, #0]
 8009910:	07d2      	lsls	r2, r2, #31
 8009912:	d501      	bpl.n	8009918 <_printf_float+0x16c>
 8009914:	3301      	adds	r3, #1
 8009916:	6123      	str	r3, [r4, #16]
 8009918:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800991c:	2b00      	cmp	r3, #0
 800991e:	d09c      	beq.n	800985a <_printf_float+0xae>
 8009920:	232d      	movs	r3, #45	; 0x2d
 8009922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009926:	e798      	b.n	800985a <_printf_float+0xae>
 8009928:	9a06      	ldr	r2, [sp, #24]
 800992a:	2a47      	cmp	r2, #71	; 0x47
 800992c:	d1be      	bne.n	80098ac <_printf_float+0x100>
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1bc      	bne.n	80098ac <_printf_float+0x100>
 8009932:	2301      	movs	r3, #1
 8009934:	e7b9      	b.n	80098aa <_printf_float+0xfe>
 8009936:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800993a:	d118      	bne.n	800996e <_printf_float+0x1c2>
 800993c:	2900      	cmp	r1, #0
 800993e:	6863      	ldr	r3, [r4, #4]
 8009940:	dd0b      	ble.n	800995a <_printf_float+0x1ae>
 8009942:	6121      	str	r1, [r4, #16]
 8009944:	b913      	cbnz	r3, 800994c <_printf_float+0x1a0>
 8009946:	6822      	ldr	r2, [r4, #0]
 8009948:	07d0      	lsls	r0, r2, #31
 800994a:	d502      	bpl.n	8009952 <_printf_float+0x1a6>
 800994c:	3301      	adds	r3, #1
 800994e:	440b      	add	r3, r1
 8009950:	6123      	str	r3, [r4, #16]
 8009952:	65a1      	str	r1, [r4, #88]	; 0x58
 8009954:	f04f 0900 	mov.w	r9, #0
 8009958:	e7de      	b.n	8009918 <_printf_float+0x16c>
 800995a:	b913      	cbnz	r3, 8009962 <_printf_float+0x1b6>
 800995c:	6822      	ldr	r2, [r4, #0]
 800995e:	07d2      	lsls	r2, r2, #31
 8009960:	d501      	bpl.n	8009966 <_printf_float+0x1ba>
 8009962:	3302      	adds	r3, #2
 8009964:	e7f4      	b.n	8009950 <_printf_float+0x1a4>
 8009966:	2301      	movs	r3, #1
 8009968:	e7f2      	b.n	8009950 <_printf_float+0x1a4>
 800996a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800996e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009970:	4299      	cmp	r1, r3
 8009972:	db05      	blt.n	8009980 <_printf_float+0x1d4>
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	6121      	str	r1, [r4, #16]
 8009978:	07d8      	lsls	r0, r3, #31
 800997a:	d5ea      	bpl.n	8009952 <_printf_float+0x1a6>
 800997c:	1c4b      	adds	r3, r1, #1
 800997e:	e7e7      	b.n	8009950 <_printf_float+0x1a4>
 8009980:	2900      	cmp	r1, #0
 8009982:	bfd4      	ite	le
 8009984:	f1c1 0202 	rsble	r2, r1, #2
 8009988:	2201      	movgt	r2, #1
 800998a:	4413      	add	r3, r2
 800998c:	e7e0      	b.n	8009950 <_printf_float+0x1a4>
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	055a      	lsls	r2, r3, #21
 8009992:	d407      	bmi.n	80099a4 <_printf_float+0x1f8>
 8009994:	6923      	ldr	r3, [r4, #16]
 8009996:	4642      	mov	r2, r8
 8009998:	4631      	mov	r1, r6
 800999a:	4628      	mov	r0, r5
 800999c:	47b8      	blx	r7
 800999e:	3001      	adds	r0, #1
 80099a0:	d12c      	bne.n	80099fc <_printf_float+0x250>
 80099a2:	e764      	b.n	800986e <_printf_float+0xc2>
 80099a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099a8:	f240 80e0 	bls.w	8009b6c <_printf_float+0x3c0>
 80099ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099b0:	2200      	movs	r2, #0
 80099b2:	2300      	movs	r3, #0
 80099b4:	f7f7 f888 	bl	8000ac8 <__aeabi_dcmpeq>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d034      	beq.n	8009a26 <_printf_float+0x27a>
 80099bc:	4a37      	ldr	r2, [pc, #220]	; (8009a9c <_printf_float+0x2f0>)
 80099be:	2301      	movs	r3, #1
 80099c0:	4631      	mov	r1, r6
 80099c2:	4628      	mov	r0, r5
 80099c4:	47b8      	blx	r7
 80099c6:	3001      	adds	r0, #1
 80099c8:	f43f af51 	beq.w	800986e <_printf_float+0xc2>
 80099cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099d0:	429a      	cmp	r2, r3
 80099d2:	db02      	blt.n	80099da <_printf_float+0x22e>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	07d8      	lsls	r0, r3, #31
 80099d8:	d510      	bpl.n	80099fc <_printf_float+0x250>
 80099da:	ee18 3a10 	vmov	r3, s16
 80099de:	4652      	mov	r2, sl
 80099e0:	4631      	mov	r1, r6
 80099e2:	4628      	mov	r0, r5
 80099e4:	47b8      	blx	r7
 80099e6:	3001      	adds	r0, #1
 80099e8:	f43f af41 	beq.w	800986e <_printf_float+0xc2>
 80099ec:	f04f 0800 	mov.w	r8, #0
 80099f0:	f104 091a 	add.w	r9, r4, #26
 80099f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099f6:	3b01      	subs	r3, #1
 80099f8:	4543      	cmp	r3, r8
 80099fa:	dc09      	bgt.n	8009a10 <_printf_float+0x264>
 80099fc:	6823      	ldr	r3, [r4, #0]
 80099fe:	079b      	lsls	r3, r3, #30
 8009a00:	f100 8105 	bmi.w	8009c0e <_printf_float+0x462>
 8009a04:	68e0      	ldr	r0, [r4, #12]
 8009a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a08:	4298      	cmp	r0, r3
 8009a0a:	bfb8      	it	lt
 8009a0c:	4618      	movlt	r0, r3
 8009a0e:	e730      	b.n	8009872 <_printf_float+0xc6>
 8009a10:	2301      	movs	r3, #1
 8009a12:	464a      	mov	r2, r9
 8009a14:	4631      	mov	r1, r6
 8009a16:	4628      	mov	r0, r5
 8009a18:	47b8      	blx	r7
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	f43f af27 	beq.w	800986e <_printf_float+0xc2>
 8009a20:	f108 0801 	add.w	r8, r8, #1
 8009a24:	e7e6      	b.n	80099f4 <_printf_float+0x248>
 8009a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	dc39      	bgt.n	8009aa0 <_printf_float+0x2f4>
 8009a2c:	4a1b      	ldr	r2, [pc, #108]	; (8009a9c <_printf_float+0x2f0>)
 8009a2e:	2301      	movs	r3, #1
 8009a30:	4631      	mov	r1, r6
 8009a32:	4628      	mov	r0, r5
 8009a34:	47b8      	blx	r7
 8009a36:	3001      	adds	r0, #1
 8009a38:	f43f af19 	beq.w	800986e <_printf_float+0xc2>
 8009a3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a40:	4313      	orrs	r3, r2
 8009a42:	d102      	bne.n	8009a4a <_printf_float+0x29e>
 8009a44:	6823      	ldr	r3, [r4, #0]
 8009a46:	07d9      	lsls	r1, r3, #31
 8009a48:	d5d8      	bpl.n	80099fc <_printf_float+0x250>
 8009a4a:	ee18 3a10 	vmov	r3, s16
 8009a4e:	4652      	mov	r2, sl
 8009a50:	4631      	mov	r1, r6
 8009a52:	4628      	mov	r0, r5
 8009a54:	47b8      	blx	r7
 8009a56:	3001      	adds	r0, #1
 8009a58:	f43f af09 	beq.w	800986e <_printf_float+0xc2>
 8009a5c:	f04f 0900 	mov.w	r9, #0
 8009a60:	f104 0a1a 	add.w	sl, r4, #26
 8009a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a66:	425b      	negs	r3, r3
 8009a68:	454b      	cmp	r3, r9
 8009a6a:	dc01      	bgt.n	8009a70 <_printf_float+0x2c4>
 8009a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a6e:	e792      	b.n	8009996 <_printf_float+0x1ea>
 8009a70:	2301      	movs	r3, #1
 8009a72:	4652      	mov	r2, sl
 8009a74:	4631      	mov	r1, r6
 8009a76:	4628      	mov	r0, r5
 8009a78:	47b8      	blx	r7
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	f43f aef7 	beq.w	800986e <_printf_float+0xc2>
 8009a80:	f109 0901 	add.w	r9, r9, #1
 8009a84:	e7ee      	b.n	8009a64 <_printf_float+0x2b8>
 8009a86:	bf00      	nop
 8009a88:	7fefffff 	.word	0x7fefffff
 8009a8c:	0800f2b0 	.word	0x0800f2b0
 8009a90:	0800f2b4 	.word	0x0800f2b4
 8009a94:	0800f2bc 	.word	0x0800f2bc
 8009a98:	0800f2b8 	.word	0x0800f2b8
 8009a9c:	0800f2c0 	.word	0x0800f2c0
 8009aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	bfa8      	it	ge
 8009aa8:	461a      	movge	r2, r3
 8009aaa:	2a00      	cmp	r2, #0
 8009aac:	4691      	mov	r9, r2
 8009aae:	dc37      	bgt.n	8009b20 <_printf_float+0x374>
 8009ab0:	f04f 0b00 	mov.w	fp, #0
 8009ab4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ab8:	f104 021a 	add.w	r2, r4, #26
 8009abc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009abe:	9305      	str	r3, [sp, #20]
 8009ac0:	eba3 0309 	sub.w	r3, r3, r9
 8009ac4:	455b      	cmp	r3, fp
 8009ac6:	dc33      	bgt.n	8009b30 <_printf_float+0x384>
 8009ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009acc:	429a      	cmp	r2, r3
 8009ace:	db3b      	blt.n	8009b48 <_printf_float+0x39c>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	07da      	lsls	r2, r3, #31
 8009ad4:	d438      	bmi.n	8009b48 <_printf_float+0x39c>
 8009ad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ad8:	9b05      	ldr	r3, [sp, #20]
 8009ada:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	eba2 0901 	sub.w	r9, r2, r1
 8009ae2:	4599      	cmp	r9, r3
 8009ae4:	bfa8      	it	ge
 8009ae6:	4699      	movge	r9, r3
 8009ae8:	f1b9 0f00 	cmp.w	r9, #0
 8009aec:	dc35      	bgt.n	8009b5a <_printf_float+0x3ae>
 8009aee:	f04f 0800 	mov.w	r8, #0
 8009af2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009af6:	f104 0a1a 	add.w	sl, r4, #26
 8009afa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009afe:	1a9b      	subs	r3, r3, r2
 8009b00:	eba3 0309 	sub.w	r3, r3, r9
 8009b04:	4543      	cmp	r3, r8
 8009b06:	f77f af79 	ble.w	80099fc <_printf_float+0x250>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	4631      	mov	r1, r6
 8009b10:	4628      	mov	r0, r5
 8009b12:	47b8      	blx	r7
 8009b14:	3001      	adds	r0, #1
 8009b16:	f43f aeaa 	beq.w	800986e <_printf_float+0xc2>
 8009b1a:	f108 0801 	add.w	r8, r8, #1
 8009b1e:	e7ec      	b.n	8009afa <_printf_float+0x34e>
 8009b20:	4613      	mov	r3, r2
 8009b22:	4631      	mov	r1, r6
 8009b24:	4642      	mov	r2, r8
 8009b26:	4628      	mov	r0, r5
 8009b28:	47b8      	blx	r7
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	d1c0      	bne.n	8009ab0 <_printf_float+0x304>
 8009b2e:	e69e      	b.n	800986e <_printf_float+0xc2>
 8009b30:	2301      	movs	r3, #1
 8009b32:	4631      	mov	r1, r6
 8009b34:	4628      	mov	r0, r5
 8009b36:	9205      	str	r2, [sp, #20]
 8009b38:	47b8      	blx	r7
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	f43f ae97 	beq.w	800986e <_printf_float+0xc2>
 8009b40:	9a05      	ldr	r2, [sp, #20]
 8009b42:	f10b 0b01 	add.w	fp, fp, #1
 8009b46:	e7b9      	b.n	8009abc <_printf_float+0x310>
 8009b48:	ee18 3a10 	vmov	r3, s16
 8009b4c:	4652      	mov	r2, sl
 8009b4e:	4631      	mov	r1, r6
 8009b50:	4628      	mov	r0, r5
 8009b52:	47b8      	blx	r7
 8009b54:	3001      	adds	r0, #1
 8009b56:	d1be      	bne.n	8009ad6 <_printf_float+0x32a>
 8009b58:	e689      	b.n	800986e <_printf_float+0xc2>
 8009b5a:	9a05      	ldr	r2, [sp, #20]
 8009b5c:	464b      	mov	r3, r9
 8009b5e:	4442      	add	r2, r8
 8009b60:	4631      	mov	r1, r6
 8009b62:	4628      	mov	r0, r5
 8009b64:	47b8      	blx	r7
 8009b66:	3001      	adds	r0, #1
 8009b68:	d1c1      	bne.n	8009aee <_printf_float+0x342>
 8009b6a:	e680      	b.n	800986e <_printf_float+0xc2>
 8009b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b6e:	2a01      	cmp	r2, #1
 8009b70:	dc01      	bgt.n	8009b76 <_printf_float+0x3ca>
 8009b72:	07db      	lsls	r3, r3, #31
 8009b74:	d538      	bpl.n	8009be8 <_printf_float+0x43c>
 8009b76:	2301      	movs	r3, #1
 8009b78:	4642      	mov	r2, r8
 8009b7a:	4631      	mov	r1, r6
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	47b8      	blx	r7
 8009b80:	3001      	adds	r0, #1
 8009b82:	f43f ae74 	beq.w	800986e <_printf_float+0xc2>
 8009b86:	ee18 3a10 	vmov	r3, s16
 8009b8a:	4652      	mov	r2, sl
 8009b8c:	4631      	mov	r1, r6
 8009b8e:	4628      	mov	r0, r5
 8009b90:	47b8      	blx	r7
 8009b92:	3001      	adds	r0, #1
 8009b94:	f43f ae6b 	beq.w	800986e <_printf_float+0xc2>
 8009b98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	f7f6 ff92 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ba4:	b9d8      	cbnz	r0, 8009bde <_printf_float+0x432>
 8009ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ba8:	f108 0201 	add.w	r2, r8, #1
 8009bac:	3b01      	subs	r3, #1
 8009bae:	4631      	mov	r1, r6
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	47b8      	blx	r7
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	d10e      	bne.n	8009bd6 <_printf_float+0x42a>
 8009bb8:	e659      	b.n	800986e <_printf_float+0xc2>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	4652      	mov	r2, sl
 8009bbe:	4631      	mov	r1, r6
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	47b8      	blx	r7
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	f43f ae52 	beq.w	800986e <_printf_float+0xc2>
 8009bca:	f108 0801 	add.w	r8, r8, #1
 8009bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	4543      	cmp	r3, r8
 8009bd4:	dcf1      	bgt.n	8009bba <_printf_float+0x40e>
 8009bd6:	464b      	mov	r3, r9
 8009bd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bdc:	e6dc      	b.n	8009998 <_printf_float+0x1ec>
 8009bde:	f04f 0800 	mov.w	r8, #0
 8009be2:	f104 0a1a 	add.w	sl, r4, #26
 8009be6:	e7f2      	b.n	8009bce <_printf_float+0x422>
 8009be8:	2301      	movs	r3, #1
 8009bea:	4642      	mov	r2, r8
 8009bec:	e7df      	b.n	8009bae <_printf_float+0x402>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	464a      	mov	r2, r9
 8009bf2:	4631      	mov	r1, r6
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	47b8      	blx	r7
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	f43f ae38 	beq.w	800986e <_printf_float+0xc2>
 8009bfe:	f108 0801 	add.w	r8, r8, #1
 8009c02:	68e3      	ldr	r3, [r4, #12]
 8009c04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c06:	1a5b      	subs	r3, r3, r1
 8009c08:	4543      	cmp	r3, r8
 8009c0a:	dcf0      	bgt.n	8009bee <_printf_float+0x442>
 8009c0c:	e6fa      	b.n	8009a04 <_printf_float+0x258>
 8009c0e:	f04f 0800 	mov.w	r8, #0
 8009c12:	f104 0919 	add.w	r9, r4, #25
 8009c16:	e7f4      	b.n	8009c02 <_printf_float+0x456>

08009c18 <_printf_common>:
 8009c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c1c:	4616      	mov	r6, r2
 8009c1e:	4699      	mov	r9, r3
 8009c20:	688a      	ldr	r2, [r1, #8]
 8009c22:	690b      	ldr	r3, [r1, #16]
 8009c24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	bfb8      	it	lt
 8009c2c:	4613      	movlt	r3, r2
 8009c2e:	6033      	str	r3, [r6, #0]
 8009c30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c34:	4607      	mov	r7, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	b10a      	cbz	r2, 8009c3e <_printf_common+0x26>
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	6033      	str	r3, [r6, #0]
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	0699      	lsls	r1, r3, #26
 8009c42:	bf42      	ittt	mi
 8009c44:	6833      	ldrmi	r3, [r6, #0]
 8009c46:	3302      	addmi	r3, #2
 8009c48:	6033      	strmi	r3, [r6, #0]
 8009c4a:	6825      	ldr	r5, [r4, #0]
 8009c4c:	f015 0506 	ands.w	r5, r5, #6
 8009c50:	d106      	bne.n	8009c60 <_printf_common+0x48>
 8009c52:	f104 0a19 	add.w	sl, r4, #25
 8009c56:	68e3      	ldr	r3, [r4, #12]
 8009c58:	6832      	ldr	r2, [r6, #0]
 8009c5a:	1a9b      	subs	r3, r3, r2
 8009c5c:	42ab      	cmp	r3, r5
 8009c5e:	dc26      	bgt.n	8009cae <_printf_common+0x96>
 8009c60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c64:	1e13      	subs	r3, r2, #0
 8009c66:	6822      	ldr	r2, [r4, #0]
 8009c68:	bf18      	it	ne
 8009c6a:	2301      	movne	r3, #1
 8009c6c:	0692      	lsls	r2, r2, #26
 8009c6e:	d42b      	bmi.n	8009cc8 <_printf_common+0xb0>
 8009c70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c74:	4649      	mov	r1, r9
 8009c76:	4638      	mov	r0, r7
 8009c78:	47c0      	blx	r8
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	d01e      	beq.n	8009cbc <_printf_common+0xa4>
 8009c7e:	6823      	ldr	r3, [r4, #0]
 8009c80:	68e5      	ldr	r5, [r4, #12]
 8009c82:	6832      	ldr	r2, [r6, #0]
 8009c84:	f003 0306 	and.w	r3, r3, #6
 8009c88:	2b04      	cmp	r3, #4
 8009c8a:	bf08      	it	eq
 8009c8c:	1aad      	subeq	r5, r5, r2
 8009c8e:	68a3      	ldr	r3, [r4, #8]
 8009c90:	6922      	ldr	r2, [r4, #16]
 8009c92:	bf0c      	ite	eq
 8009c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c98:	2500      	movne	r5, #0
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	bfc4      	itt	gt
 8009c9e:	1a9b      	subgt	r3, r3, r2
 8009ca0:	18ed      	addgt	r5, r5, r3
 8009ca2:	2600      	movs	r6, #0
 8009ca4:	341a      	adds	r4, #26
 8009ca6:	42b5      	cmp	r5, r6
 8009ca8:	d11a      	bne.n	8009ce0 <_printf_common+0xc8>
 8009caa:	2000      	movs	r0, #0
 8009cac:	e008      	b.n	8009cc0 <_printf_common+0xa8>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	4652      	mov	r2, sl
 8009cb2:	4649      	mov	r1, r9
 8009cb4:	4638      	mov	r0, r7
 8009cb6:	47c0      	blx	r8
 8009cb8:	3001      	adds	r0, #1
 8009cba:	d103      	bne.n	8009cc4 <_printf_common+0xac>
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc4:	3501      	adds	r5, #1
 8009cc6:	e7c6      	b.n	8009c56 <_printf_common+0x3e>
 8009cc8:	18e1      	adds	r1, r4, r3
 8009cca:	1c5a      	adds	r2, r3, #1
 8009ccc:	2030      	movs	r0, #48	; 0x30
 8009cce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cd2:	4422      	add	r2, r4
 8009cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cdc:	3302      	adds	r3, #2
 8009cde:	e7c7      	b.n	8009c70 <_printf_common+0x58>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	4622      	mov	r2, r4
 8009ce4:	4649      	mov	r1, r9
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	47c0      	blx	r8
 8009cea:	3001      	adds	r0, #1
 8009cec:	d0e6      	beq.n	8009cbc <_printf_common+0xa4>
 8009cee:	3601      	adds	r6, #1
 8009cf0:	e7d9      	b.n	8009ca6 <_printf_common+0x8e>
	...

08009cf4 <_printf_i>:
 8009cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	4691      	mov	r9, r2
 8009cfc:	7e27      	ldrb	r7, [r4, #24]
 8009cfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d00:	2f78      	cmp	r7, #120	; 0x78
 8009d02:	4680      	mov	r8, r0
 8009d04:	469a      	mov	sl, r3
 8009d06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d0a:	d807      	bhi.n	8009d1c <_printf_i+0x28>
 8009d0c:	2f62      	cmp	r7, #98	; 0x62
 8009d0e:	d80a      	bhi.n	8009d26 <_printf_i+0x32>
 8009d10:	2f00      	cmp	r7, #0
 8009d12:	f000 80d8 	beq.w	8009ec6 <_printf_i+0x1d2>
 8009d16:	2f58      	cmp	r7, #88	; 0x58
 8009d18:	f000 80a3 	beq.w	8009e62 <_printf_i+0x16e>
 8009d1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d24:	e03a      	b.n	8009d9c <_printf_i+0xa8>
 8009d26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d2a:	2b15      	cmp	r3, #21
 8009d2c:	d8f6      	bhi.n	8009d1c <_printf_i+0x28>
 8009d2e:	a001      	add	r0, pc, #4	; (adr r0, 8009d34 <_printf_i+0x40>)
 8009d30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009d34:	08009d8d 	.word	0x08009d8d
 8009d38:	08009da1 	.word	0x08009da1
 8009d3c:	08009d1d 	.word	0x08009d1d
 8009d40:	08009d1d 	.word	0x08009d1d
 8009d44:	08009d1d 	.word	0x08009d1d
 8009d48:	08009d1d 	.word	0x08009d1d
 8009d4c:	08009da1 	.word	0x08009da1
 8009d50:	08009d1d 	.word	0x08009d1d
 8009d54:	08009d1d 	.word	0x08009d1d
 8009d58:	08009d1d 	.word	0x08009d1d
 8009d5c:	08009d1d 	.word	0x08009d1d
 8009d60:	08009ead 	.word	0x08009ead
 8009d64:	08009dd1 	.word	0x08009dd1
 8009d68:	08009e8f 	.word	0x08009e8f
 8009d6c:	08009d1d 	.word	0x08009d1d
 8009d70:	08009d1d 	.word	0x08009d1d
 8009d74:	08009ecf 	.word	0x08009ecf
 8009d78:	08009d1d 	.word	0x08009d1d
 8009d7c:	08009dd1 	.word	0x08009dd1
 8009d80:	08009d1d 	.word	0x08009d1d
 8009d84:	08009d1d 	.word	0x08009d1d
 8009d88:	08009e97 	.word	0x08009e97
 8009d8c:	680b      	ldr	r3, [r1, #0]
 8009d8e:	1d1a      	adds	r2, r3, #4
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	600a      	str	r2, [r1, #0]
 8009d94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e0a3      	b.n	8009ee8 <_printf_i+0x1f4>
 8009da0:	6825      	ldr	r5, [r4, #0]
 8009da2:	6808      	ldr	r0, [r1, #0]
 8009da4:	062e      	lsls	r6, r5, #24
 8009da6:	f100 0304 	add.w	r3, r0, #4
 8009daa:	d50a      	bpl.n	8009dc2 <_printf_i+0xce>
 8009dac:	6805      	ldr	r5, [r0, #0]
 8009dae:	600b      	str	r3, [r1, #0]
 8009db0:	2d00      	cmp	r5, #0
 8009db2:	da03      	bge.n	8009dbc <_printf_i+0xc8>
 8009db4:	232d      	movs	r3, #45	; 0x2d
 8009db6:	426d      	negs	r5, r5
 8009db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dbc:	485e      	ldr	r0, [pc, #376]	; (8009f38 <_printf_i+0x244>)
 8009dbe:	230a      	movs	r3, #10
 8009dc0:	e019      	b.n	8009df6 <_printf_i+0x102>
 8009dc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009dc6:	6805      	ldr	r5, [r0, #0]
 8009dc8:	600b      	str	r3, [r1, #0]
 8009dca:	bf18      	it	ne
 8009dcc:	b22d      	sxthne	r5, r5
 8009dce:	e7ef      	b.n	8009db0 <_printf_i+0xbc>
 8009dd0:	680b      	ldr	r3, [r1, #0]
 8009dd2:	6825      	ldr	r5, [r4, #0]
 8009dd4:	1d18      	adds	r0, r3, #4
 8009dd6:	6008      	str	r0, [r1, #0]
 8009dd8:	0628      	lsls	r0, r5, #24
 8009dda:	d501      	bpl.n	8009de0 <_printf_i+0xec>
 8009ddc:	681d      	ldr	r5, [r3, #0]
 8009dde:	e002      	b.n	8009de6 <_printf_i+0xf2>
 8009de0:	0669      	lsls	r1, r5, #25
 8009de2:	d5fb      	bpl.n	8009ddc <_printf_i+0xe8>
 8009de4:	881d      	ldrh	r5, [r3, #0]
 8009de6:	4854      	ldr	r0, [pc, #336]	; (8009f38 <_printf_i+0x244>)
 8009de8:	2f6f      	cmp	r7, #111	; 0x6f
 8009dea:	bf0c      	ite	eq
 8009dec:	2308      	moveq	r3, #8
 8009dee:	230a      	movne	r3, #10
 8009df0:	2100      	movs	r1, #0
 8009df2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009df6:	6866      	ldr	r6, [r4, #4]
 8009df8:	60a6      	str	r6, [r4, #8]
 8009dfa:	2e00      	cmp	r6, #0
 8009dfc:	bfa2      	ittt	ge
 8009dfe:	6821      	ldrge	r1, [r4, #0]
 8009e00:	f021 0104 	bicge.w	r1, r1, #4
 8009e04:	6021      	strge	r1, [r4, #0]
 8009e06:	b90d      	cbnz	r5, 8009e0c <_printf_i+0x118>
 8009e08:	2e00      	cmp	r6, #0
 8009e0a:	d04d      	beq.n	8009ea8 <_printf_i+0x1b4>
 8009e0c:	4616      	mov	r6, r2
 8009e0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e12:	fb03 5711 	mls	r7, r3, r1, r5
 8009e16:	5dc7      	ldrb	r7, [r0, r7]
 8009e18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e1c:	462f      	mov	r7, r5
 8009e1e:	42bb      	cmp	r3, r7
 8009e20:	460d      	mov	r5, r1
 8009e22:	d9f4      	bls.n	8009e0e <_printf_i+0x11a>
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	d10b      	bne.n	8009e40 <_printf_i+0x14c>
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	07df      	lsls	r7, r3, #31
 8009e2c:	d508      	bpl.n	8009e40 <_printf_i+0x14c>
 8009e2e:	6923      	ldr	r3, [r4, #16]
 8009e30:	6861      	ldr	r1, [r4, #4]
 8009e32:	4299      	cmp	r1, r3
 8009e34:	bfde      	ittt	le
 8009e36:	2330      	movle	r3, #48	; 0x30
 8009e38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e3c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009e40:	1b92      	subs	r2, r2, r6
 8009e42:	6122      	str	r2, [r4, #16]
 8009e44:	f8cd a000 	str.w	sl, [sp]
 8009e48:	464b      	mov	r3, r9
 8009e4a:	aa03      	add	r2, sp, #12
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	4640      	mov	r0, r8
 8009e50:	f7ff fee2 	bl	8009c18 <_printf_common>
 8009e54:	3001      	adds	r0, #1
 8009e56:	d14c      	bne.n	8009ef2 <_printf_i+0x1fe>
 8009e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e5c:	b004      	add	sp, #16
 8009e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e62:	4835      	ldr	r0, [pc, #212]	; (8009f38 <_printf_i+0x244>)
 8009e64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	680e      	ldr	r6, [r1, #0]
 8009e6c:	061f      	lsls	r7, r3, #24
 8009e6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009e72:	600e      	str	r6, [r1, #0]
 8009e74:	d514      	bpl.n	8009ea0 <_printf_i+0x1ac>
 8009e76:	07d9      	lsls	r1, r3, #31
 8009e78:	bf44      	itt	mi
 8009e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8009e7e:	6023      	strmi	r3, [r4, #0]
 8009e80:	b91d      	cbnz	r5, 8009e8a <_printf_i+0x196>
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	f023 0320 	bic.w	r3, r3, #32
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	2310      	movs	r3, #16
 8009e8c:	e7b0      	b.n	8009df0 <_printf_i+0xfc>
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	f043 0320 	orr.w	r3, r3, #32
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	2378      	movs	r3, #120	; 0x78
 8009e98:	4828      	ldr	r0, [pc, #160]	; (8009f3c <_printf_i+0x248>)
 8009e9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e9e:	e7e3      	b.n	8009e68 <_printf_i+0x174>
 8009ea0:	065e      	lsls	r6, r3, #25
 8009ea2:	bf48      	it	mi
 8009ea4:	b2ad      	uxthmi	r5, r5
 8009ea6:	e7e6      	b.n	8009e76 <_printf_i+0x182>
 8009ea8:	4616      	mov	r6, r2
 8009eaa:	e7bb      	b.n	8009e24 <_printf_i+0x130>
 8009eac:	680b      	ldr	r3, [r1, #0]
 8009eae:	6826      	ldr	r6, [r4, #0]
 8009eb0:	6960      	ldr	r0, [r4, #20]
 8009eb2:	1d1d      	adds	r5, r3, #4
 8009eb4:	600d      	str	r5, [r1, #0]
 8009eb6:	0635      	lsls	r5, r6, #24
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	d501      	bpl.n	8009ec0 <_printf_i+0x1cc>
 8009ebc:	6018      	str	r0, [r3, #0]
 8009ebe:	e002      	b.n	8009ec6 <_printf_i+0x1d2>
 8009ec0:	0671      	lsls	r1, r6, #25
 8009ec2:	d5fb      	bpl.n	8009ebc <_printf_i+0x1c8>
 8009ec4:	8018      	strh	r0, [r3, #0]
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	6123      	str	r3, [r4, #16]
 8009eca:	4616      	mov	r6, r2
 8009ecc:	e7ba      	b.n	8009e44 <_printf_i+0x150>
 8009ece:	680b      	ldr	r3, [r1, #0]
 8009ed0:	1d1a      	adds	r2, r3, #4
 8009ed2:	600a      	str	r2, [r1, #0]
 8009ed4:	681e      	ldr	r6, [r3, #0]
 8009ed6:	6862      	ldr	r2, [r4, #4]
 8009ed8:	2100      	movs	r1, #0
 8009eda:	4630      	mov	r0, r6
 8009edc:	f7f6 f980 	bl	80001e0 <memchr>
 8009ee0:	b108      	cbz	r0, 8009ee6 <_printf_i+0x1f2>
 8009ee2:	1b80      	subs	r0, r0, r6
 8009ee4:	6060      	str	r0, [r4, #4]
 8009ee6:	6863      	ldr	r3, [r4, #4]
 8009ee8:	6123      	str	r3, [r4, #16]
 8009eea:	2300      	movs	r3, #0
 8009eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ef0:	e7a8      	b.n	8009e44 <_printf_i+0x150>
 8009ef2:	6923      	ldr	r3, [r4, #16]
 8009ef4:	4632      	mov	r2, r6
 8009ef6:	4649      	mov	r1, r9
 8009ef8:	4640      	mov	r0, r8
 8009efa:	47d0      	blx	sl
 8009efc:	3001      	adds	r0, #1
 8009efe:	d0ab      	beq.n	8009e58 <_printf_i+0x164>
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	079b      	lsls	r3, r3, #30
 8009f04:	d413      	bmi.n	8009f2e <_printf_i+0x23a>
 8009f06:	68e0      	ldr	r0, [r4, #12]
 8009f08:	9b03      	ldr	r3, [sp, #12]
 8009f0a:	4298      	cmp	r0, r3
 8009f0c:	bfb8      	it	lt
 8009f0e:	4618      	movlt	r0, r3
 8009f10:	e7a4      	b.n	8009e5c <_printf_i+0x168>
 8009f12:	2301      	movs	r3, #1
 8009f14:	4632      	mov	r2, r6
 8009f16:	4649      	mov	r1, r9
 8009f18:	4640      	mov	r0, r8
 8009f1a:	47d0      	blx	sl
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	d09b      	beq.n	8009e58 <_printf_i+0x164>
 8009f20:	3501      	adds	r5, #1
 8009f22:	68e3      	ldr	r3, [r4, #12]
 8009f24:	9903      	ldr	r1, [sp, #12]
 8009f26:	1a5b      	subs	r3, r3, r1
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	dcf2      	bgt.n	8009f12 <_printf_i+0x21e>
 8009f2c:	e7eb      	b.n	8009f06 <_printf_i+0x212>
 8009f2e:	2500      	movs	r5, #0
 8009f30:	f104 0619 	add.w	r6, r4, #25
 8009f34:	e7f5      	b.n	8009f22 <_printf_i+0x22e>
 8009f36:	bf00      	nop
 8009f38:	0800f2c2 	.word	0x0800f2c2
 8009f3c:	0800f2d3 	.word	0x0800f2d3

08009f40 <siprintf>:
 8009f40:	b40e      	push	{r1, r2, r3}
 8009f42:	b500      	push	{lr}
 8009f44:	b09c      	sub	sp, #112	; 0x70
 8009f46:	ab1d      	add	r3, sp, #116	; 0x74
 8009f48:	9002      	str	r0, [sp, #8]
 8009f4a:	9006      	str	r0, [sp, #24]
 8009f4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f50:	4809      	ldr	r0, [pc, #36]	; (8009f78 <siprintf+0x38>)
 8009f52:	9107      	str	r1, [sp, #28]
 8009f54:	9104      	str	r1, [sp, #16]
 8009f56:	4909      	ldr	r1, [pc, #36]	; (8009f7c <siprintf+0x3c>)
 8009f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f5c:	9105      	str	r1, [sp, #20]
 8009f5e:	6800      	ldr	r0, [r0, #0]
 8009f60:	9301      	str	r3, [sp, #4]
 8009f62:	a902      	add	r1, sp, #8
 8009f64:	f001 fe04 	bl	800bb70 <_svfiprintf_r>
 8009f68:	9b02      	ldr	r3, [sp, #8]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	701a      	strb	r2, [r3, #0]
 8009f6e:	b01c      	add	sp, #112	; 0x70
 8009f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f74:	b003      	add	sp, #12
 8009f76:	4770      	bx	lr
 8009f78:	20000034 	.word	0x20000034
 8009f7c:	ffff0208 	.word	0xffff0208

08009f80 <__swbuf_r>:
 8009f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f82:	460e      	mov	r6, r1
 8009f84:	4614      	mov	r4, r2
 8009f86:	4605      	mov	r5, r0
 8009f88:	b118      	cbz	r0, 8009f92 <__swbuf_r+0x12>
 8009f8a:	6983      	ldr	r3, [r0, #24]
 8009f8c:	b90b      	cbnz	r3, 8009f92 <__swbuf_r+0x12>
 8009f8e:	f001 f849 	bl	800b024 <__sinit>
 8009f92:	4b21      	ldr	r3, [pc, #132]	; (800a018 <__swbuf_r+0x98>)
 8009f94:	429c      	cmp	r4, r3
 8009f96:	d12b      	bne.n	8009ff0 <__swbuf_r+0x70>
 8009f98:	686c      	ldr	r4, [r5, #4]
 8009f9a:	69a3      	ldr	r3, [r4, #24]
 8009f9c:	60a3      	str	r3, [r4, #8]
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	071a      	lsls	r2, r3, #28
 8009fa2:	d52f      	bpl.n	800a004 <__swbuf_r+0x84>
 8009fa4:	6923      	ldr	r3, [r4, #16]
 8009fa6:	b36b      	cbz	r3, 800a004 <__swbuf_r+0x84>
 8009fa8:	6923      	ldr	r3, [r4, #16]
 8009faa:	6820      	ldr	r0, [r4, #0]
 8009fac:	1ac0      	subs	r0, r0, r3
 8009fae:	6963      	ldr	r3, [r4, #20]
 8009fb0:	b2f6      	uxtb	r6, r6
 8009fb2:	4283      	cmp	r3, r0
 8009fb4:	4637      	mov	r7, r6
 8009fb6:	dc04      	bgt.n	8009fc2 <__swbuf_r+0x42>
 8009fb8:	4621      	mov	r1, r4
 8009fba:	4628      	mov	r0, r5
 8009fbc:	f000 ff9e 	bl	800aefc <_fflush_r>
 8009fc0:	bb30      	cbnz	r0, 800a010 <__swbuf_r+0x90>
 8009fc2:	68a3      	ldr	r3, [r4, #8]
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	60a3      	str	r3, [r4, #8]
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	6022      	str	r2, [r4, #0]
 8009fce:	701e      	strb	r6, [r3, #0]
 8009fd0:	6963      	ldr	r3, [r4, #20]
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	4283      	cmp	r3, r0
 8009fd6:	d004      	beq.n	8009fe2 <__swbuf_r+0x62>
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	07db      	lsls	r3, r3, #31
 8009fdc:	d506      	bpl.n	8009fec <__swbuf_r+0x6c>
 8009fde:	2e0a      	cmp	r6, #10
 8009fe0:	d104      	bne.n	8009fec <__swbuf_r+0x6c>
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	f000 ff89 	bl	800aefc <_fflush_r>
 8009fea:	b988      	cbnz	r0, 800a010 <__swbuf_r+0x90>
 8009fec:	4638      	mov	r0, r7
 8009fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ff0:	4b0a      	ldr	r3, [pc, #40]	; (800a01c <__swbuf_r+0x9c>)
 8009ff2:	429c      	cmp	r4, r3
 8009ff4:	d101      	bne.n	8009ffa <__swbuf_r+0x7a>
 8009ff6:	68ac      	ldr	r4, [r5, #8]
 8009ff8:	e7cf      	b.n	8009f9a <__swbuf_r+0x1a>
 8009ffa:	4b09      	ldr	r3, [pc, #36]	; (800a020 <__swbuf_r+0xa0>)
 8009ffc:	429c      	cmp	r4, r3
 8009ffe:	bf08      	it	eq
 800a000:	68ec      	ldreq	r4, [r5, #12]
 800a002:	e7ca      	b.n	8009f9a <__swbuf_r+0x1a>
 800a004:	4621      	mov	r1, r4
 800a006:	4628      	mov	r0, r5
 800a008:	f000 f80c 	bl	800a024 <__swsetup_r>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d0cb      	beq.n	8009fa8 <__swbuf_r+0x28>
 800a010:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a014:	e7ea      	b.n	8009fec <__swbuf_r+0x6c>
 800a016:	bf00      	nop
 800a018:	0800f398 	.word	0x0800f398
 800a01c:	0800f3b8 	.word	0x0800f3b8
 800a020:	0800f378 	.word	0x0800f378

0800a024 <__swsetup_r>:
 800a024:	4b32      	ldr	r3, [pc, #200]	; (800a0f0 <__swsetup_r+0xcc>)
 800a026:	b570      	push	{r4, r5, r6, lr}
 800a028:	681d      	ldr	r5, [r3, #0]
 800a02a:	4606      	mov	r6, r0
 800a02c:	460c      	mov	r4, r1
 800a02e:	b125      	cbz	r5, 800a03a <__swsetup_r+0x16>
 800a030:	69ab      	ldr	r3, [r5, #24]
 800a032:	b913      	cbnz	r3, 800a03a <__swsetup_r+0x16>
 800a034:	4628      	mov	r0, r5
 800a036:	f000 fff5 	bl	800b024 <__sinit>
 800a03a:	4b2e      	ldr	r3, [pc, #184]	; (800a0f4 <__swsetup_r+0xd0>)
 800a03c:	429c      	cmp	r4, r3
 800a03e:	d10f      	bne.n	800a060 <__swsetup_r+0x3c>
 800a040:	686c      	ldr	r4, [r5, #4]
 800a042:	89a3      	ldrh	r3, [r4, #12]
 800a044:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a048:	0719      	lsls	r1, r3, #28
 800a04a:	d42c      	bmi.n	800a0a6 <__swsetup_r+0x82>
 800a04c:	06dd      	lsls	r5, r3, #27
 800a04e:	d411      	bmi.n	800a074 <__swsetup_r+0x50>
 800a050:	2309      	movs	r3, #9
 800a052:	6033      	str	r3, [r6, #0]
 800a054:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a058:	81a3      	strh	r3, [r4, #12]
 800a05a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a05e:	e03e      	b.n	800a0de <__swsetup_r+0xba>
 800a060:	4b25      	ldr	r3, [pc, #148]	; (800a0f8 <__swsetup_r+0xd4>)
 800a062:	429c      	cmp	r4, r3
 800a064:	d101      	bne.n	800a06a <__swsetup_r+0x46>
 800a066:	68ac      	ldr	r4, [r5, #8]
 800a068:	e7eb      	b.n	800a042 <__swsetup_r+0x1e>
 800a06a:	4b24      	ldr	r3, [pc, #144]	; (800a0fc <__swsetup_r+0xd8>)
 800a06c:	429c      	cmp	r4, r3
 800a06e:	bf08      	it	eq
 800a070:	68ec      	ldreq	r4, [r5, #12]
 800a072:	e7e6      	b.n	800a042 <__swsetup_r+0x1e>
 800a074:	0758      	lsls	r0, r3, #29
 800a076:	d512      	bpl.n	800a09e <__swsetup_r+0x7a>
 800a078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a07a:	b141      	cbz	r1, 800a08e <__swsetup_r+0x6a>
 800a07c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a080:	4299      	cmp	r1, r3
 800a082:	d002      	beq.n	800a08a <__swsetup_r+0x66>
 800a084:	4630      	mov	r0, r6
 800a086:	f001 fc6d 	bl	800b964 <_free_r>
 800a08a:	2300      	movs	r3, #0
 800a08c:	6363      	str	r3, [r4, #52]	; 0x34
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a094:	81a3      	strh	r3, [r4, #12]
 800a096:	2300      	movs	r3, #0
 800a098:	6063      	str	r3, [r4, #4]
 800a09a:	6923      	ldr	r3, [r4, #16]
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	f043 0308 	orr.w	r3, r3, #8
 800a0a4:	81a3      	strh	r3, [r4, #12]
 800a0a6:	6923      	ldr	r3, [r4, #16]
 800a0a8:	b94b      	cbnz	r3, 800a0be <__swsetup_r+0x9a>
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0b4:	d003      	beq.n	800a0be <__swsetup_r+0x9a>
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f001 f87d 	bl	800b1b8 <__smakebuf_r>
 800a0be:	89a0      	ldrh	r0, [r4, #12]
 800a0c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0c4:	f010 0301 	ands.w	r3, r0, #1
 800a0c8:	d00a      	beq.n	800a0e0 <__swsetup_r+0xbc>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	60a3      	str	r3, [r4, #8]
 800a0ce:	6963      	ldr	r3, [r4, #20]
 800a0d0:	425b      	negs	r3, r3
 800a0d2:	61a3      	str	r3, [r4, #24]
 800a0d4:	6923      	ldr	r3, [r4, #16]
 800a0d6:	b943      	cbnz	r3, 800a0ea <__swsetup_r+0xc6>
 800a0d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0dc:	d1ba      	bne.n	800a054 <__swsetup_r+0x30>
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	0781      	lsls	r1, r0, #30
 800a0e2:	bf58      	it	pl
 800a0e4:	6963      	ldrpl	r3, [r4, #20]
 800a0e6:	60a3      	str	r3, [r4, #8]
 800a0e8:	e7f4      	b.n	800a0d4 <__swsetup_r+0xb0>
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	e7f7      	b.n	800a0de <__swsetup_r+0xba>
 800a0ee:	bf00      	nop
 800a0f0:	20000034 	.word	0x20000034
 800a0f4:	0800f398 	.word	0x0800f398
 800a0f8:	0800f3b8 	.word	0x0800f3b8
 800a0fc:	0800f378 	.word	0x0800f378

0800a100 <quorem>:
 800a100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	6903      	ldr	r3, [r0, #16]
 800a106:	690c      	ldr	r4, [r1, #16]
 800a108:	42a3      	cmp	r3, r4
 800a10a:	4607      	mov	r7, r0
 800a10c:	f2c0 8081 	blt.w	800a212 <quorem+0x112>
 800a110:	3c01      	subs	r4, #1
 800a112:	f101 0814 	add.w	r8, r1, #20
 800a116:	f100 0514 	add.w	r5, r0, #20
 800a11a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a124:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a128:	3301      	adds	r3, #1
 800a12a:	429a      	cmp	r2, r3
 800a12c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a130:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a134:	fbb2 f6f3 	udiv	r6, r2, r3
 800a138:	d331      	bcc.n	800a19e <quorem+0x9e>
 800a13a:	f04f 0e00 	mov.w	lr, #0
 800a13e:	4640      	mov	r0, r8
 800a140:	46ac      	mov	ip, r5
 800a142:	46f2      	mov	sl, lr
 800a144:	f850 2b04 	ldr.w	r2, [r0], #4
 800a148:	b293      	uxth	r3, r2
 800a14a:	fb06 e303 	mla	r3, r6, r3, lr
 800a14e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a152:	b29b      	uxth	r3, r3
 800a154:	ebaa 0303 	sub.w	r3, sl, r3
 800a158:	0c12      	lsrs	r2, r2, #16
 800a15a:	f8dc a000 	ldr.w	sl, [ip]
 800a15e:	fb06 e202 	mla	r2, r6, r2, lr
 800a162:	fa13 f38a 	uxtah	r3, r3, sl
 800a166:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a16a:	fa1f fa82 	uxth.w	sl, r2
 800a16e:	f8dc 2000 	ldr.w	r2, [ip]
 800a172:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a176:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a180:	4581      	cmp	r9, r0
 800a182:	f84c 3b04 	str.w	r3, [ip], #4
 800a186:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a18a:	d2db      	bcs.n	800a144 <quorem+0x44>
 800a18c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a190:	b92b      	cbnz	r3, 800a19e <quorem+0x9e>
 800a192:	9b01      	ldr	r3, [sp, #4]
 800a194:	3b04      	subs	r3, #4
 800a196:	429d      	cmp	r5, r3
 800a198:	461a      	mov	r2, r3
 800a19a:	d32e      	bcc.n	800a1fa <quorem+0xfa>
 800a19c:	613c      	str	r4, [r7, #16]
 800a19e:	4638      	mov	r0, r7
 800a1a0:	f001 fad0 	bl	800b744 <__mcmp>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	db24      	blt.n	800a1f2 <quorem+0xf2>
 800a1a8:	3601      	adds	r6, #1
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f04f 0c00 	mov.w	ip, #0
 800a1b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1b4:	f8d0 e000 	ldr.w	lr, [r0]
 800a1b8:	b293      	uxth	r3, r2
 800a1ba:	ebac 0303 	sub.w	r3, ip, r3
 800a1be:	0c12      	lsrs	r2, r2, #16
 800a1c0:	fa13 f38e 	uxtah	r3, r3, lr
 800a1c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1d2:	45c1      	cmp	r9, r8
 800a1d4:	f840 3b04 	str.w	r3, [r0], #4
 800a1d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1dc:	d2e8      	bcs.n	800a1b0 <quorem+0xb0>
 800a1de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1e6:	b922      	cbnz	r2, 800a1f2 <quorem+0xf2>
 800a1e8:	3b04      	subs	r3, #4
 800a1ea:	429d      	cmp	r5, r3
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	d30a      	bcc.n	800a206 <quorem+0x106>
 800a1f0:	613c      	str	r4, [r7, #16]
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	b003      	add	sp, #12
 800a1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fa:	6812      	ldr	r2, [r2, #0]
 800a1fc:	3b04      	subs	r3, #4
 800a1fe:	2a00      	cmp	r2, #0
 800a200:	d1cc      	bne.n	800a19c <quorem+0x9c>
 800a202:	3c01      	subs	r4, #1
 800a204:	e7c7      	b.n	800a196 <quorem+0x96>
 800a206:	6812      	ldr	r2, [r2, #0]
 800a208:	3b04      	subs	r3, #4
 800a20a:	2a00      	cmp	r2, #0
 800a20c:	d1f0      	bne.n	800a1f0 <quorem+0xf0>
 800a20e:	3c01      	subs	r4, #1
 800a210:	e7eb      	b.n	800a1ea <quorem+0xea>
 800a212:	2000      	movs	r0, #0
 800a214:	e7ee      	b.n	800a1f4 <quorem+0xf4>
	...

0800a218 <_dtoa_r>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	ed2d 8b02 	vpush	{d8}
 800a220:	ec57 6b10 	vmov	r6, r7, d0
 800a224:	b095      	sub	sp, #84	; 0x54
 800a226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a228:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a22c:	9105      	str	r1, [sp, #20]
 800a22e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a232:	4604      	mov	r4, r0
 800a234:	9209      	str	r2, [sp, #36]	; 0x24
 800a236:	930f      	str	r3, [sp, #60]	; 0x3c
 800a238:	b975      	cbnz	r5, 800a258 <_dtoa_r+0x40>
 800a23a:	2010      	movs	r0, #16
 800a23c:	f000 fffc 	bl	800b238 <malloc>
 800a240:	4602      	mov	r2, r0
 800a242:	6260      	str	r0, [r4, #36]	; 0x24
 800a244:	b920      	cbnz	r0, 800a250 <_dtoa_r+0x38>
 800a246:	4bb2      	ldr	r3, [pc, #712]	; (800a510 <_dtoa_r+0x2f8>)
 800a248:	21ea      	movs	r1, #234	; 0xea
 800a24a:	48b2      	ldr	r0, [pc, #712]	; (800a514 <_dtoa_r+0x2fc>)
 800a24c:	f001 ff50 	bl	800c0f0 <__assert_func>
 800a250:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a254:	6005      	str	r5, [r0, #0]
 800a256:	60c5      	str	r5, [r0, #12]
 800a258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a25a:	6819      	ldr	r1, [r3, #0]
 800a25c:	b151      	cbz	r1, 800a274 <_dtoa_r+0x5c>
 800a25e:	685a      	ldr	r2, [r3, #4]
 800a260:	604a      	str	r2, [r1, #4]
 800a262:	2301      	movs	r3, #1
 800a264:	4093      	lsls	r3, r2
 800a266:	608b      	str	r3, [r1, #8]
 800a268:	4620      	mov	r0, r4
 800a26a:	f001 f82d 	bl	800b2c8 <_Bfree>
 800a26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a270:	2200      	movs	r2, #0
 800a272:	601a      	str	r2, [r3, #0]
 800a274:	1e3b      	subs	r3, r7, #0
 800a276:	bfb9      	ittee	lt
 800a278:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a27c:	9303      	strlt	r3, [sp, #12]
 800a27e:	2300      	movge	r3, #0
 800a280:	f8c8 3000 	strge.w	r3, [r8]
 800a284:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a288:	4ba3      	ldr	r3, [pc, #652]	; (800a518 <_dtoa_r+0x300>)
 800a28a:	bfbc      	itt	lt
 800a28c:	2201      	movlt	r2, #1
 800a28e:	f8c8 2000 	strlt.w	r2, [r8]
 800a292:	ea33 0309 	bics.w	r3, r3, r9
 800a296:	d11b      	bne.n	800a2d0 <_dtoa_r+0xb8>
 800a298:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a29a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a29e:	6013      	str	r3, [r2, #0]
 800a2a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2a4:	4333      	orrs	r3, r6
 800a2a6:	f000 857a 	beq.w	800ad9e <_dtoa_r+0xb86>
 800a2aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2ac:	b963      	cbnz	r3, 800a2c8 <_dtoa_r+0xb0>
 800a2ae:	4b9b      	ldr	r3, [pc, #620]	; (800a51c <_dtoa_r+0x304>)
 800a2b0:	e024      	b.n	800a2fc <_dtoa_r+0xe4>
 800a2b2:	4b9b      	ldr	r3, [pc, #620]	; (800a520 <_dtoa_r+0x308>)
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2ba:	6013      	str	r3, [r2, #0]
 800a2bc:	9800      	ldr	r0, [sp, #0]
 800a2be:	b015      	add	sp, #84	; 0x54
 800a2c0:	ecbd 8b02 	vpop	{d8}
 800a2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c8:	4b94      	ldr	r3, [pc, #592]	; (800a51c <_dtoa_r+0x304>)
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	3303      	adds	r3, #3
 800a2ce:	e7f3      	b.n	800a2b8 <_dtoa_r+0xa0>
 800a2d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	ec51 0b17 	vmov	r0, r1, d7
 800a2da:	2300      	movs	r3, #0
 800a2dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a2e0:	f7f6 fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2e4:	4680      	mov	r8, r0
 800a2e6:	b158      	cbz	r0, 800a300 <_dtoa_r+0xe8>
 800a2e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	6013      	str	r3, [r2, #0]
 800a2ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 8551 	beq.w	800ad98 <_dtoa_r+0xb80>
 800a2f6:	488b      	ldr	r0, [pc, #556]	; (800a524 <_dtoa_r+0x30c>)
 800a2f8:	6018      	str	r0, [r3, #0]
 800a2fa:	1e43      	subs	r3, r0, #1
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	e7dd      	b.n	800a2bc <_dtoa_r+0xa4>
 800a300:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a304:	aa12      	add	r2, sp, #72	; 0x48
 800a306:	a913      	add	r1, sp, #76	; 0x4c
 800a308:	4620      	mov	r0, r4
 800a30a:	f001 fabf 	bl	800b88c <__d2b>
 800a30e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a312:	4683      	mov	fp, r0
 800a314:	2d00      	cmp	r5, #0
 800a316:	d07c      	beq.n	800a412 <_dtoa_r+0x1fa>
 800a318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a31a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a31e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a322:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a326:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a32a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a32e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a332:	4b7d      	ldr	r3, [pc, #500]	; (800a528 <_dtoa_r+0x310>)
 800a334:	2200      	movs	r2, #0
 800a336:	4630      	mov	r0, r6
 800a338:	4639      	mov	r1, r7
 800a33a:	f7f5 ffa5 	bl	8000288 <__aeabi_dsub>
 800a33e:	a36e      	add	r3, pc, #440	; (adr r3, 800a4f8 <_dtoa_r+0x2e0>)
 800a340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a344:	f7f6 f958 	bl	80005f8 <__aeabi_dmul>
 800a348:	a36d      	add	r3, pc, #436	; (adr r3, 800a500 <_dtoa_r+0x2e8>)
 800a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34e:	f7f5 ff9d 	bl	800028c <__adddf3>
 800a352:	4606      	mov	r6, r0
 800a354:	4628      	mov	r0, r5
 800a356:	460f      	mov	r7, r1
 800a358:	f7f6 f8e4 	bl	8000524 <__aeabi_i2d>
 800a35c:	a36a      	add	r3, pc, #424	; (adr r3, 800a508 <_dtoa_r+0x2f0>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f6 f949 	bl	80005f8 <__aeabi_dmul>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	4630      	mov	r0, r6
 800a36c:	4639      	mov	r1, r7
 800a36e:	f7f5 ff8d 	bl	800028c <__adddf3>
 800a372:	4606      	mov	r6, r0
 800a374:	460f      	mov	r7, r1
 800a376:	f7f6 fbef 	bl	8000b58 <__aeabi_d2iz>
 800a37a:	2200      	movs	r2, #0
 800a37c:	4682      	mov	sl, r0
 800a37e:	2300      	movs	r3, #0
 800a380:	4630      	mov	r0, r6
 800a382:	4639      	mov	r1, r7
 800a384:	f7f6 fbaa 	bl	8000adc <__aeabi_dcmplt>
 800a388:	b148      	cbz	r0, 800a39e <_dtoa_r+0x186>
 800a38a:	4650      	mov	r0, sl
 800a38c:	f7f6 f8ca 	bl	8000524 <__aeabi_i2d>
 800a390:	4632      	mov	r2, r6
 800a392:	463b      	mov	r3, r7
 800a394:	f7f6 fb98 	bl	8000ac8 <__aeabi_dcmpeq>
 800a398:	b908      	cbnz	r0, 800a39e <_dtoa_r+0x186>
 800a39a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a39e:	f1ba 0f16 	cmp.w	sl, #22
 800a3a2:	d854      	bhi.n	800a44e <_dtoa_r+0x236>
 800a3a4:	4b61      	ldr	r3, [pc, #388]	; (800a52c <_dtoa_r+0x314>)
 800a3a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a3b2:	f7f6 fb93 	bl	8000adc <__aeabi_dcmplt>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d04b      	beq.n	800a452 <_dtoa_r+0x23a>
 800a3ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a3be:	2300      	movs	r3, #0
 800a3c0:	930e      	str	r3, [sp, #56]	; 0x38
 800a3c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3c4:	1b5d      	subs	r5, r3, r5
 800a3c6:	1e6b      	subs	r3, r5, #1
 800a3c8:	9304      	str	r3, [sp, #16]
 800a3ca:	bf43      	ittte	mi
 800a3cc:	2300      	movmi	r3, #0
 800a3ce:	f1c5 0801 	rsbmi	r8, r5, #1
 800a3d2:	9304      	strmi	r3, [sp, #16]
 800a3d4:	f04f 0800 	movpl.w	r8, #0
 800a3d8:	f1ba 0f00 	cmp.w	sl, #0
 800a3dc:	db3b      	blt.n	800a456 <_dtoa_r+0x23e>
 800a3de:	9b04      	ldr	r3, [sp, #16]
 800a3e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a3e4:	4453      	add	r3, sl
 800a3e6:	9304      	str	r3, [sp, #16]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	9306      	str	r3, [sp, #24]
 800a3ec:	9b05      	ldr	r3, [sp, #20]
 800a3ee:	2b09      	cmp	r3, #9
 800a3f0:	d869      	bhi.n	800a4c6 <_dtoa_r+0x2ae>
 800a3f2:	2b05      	cmp	r3, #5
 800a3f4:	bfc4      	itt	gt
 800a3f6:	3b04      	subgt	r3, #4
 800a3f8:	9305      	strgt	r3, [sp, #20]
 800a3fa:	9b05      	ldr	r3, [sp, #20]
 800a3fc:	f1a3 0302 	sub.w	r3, r3, #2
 800a400:	bfcc      	ite	gt
 800a402:	2500      	movgt	r5, #0
 800a404:	2501      	movle	r5, #1
 800a406:	2b03      	cmp	r3, #3
 800a408:	d869      	bhi.n	800a4de <_dtoa_r+0x2c6>
 800a40a:	e8df f003 	tbb	[pc, r3]
 800a40e:	4e2c      	.short	0x4e2c
 800a410:	5a4c      	.short	0x5a4c
 800a412:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a416:	441d      	add	r5, r3
 800a418:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a41c:	2b20      	cmp	r3, #32
 800a41e:	bfc1      	itttt	gt
 800a420:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a424:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a428:	fa09 f303 	lslgt.w	r3, r9, r3
 800a42c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a430:	bfda      	itte	le
 800a432:	f1c3 0320 	rsble	r3, r3, #32
 800a436:	fa06 f003 	lslle.w	r0, r6, r3
 800a43a:	4318      	orrgt	r0, r3
 800a43c:	f7f6 f862 	bl	8000504 <__aeabi_ui2d>
 800a440:	2301      	movs	r3, #1
 800a442:	4606      	mov	r6, r0
 800a444:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a448:	3d01      	subs	r5, #1
 800a44a:	9310      	str	r3, [sp, #64]	; 0x40
 800a44c:	e771      	b.n	800a332 <_dtoa_r+0x11a>
 800a44e:	2301      	movs	r3, #1
 800a450:	e7b6      	b.n	800a3c0 <_dtoa_r+0x1a8>
 800a452:	900e      	str	r0, [sp, #56]	; 0x38
 800a454:	e7b5      	b.n	800a3c2 <_dtoa_r+0x1aa>
 800a456:	f1ca 0300 	rsb	r3, sl, #0
 800a45a:	9306      	str	r3, [sp, #24]
 800a45c:	2300      	movs	r3, #0
 800a45e:	eba8 080a 	sub.w	r8, r8, sl
 800a462:	930d      	str	r3, [sp, #52]	; 0x34
 800a464:	e7c2      	b.n	800a3ec <_dtoa_r+0x1d4>
 800a466:	2300      	movs	r3, #0
 800a468:	9308      	str	r3, [sp, #32]
 800a46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	dc39      	bgt.n	800a4e4 <_dtoa_r+0x2cc>
 800a470:	f04f 0901 	mov.w	r9, #1
 800a474:	f8cd 9004 	str.w	r9, [sp, #4]
 800a478:	464b      	mov	r3, r9
 800a47a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a47e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a480:	2200      	movs	r2, #0
 800a482:	6042      	str	r2, [r0, #4]
 800a484:	2204      	movs	r2, #4
 800a486:	f102 0614 	add.w	r6, r2, #20
 800a48a:	429e      	cmp	r6, r3
 800a48c:	6841      	ldr	r1, [r0, #4]
 800a48e:	d92f      	bls.n	800a4f0 <_dtoa_r+0x2d8>
 800a490:	4620      	mov	r0, r4
 800a492:	f000 fed9 	bl	800b248 <_Balloc>
 800a496:	9000      	str	r0, [sp, #0]
 800a498:	2800      	cmp	r0, #0
 800a49a:	d14b      	bne.n	800a534 <_dtoa_r+0x31c>
 800a49c:	4b24      	ldr	r3, [pc, #144]	; (800a530 <_dtoa_r+0x318>)
 800a49e:	4602      	mov	r2, r0
 800a4a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4a4:	e6d1      	b.n	800a24a <_dtoa_r+0x32>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e7de      	b.n	800a468 <_dtoa_r+0x250>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9308      	str	r3, [sp, #32]
 800a4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b0:	eb0a 0903 	add.w	r9, sl, r3
 800a4b4:	f109 0301 	add.w	r3, r9, #1
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	bfb8      	it	lt
 800a4be:	2301      	movlt	r3, #1
 800a4c0:	e7dd      	b.n	800a47e <_dtoa_r+0x266>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e7f2      	b.n	800a4ac <_dtoa_r+0x294>
 800a4c6:	2501      	movs	r5, #1
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	9305      	str	r3, [sp, #20]
 800a4cc:	9508      	str	r5, [sp, #32]
 800a4ce:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4d8:	2312      	movs	r3, #18
 800a4da:	9209      	str	r2, [sp, #36]	; 0x24
 800a4dc:	e7cf      	b.n	800a47e <_dtoa_r+0x266>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	9308      	str	r3, [sp, #32]
 800a4e2:	e7f4      	b.n	800a4ce <_dtoa_r+0x2b6>
 800a4e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a4e8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4ec:	464b      	mov	r3, r9
 800a4ee:	e7c6      	b.n	800a47e <_dtoa_r+0x266>
 800a4f0:	3101      	adds	r1, #1
 800a4f2:	6041      	str	r1, [r0, #4]
 800a4f4:	0052      	lsls	r2, r2, #1
 800a4f6:	e7c6      	b.n	800a486 <_dtoa_r+0x26e>
 800a4f8:	636f4361 	.word	0x636f4361
 800a4fc:	3fd287a7 	.word	0x3fd287a7
 800a500:	8b60c8b3 	.word	0x8b60c8b3
 800a504:	3fc68a28 	.word	0x3fc68a28
 800a508:	509f79fb 	.word	0x509f79fb
 800a50c:	3fd34413 	.word	0x3fd34413
 800a510:	0800f2f1 	.word	0x0800f2f1
 800a514:	0800f308 	.word	0x0800f308
 800a518:	7ff00000 	.word	0x7ff00000
 800a51c:	0800f2ed 	.word	0x0800f2ed
 800a520:	0800f2e4 	.word	0x0800f2e4
 800a524:	0800f2c1 	.word	0x0800f2c1
 800a528:	3ff80000 	.word	0x3ff80000
 800a52c:	0800f460 	.word	0x0800f460
 800a530:	0800f367 	.word	0x0800f367
 800a534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a536:	9a00      	ldr	r2, [sp, #0]
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	9b01      	ldr	r3, [sp, #4]
 800a53c:	2b0e      	cmp	r3, #14
 800a53e:	f200 80ad 	bhi.w	800a69c <_dtoa_r+0x484>
 800a542:	2d00      	cmp	r5, #0
 800a544:	f000 80aa 	beq.w	800a69c <_dtoa_r+0x484>
 800a548:	f1ba 0f00 	cmp.w	sl, #0
 800a54c:	dd36      	ble.n	800a5bc <_dtoa_r+0x3a4>
 800a54e:	4ac3      	ldr	r2, [pc, #780]	; (800a85c <_dtoa_r+0x644>)
 800a550:	f00a 030f 	and.w	r3, sl, #15
 800a554:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a558:	ed93 7b00 	vldr	d7, [r3]
 800a55c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a560:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a564:	eeb0 8a47 	vmov.f32	s16, s14
 800a568:	eef0 8a67 	vmov.f32	s17, s15
 800a56c:	d016      	beq.n	800a59c <_dtoa_r+0x384>
 800a56e:	4bbc      	ldr	r3, [pc, #752]	; (800a860 <_dtoa_r+0x648>)
 800a570:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a578:	f7f6 f968 	bl	800084c <__aeabi_ddiv>
 800a57c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a580:	f007 070f 	and.w	r7, r7, #15
 800a584:	2503      	movs	r5, #3
 800a586:	4eb6      	ldr	r6, [pc, #728]	; (800a860 <_dtoa_r+0x648>)
 800a588:	b957      	cbnz	r7, 800a5a0 <_dtoa_r+0x388>
 800a58a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a58e:	ec53 2b18 	vmov	r2, r3, d8
 800a592:	f7f6 f95b 	bl	800084c <__aeabi_ddiv>
 800a596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a59a:	e029      	b.n	800a5f0 <_dtoa_r+0x3d8>
 800a59c:	2502      	movs	r5, #2
 800a59e:	e7f2      	b.n	800a586 <_dtoa_r+0x36e>
 800a5a0:	07f9      	lsls	r1, r7, #31
 800a5a2:	d508      	bpl.n	800a5b6 <_dtoa_r+0x39e>
 800a5a4:	ec51 0b18 	vmov	r0, r1, d8
 800a5a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5ac:	f7f6 f824 	bl	80005f8 <__aeabi_dmul>
 800a5b0:	ec41 0b18 	vmov	d8, r0, r1
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	107f      	asrs	r7, r7, #1
 800a5b8:	3608      	adds	r6, #8
 800a5ba:	e7e5      	b.n	800a588 <_dtoa_r+0x370>
 800a5bc:	f000 80a6 	beq.w	800a70c <_dtoa_r+0x4f4>
 800a5c0:	f1ca 0600 	rsb	r6, sl, #0
 800a5c4:	4ba5      	ldr	r3, [pc, #660]	; (800a85c <_dtoa_r+0x644>)
 800a5c6:	4fa6      	ldr	r7, [pc, #664]	; (800a860 <_dtoa_r+0x648>)
 800a5c8:	f006 020f 	and.w	r2, r6, #15
 800a5cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5d8:	f7f6 f80e 	bl	80005f8 <__aeabi_dmul>
 800a5dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5e0:	1136      	asrs	r6, r6, #4
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	2502      	movs	r5, #2
 800a5e6:	2e00      	cmp	r6, #0
 800a5e8:	f040 8085 	bne.w	800a6f6 <_dtoa_r+0x4de>
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1d2      	bne.n	800a596 <_dtoa_r+0x37e>
 800a5f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f000 808c 	beq.w	800a710 <_dtoa_r+0x4f8>
 800a5f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a5fc:	4b99      	ldr	r3, [pc, #612]	; (800a864 <_dtoa_r+0x64c>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	4630      	mov	r0, r6
 800a602:	4639      	mov	r1, r7
 800a604:	f7f6 fa6a 	bl	8000adc <__aeabi_dcmplt>
 800a608:	2800      	cmp	r0, #0
 800a60a:	f000 8081 	beq.w	800a710 <_dtoa_r+0x4f8>
 800a60e:	9b01      	ldr	r3, [sp, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d07d      	beq.n	800a710 <_dtoa_r+0x4f8>
 800a614:	f1b9 0f00 	cmp.w	r9, #0
 800a618:	dd3c      	ble.n	800a694 <_dtoa_r+0x47c>
 800a61a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a61e:	9307      	str	r3, [sp, #28]
 800a620:	2200      	movs	r2, #0
 800a622:	4b91      	ldr	r3, [pc, #580]	; (800a868 <_dtoa_r+0x650>)
 800a624:	4630      	mov	r0, r6
 800a626:	4639      	mov	r1, r7
 800a628:	f7f5 ffe6 	bl	80005f8 <__aeabi_dmul>
 800a62c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a630:	3501      	adds	r5, #1
 800a632:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a636:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a63a:	4628      	mov	r0, r5
 800a63c:	f7f5 ff72 	bl	8000524 <__aeabi_i2d>
 800a640:	4632      	mov	r2, r6
 800a642:	463b      	mov	r3, r7
 800a644:	f7f5 ffd8 	bl	80005f8 <__aeabi_dmul>
 800a648:	4b88      	ldr	r3, [pc, #544]	; (800a86c <_dtoa_r+0x654>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	f7f5 fe1e 	bl	800028c <__adddf3>
 800a650:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a658:	9303      	str	r3, [sp, #12]
 800a65a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d15c      	bne.n	800a71a <_dtoa_r+0x502>
 800a660:	4b83      	ldr	r3, [pc, #524]	; (800a870 <_dtoa_r+0x658>)
 800a662:	2200      	movs	r2, #0
 800a664:	4630      	mov	r0, r6
 800a666:	4639      	mov	r1, r7
 800a668:	f7f5 fe0e 	bl	8000288 <__aeabi_dsub>
 800a66c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a670:	4606      	mov	r6, r0
 800a672:	460f      	mov	r7, r1
 800a674:	f7f6 fa50 	bl	8000b18 <__aeabi_dcmpgt>
 800a678:	2800      	cmp	r0, #0
 800a67a:	f040 8296 	bne.w	800abaa <_dtoa_r+0x992>
 800a67e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a682:	4630      	mov	r0, r6
 800a684:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a688:	4639      	mov	r1, r7
 800a68a:	f7f6 fa27 	bl	8000adc <__aeabi_dcmplt>
 800a68e:	2800      	cmp	r0, #0
 800a690:	f040 8288 	bne.w	800aba4 <_dtoa_r+0x98c>
 800a694:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a698:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a69c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f2c0 8158 	blt.w	800a954 <_dtoa_r+0x73c>
 800a6a4:	f1ba 0f0e 	cmp.w	sl, #14
 800a6a8:	f300 8154 	bgt.w	800a954 <_dtoa_r+0x73c>
 800a6ac:	4b6b      	ldr	r3, [pc, #428]	; (800a85c <_dtoa_r+0x644>)
 800a6ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a6b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f280 80e3 	bge.w	800a884 <_dtoa_r+0x66c>
 800a6be:	9b01      	ldr	r3, [sp, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f300 80df 	bgt.w	800a884 <_dtoa_r+0x66c>
 800a6c6:	f040 826d 	bne.w	800aba4 <_dtoa_r+0x98c>
 800a6ca:	4b69      	ldr	r3, [pc, #420]	; (800a870 <_dtoa_r+0x658>)
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	f7f5 ff91 	bl	80005f8 <__aeabi_dmul>
 800a6d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6da:	f7f6 fa13 	bl	8000b04 <__aeabi_dcmpge>
 800a6de:	9e01      	ldr	r6, [sp, #4]
 800a6e0:	4637      	mov	r7, r6
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	f040 8243 	bne.w	800ab6e <_dtoa_r+0x956>
 800a6e8:	9d00      	ldr	r5, [sp, #0]
 800a6ea:	2331      	movs	r3, #49	; 0x31
 800a6ec:	f805 3b01 	strb.w	r3, [r5], #1
 800a6f0:	f10a 0a01 	add.w	sl, sl, #1
 800a6f4:	e23f      	b.n	800ab76 <_dtoa_r+0x95e>
 800a6f6:	07f2      	lsls	r2, r6, #31
 800a6f8:	d505      	bpl.n	800a706 <_dtoa_r+0x4ee>
 800a6fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6fe:	f7f5 ff7b 	bl	80005f8 <__aeabi_dmul>
 800a702:	3501      	adds	r5, #1
 800a704:	2301      	movs	r3, #1
 800a706:	1076      	asrs	r6, r6, #1
 800a708:	3708      	adds	r7, #8
 800a70a:	e76c      	b.n	800a5e6 <_dtoa_r+0x3ce>
 800a70c:	2502      	movs	r5, #2
 800a70e:	e76f      	b.n	800a5f0 <_dtoa_r+0x3d8>
 800a710:	9b01      	ldr	r3, [sp, #4]
 800a712:	f8cd a01c 	str.w	sl, [sp, #28]
 800a716:	930c      	str	r3, [sp, #48]	; 0x30
 800a718:	e78d      	b.n	800a636 <_dtoa_r+0x41e>
 800a71a:	9900      	ldr	r1, [sp, #0]
 800a71c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a71e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a720:	4b4e      	ldr	r3, [pc, #312]	; (800a85c <_dtoa_r+0x644>)
 800a722:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a726:	4401      	add	r1, r0
 800a728:	9102      	str	r1, [sp, #8]
 800a72a:	9908      	ldr	r1, [sp, #32]
 800a72c:	eeb0 8a47 	vmov.f32	s16, s14
 800a730:	eef0 8a67 	vmov.f32	s17, s15
 800a734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a738:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a73c:	2900      	cmp	r1, #0
 800a73e:	d045      	beq.n	800a7cc <_dtoa_r+0x5b4>
 800a740:	494c      	ldr	r1, [pc, #304]	; (800a874 <_dtoa_r+0x65c>)
 800a742:	2000      	movs	r0, #0
 800a744:	f7f6 f882 	bl	800084c <__aeabi_ddiv>
 800a748:	ec53 2b18 	vmov	r2, r3, d8
 800a74c:	f7f5 fd9c 	bl	8000288 <__aeabi_dsub>
 800a750:	9d00      	ldr	r5, [sp, #0]
 800a752:	ec41 0b18 	vmov	d8, r0, r1
 800a756:	4639      	mov	r1, r7
 800a758:	4630      	mov	r0, r6
 800a75a:	f7f6 f9fd 	bl	8000b58 <__aeabi_d2iz>
 800a75e:	900c      	str	r0, [sp, #48]	; 0x30
 800a760:	f7f5 fee0 	bl	8000524 <__aeabi_i2d>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	4630      	mov	r0, r6
 800a76a:	4639      	mov	r1, r7
 800a76c:	f7f5 fd8c 	bl	8000288 <__aeabi_dsub>
 800a770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a772:	3330      	adds	r3, #48	; 0x30
 800a774:	f805 3b01 	strb.w	r3, [r5], #1
 800a778:	ec53 2b18 	vmov	r2, r3, d8
 800a77c:	4606      	mov	r6, r0
 800a77e:	460f      	mov	r7, r1
 800a780:	f7f6 f9ac 	bl	8000adc <__aeabi_dcmplt>
 800a784:	2800      	cmp	r0, #0
 800a786:	d165      	bne.n	800a854 <_dtoa_r+0x63c>
 800a788:	4632      	mov	r2, r6
 800a78a:	463b      	mov	r3, r7
 800a78c:	4935      	ldr	r1, [pc, #212]	; (800a864 <_dtoa_r+0x64c>)
 800a78e:	2000      	movs	r0, #0
 800a790:	f7f5 fd7a 	bl	8000288 <__aeabi_dsub>
 800a794:	ec53 2b18 	vmov	r2, r3, d8
 800a798:	f7f6 f9a0 	bl	8000adc <__aeabi_dcmplt>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	f040 80b9 	bne.w	800a914 <_dtoa_r+0x6fc>
 800a7a2:	9b02      	ldr	r3, [sp, #8]
 800a7a4:	429d      	cmp	r5, r3
 800a7a6:	f43f af75 	beq.w	800a694 <_dtoa_r+0x47c>
 800a7aa:	4b2f      	ldr	r3, [pc, #188]	; (800a868 <_dtoa_r+0x650>)
 800a7ac:	ec51 0b18 	vmov	r0, r1, d8
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f7f5 ff21 	bl	80005f8 <__aeabi_dmul>
 800a7b6:	4b2c      	ldr	r3, [pc, #176]	; (800a868 <_dtoa_r+0x650>)
 800a7b8:	ec41 0b18 	vmov	d8, r0, r1
 800a7bc:	2200      	movs	r2, #0
 800a7be:	4630      	mov	r0, r6
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	f7f5 ff19 	bl	80005f8 <__aeabi_dmul>
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	460f      	mov	r7, r1
 800a7ca:	e7c4      	b.n	800a756 <_dtoa_r+0x53e>
 800a7cc:	ec51 0b17 	vmov	r0, r1, d7
 800a7d0:	f7f5 ff12 	bl	80005f8 <__aeabi_dmul>
 800a7d4:	9b02      	ldr	r3, [sp, #8]
 800a7d6:	9d00      	ldr	r5, [sp, #0]
 800a7d8:	930c      	str	r3, [sp, #48]	; 0x30
 800a7da:	ec41 0b18 	vmov	d8, r0, r1
 800a7de:	4639      	mov	r1, r7
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7f6 f9b9 	bl	8000b58 <__aeabi_d2iz>
 800a7e6:	9011      	str	r0, [sp, #68]	; 0x44
 800a7e8:	f7f5 fe9c 	bl	8000524 <__aeabi_i2d>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	f7f5 fd48 	bl	8000288 <__aeabi_dsub>
 800a7f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7fa:	3330      	adds	r3, #48	; 0x30
 800a7fc:	f805 3b01 	strb.w	r3, [r5], #1
 800a800:	9b02      	ldr	r3, [sp, #8]
 800a802:	429d      	cmp	r5, r3
 800a804:	4606      	mov	r6, r0
 800a806:	460f      	mov	r7, r1
 800a808:	f04f 0200 	mov.w	r2, #0
 800a80c:	d134      	bne.n	800a878 <_dtoa_r+0x660>
 800a80e:	4b19      	ldr	r3, [pc, #100]	; (800a874 <_dtoa_r+0x65c>)
 800a810:	ec51 0b18 	vmov	r0, r1, d8
 800a814:	f7f5 fd3a 	bl	800028c <__adddf3>
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	4630      	mov	r0, r6
 800a81e:	4639      	mov	r1, r7
 800a820:	f7f6 f97a 	bl	8000b18 <__aeabi_dcmpgt>
 800a824:	2800      	cmp	r0, #0
 800a826:	d175      	bne.n	800a914 <_dtoa_r+0x6fc>
 800a828:	ec53 2b18 	vmov	r2, r3, d8
 800a82c:	4911      	ldr	r1, [pc, #68]	; (800a874 <_dtoa_r+0x65c>)
 800a82e:	2000      	movs	r0, #0
 800a830:	f7f5 fd2a 	bl	8000288 <__aeabi_dsub>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4630      	mov	r0, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	f7f6 f94e 	bl	8000adc <__aeabi_dcmplt>
 800a840:	2800      	cmp	r0, #0
 800a842:	f43f af27 	beq.w	800a694 <_dtoa_r+0x47c>
 800a846:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a848:	1e6b      	subs	r3, r5, #1
 800a84a:	930c      	str	r3, [sp, #48]	; 0x30
 800a84c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a850:	2b30      	cmp	r3, #48	; 0x30
 800a852:	d0f8      	beq.n	800a846 <_dtoa_r+0x62e>
 800a854:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a858:	e04a      	b.n	800a8f0 <_dtoa_r+0x6d8>
 800a85a:	bf00      	nop
 800a85c:	0800f460 	.word	0x0800f460
 800a860:	0800f438 	.word	0x0800f438
 800a864:	3ff00000 	.word	0x3ff00000
 800a868:	40240000 	.word	0x40240000
 800a86c:	401c0000 	.word	0x401c0000
 800a870:	40140000 	.word	0x40140000
 800a874:	3fe00000 	.word	0x3fe00000
 800a878:	4baf      	ldr	r3, [pc, #700]	; (800ab38 <_dtoa_r+0x920>)
 800a87a:	f7f5 febd 	bl	80005f8 <__aeabi_dmul>
 800a87e:	4606      	mov	r6, r0
 800a880:	460f      	mov	r7, r1
 800a882:	e7ac      	b.n	800a7de <_dtoa_r+0x5c6>
 800a884:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a888:	9d00      	ldr	r5, [sp, #0]
 800a88a:	4642      	mov	r2, r8
 800a88c:	464b      	mov	r3, r9
 800a88e:	4630      	mov	r0, r6
 800a890:	4639      	mov	r1, r7
 800a892:	f7f5 ffdb 	bl	800084c <__aeabi_ddiv>
 800a896:	f7f6 f95f 	bl	8000b58 <__aeabi_d2iz>
 800a89a:	9002      	str	r0, [sp, #8]
 800a89c:	f7f5 fe42 	bl	8000524 <__aeabi_i2d>
 800a8a0:	4642      	mov	r2, r8
 800a8a2:	464b      	mov	r3, r9
 800a8a4:	f7f5 fea8 	bl	80005f8 <__aeabi_dmul>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	4639      	mov	r1, r7
 800a8b0:	f7f5 fcea 	bl	8000288 <__aeabi_dsub>
 800a8b4:	9e02      	ldr	r6, [sp, #8]
 800a8b6:	9f01      	ldr	r7, [sp, #4]
 800a8b8:	3630      	adds	r6, #48	; 0x30
 800a8ba:	f805 6b01 	strb.w	r6, [r5], #1
 800a8be:	9e00      	ldr	r6, [sp, #0]
 800a8c0:	1bae      	subs	r6, r5, r6
 800a8c2:	42b7      	cmp	r7, r6
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	d137      	bne.n	800a93a <_dtoa_r+0x722>
 800a8ca:	f7f5 fcdf 	bl	800028c <__adddf3>
 800a8ce:	4642      	mov	r2, r8
 800a8d0:	464b      	mov	r3, r9
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	460f      	mov	r7, r1
 800a8d6:	f7f6 f91f 	bl	8000b18 <__aeabi_dcmpgt>
 800a8da:	b9c8      	cbnz	r0, 800a910 <_dtoa_r+0x6f8>
 800a8dc:	4642      	mov	r2, r8
 800a8de:	464b      	mov	r3, r9
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	4639      	mov	r1, r7
 800a8e4:	f7f6 f8f0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8e8:	b110      	cbz	r0, 800a8f0 <_dtoa_r+0x6d8>
 800a8ea:	9b02      	ldr	r3, [sp, #8]
 800a8ec:	07d9      	lsls	r1, r3, #31
 800a8ee:	d40f      	bmi.n	800a910 <_dtoa_r+0x6f8>
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	4659      	mov	r1, fp
 800a8f4:	f000 fce8 	bl	800b2c8 <_Bfree>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	702b      	strb	r3, [r5, #0]
 800a8fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8fe:	f10a 0001 	add.w	r0, sl, #1
 800a902:	6018      	str	r0, [r3, #0]
 800a904:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a906:	2b00      	cmp	r3, #0
 800a908:	f43f acd8 	beq.w	800a2bc <_dtoa_r+0xa4>
 800a90c:	601d      	str	r5, [r3, #0]
 800a90e:	e4d5      	b.n	800a2bc <_dtoa_r+0xa4>
 800a910:	f8cd a01c 	str.w	sl, [sp, #28]
 800a914:	462b      	mov	r3, r5
 800a916:	461d      	mov	r5, r3
 800a918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a91c:	2a39      	cmp	r2, #57	; 0x39
 800a91e:	d108      	bne.n	800a932 <_dtoa_r+0x71a>
 800a920:	9a00      	ldr	r2, [sp, #0]
 800a922:	429a      	cmp	r2, r3
 800a924:	d1f7      	bne.n	800a916 <_dtoa_r+0x6fe>
 800a926:	9a07      	ldr	r2, [sp, #28]
 800a928:	9900      	ldr	r1, [sp, #0]
 800a92a:	3201      	adds	r2, #1
 800a92c:	9207      	str	r2, [sp, #28]
 800a92e:	2230      	movs	r2, #48	; 0x30
 800a930:	700a      	strb	r2, [r1, #0]
 800a932:	781a      	ldrb	r2, [r3, #0]
 800a934:	3201      	adds	r2, #1
 800a936:	701a      	strb	r2, [r3, #0]
 800a938:	e78c      	b.n	800a854 <_dtoa_r+0x63c>
 800a93a:	4b7f      	ldr	r3, [pc, #508]	; (800ab38 <_dtoa_r+0x920>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	f7f5 fe5b 	bl	80005f8 <__aeabi_dmul>
 800a942:	2200      	movs	r2, #0
 800a944:	2300      	movs	r3, #0
 800a946:	4606      	mov	r6, r0
 800a948:	460f      	mov	r7, r1
 800a94a:	f7f6 f8bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d09b      	beq.n	800a88a <_dtoa_r+0x672>
 800a952:	e7cd      	b.n	800a8f0 <_dtoa_r+0x6d8>
 800a954:	9a08      	ldr	r2, [sp, #32]
 800a956:	2a00      	cmp	r2, #0
 800a958:	f000 80c4 	beq.w	800aae4 <_dtoa_r+0x8cc>
 800a95c:	9a05      	ldr	r2, [sp, #20]
 800a95e:	2a01      	cmp	r2, #1
 800a960:	f300 80a8 	bgt.w	800aab4 <_dtoa_r+0x89c>
 800a964:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a966:	2a00      	cmp	r2, #0
 800a968:	f000 80a0 	beq.w	800aaac <_dtoa_r+0x894>
 800a96c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a970:	9e06      	ldr	r6, [sp, #24]
 800a972:	4645      	mov	r5, r8
 800a974:	9a04      	ldr	r2, [sp, #16]
 800a976:	2101      	movs	r1, #1
 800a978:	441a      	add	r2, r3
 800a97a:	4620      	mov	r0, r4
 800a97c:	4498      	add	r8, r3
 800a97e:	9204      	str	r2, [sp, #16]
 800a980:	f000 fd5e 	bl	800b440 <__i2b>
 800a984:	4607      	mov	r7, r0
 800a986:	2d00      	cmp	r5, #0
 800a988:	dd0b      	ble.n	800a9a2 <_dtoa_r+0x78a>
 800a98a:	9b04      	ldr	r3, [sp, #16]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	dd08      	ble.n	800a9a2 <_dtoa_r+0x78a>
 800a990:	42ab      	cmp	r3, r5
 800a992:	9a04      	ldr	r2, [sp, #16]
 800a994:	bfa8      	it	ge
 800a996:	462b      	movge	r3, r5
 800a998:	eba8 0803 	sub.w	r8, r8, r3
 800a99c:	1aed      	subs	r5, r5, r3
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	9304      	str	r3, [sp, #16]
 800a9a2:	9b06      	ldr	r3, [sp, #24]
 800a9a4:	b1fb      	cbz	r3, 800a9e6 <_dtoa_r+0x7ce>
 800a9a6:	9b08      	ldr	r3, [sp, #32]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 809f 	beq.w	800aaec <_dtoa_r+0x8d4>
 800a9ae:	2e00      	cmp	r6, #0
 800a9b0:	dd11      	ble.n	800a9d6 <_dtoa_r+0x7be>
 800a9b2:	4639      	mov	r1, r7
 800a9b4:	4632      	mov	r2, r6
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 fdfe 	bl	800b5b8 <__pow5mult>
 800a9bc:	465a      	mov	r2, fp
 800a9be:	4601      	mov	r1, r0
 800a9c0:	4607      	mov	r7, r0
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 fd52 	bl	800b46c <__multiply>
 800a9c8:	4659      	mov	r1, fp
 800a9ca:	9007      	str	r0, [sp, #28]
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f000 fc7b 	bl	800b2c8 <_Bfree>
 800a9d2:	9b07      	ldr	r3, [sp, #28]
 800a9d4:	469b      	mov	fp, r3
 800a9d6:	9b06      	ldr	r3, [sp, #24]
 800a9d8:	1b9a      	subs	r2, r3, r6
 800a9da:	d004      	beq.n	800a9e6 <_dtoa_r+0x7ce>
 800a9dc:	4659      	mov	r1, fp
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f000 fdea 	bl	800b5b8 <__pow5mult>
 800a9e4:	4683      	mov	fp, r0
 800a9e6:	2101      	movs	r1, #1
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 fd29 	bl	800b440 <__i2b>
 800a9ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	dd7c      	ble.n	800aaf0 <_dtoa_r+0x8d8>
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	4601      	mov	r1, r0
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 fddc 	bl	800b5b8 <__pow5mult>
 800aa00:	9b05      	ldr	r3, [sp, #20]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	4606      	mov	r6, r0
 800aa06:	dd76      	ble.n	800aaf6 <_dtoa_r+0x8de>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	9306      	str	r3, [sp, #24]
 800aa0c:	6933      	ldr	r3, [r6, #16]
 800aa0e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa12:	6918      	ldr	r0, [r3, #16]
 800aa14:	f000 fcc4 	bl	800b3a0 <__hi0bits>
 800aa18:	f1c0 0020 	rsb	r0, r0, #32
 800aa1c:	9b04      	ldr	r3, [sp, #16]
 800aa1e:	4418      	add	r0, r3
 800aa20:	f010 001f 	ands.w	r0, r0, #31
 800aa24:	f000 8086 	beq.w	800ab34 <_dtoa_r+0x91c>
 800aa28:	f1c0 0320 	rsb	r3, r0, #32
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	dd7f      	ble.n	800ab30 <_dtoa_r+0x918>
 800aa30:	f1c0 001c 	rsb	r0, r0, #28
 800aa34:	9b04      	ldr	r3, [sp, #16]
 800aa36:	4403      	add	r3, r0
 800aa38:	4480      	add	r8, r0
 800aa3a:	4405      	add	r5, r0
 800aa3c:	9304      	str	r3, [sp, #16]
 800aa3e:	f1b8 0f00 	cmp.w	r8, #0
 800aa42:	dd05      	ble.n	800aa50 <_dtoa_r+0x838>
 800aa44:	4659      	mov	r1, fp
 800aa46:	4642      	mov	r2, r8
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f000 fe0f 	bl	800b66c <__lshift>
 800aa4e:	4683      	mov	fp, r0
 800aa50:	9b04      	ldr	r3, [sp, #16]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	dd05      	ble.n	800aa62 <_dtoa_r+0x84a>
 800aa56:	4631      	mov	r1, r6
 800aa58:	461a      	mov	r2, r3
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f000 fe06 	bl	800b66c <__lshift>
 800aa60:	4606      	mov	r6, r0
 800aa62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d069      	beq.n	800ab3c <_dtoa_r+0x924>
 800aa68:	4631      	mov	r1, r6
 800aa6a:	4658      	mov	r0, fp
 800aa6c:	f000 fe6a 	bl	800b744 <__mcmp>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	da63      	bge.n	800ab3c <_dtoa_r+0x924>
 800aa74:	2300      	movs	r3, #0
 800aa76:	4659      	mov	r1, fp
 800aa78:	220a      	movs	r2, #10
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 fc46 	bl	800b30c <__multadd>
 800aa80:	9b08      	ldr	r3, [sp, #32]
 800aa82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800aa86:	4683      	mov	fp, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f000 818f 	beq.w	800adac <_dtoa_r+0xb94>
 800aa8e:	4639      	mov	r1, r7
 800aa90:	2300      	movs	r3, #0
 800aa92:	220a      	movs	r2, #10
 800aa94:	4620      	mov	r0, r4
 800aa96:	f000 fc39 	bl	800b30c <__multadd>
 800aa9a:	f1b9 0f00 	cmp.w	r9, #0
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	f300 808e 	bgt.w	800abc0 <_dtoa_r+0x9a8>
 800aaa4:	9b05      	ldr	r3, [sp, #20]
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	dc50      	bgt.n	800ab4c <_dtoa_r+0x934>
 800aaaa:	e089      	b.n	800abc0 <_dtoa_r+0x9a8>
 800aaac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aaae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aab2:	e75d      	b.n	800a970 <_dtoa_r+0x758>
 800aab4:	9b01      	ldr	r3, [sp, #4]
 800aab6:	1e5e      	subs	r6, r3, #1
 800aab8:	9b06      	ldr	r3, [sp, #24]
 800aaba:	42b3      	cmp	r3, r6
 800aabc:	bfbf      	itttt	lt
 800aabe:	9b06      	ldrlt	r3, [sp, #24]
 800aac0:	9606      	strlt	r6, [sp, #24]
 800aac2:	1af2      	sublt	r2, r6, r3
 800aac4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800aac6:	bfb6      	itet	lt
 800aac8:	189b      	addlt	r3, r3, r2
 800aaca:	1b9e      	subge	r6, r3, r6
 800aacc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800aace:	9b01      	ldr	r3, [sp, #4]
 800aad0:	bfb8      	it	lt
 800aad2:	2600      	movlt	r6, #0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bfb5      	itete	lt
 800aad8:	eba8 0503 	sublt.w	r5, r8, r3
 800aadc:	9b01      	ldrge	r3, [sp, #4]
 800aade:	2300      	movlt	r3, #0
 800aae0:	4645      	movge	r5, r8
 800aae2:	e747      	b.n	800a974 <_dtoa_r+0x75c>
 800aae4:	9e06      	ldr	r6, [sp, #24]
 800aae6:	9f08      	ldr	r7, [sp, #32]
 800aae8:	4645      	mov	r5, r8
 800aaea:	e74c      	b.n	800a986 <_dtoa_r+0x76e>
 800aaec:	9a06      	ldr	r2, [sp, #24]
 800aaee:	e775      	b.n	800a9dc <_dtoa_r+0x7c4>
 800aaf0:	9b05      	ldr	r3, [sp, #20]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	dc18      	bgt.n	800ab28 <_dtoa_r+0x910>
 800aaf6:	9b02      	ldr	r3, [sp, #8]
 800aaf8:	b9b3      	cbnz	r3, 800ab28 <_dtoa_r+0x910>
 800aafa:	9b03      	ldr	r3, [sp, #12]
 800aafc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab00:	b9a3      	cbnz	r3, 800ab2c <_dtoa_r+0x914>
 800ab02:	9b03      	ldr	r3, [sp, #12]
 800ab04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab08:	0d1b      	lsrs	r3, r3, #20
 800ab0a:	051b      	lsls	r3, r3, #20
 800ab0c:	b12b      	cbz	r3, 800ab1a <_dtoa_r+0x902>
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	3301      	adds	r3, #1
 800ab12:	9304      	str	r3, [sp, #16]
 800ab14:	f108 0801 	add.w	r8, r8, #1
 800ab18:	2301      	movs	r3, #1
 800ab1a:	9306      	str	r3, [sp, #24]
 800ab1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f47f af74 	bne.w	800aa0c <_dtoa_r+0x7f4>
 800ab24:	2001      	movs	r0, #1
 800ab26:	e779      	b.n	800aa1c <_dtoa_r+0x804>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e7f6      	b.n	800ab1a <_dtoa_r+0x902>
 800ab2c:	9b02      	ldr	r3, [sp, #8]
 800ab2e:	e7f4      	b.n	800ab1a <_dtoa_r+0x902>
 800ab30:	d085      	beq.n	800aa3e <_dtoa_r+0x826>
 800ab32:	4618      	mov	r0, r3
 800ab34:	301c      	adds	r0, #28
 800ab36:	e77d      	b.n	800aa34 <_dtoa_r+0x81c>
 800ab38:	40240000 	.word	0x40240000
 800ab3c:	9b01      	ldr	r3, [sp, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	dc38      	bgt.n	800abb4 <_dtoa_r+0x99c>
 800ab42:	9b05      	ldr	r3, [sp, #20]
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	dd35      	ble.n	800abb4 <_dtoa_r+0x99c>
 800ab48:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ab4c:	f1b9 0f00 	cmp.w	r9, #0
 800ab50:	d10d      	bne.n	800ab6e <_dtoa_r+0x956>
 800ab52:	4631      	mov	r1, r6
 800ab54:	464b      	mov	r3, r9
 800ab56:	2205      	movs	r2, #5
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 fbd7 	bl	800b30c <__multadd>
 800ab5e:	4601      	mov	r1, r0
 800ab60:	4606      	mov	r6, r0
 800ab62:	4658      	mov	r0, fp
 800ab64:	f000 fdee 	bl	800b744 <__mcmp>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	f73f adbd 	bgt.w	800a6e8 <_dtoa_r+0x4d0>
 800ab6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab70:	9d00      	ldr	r5, [sp, #0]
 800ab72:	ea6f 0a03 	mvn.w	sl, r3
 800ab76:	f04f 0800 	mov.w	r8, #0
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f000 fba3 	bl	800b2c8 <_Bfree>
 800ab82:	2f00      	cmp	r7, #0
 800ab84:	f43f aeb4 	beq.w	800a8f0 <_dtoa_r+0x6d8>
 800ab88:	f1b8 0f00 	cmp.w	r8, #0
 800ab8c:	d005      	beq.n	800ab9a <_dtoa_r+0x982>
 800ab8e:	45b8      	cmp	r8, r7
 800ab90:	d003      	beq.n	800ab9a <_dtoa_r+0x982>
 800ab92:	4641      	mov	r1, r8
 800ab94:	4620      	mov	r0, r4
 800ab96:	f000 fb97 	bl	800b2c8 <_Bfree>
 800ab9a:	4639      	mov	r1, r7
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 fb93 	bl	800b2c8 <_Bfree>
 800aba2:	e6a5      	b.n	800a8f0 <_dtoa_r+0x6d8>
 800aba4:	2600      	movs	r6, #0
 800aba6:	4637      	mov	r7, r6
 800aba8:	e7e1      	b.n	800ab6e <_dtoa_r+0x956>
 800abaa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800abac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800abb0:	4637      	mov	r7, r6
 800abb2:	e599      	b.n	800a6e8 <_dtoa_r+0x4d0>
 800abb4:	9b08      	ldr	r3, [sp, #32]
 800abb6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f000 80fd 	beq.w	800adba <_dtoa_r+0xba2>
 800abc0:	2d00      	cmp	r5, #0
 800abc2:	dd05      	ble.n	800abd0 <_dtoa_r+0x9b8>
 800abc4:	4639      	mov	r1, r7
 800abc6:	462a      	mov	r2, r5
 800abc8:	4620      	mov	r0, r4
 800abca:	f000 fd4f 	bl	800b66c <__lshift>
 800abce:	4607      	mov	r7, r0
 800abd0:	9b06      	ldr	r3, [sp, #24]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d05c      	beq.n	800ac90 <_dtoa_r+0xa78>
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 fb35 	bl	800b248 <_Balloc>
 800abde:	4605      	mov	r5, r0
 800abe0:	b928      	cbnz	r0, 800abee <_dtoa_r+0x9d6>
 800abe2:	4b80      	ldr	r3, [pc, #512]	; (800ade4 <_dtoa_r+0xbcc>)
 800abe4:	4602      	mov	r2, r0
 800abe6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abea:	f7ff bb2e 	b.w	800a24a <_dtoa_r+0x32>
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	3202      	adds	r2, #2
 800abf2:	0092      	lsls	r2, r2, #2
 800abf4:	f107 010c 	add.w	r1, r7, #12
 800abf8:	300c      	adds	r0, #12
 800abfa:	f7fe fd21 	bl	8009640 <memcpy>
 800abfe:	2201      	movs	r2, #1
 800ac00:	4629      	mov	r1, r5
 800ac02:	4620      	mov	r0, r4
 800ac04:	f000 fd32 	bl	800b66c <__lshift>
 800ac08:	9b00      	ldr	r3, [sp, #0]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	9b00      	ldr	r3, [sp, #0]
 800ac10:	444b      	add	r3, r9
 800ac12:	9307      	str	r3, [sp, #28]
 800ac14:	9b02      	ldr	r3, [sp, #8]
 800ac16:	f003 0301 	and.w	r3, r3, #1
 800ac1a:	46b8      	mov	r8, r7
 800ac1c:	9306      	str	r3, [sp, #24]
 800ac1e:	4607      	mov	r7, r0
 800ac20:	9b01      	ldr	r3, [sp, #4]
 800ac22:	4631      	mov	r1, r6
 800ac24:	3b01      	subs	r3, #1
 800ac26:	4658      	mov	r0, fp
 800ac28:	9302      	str	r3, [sp, #8]
 800ac2a:	f7ff fa69 	bl	800a100 <quorem>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	3330      	adds	r3, #48	; 0x30
 800ac32:	9004      	str	r0, [sp, #16]
 800ac34:	4641      	mov	r1, r8
 800ac36:	4658      	mov	r0, fp
 800ac38:	9308      	str	r3, [sp, #32]
 800ac3a:	f000 fd83 	bl	800b744 <__mcmp>
 800ac3e:	463a      	mov	r2, r7
 800ac40:	4681      	mov	r9, r0
 800ac42:	4631      	mov	r1, r6
 800ac44:	4620      	mov	r0, r4
 800ac46:	f000 fd99 	bl	800b77c <__mdiff>
 800ac4a:	68c2      	ldr	r2, [r0, #12]
 800ac4c:	9b08      	ldr	r3, [sp, #32]
 800ac4e:	4605      	mov	r5, r0
 800ac50:	bb02      	cbnz	r2, 800ac94 <_dtoa_r+0xa7c>
 800ac52:	4601      	mov	r1, r0
 800ac54:	4658      	mov	r0, fp
 800ac56:	f000 fd75 	bl	800b744 <__mcmp>
 800ac5a:	9b08      	ldr	r3, [sp, #32]
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	4629      	mov	r1, r5
 800ac60:	4620      	mov	r0, r4
 800ac62:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ac66:	f000 fb2f 	bl	800b2c8 <_Bfree>
 800ac6a:	9b05      	ldr	r3, [sp, #20]
 800ac6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac6e:	9d01      	ldr	r5, [sp, #4]
 800ac70:	ea43 0102 	orr.w	r1, r3, r2
 800ac74:	9b06      	ldr	r3, [sp, #24]
 800ac76:	430b      	orrs	r3, r1
 800ac78:	9b08      	ldr	r3, [sp, #32]
 800ac7a:	d10d      	bne.n	800ac98 <_dtoa_r+0xa80>
 800ac7c:	2b39      	cmp	r3, #57	; 0x39
 800ac7e:	d029      	beq.n	800acd4 <_dtoa_r+0xabc>
 800ac80:	f1b9 0f00 	cmp.w	r9, #0
 800ac84:	dd01      	ble.n	800ac8a <_dtoa_r+0xa72>
 800ac86:	9b04      	ldr	r3, [sp, #16]
 800ac88:	3331      	adds	r3, #49	; 0x31
 800ac8a:	9a02      	ldr	r2, [sp, #8]
 800ac8c:	7013      	strb	r3, [r2, #0]
 800ac8e:	e774      	b.n	800ab7a <_dtoa_r+0x962>
 800ac90:	4638      	mov	r0, r7
 800ac92:	e7b9      	b.n	800ac08 <_dtoa_r+0x9f0>
 800ac94:	2201      	movs	r2, #1
 800ac96:	e7e2      	b.n	800ac5e <_dtoa_r+0xa46>
 800ac98:	f1b9 0f00 	cmp.w	r9, #0
 800ac9c:	db06      	blt.n	800acac <_dtoa_r+0xa94>
 800ac9e:	9905      	ldr	r1, [sp, #20]
 800aca0:	ea41 0909 	orr.w	r9, r1, r9
 800aca4:	9906      	ldr	r1, [sp, #24]
 800aca6:	ea59 0101 	orrs.w	r1, r9, r1
 800acaa:	d120      	bne.n	800acee <_dtoa_r+0xad6>
 800acac:	2a00      	cmp	r2, #0
 800acae:	ddec      	ble.n	800ac8a <_dtoa_r+0xa72>
 800acb0:	4659      	mov	r1, fp
 800acb2:	2201      	movs	r2, #1
 800acb4:	4620      	mov	r0, r4
 800acb6:	9301      	str	r3, [sp, #4]
 800acb8:	f000 fcd8 	bl	800b66c <__lshift>
 800acbc:	4631      	mov	r1, r6
 800acbe:	4683      	mov	fp, r0
 800acc0:	f000 fd40 	bl	800b744 <__mcmp>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	9b01      	ldr	r3, [sp, #4]
 800acc8:	dc02      	bgt.n	800acd0 <_dtoa_r+0xab8>
 800acca:	d1de      	bne.n	800ac8a <_dtoa_r+0xa72>
 800accc:	07da      	lsls	r2, r3, #31
 800acce:	d5dc      	bpl.n	800ac8a <_dtoa_r+0xa72>
 800acd0:	2b39      	cmp	r3, #57	; 0x39
 800acd2:	d1d8      	bne.n	800ac86 <_dtoa_r+0xa6e>
 800acd4:	9a02      	ldr	r2, [sp, #8]
 800acd6:	2339      	movs	r3, #57	; 0x39
 800acd8:	7013      	strb	r3, [r2, #0]
 800acda:	462b      	mov	r3, r5
 800acdc:	461d      	mov	r5, r3
 800acde:	3b01      	subs	r3, #1
 800ace0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ace4:	2a39      	cmp	r2, #57	; 0x39
 800ace6:	d050      	beq.n	800ad8a <_dtoa_r+0xb72>
 800ace8:	3201      	adds	r2, #1
 800acea:	701a      	strb	r2, [r3, #0]
 800acec:	e745      	b.n	800ab7a <_dtoa_r+0x962>
 800acee:	2a00      	cmp	r2, #0
 800acf0:	dd03      	ble.n	800acfa <_dtoa_r+0xae2>
 800acf2:	2b39      	cmp	r3, #57	; 0x39
 800acf4:	d0ee      	beq.n	800acd4 <_dtoa_r+0xabc>
 800acf6:	3301      	adds	r3, #1
 800acf8:	e7c7      	b.n	800ac8a <_dtoa_r+0xa72>
 800acfa:	9a01      	ldr	r2, [sp, #4]
 800acfc:	9907      	ldr	r1, [sp, #28]
 800acfe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad02:	428a      	cmp	r2, r1
 800ad04:	d02a      	beq.n	800ad5c <_dtoa_r+0xb44>
 800ad06:	4659      	mov	r1, fp
 800ad08:	2300      	movs	r3, #0
 800ad0a:	220a      	movs	r2, #10
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f000 fafd 	bl	800b30c <__multadd>
 800ad12:	45b8      	cmp	r8, r7
 800ad14:	4683      	mov	fp, r0
 800ad16:	f04f 0300 	mov.w	r3, #0
 800ad1a:	f04f 020a 	mov.w	r2, #10
 800ad1e:	4641      	mov	r1, r8
 800ad20:	4620      	mov	r0, r4
 800ad22:	d107      	bne.n	800ad34 <_dtoa_r+0xb1c>
 800ad24:	f000 faf2 	bl	800b30c <__multadd>
 800ad28:	4680      	mov	r8, r0
 800ad2a:	4607      	mov	r7, r0
 800ad2c:	9b01      	ldr	r3, [sp, #4]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	9301      	str	r3, [sp, #4]
 800ad32:	e775      	b.n	800ac20 <_dtoa_r+0xa08>
 800ad34:	f000 faea 	bl	800b30c <__multadd>
 800ad38:	4639      	mov	r1, r7
 800ad3a:	4680      	mov	r8, r0
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	220a      	movs	r2, #10
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 fae3 	bl	800b30c <__multadd>
 800ad46:	4607      	mov	r7, r0
 800ad48:	e7f0      	b.n	800ad2c <_dtoa_r+0xb14>
 800ad4a:	f1b9 0f00 	cmp.w	r9, #0
 800ad4e:	9a00      	ldr	r2, [sp, #0]
 800ad50:	bfcc      	ite	gt
 800ad52:	464d      	movgt	r5, r9
 800ad54:	2501      	movle	r5, #1
 800ad56:	4415      	add	r5, r2
 800ad58:	f04f 0800 	mov.w	r8, #0
 800ad5c:	4659      	mov	r1, fp
 800ad5e:	2201      	movs	r2, #1
 800ad60:	4620      	mov	r0, r4
 800ad62:	9301      	str	r3, [sp, #4]
 800ad64:	f000 fc82 	bl	800b66c <__lshift>
 800ad68:	4631      	mov	r1, r6
 800ad6a:	4683      	mov	fp, r0
 800ad6c:	f000 fcea 	bl	800b744 <__mcmp>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	dcb2      	bgt.n	800acda <_dtoa_r+0xac2>
 800ad74:	d102      	bne.n	800ad7c <_dtoa_r+0xb64>
 800ad76:	9b01      	ldr	r3, [sp, #4]
 800ad78:	07db      	lsls	r3, r3, #31
 800ad7a:	d4ae      	bmi.n	800acda <_dtoa_r+0xac2>
 800ad7c:	462b      	mov	r3, r5
 800ad7e:	461d      	mov	r5, r3
 800ad80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad84:	2a30      	cmp	r2, #48	; 0x30
 800ad86:	d0fa      	beq.n	800ad7e <_dtoa_r+0xb66>
 800ad88:	e6f7      	b.n	800ab7a <_dtoa_r+0x962>
 800ad8a:	9a00      	ldr	r2, [sp, #0]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d1a5      	bne.n	800acdc <_dtoa_r+0xac4>
 800ad90:	f10a 0a01 	add.w	sl, sl, #1
 800ad94:	2331      	movs	r3, #49	; 0x31
 800ad96:	e779      	b.n	800ac8c <_dtoa_r+0xa74>
 800ad98:	4b13      	ldr	r3, [pc, #76]	; (800ade8 <_dtoa_r+0xbd0>)
 800ad9a:	f7ff baaf 	b.w	800a2fc <_dtoa_r+0xe4>
 800ad9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f47f aa86 	bne.w	800a2b2 <_dtoa_r+0x9a>
 800ada6:	4b11      	ldr	r3, [pc, #68]	; (800adec <_dtoa_r+0xbd4>)
 800ada8:	f7ff baa8 	b.w	800a2fc <_dtoa_r+0xe4>
 800adac:	f1b9 0f00 	cmp.w	r9, #0
 800adb0:	dc03      	bgt.n	800adba <_dtoa_r+0xba2>
 800adb2:	9b05      	ldr	r3, [sp, #20]
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	f73f aec9 	bgt.w	800ab4c <_dtoa_r+0x934>
 800adba:	9d00      	ldr	r5, [sp, #0]
 800adbc:	4631      	mov	r1, r6
 800adbe:	4658      	mov	r0, fp
 800adc0:	f7ff f99e 	bl	800a100 <quorem>
 800adc4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800adc8:	f805 3b01 	strb.w	r3, [r5], #1
 800adcc:	9a00      	ldr	r2, [sp, #0]
 800adce:	1aaa      	subs	r2, r5, r2
 800add0:	4591      	cmp	r9, r2
 800add2:	ddba      	ble.n	800ad4a <_dtoa_r+0xb32>
 800add4:	4659      	mov	r1, fp
 800add6:	2300      	movs	r3, #0
 800add8:	220a      	movs	r2, #10
 800adda:	4620      	mov	r0, r4
 800addc:	f000 fa96 	bl	800b30c <__multadd>
 800ade0:	4683      	mov	fp, r0
 800ade2:	e7eb      	b.n	800adbc <_dtoa_r+0xba4>
 800ade4:	0800f367 	.word	0x0800f367
 800ade8:	0800f2c0 	.word	0x0800f2c0
 800adec:	0800f2e4 	.word	0x0800f2e4

0800adf0 <__sflush_r>:
 800adf0:	898a      	ldrh	r2, [r1, #12]
 800adf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf6:	4605      	mov	r5, r0
 800adf8:	0710      	lsls	r0, r2, #28
 800adfa:	460c      	mov	r4, r1
 800adfc:	d458      	bmi.n	800aeb0 <__sflush_r+0xc0>
 800adfe:	684b      	ldr	r3, [r1, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	dc05      	bgt.n	800ae10 <__sflush_r+0x20>
 800ae04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	dc02      	bgt.n	800ae10 <__sflush_r+0x20>
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae12:	2e00      	cmp	r6, #0
 800ae14:	d0f9      	beq.n	800ae0a <__sflush_r+0x1a>
 800ae16:	2300      	movs	r3, #0
 800ae18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae1c:	682f      	ldr	r7, [r5, #0]
 800ae1e:	602b      	str	r3, [r5, #0]
 800ae20:	d032      	beq.n	800ae88 <__sflush_r+0x98>
 800ae22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	075a      	lsls	r2, r3, #29
 800ae28:	d505      	bpl.n	800ae36 <__sflush_r+0x46>
 800ae2a:	6863      	ldr	r3, [r4, #4]
 800ae2c:	1ac0      	subs	r0, r0, r3
 800ae2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae30:	b10b      	cbz	r3, 800ae36 <__sflush_r+0x46>
 800ae32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae34:	1ac0      	subs	r0, r0, r3
 800ae36:	2300      	movs	r3, #0
 800ae38:	4602      	mov	r2, r0
 800ae3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae3c:	6a21      	ldr	r1, [r4, #32]
 800ae3e:	4628      	mov	r0, r5
 800ae40:	47b0      	blx	r6
 800ae42:	1c43      	adds	r3, r0, #1
 800ae44:	89a3      	ldrh	r3, [r4, #12]
 800ae46:	d106      	bne.n	800ae56 <__sflush_r+0x66>
 800ae48:	6829      	ldr	r1, [r5, #0]
 800ae4a:	291d      	cmp	r1, #29
 800ae4c:	d82c      	bhi.n	800aea8 <__sflush_r+0xb8>
 800ae4e:	4a2a      	ldr	r2, [pc, #168]	; (800aef8 <__sflush_r+0x108>)
 800ae50:	40ca      	lsrs	r2, r1
 800ae52:	07d6      	lsls	r6, r2, #31
 800ae54:	d528      	bpl.n	800aea8 <__sflush_r+0xb8>
 800ae56:	2200      	movs	r2, #0
 800ae58:	6062      	str	r2, [r4, #4]
 800ae5a:	04d9      	lsls	r1, r3, #19
 800ae5c:	6922      	ldr	r2, [r4, #16]
 800ae5e:	6022      	str	r2, [r4, #0]
 800ae60:	d504      	bpl.n	800ae6c <__sflush_r+0x7c>
 800ae62:	1c42      	adds	r2, r0, #1
 800ae64:	d101      	bne.n	800ae6a <__sflush_r+0x7a>
 800ae66:	682b      	ldr	r3, [r5, #0]
 800ae68:	b903      	cbnz	r3, 800ae6c <__sflush_r+0x7c>
 800ae6a:	6560      	str	r0, [r4, #84]	; 0x54
 800ae6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae6e:	602f      	str	r7, [r5, #0]
 800ae70:	2900      	cmp	r1, #0
 800ae72:	d0ca      	beq.n	800ae0a <__sflush_r+0x1a>
 800ae74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae78:	4299      	cmp	r1, r3
 800ae7a:	d002      	beq.n	800ae82 <__sflush_r+0x92>
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	f000 fd71 	bl	800b964 <_free_r>
 800ae82:	2000      	movs	r0, #0
 800ae84:	6360      	str	r0, [r4, #52]	; 0x34
 800ae86:	e7c1      	b.n	800ae0c <__sflush_r+0x1c>
 800ae88:	6a21      	ldr	r1, [r4, #32]
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	47b0      	blx	r6
 800ae90:	1c41      	adds	r1, r0, #1
 800ae92:	d1c7      	bne.n	800ae24 <__sflush_r+0x34>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d0c4      	beq.n	800ae24 <__sflush_r+0x34>
 800ae9a:	2b1d      	cmp	r3, #29
 800ae9c:	d001      	beq.n	800aea2 <__sflush_r+0xb2>
 800ae9e:	2b16      	cmp	r3, #22
 800aea0:	d101      	bne.n	800aea6 <__sflush_r+0xb6>
 800aea2:	602f      	str	r7, [r5, #0]
 800aea4:	e7b1      	b.n	800ae0a <__sflush_r+0x1a>
 800aea6:	89a3      	ldrh	r3, [r4, #12]
 800aea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeac:	81a3      	strh	r3, [r4, #12]
 800aeae:	e7ad      	b.n	800ae0c <__sflush_r+0x1c>
 800aeb0:	690f      	ldr	r7, [r1, #16]
 800aeb2:	2f00      	cmp	r7, #0
 800aeb4:	d0a9      	beq.n	800ae0a <__sflush_r+0x1a>
 800aeb6:	0793      	lsls	r3, r2, #30
 800aeb8:	680e      	ldr	r6, [r1, #0]
 800aeba:	bf08      	it	eq
 800aebc:	694b      	ldreq	r3, [r1, #20]
 800aebe:	600f      	str	r7, [r1, #0]
 800aec0:	bf18      	it	ne
 800aec2:	2300      	movne	r3, #0
 800aec4:	eba6 0807 	sub.w	r8, r6, r7
 800aec8:	608b      	str	r3, [r1, #8]
 800aeca:	f1b8 0f00 	cmp.w	r8, #0
 800aece:	dd9c      	ble.n	800ae0a <__sflush_r+0x1a>
 800aed0:	6a21      	ldr	r1, [r4, #32]
 800aed2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aed4:	4643      	mov	r3, r8
 800aed6:	463a      	mov	r2, r7
 800aed8:	4628      	mov	r0, r5
 800aeda:	47b0      	blx	r6
 800aedc:	2800      	cmp	r0, #0
 800aede:	dc06      	bgt.n	800aeee <__sflush_r+0xfe>
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aee6:	81a3      	strh	r3, [r4, #12]
 800aee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeec:	e78e      	b.n	800ae0c <__sflush_r+0x1c>
 800aeee:	4407      	add	r7, r0
 800aef0:	eba8 0800 	sub.w	r8, r8, r0
 800aef4:	e7e9      	b.n	800aeca <__sflush_r+0xda>
 800aef6:	bf00      	nop
 800aef8:	20400001 	.word	0x20400001

0800aefc <_fflush_r>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	690b      	ldr	r3, [r1, #16]
 800af00:	4605      	mov	r5, r0
 800af02:	460c      	mov	r4, r1
 800af04:	b913      	cbnz	r3, 800af0c <_fflush_r+0x10>
 800af06:	2500      	movs	r5, #0
 800af08:	4628      	mov	r0, r5
 800af0a:	bd38      	pop	{r3, r4, r5, pc}
 800af0c:	b118      	cbz	r0, 800af16 <_fflush_r+0x1a>
 800af0e:	6983      	ldr	r3, [r0, #24]
 800af10:	b90b      	cbnz	r3, 800af16 <_fflush_r+0x1a>
 800af12:	f000 f887 	bl	800b024 <__sinit>
 800af16:	4b14      	ldr	r3, [pc, #80]	; (800af68 <_fflush_r+0x6c>)
 800af18:	429c      	cmp	r4, r3
 800af1a:	d11b      	bne.n	800af54 <_fflush_r+0x58>
 800af1c:	686c      	ldr	r4, [r5, #4]
 800af1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d0ef      	beq.n	800af06 <_fflush_r+0xa>
 800af26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af28:	07d0      	lsls	r0, r2, #31
 800af2a:	d404      	bmi.n	800af36 <_fflush_r+0x3a>
 800af2c:	0599      	lsls	r1, r3, #22
 800af2e:	d402      	bmi.n	800af36 <_fflush_r+0x3a>
 800af30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af32:	f000 f91a 	bl	800b16a <__retarget_lock_acquire_recursive>
 800af36:	4628      	mov	r0, r5
 800af38:	4621      	mov	r1, r4
 800af3a:	f7ff ff59 	bl	800adf0 <__sflush_r>
 800af3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af40:	07da      	lsls	r2, r3, #31
 800af42:	4605      	mov	r5, r0
 800af44:	d4e0      	bmi.n	800af08 <_fflush_r+0xc>
 800af46:	89a3      	ldrh	r3, [r4, #12]
 800af48:	059b      	lsls	r3, r3, #22
 800af4a:	d4dd      	bmi.n	800af08 <_fflush_r+0xc>
 800af4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af4e:	f000 f90d 	bl	800b16c <__retarget_lock_release_recursive>
 800af52:	e7d9      	b.n	800af08 <_fflush_r+0xc>
 800af54:	4b05      	ldr	r3, [pc, #20]	; (800af6c <_fflush_r+0x70>)
 800af56:	429c      	cmp	r4, r3
 800af58:	d101      	bne.n	800af5e <_fflush_r+0x62>
 800af5a:	68ac      	ldr	r4, [r5, #8]
 800af5c:	e7df      	b.n	800af1e <_fflush_r+0x22>
 800af5e:	4b04      	ldr	r3, [pc, #16]	; (800af70 <_fflush_r+0x74>)
 800af60:	429c      	cmp	r4, r3
 800af62:	bf08      	it	eq
 800af64:	68ec      	ldreq	r4, [r5, #12]
 800af66:	e7da      	b.n	800af1e <_fflush_r+0x22>
 800af68:	0800f398 	.word	0x0800f398
 800af6c:	0800f3b8 	.word	0x0800f3b8
 800af70:	0800f378 	.word	0x0800f378

0800af74 <std>:
 800af74:	2300      	movs	r3, #0
 800af76:	b510      	push	{r4, lr}
 800af78:	4604      	mov	r4, r0
 800af7a:	e9c0 3300 	strd	r3, r3, [r0]
 800af7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af82:	6083      	str	r3, [r0, #8]
 800af84:	8181      	strh	r1, [r0, #12]
 800af86:	6643      	str	r3, [r0, #100]	; 0x64
 800af88:	81c2      	strh	r2, [r0, #14]
 800af8a:	6183      	str	r3, [r0, #24]
 800af8c:	4619      	mov	r1, r3
 800af8e:	2208      	movs	r2, #8
 800af90:	305c      	adds	r0, #92	; 0x5c
 800af92:	f7fe fb63 	bl	800965c <memset>
 800af96:	4b05      	ldr	r3, [pc, #20]	; (800afac <std+0x38>)
 800af98:	6263      	str	r3, [r4, #36]	; 0x24
 800af9a:	4b05      	ldr	r3, [pc, #20]	; (800afb0 <std+0x3c>)
 800af9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800af9e:	4b05      	ldr	r3, [pc, #20]	; (800afb4 <std+0x40>)
 800afa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afa2:	4b05      	ldr	r3, [pc, #20]	; (800afb8 <std+0x44>)
 800afa4:	6224      	str	r4, [r4, #32]
 800afa6:	6323      	str	r3, [r4, #48]	; 0x30
 800afa8:	bd10      	pop	{r4, pc}
 800afaa:	bf00      	nop
 800afac:	0800c045 	.word	0x0800c045
 800afb0:	0800c067 	.word	0x0800c067
 800afb4:	0800c09f 	.word	0x0800c09f
 800afb8:	0800c0c3 	.word	0x0800c0c3

0800afbc <_cleanup_r>:
 800afbc:	4901      	ldr	r1, [pc, #4]	; (800afc4 <_cleanup_r+0x8>)
 800afbe:	f000 b8af 	b.w	800b120 <_fwalk_reent>
 800afc2:	bf00      	nop
 800afc4:	0800aefd 	.word	0x0800aefd

0800afc8 <__sfmoreglue>:
 800afc8:	b570      	push	{r4, r5, r6, lr}
 800afca:	1e4a      	subs	r2, r1, #1
 800afcc:	2568      	movs	r5, #104	; 0x68
 800afce:	4355      	muls	r5, r2
 800afd0:	460e      	mov	r6, r1
 800afd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800afd6:	f000 fd15 	bl	800ba04 <_malloc_r>
 800afda:	4604      	mov	r4, r0
 800afdc:	b140      	cbz	r0, 800aff0 <__sfmoreglue+0x28>
 800afde:	2100      	movs	r1, #0
 800afe0:	e9c0 1600 	strd	r1, r6, [r0]
 800afe4:	300c      	adds	r0, #12
 800afe6:	60a0      	str	r0, [r4, #8]
 800afe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800afec:	f7fe fb36 	bl	800965c <memset>
 800aff0:	4620      	mov	r0, r4
 800aff2:	bd70      	pop	{r4, r5, r6, pc}

0800aff4 <__sfp_lock_acquire>:
 800aff4:	4801      	ldr	r0, [pc, #4]	; (800affc <__sfp_lock_acquire+0x8>)
 800aff6:	f000 b8b8 	b.w	800b16a <__retarget_lock_acquire_recursive>
 800affa:	bf00      	nop
 800affc:	20004a38 	.word	0x20004a38

0800b000 <__sfp_lock_release>:
 800b000:	4801      	ldr	r0, [pc, #4]	; (800b008 <__sfp_lock_release+0x8>)
 800b002:	f000 b8b3 	b.w	800b16c <__retarget_lock_release_recursive>
 800b006:	bf00      	nop
 800b008:	20004a38 	.word	0x20004a38

0800b00c <__sinit_lock_acquire>:
 800b00c:	4801      	ldr	r0, [pc, #4]	; (800b014 <__sinit_lock_acquire+0x8>)
 800b00e:	f000 b8ac 	b.w	800b16a <__retarget_lock_acquire_recursive>
 800b012:	bf00      	nop
 800b014:	20004a33 	.word	0x20004a33

0800b018 <__sinit_lock_release>:
 800b018:	4801      	ldr	r0, [pc, #4]	; (800b020 <__sinit_lock_release+0x8>)
 800b01a:	f000 b8a7 	b.w	800b16c <__retarget_lock_release_recursive>
 800b01e:	bf00      	nop
 800b020:	20004a33 	.word	0x20004a33

0800b024 <__sinit>:
 800b024:	b510      	push	{r4, lr}
 800b026:	4604      	mov	r4, r0
 800b028:	f7ff fff0 	bl	800b00c <__sinit_lock_acquire>
 800b02c:	69a3      	ldr	r3, [r4, #24]
 800b02e:	b11b      	cbz	r3, 800b038 <__sinit+0x14>
 800b030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b034:	f7ff bff0 	b.w	800b018 <__sinit_lock_release>
 800b038:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b03c:	6523      	str	r3, [r4, #80]	; 0x50
 800b03e:	4b13      	ldr	r3, [pc, #76]	; (800b08c <__sinit+0x68>)
 800b040:	4a13      	ldr	r2, [pc, #76]	; (800b090 <__sinit+0x6c>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	62a2      	str	r2, [r4, #40]	; 0x28
 800b046:	42a3      	cmp	r3, r4
 800b048:	bf04      	itt	eq
 800b04a:	2301      	moveq	r3, #1
 800b04c:	61a3      	streq	r3, [r4, #24]
 800b04e:	4620      	mov	r0, r4
 800b050:	f000 f820 	bl	800b094 <__sfp>
 800b054:	6060      	str	r0, [r4, #4]
 800b056:	4620      	mov	r0, r4
 800b058:	f000 f81c 	bl	800b094 <__sfp>
 800b05c:	60a0      	str	r0, [r4, #8]
 800b05e:	4620      	mov	r0, r4
 800b060:	f000 f818 	bl	800b094 <__sfp>
 800b064:	2200      	movs	r2, #0
 800b066:	60e0      	str	r0, [r4, #12]
 800b068:	2104      	movs	r1, #4
 800b06a:	6860      	ldr	r0, [r4, #4]
 800b06c:	f7ff ff82 	bl	800af74 <std>
 800b070:	68a0      	ldr	r0, [r4, #8]
 800b072:	2201      	movs	r2, #1
 800b074:	2109      	movs	r1, #9
 800b076:	f7ff ff7d 	bl	800af74 <std>
 800b07a:	68e0      	ldr	r0, [r4, #12]
 800b07c:	2202      	movs	r2, #2
 800b07e:	2112      	movs	r1, #18
 800b080:	f7ff ff78 	bl	800af74 <std>
 800b084:	2301      	movs	r3, #1
 800b086:	61a3      	str	r3, [r4, #24]
 800b088:	e7d2      	b.n	800b030 <__sinit+0xc>
 800b08a:	bf00      	nop
 800b08c:	0800f2ac 	.word	0x0800f2ac
 800b090:	0800afbd 	.word	0x0800afbd

0800b094 <__sfp>:
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b096:	4607      	mov	r7, r0
 800b098:	f7ff ffac 	bl	800aff4 <__sfp_lock_acquire>
 800b09c:	4b1e      	ldr	r3, [pc, #120]	; (800b118 <__sfp+0x84>)
 800b09e:	681e      	ldr	r6, [r3, #0]
 800b0a0:	69b3      	ldr	r3, [r6, #24]
 800b0a2:	b913      	cbnz	r3, 800b0aa <__sfp+0x16>
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	f7ff ffbd 	bl	800b024 <__sinit>
 800b0aa:	3648      	adds	r6, #72	; 0x48
 800b0ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	d503      	bpl.n	800b0bc <__sfp+0x28>
 800b0b4:	6833      	ldr	r3, [r6, #0]
 800b0b6:	b30b      	cbz	r3, 800b0fc <__sfp+0x68>
 800b0b8:	6836      	ldr	r6, [r6, #0]
 800b0ba:	e7f7      	b.n	800b0ac <__sfp+0x18>
 800b0bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b0c0:	b9d5      	cbnz	r5, 800b0f8 <__sfp+0x64>
 800b0c2:	4b16      	ldr	r3, [pc, #88]	; (800b11c <__sfp+0x88>)
 800b0c4:	60e3      	str	r3, [r4, #12]
 800b0c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0ca:	6665      	str	r5, [r4, #100]	; 0x64
 800b0cc:	f000 f84c 	bl	800b168 <__retarget_lock_init_recursive>
 800b0d0:	f7ff ff96 	bl	800b000 <__sfp_lock_release>
 800b0d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0dc:	6025      	str	r5, [r4, #0]
 800b0de:	61a5      	str	r5, [r4, #24]
 800b0e0:	2208      	movs	r2, #8
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0e8:	f7fe fab8 	bl	800965c <memset>
 800b0ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b0f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0f8:	3468      	adds	r4, #104	; 0x68
 800b0fa:	e7d9      	b.n	800b0b0 <__sfp+0x1c>
 800b0fc:	2104      	movs	r1, #4
 800b0fe:	4638      	mov	r0, r7
 800b100:	f7ff ff62 	bl	800afc8 <__sfmoreglue>
 800b104:	4604      	mov	r4, r0
 800b106:	6030      	str	r0, [r6, #0]
 800b108:	2800      	cmp	r0, #0
 800b10a:	d1d5      	bne.n	800b0b8 <__sfp+0x24>
 800b10c:	f7ff ff78 	bl	800b000 <__sfp_lock_release>
 800b110:	230c      	movs	r3, #12
 800b112:	603b      	str	r3, [r7, #0]
 800b114:	e7ee      	b.n	800b0f4 <__sfp+0x60>
 800b116:	bf00      	nop
 800b118:	0800f2ac 	.word	0x0800f2ac
 800b11c:	ffff0001 	.word	0xffff0001

0800b120 <_fwalk_reent>:
 800b120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b124:	4606      	mov	r6, r0
 800b126:	4688      	mov	r8, r1
 800b128:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b12c:	2700      	movs	r7, #0
 800b12e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b132:	f1b9 0901 	subs.w	r9, r9, #1
 800b136:	d505      	bpl.n	800b144 <_fwalk_reent+0x24>
 800b138:	6824      	ldr	r4, [r4, #0]
 800b13a:	2c00      	cmp	r4, #0
 800b13c:	d1f7      	bne.n	800b12e <_fwalk_reent+0xe>
 800b13e:	4638      	mov	r0, r7
 800b140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b144:	89ab      	ldrh	r3, [r5, #12]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d907      	bls.n	800b15a <_fwalk_reent+0x3a>
 800b14a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b14e:	3301      	adds	r3, #1
 800b150:	d003      	beq.n	800b15a <_fwalk_reent+0x3a>
 800b152:	4629      	mov	r1, r5
 800b154:	4630      	mov	r0, r6
 800b156:	47c0      	blx	r8
 800b158:	4307      	orrs	r7, r0
 800b15a:	3568      	adds	r5, #104	; 0x68
 800b15c:	e7e9      	b.n	800b132 <_fwalk_reent+0x12>
	...

0800b160 <_localeconv_r>:
 800b160:	4800      	ldr	r0, [pc, #0]	; (800b164 <_localeconv_r+0x4>)
 800b162:	4770      	bx	lr
 800b164:	20000188 	.word	0x20000188

0800b168 <__retarget_lock_init_recursive>:
 800b168:	4770      	bx	lr

0800b16a <__retarget_lock_acquire_recursive>:
 800b16a:	4770      	bx	lr

0800b16c <__retarget_lock_release_recursive>:
 800b16c:	4770      	bx	lr

0800b16e <__swhatbuf_r>:
 800b16e:	b570      	push	{r4, r5, r6, lr}
 800b170:	460e      	mov	r6, r1
 800b172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b176:	2900      	cmp	r1, #0
 800b178:	b096      	sub	sp, #88	; 0x58
 800b17a:	4614      	mov	r4, r2
 800b17c:	461d      	mov	r5, r3
 800b17e:	da07      	bge.n	800b190 <__swhatbuf_r+0x22>
 800b180:	2300      	movs	r3, #0
 800b182:	602b      	str	r3, [r5, #0]
 800b184:	89b3      	ldrh	r3, [r6, #12]
 800b186:	061a      	lsls	r2, r3, #24
 800b188:	d410      	bmi.n	800b1ac <__swhatbuf_r+0x3e>
 800b18a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b18e:	e00e      	b.n	800b1ae <__swhatbuf_r+0x40>
 800b190:	466a      	mov	r2, sp
 800b192:	f000 ffed 	bl	800c170 <_fstat_r>
 800b196:	2800      	cmp	r0, #0
 800b198:	dbf2      	blt.n	800b180 <__swhatbuf_r+0x12>
 800b19a:	9a01      	ldr	r2, [sp, #4]
 800b19c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1a4:	425a      	negs	r2, r3
 800b1a6:	415a      	adcs	r2, r3
 800b1a8:	602a      	str	r2, [r5, #0]
 800b1aa:	e7ee      	b.n	800b18a <__swhatbuf_r+0x1c>
 800b1ac:	2340      	movs	r3, #64	; 0x40
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	6023      	str	r3, [r4, #0]
 800b1b2:	b016      	add	sp, #88	; 0x58
 800b1b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b1b8 <__smakebuf_r>:
 800b1b8:	898b      	ldrh	r3, [r1, #12]
 800b1ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1bc:	079d      	lsls	r5, r3, #30
 800b1be:	4606      	mov	r6, r0
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	d507      	bpl.n	800b1d4 <__smakebuf_r+0x1c>
 800b1c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1c8:	6023      	str	r3, [r4, #0]
 800b1ca:	6123      	str	r3, [r4, #16]
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	6163      	str	r3, [r4, #20]
 800b1d0:	b002      	add	sp, #8
 800b1d2:	bd70      	pop	{r4, r5, r6, pc}
 800b1d4:	ab01      	add	r3, sp, #4
 800b1d6:	466a      	mov	r2, sp
 800b1d8:	f7ff ffc9 	bl	800b16e <__swhatbuf_r>
 800b1dc:	9900      	ldr	r1, [sp, #0]
 800b1de:	4605      	mov	r5, r0
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f000 fc0f 	bl	800ba04 <_malloc_r>
 800b1e6:	b948      	cbnz	r0, 800b1fc <__smakebuf_r+0x44>
 800b1e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ec:	059a      	lsls	r2, r3, #22
 800b1ee:	d4ef      	bmi.n	800b1d0 <__smakebuf_r+0x18>
 800b1f0:	f023 0303 	bic.w	r3, r3, #3
 800b1f4:	f043 0302 	orr.w	r3, r3, #2
 800b1f8:	81a3      	strh	r3, [r4, #12]
 800b1fa:	e7e3      	b.n	800b1c4 <__smakebuf_r+0xc>
 800b1fc:	4b0d      	ldr	r3, [pc, #52]	; (800b234 <__smakebuf_r+0x7c>)
 800b1fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800b200:	89a3      	ldrh	r3, [r4, #12]
 800b202:	6020      	str	r0, [r4, #0]
 800b204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b208:	81a3      	strh	r3, [r4, #12]
 800b20a:	9b00      	ldr	r3, [sp, #0]
 800b20c:	6163      	str	r3, [r4, #20]
 800b20e:	9b01      	ldr	r3, [sp, #4]
 800b210:	6120      	str	r0, [r4, #16]
 800b212:	b15b      	cbz	r3, 800b22c <__smakebuf_r+0x74>
 800b214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b218:	4630      	mov	r0, r6
 800b21a:	f000 ffbb 	bl	800c194 <_isatty_r>
 800b21e:	b128      	cbz	r0, 800b22c <__smakebuf_r+0x74>
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	f023 0303 	bic.w	r3, r3, #3
 800b226:	f043 0301 	orr.w	r3, r3, #1
 800b22a:	81a3      	strh	r3, [r4, #12]
 800b22c:	89a0      	ldrh	r0, [r4, #12]
 800b22e:	4305      	orrs	r5, r0
 800b230:	81a5      	strh	r5, [r4, #12]
 800b232:	e7cd      	b.n	800b1d0 <__smakebuf_r+0x18>
 800b234:	0800afbd 	.word	0x0800afbd

0800b238 <malloc>:
 800b238:	4b02      	ldr	r3, [pc, #8]	; (800b244 <malloc+0xc>)
 800b23a:	4601      	mov	r1, r0
 800b23c:	6818      	ldr	r0, [r3, #0]
 800b23e:	f000 bbe1 	b.w	800ba04 <_malloc_r>
 800b242:	bf00      	nop
 800b244:	20000034 	.word	0x20000034

0800b248 <_Balloc>:
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b24c:	4604      	mov	r4, r0
 800b24e:	460d      	mov	r5, r1
 800b250:	b976      	cbnz	r6, 800b270 <_Balloc+0x28>
 800b252:	2010      	movs	r0, #16
 800b254:	f7ff fff0 	bl	800b238 <malloc>
 800b258:	4602      	mov	r2, r0
 800b25a:	6260      	str	r0, [r4, #36]	; 0x24
 800b25c:	b920      	cbnz	r0, 800b268 <_Balloc+0x20>
 800b25e:	4b18      	ldr	r3, [pc, #96]	; (800b2c0 <_Balloc+0x78>)
 800b260:	4818      	ldr	r0, [pc, #96]	; (800b2c4 <_Balloc+0x7c>)
 800b262:	2166      	movs	r1, #102	; 0x66
 800b264:	f000 ff44 	bl	800c0f0 <__assert_func>
 800b268:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b26c:	6006      	str	r6, [r0, #0]
 800b26e:	60c6      	str	r6, [r0, #12]
 800b270:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b272:	68f3      	ldr	r3, [r6, #12]
 800b274:	b183      	cbz	r3, 800b298 <_Balloc+0x50>
 800b276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b27e:	b9b8      	cbnz	r0, 800b2b0 <_Balloc+0x68>
 800b280:	2101      	movs	r1, #1
 800b282:	fa01 f605 	lsl.w	r6, r1, r5
 800b286:	1d72      	adds	r2, r6, #5
 800b288:	0092      	lsls	r2, r2, #2
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 fb5a 	bl	800b944 <_calloc_r>
 800b290:	b160      	cbz	r0, 800b2ac <_Balloc+0x64>
 800b292:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b296:	e00e      	b.n	800b2b6 <_Balloc+0x6e>
 800b298:	2221      	movs	r2, #33	; 0x21
 800b29a:	2104      	movs	r1, #4
 800b29c:	4620      	mov	r0, r4
 800b29e:	f000 fb51 	bl	800b944 <_calloc_r>
 800b2a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2a4:	60f0      	str	r0, [r6, #12]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1e4      	bne.n	800b276 <_Balloc+0x2e>
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	bd70      	pop	{r4, r5, r6, pc}
 800b2b0:	6802      	ldr	r2, [r0, #0]
 800b2b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2bc:	e7f7      	b.n	800b2ae <_Balloc+0x66>
 800b2be:	bf00      	nop
 800b2c0:	0800f2f1 	.word	0x0800f2f1
 800b2c4:	0800f3d8 	.word	0x0800f3d8

0800b2c8 <_Bfree>:
 800b2c8:	b570      	push	{r4, r5, r6, lr}
 800b2ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	b976      	cbnz	r6, 800b2f0 <_Bfree+0x28>
 800b2d2:	2010      	movs	r0, #16
 800b2d4:	f7ff ffb0 	bl	800b238 <malloc>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	6268      	str	r0, [r5, #36]	; 0x24
 800b2dc:	b920      	cbnz	r0, 800b2e8 <_Bfree+0x20>
 800b2de:	4b09      	ldr	r3, [pc, #36]	; (800b304 <_Bfree+0x3c>)
 800b2e0:	4809      	ldr	r0, [pc, #36]	; (800b308 <_Bfree+0x40>)
 800b2e2:	218a      	movs	r1, #138	; 0x8a
 800b2e4:	f000 ff04 	bl	800c0f0 <__assert_func>
 800b2e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2ec:	6006      	str	r6, [r0, #0]
 800b2ee:	60c6      	str	r6, [r0, #12]
 800b2f0:	b13c      	cbz	r4, 800b302 <_Bfree+0x3a>
 800b2f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b2f4:	6862      	ldr	r2, [r4, #4]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2fc:	6021      	str	r1, [r4, #0]
 800b2fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b302:	bd70      	pop	{r4, r5, r6, pc}
 800b304:	0800f2f1 	.word	0x0800f2f1
 800b308:	0800f3d8 	.word	0x0800f3d8

0800b30c <__multadd>:
 800b30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b310:	690e      	ldr	r6, [r1, #16]
 800b312:	4607      	mov	r7, r0
 800b314:	4698      	mov	r8, r3
 800b316:	460c      	mov	r4, r1
 800b318:	f101 0014 	add.w	r0, r1, #20
 800b31c:	2300      	movs	r3, #0
 800b31e:	6805      	ldr	r5, [r0, #0]
 800b320:	b2a9      	uxth	r1, r5
 800b322:	fb02 8101 	mla	r1, r2, r1, r8
 800b326:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b32a:	0c2d      	lsrs	r5, r5, #16
 800b32c:	fb02 c505 	mla	r5, r2, r5, ip
 800b330:	b289      	uxth	r1, r1
 800b332:	3301      	adds	r3, #1
 800b334:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b338:	429e      	cmp	r6, r3
 800b33a:	f840 1b04 	str.w	r1, [r0], #4
 800b33e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b342:	dcec      	bgt.n	800b31e <__multadd+0x12>
 800b344:	f1b8 0f00 	cmp.w	r8, #0
 800b348:	d022      	beq.n	800b390 <__multadd+0x84>
 800b34a:	68a3      	ldr	r3, [r4, #8]
 800b34c:	42b3      	cmp	r3, r6
 800b34e:	dc19      	bgt.n	800b384 <__multadd+0x78>
 800b350:	6861      	ldr	r1, [r4, #4]
 800b352:	4638      	mov	r0, r7
 800b354:	3101      	adds	r1, #1
 800b356:	f7ff ff77 	bl	800b248 <_Balloc>
 800b35a:	4605      	mov	r5, r0
 800b35c:	b928      	cbnz	r0, 800b36a <__multadd+0x5e>
 800b35e:	4602      	mov	r2, r0
 800b360:	4b0d      	ldr	r3, [pc, #52]	; (800b398 <__multadd+0x8c>)
 800b362:	480e      	ldr	r0, [pc, #56]	; (800b39c <__multadd+0x90>)
 800b364:	21b5      	movs	r1, #181	; 0xb5
 800b366:	f000 fec3 	bl	800c0f0 <__assert_func>
 800b36a:	6922      	ldr	r2, [r4, #16]
 800b36c:	3202      	adds	r2, #2
 800b36e:	f104 010c 	add.w	r1, r4, #12
 800b372:	0092      	lsls	r2, r2, #2
 800b374:	300c      	adds	r0, #12
 800b376:	f7fe f963 	bl	8009640 <memcpy>
 800b37a:	4621      	mov	r1, r4
 800b37c:	4638      	mov	r0, r7
 800b37e:	f7ff ffa3 	bl	800b2c8 <_Bfree>
 800b382:	462c      	mov	r4, r5
 800b384:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b388:	3601      	adds	r6, #1
 800b38a:	f8c3 8014 	str.w	r8, [r3, #20]
 800b38e:	6126      	str	r6, [r4, #16]
 800b390:	4620      	mov	r0, r4
 800b392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b396:	bf00      	nop
 800b398:	0800f367 	.word	0x0800f367
 800b39c:	0800f3d8 	.word	0x0800f3d8

0800b3a0 <__hi0bits>:
 800b3a0:	0c03      	lsrs	r3, r0, #16
 800b3a2:	041b      	lsls	r3, r3, #16
 800b3a4:	b9d3      	cbnz	r3, 800b3dc <__hi0bits+0x3c>
 800b3a6:	0400      	lsls	r0, r0, #16
 800b3a8:	2310      	movs	r3, #16
 800b3aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3ae:	bf04      	itt	eq
 800b3b0:	0200      	lsleq	r0, r0, #8
 800b3b2:	3308      	addeq	r3, #8
 800b3b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3b8:	bf04      	itt	eq
 800b3ba:	0100      	lsleq	r0, r0, #4
 800b3bc:	3304      	addeq	r3, #4
 800b3be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3c2:	bf04      	itt	eq
 800b3c4:	0080      	lsleq	r0, r0, #2
 800b3c6:	3302      	addeq	r3, #2
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	db05      	blt.n	800b3d8 <__hi0bits+0x38>
 800b3cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3d0:	f103 0301 	add.w	r3, r3, #1
 800b3d4:	bf08      	it	eq
 800b3d6:	2320      	moveq	r3, #32
 800b3d8:	4618      	mov	r0, r3
 800b3da:	4770      	bx	lr
 800b3dc:	2300      	movs	r3, #0
 800b3de:	e7e4      	b.n	800b3aa <__hi0bits+0xa>

0800b3e0 <__lo0bits>:
 800b3e0:	6803      	ldr	r3, [r0, #0]
 800b3e2:	f013 0207 	ands.w	r2, r3, #7
 800b3e6:	4601      	mov	r1, r0
 800b3e8:	d00b      	beq.n	800b402 <__lo0bits+0x22>
 800b3ea:	07da      	lsls	r2, r3, #31
 800b3ec:	d424      	bmi.n	800b438 <__lo0bits+0x58>
 800b3ee:	0798      	lsls	r0, r3, #30
 800b3f0:	bf49      	itett	mi
 800b3f2:	085b      	lsrmi	r3, r3, #1
 800b3f4:	089b      	lsrpl	r3, r3, #2
 800b3f6:	2001      	movmi	r0, #1
 800b3f8:	600b      	strmi	r3, [r1, #0]
 800b3fa:	bf5c      	itt	pl
 800b3fc:	600b      	strpl	r3, [r1, #0]
 800b3fe:	2002      	movpl	r0, #2
 800b400:	4770      	bx	lr
 800b402:	b298      	uxth	r0, r3
 800b404:	b9b0      	cbnz	r0, 800b434 <__lo0bits+0x54>
 800b406:	0c1b      	lsrs	r3, r3, #16
 800b408:	2010      	movs	r0, #16
 800b40a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b40e:	bf04      	itt	eq
 800b410:	0a1b      	lsreq	r3, r3, #8
 800b412:	3008      	addeq	r0, #8
 800b414:	071a      	lsls	r2, r3, #28
 800b416:	bf04      	itt	eq
 800b418:	091b      	lsreq	r3, r3, #4
 800b41a:	3004      	addeq	r0, #4
 800b41c:	079a      	lsls	r2, r3, #30
 800b41e:	bf04      	itt	eq
 800b420:	089b      	lsreq	r3, r3, #2
 800b422:	3002      	addeq	r0, #2
 800b424:	07da      	lsls	r2, r3, #31
 800b426:	d403      	bmi.n	800b430 <__lo0bits+0x50>
 800b428:	085b      	lsrs	r3, r3, #1
 800b42a:	f100 0001 	add.w	r0, r0, #1
 800b42e:	d005      	beq.n	800b43c <__lo0bits+0x5c>
 800b430:	600b      	str	r3, [r1, #0]
 800b432:	4770      	bx	lr
 800b434:	4610      	mov	r0, r2
 800b436:	e7e8      	b.n	800b40a <__lo0bits+0x2a>
 800b438:	2000      	movs	r0, #0
 800b43a:	4770      	bx	lr
 800b43c:	2020      	movs	r0, #32
 800b43e:	4770      	bx	lr

0800b440 <__i2b>:
 800b440:	b510      	push	{r4, lr}
 800b442:	460c      	mov	r4, r1
 800b444:	2101      	movs	r1, #1
 800b446:	f7ff feff 	bl	800b248 <_Balloc>
 800b44a:	4602      	mov	r2, r0
 800b44c:	b928      	cbnz	r0, 800b45a <__i2b+0x1a>
 800b44e:	4b05      	ldr	r3, [pc, #20]	; (800b464 <__i2b+0x24>)
 800b450:	4805      	ldr	r0, [pc, #20]	; (800b468 <__i2b+0x28>)
 800b452:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b456:	f000 fe4b 	bl	800c0f0 <__assert_func>
 800b45a:	2301      	movs	r3, #1
 800b45c:	6144      	str	r4, [r0, #20]
 800b45e:	6103      	str	r3, [r0, #16]
 800b460:	bd10      	pop	{r4, pc}
 800b462:	bf00      	nop
 800b464:	0800f367 	.word	0x0800f367
 800b468:	0800f3d8 	.word	0x0800f3d8

0800b46c <__multiply>:
 800b46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	4614      	mov	r4, r2
 800b472:	690a      	ldr	r2, [r1, #16]
 800b474:	6923      	ldr	r3, [r4, #16]
 800b476:	429a      	cmp	r2, r3
 800b478:	bfb8      	it	lt
 800b47a:	460b      	movlt	r3, r1
 800b47c:	460d      	mov	r5, r1
 800b47e:	bfbc      	itt	lt
 800b480:	4625      	movlt	r5, r4
 800b482:	461c      	movlt	r4, r3
 800b484:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b488:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b48c:	68ab      	ldr	r3, [r5, #8]
 800b48e:	6869      	ldr	r1, [r5, #4]
 800b490:	eb0a 0709 	add.w	r7, sl, r9
 800b494:	42bb      	cmp	r3, r7
 800b496:	b085      	sub	sp, #20
 800b498:	bfb8      	it	lt
 800b49a:	3101      	addlt	r1, #1
 800b49c:	f7ff fed4 	bl	800b248 <_Balloc>
 800b4a0:	b930      	cbnz	r0, 800b4b0 <__multiply+0x44>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	4b42      	ldr	r3, [pc, #264]	; (800b5b0 <__multiply+0x144>)
 800b4a6:	4843      	ldr	r0, [pc, #268]	; (800b5b4 <__multiply+0x148>)
 800b4a8:	f240 115d 	movw	r1, #349	; 0x15d
 800b4ac:	f000 fe20 	bl	800c0f0 <__assert_func>
 800b4b0:	f100 0614 	add.w	r6, r0, #20
 800b4b4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b4b8:	4633      	mov	r3, r6
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	4543      	cmp	r3, r8
 800b4be:	d31e      	bcc.n	800b4fe <__multiply+0x92>
 800b4c0:	f105 0c14 	add.w	ip, r5, #20
 800b4c4:	f104 0314 	add.w	r3, r4, #20
 800b4c8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b4cc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b4d0:	9202      	str	r2, [sp, #8]
 800b4d2:	ebac 0205 	sub.w	r2, ip, r5
 800b4d6:	3a15      	subs	r2, #21
 800b4d8:	f022 0203 	bic.w	r2, r2, #3
 800b4dc:	3204      	adds	r2, #4
 800b4de:	f105 0115 	add.w	r1, r5, #21
 800b4e2:	458c      	cmp	ip, r1
 800b4e4:	bf38      	it	cc
 800b4e6:	2204      	movcc	r2, #4
 800b4e8:	9201      	str	r2, [sp, #4]
 800b4ea:	9a02      	ldr	r2, [sp, #8]
 800b4ec:	9303      	str	r3, [sp, #12]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d808      	bhi.n	800b504 <__multiply+0x98>
 800b4f2:	2f00      	cmp	r7, #0
 800b4f4:	dc55      	bgt.n	800b5a2 <__multiply+0x136>
 800b4f6:	6107      	str	r7, [r0, #16]
 800b4f8:	b005      	add	sp, #20
 800b4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4fe:	f843 2b04 	str.w	r2, [r3], #4
 800b502:	e7db      	b.n	800b4bc <__multiply+0x50>
 800b504:	f8b3 a000 	ldrh.w	sl, [r3]
 800b508:	f1ba 0f00 	cmp.w	sl, #0
 800b50c:	d020      	beq.n	800b550 <__multiply+0xe4>
 800b50e:	f105 0e14 	add.w	lr, r5, #20
 800b512:	46b1      	mov	r9, r6
 800b514:	2200      	movs	r2, #0
 800b516:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b51a:	f8d9 b000 	ldr.w	fp, [r9]
 800b51e:	b2a1      	uxth	r1, r4
 800b520:	fa1f fb8b 	uxth.w	fp, fp
 800b524:	fb0a b101 	mla	r1, sl, r1, fp
 800b528:	4411      	add	r1, r2
 800b52a:	f8d9 2000 	ldr.w	r2, [r9]
 800b52e:	0c24      	lsrs	r4, r4, #16
 800b530:	0c12      	lsrs	r2, r2, #16
 800b532:	fb0a 2404 	mla	r4, sl, r4, r2
 800b536:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b53a:	b289      	uxth	r1, r1
 800b53c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b540:	45f4      	cmp	ip, lr
 800b542:	f849 1b04 	str.w	r1, [r9], #4
 800b546:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b54a:	d8e4      	bhi.n	800b516 <__multiply+0xaa>
 800b54c:	9901      	ldr	r1, [sp, #4]
 800b54e:	5072      	str	r2, [r6, r1]
 800b550:	9a03      	ldr	r2, [sp, #12]
 800b552:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b556:	3304      	adds	r3, #4
 800b558:	f1b9 0f00 	cmp.w	r9, #0
 800b55c:	d01f      	beq.n	800b59e <__multiply+0x132>
 800b55e:	6834      	ldr	r4, [r6, #0]
 800b560:	f105 0114 	add.w	r1, r5, #20
 800b564:	46b6      	mov	lr, r6
 800b566:	f04f 0a00 	mov.w	sl, #0
 800b56a:	880a      	ldrh	r2, [r1, #0]
 800b56c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b570:	fb09 b202 	mla	r2, r9, r2, fp
 800b574:	4492      	add	sl, r2
 800b576:	b2a4      	uxth	r4, r4
 800b578:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b57c:	f84e 4b04 	str.w	r4, [lr], #4
 800b580:	f851 4b04 	ldr.w	r4, [r1], #4
 800b584:	f8be 2000 	ldrh.w	r2, [lr]
 800b588:	0c24      	lsrs	r4, r4, #16
 800b58a:	fb09 2404 	mla	r4, r9, r4, r2
 800b58e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b592:	458c      	cmp	ip, r1
 800b594:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b598:	d8e7      	bhi.n	800b56a <__multiply+0xfe>
 800b59a:	9a01      	ldr	r2, [sp, #4]
 800b59c:	50b4      	str	r4, [r6, r2]
 800b59e:	3604      	adds	r6, #4
 800b5a0:	e7a3      	b.n	800b4ea <__multiply+0x7e>
 800b5a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1a5      	bne.n	800b4f6 <__multiply+0x8a>
 800b5aa:	3f01      	subs	r7, #1
 800b5ac:	e7a1      	b.n	800b4f2 <__multiply+0x86>
 800b5ae:	bf00      	nop
 800b5b0:	0800f367 	.word	0x0800f367
 800b5b4:	0800f3d8 	.word	0x0800f3d8

0800b5b8 <__pow5mult>:
 800b5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5bc:	4615      	mov	r5, r2
 800b5be:	f012 0203 	ands.w	r2, r2, #3
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	460f      	mov	r7, r1
 800b5c6:	d007      	beq.n	800b5d8 <__pow5mult+0x20>
 800b5c8:	4c25      	ldr	r4, [pc, #148]	; (800b660 <__pow5mult+0xa8>)
 800b5ca:	3a01      	subs	r2, #1
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5d2:	f7ff fe9b 	bl	800b30c <__multadd>
 800b5d6:	4607      	mov	r7, r0
 800b5d8:	10ad      	asrs	r5, r5, #2
 800b5da:	d03d      	beq.n	800b658 <__pow5mult+0xa0>
 800b5dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5de:	b97c      	cbnz	r4, 800b600 <__pow5mult+0x48>
 800b5e0:	2010      	movs	r0, #16
 800b5e2:	f7ff fe29 	bl	800b238 <malloc>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	6270      	str	r0, [r6, #36]	; 0x24
 800b5ea:	b928      	cbnz	r0, 800b5f8 <__pow5mult+0x40>
 800b5ec:	4b1d      	ldr	r3, [pc, #116]	; (800b664 <__pow5mult+0xac>)
 800b5ee:	481e      	ldr	r0, [pc, #120]	; (800b668 <__pow5mult+0xb0>)
 800b5f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b5f4:	f000 fd7c 	bl	800c0f0 <__assert_func>
 800b5f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5fc:	6004      	str	r4, [r0, #0]
 800b5fe:	60c4      	str	r4, [r0, #12]
 800b600:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b604:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b608:	b94c      	cbnz	r4, 800b61e <__pow5mult+0x66>
 800b60a:	f240 2171 	movw	r1, #625	; 0x271
 800b60e:	4630      	mov	r0, r6
 800b610:	f7ff ff16 	bl	800b440 <__i2b>
 800b614:	2300      	movs	r3, #0
 800b616:	f8c8 0008 	str.w	r0, [r8, #8]
 800b61a:	4604      	mov	r4, r0
 800b61c:	6003      	str	r3, [r0, #0]
 800b61e:	f04f 0900 	mov.w	r9, #0
 800b622:	07eb      	lsls	r3, r5, #31
 800b624:	d50a      	bpl.n	800b63c <__pow5mult+0x84>
 800b626:	4639      	mov	r1, r7
 800b628:	4622      	mov	r2, r4
 800b62a:	4630      	mov	r0, r6
 800b62c:	f7ff ff1e 	bl	800b46c <__multiply>
 800b630:	4639      	mov	r1, r7
 800b632:	4680      	mov	r8, r0
 800b634:	4630      	mov	r0, r6
 800b636:	f7ff fe47 	bl	800b2c8 <_Bfree>
 800b63a:	4647      	mov	r7, r8
 800b63c:	106d      	asrs	r5, r5, #1
 800b63e:	d00b      	beq.n	800b658 <__pow5mult+0xa0>
 800b640:	6820      	ldr	r0, [r4, #0]
 800b642:	b938      	cbnz	r0, 800b654 <__pow5mult+0x9c>
 800b644:	4622      	mov	r2, r4
 800b646:	4621      	mov	r1, r4
 800b648:	4630      	mov	r0, r6
 800b64a:	f7ff ff0f 	bl	800b46c <__multiply>
 800b64e:	6020      	str	r0, [r4, #0]
 800b650:	f8c0 9000 	str.w	r9, [r0]
 800b654:	4604      	mov	r4, r0
 800b656:	e7e4      	b.n	800b622 <__pow5mult+0x6a>
 800b658:	4638      	mov	r0, r7
 800b65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b65e:	bf00      	nop
 800b660:	0800f528 	.word	0x0800f528
 800b664:	0800f2f1 	.word	0x0800f2f1
 800b668:	0800f3d8 	.word	0x0800f3d8

0800b66c <__lshift>:
 800b66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b670:	460c      	mov	r4, r1
 800b672:	6849      	ldr	r1, [r1, #4]
 800b674:	6923      	ldr	r3, [r4, #16]
 800b676:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b67a:	68a3      	ldr	r3, [r4, #8]
 800b67c:	4607      	mov	r7, r0
 800b67e:	4691      	mov	r9, r2
 800b680:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b684:	f108 0601 	add.w	r6, r8, #1
 800b688:	42b3      	cmp	r3, r6
 800b68a:	db0b      	blt.n	800b6a4 <__lshift+0x38>
 800b68c:	4638      	mov	r0, r7
 800b68e:	f7ff fddb 	bl	800b248 <_Balloc>
 800b692:	4605      	mov	r5, r0
 800b694:	b948      	cbnz	r0, 800b6aa <__lshift+0x3e>
 800b696:	4602      	mov	r2, r0
 800b698:	4b28      	ldr	r3, [pc, #160]	; (800b73c <__lshift+0xd0>)
 800b69a:	4829      	ldr	r0, [pc, #164]	; (800b740 <__lshift+0xd4>)
 800b69c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b6a0:	f000 fd26 	bl	800c0f0 <__assert_func>
 800b6a4:	3101      	adds	r1, #1
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	e7ee      	b.n	800b688 <__lshift+0x1c>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	f100 0114 	add.w	r1, r0, #20
 800b6b0:	f100 0210 	add.w	r2, r0, #16
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	4553      	cmp	r3, sl
 800b6b8:	db33      	blt.n	800b722 <__lshift+0xb6>
 800b6ba:	6920      	ldr	r0, [r4, #16]
 800b6bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6c0:	f104 0314 	add.w	r3, r4, #20
 800b6c4:	f019 091f 	ands.w	r9, r9, #31
 800b6c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6d0:	d02b      	beq.n	800b72a <__lshift+0xbe>
 800b6d2:	f1c9 0e20 	rsb	lr, r9, #32
 800b6d6:	468a      	mov	sl, r1
 800b6d8:	2200      	movs	r2, #0
 800b6da:	6818      	ldr	r0, [r3, #0]
 800b6dc:	fa00 f009 	lsl.w	r0, r0, r9
 800b6e0:	4302      	orrs	r2, r0
 800b6e2:	f84a 2b04 	str.w	r2, [sl], #4
 800b6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ea:	459c      	cmp	ip, r3
 800b6ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800b6f0:	d8f3      	bhi.n	800b6da <__lshift+0x6e>
 800b6f2:	ebac 0304 	sub.w	r3, ip, r4
 800b6f6:	3b15      	subs	r3, #21
 800b6f8:	f023 0303 	bic.w	r3, r3, #3
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	f104 0015 	add.w	r0, r4, #21
 800b702:	4584      	cmp	ip, r0
 800b704:	bf38      	it	cc
 800b706:	2304      	movcc	r3, #4
 800b708:	50ca      	str	r2, [r1, r3]
 800b70a:	b10a      	cbz	r2, 800b710 <__lshift+0xa4>
 800b70c:	f108 0602 	add.w	r6, r8, #2
 800b710:	3e01      	subs	r6, #1
 800b712:	4638      	mov	r0, r7
 800b714:	612e      	str	r6, [r5, #16]
 800b716:	4621      	mov	r1, r4
 800b718:	f7ff fdd6 	bl	800b2c8 <_Bfree>
 800b71c:	4628      	mov	r0, r5
 800b71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b722:	f842 0f04 	str.w	r0, [r2, #4]!
 800b726:	3301      	adds	r3, #1
 800b728:	e7c5      	b.n	800b6b6 <__lshift+0x4a>
 800b72a:	3904      	subs	r1, #4
 800b72c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b730:	f841 2f04 	str.w	r2, [r1, #4]!
 800b734:	459c      	cmp	ip, r3
 800b736:	d8f9      	bhi.n	800b72c <__lshift+0xc0>
 800b738:	e7ea      	b.n	800b710 <__lshift+0xa4>
 800b73a:	bf00      	nop
 800b73c:	0800f367 	.word	0x0800f367
 800b740:	0800f3d8 	.word	0x0800f3d8

0800b744 <__mcmp>:
 800b744:	b530      	push	{r4, r5, lr}
 800b746:	6902      	ldr	r2, [r0, #16]
 800b748:	690c      	ldr	r4, [r1, #16]
 800b74a:	1b12      	subs	r2, r2, r4
 800b74c:	d10e      	bne.n	800b76c <__mcmp+0x28>
 800b74e:	f100 0314 	add.w	r3, r0, #20
 800b752:	3114      	adds	r1, #20
 800b754:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b758:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b75c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b760:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b764:	42a5      	cmp	r5, r4
 800b766:	d003      	beq.n	800b770 <__mcmp+0x2c>
 800b768:	d305      	bcc.n	800b776 <__mcmp+0x32>
 800b76a:	2201      	movs	r2, #1
 800b76c:	4610      	mov	r0, r2
 800b76e:	bd30      	pop	{r4, r5, pc}
 800b770:	4283      	cmp	r3, r0
 800b772:	d3f3      	bcc.n	800b75c <__mcmp+0x18>
 800b774:	e7fa      	b.n	800b76c <__mcmp+0x28>
 800b776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b77a:	e7f7      	b.n	800b76c <__mcmp+0x28>

0800b77c <__mdiff>:
 800b77c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b780:	460c      	mov	r4, r1
 800b782:	4606      	mov	r6, r0
 800b784:	4611      	mov	r1, r2
 800b786:	4620      	mov	r0, r4
 800b788:	4617      	mov	r7, r2
 800b78a:	f7ff ffdb 	bl	800b744 <__mcmp>
 800b78e:	1e05      	subs	r5, r0, #0
 800b790:	d110      	bne.n	800b7b4 <__mdiff+0x38>
 800b792:	4629      	mov	r1, r5
 800b794:	4630      	mov	r0, r6
 800b796:	f7ff fd57 	bl	800b248 <_Balloc>
 800b79a:	b930      	cbnz	r0, 800b7aa <__mdiff+0x2e>
 800b79c:	4b39      	ldr	r3, [pc, #228]	; (800b884 <__mdiff+0x108>)
 800b79e:	4602      	mov	r2, r0
 800b7a0:	f240 2132 	movw	r1, #562	; 0x232
 800b7a4:	4838      	ldr	r0, [pc, #224]	; (800b888 <__mdiff+0x10c>)
 800b7a6:	f000 fca3 	bl	800c0f0 <__assert_func>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b4:	bfa4      	itt	ge
 800b7b6:	463b      	movge	r3, r7
 800b7b8:	4627      	movge	r7, r4
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	6879      	ldr	r1, [r7, #4]
 800b7be:	bfa6      	itte	ge
 800b7c0:	461c      	movge	r4, r3
 800b7c2:	2500      	movge	r5, #0
 800b7c4:	2501      	movlt	r5, #1
 800b7c6:	f7ff fd3f 	bl	800b248 <_Balloc>
 800b7ca:	b920      	cbnz	r0, 800b7d6 <__mdiff+0x5a>
 800b7cc:	4b2d      	ldr	r3, [pc, #180]	; (800b884 <__mdiff+0x108>)
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b7d4:	e7e6      	b.n	800b7a4 <__mdiff+0x28>
 800b7d6:	693e      	ldr	r6, [r7, #16]
 800b7d8:	60c5      	str	r5, [r0, #12]
 800b7da:	6925      	ldr	r5, [r4, #16]
 800b7dc:	f107 0114 	add.w	r1, r7, #20
 800b7e0:	f104 0914 	add.w	r9, r4, #20
 800b7e4:	f100 0e14 	add.w	lr, r0, #20
 800b7e8:	f107 0210 	add.w	r2, r7, #16
 800b7ec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b7f0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b7f4:	46f2      	mov	sl, lr
 800b7f6:	2700      	movs	r7, #0
 800b7f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b800:	fa1f f883 	uxth.w	r8, r3
 800b804:	fa17 f78b 	uxtah	r7, r7, fp
 800b808:	0c1b      	lsrs	r3, r3, #16
 800b80a:	eba7 0808 	sub.w	r8, r7, r8
 800b80e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b812:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b816:	fa1f f888 	uxth.w	r8, r8
 800b81a:	141f      	asrs	r7, r3, #16
 800b81c:	454d      	cmp	r5, r9
 800b81e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b822:	f84a 3b04 	str.w	r3, [sl], #4
 800b826:	d8e7      	bhi.n	800b7f8 <__mdiff+0x7c>
 800b828:	1b2b      	subs	r3, r5, r4
 800b82a:	3b15      	subs	r3, #21
 800b82c:	f023 0303 	bic.w	r3, r3, #3
 800b830:	3304      	adds	r3, #4
 800b832:	3415      	adds	r4, #21
 800b834:	42a5      	cmp	r5, r4
 800b836:	bf38      	it	cc
 800b838:	2304      	movcc	r3, #4
 800b83a:	4419      	add	r1, r3
 800b83c:	4473      	add	r3, lr
 800b83e:	469e      	mov	lr, r3
 800b840:	460d      	mov	r5, r1
 800b842:	4565      	cmp	r5, ip
 800b844:	d30e      	bcc.n	800b864 <__mdiff+0xe8>
 800b846:	f10c 0203 	add.w	r2, ip, #3
 800b84a:	1a52      	subs	r2, r2, r1
 800b84c:	f022 0203 	bic.w	r2, r2, #3
 800b850:	3903      	subs	r1, #3
 800b852:	458c      	cmp	ip, r1
 800b854:	bf38      	it	cc
 800b856:	2200      	movcc	r2, #0
 800b858:	441a      	add	r2, r3
 800b85a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b85e:	b17b      	cbz	r3, 800b880 <__mdiff+0x104>
 800b860:	6106      	str	r6, [r0, #16]
 800b862:	e7a5      	b.n	800b7b0 <__mdiff+0x34>
 800b864:	f855 8b04 	ldr.w	r8, [r5], #4
 800b868:	fa17 f488 	uxtah	r4, r7, r8
 800b86c:	1422      	asrs	r2, r4, #16
 800b86e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b872:	b2a4      	uxth	r4, r4
 800b874:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b878:	f84e 4b04 	str.w	r4, [lr], #4
 800b87c:	1417      	asrs	r7, r2, #16
 800b87e:	e7e0      	b.n	800b842 <__mdiff+0xc6>
 800b880:	3e01      	subs	r6, #1
 800b882:	e7ea      	b.n	800b85a <__mdiff+0xde>
 800b884:	0800f367 	.word	0x0800f367
 800b888:	0800f3d8 	.word	0x0800f3d8

0800b88c <__d2b>:
 800b88c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b890:	4689      	mov	r9, r1
 800b892:	2101      	movs	r1, #1
 800b894:	ec57 6b10 	vmov	r6, r7, d0
 800b898:	4690      	mov	r8, r2
 800b89a:	f7ff fcd5 	bl	800b248 <_Balloc>
 800b89e:	4604      	mov	r4, r0
 800b8a0:	b930      	cbnz	r0, 800b8b0 <__d2b+0x24>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	4b25      	ldr	r3, [pc, #148]	; (800b93c <__d2b+0xb0>)
 800b8a6:	4826      	ldr	r0, [pc, #152]	; (800b940 <__d2b+0xb4>)
 800b8a8:	f240 310a 	movw	r1, #778	; 0x30a
 800b8ac:	f000 fc20 	bl	800c0f0 <__assert_func>
 800b8b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b8b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8b8:	bb35      	cbnz	r5, 800b908 <__d2b+0x7c>
 800b8ba:	2e00      	cmp	r6, #0
 800b8bc:	9301      	str	r3, [sp, #4]
 800b8be:	d028      	beq.n	800b912 <__d2b+0x86>
 800b8c0:	4668      	mov	r0, sp
 800b8c2:	9600      	str	r6, [sp, #0]
 800b8c4:	f7ff fd8c 	bl	800b3e0 <__lo0bits>
 800b8c8:	9900      	ldr	r1, [sp, #0]
 800b8ca:	b300      	cbz	r0, 800b90e <__d2b+0x82>
 800b8cc:	9a01      	ldr	r2, [sp, #4]
 800b8ce:	f1c0 0320 	rsb	r3, r0, #32
 800b8d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d6:	430b      	orrs	r3, r1
 800b8d8:	40c2      	lsrs	r2, r0
 800b8da:	6163      	str	r3, [r4, #20]
 800b8dc:	9201      	str	r2, [sp, #4]
 800b8de:	9b01      	ldr	r3, [sp, #4]
 800b8e0:	61a3      	str	r3, [r4, #24]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	bf14      	ite	ne
 800b8e6:	2202      	movne	r2, #2
 800b8e8:	2201      	moveq	r2, #1
 800b8ea:	6122      	str	r2, [r4, #16]
 800b8ec:	b1d5      	cbz	r5, 800b924 <__d2b+0x98>
 800b8ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b8f2:	4405      	add	r5, r0
 800b8f4:	f8c9 5000 	str.w	r5, [r9]
 800b8f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b8fc:	f8c8 0000 	str.w	r0, [r8]
 800b900:	4620      	mov	r0, r4
 800b902:	b003      	add	sp, #12
 800b904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b90c:	e7d5      	b.n	800b8ba <__d2b+0x2e>
 800b90e:	6161      	str	r1, [r4, #20]
 800b910:	e7e5      	b.n	800b8de <__d2b+0x52>
 800b912:	a801      	add	r0, sp, #4
 800b914:	f7ff fd64 	bl	800b3e0 <__lo0bits>
 800b918:	9b01      	ldr	r3, [sp, #4]
 800b91a:	6163      	str	r3, [r4, #20]
 800b91c:	2201      	movs	r2, #1
 800b91e:	6122      	str	r2, [r4, #16]
 800b920:	3020      	adds	r0, #32
 800b922:	e7e3      	b.n	800b8ec <__d2b+0x60>
 800b924:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b928:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b92c:	f8c9 0000 	str.w	r0, [r9]
 800b930:	6918      	ldr	r0, [r3, #16]
 800b932:	f7ff fd35 	bl	800b3a0 <__hi0bits>
 800b936:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b93a:	e7df      	b.n	800b8fc <__d2b+0x70>
 800b93c:	0800f367 	.word	0x0800f367
 800b940:	0800f3d8 	.word	0x0800f3d8

0800b944 <_calloc_r>:
 800b944:	b513      	push	{r0, r1, r4, lr}
 800b946:	434a      	muls	r2, r1
 800b948:	4611      	mov	r1, r2
 800b94a:	9201      	str	r2, [sp, #4]
 800b94c:	f000 f85a 	bl	800ba04 <_malloc_r>
 800b950:	4604      	mov	r4, r0
 800b952:	b118      	cbz	r0, 800b95c <_calloc_r+0x18>
 800b954:	9a01      	ldr	r2, [sp, #4]
 800b956:	2100      	movs	r1, #0
 800b958:	f7fd fe80 	bl	800965c <memset>
 800b95c:	4620      	mov	r0, r4
 800b95e:	b002      	add	sp, #8
 800b960:	bd10      	pop	{r4, pc}
	...

0800b964 <_free_r>:
 800b964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b966:	2900      	cmp	r1, #0
 800b968:	d048      	beq.n	800b9fc <_free_r+0x98>
 800b96a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b96e:	9001      	str	r0, [sp, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	f1a1 0404 	sub.w	r4, r1, #4
 800b976:	bfb8      	it	lt
 800b978:	18e4      	addlt	r4, r4, r3
 800b97a:	f000 fc59 	bl	800c230 <__malloc_lock>
 800b97e:	4a20      	ldr	r2, [pc, #128]	; (800ba00 <_free_r+0x9c>)
 800b980:	9801      	ldr	r0, [sp, #4]
 800b982:	6813      	ldr	r3, [r2, #0]
 800b984:	4615      	mov	r5, r2
 800b986:	b933      	cbnz	r3, 800b996 <_free_r+0x32>
 800b988:	6063      	str	r3, [r4, #4]
 800b98a:	6014      	str	r4, [r2, #0]
 800b98c:	b003      	add	sp, #12
 800b98e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b992:	f000 bc53 	b.w	800c23c <__malloc_unlock>
 800b996:	42a3      	cmp	r3, r4
 800b998:	d90b      	bls.n	800b9b2 <_free_r+0x4e>
 800b99a:	6821      	ldr	r1, [r4, #0]
 800b99c:	1862      	adds	r2, r4, r1
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	bf04      	itt	eq
 800b9a2:	681a      	ldreq	r2, [r3, #0]
 800b9a4:	685b      	ldreq	r3, [r3, #4]
 800b9a6:	6063      	str	r3, [r4, #4]
 800b9a8:	bf04      	itt	eq
 800b9aa:	1852      	addeq	r2, r2, r1
 800b9ac:	6022      	streq	r2, [r4, #0]
 800b9ae:	602c      	str	r4, [r5, #0]
 800b9b0:	e7ec      	b.n	800b98c <_free_r+0x28>
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	b10b      	cbz	r3, 800b9bc <_free_r+0x58>
 800b9b8:	42a3      	cmp	r3, r4
 800b9ba:	d9fa      	bls.n	800b9b2 <_free_r+0x4e>
 800b9bc:	6811      	ldr	r1, [r2, #0]
 800b9be:	1855      	adds	r5, r2, r1
 800b9c0:	42a5      	cmp	r5, r4
 800b9c2:	d10b      	bne.n	800b9dc <_free_r+0x78>
 800b9c4:	6824      	ldr	r4, [r4, #0]
 800b9c6:	4421      	add	r1, r4
 800b9c8:	1854      	adds	r4, r2, r1
 800b9ca:	42a3      	cmp	r3, r4
 800b9cc:	6011      	str	r1, [r2, #0]
 800b9ce:	d1dd      	bne.n	800b98c <_free_r+0x28>
 800b9d0:	681c      	ldr	r4, [r3, #0]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	6053      	str	r3, [r2, #4]
 800b9d6:	4421      	add	r1, r4
 800b9d8:	6011      	str	r1, [r2, #0]
 800b9da:	e7d7      	b.n	800b98c <_free_r+0x28>
 800b9dc:	d902      	bls.n	800b9e4 <_free_r+0x80>
 800b9de:	230c      	movs	r3, #12
 800b9e0:	6003      	str	r3, [r0, #0]
 800b9e2:	e7d3      	b.n	800b98c <_free_r+0x28>
 800b9e4:	6825      	ldr	r5, [r4, #0]
 800b9e6:	1961      	adds	r1, r4, r5
 800b9e8:	428b      	cmp	r3, r1
 800b9ea:	bf04      	itt	eq
 800b9ec:	6819      	ldreq	r1, [r3, #0]
 800b9ee:	685b      	ldreq	r3, [r3, #4]
 800b9f0:	6063      	str	r3, [r4, #4]
 800b9f2:	bf04      	itt	eq
 800b9f4:	1949      	addeq	r1, r1, r5
 800b9f6:	6021      	streq	r1, [r4, #0]
 800b9f8:	6054      	str	r4, [r2, #4]
 800b9fa:	e7c7      	b.n	800b98c <_free_r+0x28>
 800b9fc:	b003      	add	sp, #12
 800b9fe:	bd30      	pop	{r4, r5, pc}
 800ba00:	200026bc 	.word	0x200026bc

0800ba04 <_malloc_r>:
 800ba04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba06:	1ccd      	adds	r5, r1, #3
 800ba08:	f025 0503 	bic.w	r5, r5, #3
 800ba0c:	3508      	adds	r5, #8
 800ba0e:	2d0c      	cmp	r5, #12
 800ba10:	bf38      	it	cc
 800ba12:	250c      	movcc	r5, #12
 800ba14:	2d00      	cmp	r5, #0
 800ba16:	4606      	mov	r6, r0
 800ba18:	db01      	blt.n	800ba1e <_malloc_r+0x1a>
 800ba1a:	42a9      	cmp	r1, r5
 800ba1c:	d903      	bls.n	800ba26 <_malloc_r+0x22>
 800ba1e:	230c      	movs	r3, #12
 800ba20:	6033      	str	r3, [r6, #0]
 800ba22:	2000      	movs	r0, #0
 800ba24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba26:	f000 fc03 	bl	800c230 <__malloc_lock>
 800ba2a:	4921      	ldr	r1, [pc, #132]	; (800bab0 <_malloc_r+0xac>)
 800ba2c:	680a      	ldr	r2, [r1, #0]
 800ba2e:	4614      	mov	r4, r2
 800ba30:	b99c      	cbnz	r4, 800ba5a <_malloc_r+0x56>
 800ba32:	4f20      	ldr	r7, [pc, #128]	; (800bab4 <_malloc_r+0xb0>)
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	b923      	cbnz	r3, 800ba42 <_malloc_r+0x3e>
 800ba38:	4621      	mov	r1, r4
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f000 faf2 	bl	800c024 <_sbrk_r>
 800ba40:	6038      	str	r0, [r7, #0]
 800ba42:	4629      	mov	r1, r5
 800ba44:	4630      	mov	r0, r6
 800ba46:	f000 faed 	bl	800c024 <_sbrk_r>
 800ba4a:	1c43      	adds	r3, r0, #1
 800ba4c:	d123      	bne.n	800ba96 <_malloc_r+0x92>
 800ba4e:	230c      	movs	r3, #12
 800ba50:	6033      	str	r3, [r6, #0]
 800ba52:	4630      	mov	r0, r6
 800ba54:	f000 fbf2 	bl	800c23c <__malloc_unlock>
 800ba58:	e7e3      	b.n	800ba22 <_malloc_r+0x1e>
 800ba5a:	6823      	ldr	r3, [r4, #0]
 800ba5c:	1b5b      	subs	r3, r3, r5
 800ba5e:	d417      	bmi.n	800ba90 <_malloc_r+0x8c>
 800ba60:	2b0b      	cmp	r3, #11
 800ba62:	d903      	bls.n	800ba6c <_malloc_r+0x68>
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	441c      	add	r4, r3
 800ba68:	6025      	str	r5, [r4, #0]
 800ba6a:	e004      	b.n	800ba76 <_malloc_r+0x72>
 800ba6c:	6863      	ldr	r3, [r4, #4]
 800ba6e:	42a2      	cmp	r2, r4
 800ba70:	bf0c      	ite	eq
 800ba72:	600b      	streq	r3, [r1, #0]
 800ba74:	6053      	strne	r3, [r2, #4]
 800ba76:	4630      	mov	r0, r6
 800ba78:	f000 fbe0 	bl	800c23c <__malloc_unlock>
 800ba7c:	f104 000b 	add.w	r0, r4, #11
 800ba80:	1d23      	adds	r3, r4, #4
 800ba82:	f020 0007 	bic.w	r0, r0, #7
 800ba86:	1ac2      	subs	r2, r0, r3
 800ba88:	d0cc      	beq.n	800ba24 <_malloc_r+0x20>
 800ba8a:	1a1b      	subs	r3, r3, r0
 800ba8c:	50a3      	str	r3, [r4, r2]
 800ba8e:	e7c9      	b.n	800ba24 <_malloc_r+0x20>
 800ba90:	4622      	mov	r2, r4
 800ba92:	6864      	ldr	r4, [r4, #4]
 800ba94:	e7cc      	b.n	800ba30 <_malloc_r+0x2c>
 800ba96:	1cc4      	adds	r4, r0, #3
 800ba98:	f024 0403 	bic.w	r4, r4, #3
 800ba9c:	42a0      	cmp	r0, r4
 800ba9e:	d0e3      	beq.n	800ba68 <_malloc_r+0x64>
 800baa0:	1a21      	subs	r1, r4, r0
 800baa2:	4630      	mov	r0, r6
 800baa4:	f000 fabe 	bl	800c024 <_sbrk_r>
 800baa8:	3001      	adds	r0, #1
 800baaa:	d1dd      	bne.n	800ba68 <_malloc_r+0x64>
 800baac:	e7cf      	b.n	800ba4e <_malloc_r+0x4a>
 800baae:	bf00      	nop
 800bab0:	200026bc 	.word	0x200026bc
 800bab4:	200026c0 	.word	0x200026c0

0800bab8 <__ssputs_r>:
 800bab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800babc:	688e      	ldr	r6, [r1, #8]
 800babe:	429e      	cmp	r6, r3
 800bac0:	4682      	mov	sl, r0
 800bac2:	460c      	mov	r4, r1
 800bac4:	4690      	mov	r8, r2
 800bac6:	461f      	mov	r7, r3
 800bac8:	d838      	bhi.n	800bb3c <__ssputs_r+0x84>
 800baca:	898a      	ldrh	r2, [r1, #12]
 800bacc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bad0:	d032      	beq.n	800bb38 <__ssputs_r+0x80>
 800bad2:	6825      	ldr	r5, [r4, #0]
 800bad4:	6909      	ldr	r1, [r1, #16]
 800bad6:	eba5 0901 	sub.w	r9, r5, r1
 800bada:	6965      	ldr	r5, [r4, #20]
 800badc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bae0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bae4:	3301      	adds	r3, #1
 800bae6:	444b      	add	r3, r9
 800bae8:	106d      	asrs	r5, r5, #1
 800baea:	429d      	cmp	r5, r3
 800baec:	bf38      	it	cc
 800baee:	461d      	movcc	r5, r3
 800baf0:	0553      	lsls	r3, r2, #21
 800baf2:	d531      	bpl.n	800bb58 <__ssputs_r+0xa0>
 800baf4:	4629      	mov	r1, r5
 800baf6:	f7ff ff85 	bl	800ba04 <_malloc_r>
 800bafa:	4606      	mov	r6, r0
 800bafc:	b950      	cbnz	r0, 800bb14 <__ssputs_r+0x5c>
 800bafe:	230c      	movs	r3, #12
 800bb00:	f8ca 3000 	str.w	r3, [sl]
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb0a:	81a3      	strh	r3, [r4, #12]
 800bb0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb14:	6921      	ldr	r1, [r4, #16]
 800bb16:	464a      	mov	r2, r9
 800bb18:	f7fd fd92 	bl	8009640 <memcpy>
 800bb1c:	89a3      	ldrh	r3, [r4, #12]
 800bb1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb26:	81a3      	strh	r3, [r4, #12]
 800bb28:	6126      	str	r6, [r4, #16]
 800bb2a:	6165      	str	r5, [r4, #20]
 800bb2c:	444e      	add	r6, r9
 800bb2e:	eba5 0509 	sub.w	r5, r5, r9
 800bb32:	6026      	str	r6, [r4, #0]
 800bb34:	60a5      	str	r5, [r4, #8]
 800bb36:	463e      	mov	r6, r7
 800bb38:	42be      	cmp	r6, r7
 800bb3a:	d900      	bls.n	800bb3e <__ssputs_r+0x86>
 800bb3c:	463e      	mov	r6, r7
 800bb3e:	4632      	mov	r2, r6
 800bb40:	6820      	ldr	r0, [r4, #0]
 800bb42:	4641      	mov	r1, r8
 800bb44:	f000 fb5a 	bl	800c1fc <memmove>
 800bb48:	68a3      	ldr	r3, [r4, #8]
 800bb4a:	6822      	ldr	r2, [r4, #0]
 800bb4c:	1b9b      	subs	r3, r3, r6
 800bb4e:	4432      	add	r2, r6
 800bb50:	60a3      	str	r3, [r4, #8]
 800bb52:	6022      	str	r2, [r4, #0]
 800bb54:	2000      	movs	r0, #0
 800bb56:	e7db      	b.n	800bb10 <__ssputs_r+0x58>
 800bb58:	462a      	mov	r2, r5
 800bb5a:	f000 fb75 	bl	800c248 <_realloc_r>
 800bb5e:	4606      	mov	r6, r0
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d1e1      	bne.n	800bb28 <__ssputs_r+0x70>
 800bb64:	6921      	ldr	r1, [r4, #16]
 800bb66:	4650      	mov	r0, sl
 800bb68:	f7ff fefc 	bl	800b964 <_free_r>
 800bb6c:	e7c7      	b.n	800bafe <__ssputs_r+0x46>
	...

0800bb70 <_svfiprintf_r>:
 800bb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	4698      	mov	r8, r3
 800bb76:	898b      	ldrh	r3, [r1, #12]
 800bb78:	061b      	lsls	r3, r3, #24
 800bb7a:	b09d      	sub	sp, #116	; 0x74
 800bb7c:	4607      	mov	r7, r0
 800bb7e:	460d      	mov	r5, r1
 800bb80:	4614      	mov	r4, r2
 800bb82:	d50e      	bpl.n	800bba2 <_svfiprintf_r+0x32>
 800bb84:	690b      	ldr	r3, [r1, #16]
 800bb86:	b963      	cbnz	r3, 800bba2 <_svfiprintf_r+0x32>
 800bb88:	2140      	movs	r1, #64	; 0x40
 800bb8a:	f7ff ff3b 	bl	800ba04 <_malloc_r>
 800bb8e:	6028      	str	r0, [r5, #0]
 800bb90:	6128      	str	r0, [r5, #16]
 800bb92:	b920      	cbnz	r0, 800bb9e <_svfiprintf_r+0x2e>
 800bb94:	230c      	movs	r3, #12
 800bb96:	603b      	str	r3, [r7, #0]
 800bb98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb9c:	e0d1      	b.n	800bd42 <_svfiprintf_r+0x1d2>
 800bb9e:	2340      	movs	r3, #64	; 0x40
 800bba0:	616b      	str	r3, [r5, #20]
 800bba2:	2300      	movs	r3, #0
 800bba4:	9309      	str	r3, [sp, #36]	; 0x24
 800bba6:	2320      	movs	r3, #32
 800bba8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbac:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbb0:	2330      	movs	r3, #48	; 0x30
 800bbb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd5c <_svfiprintf_r+0x1ec>
 800bbb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbba:	f04f 0901 	mov.w	r9, #1
 800bbbe:	4623      	mov	r3, r4
 800bbc0:	469a      	mov	sl, r3
 800bbc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbc6:	b10a      	cbz	r2, 800bbcc <_svfiprintf_r+0x5c>
 800bbc8:	2a25      	cmp	r2, #37	; 0x25
 800bbca:	d1f9      	bne.n	800bbc0 <_svfiprintf_r+0x50>
 800bbcc:	ebba 0b04 	subs.w	fp, sl, r4
 800bbd0:	d00b      	beq.n	800bbea <_svfiprintf_r+0x7a>
 800bbd2:	465b      	mov	r3, fp
 800bbd4:	4622      	mov	r2, r4
 800bbd6:	4629      	mov	r1, r5
 800bbd8:	4638      	mov	r0, r7
 800bbda:	f7ff ff6d 	bl	800bab8 <__ssputs_r>
 800bbde:	3001      	adds	r0, #1
 800bbe0:	f000 80aa 	beq.w	800bd38 <_svfiprintf_r+0x1c8>
 800bbe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbe6:	445a      	add	r2, fp
 800bbe8:	9209      	str	r2, [sp, #36]	; 0x24
 800bbea:	f89a 3000 	ldrb.w	r3, [sl]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	f000 80a2 	beq.w	800bd38 <_svfiprintf_r+0x1c8>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbfe:	f10a 0a01 	add.w	sl, sl, #1
 800bc02:	9304      	str	r3, [sp, #16]
 800bc04:	9307      	str	r3, [sp, #28]
 800bc06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc0a:	931a      	str	r3, [sp, #104]	; 0x68
 800bc0c:	4654      	mov	r4, sl
 800bc0e:	2205      	movs	r2, #5
 800bc10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc14:	4851      	ldr	r0, [pc, #324]	; (800bd5c <_svfiprintf_r+0x1ec>)
 800bc16:	f7f4 fae3 	bl	80001e0 <memchr>
 800bc1a:	9a04      	ldr	r2, [sp, #16]
 800bc1c:	b9d8      	cbnz	r0, 800bc56 <_svfiprintf_r+0xe6>
 800bc1e:	06d0      	lsls	r0, r2, #27
 800bc20:	bf44      	itt	mi
 800bc22:	2320      	movmi	r3, #32
 800bc24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc28:	0711      	lsls	r1, r2, #28
 800bc2a:	bf44      	itt	mi
 800bc2c:	232b      	movmi	r3, #43	; 0x2b
 800bc2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc32:	f89a 3000 	ldrb.w	r3, [sl]
 800bc36:	2b2a      	cmp	r3, #42	; 0x2a
 800bc38:	d015      	beq.n	800bc66 <_svfiprintf_r+0xf6>
 800bc3a:	9a07      	ldr	r2, [sp, #28]
 800bc3c:	4654      	mov	r4, sl
 800bc3e:	2000      	movs	r0, #0
 800bc40:	f04f 0c0a 	mov.w	ip, #10
 800bc44:	4621      	mov	r1, r4
 800bc46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc4a:	3b30      	subs	r3, #48	; 0x30
 800bc4c:	2b09      	cmp	r3, #9
 800bc4e:	d94e      	bls.n	800bcee <_svfiprintf_r+0x17e>
 800bc50:	b1b0      	cbz	r0, 800bc80 <_svfiprintf_r+0x110>
 800bc52:	9207      	str	r2, [sp, #28]
 800bc54:	e014      	b.n	800bc80 <_svfiprintf_r+0x110>
 800bc56:	eba0 0308 	sub.w	r3, r0, r8
 800bc5a:	fa09 f303 	lsl.w	r3, r9, r3
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	9304      	str	r3, [sp, #16]
 800bc62:	46a2      	mov	sl, r4
 800bc64:	e7d2      	b.n	800bc0c <_svfiprintf_r+0x9c>
 800bc66:	9b03      	ldr	r3, [sp, #12]
 800bc68:	1d19      	adds	r1, r3, #4
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	9103      	str	r1, [sp, #12]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	bfbb      	ittet	lt
 800bc72:	425b      	neglt	r3, r3
 800bc74:	f042 0202 	orrlt.w	r2, r2, #2
 800bc78:	9307      	strge	r3, [sp, #28]
 800bc7a:	9307      	strlt	r3, [sp, #28]
 800bc7c:	bfb8      	it	lt
 800bc7e:	9204      	strlt	r2, [sp, #16]
 800bc80:	7823      	ldrb	r3, [r4, #0]
 800bc82:	2b2e      	cmp	r3, #46	; 0x2e
 800bc84:	d10c      	bne.n	800bca0 <_svfiprintf_r+0x130>
 800bc86:	7863      	ldrb	r3, [r4, #1]
 800bc88:	2b2a      	cmp	r3, #42	; 0x2a
 800bc8a:	d135      	bne.n	800bcf8 <_svfiprintf_r+0x188>
 800bc8c:	9b03      	ldr	r3, [sp, #12]
 800bc8e:	1d1a      	adds	r2, r3, #4
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	9203      	str	r2, [sp, #12]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	bfb8      	it	lt
 800bc98:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bc9c:	3402      	adds	r4, #2
 800bc9e:	9305      	str	r3, [sp, #20]
 800bca0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd6c <_svfiprintf_r+0x1fc>
 800bca4:	7821      	ldrb	r1, [r4, #0]
 800bca6:	2203      	movs	r2, #3
 800bca8:	4650      	mov	r0, sl
 800bcaa:	f7f4 fa99 	bl	80001e0 <memchr>
 800bcae:	b140      	cbz	r0, 800bcc2 <_svfiprintf_r+0x152>
 800bcb0:	2340      	movs	r3, #64	; 0x40
 800bcb2:	eba0 000a 	sub.w	r0, r0, sl
 800bcb6:	fa03 f000 	lsl.w	r0, r3, r0
 800bcba:	9b04      	ldr	r3, [sp, #16]
 800bcbc:	4303      	orrs	r3, r0
 800bcbe:	3401      	adds	r4, #1
 800bcc0:	9304      	str	r3, [sp, #16]
 800bcc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcc6:	4826      	ldr	r0, [pc, #152]	; (800bd60 <_svfiprintf_r+0x1f0>)
 800bcc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bccc:	2206      	movs	r2, #6
 800bcce:	f7f4 fa87 	bl	80001e0 <memchr>
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d038      	beq.n	800bd48 <_svfiprintf_r+0x1d8>
 800bcd6:	4b23      	ldr	r3, [pc, #140]	; (800bd64 <_svfiprintf_r+0x1f4>)
 800bcd8:	bb1b      	cbnz	r3, 800bd22 <_svfiprintf_r+0x1b2>
 800bcda:	9b03      	ldr	r3, [sp, #12]
 800bcdc:	3307      	adds	r3, #7
 800bcde:	f023 0307 	bic.w	r3, r3, #7
 800bce2:	3308      	adds	r3, #8
 800bce4:	9303      	str	r3, [sp, #12]
 800bce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bce8:	4433      	add	r3, r6
 800bcea:	9309      	str	r3, [sp, #36]	; 0x24
 800bcec:	e767      	b.n	800bbbe <_svfiprintf_r+0x4e>
 800bcee:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcf2:	460c      	mov	r4, r1
 800bcf4:	2001      	movs	r0, #1
 800bcf6:	e7a5      	b.n	800bc44 <_svfiprintf_r+0xd4>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	3401      	adds	r4, #1
 800bcfc:	9305      	str	r3, [sp, #20]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	f04f 0c0a 	mov.w	ip, #10
 800bd04:	4620      	mov	r0, r4
 800bd06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd0a:	3a30      	subs	r2, #48	; 0x30
 800bd0c:	2a09      	cmp	r2, #9
 800bd0e:	d903      	bls.n	800bd18 <_svfiprintf_r+0x1a8>
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d0c5      	beq.n	800bca0 <_svfiprintf_r+0x130>
 800bd14:	9105      	str	r1, [sp, #20]
 800bd16:	e7c3      	b.n	800bca0 <_svfiprintf_r+0x130>
 800bd18:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e7f0      	b.n	800bd04 <_svfiprintf_r+0x194>
 800bd22:	ab03      	add	r3, sp, #12
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	462a      	mov	r2, r5
 800bd28:	4b0f      	ldr	r3, [pc, #60]	; (800bd68 <_svfiprintf_r+0x1f8>)
 800bd2a:	a904      	add	r1, sp, #16
 800bd2c:	4638      	mov	r0, r7
 800bd2e:	f7fd fd3d 	bl	80097ac <_printf_float>
 800bd32:	1c42      	adds	r2, r0, #1
 800bd34:	4606      	mov	r6, r0
 800bd36:	d1d6      	bne.n	800bce6 <_svfiprintf_r+0x176>
 800bd38:	89ab      	ldrh	r3, [r5, #12]
 800bd3a:	065b      	lsls	r3, r3, #25
 800bd3c:	f53f af2c 	bmi.w	800bb98 <_svfiprintf_r+0x28>
 800bd40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd42:	b01d      	add	sp, #116	; 0x74
 800bd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd48:	ab03      	add	r3, sp, #12
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	462a      	mov	r2, r5
 800bd4e:	4b06      	ldr	r3, [pc, #24]	; (800bd68 <_svfiprintf_r+0x1f8>)
 800bd50:	a904      	add	r1, sp, #16
 800bd52:	4638      	mov	r0, r7
 800bd54:	f7fd ffce 	bl	8009cf4 <_printf_i>
 800bd58:	e7eb      	b.n	800bd32 <_svfiprintf_r+0x1c2>
 800bd5a:	bf00      	nop
 800bd5c:	0800f534 	.word	0x0800f534
 800bd60:	0800f53e 	.word	0x0800f53e
 800bd64:	080097ad 	.word	0x080097ad
 800bd68:	0800bab9 	.word	0x0800bab9
 800bd6c:	0800f53a 	.word	0x0800f53a

0800bd70 <__sfputc_r>:
 800bd70:	6893      	ldr	r3, [r2, #8]
 800bd72:	3b01      	subs	r3, #1
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	b410      	push	{r4}
 800bd78:	6093      	str	r3, [r2, #8]
 800bd7a:	da08      	bge.n	800bd8e <__sfputc_r+0x1e>
 800bd7c:	6994      	ldr	r4, [r2, #24]
 800bd7e:	42a3      	cmp	r3, r4
 800bd80:	db01      	blt.n	800bd86 <__sfputc_r+0x16>
 800bd82:	290a      	cmp	r1, #10
 800bd84:	d103      	bne.n	800bd8e <__sfputc_r+0x1e>
 800bd86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd8a:	f7fe b8f9 	b.w	8009f80 <__swbuf_r>
 800bd8e:	6813      	ldr	r3, [r2, #0]
 800bd90:	1c58      	adds	r0, r3, #1
 800bd92:	6010      	str	r0, [r2, #0]
 800bd94:	7019      	strb	r1, [r3, #0]
 800bd96:	4608      	mov	r0, r1
 800bd98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <__sfputs_r>:
 800bd9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda0:	4606      	mov	r6, r0
 800bda2:	460f      	mov	r7, r1
 800bda4:	4614      	mov	r4, r2
 800bda6:	18d5      	adds	r5, r2, r3
 800bda8:	42ac      	cmp	r4, r5
 800bdaa:	d101      	bne.n	800bdb0 <__sfputs_r+0x12>
 800bdac:	2000      	movs	r0, #0
 800bdae:	e007      	b.n	800bdc0 <__sfputs_r+0x22>
 800bdb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb4:	463a      	mov	r2, r7
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	f7ff ffda 	bl	800bd70 <__sfputc_r>
 800bdbc:	1c43      	adds	r3, r0, #1
 800bdbe:	d1f3      	bne.n	800bda8 <__sfputs_r+0xa>
 800bdc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bdc4 <_vfiprintf_r>:
 800bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc8:	460d      	mov	r5, r1
 800bdca:	b09d      	sub	sp, #116	; 0x74
 800bdcc:	4614      	mov	r4, r2
 800bdce:	4698      	mov	r8, r3
 800bdd0:	4606      	mov	r6, r0
 800bdd2:	b118      	cbz	r0, 800bddc <_vfiprintf_r+0x18>
 800bdd4:	6983      	ldr	r3, [r0, #24]
 800bdd6:	b90b      	cbnz	r3, 800bddc <_vfiprintf_r+0x18>
 800bdd8:	f7ff f924 	bl	800b024 <__sinit>
 800bddc:	4b89      	ldr	r3, [pc, #548]	; (800c004 <_vfiprintf_r+0x240>)
 800bdde:	429d      	cmp	r5, r3
 800bde0:	d11b      	bne.n	800be1a <_vfiprintf_r+0x56>
 800bde2:	6875      	ldr	r5, [r6, #4]
 800bde4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bde6:	07d9      	lsls	r1, r3, #31
 800bde8:	d405      	bmi.n	800bdf6 <_vfiprintf_r+0x32>
 800bdea:	89ab      	ldrh	r3, [r5, #12]
 800bdec:	059a      	lsls	r2, r3, #22
 800bdee:	d402      	bmi.n	800bdf6 <_vfiprintf_r+0x32>
 800bdf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdf2:	f7ff f9ba 	bl	800b16a <__retarget_lock_acquire_recursive>
 800bdf6:	89ab      	ldrh	r3, [r5, #12]
 800bdf8:	071b      	lsls	r3, r3, #28
 800bdfa:	d501      	bpl.n	800be00 <_vfiprintf_r+0x3c>
 800bdfc:	692b      	ldr	r3, [r5, #16]
 800bdfe:	b9eb      	cbnz	r3, 800be3c <_vfiprintf_r+0x78>
 800be00:	4629      	mov	r1, r5
 800be02:	4630      	mov	r0, r6
 800be04:	f7fe f90e 	bl	800a024 <__swsetup_r>
 800be08:	b1c0      	cbz	r0, 800be3c <_vfiprintf_r+0x78>
 800be0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be0c:	07dc      	lsls	r4, r3, #31
 800be0e:	d50e      	bpl.n	800be2e <_vfiprintf_r+0x6a>
 800be10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be14:	b01d      	add	sp, #116	; 0x74
 800be16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1a:	4b7b      	ldr	r3, [pc, #492]	; (800c008 <_vfiprintf_r+0x244>)
 800be1c:	429d      	cmp	r5, r3
 800be1e:	d101      	bne.n	800be24 <_vfiprintf_r+0x60>
 800be20:	68b5      	ldr	r5, [r6, #8]
 800be22:	e7df      	b.n	800bde4 <_vfiprintf_r+0x20>
 800be24:	4b79      	ldr	r3, [pc, #484]	; (800c00c <_vfiprintf_r+0x248>)
 800be26:	429d      	cmp	r5, r3
 800be28:	bf08      	it	eq
 800be2a:	68f5      	ldreq	r5, [r6, #12]
 800be2c:	e7da      	b.n	800bde4 <_vfiprintf_r+0x20>
 800be2e:	89ab      	ldrh	r3, [r5, #12]
 800be30:	0598      	lsls	r0, r3, #22
 800be32:	d4ed      	bmi.n	800be10 <_vfiprintf_r+0x4c>
 800be34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be36:	f7ff f999 	bl	800b16c <__retarget_lock_release_recursive>
 800be3a:	e7e9      	b.n	800be10 <_vfiprintf_r+0x4c>
 800be3c:	2300      	movs	r3, #0
 800be3e:	9309      	str	r3, [sp, #36]	; 0x24
 800be40:	2320      	movs	r3, #32
 800be42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be46:	f8cd 800c 	str.w	r8, [sp, #12]
 800be4a:	2330      	movs	r3, #48	; 0x30
 800be4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c010 <_vfiprintf_r+0x24c>
 800be50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be54:	f04f 0901 	mov.w	r9, #1
 800be58:	4623      	mov	r3, r4
 800be5a:	469a      	mov	sl, r3
 800be5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be60:	b10a      	cbz	r2, 800be66 <_vfiprintf_r+0xa2>
 800be62:	2a25      	cmp	r2, #37	; 0x25
 800be64:	d1f9      	bne.n	800be5a <_vfiprintf_r+0x96>
 800be66:	ebba 0b04 	subs.w	fp, sl, r4
 800be6a:	d00b      	beq.n	800be84 <_vfiprintf_r+0xc0>
 800be6c:	465b      	mov	r3, fp
 800be6e:	4622      	mov	r2, r4
 800be70:	4629      	mov	r1, r5
 800be72:	4630      	mov	r0, r6
 800be74:	f7ff ff93 	bl	800bd9e <__sfputs_r>
 800be78:	3001      	adds	r0, #1
 800be7a:	f000 80aa 	beq.w	800bfd2 <_vfiprintf_r+0x20e>
 800be7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be80:	445a      	add	r2, fp
 800be82:	9209      	str	r2, [sp, #36]	; 0x24
 800be84:	f89a 3000 	ldrb.w	r3, [sl]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f000 80a2 	beq.w	800bfd2 <_vfiprintf_r+0x20e>
 800be8e:	2300      	movs	r3, #0
 800be90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be98:	f10a 0a01 	add.w	sl, sl, #1
 800be9c:	9304      	str	r3, [sp, #16]
 800be9e:	9307      	str	r3, [sp, #28]
 800bea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bea4:	931a      	str	r3, [sp, #104]	; 0x68
 800bea6:	4654      	mov	r4, sl
 800bea8:	2205      	movs	r2, #5
 800beaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beae:	4858      	ldr	r0, [pc, #352]	; (800c010 <_vfiprintf_r+0x24c>)
 800beb0:	f7f4 f996 	bl	80001e0 <memchr>
 800beb4:	9a04      	ldr	r2, [sp, #16]
 800beb6:	b9d8      	cbnz	r0, 800bef0 <_vfiprintf_r+0x12c>
 800beb8:	06d1      	lsls	r1, r2, #27
 800beba:	bf44      	itt	mi
 800bebc:	2320      	movmi	r3, #32
 800bebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bec2:	0713      	lsls	r3, r2, #28
 800bec4:	bf44      	itt	mi
 800bec6:	232b      	movmi	r3, #43	; 0x2b
 800bec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800becc:	f89a 3000 	ldrb.w	r3, [sl]
 800bed0:	2b2a      	cmp	r3, #42	; 0x2a
 800bed2:	d015      	beq.n	800bf00 <_vfiprintf_r+0x13c>
 800bed4:	9a07      	ldr	r2, [sp, #28]
 800bed6:	4654      	mov	r4, sl
 800bed8:	2000      	movs	r0, #0
 800beda:	f04f 0c0a 	mov.w	ip, #10
 800bede:	4621      	mov	r1, r4
 800bee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bee4:	3b30      	subs	r3, #48	; 0x30
 800bee6:	2b09      	cmp	r3, #9
 800bee8:	d94e      	bls.n	800bf88 <_vfiprintf_r+0x1c4>
 800beea:	b1b0      	cbz	r0, 800bf1a <_vfiprintf_r+0x156>
 800beec:	9207      	str	r2, [sp, #28]
 800beee:	e014      	b.n	800bf1a <_vfiprintf_r+0x156>
 800bef0:	eba0 0308 	sub.w	r3, r0, r8
 800bef4:	fa09 f303 	lsl.w	r3, r9, r3
 800bef8:	4313      	orrs	r3, r2
 800befa:	9304      	str	r3, [sp, #16]
 800befc:	46a2      	mov	sl, r4
 800befe:	e7d2      	b.n	800bea6 <_vfiprintf_r+0xe2>
 800bf00:	9b03      	ldr	r3, [sp, #12]
 800bf02:	1d19      	adds	r1, r3, #4
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	9103      	str	r1, [sp, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	bfbb      	ittet	lt
 800bf0c:	425b      	neglt	r3, r3
 800bf0e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf12:	9307      	strge	r3, [sp, #28]
 800bf14:	9307      	strlt	r3, [sp, #28]
 800bf16:	bfb8      	it	lt
 800bf18:	9204      	strlt	r2, [sp, #16]
 800bf1a:	7823      	ldrb	r3, [r4, #0]
 800bf1c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf1e:	d10c      	bne.n	800bf3a <_vfiprintf_r+0x176>
 800bf20:	7863      	ldrb	r3, [r4, #1]
 800bf22:	2b2a      	cmp	r3, #42	; 0x2a
 800bf24:	d135      	bne.n	800bf92 <_vfiprintf_r+0x1ce>
 800bf26:	9b03      	ldr	r3, [sp, #12]
 800bf28:	1d1a      	adds	r2, r3, #4
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	9203      	str	r2, [sp, #12]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	bfb8      	it	lt
 800bf32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bf36:	3402      	adds	r4, #2
 800bf38:	9305      	str	r3, [sp, #20]
 800bf3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c020 <_vfiprintf_r+0x25c>
 800bf3e:	7821      	ldrb	r1, [r4, #0]
 800bf40:	2203      	movs	r2, #3
 800bf42:	4650      	mov	r0, sl
 800bf44:	f7f4 f94c 	bl	80001e0 <memchr>
 800bf48:	b140      	cbz	r0, 800bf5c <_vfiprintf_r+0x198>
 800bf4a:	2340      	movs	r3, #64	; 0x40
 800bf4c:	eba0 000a 	sub.w	r0, r0, sl
 800bf50:	fa03 f000 	lsl.w	r0, r3, r0
 800bf54:	9b04      	ldr	r3, [sp, #16]
 800bf56:	4303      	orrs	r3, r0
 800bf58:	3401      	adds	r4, #1
 800bf5a:	9304      	str	r3, [sp, #16]
 800bf5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf60:	482c      	ldr	r0, [pc, #176]	; (800c014 <_vfiprintf_r+0x250>)
 800bf62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf66:	2206      	movs	r2, #6
 800bf68:	f7f4 f93a 	bl	80001e0 <memchr>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	d03f      	beq.n	800bff0 <_vfiprintf_r+0x22c>
 800bf70:	4b29      	ldr	r3, [pc, #164]	; (800c018 <_vfiprintf_r+0x254>)
 800bf72:	bb1b      	cbnz	r3, 800bfbc <_vfiprintf_r+0x1f8>
 800bf74:	9b03      	ldr	r3, [sp, #12]
 800bf76:	3307      	adds	r3, #7
 800bf78:	f023 0307 	bic.w	r3, r3, #7
 800bf7c:	3308      	adds	r3, #8
 800bf7e:	9303      	str	r3, [sp, #12]
 800bf80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf82:	443b      	add	r3, r7
 800bf84:	9309      	str	r3, [sp, #36]	; 0x24
 800bf86:	e767      	b.n	800be58 <_vfiprintf_r+0x94>
 800bf88:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf8c:	460c      	mov	r4, r1
 800bf8e:	2001      	movs	r0, #1
 800bf90:	e7a5      	b.n	800bede <_vfiprintf_r+0x11a>
 800bf92:	2300      	movs	r3, #0
 800bf94:	3401      	adds	r4, #1
 800bf96:	9305      	str	r3, [sp, #20]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	f04f 0c0a 	mov.w	ip, #10
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfa4:	3a30      	subs	r2, #48	; 0x30
 800bfa6:	2a09      	cmp	r2, #9
 800bfa8:	d903      	bls.n	800bfb2 <_vfiprintf_r+0x1ee>
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d0c5      	beq.n	800bf3a <_vfiprintf_r+0x176>
 800bfae:	9105      	str	r1, [sp, #20]
 800bfb0:	e7c3      	b.n	800bf3a <_vfiprintf_r+0x176>
 800bfb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	2301      	movs	r3, #1
 800bfba:	e7f0      	b.n	800bf9e <_vfiprintf_r+0x1da>
 800bfbc:	ab03      	add	r3, sp, #12
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	462a      	mov	r2, r5
 800bfc2:	4b16      	ldr	r3, [pc, #88]	; (800c01c <_vfiprintf_r+0x258>)
 800bfc4:	a904      	add	r1, sp, #16
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f7fd fbf0 	bl	80097ac <_printf_float>
 800bfcc:	4607      	mov	r7, r0
 800bfce:	1c78      	adds	r0, r7, #1
 800bfd0:	d1d6      	bne.n	800bf80 <_vfiprintf_r+0x1bc>
 800bfd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfd4:	07d9      	lsls	r1, r3, #31
 800bfd6:	d405      	bmi.n	800bfe4 <_vfiprintf_r+0x220>
 800bfd8:	89ab      	ldrh	r3, [r5, #12]
 800bfda:	059a      	lsls	r2, r3, #22
 800bfdc:	d402      	bmi.n	800bfe4 <_vfiprintf_r+0x220>
 800bfde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfe0:	f7ff f8c4 	bl	800b16c <__retarget_lock_release_recursive>
 800bfe4:	89ab      	ldrh	r3, [r5, #12]
 800bfe6:	065b      	lsls	r3, r3, #25
 800bfe8:	f53f af12 	bmi.w	800be10 <_vfiprintf_r+0x4c>
 800bfec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfee:	e711      	b.n	800be14 <_vfiprintf_r+0x50>
 800bff0:	ab03      	add	r3, sp, #12
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	462a      	mov	r2, r5
 800bff6:	4b09      	ldr	r3, [pc, #36]	; (800c01c <_vfiprintf_r+0x258>)
 800bff8:	a904      	add	r1, sp, #16
 800bffa:	4630      	mov	r0, r6
 800bffc:	f7fd fe7a 	bl	8009cf4 <_printf_i>
 800c000:	e7e4      	b.n	800bfcc <_vfiprintf_r+0x208>
 800c002:	bf00      	nop
 800c004:	0800f398 	.word	0x0800f398
 800c008:	0800f3b8 	.word	0x0800f3b8
 800c00c:	0800f378 	.word	0x0800f378
 800c010:	0800f534 	.word	0x0800f534
 800c014:	0800f53e 	.word	0x0800f53e
 800c018:	080097ad 	.word	0x080097ad
 800c01c:	0800bd9f 	.word	0x0800bd9f
 800c020:	0800f53a 	.word	0x0800f53a

0800c024 <_sbrk_r>:
 800c024:	b538      	push	{r3, r4, r5, lr}
 800c026:	4d06      	ldr	r5, [pc, #24]	; (800c040 <_sbrk_r+0x1c>)
 800c028:	2300      	movs	r3, #0
 800c02a:	4604      	mov	r4, r0
 800c02c:	4608      	mov	r0, r1
 800c02e:	602b      	str	r3, [r5, #0]
 800c030:	f7f6 fe0c 	bl	8002c4c <_sbrk>
 800c034:	1c43      	adds	r3, r0, #1
 800c036:	d102      	bne.n	800c03e <_sbrk_r+0x1a>
 800c038:	682b      	ldr	r3, [r5, #0]
 800c03a:	b103      	cbz	r3, 800c03e <_sbrk_r+0x1a>
 800c03c:	6023      	str	r3, [r4, #0]
 800c03e:	bd38      	pop	{r3, r4, r5, pc}
 800c040:	20004a3c 	.word	0x20004a3c

0800c044 <__sread>:
 800c044:	b510      	push	{r4, lr}
 800c046:	460c      	mov	r4, r1
 800c048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c04c:	f000 f922 	bl	800c294 <_read_r>
 800c050:	2800      	cmp	r0, #0
 800c052:	bfab      	itete	ge
 800c054:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c056:	89a3      	ldrhlt	r3, [r4, #12]
 800c058:	181b      	addge	r3, r3, r0
 800c05a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c05e:	bfac      	ite	ge
 800c060:	6563      	strge	r3, [r4, #84]	; 0x54
 800c062:	81a3      	strhlt	r3, [r4, #12]
 800c064:	bd10      	pop	{r4, pc}

0800c066 <__swrite>:
 800c066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c06a:	461f      	mov	r7, r3
 800c06c:	898b      	ldrh	r3, [r1, #12]
 800c06e:	05db      	lsls	r3, r3, #23
 800c070:	4605      	mov	r5, r0
 800c072:	460c      	mov	r4, r1
 800c074:	4616      	mov	r6, r2
 800c076:	d505      	bpl.n	800c084 <__swrite+0x1e>
 800c078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c07c:	2302      	movs	r3, #2
 800c07e:	2200      	movs	r2, #0
 800c080:	f000 f898 	bl	800c1b4 <_lseek_r>
 800c084:	89a3      	ldrh	r3, [r4, #12]
 800c086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c08a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c08e:	81a3      	strh	r3, [r4, #12]
 800c090:	4632      	mov	r2, r6
 800c092:	463b      	mov	r3, r7
 800c094:	4628      	mov	r0, r5
 800c096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c09a:	f000 b817 	b.w	800c0cc <_write_r>

0800c09e <__sseek>:
 800c09e:	b510      	push	{r4, lr}
 800c0a0:	460c      	mov	r4, r1
 800c0a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a6:	f000 f885 	bl	800c1b4 <_lseek_r>
 800c0aa:	1c43      	adds	r3, r0, #1
 800c0ac:	89a3      	ldrh	r3, [r4, #12]
 800c0ae:	bf15      	itete	ne
 800c0b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0ba:	81a3      	strheq	r3, [r4, #12]
 800c0bc:	bf18      	it	ne
 800c0be:	81a3      	strhne	r3, [r4, #12]
 800c0c0:	bd10      	pop	{r4, pc}

0800c0c2 <__sclose>:
 800c0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0c6:	f000 b831 	b.w	800c12c <_close_r>
	...

0800c0cc <_write_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	4d07      	ldr	r5, [pc, #28]	; (800c0ec <_write_r+0x20>)
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	4608      	mov	r0, r1
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	602a      	str	r2, [r5, #0]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	f7f6 fd65 	bl	8002baa <_write>
 800c0e0:	1c43      	adds	r3, r0, #1
 800c0e2:	d102      	bne.n	800c0ea <_write_r+0x1e>
 800c0e4:	682b      	ldr	r3, [r5, #0]
 800c0e6:	b103      	cbz	r3, 800c0ea <_write_r+0x1e>
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	bd38      	pop	{r3, r4, r5, pc}
 800c0ec:	20004a3c 	.word	0x20004a3c

0800c0f0 <__assert_func>:
 800c0f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0f2:	4614      	mov	r4, r2
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	4b09      	ldr	r3, [pc, #36]	; (800c11c <__assert_func+0x2c>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4605      	mov	r5, r0
 800c0fc:	68d8      	ldr	r0, [r3, #12]
 800c0fe:	b14c      	cbz	r4, 800c114 <__assert_func+0x24>
 800c100:	4b07      	ldr	r3, [pc, #28]	; (800c120 <__assert_func+0x30>)
 800c102:	9100      	str	r1, [sp, #0]
 800c104:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c108:	4906      	ldr	r1, [pc, #24]	; (800c124 <__assert_func+0x34>)
 800c10a:	462b      	mov	r3, r5
 800c10c:	f000 f81e 	bl	800c14c <fiprintf>
 800c110:	f000 f8df 	bl	800c2d2 <abort>
 800c114:	4b04      	ldr	r3, [pc, #16]	; (800c128 <__assert_func+0x38>)
 800c116:	461c      	mov	r4, r3
 800c118:	e7f3      	b.n	800c102 <__assert_func+0x12>
 800c11a:	bf00      	nop
 800c11c:	20000034 	.word	0x20000034
 800c120:	0800f545 	.word	0x0800f545
 800c124:	0800f552 	.word	0x0800f552
 800c128:	0800f580 	.word	0x0800f580

0800c12c <_close_r>:
 800c12c:	b538      	push	{r3, r4, r5, lr}
 800c12e:	4d06      	ldr	r5, [pc, #24]	; (800c148 <_close_r+0x1c>)
 800c130:	2300      	movs	r3, #0
 800c132:	4604      	mov	r4, r0
 800c134:	4608      	mov	r0, r1
 800c136:	602b      	str	r3, [r5, #0]
 800c138:	f7f6 fd53 	bl	8002be2 <_close>
 800c13c:	1c43      	adds	r3, r0, #1
 800c13e:	d102      	bne.n	800c146 <_close_r+0x1a>
 800c140:	682b      	ldr	r3, [r5, #0]
 800c142:	b103      	cbz	r3, 800c146 <_close_r+0x1a>
 800c144:	6023      	str	r3, [r4, #0]
 800c146:	bd38      	pop	{r3, r4, r5, pc}
 800c148:	20004a3c 	.word	0x20004a3c

0800c14c <fiprintf>:
 800c14c:	b40e      	push	{r1, r2, r3}
 800c14e:	b503      	push	{r0, r1, lr}
 800c150:	4601      	mov	r1, r0
 800c152:	ab03      	add	r3, sp, #12
 800c154:	4805      	ldr	r0, [pc, #20]	; (800c16c <fiprintf+0x20>)
 800c156:	f853 2b04 	ldr.w	r2, [r3], #4
 800c15a:	6800      	ldr	r0, [r0, #0]
 800c15c:	9301      	str	r3, [sp, #4]
 800c15e:	f7ff fe31 	bl	800bdc4 <_vfiprintf_r>
 800c162:	b002      	add	sp, #8
 800c164:	f85d eb04 	ldr.w	lr, [sp], #4
 800c168:	b003      	add	sp, #12
 800c16a:	4770      	bx	lr
 800c16c:	20000034 	.word	0x20000034

0800c170 <_fstat_r>:
 800c170:	b538      	push	{r3, r4, r5, lr}
 800c172:	4d07      	ldr	r5, [pc, #28]	; (800c190 <_fstat_r+0x20>)
 800c174:	2300      	movs	r3, #0
 800c176:	4604      	mov	r4, r0
 800c178:	4608      	mov	r0, r1
 800c17a:	4611      	mov	r1, r2
 800c17c:	602b      	str	r3, [r5, #0]
 800c17e:	f7f6 fd3c 	bl	8002bfa <_fstat>
 800c182:	1c43      	adds	r3, r0, #1
 800c184:	d102      	bne.n	800c18c <_fstat_r+0x1c>
 800c186:	682b      	ldr	r3, [r5, #0]
 800c188:	b103      	cbz	r3, 800c18c <_fstat_r+0x1c>
 800c18a:	6023      	str	r3, [r4, #0]
 800c18c:	bd38      	pop	{r3, r4, r5, pc}
 800c18e:	bf00      	nop
 800c190:	20004a3c 	.word	0x20004a3c

0800c194 <_isatty_r>:
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	4d06      	ldr	r5, [pc, #24]	; (800c1b0 <_isatty_r+0x1c>)
 800c198:	2300      	movs	r3, #0
 800c19a:	4604      	mov	r4, r0
 800c19c:	4608      	mov	r0, r1
 800c19e:	602b      	str	r3, [r5, #0]
 800c1a0:	f7f6 fd3b 	bl	8002c1a <_isatty>
 800c1a4:	1c43      	adds	r3, r0, #1
 800c1a6:	d102      	bne.n	800c1ae <_isatty_r+0x1a>
 800c1a8:	682b      	ldr	r3, [r5, #0]
 800c1aa:	b103      	cbz	r3, 800c1ae <_isatty_r+0x1a>
 800c1ac:	6023      	str	r3, [r4, #0]
 800c1ae:	bd38      	pop	{r3, r4, r5, pc}
 800c1b0:	20004a3c 	.word	0x20004a3c

0800c1b4 <_lseek_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4d07      	ldr	r5, [pc, #28]	; (800c1d4 <_lseek_r+0x20>)
 800c1b8:	4604      	mov	r4, r0
 800c1ba:	4608      	mov	r0, r1
 800c1bc:	4611      	mov	r1, r2
 800c1be:	2200      	movs	r2, #0
 800c1c0:	602a      	str	r2, [r5, #0]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	f7f6 fd34 	bl	8002c30 <_lseek>
 800c1c8:	1c43      	adds	r3, r0, #1
 800c1ca:	d102      	bne.n	800c1d2 <_lseek_r+0x1e>
 800c1cc:	682b      	ldr	r3, [r5, #0]
 800c1ce:	b103      	cbz	r3, 800c1d2 <_lseek_r+0x1e>
 800c1d0:	6023      	str	r3, [r4, #0]
 800c1d2:	bd38      	pop	{r3, r4, r5, pc}
 800c1d4:	20004a3c 	.word	0x20004a3c

0800c1d8 <__ascii_mbtowc>:
 800c1d8:	b082      	sub	sp, #8
 800c1da:	b901      	cbnz	r1, 800c1de <__ascii_mbtowc+0x6>
 800c1dc:	a901      	add	r1, sp, #4
 800c1de:	b142      	cbz	r2, 800c1f2 <__ascii_mbtowc+0x1a>
 800c1e0:	b14b      	cbz	r3, 800c1f6 <__ascii_mbtowc+0x1e>
 800c1e2:	7813      	ldrb	r3, [r2, #0]
 800c1e4:	600b      	str	r3, [r1, #0]
 800c1e6:	7812      	ldrb	r2, [r2, #0]
 800c1e8:	1e10      	subs	r0, r2, #0
 800c1ea:	bf18      	it	ne
 800c1ec:	2001      	movne	r0, #1
 800c1ee:	b002      	add	sp, #8
 800c1f0:	4770      	bx	lr
 800c1f2:	4610      	mov	r0, r2
 800c1f4:	e7fb      	b.n	800c1ee <__ascii_mbtowc+0x16>
 800c1f6:	f06f 0001 	mvn.w	r0, #1
 800c1fa:	e7f8      	b.n	800c1ee <__ascii_mbtowc+0x16>

0800c1fc <memmove>:
 800c1fc:	4288      	cmp	r0, r1
 800c1fe:	b510      	push	{r4, lr}
 800c200:	eb01 0402 	add.w	r4, r1, r2
 800c204:	d902      	bls.n	800c20c <memmove+0x10>
 800c206:	4284      	cmp	r4, r0
 800c208:	4623      	mov	r3, r4
 800c20a:	d807      	bhi.n	800c21c <memmove+0x20>
 800c20c:	1e43      	subs	r3, r0, #1
 800c20e:	42a1      	cmp	r1, r4
 800c210:	d008      	beq.n	800c224 <memmove+0x28>
 800c212:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c21a:	e7f8      	b.n	800c20e <memmove+0x12>
 800c21c:	4402      	add	r2, r0
 800c21e:	4601      	mov	r1, r0
 800c220:	428a      	cmp	r2, r1
 800c222:	d100      	bne.n	800c226 <memmove+0x2a>
 800c224:	bd10      	pop	{r4, pc}
 800c226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c22a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c22e:	e7f7      	b.n	800c220 <memmove+0x24>

0800c230 <__malloc_lock>:
 800c230:	4801      	ldr	r0, [pc, #4]	; (800c238 <__malloc_lock+0x8>)
 800c232:	f7fe bf9a 	b.w	800b16a <__retarget_lock_acquire_recursive>
 800c236:	bf00      	nop
 800c238:	20004a34 	.word	0x20004a34

0800c23c <__malloc_unlock>:
 800c23c:	4801      	ldr	r0, [pc, #4]	; (800c244 <__malloc_unlock+0x8>)
 800c23e:	f7fe bf95 	b.w	800b16c <__retarget_lock_release_recursive>
 800c242:	bf00      	nop
 800c244:	20004a34 	.word	0x20004a34

0800c248 <_realloc_r>:
 800c248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24a:	4607      	mov	r7, r0
 800c24c:	4614      	mov	r4, r2
 800c24e:	460e      	mov	r6, r1
 800c250:	b921      	cbnz	r1, 800c25c <_realloc_r+0x14>
 800c252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c256:	4611      	mov	r1, r2
 800c258:	f7ff bbd4 	b.w	800ba04 <_malloc_r>
 800c25c:	b922      	cbnz	r2, 800c268 <_realloc_r+0x20>
 800c25e:	f7ff fb81 	bl	800b964 <_free_r>
 800c262:	4625      	mov	r5, r4
 800c264:	4628      	mov	r0, r5
 800c266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c268:	f000 f83a 	bl	800c2e0 <_malloc_usable_size_r>
 800c26c:	42a0      	cmp	r0, r4
 800c26e:	d20f      	bcs.n	800c290 <_realloc_r+0x48>
 800c270:	4621      	mov	r1, r4
 800c272:	4638      	mov	r0, r7
 800c274:	f7ff fbc6 	bl	800ba04 <_malloc_r>
 800c278:	4605      	mov	r5, r0
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d0f2      	beq.n	800c264 <_realloc_r+0x1c>
 800c27e:	4631      	mov	r1, r6
 800c280:	4622      	mov	r2, r4
 800c282:	f7fd f9dd 	bl	8009640 <memcpy>
 800c286:	4631      	mov	r1, r6
 800c288:	4638      	mov	r0, r7
 800c28a:	f7ff fb6b 	bl	800b964 <_free_r>
 800c28e:	e7e9      	b.n	800c264 <_realloc_r+0x1c>
 800c290:	4635      	mov	r5, r6
 800c292:	e7e7      	b.n	800c264 <_realloc_r+0x1c>

0800c294 <_read_r>:
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	4d07      	ldr	r5, [pc, #28]	; (800c2b4 <_read_r+0x20>)
 800c298:	4604      	mov	r4, r0
 800c29a:	4608      	mov	r0, r1
 800c29c:	4611      	mov	r1, r2
 800c29e:	2200      	movs	r2, #0
 800c2a0:	602a      	str	r2, [r5, #0]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	f7f6 fc64 	bl	8002b70 <_read>
 800c2a8:	1c43      	adds	r3, r0, #1
 800c2aa:	d102      	bne.n	800c2b2 <_read_r+0x1e>
 800c2ac:	682b      	ldr	r3, [r5, #0]
 800c2ae:	b103      	cbz	r3, 800c2b2 <_read_r+0x1e>
 800c2b0:	6023      	str	r3, [r4, #0]
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
 800c2b4:	20004a3c 	.word	0x20004a3c

0800c2b8 <__ascii_wctomb>:
 800c2b8:	b149      	cbz	r1, 800c2ce <__ascii_wctomb+0x16>
 800c2ba:	2aff      	cmp	r2, #255	; 0xff
 800c2bc:	bf85      	ittet	hi
 800c2be:	238a      	movhi	r3, #138	; 0x8a
 800c2c0:	6003      	strhi	r3, [r0, #0]
 800c2c2:	700a      	strbls	r2, [r1, #0]
 800c2c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c2c8:	bf98      	it	ls
 800c2ca:	2001      	movls	r0, #1
 800c2cc:	4770      	bx	lr
 800c2ce:	4608      	mov	r0, r1
 800c2d0:	4770      	bx	lr

0800c2d2 <abort>:
 800c2d2:	b508      	push	{r3, lr}
 800c2d4:	2006      	movs	r0, #6
 800c2d6:	f000 f833 	bl	800c340 <raise>
 800c2da:	2001      	movs	r0, #1
 800c2dc:	f7f6 fc3e 	bl	8002b5c <_exit>

0800c2e0 <_malloc_usable_size_r>:
 800c2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2e4:	1f18      	subs	r0, r3, #4
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	bfbc      	itt	lt
 800c2ea:	580b      	ldrlt	r3, [r1, r0]
 800c2ec:	18c0      	addlt	r0, r0, r3
 800c2ee:	4770      	bx	lr

0800c2f0 <_raise_r>:
 800c2f0:	291f      	cmp	r1, #31
 800c2f2:	b538      	push	{r3, r4, r5, lr}
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	460d      	mov	r5, r1
 800c2f8:	d904      	bls.n	800c304 <_raise_r+0x14>
 800c2fa:	2316      	movs	r3, #22
 800c2fc:	6003      	str	r3, [r0, #0]
 800c2fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c306:	b112      	cbz	r2, 800c30e <_raise_r+0x1e>
 800c308:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c30c:	b94b      	cbnz	r3, 800c322 <_raise_r+0x32>
 800c30e:	4620      	mov	r0, r4
 800c310:	f000 f830 	bl	800c374 <_getpid_r>
 800c314:	462a      	mov	r2, r5
 800c316:	4601      	mov	r1, r0
 800c318:	4620      	mov	r0, r4
 800c31a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c31e:	f000 b817 	b.w	800c350 <_kill_r>
 800c322:	2b01      	cmp	r3, #1
 800c324:	d00a      	beq.n	800c33c <_raise_r+0x4c>
 800c326:	1c59      	adds	r1, r3, #1
 800c328:	d103      	bne.n	800c332 <_raise_r+0x42>
 800c32a:	2316      	movs	r3, #22
 800c32c:	6003      	str	r3, [r0, #0]
 800c32e:	2001      	movs	r0, #1
 800c330:	e7e7      	b.n	800c302 <_raise_r+0x12>
 800c332:	2400      	movs	r4, #0
 800c334:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c338:	4628      	mov	r0, r5
 800c33a:	4798      	blx	r3
 800c33c:	2000      	movs	r0, #0
 800c33e:	e7e0      	b.n	800c302 <_raise_r+0x12>

0800c340 <raise>:
 800c340:	4b02      	ldr	r3, [pc, #8]	; (800c34c <raise+0xc>)
 800c342:	4601      	mov	r1, r0
 800c344:	6818      	ldr	r0, [r3, #0]
 800c346:	f7ff bfd3 	b.w	800c2f0 <_raise_r>
 800c34a:	bf00      	nop
 800c34c:	20000034 	.word	0x20000034

0800c350 <_kill_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	4d07      	ldr	r5, [pc, #28]	; (800c370 <_kill_r+0x20>)
 800c354:	2300      	movs	r3, #0
 800c356:	4604      	mov	r4, r0
 800c358:	4608      	mov	r0, r1
 800c35a:	4611      	mov	r1, r2
 800c35c:	602b      	str	r3, [r5, #0]
 800c35e:	f7f6 fbed 	bl	8002b3c <_kill>
 800c362:	1c43      	adds	r3, r0, #1
 800c364:	d102      	bne.n	800c36c <_kill_r+0x1c>
 800c366:	682b      	ldr	r3, [r5, #0]
 800c368:	b103      	cbz	r3, 800c36c <_kill_r+0x1c>
 800c36a:	6023      	str	r3, [r4, #0]
 800c36c:	bd38      	pop	{r3, r4, r5, pc}
 800c36e:	bf00      	nop
 800c370:	20004a3c 	.word	0x20004a3c

0800c374 <_getpid_r>:
 800c374:	f7f6 bbda 	b.w	8002b2c <_getpid>

0800c378 <ceill>:
 800c378:	f000 b802 	b.w	800c380 <ceil>
 800c37c:	0000      	movs	r0, r0
	...

0800c380 <ceil>:
 800c380:	ec51 0b10 	vmov	r0, r1, d0
 800c384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c388:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c38c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c390:	2e13      	cmp	r6, #19
 800c392:	ee10 5a10 	vmov	r5, s0
 800c396:	ee10 8a10 	vmov	r8, s0
 800c39a:	460c      	mov	r4, r1
 800c39c:	dc30      	bgt.n	800c400 <ceil+0x80>
 800c39e:	2e00      	cmp	r6, #0
 800c3a0:	da12      	bge.n	800c3c8 <ceil+0x48>
 800c3a2:	a335      	add	r3, pc, #212	; (adr r3, 800c478 <ceil+0xf8>)
 800c3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a8:	f7f3 ff70 	bl	800028c <__adddf3>
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f7f4 fbb2 	bl	8000b18 <__aeabi_dcmpgt>
 800c3b4:	b128      	cbz	r0, 800c3c2 <ceil+0x42>
 800c3b6:	2c00      	cmp	r4, #0
 800c3b8:	db55      	blt.n	800c466 <ceil+0xe6>
 800c3ba:	432c      	orrs	r4, r5
 800c3bc:	d057      	beq.n	800c46e <ceil+0xee>
 800c3be:	4c30      	ldr	r4, [pc, #192]	; (800c480 <ceil+0x100>)
 800c3c0:	2500      	movs	r5, #0
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	e025      	b.n	800c414 <ceil+0x94>
 800c3c8:	4f2e      	ldr	r7, [pc, #184]	; (800c484 <ceil+0x104>)
 800c3ca:	4137      	asrs	r7, r6
 800c3cc:	ea01 0307 	and.w	r3, r1, r7
 800c3d0:	4303      	orrs	r3, r0
 800c3d2:	d01f      	beq.n	800c414 <ceil+0x94>
 800c3d4:	a328      	add	r3, pc, #160	; (adr r3, 800c478 <ceil+0xf8>)
 800c3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3da:	f7f3 ff57 	bl	800028c <__adddf3>
 800c3de:	2200      	movs	r2, #0
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f7f4 fb99 	bl	8000b18 <__aeabi_dcmpgt>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d0eb      	beq.n	800c3c2 <ceil+0x42>
 800c3ea:	2c00      	cmp	r4, #0
 800c3ec:	bfc2      	ittt	gt
 800c3ee:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800c3f2:	fa43 f606 	asrgt.w	r6, r3, r6
 800c3f6:	19a4      	addgt	r4, r4, r6
 800c3f8:	ea24 0407 	bic.w	r4, r4, r7
 800c3fc:	2500      	movs	r5, #0
 800c3fe:	e7e0      	b.n	800c3c2 <ceil+0x42>
 800c400:	2e33      	cmp	r6, #51	; 0x33
 800c402:	dd0b      	ble.n	800c41c <ceil+0x9c>
 800c404:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c408:	d104      	bne.n	800c414 <ceil+0x94>
 800c40a:	ee10 2a10 	vmov	r2, s0
 800c40e:	460b      	mov	r3, r1
 800c410:	f7f3 ff3c 	bl	800028c <__adddf3>
 800c414:	ec41 0b10 	vmov	d0, r0, r1
 800c418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c41c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c424:	fa23 f707 	lsr.w	r7, r3, r7
 800c428:	4207      	tst	r7, r0
 800c42a:	d0f3      	beq.n	800c414 <ceil+0x94>
 800c42c:	a312      	add	r3, pc, #72	; (adr r3, 800c478 <ceil+0xf8>)
 800c42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c432:	f7f3 ff2b 	bl	800028c <__adddf3>
 800c436:	2200      	movs	r2, #0
 800c438:	2300      	movs	r3, #0
 800c43a:	f7f4 fb6d 	bl	8000b18 <__aeabi_dcmpgt>
 800c43e:	2800      	cmp	r0, #0
 800c440:	d0bf      	beq.n	800c3c2 <ceil+0x42>
 800c442:	2c00      	cmp	r4, #0
 800c444:	dd02      	ble.n	800c44c <ceil+0xcc>
 800c446:	2e14      	cmp	r6, #20
 800c448:	d103      	bne.n	800c452 <ceil+0xd2>
 800c44a:	3401      	adds	r4, #1
 800c44c:	ea25 0507 	bic.w	r5, r5, r7
 800c450:	e7b7      	b.n	800c3c2 <ceil+0x42>
 800c452:	2301      	movs	r3, #1
 800c454:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c458:	fa03 f606 	lsl.w	r6, r3, r6
 800c45c:	4435      	add	r5, r6
 800c45e:	4545      	cmp	r5, r8
 800c460:	bf38      	it	cc
 800c462:	18e4      	addcc	r4, r4, r3
 800c464:	e7f2      	b.n	800c44c <ceil+0xcc>
 800c466:	2500      	movs	r5, #0
 800c468:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c46c:	e7a9      	b.n	800c3c2 <ceil+0x42>
 800c46e:	4625      	mov	r5, r4
 800c470:	e7a7      	b.n	800c3c2 <ceil+0x42>
 800c472:	bf00      	nop
 800c474:	f3af 8000 	nop.w
 800c478:	8800759c 	.word	0x8800759c
 800c47c:	7e37e43c 	.word	0x7e37e43c
 800c480:	3ff00000 	.word	0x3ff00000
 800c484:	000fffff 	.word	0x000fffff

0800c488 <round>:
 800c488:	ec51 0b10 	vmov	r0, r1, d0
 800c48c:	b570      	push	{r4, r5, r6, lr}
 800c48e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c492:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800c496:	2c13      	cmp	r4, #19
 800c498:	ee10 2a10 	vmov	r2, s0
 800c49c:	460b      	mov	r3, r1
 800c49e:	dc19      	bgt.n	800c4d4 <round+0x4c>
 800c4a0:	2c00      	cmp	r4, #0
 800c4a2:	da09      	bge.n	800c4b8 <round+0x30>
 800c4a4:	3401      	adds	r4, #1
 800c4a6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c4aa:	d103      	bne.n	800c4b4 <round+0x2c>
 800c4ac:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c4b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	e028      	b.n	800c50a <round+0x82>
 800c4b8:	4d15      	ldr	r5, [pc, #84]	; (800c510 <round+0x88>)
 800c4ba:	4125      	asrs	r5, r4
 800c4bc:	ea01 0605 	and.w	r6, r1, r5
 800c4c0:	4332      	orrs	r2, r6
 800c4c2:	d00e      	beq.n	800c4e2 <round+0x5a>
 800c4c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c4c8:	fa42 f404 	asr.w	r4, r2, r4
 800c4cc:	4423      	add	r3, r4
 800c4ce:	ea23 0305 	bic.w	r3, r3, r5
 800c4d2:	e7ef      	b.n	800c4b4 <round+0x2c>
 800c4d4:	2c33      	cmp	r4, #51	; 0x33
 800c4d6:	dd07      	ble.n	800c4e8 <round+0x60>
 800c4d8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c4dc:	d101      	bne.n	800c4e2 <round+0x5a>
 800c4de:	f7f3 fed5 	bl	800028c <__adddf3>
 800c4e2:	ec41 0b10 	vmov	d0, r0, r1
 800c4e6:	bd70      	pop	{r4, r5, r6, pc}
 800c4e8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800c4ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c4f0:	40f5      	lsrs	r5, r6
 800c4f2:	4228      	tst	r0, r5
 800c4f4:	d0f5      	beq.n	800c4e2 <round+0x5a>
 800c4f6:	2101      	movs	r1, #1
 800c4f8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800c4fc:	fa01 f404 	lsl.w	r4, r1, r4
 800c500:	1912      	adds	r2, r2, r4
 800c502:	bf28      	it	cs
 800c504:	185b      	addcs	r3, r3, r1
 800c506:	ea22 0105 	bic.w	r1, r2, r5
 800c50a:	4608      	mov	r0, r1
 800c50c:	4619      	mov	r1, r3
 800c50e:	e7e8      	b.n	800c4e2 <round+0x5a>
 800c510:	000fffff 	.word	0x000fffff

0800c514 <atan2>:
 800c514:	f000 b8c4 	b.w	800c6a0 <__ieee754_atan2>

0800c518 <log>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	ed2d 8b02 	vpush	{d8}
 800c51e:	ec55 4b10 	vmov	r4, r5, d0
 800c522:	f000 f989 	bl	800c838 <__ieee754_log>
 800c526:	4b1e      	ldr	r3, [pc, #120]	; (800c5a0 <log+0x88>)
 800c528:	eeb0 8a40 	vmov.f32	s16, s0
 800c52c:	eef0 8a60 	vmov.f32	s17, s1
 800c530:	f993 3000 	ldrsb.w	r3, [r3]
 800c534:	3301      	adds	r3, #1
 800c536:	d01a      	beq.n	800c56e <log+0x56>
 800c538:	4622      	mov	r2, r4
 800c53a:	462b      	mov	r3, r5
 800c53c:	4620      	mov	r0, r4
 800c53e:	4629      	mov	r1, r5
 800c540:	f7f4 faf4 	bl	8000b2c <__aeabi_dcmpun>
 800c544:	b998      	cbnz	r0, 800c56e <log+0x56>
 800c546:	2200      	movs	r2, #0
 800c548:	2300      	movs	r3, #0
 800c54a:	4620      	mov	r0, r4
 800c54c:	4629      	mov	r1, r5
 800c54e:	f7f4 fae3 	bl	8000b18 <__aeabi_dcmpgt>
 800c552:	b960      	cbnz	r0, 800c56e <log+0x56>
 800c554:	2200      	movs	r2, #0
 800c556:	2300      	movs	r3, #0
 800c558:	4620      	mov	r0, r4
 800c55a:	4629      	mov	r1, r5
 800c55c:	f7f4 fab4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c560:	b160      	cbz	r0, 800c57c <log+0x64>
 800c562:	f7fd f843 	bl	80095ec <__errno>
 800c566:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800c598 <log+0x80>
 800c56a:	2322      	movs	r3, #34	; 0x22
 800c56c:	6003      	str	r3, [r0, #0]
 800c56e:	eeb0 0a48 	vmov.f32	s0, s16
 800c572:	eef0 0a68 	vmov.f32	s1, s17
 800c576:	ecbd 8b02 	vpop	{d8}
 800c57a:	bd38      	pop	{r3, r4, r5, pc}
 800c57c:	f7fd f836 	bl	80095ec <__errno>
 800c580:	ecbd 8b02 	vpop	{d8}
 800c584:	2321      	movs	r3, #33	; 0x21
 800c586:	6003      	str	r3, [r0, #0]
 800c588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c58c:	4805      	ldr	r0, [pc, #20]	; (800c5a4 <log+0x8c>)
 800c58e:	f000 bdfb 	b.w	800d188 <nan>
 800c592:	bf00      	nop
 800c594:	f3af 8000 	nop.w
 800c598:	00000000 	.word	0x00000000
 800c59c:	fff00000 	.word	0xfff00000
 800c5a0:	20000204 	.word	0x20000204
 800c5a4:	0800f580 	.word	0x0800f580

0800c5a8 <log10>:
 800c5a8:	b538      	push	{r3, r4, r5, lr}
 800c5aa:	ed2d 8b02 	vpush	{d8}
 800c5ae:	ec55 4b10 	vmov	r4, r5, d0
 800c5b2:	f000 fafd 	bl	800cbb0 <__ieee754_log10>
 800c5b6:	4b1e      	ldr	r3, [pc, #120]	; (800c630 <log10+0x88>)
 800c5b8:	eeb0 8a40 	vmov.f32	s16, s0
 800c5bc:	eef0 8a60 	vmov.f32	s17, s1
 800c5c0:	f993 3000 	ldrsb.w	r3, [r3]
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	d01a      	beq.n	800c5fe <log10+0x56>
 800c5c8:	4622      	mov	r2, r4
 800c5ca:	462b      	mov	r3, r5
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	4629      	mov	r1, r5
 800c5d0:	f7f4 faac 	bl	8000b2c <__aeabi_dcmpun>
 800c5d4:	b998      	cbnz	r0, 800c5fe <log10+0x56>
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	2300      	movs	r3, #0
 800c5da:	4620      	mov	r0, r4
 800c5dc:	4629      	mov	r1, r5
 800c5de:	f7f4 fa87 	bl	8000af0 <__aeabi_dcmple>
 800c5e2:	b160      	cbz	r0, 800c5fe <log10+0x56>
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	4629      	mov	r1, r5
 800c5ec:	f7f4 fa6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5f0:	b160      	cbz	r0, 800c60c <log10+0x64>
 800c5f2:	f7fc fffb 	bl	80095ec <__errno>
 800c5f6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800c628 <log10+0x80>
 800c5fa:	2322      	movs	r3, #34	; 0x22
 800c5fc:	6003      	str	r3, [r0, #0]
 800c5fe:	eeb0 0a48 	vmov.f32	s0, s16
 800c602:	eef0 0a68 	vmov.f32	s1, s17
 800c606:	ecbd 8b02 	vpop	{d8}
 800c60a:	bd38      	pop	{r3, r4, r5, pc}
 800c60c:	f7fc ffee 	bl	80095ec <__errno>
 800c610:	ecbd 8b02 	vpop	{d8}
 800c614:	2321      	movs	r3, #33	; 0x21
 800c616:	6003      	str	r3, [r0, #0]
 800c618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c61c:	4805      	ldr	r0, [pc, #20]	; (800c634 <log10+0x8c>)
 800c61e:	f000 bdb3 	b.w	800d188 <nan>
 800c622:	bf00      	nop
 800c624:	f3af 8000 	nop.w
 800c628:	00000000 	.word	0x00000000
 800c62c:	fff00000 	.word	0xfff00000
 800c630:	20000204 	.word	0x20000204
 800c634:	0800f580 	.word	0x0800f580

0800c638 <sqrt>:
 800c638:	b538      	push	{r3, r4, r5, lr}
 800c63a:	ed2d 8b02 	vpush	{d8}
 800c63e:	ec55 4b10 	vmov	r4, r5, d0
 800c642:	f000 fb3f 	bl	800ccc4 <__ieee754_sqrt>
 800c646:	4b15      	ldr	r3, [pc, #84]	; (800c69c <sqrt+0x64>)
 800c648:	eeb0 8a40 	vmov.f32	s16, s0
 800c64c:	eef0 8a60 	vmov.f32	s17, s1
 800c650:	f993 3000 	ldrsb.w	r3, [r3]
 800c654:	3301      	adds	r3, #1
 800c656:	d019      	beq.n	800c68c <sqrt+0x54>
 800c658:	4622      	mov	r2, r4
 800c65a:	462b      	mov	r3, r5
 800c65c:	4620      	mov	r0, r4
 800c65e:	4629      	mov	r1, r5
 800c660:	f7f4 fa64 	bl	8000b2c <__aeabi_dcmpun>
 800c664:	b990      	cbnz	r0, 800c68c <sqrt+0x54>
 800c666:	2200      	movs	r2, #0
 800c668:	2300      	movs	r3, #0
 800c66a:	4620      	mov	r0, r4
 800c66c:	4629      	mov	r1, r5
 800c66e:	f7f4 fa35 	bl	8000adc <__aeabi_dcmplt>
 800c672:	b158      	cbz	r0, 800c68c <sqrt+0x54>
 800c674:	f7fc ffba 	bl	80095ec <__errno>
 800c678:	2321      	movs	r3, #33	; 0x21
 800c67a:	6003      	str	r3, [r0, #0]
 800c67c:	2200      	movs	r2, #0
 800c67e:	2300      	movs	r3, #0
 800c680:	4610      	mov	r0, r2
 800c682:	4619      	mov	r1, r3
 800c684:	f7f4 f8e2 	bl	800084c <__aeabi_ddiv>
 800c688:	ec41 0b18 	vmov	d8, r0, r1
 800c68c:	eeb0 0a48 	vmov.f32	s0, s16
 800c690:	eef0 0a68 	vmov.f32	s1, s17
 800c694:	ecbd 8b02 	vpop	{d8}
 800c698:	bd38      	pop	{r3, r4, r5, pc}
 800c69a:	bf00      	nop
 800c69c:	20000204 	.word	0x20000204

0800c6a0 <__ieee754_atan2>:
 800c6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6a4:	ec57 6b11 	vmov	r6, r7, d1
 800c6a8:	4273      	negs	r3, r6
 800c6aa:	f8df e184 	ldr.w	lr, [pc, #388]	; 800c830 <__ieee754_atan2+0x190>
 800c6ae:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c6b2:	4333      	orrs	r3, r6
 800c6b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c6b8:	4573      	cmp	r3, lr
 800c6ba:	ec51 0b10 	vmov	r0, r1, d0
 800c6be:	ee11 8a10 	vmov	r8, s2
 800c6c2:	d80a      	bhi.n	800c6da <__ieee754_atan2+0x3a>
 800c6c4:	4244      	negs	r4, r0
 800c6c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c6ca:	4304      	orrs	r4, r0
 800c6cc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c6d0:	4574      	cmp	r4, lr
 800c6d2:	ee10 9a10 	vmov	r9, s0
 800c6d6:	468c      	mov	ip, r1
 800c6d8:	d907      	bls.n	800c6ea <__ieee754_atan2+0x4a>
 800c6da:	4632      	mov	r2, r6
 800c6dc:	463b      	mov	r3, r7
 800c6de:	f7f3 fdd5 	bl	800028c <__adddf3>
 800c6e2:	ec41 0b10 	vmov	d0, r0, r1
 800c6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c6ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c6f2:	4334      	orrs	r4, r6
 800c6f4:	d103      	bne.n	800c6fe <__ieee754_atan2+0x5e>
 800c6f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6fa:	f000 bb99 	b.w	800ce30 <atan>
 800c6fe:	17bc      	asrs	r4, r7, #30
 800c700:	f004 0402 	and.w	r4, r4, #2
 800c704:	ea53 0909 	orrs.w	r9, r3, r9
 800c708:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c70c:	d107      	bne.n	800c71e <__ieee754_atan2+0x7e>
 800c70e:	2c02      	cmp	r4, #2
 800c710:	d060      	beq.n	800c7d4 <__ieee754_atan2+0x134>
 800c712:	2c03      	cmp	r4, #3
 800c714:	d1e5      	bne.n	800c6e2 <__ieee754_atan2+0x42>
 800c716:	a142      	add	r1, pc, #264	; (adr r1, 800c820 <__ieee754_atan2+0x180>)
 800c718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c71c:	e7e1      	b.n	800c6e2 <__ieee754_atan2+0x42>
 800c71e:	ea52 0808 	orrs.w	r8, r2, r8
 800c722:	d106      	bne.n	800c732 <__ieee754_atan2+0x92>
 800c724:	f1bc 0f00 	cmp.w	ip, #0
 800c728:	da5f      	bge.n	800c7ea <__ieee754_atan2+0x14a>
 800c72a:	a13f      	add	r1, pc, #252	; (adr r1, 800c828 <__ieee754_atan2+0x188>)
 800c72c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c730:	e7d7      	b.n	800c6e2 <__ieee754_atan2+0x42>
 800c732:	4572      	cmp	r2, lr
 800c734:	d10f      	bne.n	800c756 <__ieee754_atan2+0xb6>
 800c736:	4293      	cmp	r3, r2
 800c738:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c73c:	d107      	bne.n	800c74e <__ieee754_atan2+0xae>
 800c73e:	2c02      	cmp	r4, #2
 800c740:	d84c      	bhi.n	800c7dc <__ieee754_atan2+0x13c>
 800c742:	4b35      	ldr	r3, [pc, #212]	; (800c818 <__ieee754_atan2+0x178>)
 800c744:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c748:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c74c:	e7c9      	b.n	800c6e2 <__ieee754_atan2+0x42>
 800c74e:	2c02      	cmp	r4, #2
 800c750:	d848      	bhi.n	800c7e4 <__ieee754_atan2+0x144>
 800c752:	4b32      	ldr	r3, [pc, #200]	; (800c81c <__ieee754_atan2+0x17c>)
 800c754:	e7f6      	b.n	800c744 <__ieee754_atan2+0xa4>
 800c756:	4573      	cmp	r3, lr
 800c758:	d0e4      	beq.n	800c724 <__ieee754_atan2+0x84>
 800c75a:	1a9b      	subs	r3, r3, r2
 800c75c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c760:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c764:	da1e      	bge.n	800c7a4 <__ieee754_atan2+0x104>
 800c766:	2f00      	cmp	r7, #0
 800c768:	da01      	bge.n	800c76e <__ieee754_atan2+0xce>
 800c76a:	323c      	adds	r2, #60	; 0x3c
 800c76c:	db1e      	blt.n	800c7ac <__ieee754_atan2+0x10c>
 800c76e:	4632      	mov	r2, r6
 800c770:	463b      	mov	r3, r7
 800c772:	f7f4 f86b 	bl	800084c <__aeabi_ddiv>
 800c776:	ec41 0b10 	vmov	d0, r0, r1
 800c77a:	f000 fcf9 	bl	800d170 <fabs>
 800c77e:	f000 fb57 	bl	800ce30 <atan>
 800c782:	ec51 0b10 	vmov	r0, r1, d0
 800c786:	2c01      	cmp	r4, #1
 800c788:	d013      	beq.n	800c7b2 <__ieee754_atan2+0x112>
 800c78a:	2c02      	cmp	r4, #2
 800c78c:	d015      	beq.n	800c7ba <__ieee754_atan2+0x11a>
 800c78e:	2c00      	cmp	r4, #0
 800c790:	d0a7      	beq.n	800c6e2 <__ieee754_atan2+0x42>
 800c792:	a319      	add	r3, pc, #100	; (adr r3, 800c7f8 <__ieee754_atan2+0x158>)
 800c794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c798:	f7f3 fd76 	bl	8000288 <__aeabi_dsub>
 800c79c:	a318      	add	r3, pc, #96	; (adr r3, 800c800 <__ieee754_atan2+0x160>)
 800c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a2:	e014      	b.n	800c7ce <__ieee754_atan2+0x12e>
 800c7a4:	a118      	add	r1, pc, #96	; (adr r1, 800c808 <__ieee754_atan2+0x168>)
 800c7a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7aa:	e7ec      	b.n	800c786 <__ieee754_atan2+0xe6>
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	2100      	movs	r1, #0
 800c7b0:	e7e9      	b.n	800c786 <__ieee754_atan2+0xe6>
 800c7b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	e793      	b.n	800c6e2 <__ieee754_atan2+0x42>
 800c7ba:	a30f      	add	r3, pc, #60	; (adr r3, 800c7f8 <__ieee754_atan2+0x158>)
 800c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c0:	f7f3 fd62 	bl	8000288 <__aeabi_dsub>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	a10d      	add	r1, pc, #52	; (adr r1, 800c800 <__ieee754_atan2+0x160>)
 800c7ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7ce:	f7f3 fd5b 	bl	8000288 <__aeabi_dsub>
 800c7d2:	e786      	b.n	800c6e2 <__ieee754_atan2+0x42>
 800c7d4:	a10a      	add	r1, pc, #40	; (adr r1, 800c800 <__ieee754_atan2+0x160>)
 800c7d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7da:	e782      	b.n	800c6e2 <__ieee754_atan2+0x42>
 800c7dc:	a10c      	add	r1, pc, #48	; (adr r1, 800c810 <__ieee754_atan2+0x170>)
 800c7de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7e2:	e77e      	b.n	800c6e2 <__ieee754_atan2+0x42>
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	e77b      	b.n	800c6e2 <__ieee754_atan2+0x42>
 800c7ea:	a107      	add	r1, pc, #28	; (adr r1, 800c808 <__ieee754_atan2+0x168>)
 800c7ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7f0:	e777      	b.n	800c6e2 <__ieee754_atan2+0x42>
 800c7f2:	bf00      	nop
 800c7f4:	f3af 8000 	nop.w
 800c7f8:	33145c07 	.word	0x33145c07
 800c7fc:	3ca1a626 	.word	0x3ca1a626
 800c800:	54442d18 	.word	0x54442d18
 800c804:	400921fb 	.word	0x400921fb
 800c808:	54442d18 	.word	0x54442d18
 800c80c:	3ff921fb 	.word	0x3ff921fb
 800c810:	54442d18 	.word	0x54442d18
 800c814:	3fe921fb 	.word	0x3fe921fb
 800c818:	0800f690 	.word	0x0800f690
 800c81c:	0800f6a8 	.word	0x0800f6a8
 800c820:	54442d18 	.word	0x54442d18
 800c824:	c00921fb 	.word	0xc00921fb
 800c828:	54442d18 	.word	0x54442d18
 800c82c:	bff921fb 	.word	0xbff921fb
 800c830:	7ff00000 	.word	0x7ff00000
 800c834:	00000000 	.word	0x00000000

0800c838 <__ieee754_log>:
 800c838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c83c:	ec51 0b10 	vmov	r0, r1, d0
 800c840:	ed2d 8b04 	vpush	{d8-d9}
 800c844:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c848:	b083      	sub	sp, #12
 800c84a:	460d      	mov	r5, r1
 800c84c:	da29      	bge.n	800c8a2 <__ieee754_log+0x6a>
 800c84e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c852:	4303      	orrs	r3, r0
 800c854:	ee10 2a10 	vmov	r2, s0
 800c858:	d10c      	bne.n	800c874 <__ieee754_log+0x3c>
 800c85a:	49cf      	ldr	r1, [pc, #828]	; (800cb98 <__ieee754_log+0x360>)
 800c85c:	2200      	movs	r2, #0
 800c85e:	2300      	movs	r3, #0
 800c860:	2000      	movs	r0, #0
 800c862:	f7f3 fff3 	bl	800084c <__aeabi_ddiv>
 800c866:	ec41 0b10 	vmov	d0, r0, r1
 800c86a:	b003      	add	sp, #12
 800c86c:	ecbd 8b04 	vpop	{d8-d9}
 800c870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c874:	2900      	cmp	r1, #0
 800c876:	da05      	bge.n	800c884 <__ieee754_log+0x4c>
 800c878:	460b      	mov	r3, r1
 800c87a:	f7f3 fd05 	bl	8000288 <__aeabi_dsub>
 800c87e:	2200      	movs	r2, #0
 800c880:	2300      	movs	r3, #0
 800c882:	e7ee      	b.n	800c862 <__ieee754_log+0x2a>
 800c884:	4bc5      	ldr	r3, [pc, #788]	; (800cb9c <__ieee754_log+0x364>)
 800c886:	2200      	movs	r2, #0
 800c888:	f7f3 feb6 	bl	80005f8 <__aeabi_dmul>
 800c88c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c890:	460d      	mov	r5, r1
 800c892:	4ac3      	ldr	r2, [pc, #780]	; (800cba0 <__ieee754_log+0x368>)
 800c894:	4295      	cmp	r5, r2
 800c896:	dd06      	ble.n	800c8a6 <__ieee754_log+0x6e>
 800c898:	4602      	mov	r2, r0
 800c89a:	460b      	mov	r3, r1
 800c89c:	f7f3 fcf6 	bl	800028c <__adddf3>
 800c8a0:	e7e1      	b.n	800c866 <__ieee754_log+0x2e>
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	e7f5      	b.n	800c892 <__ieee754_log+0x5a>
 800c8a6:	152c      	asrs	r4, r5, #20
 800c8a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c8ac:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c8b0:	441c      	add	r4, r3
 800c8b2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c8b6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c8ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8be:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c8c2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c8c6:	ea42 0105 	orr.w	r1, r2, r5
 800c8ca:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	4bb4      	ldr	r3, [pc, #720]	; (800cba4 <__ieee754_log+0x36c>)
 800c8d2:	f7f3 fcd9 	bl	8000288 <__aeabi_dsub>
 800c8d6:	1cab      	adds	r3, r5, #2
 800c8d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	4682      	mov	sl, r0
 800c8e0:	468b      	mov	fp, r1
 800c8e2:	f04f 0200 	mov.w	r2, #0
 800c8e6:	dc53      	bgt.n	800c990 <__ieee754_log+0x158>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	f7f4 f8ed 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8ee:	b1d0      	cbz	r0, 800c926 <__ieee754_log+0xee>
 800c8f0:	2c00      	cmp	r4, #0
 800c8f2:	f000 8122 	beq.w	800cb3a <__ieee754_log+0x302>
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f7f3 fe14 	bl	8000524 <__aeabi_i2d>
 800c8fc:	a390      	add	r3, pc, #576	; (adr r3, 800cb40 <__ieee754_log+0x308>)
 800c8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c902:	4606      	mov	r6, r0
 800c904:	460f      	mov	r7, r1
 800c906:	f7f3 fe77 	bl	80005f8 <__aeabi_dmul>
 800c90a:	a38f      	add	r3, pc, #572	; (adr r3, 800cb48 <__ieee754_log+0x310>)
 800c90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c910:	4604      	mov	r4, r0
 800c912:	460d      	mov	r5, r1
 800c914:	4630      	mov	r0, r6
 800c916:	4639      	mov	r1, r7
 800c918:	f7f3 fe6e 	bl	80005f8 <__aeabi_dmul>
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	4620      	mov	r0, r4
 800c922:	4629      	mov	r1, r5
 800c924:	e7ba      	b.n	800c89c <__ieee754_log+0x64>
 800c926:	a38a      	add	r3, pc, #552	; (adr r3, 800cb50 <__ieee754_log+0x318>)
 800c928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92c:	4650      	mov	r0, sl
 800c92e:	4659      	mov	r1, fp
 800c930:	f7f3 fe62 	bl	80005f8 <__aeabi_dmul>
 800c934:	4602      	mov	r2, r0
 800c936:	460b      	mov	r3, r1
 800c938:	2000      	movs	r0, #0
 800c93a:	499b      	ldr	r1, [pc, #620]	; (800cba8 <__ieee754_log+0x370>)
 800c93c:	f7f3 fca4 	bl	8000288 <__aeabi_dsub>
 800c940:	4652      	mov	r2, sl
 800c942:	4606      	mov	r6, r0
 800c944:	460f      	mov	r7, r1
 800c946:	465b      	mov	r3, fp
 800c948:	4650      	mov	r0, sl
 800c94a:	4659      	mov	r1, fp
 800c94c:	f7f3 fe54 	bl	80005f8 <__aeabi_dmul>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	4630      	mov	r0, r6
 800c956:	4639      	mov	r1, r7
 800c958:	f7f3 fe4e 	bl	80005f8 <__aeabi_dmul>
 800c95c:	4606      	mov	r6, r0
 800c95e:	460f      	mov	r7, r1
 800c960:	b914      	cbnz	r4, 800c968 <__ieee754_log+0x130>
 800c962:	4632      	mov	r2, r6
 800c964:	463b      	mov	r3, r7
 800c966:	e0a2      	b.n	800caae <__ieee754_log+0x276>
 800c968:	4620      	mov	r0, r4
 800c96a:	f7f3 fddb 	bl	8000524 <__aeabi_i2d>
 800c96e:	a374      	add	r3, pc, #464	; (adr r3, 800cb40 <__ieee754_log+0x308>)
 800c970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c974:	4680      	mov	r8, r0
 800c976:	4689      	mov	r9, r1
 800c978:	f7f3 fe3e 	bl	80005f8 <__aeabi_dmul>
 800c97c:	a372      	add	r3, pc, #456	; (adr r3, 800cb48 <__ieee754_log+0x310>)
 800c97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c982:	4604      	mov	r4, r0
 800c984:	460d      	mov	r5, r1
 800c986:	4640      	mov	r0, r8
 800c988:	4649      	mov	r1, r9
 800c98a:	f7f3 fe35 	bl	80005f8 <__aeabi_dmul>
 800c98e:	e0a7      	b.n	800cae0 <__ieee754_log+0x2a8>
 800c990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c994:	f7f3 fc7a 	bl	800028c <__adddf3>
 800c998:	4602      	mov	r2, r0
 800c99a:	460b      	mov	r3, r1
 800c99c:	4650      	mov	r0, sl
 800c99e:	4659      	mov	r1, fp
 800c9a0:	f7f3 ff54 	bl	800084c <__aeabi_ddiv>
 800c9a4:	ec41 0b18 	vmov	d8, r0, r1
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f7f3 fdbb 	bl	8000524 <__aeabi_i2d>
 800c9ae:	ec53 2b18 	vmov	r2, r3, d8
 800c9b2:	ec41 0b19 	vmov	d9, r0, r1
 800c9b6:	ec51 0b18 	vmov	r0, r1, d8
 800c9ba:	f7f3 fe1d 	bl	80005f8 <__aeabi_dmul>
 800c9be:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c9c2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c9c6:	9301      	str	r3, [sp, #4]
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	4680      	mov	r8, r0
 800c9ce:	4689      	mov	r9, r1
 800c9d0:	f7f3 fe12 	bl	80005f8 <__aeabi_dmul>
 800c9d4:	a360      	add	r3, pc, #384	; (adr r3, 800cb58 <__ieee754_log+0x320>)
 800c9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9da:	4606      	mov	r6, r0
 800c9dc:	460f      	mov	r7, r1
 800c9de:	f7f3 fe0b 	bl	80005f8 <__aeabi_dmul>
 800c9e2:	a35f      	add	r3, pc, #380	; (adr r3, 800cb60 <__ieee754_log+0x328>)
 800c9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e8:	f7f3 fc50 	bl	800028c <__adddf3>
 800c9ec:	4632      	mov	r2, r6
 800c9ee:	463b      	mov	r3, r7
 800c9f0:	f7f3 fe02 	bl	80005f8 <__aeabi_dmul>
 800c9f4:	a35c      	add	r3, pc, #368	; (adr r3, 800cb68 <__ieee754_log+0x330>)
 800c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fa:	f7f3 fc47 	bl	800028c <__adddf3>
 800c9fe:	4632      	mov	r2, r6
 800ca00:	463b      	mov	r3, r7
 800ca02:	f7f3 fdf9 	bl	80005f8 <__aeabi_dmul>
 800ca06:	a35a      	add	r3, pc, #360	; (adr r3, 800cb70 <__ieee754_log+0x338>)
 800ca08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0c:	f7f3 fc3e 	bl	800028c <__adddf3>
 800ca10:	4642      	mov	r2, r8
 800ca12:	464b      	mov	r3, r9
 800ca14:	f7f3 fdf0 	bl	80005f8 <__aeabi_dmul>
 800ca18:	a357      	add	r3, pc, #348	; (adr r3, 800cb78 <__ieee754_log+0x340>)
 800ca1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1e:	4680      	mov	r8, r0
 800ca20:	4689      	mov	r9, r1
 800ca22:	4630      	mov	r0, r6
 800ca24:	4639      	mov	r1, r7
 800ca26:	f7f3 fde7 	bl	80005f8 <__aeabi_dmul>
 800ca2a:	a355      	add	r3, pc, #340	; (adr r3, 800cb80 <__ieee754_log+0x348>)
 800ca2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca30:	f7f3 fc2c 	bl	800028c <__adddf3>
 800ca34:	4632      	mov	r2, r6
 800ca36:	463b      	mov	r3, r7
 800ca38:	f7f3 fdde 	bl	80005f8 <__aeabi_dmul>
 800ca3c:	a352      	add	r3, pc, #328	; (adr r3, 800cb88 <__ieee754_log+0x350>)
 800ca3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca42:	f7f3 fc23 	bl	800028c <__adddf3>
 800ca46:	4632      	mov	r2, r6
 800ca48:	463b      	mov	r3, r7
 800ca4a:	f7f3 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ca4e:	460b      	mov	r3, r1
 800ca50:	4602      	mov	r2, r0
 800ca52:	4649      	mov	r1, r9
 800ca54:	4640      	mov	r0, r8
 800ca56:	f7f3 fc19 	bl	800028c <__adddf3>
 800ca5a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ca5e:	9b01      	ldr	r3, [sp, #4]
 800ca60:	3551      	adds	r5, #81	; 0x51
 800ca62:	431d      	orrs	r5, r3
 800ca64:	2d00      	cmp	r5, #0
 800ca66:	4680      	mov	r8, r0
 800ca68:	4689      	mov	r9, r1
 800ca6a:	dd48      	ble.n	800cafe <__ieee754_log+0x2c6>
 800ca6c:	4b4e      	ldr	r3, [pc, #312]	; (800cba8 <__ieee754_log+0x370>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	4650      	mov	r0, sl
 800ca72:	4659      	mov	r1, fp
 800ca74:	f7f3 fdc0 	bl	80005f8 <__aeabi_dmul>
 800ca78:	4652      	mov	r2, sl
 800ca7a:	465b      	mov	r3, fp
 800ca7c:	f7f3 fdbc 	bl	80005f8 <__aeabi_dmul>
 800ca80:	4602      	mov	r2, r0
 800ca82:	460b      	mov	r3, r1
 800ca84:	4606      	mov	r6, r0
 800ca86:	460f      	mov	r7, r1
 800ca88:	4640      	mov	r0, r8
 800ca8a:	4649      	mov	r1, r9
 800ca8c:	f7f3 fbfe 	bl	800028c <__adddf3>
 800ca90:	ec53 2b18 	vmov	r2, r3, d8
 800ca94:	f7f3 fdb0 	bl	80005f8 <__aeabi_dmul>
 800ca98:	4680      	mov	r8, r0
 800ca9a:	4689      	mov	r9, r1
 800ca9c:	b964      	cbnz	r4, 800cab8 <__ieee754_log+0x280>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	4630      	mov	r0, r6
 800caa4:	4639      	mov	r1, r7
 800caa6:	f7f3 fbef 	bl	8000288 <__aeabi_dsub>
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	4650      	mov	r0, sl
 800cab0:	4659      	mov	r1, fp
 800cab2:	f7f3 fbe9 	bl	8000288 <__aeabi_dsub>
 800cab6:	e6d6      	b.n	800c866 <__ieee754_log+0x2e>
 800cab8:	a321      	add	r3, pc, #132	; (adr r3, 800cb40 <__ieee754_log+0x308>)
 800caba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabe:	ec51 0b19 	vmov	r0, r1, d9
 800cac2:	f7f3 fd99 	bl	80005f8 <__aeabi_dmul>
 800cac6:	a320      	add	r3, pc, #128	; (adr r3, 800cb48 <__ieee754_log+0x310>)
 800cac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cacc:	4604      	mov	r4, r0
 800cace:	460d      	mov	r5, r1
 800cad0:	ec51 0b19 	vmov	r0, r1, d9
 800cad4:	f7f3 fd90 	bl	80005f8 <__aeabi_dmul>
 800cad8:	4642      	mov	r2, r8
 800cada:	464b      	mov	r3, r9
 800cadc:	f7f3 fbd6 	bl	800028c <__adddf3>
 800cae0:	4602      	mov	r2, r0
 800cae2:	460b      	mov	r3, r1
 800cae4:	4630      	mov	r0, r6
 800cae6:	4639      	mov	r1, r7
 800cae8:	f7f3 fbce 	bl	8000288 <__aeabi_dsub>
 800caec:	4652      	mov	r2, sl
 800caee:	465b      	mov	r3, fp
 800caf0:	f7f3 fbca 	bl	8000288 <__aeabi_dsub>
 800caf4:	4602      	mov	r2, r0
 800caf6:	460b      	mov	r3, r1
 800caf8:	4620      	mov	r0, r4
 800cafa:	4629      	mov	r1, r5
 800cafc:	e7d9      	b.n	800cab2 <__ieee754_log+0x27a>
 800cafe:	4602      	mov	r2, r0
 800cb00:	460b      	mov	r3, r1
 800cb02:	4650      	mov	r0, sl
 800cb04:	4659      	mov	r1, fp
 800cb06:	f7f3 fbbf 	bl	8000288 <__aeabi_dsub>
 800cb0a:	ec53 2b18 	vmov	r2, r3, d8
 800cb0e:	f7f3 fd73 	bl	80005f8 <__aeabi_dmul>
 800cb12:	4606      	mov	r6, r0
 800cb14:	460f      	mov	r7, r1
 800cb16:	2c00      	cmp	r4, #0
 800cb18:	f43f af23 	beq.w	800c962 <__ieee754_log+0x12a>
 800cb1c:	a308      	add	r3, pc, #32	; (adr r3, 800cb40 <__ieee754_log+0x308>)
 800cb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb22:	ec51 0b19 	vmov	r0, r1, d9
 800cb26:	f7f3 fd67 	bl	80005f8 <__aeabi_dmul>
 800cb2a:	a307      	add	r3, pc, #28	; (adr r3, 800cb48 <__ieee754_log+0x310>)
 800cb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb30:	4604      	mov	r4, r0
 800cb32:	460d      	mov	r5, r1
 800cb34:	ec51 0b19 	vmov	r0, r1, d9
 800cb38:	e727      	b.n	800c98a <__ieee754_log+0x152>
 800cb3a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800cb90 <__ieee754_log+0x358>
 800cb3e:	e694      	b.n	800c86a <__ieee754_log+0x32>
 800cb40:	fee00000 	.word	0xfee00000
 800cb44:	3fe62e42 	.word	0x3fe62e42
 800cb48:	35793c76 	.word	0x35793c76
 800cb4c:	3dea39ef 	.word	0x3dea39ef
 800cb50:	55555555 	.word	0x55555555
 800cb54:	3fd55555 	.word	0x3fd55555
 800cb58:	df3e5244 	.word	0xdf3e5244
 800cb5c:	3fc2f112 	.word	0x3fc2f112
 800cb60:	96cb03de 	.word	0x96cb03de
 800cb64:	3fc74664 	.word	0x3fc74664
 800cb68:	94229359 	.word	0x94229359
 800cb6c:	3fd24924 	.word	0x3fd24924
 800cb70:	55555593 	.word	0x55555593
 800cb74:	3fe55555 	.word	0x3fe55555
 800cb78:	d078c69f 	.word	0xd078c69f
 800cb7c:	3fc39a09 	.word	0x3fc39a09
 800cb80:	1d8e78af 	.word	0x1d8e78af
 800cb84:	3fcc71c5 	.word	0x3fcc71c5
 800cb88:	9997fa04 	.word	0x9997fa04
 800cb8c:	3fd99999 	.word	0x3fd99999
	...
 800cb98:	c3500000 	.word	0xc3500000
 800cb9c:	43500000 	.word	0x43500000
 800cba0:	7fefffff 	.word	0x7fefffff
 800cba4:	3ff00000 	.word	0x3ff00000
 800cba8:	3fe00000 	.word	0x3fe00000
 800cbac:	00000000 	.word	0x00000000

0800cbb0 <__ieee754_log10>:
 800cbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbb4:	ec55 4b10 	vmov	r4, r5, d0
 800cbb8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800cbbc:	462b      	mov	r3, r5
 800cbbe:	da2f      	bge.n	800cc20 <__ieee754_log10+0x70>
 800cbc0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800cbc4:	4322      	orrs	r2, r4
 800cbc6:	d109      	bne.n	800cbdc <__ieee754_log10+0x2c>
 800cbc8:	493b      	ldr	r1, [pc, #236]	; (800ccb8 <__ieee754_log10+0x108>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	2300      	movs	r3, #0
 800cbce:	2000      	movs	r0, #0
 800cbd0:	f7f3 fe3c 	bl	800084c <__aeabi_ddiv>
 800cbd4:	ec41 0b10 	vmov	d0, r0, r1
 800cbd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbdc:	2d00      	cmp	r5, #0
 800cbde:	da09      	bge.n	800cbf4 <__ieee754_log10+0x44>
 800cbe0:	ee10 2a10 	vmov	r2, s0
 800cbe4:	ee10 0a10 	vmov	r0, s0
 800cbe8:	4629      	mov	r1, r5
 800cbea:	f7f3 fb4d 	bl	8000288 <__aeabi_dsub>
 800cbee:	2200      	movs	r2, #0
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	e7ed      	b.n	800cbd0 <__ieee754_log10+0x20>
 800cbf4:	4b31      	ldr	r3, [pc, #196]	; (800ccbc <__ieee754_log10+0x10c>)
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	4629      	mov	r1, r5
 800cbfa:	ee10 0a10 	vmov	r0, s0
 800cbfe:	f7f3 fcfb 	bl	80005f8 <__aeabi_dmul>
 800cc02:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800cc06:	4604      	mov	r4, r0
 800cc08:	460d      	mov	r5, r1
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	492c      	ldr	r1, [pc, #176]	; (800ccc0 <__ieee754_log10+0x110>)
 800cc0e:	428b      	cmp	r3, r1
 800cc10:	dd08      	ble.n	800cc24 <__ieee754_log10+0x74>
 800cc12:	4622      	mov	r2, r4
 800cc14:	462b      	mov	r3, r5
 800cc16:	4620      	mov	r0, r4
 800cc18:	4629      	mov	r1, r5
 800cc1a:	f7f3 fb37 	bl	800028c <__adddf3>
 800cc1e:	e7d9      	b.n	800cbd4 <__ieee754_log10+0x24>
 800cc20:	2200      	movs	r2, #0
 800cc22:	e7f3      	b.n	800cc0c <__ieee754_log10+0x5c>
 800cc24:	1518      	asrs	r0, r3, #20
 800cc26:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800cc2a:	4410      	add	r0, r2
 800cc2c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800cc30:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800cc34:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800cc38:	f7f3 fc74 	bl	8000524 <__aeabi_i2d>
 800cc3c:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800cc40:	3303      	adds	r3, #3
 800cc42:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800cc46:	ec45 4b10 	vmov	d0, r4, r5
 800cc4a:	4606      	mov	r6, r0
 800cc4c:	460f      	mov	r7, r1
 800cc4e:	f7ff fdf3 	bl	800c838 <__ieee754_log>
 800cc52:	a313      	add	r3, pc, #76	; (adr r3, 800cca0 <__ieee754_log10+0xf0>)
 800cc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc58:	4630      	mov	r0, r6
 800cc5a:	4639      	mov	r1, r7
 800cc5c:	ec59 8b10 	vmov	r8, r9, d0
 800cc60:	f7f3 fcca 	bl	80005f8 <__aeabi_dmul>
 800cc64:	a310      	add	r3, pc, #64	; (adr r3, 800cca8 <__ieee754_log10+0xf8>)
 800cc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	460d      	mov	r5, r1
 800cc6e:	4640      	mov	r0, r8
 800cc70:	4649      	mov	r1, r9
 800cc72:	f7f3 fcc1 	bl	80005f8 <__aeabi_dmul>
 800cc76:	4602      	mov	r2, r0
 800cc78:	460b      	mov	r3, r1
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	4629      	mov	r1, r5
 800cc7e:	f7f3 fb05 	bl	800028c <__adddf3>
 800cc82:	a30b      	add	r3, pc, #44	; (adr r3, 800ccb0 <__ieee754_log10+0x100>)
 800cc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc88:	4604      	mov	r4, r0
 800cc8a:	460d      	mov	r5, r1
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	4639      	mov	r1, r7
 800cc90:	f7f3 fcb2 	bl	80005f8 <__aeabi_dmul>
 800cc94:	4602      	mov	r2, r0
 800cc96:	460b      	mov	r3, r1
 800cc98:	4620      	mov	r0, r4
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	e7bd      	b.n	800cc1a <__ieee754_log10+0x6a>
 800cc9e:	bf00      	nop
 800cca0:	11f12b36 	.word	0x11f12b36
 800cca4:	3d59fef3 	.word	0x3d59fef3
 800cca8:	1526e50e 	.word	0x1526e50e
 800ccac:	3fdbcb7b 	.word	0x3fdbcb7b
 800ccb0:	509f6000 	.word	0x509f6000
 800ccb4:	3fd34413 	.word	0x3fd34413
 800ccb8:	c3500000 	.word	0xc3500000
 800ccbc:	43500000 	.word	0x43500000
 800ccc0:	7fefffff 	.word	0x7fefffff

0800ccc4 <__ieee754_sqrt>:
 800ccc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc8:	ec55 4b10 	vmov	r4, r5, d0
 800cccc:	4e56      	ldr	r6, [pc, #344]	; (800ce28 <__ieee754_sqrt+0x164>)
 800ccce:	43ae      	bics	r6, r5
 800ccd0:	ee10 0a10 	vmov	r0, s0
 800ccd4:	ee10 3a10 	vmov	r3, s0
 800ccd8:	4629      	mov	r1, r5
 800ccda:	462a      	mov	r2, r5
 800ccdc:	d110      	bne.n	800cd00 <__ieee754_sqrt+0x3c>
 800ccde:	ee10 2a10 	vmov	r2, s0
 800cce2:	462b      	mov	r3, r5
 800cce4:	f7f3 fc88 	bl	80005f8 <__aeabi_dmul>
 800cce8:	4602      	mov	r2, r0
 800ccea:	460b      	mov	r3, r1
 800ccec:	4620      	mov	r0, r4
 800ccee:	4629      	mov	r1, r5
 800ccf0:	f7f3 facc 	bl	800028c <__adddf3>
 800ccf4:	4604      	mov	r4, r0
 800ccf6:	460d      	mov	r5, r1
 800ccf8:	ec45 4b10 	vmov	d0, r4, r5
 800ccfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd00:	2d00      	cmp	r5, #0
 800cd02:	dc10      	bgt.n	800cd26 <__ieee754_sqrt+0x62>
 800cd04:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cd08:	4330      	orrs	r0, r6
 800cd0a:	d0f5      	beq.n	800ccf8 <__ieee754_sqrt+0x34>
 800cd0c:	b15d      	cbz	r5, 800cd26 <__ieee754_sqrt+0x62>
 800cd0e:	ee10 2a10 	vmov	r2, s0
 800cd12:	462b      	mov	r3, r5
 800cd14:	ee10 0a10 	vmov	r0, s0
 800cd18:	f7f3 fab6 	bl	8000288 <__aeabi_dsub>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	460b      	mov	r3, r1
 800cd20:	f7f3 fd94 	bl	800084c <__aeabi_ddiv>
 800cd24:	e7e6      	b.n	800ccf4 <__ieee754_sqrt+0x30>
 800cd26:	1509      	asrs	r1, r1, #20
 800cd28:	d076      	beq.n	800ce18 <__ieee754_sqrt+0x154>
 800cd2a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cd2e:	07ce      	lsls	r6, r1, #31
 800cd30:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cd34:	bf5e      	ittt	pl
 800cd36:	0fda      	lsrpl	r2, r3, #31
 800cd38:	005b      	lslpl	r3, r3, #1
 800cd3a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cd3e:	0fda      	lsrs	r2, r3, #31
 800cd40:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cd44:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cd48:	2000      	movs	r0, #0
 800cd4a:	106d      	asrs	r5, r5, #1
 800cd4c:	005b      	lsls	r3, r3, #1
 800cd4e:	f04f 0e16 	mov.w	lr, #22
 800cd52:	4684      	mov	ip, r0
 800cd54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cd58:	eb0c 0401 	add.w	r4, ip, r1
 800cd5c:	4294      	cmp	r4, r2
 800cd5e:	bfde      	ittt	le
 800cd60:	1b12      	suble	r2, r2, r4
 800cd62:	eb04 0c01 	addle.w	ip, r4, r1
 800cd66:	1840      	addle	r0, r0, r1
 800cd68:	0052      	lsls	r2, r2, #1
 800cd6a:	f1be 0e01 	subs.w	lr, lr, #1
 800cd6e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cd72:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cd76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd7a:	d1ed      	bne.n	800cd58 <__ieee754_sqrt+0x94>
 800cd7c:	4671      	mov	r1, lr
 800cd7e:	2720      	movs	r7, #32
 800cd80:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cd84:	4562      	cmp	r2, ip
 800cd86:	eb04 060e 	add.w	r6, r4, lr
 800cd8a:	dc02      	bgt.n	800cd92 <__ieee754_sqrt+0xce>
 800cd8c:	d113      	bne.n	800cdb6 <__ieee754_sqrt+0xf2>
 800cd8e:	429e      	cmp	r6, r3
 800cd90:	d811      	bhi.n	800cdb6 <__ieee754_sqrt+0xf2>
 800cd92:	2e00      	cmp	r6, #0
 800cd94:	eb06 0e04 	add.w	lr, r6, r4
 800cd98:	da43      	bge.n	800ce22 <__ieee754_sqrt+0x15e>
 800cd9a:	f1be 0f00 	cmp.w	lr, #0
 800cd9e:	db40      	blt.n	800ce22 <__ieee754_sqrt+0x15e>
 800cda0:	f10c 0801 	add.w	r8, ip, #1
 800cda4:	eba2 020c 	sub.w	r2, r2, ip
 800cda8:	429e      	cmp	r6, r3
 800cdaa:	bf88      	it	hi
 800cdac:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800cdb0:	1b9b      	subs	r3, r3, r6
 800cdb2:	4421      	add	r1, r4
 800cdb4:	46c4      	mov	ip, r8
 800cdb6:	0052      	lsls	r2, r2, #1
 800cdb8:	3f01      	subs	r7, #1
 800cdba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cdbe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cdc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cdc6:	d1dd      	bne.n	800cd84 <__ieee754_sqrt+0xc0>
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	d006      	beq.n	800cdda <__ieee754_sqrt+0x116>
 800cdcc:	1c4c      	adds	r4, r1, #1
 800cdce:	bf13      	iteet	ne
 800cdd0:	3101      	addne	r1, #1
 800cdd2:	3001      	addeq	r0, #1
 800cdd4:	4639      	moveq	r1, r7
 800cdd6:	f021 0101 	bicne.w	r1, r1, #1
 800cdda:	1043      	asrs	r3, r0, #1
 800cddc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cde0:	0849      	lsrs	r1, r1, #1
 800cde2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cde6:	07c2      	lsls	r2, r0, #31
 800cde8:	bf48      	it	mi
 800cdea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cdee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800cdf2:	460c      	mov	r4, r1
 800cdf4:	463d      	mov	r5, r7
 800cdf6:	e77f      	b.n	800ccf8 <__ieee754_sqrt+0x34>
 800cdf8:	0ada      	lsrs	r2, r3, #11
 800cdfa:	3815      	subs	r0, #21
 800cdfc:	055b      	lsls	r3, r3, #21
 800cdfe:	2a00      	cmp	r2, #0
 800ce00:	d0fa      	beq.n	800cdf8 <__ieee754_sqrt+0x134>
 800ce02:	02d7      	lsls	r7, r2, #11
 800ce04:	d50a      	bpl.n	800ce1c <__ieee754_sqrt+0x158>
 800ce06:	f1c1 0420 	rsb	r4, r1, #32
 800ce0a:	fa23 f404 	lsr.w	r4, r3, r4
 800ce0e:	1e4d      	subs	r5, r1, #1
 800ce10:	408b      	lsls	r3, r1
 800ce12:	4322      	orrs	r2, r4
 800ce14:	1b41      	subs	r1, r0, r5
 800ce16:	e788      	b.n	800cd2a <__ieee754_sqrt+0x66>
 800ce18:	4608      	mov	r0, r1
 800ce1a:	e7f0      	b.n	800cdfe <__ieee754_sqrt+0x13a>
 800ce1c:	0052      	lsls	r2, r2, #1
 800ce1e:	3101      	adds	r1, #1
 800ce20:	e7ef      	b.n	800ce02 <__ieee754_sqrt+0x13e>
 800ce22:	46e0      	mov	r8, ip
 800ce24:	e7be      	b.n	800cda4 <__ieee754_sqrt+0xe0>
 800ce26:	bf00      	nop
 800ce28:	7ff00000 	.word	0x7ff00000
 800ce2c:	00000000 	.word	0x00000000

0800ce30 <atan>:
 800ce30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce34:	ec55 4b10 	vmov	r4, r5, d0
 800ce38:	4bc3      	ldr	r3, [pc, #780]	; (800d148 <atan+0x318>)
 800ce3a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ce3e:	429e      	cmp	r6, r3
 800ce40:	46ab      	mov	fp, r5
 800ce42:	dd18      	ble.n	800ce76 <atan+0x46>
 800ce44:	4bc1      	ldr	r3, [pc, #772]	; (800d14c <atan+0x31c>)
 800ce46:	429e      	cmp	r6, r3
 800ce48:	dc01      	bgt.n	800ce4e <atan+0x1e>
 800ce4a:	d109      	bne.n	800ce60 <atan+0x30>
 800ce4c:	b144      	cbz	r4, 800ce60 <atan+0x30>
 800ce4e:	4622      	mov	r2, r4
 800ce50:	462b      	mov	r3, r5
 800ce52:	4620      	mov	r0, r4
 800ce54:	4629      	mov	r1, r5
 800ce56:	f7f3 fa19 	bl	800028c <__adddf3>
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	460d      	mov	r5, r1
 800ce5e:	e006      	b.n	800ce6e <atan+0x3e>
 800ce60:	f1bb 0f00 	cmp.w	fp, #0
 800ce64:	f300 8131 	bgt.w	800d0ca <atan+0x29a>
 800ce68:	a59b      	add	r5, pc, #620	; (adr r5, 800d0d8 <atan+0x2a8>)
 800ce6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ce6e:	ec45 4b10 	vmov	d0, r4, r5
 800ce72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce76:	4bb6      	ldr	r3, [pc, #728]	; (800d150 <atan+0x320>)
 800ce78:	429e      	cmp	r6, r3
 800ce7a:	dc14      	bgt.n	800cea6 <atan+0x76>
 800ce7c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ce80:	429e      	cmp	r6, r3
 800ce82:	dc0d      	bgt.n	800cea0 <atan+0x70>
 800ce84:	a396      	add	r3, pc, #600	; (adr r3, 800d0e0 <atan+0x2b0>)
 800ce86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8a:	ee10 0a10 	vmov	r0, s0
 800ce8e:	4629      	mov	r1, r5
 800ce90:	f7f3 f9fc 	bl	800028c <__adddf3>
 800ce94:	4baf      	ldr	r3, [pc, #700]	; (800d154 <atan+0x324>)
 800ce96:	2200      	movs	r2, #0
 800ce98:	f7f3 fe3e 	bl	8000b18 <__aeabi_dcmpgt>
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d1e6      	bne.n	800ce6e <atan+0x3e>
 800cea0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cea4:	e02b      	b.n	800cefe <atan+0xce>
 800cea6:	f000 f963 	bl	800d170 <fabs>
 800ceaa:	4bab      	ldr	r3, [pc, #684]	; (800d158 <atan+0x328>)
 800ceac:	429e      	cmp	r6, r3
 800ceae:	ec55 4b10 	vmov	r4, r5, d0
 800ceb2:	f300 80bf 	bgt.w	800d034 <atan+0x204>
 800ceb6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ceba:	429e      	cmp	r6, r3
 800cebc:	f300 80a0 	bgt.w	800d000 <atan+0x1d0>
 800cec0:	ee10 2a10 	vmov	r2, s0
 800cec4:	ee10 0a10 	vmov	r0, s0
 800cec8:	462b      	mov	r3, r5
 800ceca:	4629      	mov	r1, r5
 800cecc:	f7f3 f9de 	bl	800028c <__adddf3>
 800ced0:	4ba0      	ldr	r3, [pc, #640]	; (800d154 <atan+0x324>)
 800ced2:	2200      	movs	r2, #0
 800ced4:	f7f3 f9d8 	bl	8000288 <__aeabi_dsub>
 800ced8:	2200      	movs	r2, #0
 800ceda:	4606      	mov	r6, r0
 800cedc:	460f      	mov	r7, r1
 800cede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cee2:	4620      	mov	r0, r4
 800cee4:	4629      	mov	r1, r5
 800cee6:	f7f3 f9d1 	bl	800028c <__adddf3>
 800ceea:	4602      	mov	r2, r0
 800ceec:	460b      	mov	r3, r1
 800ceee:	4630      	mov	r0, r6
 800cef0:	4639      	mov	r1, r7
 800cef2:	f7f3 fcab 	bl	800084c <__aeabi_ddiv>
 800cef6:	f04f 0a00 	mov.w	sl, #0
 800cefa:	4604      	mov	r4, r0
 800cefc:	460d      	mov	r5, r1
 800cefe:	4622      	mov	r2, r4
 800cf00:	462b      	mov	r3, r5
 800cf02:	4620      	mov	r0, r4
 800cf04:	4629      	mov	r1, r5
 800cf06:	f7f3 fb77 	bl	80005f8 <__aeabi_dmul>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	4680      	mov	r8, r0
 800cf10:	4689      	mov	r9, r1
 800cf12:	f7f3 fb71 	bl	80005f8 <__aeabi_dmul>
 800cf16:	a374      	add	r3, pc, #464	; (adr r3, 800d0e8 <atan+0x2b8>)
 800cf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1c:	4606      	mov	r6, r0
 800cf1e:	460f      	mov	r7, r1
 800cf20:	f7f3 fb6a 	bl	80005f8 <__aeabi_dmul>
 800cf24:	a372      	add	r3, pc, #456	; (adr r3, 800d0f0 <atan+0x2c0>)
 800cf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2a:	f7f3 f9af 	bl	800028c <__adddf3>
 800cf2e:	4632      	mov	r2, r6
 800cf30:	463b      	mov	r3, r7
 800cf32:	f7f3 fb61 	bl	80005f8 <__aeabi_dmul>
 800cf36:	a370      	add	r3, pc, #448	; (adr r3, 800d0f8 <atan+0x2c8>)
 800cf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3c:	f7f3 f9a6 	bl	800028c <__adddf3>
 800cf40:	4632      	mov	r2, r6
 800cf42:	463b      	mov	r3, r7
 800cf44:	f7f3 fb58 	bl	80005f8 <__aeabi_dmul>
 800cf48:	a36d      	add	r3, pc, #436	; (adr r3, 800d100 <atan+0x2d0>)
 800cf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4e:	f7f3 f99d 	bl	800028c <__adddf3>
 800cf52:	4632      	mov	r2, r6
 800cf54:	463b      	mov	r3, r7
 800cf56:	f7f3 fb4f 	bl	80005f8 <__aeabi_dmul>
 800cf5a:	a36b      	add	r3, pc, #428	; (adr r3, 800d108 <atan+0x2d8>)
 800cf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf60:	f7f3 f994 	bl	800028c <__adddf3>
 800cf64:	4632      	mov	r2, r6
 800cf66:	463b      	mov	r3, r7
 800cf68:	f7f3 fb46 	bl	80005f8 <__aeabi_dmul>
 800cf6c:	a368      	add	r3, pc, #416	; (adr r3, 800d110 <atan+0x2e0>)
 800cf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf72:	f7f3 f98b 	bl	800028c <__adddf3>
 800cf76:	4642      	mov	r2, r8
 800cf78:	464b      	mov	r3, r9
 800cf7a:	f7f3 fb3d 	bl	80005f8 <__aeabi_dmul>
 800cf7e:	a366      	add	r3, pc, #408	; (adr r3, 800d118 <atan+0x2e8>)
 800cf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf84:	4680      	mov	r8, r0
 800cf86:	4689      	mov	r9, r1
 800cf88:	4630      	mov	r0, r6
 800cf8a:	4639      	mov	r1, r7
 800cf8c:	f7f3 fb34 	bl	80005f8 <__aeabi_dmul>
 800cf90:	a363      	add	r3, pc, #396	; (adr r3, 800d120 <atan+0x2f0>)
 800cf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf96:	f7f3 f977 	bl	8000288 <__aeabi_dsub>
 800cf9a:	4632      	mov	r2, r6
 800cf9c:	463b      	mov	r3, r7
 800cf9e:	f7f3 fb2b 	bl	80005f8 <__aeabi_dmul>
 800cfa2:	a361      	add	r3, pc, #388	; (adr r3, 800d128 <atan+0x2f8>)
 800cfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa8:	f7f3 f96e 	bl	8000288 <__aeabi_dsub>
 800cfac:	4632      	mov	r2, r6
 800cfae:	463b      	mov	r3, r7
 800cfb0:	f7f3 fb22 	bl	80005f8 <__aeabi_dmul>
 800cfb4:	a35e      	add	r3, pc, #376	; (adr r3, 800d130 <atan+0x300>)
 800cfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfba:	f7f3 f965 	bl	8000288 <__aeabi_dsub>
 800cfbe:	4632      	mov	r2, r6
 800cfc0:	463b      	mov	r3, r7
 800cfc2:	f7f3 fb19 	bl	80005f8 <__aeabi_dmul>
 800cfc6:	a35c      	add	r3, pc, #368	; (adr r3, 800d138 <atan+0x308>)
 800cfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfcc:	f7f3 f95c 	bl	8000288 <__aeabi_dsub>
 800cfd0:	4632      	mov	r2, r6
 800cfd2:	463b      	mov	r3, r7
 800cfd4:	f7f3 fb10 	bl	80005f8 <__aeabi_dmul>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	460b      	mov	r3, r1
 800cfdc:	4640      	mov	r0, r8
 800cfde:	4649      	mov	r1, r9
 800cfe0:	f7f3 f954 	bl	800028c <__adddf3>
 800cfe4:	4622      	mov	r2, r4
 800cfe6:	462b      	mov	r3, r5
 800cfe8:	f7f3 fb06 	bl	80005f8 <__aeabi_dmul>
 800cfec:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800cff0:	4602      	mov	r2, r0
 800cff2:	460b      	mov	r3, r1
 800cff4:	d14b      	bne.n	800d08e <atan+0x25e>
 800cff6:	4620      	mov	r0, r4
 800cff8:	4629      	mov	r1, r5
 800cffa:	f7f3 f945 	bl	8000288 <__aeabi_dsub>
 800cffe:	e72c      	b.n	800ce5a <atan+0x2a>
 800d000:	ee10 0a10 	vmov	r0, s0
 800d004:	4b53      	ldr	r3, [pc, #332]	; (800d154 <atan+0x324>)
 800d006:	2200      	movs	r2, #0
 800d008:	4629      	mov	r1, r5
 800d00a:	f7f3 f93d 	bl	8000288 <__aeabi_dsub>
 800d00e:	4b51      	ldr	r3, [pc, #324]	; (800d154 <atan+0x324>)
 800d010:	4606      	mov	r6, r0
 800d012:	460f      	mov	r7, r1
 800d014:	2200      	movs	r2, #0
 800d016:	4620      	mov	r0, r4
 800d018:	4629      	mov	r1, r5
 800d01a:	f7f3 f937 	bl	800028c <__adddf3>
 800d01e:	4602      	mov	r2, r0
 800d020:	460b      	mov	r3, r1
 800d022:	4630      	mov	r0, r6
 800d024:	4639      	mov	r1, r7
 800d026:	f7f3 fc11 	bl	800084c <__aeabi_ddiv>
 800d02a:	f04f 0a01 	mov.w	sl, #1
 800d02e:	4604      	mov	r4, r0
 800d030:	460d      	mov	r5, r1
 800d032:	e764      	b.n	800cefe <atan+0xce>
 800d034:	4b49      	ldr	r3, [pc, #292]	; (800d15c <atan+0x32c>)
 800d036:	429e      	cmp	r6, r3
 800d038:	da1d      	bge.n	800d076 <atan+0x246>
 800d03a:	ee10 0a10 	vmov	r0, s0
 800d03e:	4b48      	ldr	r3, [pc, #288]	; (800d160 <atan+0x330>)
 800d040:	2200      	movs	r2, #0
 800d042:	4629      	mov	r1, r5
 800d044:	f7f3 f920 	bl	8000288 <__aeabi_dsub>
 800d048:	4b45      	ldr	r3, [pc, #276]	; (800d160 <atan+0x330>)
 800d04a:	4606      	mov	r6, r0
 800d04c:	460f      	mov	r7, r1
 800d04e:	2200      	movs	r2, #0
 800d050:	4620      	mov	r0, r4
 800d052:	4629      	mov	r1, r5
 800d054:	f7f3 fad0 	bl	80005f8 <__aeabi_dmul>
 800d058:	4b3e      	ldr	r3, [pc, #248]	; (800d154 <atan+0x324>)
 800d05a:	2200      	movs	r2, #0
 800d05c:	f7f3 f916 	bl	800028c <__adddf3>
 800d060:	4602      	mov	r2, r0
 800d062:	460b      	mov	r3, r1
 800d064:	4630      	mov	r0, r6
 800d066:	4639      	mov	r1, r7
 800d068:	f7f3 fbf0 	bl	800084c <__aeabi_ddiv>
 800d06c:	f04f 0a02 	mov.w	sl, #2
 800d070:	4604      	mov	r4, r0
 800d072:	460d      	mov	r5, r1
 800d074:	e743      	b.n	800cefe <atan+0xce>
 800d076:	462b      	mov	r3, r5
 800d078:	ee10 2a10 	vmov	r2, s0
 800d07c:	4939      	ldr	r1, [pc, #228]	; (800d164 <atan+0x334>)
 800d07e:	2000      	movs	r0, #0
 800d080:	f7f3 fbe4 	bl	800084c <__aeabi_ddiv>
 800d084:	f04f 0a03 	mov.w	sl, #3
 800d088:	4604      	mov	r4, r0
 800d08a:	460d      	mov	r5, r1
 800d08c:	e737      	b.n	800cefe <atan+0xce>
 800d08e:	4b36      	ldr	r3, [pc, #216]	; (800d168 <atan+0x338>)
 800d090:	4e36      	ldr	r6, [pc, #216]	; (800d16c <atan+0x33c>)
 800d092:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d096:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d09a:	e9da 2300 	ldrd	r2, r3, [sl]
 800d09e:	f7f3 f8f3 	bl	8000288 <__aeabi_dsub>
 800d0a2:	4622      	mov	r2, r4
 800d0a4:	462b      	mov	r3, r5
 800d0a6:	f7f3 f8ef 	bl	8000288 <__aeabi_dsub>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d0b2:	f7f3 f8e9 	bl	8000288 <__aeabi_dsub>
 800d0b6:	f1bb 0f00 	cmp.w	fp, #0
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	460d      	mov	r5, r1
 800d0be:	f6bf aed6 	bge.w	800ce6e <atan+0x3e>
 800d0c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0c6:	461d      	mov	r5, r3
 800d0c8:	e6d1      	b.n	800ce6e <atan+0x3e>
 800d0ca:	a51d      	add	r5, pc, #116	; (adr r5, 800d140 <atan+0x310>)
 800d0cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d0d0:	e6cd      	b.n	800ce6e <atan+0x3e>
 800d0d2:	bf00      	nop
 800d0d4:	f3af 8000 	nop.w
 800d0d8:	54442d18 	.word	0x54442d18
 800d0dc:	bff921fb 	.word	0xbff921fb
 800d0e0:	8800759c 	.word	0x8800759c
 800d0e4:	7e37e43c 	.word	0x7e37e43c
 800d0e8:	e322da11 	.word	0xe322da11
 800d0ec:	3f90ad3a 	.word	0x3f90ad3a
 800d0f0:	24760deb 	.word	0x24760deb
 800d0f4:	3fa97b4b 	.word	0x3fa97b4b
 800d0f8:	a0d03d51 	.word	0xa0d03d51
 800d0fc:	3fb10d66 	.word	0x3fb10d66
 800d100:	c54c206e 	.word	0xc54c206e
 800d104:	3fb745cd 	.word	0x3fb745cd
 800d108:	920083ff 	.word	0x920083ff
 800d10c:	3fc24924 	.word	0x3fc24924
 800d110:	5555550d 	.word	0x5555550d
 800d114:	3fd55555 	.word	0x3fd55555
 800d118:	2c6a6c2f 	.word	0x2c6a6c2f
 800d11c:	bfa2b444 	.word	0xbfa2b444
 800d120:	52defd9a 	.word	0x52defd9a
 800d124:	3fadde2d 	.word	0x3fadde2d
 800d128:	af749a6d 	.word	0xaf749a6d
 800d12c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d130:	fe231671 	.word	0xfe231671
 800d134:	3fbc71c6 	.word	0x3fbc71c6
 800d138:	9998ebc4 	.word	0x9998ebc4
 800d13c:	3fc99999 	.word	0x3fc99999
 800d140:	54442d18 	.word	0x54442d18
 800d144:	3ff921fb 	.word	0x3ff921fb
 800d148:	440fffff 	.word	0x440fffff
 800d14c:	7ff00000 	.word	0x7ff00000
 800d150:	3fdbffff 	.word	0x3fdbffff
 800d154:	3ff00000 	.word	0x3ff00000
 800d158:	3ff2ffff 	.word	0x3ff2ffff
 800d15c:	40038000 	.word	0x40038000
 800d160:	3ff80000 	.word	0x3ff80000
 800d164:	bff00000 	.word	0xbff00000
 800d168:	0800f6e0 	.word	0x0800f6e0
 800d16c:	0800f6c0 	.word	0x0800f6c0

0800d170 <fabs>:
 800d170:	ec51 0b10 	vmov	r0, r1, d0
 800d174:	ee10 2a10 	vmov	r2, s0
 800d178:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d17c:	ec43 2b10 	vmov	d0, r2, r3
 800d180:	4770      	bx	lr
 800d182:	0000      	movs	r0, r0
 800d184:	0000      	movs	r0, r0
	...

0800d188 <nan>:
 800d188:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d190 <nan+0x8>
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	00000000 	.word	0x00000000
 800d194:	7ff80000 	.word	0x7ff80000

0800d198 <_init>:
 800d198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19a:	bf00      	nop
 800d19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d19e:	bc08      	pop	{r3}
 800d1a0:	469e      	mov	lr, r3
 800d1a2:	4770      	bx	lr

0800d1a4 <_fini>:
 800d1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a6:	bf00      	nop
 800d1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1aa:	bc08      	pop	{r3}
 800d1ac:	469e      	mov	lr, r3
 800d1ae:	4770      	bx	lr
